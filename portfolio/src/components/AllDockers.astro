---
import ProjectCard from '@components/ProjectCard.astro';
import DockerIcon from '@icons/DockerIcon.astro';

interface Props {
    languaje: string,
}

const {
    languaje,
} = Astro.props;

const { last_dockers } = await import('@portfolio/last_dockers.json');
const { sticky_top_positions } = await import('@portfolio/consts.json');

// Get list of all dockers
const dockers_list = [];
for (const docker in last_dockers) {
    if (docker.includes('docker') && docker != 'view_all_dockers') {
        dockers_list.push(docker);
    }
}

if ( languaje === 'es' ) {
    var dockers_title = last_dockers.title.es;
	var section_description = "Los espacios de Hugging Face nos permite ejecutar modelos con demos muy sencillas, pero qué pasa si la demo se rompe? O si el usuario la elimina? Por ello he creado contenedores docker con algunos espacios interesantes, para poder usarlos de manera local, pase lo que pase";
} else if ( languaje === 'en' ) {
    var dockers_title = last_dockers.title.en;
	var section_description = "Hugging Face spaces allow us to run models with very simple demos, but what if the demo breaks? Or if the user deletes it? That's why I've created docker containers with some interesting spaces, to be able to use them locally, whatever happens";
} else if ( languaje === 'pt' ) {
    var dockers_title = last_dockers.title.pt;
	var section_description = "Os espaços do Hugging Face nos permitem executar modelos com demos muito simples, mas e se a demo quebrar? Ou se o usuário a excluir? É por isso que criei contêineres docker com alguns espaços interessantes, para poder usá-los localmente, aconteça o que acontecer";
}

const go_to_site_no_transparent_target = '_blank';

const sticky_top_default=sticky_top_positions.sticky_top_default;
const sticky_top_649px=sticky_top_positions.sticky_top_649px;
const sticky_top_418px=sticky_top_positions.sticky_top_418px;
const sticky_top_334px=sticky_top_positions.sticky_top_334px;
const sticky_top_315px=sticky_top_positions.sticky_top_315px;
const sticky_top_229px=sticky_top_positions.sticky_top_229px;
---

<section class="dockers">
    <h1>{dockers_title} <DockerIcon /></h1>
	<p>{section_description}</p>
    <div>
        {languaje === 'es' && (
            <>
                {dockers_list.reverse().map((dockerKey) => (
                    <ProjectCard 
                        title={last_dockers[dockerKey].title.es} 
                        description={last_dockers[dockerKey].description.es} 
                        image_path={last_dockers[dockerKey].image_path.es} 
                        image_hover_path={last_dockers[dockerKey].image_hover_path.es}
                        project_link={last_dockers[dockerKey].project_link.es} 
                        code_link={last_dockers[dockerKey].code_link.es}
                        languaje={languaje}
						go_to_site_no_transparent_target={go_to_site_no_transparent_target}
                    />
                ))}
            </>
        )}
    </div>
</section>

<style define:vars={{
	sticky_top_default,
	sticky_top_649px,
	sticky_top_418px,
	sticky_top_334px,
	sticky_top_315px,
	sticky_top_229px,
}}>
    .dockers {
		display: flex;
		flex-direction: column;
		justify-content: space-between;
		gap: 50px;
		width: 100%;
	}



	.dockers > div {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		gap: 10px;
		justify-content: space-between;
	}
	@media (max-width: 1500px) {
		.dockers > div {
			justify-content: space-around;;
		}
	}

	h1 {
		position: sticky;
		top: var(--sticky_top_default);
        z-index: 1;
		margin-bottom: 0px;
		padding-bottom: 0px;
	}

	@media (max-width: 649px) {
		h1 {
			top: var(--sticky_top_649px);
		}
	}

	@media (max-width: 418px) {
		h1 {
			top: var(--sticky_top_418px);
		}
	}

	@media (max-width: 334px) {
		h1 {
			top: var(--sticky_top_334px);
		}
	}

	@media (max-width: 315px) {
		h1 {
			top: var(--sticky_top_315px);
		}
	}

	@media (max-width: 229px) {
		h1 {
			top: var(--sticky_top_229px);
		}
	}
</style>