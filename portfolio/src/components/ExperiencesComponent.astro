---
interface Props {
    languaje: string,
}

const {
    languaje,
} = Astro.props;

const { experiences } = await import('@portfolio/last_experience.json');
const { last_posts } = await import('@portfolio/last_posts.json');
const { color_palette } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');

// Map of technology logos
const technologyLogos = {
    "Python": "/icons/python-logo-only.svg",
    "Pytorch": "/icons/pytorch-logo.svg",
    "TensorRT": "/icons/tensorrt-logo.webp",
    "HuggingFace": "/icons/hf-logo-official.svg",
    "Nvidia Jetson": "/icons/nvidia-jetson-logo.webp",
    "YOLO": "/icons/yolo-logo.webp",
    "Altium": "/icons/Altium_Designer_Logo.webp",
    "STM32": "/icons/stm-32-logo.webp",
    "C": "/icons/c.webp",
    "Eclipse": "/icons/eclipse-logo.webp",
    "LangChain": "/icons/langchain_icon.webp",
    "PostgreSQL": "/icons/Postgresql.webp",
    "PGVector": "/icons/pgvector.webp",
    "Ollama": "/icons/ollama-dark.svg",
    "Astro": "/icons/astro-icon-light-gradient.svg",
    "Docker": "/icons/docker.svg",
    "Terminal": "/icons/terminal.svg",
    "Git": "/icons/Git.svg",
    "Conda": "/icons/Conda.svg",
    "JavaScript": "/icons/javascript.svg",
    "TypeScript": "/icons/typescript.svg",
    "React": "/icons/React.svg",
    "Node.js": "/icons/nodejs.svg",
    "HTML": "/icons/html5.svg",
    "CSS": "/icons/css3.svg",
    "SQL": "/icons/sql.svg",
    "MongoDB": "/icons/mongodb.svg",
    "AWS": "/icons/aws.svg",
    "GCP": "/icons/gcp.svg",
    "Azure": "/icons/Azure.svg",
    "Azure Machine Learning": "/icons/azure-machine-learning-logo.webp",
    "Linux": "/icons/linux.svg",
    "Kubernetes": "/icons/kubernetes.webp",
    "Jenkins": "/icons/jenkins.svg",
    "Terraform": "/icons/terraform.svg",
    "Ansible": "/icons/ansible.svg",
    "GraphQL": "/icons/graphql.svg",
    "REST": "/icons/rest-api.svg",
    "Django": "/icons/django.svg",
    "Flask": "/icons/flask.svg",
    "FastAPI": "/icons/fastapi.svg",
    "Express": "/icons/express.svg",
    "Next.js": "/icons/nextjs.svg",
    "Vue.js": "/icons/vuejs.svg",
    "Angular": "/icons/angular.svg",
    "Redux": "/icons/redux.svg",
    "Webpack": "/icons/webpack.svg",
    "Babel": "/icons/babel.svg",
    "Jest": "/icons/jest.svg",
    "Cypress": "/icons/cypress.svg",
    "Selenium": "/icons/selenium.svg",
    "MySQL": "/icons/mysql.svg",
    "Redis": "/icons/redis.svg",
    "ElasticSearch": "/icons/elasticsearch.svg",
    "RabbitMQ": "/icons/rabbitmq.svg",
    "Kafka": "/icons/kafka.svg",
    "Nginx": "/icons/nginx.svg",
    "Apache": "/icons/apache.svg",
    "Sass": "/icons/sass.svg",
    "Less": "/icons/less.svg",
    "Tailwind": "/icons/tailwindcss.svg",
    "Bootstrap": "/icons/bootstrap.svg",
    "Material-UI": "/icons/material-ui.svg",
    "Figma": "/icons/figma.svg",
    "Sketch": "/icons/sketch.svg",
    "Adobe XD": "/icons/adobe-xd.svg",
    "Photoshop": "/icons/photoshop.svg",
    "Illustrator": "/icons/illustrator.svg",
    "Jira": "/icons/jira.svg",
    "Confluence": "/icons/confluence.svg",
    "Trello": "/icons/trello.svg",
    "Slack": "/icons/slack.svg",
    "GitHub": "/icons/github.svg",
    "GitHub Actions": "/icons/GitHub_actions.webp",
    "GitLab": "/icons/gitlab.svg",
    "Bitbucket": "/icons/bitbucket.svg"
};

// Get list of all experience items
const experiences_list = [];
for (const experience in experiences) {
    if (experience.includes('experience') && experience != 'view_full_experience_text' && experience != 'view_full_experience_href') {
        experiences_list.push(experience);
    }
}
const last_experience = experiences_list[experiences_list.length - 1];
const len_experiences_list = experiences_list.length;

const currentPath = Astro.url.pathname;

if ( languaje.toLowerCase() === 'es' ) {
    var experience = experiences.title.es;
    var responsibilities = "Responsabilidades";
    var keyAccomplishments = "Logros";
    var technologies = "Tecnologías";
    var showMore = "Mostrar más";
    var showLess = "Mostrar menos";
} else if ( languaje.toLowerCase() === 'en' ) {
    var experience = experiences.title.en;
    var responsibilities = "Responsibilities";
    var keyAccomplishments = "Key Accomplishments";
    var technologies = "Technologies";
    var showMore = "Show more";
    var showLess = "Show less";
} else if ( languaje.toLowerCase() === 'pt' ) {
    var experience = experiences.title.es;
    var responsibilities = "Responsabilidades";
    var keyAccomplishments = "Logros";
    var technologies = "Tecnologías";
    var showMore = "Mostrar mais";
    var showLess = "Mostrar menos";
}

let isCurrentPathIndex = false;
if ( currentPath !== '/' && currentPath !== '/en/' && currentPath !== '/pt-br/' ) {
    isCurrentPathIndex = false;
} else {
    isCurrentPathIndex = true;
}

const experience_card_border_color = color_palette.color_300_transparent;
const experience_card_background_color = color_palette.color_1500_transparent;
const content_color = colors.color_white;
const technology_pill_background_color = color_palette.color_900;
const technology_pill_border_color = color_palette.color_500;
const technology_pill_color = color_palette.color_100;
const toggle_button_color = color_palette.color_300;
const toggle_button_hover_color = color_palette.color_100;
---

<section>
    <h2>{experience}</h2>
    <div class="esperiencies">
        {languaje.toLowerCase() === 'es' && (
            <>
                {experiences_list.reverse().map((postKey, index) => (
                    <div class="experience-card">
                        <p class="date">{experiences[postKey].es.startDate}/{experiences[postKey].es.endDate}</p>
                        <div class="experience-content">
                            <div class="title">
                                <h3>{experiences[postKey].es.title}</h3>
                                <div class="subtitle">
                                    <a href={experiences[postKey].pt.companyLink} target="_blank" rel="nofollow noreferrer">{experiences[postKey].es.company}</a>
                                    <p>-</p>
                                    <p class="location">{experiences[postKey].es.location}</p>
                                </div>
                            </div>
                            <div class="subtitle">
                                <p class="description">{experiences[postKey].es.description}</p>
                            </div>
                            {/* Last experience or full experience page */}
                            {((postKey === last_experience && isCurrentPathIndex) || (!isCurrentPathIndex)) && (
                                <div class="details-section">
                                    <h4>{responsibilities}</h4>
                                    <ul class="experience-ul">
                                        {experiences[postKey].es.responsibilities.map((responsibility) => (
                                            <li class="resposibility">{responsibility}</li>
                                        ))}
                                    </ul>
                                    <h4>{keyAccomplishments}</h4>
                                    <ul class="experience-ul">
                                        {experiences[postKey].es.keyAccomplishments.map((keyAccomplishment) => (
                                            <li class="keyAccomplishment">{keyAccomplishment}</li>
                                        ))}
                                    </ul>
                                </div>
                            )}
                            {/* Previous experiences with collapsible */}
                            {(postKey !== last_experience && isCurrentPathIndex) && (
                                <div class="collapsible-container">
                                    <button class="toggle-button" data-index={index}>{showMore}</button>
                                    <div class="collapsible-content" id={`content-${index}`}>
                                        <h4>{responsibilities}</h4>
                                        <ul class="experience-ul">
                                            {experiences[postKey].es.responsibilities.map((responsibility) => (
                                                <li class="resposibility">{responsibility}</li>
                                            ))}
                                        </ul>
                                        <h4>{keyAccomplishments}</h4>
                                        <ul class="experience-ul">
                                            {experiences[postKey].es.keyAccomplishments.map((keyAccomplishment) => (
                                                <li class="keyAccomplishment">{keyAccomplishment}</li>
                                            ))}
                                        </ul>
                                        <h4>{technologies}</h4>
                                        <ul class="technologies-ul">
                                            {experiences[postKey].es.technologies.map((technology) => (
                                                <li class="technology">
                                                    <img 
                                                        onerror="this.style.display='none'" 
                                                        decoding="async" 
                                                        src={technologyLogos[technology] || `/icons/default-tech.svg`} 
                                                        alt={technology} 
                                                        width="40" 
                                                        height="40" 
                                                        loading="lazy"
                                                    />
                                                    <p>{technology}</p>
                                                </li>
                                            ))}
                                        </ul>
                                    </div>
                                </div>
                            )}
                            {/* Show technologies in the last experience */}
                            {(postKey === last_experience && isCurrentPathIndex) && (
                                <div class="technologies-section">
                                    <h4>{technologies}</h4>
                                    <ul class="technologies-ul">
                                        {experiences[postKey].es.technologies.map((technology) => (
                                            <li class="technology">
                                                <img 
                                                    onerror="this.style.display='none'" 
                                                    decoding="async" 
                                                    src={technologyLogos[technology] || `/icons/default-tech.svg`} 
                                                    alt={technology} 
                                                    width="40" 
                                                    height="40" 
                                                    loading="lazy"
                                                />
                                                <p>{technology}</p>
                                            </li>
                                        ))}
                                    </ul>
                                </div>
                            )}
                            {/* Show technologies in the full experience page */}
                            {(!isCurrentPathIndex) && (
                                <div class="technologies-section">
                                    <h4>{technologies}</h4>
                                    <ul class="technologies-ul">
                                        {experiences[postKey].es.technologies.map((technology) => (
                                            <li class="technology">
                                                <img 
                                                    onerror="this.style.display='none'" 
                                                    decoding="async" 
                                                    src={technologyLogos[technology] || `/icons/default-tech.svg`} 
                                                    alt={technology} 
                                                    width="40" 
                                                    height="40" 
                                                    loading="lazy"
                                                />
                                                <p>{technology}</p>
                                            </li>
                                        ))}
                                    </ul>
                                </div>
                            )}
                        </div>
                    </div>
                ))}
            </>
        )}
        {languaje.toLowerCase() === 'en' && (
        <>
            {experiences_list.reverse().map((postKey, index) => (
                <div class="experience-card">
                    <p class="date">{experiences[postKey].en.startDate}/{experiences[postKey].en.endDate}</p>
                    <div class="experience-content">
                        <div class="title">
                            <h3>{experiences[postKey].en.title}</h3>
                            <div class="subtitle">
                                <a href={experiences[postKey].pt.companyLink} target="_blank" rel="nofollow noreferrer">{experiences[postKey].en.company}</a>
                                <p>-</p>
                                <p class="location">{experiences[postKey].en.location}</p>
                            </div>
                        </div>
                        <div class="subtitle">
                            <p class="description">{experiences[postKey].en.description}</p>
                        </div>
                        {/* Last experience or full experience page */}
                        {((postKey === last_experience && isCurrentPathIndex) || (!isCurrentPathIndex)) && (
                            <div class="details-section">
                                <h4>{responsibilities}</h4>
                                <ul class="experience-ul">
                                    {experiences[postKey].en.responsibilities.map((responsibility) => (
                                        <li class="resposibility">{responsibility}</li>
                                    ))}
                                </ul>
                                <h4>{keyAccomplishments}</h4>
                                <ul class="experience-ul">
                                    {experiences[postKey].en.keyAccomplishments.map((keyAccomplishment) => (
                                        <li class="keyAccomplishment">{keyAccomplishment}</li>
                                    ))}
                                </ul>
                            </div>
                        )}
                        {/* Previous experiences with collapsible */}
                        {(postKey !== last_experience && isCurrentPathIndex) && (
                            <div class="collapsible-container">
                                <button class="toggle-button" data-index={index}>{showMore}</button>
                                <div class="collapsible-content" id={`content-${index}`}>
                                    <h4>{responsibilities}</h4>
                                    <ul class="experience-ul">
                                        {experiences[postKey].en.responsibilities.map((responsibility) => (
                                            <li class="resposibility">{responsibility}</li>
                                        ))}
                                    </ul>
                                    <h4>{keyAccomplishments}</h4>
                                    <ul class="experience-ul">
                                        {experiences[postKey].en.keyAccomplishments.map((keyAccomplishment) => (
                                            <li class="keyAccomplishment">{keyAccomplishment}</li>
                                        ))}
                                    </ul>
                                    <h4>{technologies}</h4>
                                    <ul class="technologies-ul">
                                        {experiences[postKey].en.technologies.map((technology) => (
                                            <li class="technology">
                                                <img 
                                                    onerror="this.style.display='none'" 
                                                    decoding="async" 
                                                    src={technologyLogos[technology] || `/icons/default-tech.svg`} 
                                                    alt={technology} 
                                                    width="40" 
                                                    height="40" 
                                                    loading="lazy"
                                                />
                                                <p>{technology}</p>
                                            </li>
                                        ))}
                                    </ul>
                                </div>
                            </div>
                        )}
                        {/* Show technologies in the last experience */}
                        {(postKey === last_experience && isCurrentPathIndex) && (
                            <div class="technologies-section">
                                <h4>{technologies}</h4>
                                <ul class="technologies-ul">
                                    {experiences[postKey].en.technologies.map((technology) => (
                                        <li class="technology">
                                            <img 
                                                onerror="this.style.display='none'" 
                                                decoding="async" 
                                                src={technologyLogos[technology] || `/icons/default-tech.svg`} 
                                                alt={technology} 
                                                width="40" 
                                                height="40" 
                                                loading="lazy"
                                            />
                                            <p>{technology}</p>
                                        </li>
                                    ))}
                                </ul>
                            </div>
                        )}
                        {/* Show technologies in the full experience page */}
                        {(!isCurrentPathIndex) && (
                            <div class="technologies-section">
                                <h4>{technologies}</h4>
                                <ul class="technologies-ul">
                                    {experiences[postKey].en.technologies.map((technology) => (
                                        <li class="technology">
                                            <img 
                                                onerror="this.style.display='none'" 
                                                decoding="async" 
                                                src={technologyLogos[technology] || `/icons/default-tech.svg`} 
                                                alt={technology} 
                                                width="40" 
                                                height="40" 
                                                loading="lazy"
                                            />
                                            <p>{technology}</p>
                                        </li>
                                    ))}
                                </ul>
                            </div>
                        )}
                    </div>
                </div>
            ))}
        </>
    )}
    {languaje.toLowerCase() === 'pt' && (
        <>
            {experiences_list.reverse().map((postKey, index) => (
                <div class="experience-card">
                    <p class="date">{experiences[postKey].pt.startDate}/{experiences[postKey].pt.endDate}</p>
                    <div class="experience-content">
                        <div class="title">
                            <h3>{experiences[postKey].pt.title}</h3>
                            <div class="subtitle">
                                <a href={experiences[postKey].pt.companyLink} target="_blank" rel="nofollow noreferrer">{experiences[postKey].pt.company}</a>
                                <p>-</p>
                                <p class="location">{experiences[postKey].pt.location}</p>
                            </div>
                        </div>
                        <div class="subtitle">
                            <p class="description">{experiences[postKey].pt.description}</p>
                        </div>
                        {/* Last experience or full experience page */}
                        {((postKey === last_experience && isCurrentPathIndex) || (!isCurrentPathIndex)) && (
                            <div class="details-section">
                                <h4>{responsibilities}</h4>
                                <ul class="experience-ul">
                                    {experiences[postKey].pt.responsibilities.map((responsibility) => (
                                        <li class="resposibility">{responsibility}</li>
                                    ))}
                                </ul>
                                <h4>{keyAccomplishments}</h4>
                                <ul class="experience-ul">
                                    {experiences[postKey].pt.keyAccomplishments.map((keyAccomplishment) => (
                                        <li class="keyAccomplishment">{keyAccomplishment}</li>
                                    ))}
                                </ul>
                            </div>
                        )}
                        {/* Previous experiences with collapsible */}
                        {(postKey !== last_experience && isCurrentPathIndex) && (
                            <div class="collapsible-container">
                                <button class="toggle-button" data-index={index}>{showMore}</button>
                                <div class="collapsible-content" id={`content-${index}`}>
                                    <h4>{responsibilities}</h4>
                                    <ul class="experience-ul">
                                        {experiences[postKey].pt.responsibilities.map((responsibility) => (
                                            <li class="resposibility">{responsibility}</li>
                                        ))}
                                    </ul>
                                    <h4>{keyAccomplishments}</h4>
                                    <ul class="experience-ul">
                                        {experiences[postKey].pt.keyAccomplishments.map((keyAccomplishment) => (
                                            <li class="keyAccomplishment">{keyAccomplishment}</li>
                                        ))}
                                    </ul>
                                    <h4>{technologies}</h4>
                                    <ul class="technologies-ul">
                                        {experiences[postKey].pt.technologies.map((technology) => (
                                            <li class="technology">
                                                <img 
                                                    onerror="this.style.display='none'" 
                                                    decoding="async" 
                                                    src={technologyLogos[technology] || `/icons/default-tech.svg`} 
                                                    alt={technology} 
                                                    width="40" 
                                                    height="40" 
                                                    loading="lazy"
                                                />
                                                <p>{technology}</p>
                                            </li>
                                        ))}
                                    </ul>
                                </div>
                            </div>
                        )}
                        {/* Show technologies in the last experience */}
                        {(postKey === last_experience && isCurrentPathIndex) && (
                            <div class="technologies-section">
                                <h4>{technologies}</h4>
                                <ul class="technologies-ul">
                                    {experiences[postKey].pt.technologies.map((technology) => (
                                        <li class="technology">
                                            <img 
                                                onerror="this.style.display='none'" 
                                                decoding="async" 
                                                src={technologyLogos[technology] || `/icons/default-tech.svg`} 
                                                alt={technology} 
                                                width="40" 
                                                height="40" 
                                                loading="lazy"
                                            />
                                            <p>{technology}</p>
                                        </li>
                                    ))}
                                </ul>
                            </div>
                        )}
                        {/* Show technologies in the full experience page */}
                        {(!isCurrentPathIndex) && (
                            <div class="technologies-section">
                                <h4>{technologies}</h4>
                                <ul class="technologies-ul">
                                    {experiences[postKey].pt.technologies.map((technology) => (
                                        <li class="technology">
                                            <img 
                                                onerror="this.style.display='none'" 
                                                decoding="async" 
                                                src={technologyLogos[technology] || `/icons/default-tech.svg`} 
                                                alt={technology} 
                                                width="40" 
                                                height="40" 
                                                loading="lazy"
                                            />
                                            <p>{technology}</p>
                                        </li>
                                    ))}
                                </ul>
                            </div>
                        )}
                    </div>
                </div>
            ))}
        </>
    )}
    </div>
    {languaje.toLowerCase() === 'es' && isCurrentPathIndex && (
        <a href={experiences.view_full_experience_href.es} class="view-full-experience">{experiences.view_full_experience_text.es}</a>
    )}
    {languaje.toLowerCase() === 'en' && isCurrentPathIndex && (
        <a href={experiences.view_full_experience_href.en} class="view-full-experience">{experiences.view_full_experience_text.en}</a>
    )}
    {languaje.toLowerCase() === 'pt' && isCurrentPathIndex && (
        <a href={experiences.view_full_experience_href.pt} class="view-full-experience">{experiences.view_full_experience_text.pt}</a>
    )}
</section>

<style define:vars={{
	colors,
	experience_card_border_color,
	experience_card_background_color,
	content_color,
    technology_pill_background_color,
    technology_pill_border_color,
    technology_pill_color,
    toggle_button_color,
    toggle_button_hover_color,
}}>
    .experiencies {
        padding: 0px;
        margin: 0px;
    }

    .experience-card {
        display: flex;
		flex-direction: row;
		justify-content: flex-start;
		align-items: flex-start;
		border: var(--experience_card_border_color) 1px solid;
		border-radius: 7px;
		background-color: var(--experience_card_background_color);
		box-shadow: 3px 3px 6px 0 hsla(0, 0%, 100%, 0.3);
		width: 100%;
		padding: 30px 0px;
		margin: 30px 0px;
		color: var(--content_color);
		text-decoration: none;
    }
    @media (max-width: 768px) {
        .experience-card {
            flex-direction: column;
        }
    }

    .date {
        font-size: 0.8em;
        padding-top: 7px;
        text-wrap: nowrap;
        width: 150px;
        margin-left: 10px;
    }
    @media (max-width: 768px) {
        .experience-card {
            padding: 10px 0px;
            margin: 0px;
        }
    }

    .experience-content {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-start;
        flex-wrap: wrap;
        gap: 10px;
        width: 100%;
    }

    .title {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        align-items: center;
        gap: 20px;
    }
    h3 {
        margin: 0;
        padding: 0;
    }
    .company {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        align-items: baseline;
        gap: 0px;
    }
    @media (max-width: 768px) {
        .title {
            flex-direction: column;
            align-items: flex-start;
            gap: 5px;
        }
    }

    .subtitle {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        align-items: baseline;
        gap: 20px;
    }
    .description {
        margin: 0;
        padding: 0;
        text-wrap: pretty;
    }

    p {
        margin: 0;
        padding: 0;
    }

    h4 {
        margin: 20px 0px 0px 0px;
        padding: 0px;
        text-decoration: underline;
    }

    li {
        margin: 0;
        padding: 0;
    }

    .technologies-section {
        width: 100%;
        margin-top: 20px;
    }

    .technologies-ul {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        align-items: center;
        gap: 20px;
        padding-top: 15px;
        padding-left: 0px;
    }

    .technology {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 5px;
        color: var(--technology_pill_color);
        padding: 10px 15px;
        min-width: 80px;
        text-align: center;
    }

    .technology img {
        width: 40px;
        height: 40px;
        object-fit: contain;
    }

    .technology p {
        margin: 0;
        padding: 0;
        font-size: 0.8rem;
        text-align: center;
    }

    @media (max-width: 550px) {
        .technology {
            min-width: 60px;
            padding: 8px 10px;
        }
        
        .technology img {
            width: 30px;
            height: 30px;
        }
        
        .technology p {
            font-size: 0.7rem;
        }
    }

    /* Styles for the collapsible */
    .collapsible-content {
        display: none;
        overflow: hidden;
        transition: max-height 0.3s ease-out;
    }

    .collapsible-content.active {
        display: block;
    }

    .toggle-button {
        background-color: transparent;
        color: var(--toggle_button_color);
        border: 1px solid var(--toggle_button_color);
        border-radius: 4px;
        padding: 5px 15px;
        cursor: pointer;
        margin-top: 10px;
        transition: all 0.3s ease;
    }

    .toggle-button:hover {
        background-color: var(--toggle_button_hover_color);
        color: var(--experience_card_background_color);
    }
</style>

<script>
    // Script to handle the collapsible
    document.addEventListener('DOMContentLoaded', () => {
        const toggleButtons = document.querySelectorAll('.toggle-button');
        
        // Ensure all contents are folded by default
        const collapsibleContents = document.querySelectorAll('.collapsible-content');
        collapsibleContents.forEach(content => {
            content.classList.remove('active');
            content.style.display = 'none';
        });
        
        toggleButtons.forEach(button => {
            button.addEventListener('click', () => {
                const index = button.getAttribute('data-index');
                const content = document.getElementById(`content-${index}`);
                
                // Toggle the active class to show/hide the content
                content.classList.toggle('active');
                
                // Show/hide the content explicitly
                if (content.classList.contains('active')) {
                    content.style.display = 'block';
                    button.textContent = button.textContent.replace('Mostrar más', 'Mostrar menos')
                                                          .replace('Show more', 'Show less')
                                                          .replace('Mostrar mais', 'Mostrar menos');
                } else {
                    content.style.display = 'none';
                    button.textContent = button.textContent.replace('Mostrar menos', 'Mostrar más')
                                                          .replace('Show less', 'Show more')
                                                          .replace('Mostrar menos', 'Mostrar mais');
                }
            });
        });
    });
</script>