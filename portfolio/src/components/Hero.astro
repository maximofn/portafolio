---
interface Props {
    languaje: string,
}

const {
    languaje,
} = Astro.props;

const { maximofn_photo_path } = await import('@portfolio/consts.json');
const { maximofn_photo_path_horizontal } = await import('@portfolio/consts.json');
const { metadata_page } = await import('@portfolio/consts.json');
const { about_me } = await import('@portfolio/hero_texts.json');
const { last_posts } = await import('@portfolio/last_posts.json');
const { last_projects } = await import('@portfolio/last_projects.json');
const { last_dockers } = await import('@portfolio/last_dockers.json');
const { last_datasets } = await import('@portfolio/last_datasets.json');
const { last_tips } = await import('@portfolio/last_tips.json');
const { color_palette } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');

const counter_string_color = color_palette.color_500;
const about_me_description5_color = colors.color_light_white;
const about_me_call_to_action_color = color_palette.color_500;

if ( languaje.toLowerCase() === 'es' ) {
	var posts_string = 'Posts';
	var projects_string = 'Proyectos';
	var dockers_string = 'Dockers IA';
	var tips_string = 'Tips';
	var datasets_string = 'Datasets';
	var about_me_title = about_me.title.es;
	var about_me_description1 = about_me.description1.es;
	var about_me_description2 = about_me.description2.es;
	var about_me_description3 = about_me.description3.es;
	var about_me_description4 = about_me.description4.es;
	var about_me_description5 = about_me.description5.es;
	var about_me_call_to_action = about_me.call_to_action.es;
} else if ( languaje.toLowerCase() === 'en' ) {
	var posts_string = 'Posts';
	var projects_string = 'Projects';
	var dockers_string = 'AI Dockers';
	var tips_string = 'Tips';
	var datasets_string = 'Datasets';
	var about_me_title = about_me.title.en;
	var about_me_description1 = about_me.description1.en;
	var about_me_description2 = about_me.description2.en;
	var about_me_description3 = about_me.description3.en;
	var about_me_description4 = about_me.description4.en;
	var about_me_description5 = about_me.description5.en;
	var about_me_call_to_action = about_me.call_to_action.en;
} else if ( languaje.toLowerCase() === 'pt' ) {
	var posts_string = 'Posts';
	var projects_string = 'Projetos';
	var dockers_string = 'Dockers IA';
	var tips_string = 'Tips';
	var datasets_string = 'Datasets';
	var about_me_title = about_me.title.pt;
	var about_me_description1 = about_me.description1.pt;
	var about_me_description2 = about_me.description2.pt;
	var about_me_description3 = about_me.description3.pt;
	var about_me_description4 = about_me.description4.pt;
	var about_me_description5 = about_me.description5.pt;
	var about_me_call_to_action = about_me.call_to_action.pt;
}

// Get number of posts
let posts_number = 0;
for (const post in last_posts) {
    if (post.includes('post') && post != 'view_last_posts' && post != 'posts_page_link') {
        posts_number++;
    }
}

// Get number of projects
let projects_number = 0;
for (const project in last_projects) {
    if (project.includes('project') && project != 'view_last_projects' && project != 'title' && project != 'have_you_seen_these_projects' && project != 'url' && project != 'view_all_projects') {
        projects_number++;
    }
}

// Get number of dockers
let dockers_number = 0;
for (const docker in last_dockers) {
    if (docker.includes('docker') && docker != 'view_all_dockers' && docker != 'title') {
        dockers_number++;
    }
}

// Get number of tips
let tips_number = 0;
for (const tip in last_tips) {
    if (tip.includes('tip') && tip != 'Do_you_want_to_improve_with_these_tips' && tip != 'view_last_tips' && tip != 'tips_page_link') {
        tips_number++;
    }
}

// Get number of datasets
let datasets_number = 0;
for (const dataset in last_datasets) {
    if (dataset.includes('dataset') && dataset != 'view_more_datasets' && dataset != 'datasets_page_link') {
        datasets_number++;
    }
}
---

<section class="hero">
    <div class="hero_info">
        <h1>{about_me_title}<br><span>{metadata_page.title}</span></h1>
        <p>{about_me_description1}<span class="about_me_description2">{about_me_description2}</span>{about_me_description3}<span class="about_me_description4">{about_me_description4}</span></p>
        <p class="about_me_description5">{about_me_description5}</p>
        <p class="about_me_call_to_action">{about_me_call_to_action}</p>
		<div class="counter-container">
			<div class="counter">
				<p class="counter-string">{posts_string}</p>
				<div class="value" akhi={posts_number}>{posts_number}</div>
			</div>
			<div class="counter">
				<p class="counter-string">{projects_string}</p>
				<div class="value" akhi={projects_number}>{projects_number}</div>
			</div>
			<div class="counter">
				<p class="counter-string">{dockers_string}</p>
				<div class="value" akhi={dockers_number}>{dockers_number}</div>
			</div>
			<div class="counter">
				<p class="counter-string">{tips_string}</p>
				<div class="value" akhi={tips_number}>{tips_number}</div>
			</div>
			<div class="counter">
				<p class="counter-string">{datasets_string}</p>
				<div class="value" akhi={datasets_number}>{datasets_number}</div>
			</div>
		</div>
    </div>
    <div class="avatar-container">
		<picture>
			<source media="(min-width:1011px)" srcset={maximofn_photo_path} width="291" height="436" type="image/webp" />
			<source media="(min-width:557px)" srcset={maximofn_photo_path_horizontal} width="512" height="395" type="image/webp" />
        	<img onerror="this.parentNode.removeChild(this)" onerror="this.parentNode.removeChild(this)" decoding="async" class="avatar-img" src={maximofn_photo_path} width="291" height="436" alt={metadata_page.title} />
		</picture>
    </div>
</section>

<style define:vars={{
	counter_string_color,
	about_me_description5_color,
	about_me_call_to_action_color,
}}>
	.hero {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		flex-flow: wrap-reverse;
		justify-content: space-between;;
		align-items: center;
		gap: 10px;
		width: 100%;
		margin-top: 100px;
	}
	@media (max-width: 1010px) {
		.hero {
			align-content: center;
			margin-top: 0;
			flex-direction: column;
			min-height: 100vh;
		}
	}

	.hero img {
		display: flex;
	}

	.hero_info {
		margin-bottom: 10px;
		max-width: 700px;
	}
	@media (max-width: 1010px) {
		.hero_info {
			display: flex;
			flex-direction: column;
			justify-content: flex-start;
			padding: 0 20px;
			min-height: 100vh;
			margin-bottom: 0;
			text-align: center;
			box-sizing: border-box;
			width: 100%;
		}
	}

	@media (max-width: 1010px) {
		.hero_info h1 {
			margin: 0px 0px 30px 0px;
		}
	}

	.hero_info p {
		font-size: x-large;
		line-height: 1.5;
	}
	@media (max-width: 1010px) {
		.hero_info p {
			max-width: 100%;
			word-wrap: break-word;
			overflow-wrap: break-word;
			margin: 0px 0px 20px 0px;
		}
	}

	.hero_info p span {
		font-weight: bold;
	}

	.about_me_description2 {
		color: #8c8ee3;
	}

	.about_me_description4 {
		color: #bc5f96;
	}

	.hero_info h1 span {
		color: rgba(232, 230, 227, 0);
		-webkit-text-fill-color: transparent;
		background-image: linear-gradient(90deg, rgb(124, 7, 91), rgb(45, 6, 137));
		background-clip: text;
	}

	.about_me_description5, .about_me_call_to_action {
		color: var(--about_me_description5_color);
	}

	.avatar-container {
		margin-inline: auto;
	}
	@media (max-width: 1010px) {
		.avatar-container {
			width: 100%;
			display: flex;
			justify-content: center;
			align-items: center;
		}
	}

	.avatar-img {
		max-width: 291px;
		height: auto;
		width: 100%;
		border-radius: 7px;
	}
	@media (max-width: 1010px) {
		.avatar-img {
			max-width: 512px;
		}
	}

	.counter-container {
		display: flex;
		justify-content: space-around;
		flex-wrap: wrap;
		align-items: center;
		gap: 20px;
		margin-top: 30px;
	}

	.counter {
		display: flex;
		flex-direction: column;
		align-items: center;
	}

	.counter-string {
		color: var(--counter_string_color);
		font-weight: bold;
	}

	.value {
		font-size: 30px;
		display: block;
		font-weight: bold;
		color: #fff;
	}
</style>

<script>
	let animated = false;
	let index_of_counter = -1;
	// Whait until the DOM is loaded
	document.addEventListener('astro:page-load', () => {
		const counters = document.querySelectorAll('.value');
		const animationTime = 1000; // Time in milliseconds
  
		const options = {
			root: null, // Viewport by default
			rootMargin: '0px', // No margin
			threshold: 0.99 // percentage of the element that must be visible to trigger the animation
		};
  
		// Function to animate the counter
		const animateCounter = (counter) => {
			const targetValue = parseInt(counter.getAttribute('akhi'));
			let currentValue = 0;
			const increment = 1;
			const timeout = animationTime / targetValue;
  
			const updateCounter = () => {
				currentValue += increment;
				counter.innerText = currentValue;
		
				if (currentValue < targetValue) {
					setTimeout(updateCounter, timeout);
				} else {
					counter.innerText = targetValue;
				}
			};
	
			updateCounter();
			index_of_counter = Array.from(counters).indexOf(counter);
			if (index_of_counter === counters.length - 1) {
				animated = true;
			}
		};
  
		// Create the observer
		const observer = new IntersectionObserver((entries) => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					setTimeout(() => {
							// The element is visible, we animate the counter
							if (!animated)
								animateCounter(entry.target);
						}, 
						100
					);
				}
				else {
					animated = false;
				}
			});
		}, options);
  
		// Observe each counter
		counters.forEach(counter => {
			observer.observe(counter);
			console.log('Counters observed');
		});

		// Function to reset and re-observe counters
		const resetCounters = () => {
			counters.forEach(counter => {
				counter.innerText = '0';
				observer.observe(counter);
				console.log('Counters reset');
			});
		};

		// Initial reset and observe
		resetCounters();
	});
</script>