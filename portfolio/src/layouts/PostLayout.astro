---
import Layout from '@layouts/Layout.astro';
import LastPosts_es from '@components/lastPostsComponents/LastPosts_es.astro';

const { social_links } = await import('@portfolio/consts.json');
const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { color_palette } = await import('@portfolio/consts.json');
const { max_width } = await import('@portfolio/consts.json');
const { max_width_pre } = await import('@portfolio/consts.json');
const { sticky_top_positions } = await import('@portfolio/consts.json');

interface Props {
	title: string;
	languaje: string;
	description: string;
	keywords: string;
    author: string;
	theme_color: string;
	end_url: string;
    image_path: string;
    image_width: string;
    image_height: string;
    image_extension: string;
    robots: string;
    article_date: string;
}

const { 
	title,
	languaje,
	description,
	keywords,
    author,
	theme_color,
	end_url,
    image_path,
    image_width,
    image_height,
    image_extension,
    robots = "index, follow",
    article_date = "",
} = Astro.props;

const currentPath = Astro.url.pathname;
const all_pages_list = await Astro.glob('../pages/*.astro');
// get all pages url
const pages = all_pages_list.map(page => page.url);

const page_title = metadata_page.title + " - " + title;
const url = social_links.portfolio_link_external + "/" + end_url;

const inline_code_block_background_color = color_palette.color_700;
const inline_code_block_border_color = color_palette.color_500;
const code_block_background_color = color_palette.color_950;
const code_block_font_color = colors.color_white;
const code_block_border_color = color_palette.color_700;
const output_block_background_color = color_palette.color_950;
const a_font_color = colors.color_white;
const generated_images_border_color = color_palette.color_950;
const generated_images_box_shadow_color = color_palette.color_500;
const copy_button_hover_background_color = color_palette.color_900;

const sticky_top_default=sticky_top_positions.sticky_top_default;
const sticky_top_649px=sticky_top_positions.sticky_top_649px;
const sticky_top_418px=sticky_top_positions.sticky_top_418px;
const sticky_top_334px=sticky_top_positions.sticky_top_334px;
const sticky_top_315px=sticky_top_positions.sticky_top_315px;
const sticky_top_229px=sticky_top_positions.sticky_top_229px;
---

<Layout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={author}
    theme_color={theme_color}
    url={url}
    icon={metadata_page.icon}
    robots={robots}
    og_type="article"
    page_image={image_path}
    page_image_width={image_width}
    page_image_height={image_height}
    page_image_extension={image_extension}
    article_date={article_date}
>

    <main class="post-container">
        <header class="post-container-header">
            <h1>{title}</h1>
            <img src={image_path} alt={title} width=auto height=300px />
        </header>

        <slot class="post-content"/>

        <div>
            <p>Leer más:</p>
            <p>{currentPath}</p>
            <p>{all_pages_list.url}</p>
            <p>{pages}</p>
            <p>No incluir {end_url}</p>
            <LastPosts_es section_title="Leer más"></LastPosts_es>
        </div>
    </main>
    

</Layout>

<style is:global define:vars={{
	max_width,
	max_width_pre,
    inline_code_block_background_color,
    inline_code_block_border_color,
    code_block_background_color,
    code_block_font_color,
    code_block_border_color,
    output_block_background_color,
    a_font_color,
    generated_images_border_color,
    generated_images_box_shadow_color,
    copy_button_hover_background_color,
	sticky_top_default,
	sticky_top_649px,
	sticky_top_418px,
	sticky_top_334px,
	sticky_top_315px,
	sticky_top_229px,
}}>

    .post-container {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 100px;
    }

    .post-container-header {
        display: flex;
        flex-direction: row;
        justify-content: space-evenly;
        align-items: center;
        width: 100%;
    }

    .post-body-post {
        display: flex;
        flex-direction: row;
        align-content: flex-start;
        justify-content: space-between;
        align-items: flex-start;
        max-width: var(--max_width);
    }

    .post-index {
        display: flex;
        flex-direction: column;
        gap: 10px;
        position: sticky;
        top: var(--sticky_top_default);
        max-width: 150px;
        max-height: 100vh;
        overflow-y: auto;
        margin-top: 100px;
    }
    @media (max-width: 649px) {
        .post-index {
            top: var(--sticky_top_649px);
        }
    }
    @media (max-width: 418px) {
        .post-index {
            top: var(--sticky_top_418px);
        }
    }
    @media (max-width: 334px) {
        .post-index {
            top: var(--sticky_top_334px);
        }
    }
    @media (max-width: 315px) {
        .post-index {
            top: var(--sticky_top_315px);
        }
    }
    @media (max-width: 229px) {
        .post-index {
            top: var(--sticky_top_229px);
        }
    }
    .post-index a {
        text-decoration: none;
    }
    .post-index h1, .post-index h2, .post-index h3, .post-index h4, .post-index h5, .post-index h6 {
        margin-top: 0px;
        margin-bottom: 0px;
    }
    .post-index h2 {
        font-size: medium;
    }
    .post-index h3 {
        padding-left: 6px;
        font-size: small;
    }
    .post-index h4 {
        padding-left: 12px;
        font-size: smaller;
    }
    .post-index h5 {
        padding-left: 18px;
        font-size: x-small;
    }
    .post-index h6 {
        padding-left: 24px;
        font-size: x-small;
    }

    .post-content{
        /* border-left: 1px solid var(--code_block_border_color); */
        padding-left: 20px;
        margin-left: 50px;
    }
    .post-content h2, .post-content h3 {
        position: static;
    }

    {/* Code in text */}
    code, .section-block-markdown-cell .highlight {
        background-color: var(--inline_code_block_background_color);
        color: var(--code_block_font_color);
        border: 1px solid var(--inline_code_block_border_color);
        padding: 0px 3px;
        border-radius: 5px;
        opacity: 0.8;
    }
    .section-block-markdown-cell .highlight {
        padding-left: 30px;
        padding-top: 3px;
        padding-bottom: 3px;
        margin: 20px 0px;
    }

    {/* jupyter code cell */}
    .section-block-code-cell- {
        width: 100%;
        max-width: var(--max_width);
    }    
    .input-code {
        background-color: var(--code_block_background_color);
        color: var(--code_block_font_color);
        border: 1px solid var(--code_block_border_color);
        padding: 3px;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-start;
        gap: 10px;
        font: 1rem 'Fira Code', monospace;
        padding: 10px 2px 20px 20px;
        border-radius: 6px;
    }
    pre {
        overflow: auto;
        max-width: var(--max_width_pre);
    }

    {/* Copy button */}
    header {
		display: flex;
		flex-direction: row;
		justify-content: flex-end;
		align-items: center;
		align-content: flex-end;
		gap: 10px
	}
    .input_area header {
        align-self: flex-end;
    }
    .input_area img {
        align-self: flex-end;
        z-index: 1;
        border-radius: 6px;
    }
    .input_area img:hover {
        background-color: var(--copy_button_hover_background_color);
    }
    .copy-button {
        margin: 0px;
        padding: 10px;
        /* margin-right: 10px; */
        max-width: fit-content;
        max-height: fit-content;
		border: none;
        background-color: transparent;
        cursor: pointer;
	}

    {/* jupyter output */}
    .output-wrapper {
        // background-color: var(--output_block_background_color);
        color: var(--code_block_font_color);
        border: 1px solid var(--code_block_border_color);
        padding: 3px 0px 3px 30px;
        border-radius: 5px;
        margin-top: 1px;
    }

    {/* Execution number */}
    .prompt-output-prompt {
        color: transparent;
    }

    {/* anchor */}
    a {
        color: var(--a_font_color);
    }

    {/* code style */}
    .ansi-blue-fg {
        color: #9797ff; /* blue */
    }
    .ansi-cyan-fg {
        color: cyan;    /* cyan */
    }
    .ansi-green-fg, .ansi-green-intense-fg {
        color: #50cb50; /* green */
    }
    .ansi-bold {
        font-weight: bold;
    }
    .ansi-red-fg {
        color: #fd7d7d; /* red */
        font-weight: bold;
    }
    .ansi-yellow-fg {
        color: yellow;  /* yellow */
    }
    .ansi-magenta-fg {
        color: #ff57ff; /* magenta */
    }
    .ansi-white-fg {
        color: white;   /* white */
    }
    .ansi-black-fg {
        color: black;   /* black */
    }
    .bp, .nb {
        color: #87c1dd; /* blue */
    }
    .c1 {
        color: #9bc77d; /* green */
    }
    .fm, .nf {
        color: #dfdf86; /* yellow */
    }
    .k, .kn, .si {
        color: #ff8fff; /* magenta */
    }
    .kc, .ow, .sa {
        color: #9bbaff; /* blue */
    }
    .mf, .mi, .nd {
        color: #ffffa6; /* yellow */
    }
    .n, .vm {
        color: #a2c9db; /* blue */
    }
    .nc, .ne, .nn {
        color: #79d779; /* green */
    }
    .o {
        color: white;   /* white */
    }
    .p, .se {
        color: yellow;  /* yellow */
    }
    .s1, .s2, .sd {
        color: #ffa63a; /* orange */
    }
    .w {
    }

    .post-body-post h1 {
        display: none;
    }
    
</style>

<!-- <script>
	const codeBlock = document.querySelectorAll('.input_area'); 
  
	codeBlock.forEach(block => {
		const buttonCopy = block.querySelector('.copy-button');
		const codeLines = block.querySelectorAll('code'); 
  
		buttonCopy.addEventListener('click', () => {
			let textForCopy = '';
	
			codeLines.forEach(line => {
				textForCopy += line.textContent + '\n';
			});
			// Remove last '\n'
			textForCopy = textForCopy.slice(0, -1);
	
			navigator.clipboard.writeText(textForCopy)
			.then(() => {
				// Change the text of the button
				buttonCopy.textContent = 'Copied!'; 
				setTimeout(() => {
					buttonCopy.textContent = 'Copy';
				}, 1500); 
			})
			.catch(err => {
				console.error('Error copying text: ', err);
			});
		});
	});
</script> -->

