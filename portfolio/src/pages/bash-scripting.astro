---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Bash scripting';
const end_url = 'bash-scripting';
const description = 'Siéntete un programador de la old school 🐧 con este post sobre bash scripting';
const keywords = 'bash, scripting, linux, old school, terminal';
const languaje = 'ES';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/bash-scripting.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=520
    image_height=245
    image_extension=webp
    article_date=2023-02-01+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Carpeta-con-scripts"><h2>Carpeta con scripts</h2></a>
      <a class="anchor-link" href="#Primer-script"><h2>Primer script</h2></a>
      <a class="anchor-link" href="#Especificaci%C3%B3n-del-binario-de-ejecuci%C3%B3n"><h3>Especificación del binario de ejecución</h3></a>
      <a class="anchor-link" href="#Comentarios-en-scripts-de-bash"><h3>Comentarios en scripts de bash</h3></a>
      <a class="anchor-link" href="#Imprimir-por-pantalla-con-el-comando-echo"><h3>Imprimir por pantalla con el comando <code>echo</code></h3></a>
      <a class="anchor-link" href="#Declaraci%C3%B3n-de-variables"><h2>Declaración de variables</h2></a>
      <a class="anchor-link" href="#Alcande-de-las-variables"><h3>Alcande de las variables</h3></a>
      <a class="anchor-link" href="#Exportaci%C3%B3n-de-variables"><h4>Exportación de variables</h4></a>
      <a class="anchor-link" href="#Tipos-de-operadores"><h2>Tipos de operadores</h2></a>
      <a class="anchor-link" href="#Paso-de-argumentos"><h2>Paso de argumentos</h2></a>
      <a class="anchor-link" href="#Ejecutar-comandos-y-guardarlos-en-una-variable"><h2>Ejecutar comandos y guardarlos en una variable</h2></a>
      <a class="anchor-link" href="#Debugging"><h2>Debugging</h2></a>
      <a class="anchor-link" href="#Obtener-informaci%C3%B3n-del-usuario"><h2>Obtener información del usuario</h2></a>
      <a class="anchor-link" href="#Obtener-informaci%C3%B3n-mediante-los-comandos-echo-y-read"><h3>Obtener información mediante los comandos <code>echo</code> y <code>read</code></h3></a>
      <a class="anchor-link" href="#Obtener-informaci%C3%B3n-solo-mediante-el-comando-read"><h3>Obtener información solo mediante el comando <code>read</code></h3></a>
      <a class="anchor-link" href="#Validar-la-informaci%C3%B3n-del-usuario"><h2>Validar la información del usuario</h2></a>
      <a class="anchor-link" href="#If-else"><h2>If else</h2></a>
      <a class="anchor-link" href="#Expresiones-condicionales"><h2>Expresiones condicionales</h2></a>
      <a class="anchor-link" href="#Sentencia-case"><h2>Sentencia <code>case</code></h2></a>
      <a class="anchor-link" href="#Arrays"><h2>Arrays</h2></a>
      <a class="anchor-link" href="#Bucle-for"><h2>Bucle <code>for</code></h2></a>
      <a class="anchor-link" href="#Bucle-while"><h2>Bucle <code>while</code></h2></a>
      <a class="anchor-link" href="#Control-de-flujo-con-break-y-continue"><h2>Control de flujo con <code>break</code> y <code>continue</code></h2></a>
      <a class="anchor-link" href="#Funciones"><h2>Funciones</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Bash-scripting">Bash scripting<a class="anchor-link" href="#Bash-scripting"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 0" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Carpeta-con-scripts">Carpeta con scripts<a class="anchor-link" href="#Carpeta-con-scripts"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 1" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para realizar este post vamos a crear una carpeta donde vamos a guardar todos los scripts</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>scripts_bash',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h2 id="Primer-script">Primer script<a class="anchor-link" href="#Primer-script"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 2" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Especificaci%C3%B3n-del-binario-de-ejecuci%C3%B3n">Especificación del binario de ejecución<a class="anchor-link" href="#Especificaci%C3%B3n-del-binario-de-ejecuci%C3%B3n"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 3" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En linux se puede indicar con qué programa ejecutar un archivo poniendo en la primera linea <code>#!&lt;ruta binario&gt;</code>, por ejemplo, si creamos un <code>.py</code> podemos indicar que se tiene que ejecutar con python poniendo en la primera linea <code>#!/usr/bin/python3</code>. En nuestro, como estamos haciendo un script de la terminal ponemos en la primera linea <code>#!/bin/bash</code>.</p>
      <p>Ahora si se le dan permisos de ejecución al archivo, se puede ejecutar directamente sin indicar el programa con el que se tiene que ejecutar. Es decir, el <code>.py</code> ya no necesita ser ejecutado mediante <code>python script.py</code>, sino que se puede ejecutar mediante <code>.script.py</code>. En nuestro caso, en vez de ejecutar el archivo mediante <code>bash script.sh</code> podemos ejecutarlo mediante <code>./script.sh</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Comentarios-en-scripts-de-bash">Comentarios en scripts de bash<a class="anchor-link" href="#Comentarios-en-scripts-de-bash"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 4" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos introducir un comentario bastaría con empezar la linea con <code>#</code>.</p>
      <div class="highlight"><pre><span></span><span class="c1"># Esto es un comentario de una sola línea</span>
      </pre></div>
      <p>Si lo que queremos es introducir varias líneas de comentarios tenemos que empezar con <code>: '</code> y terminar con <code>'</code></p>
      <div class="highlight"><pre><span></span>:<span class="w"> </span><span class="s1">'</span>
      <span class="s1">Este es un comentario de varias líneas</span>
      <span class="s1">que se extiende a través de varias líneas.</span>
      <span class="s1">'</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Imprimir-por-pantalla-con-el-comando-echo">Imprimir por pantalla con el comando <code>echo</code><a class="anchor-link" href="#Imprimir-por-pantalla-con-el-comando-echo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 5" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos imprimir por pantalla utilizamos el comando <code>echo</code> seguido de lo que queramos imprimir</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>mkdir<span class="w"> </span>scripts_bash',
          '</span><span class="o">%%writefile</span> scripts_bash/01_primerScript.sh',
          '<span class="ch">#!/bin/bash</span>',
          '<span class="c1"># Comentario de una sola linea</span>',
          '<span class="p">:</span> <span class="s1">\'</span>',
          '<span class="n">Comentario</span> <span class="n">de</span> <span class="n">varias</span>',
          '<span class="n">lineas</span>',
          '<span class="s1">\'</span>',
          '<span class="n">echo</span> <span class="s2">"Hola mundo"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/01_primerScript.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Damos permisos de ejecución y ejecutamos el script</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/01_primerScript.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/01_primerScript.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola mundo',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Declaraci%C3%B3n-de-variables">Declaración de variables<a class="anchor-link" href="#Declaraci%C3%B3n-de-variables"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 6" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hay dos tipos de variables, las <code>variables de usuario</code> y las <code>variables de entorno</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para crear una variable basta con declararla introduciendo el nombre que queremos, seguido de <code>=</code> y el valor</p>
      <p>Para imprimir el valor de una variable con <code>echo</code>, se tiene que referenciar a ella mediante `$<nombre de="" variable=""></nombre></p>
      <div class="highlight"><pre><span></span><span class="nb">echo</span><span class="w"> </span><span class="s2">"Variable = </span>$<span class="s2">&lt;nombre de variable&gt;</span>
      </pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/02_variables.sh',
          '<span class="ch">#!/bin/bash</span>',
          '<span class="n">opcion</span><span class="o">=</span><span class="mi">1</span>',
          '<span class="n">nombre</span><span class="o">=</span><span class="s2">"Juan"</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Opcion: $opcion"</span>',
          '<span class="n">echo</span> <span class="s2">"Nombre: $nombre"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/02_variables.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/02_variables.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/02_variables.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Opcion: 1',
          'Nombre: Juan',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Alcande-de-las-variables">Alcande de las variables<a class="anchor-link" href="#Alcande-de-las-variables"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 7" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Las variables creadas solo son accesibles desde el script, es decir, su alcance es dentro del script</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Exportaci%C3%B3n-de-variables">Exportación de variables<a class="anchor-link" href="#Exportaci%C3%B3n-de-variables"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 8" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos exportar variables para que estén accesibles por otros scrips, para ello primero exportamos la variable mediante el comando <code>export</code> y ejecutamos llamamos, dentro del script, al segundo script al que se le quiere pasar la variable</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/02_variables.sh',
          '<span class="ch">#!/bin/bash</span>',
          '<span class="n">opcion</span><span class="o">=</span><span class="mi">1</span>',
          '<span class="n">nombre</span><span class="o">=</span><span class="s2">"Juan"</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Opcion: $opcion"</span>',
          '<span class="n">echo</span> <span class="s2">"Nombre: $nombre"</span>',
          '',
          '<span class="c1"># Exportar variable nombre</span>',
          '<span class="n">echo</span> <span class="s2">"export nombre=$nombre"</span>',
          '<span class="n">export</span> <span class="n">nombre</span>',
          '',
          '<span class="c1"># Ejecutar script de importacion</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Ejecutando script de importacion"</span>',
          '<span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">02</span><span class="n">_variables_importacion</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/02_variables.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/02_variables_importacion.sh',
          '<span class="ch">#!/bin/bash</span>',
          '<span class="n">echo</span> <span class="s2">"Nombre importado: $nombre"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/02_variables_importacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/02_variables.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/02_variables_importacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/02_variables.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Opcion: 1',
          'Nombre: Juan',
          'export nombre=Juan',
          'Ejecutando script de importacion',
          'Nombre importado: Juan',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se tiene que ejecutar el segundo script dentro del primer script. Si ahora ejecutamos el segundo script no tenemos la variable</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/02_variables_importacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/02_variables_importacion.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Nombre importado: ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos que sea accesible desde cualquier un segundo script, sin tener que ejecutarlo dentro del primer scritp, tenemos que exportar la variable a una variable de entorno</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Tipos-de-operadores">Tipos de operadores<a class="anchor-link" href="#Tipos-de-operadores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 9" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A continuación mostramos todos los posibles operadores</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/03_operadores.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="c1"># Asignación de variables</span>',
          '<span class="n">x</span><span class="o">=</span><span class="mi">10</span>',
          '<span class="n">y</span><span class="o">=</span><span class="mi">20</span>',
          '<span class="n">echo</span> <span class="s2">"x = $x"</span>',
          '<span class="n">echo</span> <span class="s2">"y = $y"</span>',
          '',
          '<span class="c1"># Operadores aritméticos</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Operadores aritméticos"</span>',
          '<span class="n">echo</span> <span class="s2">"x + y = $((x + y))"</span>',
          '<span class="n">echo</span> <span class="s2">"x - y = $((x - y))"</span>',
          '<span class="n">echo</span> <span class="s2">"x * y = $((x * y))"</span>',
          '<span class="n">echo</span> <span class="s2">"x / y = $((x / y))"</span>',
          '<span class="n">echo</span> <span class="s2">"x % y = $((x % y))"</span>',
          '',
          '<span class="c1"># Operadores de comparación</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Operadores de comparación"</span>',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$x"</span> <span class="o">-</span><span class="n">eq</span> <span class="s2">"$y"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"x es igual a y"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"x no es igual a y"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$x"</span> <span class="o">-</span><span class="n">ne</span> <span class="s2">"$y"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"x no es igual a y"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"x es igual a y"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$x"</span> <span class="o">-</span><span class="n">lt</span> <span class="s2">"$y"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"x es menor que y"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"x no es menor que y"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$x"</span> <span class="o">-</span><span class="n">gt</span> <span class="s2">"$y"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"x es mayor que y"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"x no es mayor que y"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="c1"># Operadores de cadena</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Operadores de cadena"</span>',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$a"</span> <span class="o">=</span> <span class="s2">"$b"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"a es igual a b"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"a no es igual a b"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$a"</span> <span class="o">!=</span> <span class="s2">"$b"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"a no es igual a b"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"a es igual a b"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">z</span> <span class="s2">"$a"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"a es una cadena vacía"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"a no es una cadena vacía"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"$a"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"a no es una cadena vacía"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"a es una cadena vacía"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="c1"># Operadores de archivo</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Operadores de archivo"</span>',
          '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"/path/to/file"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"El archivo existe"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"El archivo no existe"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">f</span> <span class="s2">"/path/to/file"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"Es un archivo regular"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"No es un archivo regular"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">d</span> <span class="s2">"/path/to/dir"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"Es un directorio"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"No es un directorio"</span>',
          '<span class="n">fi</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/03_operadores.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/03_operadores.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/03_operadores.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'x = 10',
          'y = 20',
          'Operadores aritméticos',
          'x + y = 30',
          'x - y = -10',
          'x * y = 200',
          'x / y = 0',
          'x % y = 10',
          'Operadores de comparación',
          'x no es igual a y',
          'x no es igual a y',
          'x es menor que y',
          'x no es mayor que y',
          'Operadores de cadena',
          'a es igual a b',
          'a es igual a b',
          'a es una cadena vacía',
          'a es una cadena vacía',
          'Operadores de archivo',
          'El archivo no existe',
          'No es un archivo regular',
          'No es un directorio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Paso-de-argumentos">Paso de argumentos<a class="anchor-link" href="#Paso-de-argumentos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 10" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden pasar argumentos a los scrips, una vez dentro del script podemos hacer uso de ellos de la siguiente manera</p>
      <ul>
      <li>Por número de argumento: en este caso se nombrarán como <code>$1</code>, <code>$2</code>, etc. Pero en caso de que el número de argumentos sea mayor que 9, es decir que haga falta más de 2 dígitos para nombrarlo, en ese caso se identificará el número entre llaves, <code>${1}</code>, <code>${2}</code>, ..., ${10}, ${11}, etc</li>
      <li>Si se llama al argumento $0 estamos obteniendo el nombre del archivo</li>
      <li>Si queremos todos los argumentos lo hacemos mediante <code>$*</code></li>
      <li>Si lo que queremos es el número de argumentos que tenemos lo obtenemos mediante <code>$#</code></li>
      <li>Si queremos saner la salida del último comando lo podemos saber mediante <code>$?</code></li>
      <li>Si queremos saber el <code>PID</code> del script, lo podemos saber mediante <code>$$</code></li>
      <li>Podemos remplazar el valor de una cadena de un argumento mediante <code>`${opening_brace}&lt;indice de argumento&gt;/cadena que se quiere sustituir/cadena nueva{closing_brace}`</code>, es decir, si tenemos <code>${opening_brace}1/hola/hello{closing_brace}</code> sustituirá la palabra <code>hola</code> por la palabra <code>hello</code> en el argumento 1</li>
      <li>Sin embargo, si usamos <code>${opening_brace}&lt;indice de argumento&gt;/#cadena que se quiere sustituir/cadena nueva{closing_brace}</code>, solo sustituirá la cadena en el argumento si este argumento empieza por dicha cadena</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/04_argumentos.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="c1"># Pasos de argumentos simples</span>',
          '<span class="n">echo</span> <span class="s2">"Primer argumento: $1"</span>',
          '<span class="n">echo</span> <span class="s2">"Segundo argumento: $2"</span>',
          '<span class="n">echo</span> <span class="s2">"Tercer argumento: $3"</span>',
          '',
          '<span class="c1"># Accediendo a todos los argumentos</span>',
          '<span class="n">echo</span> <span class="s2">"Todos los argumentos: $*"</span>',
          '',
          '<span class="c1"># Accediendo al número de argumentos</span>',
          '<span class="n">echo</span> <span class="s2">"Número de argumentos: $#"</span>',
          '',
          '<span class="c1"># Accediendo al nombre del script</span>',
          '<span class="n">echo</span> <span class="s2">"Nombre del script: $0"</span>',
          '',
          '<span class="c1"># Accediendo al código de salida del último comando ejecutado</span>',
          '<span class="n">echo</span> <span class="s2">"Código de salida del último comando: $?"</span>',
          '',
          '<span class="c1"># Accediendo al PID del script</span>',
          '<span class="n">echo</span> <span class="s2">"PID del script: $$"</span>',
          '',
          '<span class="c1"># Accediendo a los argumentos con índices</span>',
          '<span class="n">echo</span> <span class="s2">"Argumento 3: $</span><span class="si">{3}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Argumento 2: $</span><span class="si">{2}</span><span class="s2">"</span>',
          '',
          '<span class="c1"># Accediendo a los argumentos con índices y longitud máxima</span>',
          '<span class="n">echo</span> <span class="s2">"Argumento 3 con longitud máxima de 2 caracteres: ${3:0:2}"</span>',
          '<span class="n">echo</span> <span class="s2">"Argumento 2 con longitud máxima de 3 caracteres: ${2:0:3}"</span>',
          '',
          '<span class="c1"># Reemplazando argumentos con índices y longitud máxima</span>',
          '<span class="n">echo</span> <span class="s2">"Reemplazando argumento 3: ${3/arg/ARG}"</span>',
          '<span class="n">echo</span> <span class="s2">"Reemplazando argumento{2/arg/ARG}"</span>',
          '',
          '<span class="c1"># Accediendo a los argumentos con índices y patrones de reemplazo</span>',
          '<span class="n">echo</span> <span class="s2">"Reemplazando patrón en argumento 3: ${3/#tercer/TERCER}"</span>',
          '<span class="n">echo</span> <span class="s2">"Reemplazando patrón en argumento 2: ${2/#arg/ARG}"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/04_argumentos.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nv">arg1</span><span class="o">=</span><span class="s2">"primer argumento"</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nv">arg2</span><span class="o">=</span><span class="s2">"segundo argumento"</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nv">arg3</span><span class="o">=</span><span class="s2">"tercer argumento"</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/04_argumentos.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/04_argumentos.sh<span class="w"> </span><span class="s2">"</span><span class="nv">$arg1</span><span class="s2">"</span><span class="w"> </span><span class="s2">"</span><span class="nv">$arg2</span><span class="s2">"</span><span class="w"> </span><span class="s2">"</span><span class="nv">$arg3</span><span class="s2">"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Primer argumento: primer argumento',
          'Segundo argumento: segundo argumento',
          'Tercer argumento: tercer argumento',
          'Todos los argumentos: primer argumento segundo argumento tercer argumento',
          'Número de argumentos: 3',
          'Nombre del script: ./scripts_bash/04_argumentos.sh',
          'Código de salida del último comando: 0',
          'PID del script: 11644',
          'Argumento 3: tercer argumento',
          'Argumento 2: segundo argumento',
          'Argumento 3 con longitud máxima de 2 caracteres: te',
          'Argumento 2 con longitud máxima de 3 caracteres: seg',
          'Reemplazando argumento 3: tercer ARGumento',
          'Reemplazando argumento 2: segundo ARGumento',
          'Reemplazando patrón en argumento 3: tercer argumento',
          'Reemplazando patrón en argumento 2: segundo argumento',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Ejecutar-comandos-y-guardarlos-en-una-variable">Ejecutar comandos y guardarlos en una variable<a class="anchor-link" href="#Ejecutar-comandos-y-guardarlos-en-una-variable"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 11" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Tenemos dos maneras de ejecutar un comando y guardar su salida en una variable</p>
      <ul>
      <li>Mediante variable=<code>command</code></li>
      <li>Mediante <code>variable=$(command)</code></li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/05_variables_comandos.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">path</span><span class="o">=</span><span class="err">$</span><span class="p">(</span><span class="n">pwd</span><span class="p">)</span>',
          '<span class="n">infokernel</span><span class="o">=</span><span class="err">`</span><span class="n">uname</span> <span class="o">-</span><span class="n">a</span><span class="err">`</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"El directorio actual es: $path"</span>',
          '<span class="n">echo</span> <span class="s2">"La información del kernel es: $infokernel"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/05_variables_comandos.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/05_variables_comandos.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/05_variables_comandos.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'El directorio actual es: /home/wallabot/Documentos/web/portafolio/posts',
          'La información del kernel es: Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Debugging">Debugging<a class="anchor-link" href="#Debugging"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 12" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hay dos maneras de poder depurar en bash scripting</p>
      <ul>
      <li>Usando <code>-v</code>: Ejecución detallada de un script linea por línea</li>
      <li>Usando <code>-x</code>: Despliegue de información del script</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>bash<span class="w"> </span>-v<span class="w"> </span>scripts_bash/05_variables_comandos.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '#!/bin/bash',
          'path=$(pwd)',
          'infokernel=`uname -a`',
          'echo "El directorio actual es: $path"',
          'El directorio actual es: /home/wallabot/Documentos/web/portafolio/posts',
          'echo "La información del kernel es: $infokernel"',
          'La información del kernel es: Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>bash<span class="w"> </span>-x<span class="w"> </span>scripts_bash/05_variables_comandos.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '++ pwd',
          '+ path=/home/wallabot/Documentos/web/portafolio/posts',
          '++ uname -a',
          '+ infokernel=\'Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux\'',
          '+ echo \'El directorio actual es: /home/wallabot/Documentos/web/portafolio/posts\'',
          'El directorio actual es: /home/wallabot/Documentos/web/portafolio/posts',
          '+ echo \'La información del kernel es: Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux\'',
          'La información del kernel es: Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Obtener-informaci%C3%B3n-del-usuario">Obtener información del usuario<a class="anchor-link" href="#Obtener-informaci%C3%B3n-del-usuario"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 13" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Obtener-informaci%C3%B3n-mediante-los-comandos-echo-y-read">Obtener información mediante los comandos <code>echo</code> y <code>read</code><a class="anchor-link" href="#Obtener-informaci%C3%B3n-mediante-los-comandos-echo-y-read"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 14" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Tenemos dos maneras de obtener información del usuario</p>
      <ol>
      <li>Mediante el comando <code>echo -n</code>. Con el flag <code>-n</code> indicamos que no queremos que se imprima un salto de línea al final del <code>echo</code>. Por ejemplo, <code>echo -n "Introduce dato: "</code>, con este comando le pedimos un dato y el cursor se quedará en la misma linea, no habrá un salto</li>
      <li>Mediante el comando <code>read</code>. Con este comando el programa se quedará esperando aq eu el usuario introduzca datos terminando con un salto de linea. Lo que haya introducido lo guardará en la variable <code>REPLY</code>. Si se quiere que la variable donde se guarda el dato introducido por el usuario tenga otro ombre se debe introducir <code>read [variable]</code>, por ejemplo el comando <code>read miVariable</code>, guardará el dato del usuario en la variable <code>miVariable</code></li>
      <li>Mediante el comando <code>$REPLY</code> o <code>$[variable]</code> accedemos al dato introducido por el usuario.</li>
      </ol>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/06_leer_informacion.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">option</span><span class="o">=</span><span class="mi">0</span>',
          '<span class="n">backupName</span><span class="o">=</span><span class="s2">""</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Programa de utilidades"</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar una opción: "</span>',
          '<span class="n">read</span>',
          '<span class="n">option</span><span class="o">=</span><span class="err">$</span><span class="n">REPLY</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar un nombre: "</span>',
          '<span class="n">read</span> <span class="n">backupName</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Opción: $option, backupName: $backupName"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/06_leer_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como en un jupyter notebook no puedo meter los datos según me los va pidiendo, se los meto antes en un pipe <code>|</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/06_leer_informacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"1\nnombreprueba"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>./scripts_bash/06_leer_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Programa de utilidades',
          'Ingresar una opción: ',
          'Ingresar un nombre: ',
          'Opción: 1, backupName: nombreprueba',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Obtener-informaci%C3%B3n-solo-mediante-el-comando-read">Obtener información solo mediante el comando <code>read</code><a class="anchor-link" href="#Obtener-informaci%C3%B3n-solo-mediante-el-comando-read"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 15" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Otra forma de obtener información es usar solo el comando <code>read</code>, la sintaxsis sería</p>
      <div class="highlight"><pre><span></span><span class="nb">read</span><span class="w"> </span>-p<span class="w"> </span><span class="s2">"Mensaje de prompt:"</span><span class="w"> </span><span class="o">[</span>variable<span class="o">]</span>
      </pre></div>
      <p>El flag <code>-p</code> indica que el mensaje <code>Mensaje de prompt:</code> se mostrará antes de esperar a que el usuario introduzca el dato. Si no se especifica nombre de variable, el dato se guardará en la variable <code>REPLY</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/06_leer_informacion.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">option</span><span class="o">=</span><span class="mi">0</span>',
          '<span class="n">backupName</span><span class="o">=</span><span class="s2">""</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Programa de utilidades"</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar una opción: "</span>',
          '<span class="n">read</span>',
          '<span class="n">option1</span><span class="o">=</span><span class="err">$</span><span class="n">REPLY</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar un nombre: "</span>',
          '<span class="n">read</span> <span class="n">backupName</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">p</span> <span class="s2">"Ingresar otra opción: "</span> <span class="n">option2</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Opción: $option1-$option2, backupName: $backupName"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/06_leer_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/06_leer_informacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"1\nnombreprueba\n2"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>./scripts_bash/06_leer_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Programa de utilidades',
          'Ingresar una opción: ',
          'Ingresar un nombre: ',
          'Opción: 1-2, backupName: nombreprueba',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Validar-la-informaci%C3%B3n-del-usuario">Validar la información del usuario<a class="anchor-link" href="#Validar-la-informaci%C3%B3n-del-usuario"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 16" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para validar la información del usuario lo mejor sería usar expresiones regulares, aquí dejo un <a href="https://www.maximofn.com/regular-expressions/">post</a> donde las explico</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Además podemos especificar el número de caracteres que queremos que el usuario introduzca cuando usamos <code>read</code>, para ello usamos el flag <code>-n</code>, el cual, si no le sigue ningún número esperará hasta que el usuario introduzca un salto de linea, y si le sigue un número, esperará hasta que el usuario introduzca ese número de caracteres</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/07_validar_informacion.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">option</span><span class="o">=</span><span class="mi">0</span>',
          '<span class="n">backupName</span><span class="o">=</span><span class="s2">""</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Programa de utilidades"</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar una opción: "</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">n1</span>',
          '<span class="n">option1</span><span class="o">=</span><span class="err">$</span><span class="n">REPLY</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar un nombre: "</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">n4</span> <span class="n">backupName</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">p</span> <span class="s2">"Ingresar otra opción: "</span> <span class="n">option2</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Opción: $option1-$option2, backupName: $backupName"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/07_validar_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/07_validar_informacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"1back2"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>./scripts_bash/07_validar_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Programa de utilidades',
          'Ingresar una opción: ',
          'Ingresar un nombre: ',
          'Opción: 1-2, backupName: back',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos que introduzca un valor confidencial, como una clave, ponemos el flag <code>-s</code> (security). De esta manera, cuando el usuario introduzca el dato, este no se imprimirá en la consola</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/07_validar_informacion.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">option</span><span class="o">=</span><span class="mi">0</span>',
          '<span class="n">backupName</span><span class="o">=</span><span class="s2">""</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Programa de utilidades"</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar una opción: "</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">n1</span>',
          '<span class="n">option1</span><span class="o">=</span><span class="err">$</span><span class="n">REPLY</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar un nombre: "</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">n4</span> <span class="n">backupName</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">p</span> <span class="s2">"Ingresar otra opción: "</span> <span class="n">option2</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">s</span> <span class="o">-</span><span class="n">p</span> <span class="s2">"Password: "</span> <span class="n">password</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Opción: $option1-$option2, backupName: $backupName, password: $password"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/07_validar_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/07_validar_informacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"1back2\n1234"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>./scripts_bash/07_validar_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Programa de utilidades',
          'Ingresar una opción: ',
          'Ingresar un nombre: ',
          'Opción: 1-2, backupName: back, password: 1234',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="If-else">If else<a class="anchor-link" href="#If-else"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 17" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>La manera de escribir condicionales <code>if</code>-<code>else</code> es:</p>
      <div class="highlight"><pre><span></span><span class="k">if</span><span class="w"> </span><span class="o">[[</span>condicion<span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
      <span class="w">    </span>statement
      <span class="k">elif</span><span class="w"> </span><span class="o">[[</span>condicion<span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
      <span class="w">    </span>statement
      <span class="k">else</span>
      <span class="w">    </span>statement
      <span class="k">fi</span>
      </pre></div>
      <p>Es importante recalcar que las condiciones tienen que estar entre dos corchetes <code>[[]]</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/08_if_else.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="k">if</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"Verdadero"</span>',
          '<span class="k">elif</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"Verdadero"</span>',
          '<span class="k">else</span>',
          '    <span class="n">echo</span> <span class="s2">"Falso"</span>',
          '<span class="n">fi</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/08_if_else.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/08_if_else.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/08_if_else.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Falso',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Veamos cómo se crean <code>if</code>s anidados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/08_if_else.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="k">if</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"Verdadero"</span>',
          '<span class="k">elif</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"Verdadero"</span>',
          '<span class="k">else</span>',
          '    <span class="k">if</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">4</span> <span class="p">]];</span> <span class="n">then</span>',
          '        <span class="n">echo</span> <span class="s2">"Verdadero pero falso"</span>',
          '    <span class="k">else</span>',
          '        <span class="n">echo</span> <span class="s2">"Totalmente falso"</span>',
          '    <span class="n">fi</span>',
          '<span class="n">fi</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/08_if_else.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/08_if_else.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/08_if_else.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Totalmente falso',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Expresiones-condicionales">Expresiones condicionales<a class="anchor-link" href="#Expresiones-condicionales"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 18" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ya hemos visto como crear <code>if</code>s, pero es necesario explicar cómo crear las expresiones condicionales</p>
      <p>Si vamos a realizar comparaciones entre cadenas o strings</p>
      <table>
      <thead>
      <tr>
      <th>operacion</th>
      <th>comando</th>
      <th>ejemplo</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td>mayor que</td>
      <td><code>&gt;</code></td>
      <td><code>[[ cadena1 &gt; cadena2 ]]</code></td>
      </tr>
      <tr>
      <td>menor que</td>
      <td><code>&lt;</code></td>
      <td><code>[[ cadena1 &lt; cadena2 ]]</code></td>
      </tr>
      <tr>
      <td>igual que</td>
      <td><code>==</code></td>
      <td><code>[[ cadena1 == cadena2 ]]</code></td>
      </tr>
      <tr>
      <td>igual que</td>
      <td><code>=</code></td>
      <td><code>[[ cadena1 = cadena2 ]]</code></td>
      </tr>
      <tr>
      <td>cadena vacía</td>
      <td><code>-z</code></td>
      <td><code>[[ -z cadena ]]</code></td>
      </tr>
      <tr>
      <td>cadena no vacía</td>
      <td><code>-n</code></td>
      <td><code>[[ -n cadena ]]</code></td>
      </tr>
      <tr>
      <td>cadena no vacía</td>
      <td></td>
      <td><code>[[ cadena ]]</code></td>
      </tr>
      </tbody>
      </table>
      <p>Si lo que vamos a hacer es realizar comparaciones entre números</p>
      <table>
      <thead>
      <tr>
      <th>operacion</th>
      <th>comando</th>
      <th>ejemplo</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td>mayor que</td>
      <td><code>-gt</code></td>
      <td><code>[[ numero1 -gt numero2 ]]</code></td>
      </tr>
      <tr>
      <td>mayor o igual que</td>
      <td><code>-ge</code></td>
      <td><code>[[ numero1 -ge numero2 ]]</code></td>
      </tr>
      <tr>
      <td>menor que</td>
      <td><code>-lt</code></td>
      <td><code>[[ numero1 -lt numero2 ]]</code></td>
      </tr>
      <tr>
      <td>menor o igual que</td>
      <td><code>-le</code></td>
      <td><code>[[ numero1 -le numero2 ]]</code></td>
      </tr>
      <tr>
      <td>igual que</td>
      <td><code>-eq</code></td>
      <td><code>[[ numero1 -eq numero2 ]]</code></td>
      </tr>
      <tr>
      <td>distinto que</td>
      <td><code>-ne</code></td>
      <td><code>[[ numero1 -ne numero2 ]]</code></td>
      </tr>
      </tbody>
      </table>
      <p>Si queremos comprobar archivos o directorios</p>
      <table>
      <thead>
      <tr>
      <th>operacion</th>
      <th>comando</th>
      <th>ejemplo</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td>es un directorio?</td>
      <td><code>-d</code></td>
      <td><code>[[ -d &lt;dir&gt; ]]</code></td>
      </tr>
      <tr>
      <td>es un archivo?</td>
      <td><code>-f</code></td>
      <td><code>[[ -f &lt;file&gt; ]]</code></td>
      </tr>
      <tr>
      <td>existe?</td>
      <td><code>-e</code></td>
      <td><code>[[ -e &lt;file&gt; ]]</code> o <code>[[ -e &lt;dir&gt; ]]</code></td>
      </tr>
      <tr>
      <td>es legible?</td>
      <td><code>-r</code></td>
      <td><code>[[ -r &lt;file&gt; ]]</code></td>
      </tr>
      <tr>
      <td>es escribible?</td>
      <td><code>-w</code></td>
      <td><code>[[ -w &lt;file&gt; ]]</code></td>
      </tr>
      <tr>
      <td>es ejecutable?</td>
      <td><code>-x</code></td>
      <td><code>[[ -x &lt;file&gt; ]]</code></td>
      </tr>
      <tr>
      <td>es un link?</td>
      <td><code>-L</code></td>
      <td><code>[[ -L &lt;file&gt; ]]</code></td>
      </tr>
      <tr>
      <td>es tiene contenido?</td>
      <td><code>-s</code></td>
      <td><code>[[ -s &lt;file&gt; ]]</code></td>
      </tr>
      <tr>
      <td>es propiedad del usuario?</td>
      <td><code>-O</code></td>
      <td><code>[[ -O &lt;file&gt; ]]</code></td>
      </tr>
      <tr>
      <td>es propiedad del grupo?</td>
      <td><code>-G</code></td>
      <td><code>[[ -G &lt;file&gt; ]]</code></td>
      </tr>
      <tr>
      <td>fue modificado?</td>
      <td><code>-N</code></td>
      <td><code>[[ -N &lt;file&gt; ]]</code></td>
      </tr>
      <tr>
      <td>file1 es más nuevo que file2?</td>
      <td><code>-nt</code></td>
      <td><code>[[ &lt;file1&gt; -nt &lt;file2&gt; ]]</code></td>
      </tr>
      <tr>
      <td>file1 es más viejo que file2?</td>
      <td><code>-ot</code></td>
      <td><code>[[ &lt;file1&gt; -ot &lt;file2&gt; ]]</code></td>
      </tr>
      <tr>
      <td>file1 es el mismo archivo que file2?</td>
      <td><code>-ef</code></td>
      <td><code>[[ &lt;file1&gt; -ef &lt;file2&gt; ]]</code></td>
      </tr>
      <tr>
      <td>file1 es el mismo archivo que file2?</td>
      <td><code>-ef</code></td>
      <td><code>[[ &lt;file1&gt; -ef &lt;file2&gt; ]]</code></td>
      </tr>
      </tbody>
      </table>
      <p>Si queremos comparar condiciones conjuntas con <code>and</code>, <code>or</code> y <code>not</code></p>
      <table>
      <thead>
      <tr>
      <th>operacion</th>
      <th>comando</th>
      <th>ejemplo</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td>and</td>
      <td><code>&amp;&amp;</code></td>
      <td><code>[[ &lt;condicion1&gt; &amp;&amp; &lt;condicion2&gt; ]]</code></td>
      </tr>
      <tr>
      <td>or</td>
      <td>`</td>
      <td></td>
      <td>`</td>
      <td>`[[ <condicion1></condicion1></td>
      <td></td>
      <td><condicion2> ]]`</condicion2></td>
      </tr>
      </tbody>
      </table>
      <p>Si queremos negar condiciones</p>
      <table>
      <thead>
      <tr>
      <th>operacion</th>
      <th>comando</th>
      <th>ejemplo</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td>not</td>
      <td><code>!</code></td>
      <td><code>[[ ! &lt;condicion&gt; ]]</code></td>
      </tr>
      </tbody>
      </table>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/09_condicionales.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Comparando strings"</span>',
          '<span class="n">string1</span><span class="o">=</span><span class="s2">"hola"</span>',
          '<span class="n">string2</span><span class="o">=</span><span class="s2">"hola"</span>',
          '<span class="n">string3</span><span class="o">=</span><span class="s2">"chao"</span>',
          '<span class="n">string4</span><span class="o">=</span><span class="s2">""</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string1</span> <span class="o">&gt;</span> <span class="err">$</span><span class="n">string3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string1 es mayor que $string3"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string3</span> <span class="o">&lt;</span> <span class="err">$</span><span class="n">string1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string3 es menor que $string1"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string1</span> <span class="o">==</span> <span class="err">$</span><span class="n">string2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string1 es igual que $string2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string1</span> <span class="o">!=</span> <span class="err">$</span><span class="n">string3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string1 es diferente que $string3"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">z</span> <span class="err">$</span><span class="n">string4</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string4 es una cadena vacía"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">n</span> <span class="err">$</span><span class="n">string3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string3 es una cadena no vacía"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string3 es una cadena no vacía"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Comparando números"</span>',
          '<span class="n">number1</span><span class="o">=</span><span class="mi">10</span>',
          '<span class="n">number2</span><span class="o">=</span><span class="mi">10</span>',
          '<span class="n">number3</span><span class="o">=</span><span class="mi">20</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number3</span> <span class="o">-</span><span class="n">gt</span> <span class="err">$</span><span class="n">number1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number3 es mayor que $number1"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number3</span> <span class="o">-</span><span class="n">ge</span> <span class="err">$</span><span class="n">number2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number3 es mayor o igual que $number2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number1</span> <span class="o">-</span><span class="n">lt</span> <span class="err">$</span><span class="n">number3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number1 es menor que $number3"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number1</span> <span class="o">-</span><span class="n">le</span> <span class="err">$</span><span class="n">number2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number1 es menor o igual que $number2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number1</span> <span class="o">-</span><span class="n">eq</span> <span class="err">$</span><span class="n">number2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number1 es igual que $number2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number1</span> <span class="o">-</span><span class="n">ne</span> <span class="err">$</span><span class="n">number3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number1 es diferente que $number3"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Comparando archivos"</span>',
          '<span class="n">file1</span><span class="o">=</span><span class="s2">"$PWD/2021-02-11-Introduccion-a-Python.ipynb"</span>',
          '<span class="n">file2</span><span class="o">=</span><span class="s2">"$PWD/scripts_bash"</span>',
          '<span class="n">file3</span><span class="o">=</span><span class="s2">"$PWD/mi_paquete_de_python"</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">d</span> <span class="err">$</span><span class="n">file2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file2 es un directorio"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">f</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es un archivo"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">e</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 existe"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">r</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es legible"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">w</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es escribible"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">x</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es ejecutable"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">L</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es un link"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">s</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 tiene contenido"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">O</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es propiedad del usuario"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">G</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es propiedad del grupo"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">N</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 fue modificado"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">file1</span> <span class="o">-</span><span class="n">nt</span> <span class="err">$</span><span class="n">file2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es más nuevo que $file2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">file1</span> <span class="o">-</span><span class="n">ot</span> <span class="err">$</span><span class="n">file2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es más viejo que $file2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">file1</span> <span class="o">-</span><span class="n">ef</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es el mismo archivo que $file2"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Comparando expresiones con AND"</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">3</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"2 &gt; 1 y 3 &gt; 1"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Comparando expresiones con OR"</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"2 &gt; 1 o 1 &gt; 2"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Comparando expresiones con NOT"</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">!</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"1 &gt; 2 no es cierto"</span>',
          '<span class="n">fi</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/09_condicionales.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/09_condicionales.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/09_condicionales.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Comparando strings',
          'hola es mayor que chao',
          'chao es menor que hola',
          'hola es igual que hola',
          'hola es diferente que chao',
          ' es una cadena vacía',
          'chao es una cadena no vacía',
          'chao es una cadena no vacía',
          'Comparando números',
          '20 es mayor que 10',
          '20 es mayor o igual que 10',
          '10 es menor que 20',
          '10 es menor o igual que 10',
          '10 es igual que 10',
          '10 es diferente que 20',
          'Comparando archivos',
          '/home/wallabot/Documentos/web/portafolio/posts/scripts_bash es un directorio',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es un archivo',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb existe',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es legible',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es escribible',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb tiene contenido',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es propiedad del usuario',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es propiedad del grupo',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es más viejo que /home/wallabot/Documentos/web/portafolio/posts/scripts_bash',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es el mismo archivo que /home/wallabot/Documentos/web/portafolio/posts/scripts_bash',
          'Comparando expresiones con AND',
          '2 &gt; 1 y 3 &gt; 1',
          'Comparando expresiones con OR',
          '2 &gt; 1 o 1 &gt; 2',
          'Comparando expresiones con NOT',
          '1 &gt; 2 no es cierto',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Sentencia-case">Sentencia <code>case</code><a class="anchor-link" href="#Sentencia-case"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 19" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A continuación vamos a ver cómo se escribe el típico <code>switch-case</code>, pero en este caso solo se usa <code>case</code></p>
      <div class="highlight"><pre><span></span><span class="k">case</span><span class="w"> </span><span class="nv">$variable</span><span class="w"> </span><span class="k">in</span>
      <span class="w">    </span>&lt;valor1&gt;<span class="o">)</span><span class="w"> </span>&lt;sentencia1&gt;<span class="p">;;</span>
      <span class="w">    </span>&lt;valor2&gt;<span class="o">)</span><span class="w"> </span>&lt;sentencia2&gt;<span class="p">;;</span>
      <span class="w">    </span>&lt;valor3&gt;<span class="o">)</span><span class="w"> </span>&lt;sentencia3&gt;<span class="p">;;</span>
      <span class="w">    </span>...
      <span class="w">    </span>*<span class="o">)</span><span class="w"> </span>&lt;sentencia<span class="w"> </span>que<span class="w"> </span>no<span class="w"> </span>cumple<span class="w"> </span>ninguna<span class="w"> </span>de<span class="w"> </span>las<span class="w"> </span>anteriores&gt;
      <span class="k">esac</span>
      </pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/10_case.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">variable</span><span class="o">=</span><span class="s2">"amarillo"</span>',
          '',
          '<span class="k">case</span> <span class="err">$</span><span class="n">variable</span> <span class="ow">in</span>',
          '    <span class="s2">"rojo"</span><span class="p">)</span> <span class="n">echo</span> <span class="s2">"Color rojo"</span><span class="p">;;</span>',
          '    <span class="s2">"verde"</span><span class="p">)</span> <span class="n">echo</span> <span class="s2">"Color verde"</span><span class="p">;;</span>',
          '    <span class="s2">"azul"</span><span class="p">)</span> <span class="n">echo</span> <span class="s2">"Color azul"</span><span class="p">;;</span>',
          '    <span class="o">*</span><span class="p">)</span> <span class="n">echo</span> <span class="s2">"Color desconocido"</span><span class="p">;;</span>',
          '<span class="n">esac</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/10_case.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/10_case.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/10_case.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Color desconocido',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Arrays">Arrays<a class="anchor-link" href="#Arrays"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 20" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver cómo se comportan los arrays en bash scripting</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/11_arrays.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">arrayNumeros</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span>',
          '<span class="n">arrayStrings</span><span class="o">=</span><span class="p">(</span><span class="s2">"hola"</span> <span class="s2">"chao"</span> <span class="s2">"adios"</span><span class="p">)</span>',
          '<span class="n">arrayMixto</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span> <span class="s2">"hola"</span> <span class="mi">2</span> <span class="s2">"chao"</span> <span class="mi">3</span> <span class="s2">"adios"</span><span class="p">)</span>',
          '<span class="n">arrayVacio</span><span class="o">=</span><span class="p">()</span>',
          '<span class="n">arrayRango</span><span class="o">=</span><span class="p">({</span><span class="n">A</span><span class="o">..</span><span class="n">Z</span><span class="p">})</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Arrays"</span>',
          '<span class="n">echo</span> <span class="s2">"Array de números: $</span><span class="si">{arrayNumeros[*]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Array de strings: $</span><span class="si">{arrayStrings[*]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Array mixto: $</span><span class="si">{arrayMixto[*]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Array vacío: $</span><span class="si">{arrayVacio[*]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Array de rango: $</span><span class="si">{arrayRango[*]}</span><span class="s2">"</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Accediendo a elementos"</span>',
          '<span class="n">echo</span> <span class="s2">"Primer elemento del array de números: $</span><span class="si">{arrayNumeros[0]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Segundo elemento del array de strings: $</span><span class="si">{arrayStrings[1]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Último elemento del array de números: $</span><span class="si">{arrayNumeros[-1]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Penúltimo elemento del array de strings: $</span><span class="si">{arrayStrings[-2]}</span><span class="s2">"</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Longitud de arrays"</span>',
          '<span class="n">echo</span> <span class="s2">"Longitud del array de números: ${#arrayNumeros[*]}"</span>',
          '<span class="n">echo</span> <span class="s2">"Longitud del array de strings: ${#arrayStrings[*]}"</span>',
          '<span class="n">echo</span> <span class="s2">"Longitud del array mixto: ${#arrayMixto[*]}"</span>',
          '<span class="n">echo</span> <span class="s2">"Longitud del array vacío: ${#arrayVacio[*]}"</span>',
          '<span class="n">echo</span> <span class="s2">"Longitud del array de rango: ${#arrayRango[*]}"</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Añadiendo y eliminando elementos"</span>',
          '<span class="n">arrayNumeros</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="mi">6</span>',
          '<span class="n">echo</span> <span class="s2">"Añadiendo elemento al array de números: $</span><span class="si">{arrayNumeros[*]}</span><span class="s2">"</span>',
          '<span class="n">unset</span> <span class="n">arrayStrings</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
          '<span class="n">echo</span> <span class="s2">"Eliminando elemento del array de strings: $</span><span class="si">{arrayStrings[*]}</span><span class="s2">"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/11_arrays.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/11_arrays.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/11_arrays.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Arrays',
          'Array de números: 1 2 3 4 5',
          'Array de strings: hola chao adios',
          'Array mixto: 1 hola 2 chao 3 adios',
          'Array vacío: ',
          'Array de rango: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z',
          'Accediendo a elementos',
          'Primer elemento del array de números: 1',
          'Segundo elemento del array de strings: chao',
          'Último elemento del array de números: 5',
          'Penúltimo elemento del array de strings: chao',
          'Longitud de arrays',
          'Longitud del array de números: 5',
          'Longitud del array de strings: 3',
          'Longitud del array mixto: 6',
          'Longitud del array vacío: 0',
          'Longitud del array de rango: 26',
          'Añadiendo y eliminando elementos',
          'Añadiendo elemento al array de números: 1 2 3 4 5 6',
          'Eliminando elemento del array de strings: hola adios',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Bucle-for">Bucle <code>for</code><a class="anchor-link" href="#Bucle-for"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 21" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para utilizar el bucle <code>for</code> hay que usar la siguiente sintaxis</p>
      <div class="highlight"><pre><span></span><span class="k">for</span><span class="w"> </span>&lt;variable&gt;<span class="w"> </span><span class="k">in</span><span class="w"> </span>&lt;array&gt;
      <span class="k">do</span>
      <span class="w">    </span>sentencia
      <span class="k">done</span>
      </pre></div>
      <p>Vamos a ver un ejemplo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/12_for.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">arrayNumeros</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span>',
          '<span class="n">arrayStrings</span><span class="o">=</span><span class="p">(</span><span class="s2">"hola"</span> <span class="s2">"chao"</span> <span class="s2">"adios"</span><span class="p">)</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Iterar a través de un array de numeros"</span>',
          '<span class="k">for</span> <span class="n">numero</span> <span class="ow">in</span> <span class="err">$</span><span class="p">{</span><span class="n">arrayNumeros</span><span class="p">[</span><span class="o">*</span><span class="p">]}</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"Número: $numero"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a través de un array de strings"</span>',
          '<span class="k">for</span> <span class="n">string</span> <span class="ow">in</span> <span class="err">$</span><span class="p">{</span><span class="n">arrayStrings</span><span class="p">[</span><span class="o">*</span><span class="p">]}</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"String: $string"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a través de un array no declarado"</span>',
          '<span class="k">for</span> <span class="n">string</span> <span class="ow">in</span> <span class="s2">"Manolo"</span> <span class="s2">"Juan"</span> <span class="s2">"Pedro"</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"String: $string"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a través de un rango"</span>',
          '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">{</span><span class="mf">1..10</span><span class="p">}</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"Número: $i"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a través de un rango de manera clásica"</span>',
          '<span class="k">for</span> <span class="p">((</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">))</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"Número: $i"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a través de un comando"</span>',
          '<span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="err">$</span><span class="p">(</span><span class="n">ls</span><span class="p">)</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"Archivo: $file"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a través de un directorio"</span>',
          '<span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="o">*</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"Archivo: $file"</span>',
          '<span class="n">done</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/12_for.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/12_for.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/12_for.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Iterar a través de un array de numeros',
          'Número: 1',
          'Número: 2',
          'Número: 3',
          'Número: 4',
          'Número: 5',
          'Iterar a través de un array de strings',
          'String: hola',
          'String: chao',
          'String: adios',
          'Iterar a través de un array no declarado',
          'String: Manolo',
          'String: Juan',
          'String: Pedro',
          'Iterar a través de un rango',
          'Número: 1',
          'Número: 2',
          'Número: 3',
          'Número: 4',
          'Número: 5',
          'Número: 6',
          'Número: 7',
          'Número: 8',
          'Número: 9',
          'Número: 10',
          'Iterar a través de un rango de manera clásica',
          'Número: 1',
          'Número: 2',
          'Número: 3',
          'Número: 4',
          'Número: 5',
          'Número: 6',
          'Número: 7',
          'Número: 8',
          'Número: 9',
          'Número: 10',
          'Iterar a través de un comando',
          'Archivo: 2021-02-11-Introduccion-a-Python.ipynb',
          'Archivo: 2021-04-23-Calculo-matricial-con-Numpy.ipynb',
          'Archivo: 2021-06-15-Manejo-de-datos-con-Pandas.ipynb',
          'Archivo: 2022-09-12-Introduccion-a-la-terminal.ipynb',
          'Archivo: 2023-01-22-Docker.ipynb',
          'Archivo: 2023-XX-XX-Bash-scripting.ipynb',
          'Archivo: california_housing_train.csv',
          'Archivo: command-line-cheat-sheet.pdf',
          'Archivo: CSS.ipynb',
          'Archivo: Expresiones',
          'Archivo: regulares.ipynb',
          'Archivo: html_files',
          'Archivo: html.ipynb',
          'Archivo: introduccion_python',
          'Archivo: mi_paquete_de_python',
          'Archivo: movies.csv',
          'Archivo: movies.dat',
          'Archivo: notebooks_translated',
          'Archivo: __pycache__',
          'Archivo: scripts_bash',
          'Archivo: ssh.ipynb',
          'Archivo: test.ipynb',
          'Iterar a través de un directorio',
          'Archivo: 2021-02-11-Introduccion-a-Python.ipynb',
          'Archivo: 2021-04-23-Calculo-matricial-con-Numpy.ipynb',
          'Archivo: 2021-06-15-Manejo-de-datos-con-Pandas.ipynb',
          'Archivo: 2022-09-12-Introduccion-a-la-terminal.ipynb',
          'Archivo: 2023-01-22-Docker.ipynb',
          'Archivo: 2023-XX-XX-Bash-scripting.ipynb',
          'Archivo: california_housing_train.csv',
          'Archivo: command-line-cheat-sheet.pdf',
          'Archivo: CSS.ipynb',
          'Archivo: Expresiones regulares.ipynb',
          'Archivo: html_files',
          'Archivo: html.ipynb',
          'Archivo: introduccion_python',
          'Archivo: mi_paquete_de_python',
          'Archivo: movies.csv',
          'Archivo: movies.dat',
          'Archivo: notebooks_translated',
          'Archivo: __pycache__',
          'Archivo: scripts_bash',
          'Archivo: ssh.ipynb',
          'Archivo: test.ipynb',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Bucle-while">Bucle <code>while</code><a class="anchor-link" href="#Bucle-while"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 22" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para utilizar el bucle <code>while</code> hay que usar la siguiente sintaxis</p>
      <div class="highlight"><pre><span></span><span class="k">while</span><span class="w"> </span>&lt;condicion&gt;
      <span class="k">do</span>
      <span class="w">    </span>sentencia
      <span class="k">done</span>
      </pre></div>
      <p>Vamos a ver un ejemplo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/13_while.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">numero</span><span class="o">=</span><span class="mi">1</span>',
          '<span class="k">while</span> <span class="p">[</span> <span class="err">$</span><span class="n">numero</span> <span class="o">-</span><span class="n">ne</span> <span class="mi">5</span> <span class="p">]</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"Número: $numero"</span>',
          '    <span class="n">numero</span><span class="o">=</span><span class="err">$</span><span class="p">((</span> <span class="n">numero</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">))</span>',
          '<span class="n">done</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/13_while.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/13_while.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/13_while.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Número: 1',
          'Número: 2',
          'Número: 3',
          'Número: 4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Control-de-flujo-con-break-y-continue">Control de flujo con <code>break</code> y <code>continue</code><a class="anchor-link" href="#Control-de-flujo-con-break-y-continue"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 23" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos controlar el el flujo de un bucle mediante las palabras <code>break</code> y <code>continue</code>, veamos un ejemplo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/14_control_de_flujo.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">numero</span><span class="o">=</span><span class="mi">1</span>',
          '<span class="k">while</span> <span class="p">[</span> <span class="err">$</span><span class="n">numero</span> <span class="o">-</span><span class="n">ne</span> <span class="mi">10</span> <span class="p">]</span>',
          '<span class="n">do</span>',
          '    <span class="k">if</span> <span class="p">[</span> <span class="err">$</span><span class="n">numero</span> <span class="o">-</span><span class="n">eq</span> <span class="mi">5</span> <span class="p">];</span> <span class="n">then</span>',
          '        <span class="n">numero</span><span class="o">=</span><span class="err">$</span><span class="p">((</span> <span class="n">numero</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">))</span>',
          '        <span class="n">echo</span> <span class="s2">"Saltando el número 5"</span>',
          '        <span class="k">continue</span>',
          '    <span class="k">elif</span>',
          '        <span class="p">[</span> <span class="err">$</span><span class="n">numero</span> <span class="o">-</span><span class="n">eq</span> <span class="mi">8</span> <span class="p">];</span> <span class="n">then</span>',
          '        <span class="n">echo</span> <span class="s2">"Terminando el bucle"</span>',
          '        <span class="k">break</span>',
          '    <span class="n">fi</span> ',
          '    <span class="n">echo</span> <span class="s2">"Número: $numero"</span>',
          '    <span class="n">numero</span><span class="o">=</span><span class="err">$</span><span class="p">((</span> <span class="n">numero</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">))</span>',
          '<span class="n">done</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/14_control_de_flujo.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/14_control_de_flujo.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/14_control_de_flujo.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Número: 1',
          'Número: 2',
          'Número: 3',
          'Número: 4',
          'Saltando el número 5',
          'Número: 6',
          'Número: 7',
          'Terminando el bucle',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Funciones">Funciones<a class="anchor-link" href="#Funciones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 24" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>La sintaxis para escribir funciones es</p>
      <div class="highlight"><pre><span></span>&lt;nombre<span class="w"> </span>de<span class="w"> </span>funcion&gt;<span class="w"> </span><span class="o">(){opening_brace}</span>
      <span class="w">    </span>sentencias
      <span class="o">{closing_brace}</span>
      </pre></div>
      <p>Veamos un ejemplo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/15_funciones.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">funcion</span> <span class="p">()</span> <span class="p">{</span>',
          '    <span class="n">echo</span> <span class="s2">"Soy una función"</span>',
          '<span class="p">}</span>',
          '',
          '<span class="n">funcoionConParametros</span> <span class="p">()</span> <span class="p">{</span>',
          '    <span class="n">echo</span> <span class="s2">"Soy una función con parámetros"</span>',
          '    <span class="n">echo</span> <span class="s2">"Parámetro 1: $1"</span>',
          '    <span class="n">echo</span> <span class="s2">"Parámetro 2: $2"</span>',
          '<span class="p">}</span>',
          '',
          '<span class="n">funcion</span>',
          '<span class="n">funcoionConParametros</span> <span class="s2">"Hola"</span> <span class="s2">"Adiós"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/15_funciones.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/15_funciones.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/15_funciones.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Soy una función',
          'Soy una función con parámetros',
          'Parámetro 1: Hola',
          'Parámetro 2: Adiós',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      






    </div>

  </section>

</PostLayout>
