---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'ChromaDB';
const end_url = 'chromadb';
const description = 'Descubre cómo ChromaDB redefine la búsqueda y gestión de datos vectoriales para aplicaciones de IA, con búsquedas de similitud ultrarrápidas y precisas en espacios de alta dimensión';
const keywords = 'chromadb, búsqueda vectorial, base de datos vectorial, búsqueda de similitud vectorial, datos vectoriales, gestión de datos vectoriales, búsqueda de datos vectoriales, motor de búsqueda de datos vectoriales, herramienta de búsqueda de datos vectoriales, plataforma de búsqueda de datos vectoriales, software de búsqueda de datos vectoriales, servicio de búsqueda de datos vectoriales, biblioteca de búsqueda de datos vectoriales, sistema de búsqueda de datos vectoriales, solución de búsqueda de datos vectoriales, producto de búsqueda de datos vectoriales, aplicación de búsqueda de datos vectoriales, API de búsqueda de datos vectoriales, SDK de búsqueda de datos vectoriales, marco de búsqueda de datos vectoriales, tecnología de búsqueda de datos vectoriales, empresa de búsqueda de datos vectoriales, startup de búsqueda de datos vectoriales';
const languaje = 'ES';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/chromadb_dalle3.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1024
    image_height=1024
    image_extension=webp
    article_date=2024-02-18+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Chroma"><h2>Chroma</h2></a>
      <a class="anchor-link" href="#Instalacion"><h2>Instalación</h2></a>
      <a class="anchor-link" href="#Uso rapido"><h2>Uso rápido</h2></a>
      <a class="anchor-link" href="#Bases de datos persistentes"><h2>Bases de datos persistentes</h2></a>
      <a class="anchor-link" href="#Colecciones"><h2>Colecciones</h2></a>
      <a class="anchor-link" href="#Crear colecciones"><h3>Crear colecciones</h3></a>
      <a class="anchor-link" href="#Recuperar colecciones"><h3>Recuperar colecciones</h3></a>
      <a class="anchor-link" href="#Recuperar o crear colecciones"><h3>Recuperar o crear colecciones</h3></a>
      <a class="anchor-link" href="#Borrar colecciones"><h3>Borrar colecciones</h3></a>
      <a class="anchor-link" href="#Obtener items de las colecciones"><h3>Obtener items de las colecciones</h3></a>
      <a class="anchor-link" href="#Obtener el numero total de items de las colecciones"><h3>Obtener el número total de items de las colecciones</h3></a>
      <a class="anchor-link" href="#Cambiar la funcion de similitud"><h3>Cambiar la función de similitud</h3></a>
      <a class="anchor-link" href="#Anadir datos a la coleccion"><h3>Añadir datos a la colección</h3></a>
      <a class="anchor-link" href="#Anadir documentos"><h4>Añadir documentos</h4></a>
      <a class="anchor-link" href="#Anadir embeddings"><h4>Añadir embeddings</h4></a>
      <a class="anchor-link" href="#Anadir documentos y embeddings"><h4>Añadir documentos y embeddings</h4></a>
      <a class="anchor-link" href="#Consultas"><h3>Consultas</h3></a>
      <a class="anchor-link" href="#Consultas por documentos"><h4>Consultas por documentos</h4></a>
      <a class="anchor-link" href="#Varias consultas a la vez"><h4>Varias consultas a la vez</h4></a>
      <a class="anchor-link" href="#Consultas por embeddings"><h4>Consultas por embeddings</h4></a>
      <a class="anchor-link" href="#Recuperar documentos por ID"><h3>Recuperar documentos por <code>ID</code></h3></a>
      <a class="anchor-link" href="#Filtrado"><h3>Filtrado</h3></a>
      <a class="anchor-link" href="#Filtrado por metadata"><h4>Filtrado por metadata</h4></a>
      <a class="anchor-link" href="#Filtrado por el contenido del documento"><h4>Filtrado por el contenido del documento</h4></a>
      <a class="anchor-link" href="#Actualizar datos"><h3>Actualizar datos</h3></a>
      <a class="anchor-link" href="#Actualizar o anadir datos"><h3>Actualizar o añadir datos</h3></a>
      <a class="anchor-link" href="#Eliminar datos"><h3>Eliminar datos</h3></a>
      <a class="anchor-link" href="#Embeddings"><h2>Embeddings</h2></a>
      <a class="anchor-link" href="#Multimodalidad"><h2>Multimodalidad</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hemos visto en el post de <a href="https://www.maximofn.com/embeddings">embeddings</a> que los embeddings son una forma de representar palabras en un espacio vectorial. En este post vamos a ver cómo podemos almacenar esos embeddings en bases de datos vectoriales y cómo podemos hacer consultas sobre ellas.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Cuando tenemos una consulta, podemos crear el embedding de la consulta, buscar en la base de datos vectorial los embeddings que más se parezcan a la consulta y devolver los documentos que correspondan a esos embeddings o una explicación sobre esos documentos.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/vector_database.svg" alt="vector database">
      <p>Es decir, vamos a generar una base de datos de información, vamos a crear embeddings de esa información y la vamos a guardar en una base de datos vectorial. Luego cuando un usuario haga una consulta, convertiremos la consulta a embeddings, buscaremos en la base de datos los embeddings con mayor similitud y devolveremos los documentos que correspondan a esos embeddings.</p>
      <p>Además de los documentos, en la base de datos se puede guardar información adicional que llamaremos metadata. Por ejemplo, si estamos trabajando con un conjunto de noticias, podemos guardar el título, la fecha, el autor, etc. de la noticia.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Chroma">Chroma<a class="anchor-link" href="#Chroma"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 1" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En este post vamos a ver <a href="https://www.trychroma.com/" target="_blank" rel="nofollow noreferrer">chroma</a>, ya que es la base de <a href="https://blog.langchain.dev/langchain-state-of-ai-2023/#most-used-vectorstores">datos vectorial más usada</a>, como se puede ver en este reporte del <a href="https://blog.langchain.dev/langchain-state-of-ai-2023">langchain state of ai 2023</a>.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://blog.langchain.dev/content/images/size/w1000/2023/12/Top-vectorstores--1-.png" alt="Most Used Vectorstores">
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Instalacion">Instalación<a class="anchor-link" href="#Instalacion"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 2" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>De modo que para instalar Chroma con Conda hay que hacer</p>
      <div class='highlight'><pre><code class="language-bash">conda install conda-forge::chromadb</code></pre></div>
      <p>O si se quiere instalar con Pip</p>
      <div class='highlight'><pre><code class="language-bash">pip install chromadb</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Uso rapido">Uso rápido<a class="anchor-link" href="#Uso rapido"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 3" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para una aplicación rápida, primero importamos Chroma</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">chromadb</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>A continuación, creamos un cliente de chroma</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">chroma_client</span> <span class="o">=</span> <span class="n">chromadb</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Creamos una colección. Una colección es el lugar donde se guardarán los embeddings y la metadata.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;my_collection&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos sale un mensaje indicando que no se ha introducido una función de embeddings y por lo tanto usará por defecto <code>all-MiniLM-L6-v2</code>, que es similar al modelo <code>paraphrase-MiniLM-L6-v2</code> que usamos en el post de <a href="https://maximofn.com/embeddings/">embeddings</a>.</p>
      <p>Más adelante veremos esto, pero podemos elegir cómo vamos a generar los embeddings.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora añadimos documentos, IDs y metadatos a la colección</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;This is a python docs&quot;</span><span class="p">,</span> <span class="s2">&quot;This is JavaScript docs&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;Python source&quot;</span><span class="p">},</span> <span class="p">{</span><span class="s2">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;JavaScript source&quot;</span><span class="p">}],</span>',
      '<span class="w">    </span><span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;id1&quot;</span><span class="p">,</span> <span class="s2">&quot;id2&quot;</span><span class="p">]</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora podemos hacer una consulta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">results</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;This is a query of Python&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">n_results</span><span class="o">=</span><span class="mi">2</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">results</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [[&#x27;id1&#x27;, &#x27;id2&#x27;]],',
          '&#x27;distances&#x27;: [[0.6205940246582031, 1.4631636142730713]],',
          '&#x27;metadatas&#x27;: [[&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;, &#x7B;&#x27;source&#x27;: &#x27;JavaScript source&#x27;&#x7D;]],',
          '&#x27;embeddings&#x27;: None,',
          '&#x27;documents&#x27;: [[&#x27;This is a python docs&#x27;, &#x27;This is JavaScript docs&#x27;]],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, la distancia al id1 es menor a la distancia al id2, por lo que parece que el documento 1 es más apropiado para responder la consulta</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Bases de datos persistentes">Bases de datos persistentes<a class="anchor-link" href="#Bases de datos persistentes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 4" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>La base de datos que hemos creado antes es temporal, en cuanto cerremos el notebook desaparecerá. Por lo que para crear una base de datos persistente hay que pasarle a chroma el path donde guardarla</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primero vamos a crear la carpeta donde guardar la base de datos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">pathlib</span><span class="w"> </span><span class="kn">import</span> <span class="n">Path</span>',
      '<span class="w"> </span>',
      '<span class="n">chroma_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s2">&quot;chromadb&quot;</span><span class="p">)</span>',
      '<span class="n">chroma_path</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora creamos un cliente en la carpeta que hemos creado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">chroma_client_persistent</span> <span class="o">=</span> <span class="n">chromadb</span><span class="o">.</span><span class="n">PersistentClient</span><span class="p">(</span><span class="n">path</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">chroma_path</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Colecciones">Colecciones<a class="anchor-link" href="#Colecciones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 5" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Crear colecciones">Crear colecciones<a class="anchor-link" href="#Crear colecciones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 6" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A la hora de crear una colección hay que especificar un nombre. El nombre tiene que tener las siguientes consideraciones:</p>
      <ul>
        <li>La longitud del nombre debe tener entre 3 y 63 caracteres.</li>
        <li>El nombre debe comenzar y terminar con una letra minúscula o un dígito y puede contener puntos, guiones y guiones bajos en el medio.</li>
        <li>El nombre no debe contener dos puntos consecutivos.</li>
        <li>El nombre no debe ser una dirección IP válida.</li>
      </ul>
      <p>También podemos darle una función de embedding. En caso de no darle una usará por defecto la función <code>all-MiniLM-L6-v2</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;my_other_collection&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver, se ha creado una segunda colección para el mismo cliente <code>chroma_client</code>, por lo que para un único cliente podemos tener varias colecciones.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Recuperar colecciones">Recuperar colecciones<a class="anchor-link" href="#Recuperar colecciones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 7" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos recuperar una colección de un cliente, lo podemos hacer con el método <code>get_collection</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;my_collection&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Recuperar o crear colecciones">Recuperar o crear colecciones<a class="anchor-link" href="#Recuperar o crear colecciones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 8" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos obtener colecciones, y en caso de que no existan, las cree con el método <code>get_or_create_collection</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_or_create_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;my_tird_collection&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Borrar colecciones">Borrar colecciones<a class="anchor-link" href="#Borrar colecciones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 9" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos borrar una colección con el método <code>delete_collection</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">chroma_client</span><span class="o">.</span><span class="n">delete_collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;my_tird_collection&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Obtener items de las colecciones">Obtener items de las colecciones<a class="anchor-link" href="#Obtener items de las colecciones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 10" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos obtener los 10 primeros ítems de la colección con el método <code>peek</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;my_collection&quot;</span><span class="p">)</span>',
      '<span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [&#x27;id1&#x27;, &#x27;id2&#x27;],',
          '&#x27;embeddings&#x27;: [[-0.06924048811197281,',
          '&#x20;&#x20;&#x20;0.061624377965927124,',
          '&#x20;&#x20;&#x20;-0.090973399579525,',
          '&#x20;&#x20;&#x20;0.013923337683081627,',
          '&#x20;&#x20;&#x20;0.006247623357921839,',
          '&#x20;&#x20;&#x20;-0.1078396588563919,',
          '&#x20;&#x20;&#x20;-0.012472339905798435,',
          '&#x20;&#x20;&#x20;0.03485661745071411,',
          '&#x20;&#x20;&#x20;-0.06300634145736694,',
          '&#x20;&#x20;&#x20;-0.00880391988903284,',
          '&#x20;&#x20;&#x20;0.06879935413599014,',
          '&#x20;&#x20;&#x20;0.0564003586769104,',
          '&#x20;&#x20;&#x20;0.07040536403656006,',
          '&#x20;&#x20;&#x20;-0.020754728466272354,',
          '&#x20;&#x20;&#x20;-0.04048658534884453,',
          '&#x20;&#x20;&#x20;-0.006666888482868671,',
          '&#x20;&#x20;&#x20;-0.0953674241900444,',
          '&#x20;&#x20;&#x20;0.049781784415245056,',
          '&#x20;&#x20;&#x20;0.021780474111437798,',
          '&#x20;&#x20;&#x20;-0.06344643980264664,',
          '&#x20;&#x20;&#x20;0.06119797006249428,',
          '&#x20;&#x20;&#x20;0.0834411084651947,',
          '&#x20;&#x20;&#x20;-0.034758951514959335,',
          '&#x20;&#x20;&#x20;0.0029120452236384153,',
          '&#x20;&#x20;&#x20;...',
          '&#x20;&#x20;&#x20;-0.013378280214965343]],',
          '&#x27;metadatas&#x27;: [&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;, &#x7B;&#x27;source&#x27;: &#x27;JavaScript source&#x27;&#x7D;],',
          '&#x27;documents&#x27;: [&#x27;This is a python docs&#x27;, &#x27;This is JavaScript docs&#x27;],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En este caso solo se han obtenido dos, porque nuestra colección solo tiene dos documentos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se quiere obtener otra cantidad de items se puede especificar con el argumento <code>limit</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">(</span><span class="n">limit</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [&#x27;id1&#x27;],',
          '&#x27;embeddings&#x27;: [[-0.06924048811197281,',
          '&#x20;&#x20;&#x20;0.061624377965927124,',
          '&#x20;&#x20;&#x20;-0.090973399579525,',
          '&#x20;&#x20;&#x20;0.013923337683081627,',
          '&#x20;&#x20;&#x20;0.006247623357921839,',
          '&#x20;&#x20;&#x20;-0.1078396588563919,',
          '&#x20;&#x20;&#x20;-0.012472339905798435,',
          '&#x20;&#x20;&#x20;0.03485661745071411,',
          '&#x20;&#x20;&#x20;-0.06300634145736694,',
          '&#x20;&#x20;&#x20;-0.00880391988903284,',
          '&#x20;&#x20;&#x20;0.06879935413599014,',
          '&#x20;&#x20;&#x20;0.0564003586769104,',
          '&#x20;&#x20;&#x20;0.07040536403656006,',
          '&#x20;&#x20;&#x20;-0.020754728466272354,',
          '&#x20;&#x20;&#x20;-0.04048658534884453,',
          '&#x20;&#x20;&#x20;-0.006666888482868671,',
          '&#x20;&#x20;&#x20;-0.0953674241900444,',
          '&#x20;&#x20;&#x20;0.049781784415245056,',
          '&#x20;&#x20;&#x20;0.021780474111437798,',
          '&#x20;&#x20;&#x20;-0.06344643980264664,',
          '&#x20;&#x20;&#x20;0.06119797006249428,',
          '&#x20;&#x20;&#x20;0.0834411084651947,',
          '&#x20;&#x20;&#x20;-0.034758951514959335,',
          '&#x20;&#x20;&#x20;0.0029120452236384153,',
          '&#x20;&#x20;&#x20;...',
          '&#x20;&#x20;&#x20;0.012315398082137108]],',
          '&#x27;metadatas&#x27;: [&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;],',
          '&#x27;documents&#x27;: [&#x27;This is a python docs&#x27;],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Obtener el numero total de items de las colecciones">Obtener el número total de items de las colecciones<a class="anchor-link" href="#Obtener el numero total de items de las colecciones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 11" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos obtener el número total de items de la colección con el método <code>count</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Cambiar la funcion de similitud">Cambiar la función de similitud<a class="anchor-link" href="#Cambiar la funcion de similitud"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 12" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Antes, cuando hicimos una consulta obtuvimos la similitud de los embeddings con nuestra consulta, ya que por defecto en una colección se usa la función de distancia, pero podemos especificar qué función de similitud queremos usar. Las posiilidades son</p>
      <ul>
        <li>Squared L2 (<code>l2</code>)</li>
        <li>Inner product (<code>ip</code>)</li>
        <li>Cosine similarity (<code>cosine</code>)</li>
      </ul>
      <p>En el post <a href="http://maximofn.com/embeddings-similarity/">Medida de similitud entre embeddings</a> vimos L2 y cosine similarity, por si quieres profundizar en ellas.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por lo que podemos crear colecciones con otra función de similitud con el argumento <code>metadata=&#123;&quot;hnsw:space&quot;: &#x3C;function&#x3E;&#125;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;colection_cosine&quot;</span><span class="p">,</span> <span class="n">metadata</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;hnsw:space&quot;</span><span class="p">:</span> <span class="s2">&quot;cosine&quot;</span><span class="p">})</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Anadir datos a la coleccion">Añadir datos a la colección<a class="anchor-link" href="#Anadir datos a la coleccion"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 13" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Anadir documentos">Añadir documentos<a class="anchor-link" href="#Anadir documentos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 14" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a volver a ver los datos que tenemos en la colección con el método <code>peek</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [],',
          '&#x27;embeddings&#x27;: [],',
          '&#x27;metadatas&#x27;: [],',
          '&#x27;documents&#x27;: [],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos está vacía, eso es porque la última colección que hemos creado ha sido la de la función de similitud <code>cosine</code>, pero no le hemos añadido datos. Veamos cómo es así obteniendo el nombre de la colección</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">name</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x27;colection_cosine&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por lo que nos volvemos a traer la primera colección que hemos creado, a la que sí le hemos introducido datos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;my_collection&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora ya podemos añadir datos a la collección con el método <code>add</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;This is a Mojo docs&quot;</span><span class="p">,</span> <span class="s2">&quot;This is Rust docs&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;Mojo source&quot;</span><span class="p">},</span> <span class="p">{</span><span class="s2">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;Rust source&quot;</span><span class="p">}],</span>',
      '<span class="w">    </span><span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;id3&quot;</span><span class="p">,</span> <span class="s2">&quot;id4&quot;</span><span class="p">]</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver los <code>ID</code>s son consecutivos y no tienen el mismo valor que ya tenían antes, ya que los <code>ID</code>s tienen que ser únicos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si intentamos añadir datos repitiendo <code>ID</code>s, nos indicará que ya existían datos con esas <code>ID</code>s</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;This is a Pytorch docs&quot;</span><span class="p">,</span> <span class="s2">&quot;This is TensorRT docs&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;Pytorch source&quot;</span><span class="p">},</span> <span class="p">{</span><span class="s2">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;TensorRT source&quot;</span><span class="p">}],</span>',
      '<span class="w">    </span><span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;id3&quot;</span><span class="p">,</span> <span class="s2">&quot;id4&quot;</span><span class="p">]</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Add of existing embedding ID: id3',
          'Add of existing embedding ID: id4',
          'Insert of existing embedding ID: id3',
          'Insert of existing embedding ID: id4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>No hemos podido añadir los documentos de Pytorch y TensorRT</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Veamos los datos de la colección</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [&#x27;id1&#x27;, &#x27;id2&#x27;, &#x27;id3&#x27;, &#x27;id4&#x27;],',
          '&#x27;embeddings&#x27;: [[-0.06924048811197281,',
          '&#x20;&#x20;&#x20;0.061624377965927124,',
          '&#x20;&#x20;&#x20;-0.090973399579525,',
          '&#x20;&#x20;&#x20;0.013923337683081627,',
          '&#x20;&#x20;&#x20;0.006247623357921839,',
          '&#x20;&#x20;&#x20;-0.1078396588563919,',
          '&#x20;&#x20;&#x20;-0.012472339905798435,',
          '&#x20;&#x20;&#x20;0.03485661745071411,',
          '&#x20;&#x20;&#x20;-0.06300634145736694,',
          '&#x20;&#x20;&#x20;-0.00880391988903284,',
          '&#x20;&#x20;&#x20;0.06879935413599014,',
          '&#x20;&#x20;&#x20;0.0564003586769104,',
          '&#x20;&#x20;&#x20;0.07040536403656006,',
          '&#x20;&#x20;&#x20;-0.020754728466272354,',
          '&#x20;&#x20;&#x20;-0.04048658534884453,',
          '&#x20;&#x20;&#x20;-0.006666888482868671,',
          '&#x20;&#x20;&#x20;-0.0953674241900444,',
          '&#x20;&#x20;&#x20;0.049781784415245056,',
          '&#x20;&#x20;&#x20;0.021780474111437798,',
          '&#x20;&#x20;&#x20;-0.06344643980264664,',
          '&#x20;&#x20;&#x20;0.06119797006249428,',
          '&#x20;&#x20;&#x20;0.0834411084651947,',
          '&#x20;&#x20;&#x20;-0.034758951514959335,',
          '&#x20;&#x20;&#x20;0.0029120452236384153,',
          '&#x20;&#x20;&#x20;...',
          '&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;JavaScript source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Mojo source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Rust source&#x27;&#x7D;],',
          '&#x27;documents&#x27;: [&#x27;This is a python docs&#x27;,',
          '&#x20;&#x20;&#x27;This is JavaScript docs&#x27;,',
          '&#x20;&#x20;&#x27;This is a Mojo docs&#x27;,',
          '&#x20;&#x20;&#x27;This is Rust docs&#x27;],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, se han mantenido los contenidos originales de <code>ID3</code> e <code>ID4</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Anadir embeddings">Añadir embeddings<a class="anchor-link" href="#Anadir embeddings"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 15" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos añadir embeddings directamente sin añadir documentos. Aunque esto no tiene mucho sentido, ya que si solo añadimos los embeddings, cuando queramos hacer una consulta no habrá documentos que recuperar.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Obtenemos unos embeddings para poder crear otros con las mismas dimensiones</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">embedding1</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="s1">&#39;embeddings&#39;</span><span class="p">]</span>',
      '<span class="nb">len</span><span class="p">(</span><span class="n">embedding1</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">embedding1</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(1, 384)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Creamos unos embeddings nuevos con todos unos para saber cuáles son los que hemos creado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">new_embedding</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">embedding1</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
      '<span class="n">new_embedding</span> <span class="o">=</span> <span class="p">[</span><span class="n">new_embedding</span><span class="p">]</span>',
      '<span class="nb">len</span><span class="p">(</span><span class="n">new_embedding</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">new_embedding</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(1, 384)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora añadimos los nuevos embeddings</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">embeddings</span><span class="o">=</span><span class="n">new_embedding</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;Only embeddings&quot;</span><span class="p">}],</span>',
      '<span class="w">    </span><span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;id5&quot;</span><span class="p">]</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver los datos de la colección</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()[</span><span class="s1">&#39;embeddings&#39;</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '...,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>El último elemento de la condición tiene los embeddings que hemos añadido</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>**Nota**: Si intentamos añadir embeddings con un tamaño diferente a los que ya hay en la colección, nos dará un error</p>
      </blockquote>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">new_embedding_differetn_size</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">embedding1</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="n">new_embedding_differetn_size</span> <span class="o">=</span> <span class="p">[</span><span class="n">new_embedding_differetn_size</span><span class="p">]</span>',
      '<span class="nb">len</span><span class="p">(</span><span class="n">new_embedding_differetn_size</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">new_embedding_differetn_size</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(1, 383)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver la dimensión del embedding es 383, en vez de 384</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">embeddings</span><span class="o">=</span><span class="n">new_embedding_differetn_size</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;New embeddings different size&quot;</span><span class="p">}],</span>',
      '<span class="w">    </span><span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;id6&quot;</span><span class="p">]</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '---------------------------------------------------------------------------InvalidDimensionException                 Traceback (most recent call last)Cell In[28], line 1',
          '----&amp;gt; 1 collection.add(',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;2     embeddings=new_embedding_differetn_size,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;3     metadatas=[&#x7B;&quot;source&quot;: &quot;New embeddings different size&quot;&#x7D;],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;4     ids=[&quot;id6&quot;]',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;5 )',
          'File ~/miniforge3/envs/crhomadb/lib/python3.11/site-packages/chromadb/api/models/Collection.py:168, in Collection.add(self, ids, embeddings, metadatas, documents, images, uris)',
          '&#x20;&#x20;&#x20;&#x20;163             raise ValueError(',
          '&#x20;&#x20;&#x20;&#x20;164                 &quot;You must set a data loader on the collection if loading from URIs.&quot;',
          '&#x20;&#x20;&#x20;&#x20;165             )',
          '&#x20;&#x20;&#x20;&#x20;166         embeddings = self._embed(self._data_loader(uris))',
          '--&amp;gt; 168 self._client._add(ids, self.id, embeddings, metadatas, documents, uris)',
          'File ~/miniforge3/envs/crhomadb/lib/python3.11/site-packages/chromadb/telemetry/opentelemetry/__init__.py:127, in trace_method.&amp;lt;locals&amp;gt;.decorator.&amp;lt;locals&amp;gt;.wrapper(*args, **kwargs)',
          '&#x20;&#x20;&#x20;&#x20;125 global tracer, granularity',
          '&#x20;&#x20;&#x20;&#x20;126 if trace_granularity &amp;lt; granularity:',
          '--&amp;gt; 127     return f(*args, **kwargs)',
          '&#x20;&#x20;&#x20;&#x20;128 if not tracer:',
          '&#x20;&#x20;&#x20;&#x20;129     return f(*args, **kwargs)',
          'File ~/miniforge3/envs/crhomadb/lib/python3.11/site-packages/chromadb/api/segment.py:375, in SegmentAPI._add(self, ids, collection_id, embeddings, metadatas, documents, uris)',
          '&#x20;&#x20;&#x20;&#x20;365 records_to_submit = []',
          '&#x20;&#x20;&#x20;&#x20;366 for r in _records(',
          '&#x20;&#x20;&#x20;&#x20;367     t.Operation.ADD,',
          '&#x20;&#x20;&#x20;&#x20;368     ids=ids,',
          '&#x20;&#x20;&#x20;(...)',
          '&#x20;&#x20;&#x20;&#x20;373     uris=uris,',
          '&#x20;&#x20;&#x20;&#x20;374 ):',
          '--&amp;gt; 375     self._validate_embedding_record(coll, r)',
          '&#x20;&#x20;&#x20;&#x20;376     records_to_submit.append(r)',
          '&#x20;&#x20;&#x20;&#x20;377 self._producer.submit_embeddings(coll[&quot;topic&quot;], records_to_submit)',
          'File ~/miniforge3/envs/crhomadb/lib/python3.11/site-packages/chromadb/telemetry/opentelemetry/__init__.py:127, in trace_method.&amp;lt;locals&amp;gt;.decorator.&amp;lt;locals&amp;gt;.wrapper(*args, **kwargs)',
          '&#x20;&#x20;&#x20;&#x20;125 global tracer, granularity',
          '&#x20;&#x20;&#x20;&#x20;126 if trace_granularity &amp;lt; granularity:',
          '--&amp;gt; 127     return f(*args, **kwargs)',
          '&#x20;&#x20;&#x20;&#x20;128 if not tracer:',
          '&#x20;&#x20;&#x20;&#x20;129     return f(*args, **kwargs)',
          'File ~/miniforge3/envs/crhomadb/lib/python3.11/site-packages/chromadb/api/segment.py:799, in SegmentAPI._validate_embedding_record(self, collection, record)',
          '&#x20;&#x20;&#x20;&#x20;797 add_attributes_to_current_span(&#x7B;&quot;collection_id&quot;: str(collection[&quot;id&quot;])&#x7D;)',
          '&#x20;&#x20;&#x20;&#x20;798 if record[&quot;embedding&quot;]:',
          '--&amp;gt; 799     self._validate_dimension(collection, len(record[&quot;embedding&quot;]), update=True)',
          'File ~/miniforge3/envs/crhomadb/lib/python3.11/site-packages/chromadb/telemetry/opentelemetry/__init__.py:127, in trace_method.&amp;lt;locals&amp;gt;.decorator.&amp;lt;locals&amp;gt;.wrapper(*args, **kwargs)',
          '&#x20;&#x20;&#x20;&#x20;125 global tracer, granularity',
          '&#x20;&#x20;&#x20;&#x20;126 if trace_granularity &amp;lt; granularity:',
          '--&amp;gt; 127     return f(*args, **kwargs)',
          '&#x20;&#x20;&#x20;&#x20;128 if not tracer:',
          '&#x20;&#x20;&#x20;&#x20;129     return f(*args, **kwargs)',
          'File ~/miniforge3/envs/crhomadb/lib/python3.11/site-packages/chromadb/api/segment.py:814, in SegmentAPI._validate_dimension(self, collection, dim, update)',
          '&#x20;&#x20;&#x20;&#x20;812         self._collection_cache[id][&quot;dimension&quot;] = dim',
          '&#x20;&#x20;&#x20;&#x20;813 elif collection[&quot;dimension&quot;] != dim:',
          '--&amp;gt; 814     raise InvalidDimensionException(',
          '&#x20;&#x20;&#x20;&#x20;815         f&quot;Embedding dimension &#x7B;dim&#x7D; does not match collection dimensionality &#x7B;collection[&#x27;dimension&#x27;]&#x7D;&quot;',
          '&#x20;&#x20;&#x20;&#x20;816     )',
          '&#x20;&#x20;&#x20;&#x20;817 else:',
          '&#x20;&#x20;&#x20;&#x20;818     return',
          'InvalidDimensionException: Embedding dimension 383 does not match collection dimensionality 384',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Anadir documentos y embeddings">Añadir documentos y embeddings<a class="anchor-link" href="#Anadir documentos y embeddings"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 16" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Chroma nos permite también añadir documentos y embeddings a la vez. De modo que si se hace esto, no creará los embedding del documento</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;This is a Pytorch docs&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">embeddings</span><span class="o">=</span><span class="n">new_embedding</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;Pytorch source&quot;</span><span class="p">}],</span>',
      '<span class="w">    </span><span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;id6&quot;</span><span class="p">]</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si miramos los embeddings del último elemento de la colección, veremos que son los que hemos añadido</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()[</span><span class="s1">&#39;embeddings&#39;</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '...,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0,',
          '1.0]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Consultas">Consultas<a class="anchor-link" href="#Consultas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 17" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Consultas por documentos">Consultas por documentos<a class="anchor-link" href="#Consultas por documentos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 18" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para hacer una consulta usamos el método <code>query</code>. Con el parámetro <code>n_results</code> podemos especificar cuántos resultados queremos obtener</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;python&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">n_results</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [[&#x27;id1&#x27;]],',
          '&#x27;distances&#x27;: [[0.5389559268951416]],',
          '&#x27;metadatas&#x27;: [[&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;]],',
          '&#x27;embeddings&#x27;: None,',
          '&#x27;documents&#x27;: [[&#x27;This is a python docs&#x27;]],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si en vez de <code>n_results = 1</code> ponemos un valor mayor, nos devolverá más resultados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;python&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [[&#x27;id1&#x27;, &#x27;id2&#x27;, &#x27;id4&#x27;, &#x27;id3&#x27;, &#x27;id5&#x27;, &#x27;id6&#x27;]],',
          '&#x27;distances&#x27;: [[0.5389559268951416,',
          '&#x20;&#x20;&#x20;1.5743632316589355,',
          '&#x20;&#x20;&#x20;1.578398585319519,',
          '&#x20;&#x20;&#x20;1.59961998462677,',
          '&#x20;&#x20;&#x20;384.56890869140625,',
          '&#x20;&#x20;&#x20;384.56890869140625]],',
          '&#x27;metadatas&#x27;: [[&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;JavaScript source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Rust source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Mojo source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Only embeddings&#x27;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Pytorch source&#x27;&#x7D;]],',
          '&#x27;embeddings&#x27;: None,',
          '&#x27;documents&#x27;: [[&#x27;This is a python docs&#x27;,',
          '&#x20;&#x20;&#x20;&#x27;This is JavaScript docs&#x27;,',
          '&#x20;&#x20;&#x20;&#x27;This is Rust docs&#x27;,',
          '&#x20;&#x20;&#x20;&#x27;This is a Mojo docs&#x27;,',
          '&#x20;&#x20;&#x20;None,',
          '&#x20;&#x20;&#x20;&#x27;This is a Pytorch docs&#x27;]],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos filtrar por un valor de metadato con el argumento <code>where</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;python&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">where</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;Python source&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [[&#x27;id1&#x27;]],',
          '&#x27;distances&#x27;: [[0.5389559268951416]],',
          '&#x27;metadatas&#x27;: [[&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;]],',
          '&#x27;embeddings&#x27;: None,',
          '&#x27;documents&#x27;: [[&#x27;This is a python docs&#x27;]],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que ya solo nos devuelve un resultado</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>También podemos filtrar por el contenido del documento con el argumento <code>where_document</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;python&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">where_document</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;$contains&quot;</span><span class="p">:</span> <span class="s2">&quot;python&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [[&#x27;id1&#x27;]],',
          '&#x27;distances&#x27;: [[0.5389559268951416]],',
          '&#x27;metadatas&#x27;: [[&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;]],',
          '&#x27;embeddings&#x27;: None,',
          '&#x27;documents&#x27;: [[&#x27;This is a python docs&#x27;]],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Más adelante veremos las posibilidades que tenemos aquí</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Cuando hacemos una consulta podemos decir qué datos queremos que nos devuelva, por ejemplo solo los embeddings, solo la metadatos, o varios datos especificándoselo en una lista mediante el argumento <code>include</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;python&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">include</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;documents&quot;</span><span class="p">,</span> <span class="s2">&quot;distances&quot;</span><span class="p">]</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [[&#x27;id1&#x27;, &#x27;id2&#x27;, &#x27;id4&#x27;, &#x27;id3&#x27;, &#x27;id5&#x27;, &#x27;id6&#x27;]],',
          '&#x27;distances&#x27;: [[0.5389559268951416,',
          '&#x20;&#x20;&#x20;1.5743632316589355,',
          '&#x20;&#x20;&#x20;1.578398585319519,',
          '&#x20;&#x20;&#x20;1.59961998462677,',
          '&#x20;&#x20;&#x20;384.56890869140625,',
          '&#x20;&#x20;&#x20;384.56890869140625]],',
          '&#x27;metadatas&#x27;: None,',
          '&#x27;embeddings&#x27;: None,',
          '&#x27;documents&#x27;: [[&#x27;This is a python docs&#x27;,',
          '&#x20;&#x20;&#x20;&#x27;This is JavaScript docs&#x27;,',
          '&#x20;&#x20;&#x20;&#x27;This is Rust docs&#x27;,',
          '&#x20;&#x20;&#x20;&#x27;This is a Mojo docs&#x27;,',
          '&#x20;&#x20;&#x20;None,',
          '&#x20;&#x20;&#x20;&#x27;This is a Pytorch docs&#x27;]],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que ahora <code>metadatas</code> es <code>None</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Varias consultas a la vez">Varias consultas a la vez<a class="anchor-link" href="#Varias consultas a la vez"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 19" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos hacerle a la colección varias consultas a la vez, para ello, le pasamos una lista al parámetro <code>query_texts</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;programming language&quot;</span><span class="p">,</span> <span class="s2">&quot;high level&quot;</span><span class="p">,</span> <span class="s2">&quot;multi propuse&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">n_results</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [[&#x27;id1&#x27;], [&#x27;id1&#x27;], [&#x27;id3&#x27;]],',
          '&#x27;distances&#x27;: [[1.152251958847046], [1.654376745223999], [1.6786067485809326]],',
          '&#x27;metadatas&#x27;: [[&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;],',
          '&#x20;&#x20;[&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;],',
          '&#x20;&#x20;[&#x7B;&#x27;source&#x27;: &#x27;Mojo source&#x27;&#x7D;]],',
          '&#x27;embeddings&#x27;: None,',
          '&#x27;documents&#x27;: [[&#x27;This is a python docs&#x27;],',
          '&#x20;&#x20;[&#x27;This is a python docs&#x27;],',
          '&#x20;&#x20;[&#x27;This is a Mojo docs&#x27;]],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para cada consulta me ha devuelto un resultado</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Esto es muy útil cuando la base de datos está alojada en un servidor y nos cobran por cada consulta que hacemos. Por lo que en vez de hacer una consulta por cada duda que tengamos, hacemos una consulta con todas</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Consultas por embeddings">Consultas por embeddings<a class="anchor-link" href="#Consultas por embeddings"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 20" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Cuando hacemos una consulta por documentos, lo que hace Chroma es calcular el embedding del <code>query_texts</code> y buscar los documentos que más se parezcan a ese embedding. Pero si ya tenemos el embedding, podemos hacer la consulta directamente con el embedding</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos primero a obtener el embedding de una consulta con la misma función de embedding de las colección</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">query_texts</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;python language&quot;</span><span class="p">]</span>',
      '<span class="n">query_embeddings</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">_embedding_function</span><span class="p">(</span><span class="n">query_texts</span><span class="p">)</span>',
      '<span class="n">query_embeddings</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[[-0.04816831275820732,',
          '&#x20;&#x20;0.014662696048617363,',
          '&#x20;&#x20;-0.031021444126963615,',
          '&#x20;&#x20;0.008308809250593185,',
          '&#x20;&#x20;-0.07176128774881363,',
          '&#x20;&#x20;-0.10355626791715622,',
          '&#x20;&#x20;0.06690476089715958,',
          '&#x20;&#x20;0.04229631647467613,',
          '&#x20;&#x20;-0.03681119903922081,',
          '&#x20;&#x20;-0.04993892088532448,',
          '&#x20;&#x20;0.03186540678143501,',
          '&#x20;&#x20;0.015252595767378807,',
          '&#x20;&#x20;0.0642094686627388,',
          '&#x20;&#x20;0.018130118027329445,',
          '&#x20;&#x20;0.016300885006785393,',
          '&#x20;&#x20;-0.028082313016057014,',
          '&#x20;&#x20;-0.03994889184832573,',
          '&#x20;&#x20;0.023195551708340645,',
          '&#x20;&#x20;0.004547565709799528,',
          '&#x20;&#x20;-0.11764183640480042,',
          '&#x20;&#x20;0.019792592152953148,',
          '&#x20;&#x20;0.0496944822371006,',
          '&#x20;&#x20;-0.013253907673060894,',
          '&#x20;&#x20;0.03610404208302498,',
          '&#x20;&#x20;0.030529780313372612,',
          '&#x20;&#x20;-0.01815914921462536,',
          '&#x20;&#x20;-0.009753326885402203,',
          '&#x20;&#x20;0.03412770479917526,',
          '&#x20;&#x20;0.03020440600812435,',
          '&#x20;&#x20;...',
          '&#x20;&#x20;0.02079579420387745,',
          '&#x20;&#x20;-0.00972712505608797,',
          '&#x20;&#x20;0.13462257385253906,',
          '&#x20;&#x20;0.15277136862277985,',
          '&#x20;&#x20;-0.028574923053383827]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora podemos hacer la consulta con el embedding</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">query_embeddings</span><span class="o">=</span><span class="n">query_embeddings</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">n_results</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [[&#x27;id1&#x27;]],',
          '&#x27;distances&#x27;: [[0.6297433376312256]],',
          '&#x27;metadatas&#x27;: [[&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;]],',
          '&#x27;embeddings&#x27;: None,',
          '&#x27;documents&#x27;: [[&#x27;This is a python docs&#x27;]],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Al igual que antes podemos obtener más resultados aumentando el valor del parámetro <code>n_results</code>, y podemos filtrar con los parámetros <code>where</code> y <code>where_document</code>. También podemos hacer varias consultas de una vez, y podemos especificar qué datos queremos que nos devuelva con el parámetro <code>include</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>**Nota**: Si intentamos hacer una consulta con un embedding de diferente dimensión a los que ya hay en la colección, nos dará un error</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Recuperar documentos por ID">Recuperar documentos por <code>ID</code><a class="anchor-link" href="#Recuperar documentos por ID"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 21" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si conocemos la <code>ID</code> de un documento, podemos recuperar el documento con el método <code>get</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">get</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;id1&quot;</span><span class="p">],</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [&#x27;id1&#x27;],',
          '&#x27;embeddings&#x27;: None,',
          '&#x27;metadatas&#x27;: [&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;],',
          '&#x27;documents&#x27;: [&#x27;This is a python docs&#x27;],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>También se pueden recuperar varios documentos de una sola vez</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">get</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;id1&quot;</span><span class="p">,</span> <span class="s2">&quot;id2&quot;</span><span class="p">,</span> <span class="s2">&quot;id3&quot;</span><span class="p">],</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [&#x27;id1&#x27;, &#x27;id2&#x27;, &#x27;id3&#x27;],',
          '&#x27;embeddings&#x27;: None,',
          '&#x27;metadatas&#x27;: [&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;JavaScript source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Mojo source&#x27;&#x7D;],',
          '&#x27;documents&#x27;: [&#x27;This is a python docs&#x27;,',
          '&#x20;&#x20;&#x27;This is JavaScript docs&#x27;,',
          '&#x20;&#x20;&#x27;This is a Mojo docs&#x27;],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Al igual que antes podemos filtrar con los argumentos <code>where</code> y <code>where_document</code>. También podemos hacer varias consultas de una vez, y podemos especificar qué datos queremos que nos devuelva con el parámetro <code>include</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Filtrado">Filtrado<a class="anchor-link" href="#Filtrado"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 22" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como habíamos visto, se pueden realizar filtros por metadatos con el parámetro <code>where</code>, y por el contenido del documento con el parámetro <code>where_document</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Filtrado por metadata">Filtrado por metadata<a class="anchor-link" href="#Filtrado por metadata"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 23" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como los metadatos me introducían como un diccionario</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python">collection.add(<br>&#x20;&#x20;documents=["This is a python docs", "This is JavaScript docs"],<br>&#x20;&#x20;metadatas=[&#123;"source": "Python source"&#125;, &#123;"source": "JavaScript source"&#125;],<br>&#x20;&#x20;ids=["id1", "id2"]<br>)</code></pre></div>
            </section>
      <p>Lo primero que tenemos que hacer es indicar la llave de la metadata por la que queremos filtrar. A continuación tenemos que poner un operador y el valor</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python">&#123;<br>&#x20;&#x20;"metadata_field": &#123;<br>&#x20;&#x20;&#x20;&#x20;&lt;Operator&gt;: &lt;Value&gt;<br>&#x20;&#x20;&#125;<br>&#125;</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Los posibles valores del operador son</p>
      <ul>
        <li><strong>$eq</strong> - equal to (string, int, float)</li>
        <li><strong>$ne</strong> - not equal to (string, int, float)</li>
        <li><strong>$gt</strong> - greater than (int, float)</li>
        <li><strong>$gte</strong> - greater than or equal to (int, float)</li>
        <li><strong>$lt</strong> - less than (int, float)</li>
        <li><strong>$lte</strong> - less than or equal to (int, float)</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver ahora una consulta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;python&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">n_results</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">where</span><span class="o">=</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;source&quot;</span><span class="p">:</span>',
      '<span class="w">        </span><span class="p">{</span>',
      '<span class="w">            </span><span class="s2">&quot;$eq&quot;</span><span class="p">:</span> <span class="s2">&quot;Python source&quot;</span>',
      '<span class="w">        </span><span class="p">}</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [[&#x27;id1&#x27;]],',
          '&#x27;distances&#x27;: [[0.5389559268951416]],',
          '&#x27;metadatas&#x27;: [[&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;]],',
          '&#x27;embeddings&#x27;: None,',
          '&#x27;documents&#x27;: [[&#x27;This is a python docs&#x27;]],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si no ponemos operador, por defecto será <code>$eq</code>, es decir, esto</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python">&#123;<br>&#x20;&#x20;"metadata_field": &#123;<br>&#x20;&#x20;&#x20;&#x20;&lt;"$eq"&gt;: &lt;Value&gt;<br>&#x20;&#x20;&#125;<br>&#125;</code></pre></div>
            </section>
      <p>Es lo mismo que esto</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python">&#123;<br>&#x20;&#x20;"metadata_field": &lt;Value&gt;<br>&#125;</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>**Nota**: Chroma solo buscará en los datos que tengan el metadato <code>source</code>, por ejemplo si se hace la búsqueda <code>where=&#123;&quot;version&quot;: &#123;&quot;$ne&quot;: 1&#125;&#125;</code> solo devolverá los datos que en su metadata haya una key <code>version</code> y que no sea 1</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Filtrado por el contenido del documento">Filtrado por el contenido del documento<a class="anchor-link" href="#Filtrado por el contenido del documento"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 24" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A la hora de filtrar por el contenido del documento tenemos dos posibles llaves <code><span class="math-inline">contains</code> and <code></span>not_contains</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por ejemplo, buscamos los datos de la colección en los que aparece la palabra <code>python</code> en su documento</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;python&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">where_document</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;$contains&quot;</span><span class="p">:</span> <span class="s2">&quot;python&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [[&#x27;id1&#x27;]],',
          '&#x27;distances&#x27;: [[0.5389559268951416]],',
          '&#x27;metadatas&#x27;: [[&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;]],',
          '&#x27;embeddings&#x27;: None,',
          '&#x27;documents&#x27;: [[&#x27;This is a python docs&#x27;]],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y todos los datos de la colección en los que no aparece la palabra <code>python</code> en su documento</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;python&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">where_document</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;$not_contains&quot;</span><span class="p">:</span> <span class="s2">&quot;python&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [[&#x27;id2&#x27;, &#x27;id4&#x27;, &#x27;id3&#x27;, &#x27;id6&#x27;]],',
          '&#x27;distances&#x27;: [[1.5743632316589355,',
          '&#x20;&#x20;&#x20;1.578398585319519,',
          '&#x20;&#x20;&#x20;1.59961998462677,',
          '&#x20;&#x20;&#x20;384.56890869140625]],',
          '&#x27;metadatas&#x27;: [[&#x7B;&#x27;source&#x27;: &#x27;JavaScript source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Rust source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Mojo source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Pytorch source&#x27;&#x7D;]],',
          '&#x27;embeddings&#x27;: None,',
          '&#x27;documents&#x27;: [[&#x27;This is JavaScript docs&#x27;,',
          '&#x20;&#x20;&#x20;&#x27;This is Rust docs&#x27;,',
          '&#x20;&#x20;&#x20;&#x27;This is a Mojo docs&#x27;,',
          '&#x20;&#x20;&#x20;&#x27;This is a Pytorch docs&#x27;]],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Además podemos usar los operadores lógicos <code><span class="math-inline">and</code> y <code></span>or</code> para hacer consultas más complejas</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python">&#123;<br>&#x20;&#x20;"$and": [<br>&#x20;&#x20;&#x20;&#x20;&#123;<br>&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&lt;Operator&gt;: &lt;Value&gt;<br>&#x20;&#x20;&#x20;&#x20;&#125;,<br>&#x20;&#x20;&#x20;&#x20;&#123;<br>&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&lt;Operator&gt;: &lt;Value&gt;<br>&#x20;&#x20;&#x20;&#x20;&#125;<br>&#x20;&#x20;]<br>&#125;</code></pre></div>
            </section>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python">&#123;<br>&#x20;&#x20;"$or": [<br>&#x20;&#x20;&#x20;&#x20;&#123;<br>&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&lt;Operator&gt;: &lt;Value&gt;<br>&#x20;&#x20;&#x20;&#x20;&#125;,<br>&#x20;&#x20;&#x20;&#x20;&#123;<br>&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&lt;Operator&gt;: &lt;Value&gt;<br>&#x20;&#x20;&#x20;&#x20;&#125;<br>&#x20;&#x20;]<br>&#125;</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por ejemplo, buscamos todos los documentos en los que aparecen las palabras <code>python</code> y <code>docs</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;python&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">where_document</span><span class="o">=</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;$and&quot;</span><span class="p">:</span> <span class="p">[</span>',
      '<span class="w">            </span><span class="p">{</span><span class="s2">&quot;$contains&quot;</span><span class="p">:</span> <span class="s2">&quot;python&quot;</span><span class="p">},</span>',
      '<span class="w">            </span><span class="p">{</span><span class="s2">&quot;$contains&quot;</span><span class="p">:</span> <span class="s2">&quot;docs&quot;</span><span class="p">},</span>',
      '<span class="w">        </span><span class="p">],</span>',
      '<span class="w">    </span><span class="p">},</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [[&#x27;id1&#x27;]],',
          '&#x27;distances&#x27;: [[0.5389559268951416]],',
          '&#x27;metadatas&#x27;: [[&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;]],',
          '&#x27;embeddings&#x27;: None,',
          '&#x27;documents&#x27;: [[&#x27;This is a python docs&#x27;]],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Actualizar datos">Actualizar datos<a class="anchor-link" href="#Actualizar datos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 25" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Cualquier ítem de un dato se puede actualizar con el método update</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;id1&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;This is a updated Python docs&quot;</span><span class="p">]</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver si se ha actualizado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;python&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">where_document</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;$contains&quot;</span><span class="p">:</span> <span class="s2">&quot;Python&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [[&#x27;id1&#x27;]],',
          '&#x27;distances&#x27;: [[0.8247963190078735]],',
          '&#x27;metadatas&#x27;: [[&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;]],',
          '&#x27;embeddings&#x27;: None,',
          '&#x27;documents&#x27;: [[&#x27;This is a updated Python docs&#x27;]],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>**Nota**: Si intentamos actualizar un <code>ID</code> que no existe, nos dará un error</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>**Nota**: Si intentamos actualizar un embedding con otro de distinta dimensión, nos dará un error</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Actualizar o anadir datos">Actualizar o añadir datos<a class="anchor-link" href="#Actualizar o anadir datos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 26" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Con el método <code>upsert</code> podemos actualizar un dato si ya existe, o añadirlo si no existe</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">upsert</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;id6&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;This is a Pytorch docs&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;Pytorch source&quot;</span><span class="p">}],</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Veamos si se ha añadido a la colección</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [&#x27;id1&#x27;, &#x27;id2&#x27;, &#x27;id3&#x27;, &#x27;id4&#x27;, &#x27;id5&#x27;, &#x27;id6&#x27;],',
          '&#x27;embeddings&#x27;: [[-0.08374718576669693,',
          '&#x20;&#x20;&#x20;0.01027572900056839,',
          '&#x20;&#x20;&#x20;-0.04819200187921524,',
          '&#x20;&#x20;&#x20;0.01758415624499321,',
          '&#x20;&#x20;&#x20;0.013158757239580154,',
          '&#x20;&#x20;&#x20;-0.11435151100158691,',
          '&#x20;&#x20;&#x20;-0.024248722940683365,',
          '&#x20;&#x20;&#x20;-0.01319972239434719,',
          '&#x20;&#x20;&#x20;-0.09626100957393646,',
          '&#x20;&#x20;&#x20;-0.010561048053205013,',
          '&#x20;&#x20;&#x20;0.09369225800037384,',
          '&#x20;&#x20;&#x20;0.06017905846238136,',
          '&#x20;&#x20;&#x20;0.031283188611269,',
          '&#x20;&#x20;&#x20;0.014855983667075634,',
          '&#x20;&#x20;&#x20;-0.0015984248602762818,',
          '&#x20;&#x20;&#x20;0.023238031193614006,',
          '&#x20;&#x20;&#x20;-0.04709107056260109,',
          '&#x20;&#x20;&#x20;-0.007838696241378784,',
          '&#x20;&#x20;&#x20;0.012870412319898605,',
          '&#x20;&#x20;&#x20;-0.028354981914162636,',
          '&#x20;&#x20;&#x20;-0.007653804495930672,',
          '&#x20;&#x20;&#x20;0.09018168598413467,',
          '&#x20;&#x20;&#x20;0.060235824435949326,',
          '&#x20;&#x20;&#x20;0.0005205210763961077,',
          '&#x20;&#x20;&#x20;...',
          '&#x20;&#x20;&#x20;0.014388148672878742]],',
          '&#x27;metadatas&#x27;: [&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;JavaScript source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Mojo source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Rust source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Only embeddings&#x27;&#x7D;,',
          '&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Pytorch source&#x27;&#x7D;],',
          '&#x27;documents&#x27;: [&#x27;This is a updated Python docs&#x27;,',
          '&#x20;&#x20;&#x27;This is JavaScript docs&#x27;,',
          '&#x20;&#x20;&#x27;This is a Mojo docs&#x27;,',
          '&#x20;&#x20;&#x27;This is Rust docs&#x27;,',
          '&#x20;&#x20;None,',
          '&#x20;&#x20;&#x27;This is a Pytorch docs&#x27;],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que sí</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Eliminar datos">Eliminar datos<a class="anchor-link" href="#Eliminar datos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 27" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos eliminar datos de una colección con el método <code>delete</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a eliminar el dato con <code>ID</code> <code>id5</code> que es el que añadimos con su embedding todo a unos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;id5&quot;</span><span class="p">]</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver si se ha eliminado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [&#x27;id1&#x27;, &#x27;id2&#x27;, &#x27;id3&#x27;, &#x27;id4&#x27;, &#x27;id6&#x27;],',
          '&#x27;embeddings&#x27;: [[-0.08374718576669693,',
          '&#x20;&#x20;&#x20;0.01027572900056839,',
          '&#x20;&#x20;&#x20;-0.04819200187921524,',
          '&#x20;&#x20;&#x20;0.01758415624499321,',
          '&#x20;&#x20;&#x20;0.013158757239580154,',
          '&#x20;&#x20;&#x20;-0.11435151100158691,',
          '&#x20;&#x20;&#x20;-0.024248722940683365,',
          '&#x20;&#x20;&#x20;-0.01319972239434719,',
          '&#x20;&#x20;&#x20;-0.09626100957393646,',
          '&#x20;&#x20;&#x20;-0.010561048053205013,',
          '&#x20;&#x20;&#x20;0.09369225800037384,',
          '&#x20;&#x20;&#x20;0.06017905846238136,',
          '&#x20;&#x20;&#x20;0.031283188611269,',
          '&#x20;&#x20;&#x20;0.014855983667075634,',
          '&#x20;&#x20;&#x20;-0.0015984248602762818,',
          '&#x20;&#x20;&#x20;0.023238031193614006,',
          '&#x20;&#x20;&#x20;-0.04709107056260109,',
          '&#x20;&#x20;&#x20;-0.007838696241378784,',
          '&#x20;&#x20;&#x20;0.012870412319898605,',
          '&#x20;&#x20;&#x20;-0.028354981914162636,',
          '&#x20;&#x20;&#x20;-0.007653804495930672,',
          '&#x20;&#x20;&#x20;0.09018168598413467,',
          '&#x20;&#x20;&#x20;0.060235824435949326,',
          '&#x20;&#x20;&#x20;0.0005205210763961077,',
          '&#x20;&#x20;&#x20;...',
          '&#x20;&#x20;&#x20;0.07033486664295197,',
          '&#x20;&#x20;&#x20;0.014388148672878742]],',
          '&#x27;metadatas&#x27;: [&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;JavaScript source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Mojo source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Rust source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Pytorch source&#x27;&#x7D;],',
          '&#x27;documents&#x27;: [&#x27;This is a updated Python docs&#x27;,',
          '&#x20;&#x20;&#x27;This is JavaScript docs&#x27;,',
          '&#x20;&#x20;&#x27;This is a Mojo docs&#x27;,',
          '&#x20;&#x20;&#x27;This is Rust docs&#x27;,',
          '&#x20;&#x20;&#x27;This is a Pytorch docs&#x27;],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que ya no está</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Embeddings">Embeddings<a class="anchor-link" href="#Embeddings"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 28" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como hemos dicho, podemos usar distintas funciones de embeddings y si no se le especifica ninguna usará <code>all-MiniLM-L6-v2</code>. En la página de la <a href="https://docs.trychroma.com/embeddings" target="_blank" rel="nofollow noreferrer">documentación de embeddings</a> de chroma podemos ver las distintas funciones de embeddings que podemos usar. Como esto es algo que puede ir cambiando, y además algunas son de pago y requieren api key, vamos a explicar solo cómo usar las de HuggingFace</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primero establecemos la función de embedding</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">chromadb.utils.embedding_functions</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nn">embedding_functions</span>',
      '<span class="w"> </span>',
      '<span class="n">huggingface_ef</span> <span class="o">=</span> <span class="n">embedding_functions</span><span class="o">.</span><span class="n">HuggingFaceEmbeddingFunction</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">api_key</span><span class="o">=</span><span class="s2">&quot;YOUR_API_KEY&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">model_name</span><span class="o">=</span><span class="s2">&quot;sentence-transformers/all-mpnet-base-v2&quot;</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>En mi caso uso <code>sentence-transformers/all-mpnet-base-v2</code> que es la más descargada de <code>sentence-transformers</code> en el momento de escribir este post</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para añadir ahora la función de embedding a la colección, tenemos que añadir el argumento <code>metadata=&#123;&quot;embedding&quot;: &#x3C;function&#x3E;&#125;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;colection_huggingface&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">embedding_function</span><span class="o">=</span><span class="n">huggingface_ef</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos comprobar que hemos añadido la nueva función de embedding. Lo podemos hacer calculando los embeddings de una palabra</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">embedding</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">_embedding_function</span><span class="p">([</span><span class="s2">&quot;python&quot;</span><span class="p">])</span>',
      '<span class="nb">len</span><span class="p">(</span><span class="n">embedding</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">embedding</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(1, 768)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>La longitud del embedding es de 768</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora calculamos el embedding con la función de embedding de la colección anterior</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;my_collection&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">embedding</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">_embedding_function</span><span class="p">([</span><span class="s2">&quot;python&quot;</span><span class="p">])</span>',
      '<span class="nb">len</span><span class="p">(</span><span class="n">embedding</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">embedding</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(1, 384)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que ahora la longitud del embedding es 384, es decir, sí habíamos usado antes una nueva función de embedding</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Multimodalidad">Multimodalidad<a class="anchor-link" href="#Multimodalidad"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 29" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos añadir embeddings de imágenes ya que Chroma tiene incorporado <a href="https://github.com/mlfoundations/open_clip" target="_blank" rel="nofollow noreferrer">OpenCLIP</a>. <a href="https://github.com/mlfoundations/open_clip">OpenCLIP</a> es una implementación open source de <a href="https://github.com/openai/CLIP">CLIP</a> (Contrastive Language-Image Pre-Training), que es una red neuronal de OpenAI la cual es capaz de dar una descripción de una imagen</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para poder usar OpenCLIP, tenemos que instalarlo con pip</p>
      <div class='highlight'><pre><code class="language-bash">pip install open-clip-torch</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Una vez instalado, podemos usarlo para crear embeddings de la siguiente foto</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/chromadb_dalle3.webp" alt="chroma db - python mixture">
      <p>Qué la tengo en mi path local <code>../images/chromadb_dalle3.webp</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">chromadb.utils.embedding_functions</span><span class="w"> </span><span class="kn">import</span>  <span class="n">OpenCLIPEmbeddingFunction</span>',
      '<span class="w"> </span>',
      '<span class="n">embedding_function</span> <span class="o">=</span> <span class="n">OpenCLIPEmbeddingFunction</span><span class="p">()</span>',
      '<span class="n">image</span> <span class="o">=</span> <span class="s2">&quot;../images/chromadb_dalle3.webp&quot;</span>',
      '<span class="n">embedding</span> <span class="o">=</span> <span class="n">embedding_function</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>',
      '<span class="nb">len</span><span class="p">(</span><span class="n">embedding</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">embedding</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(30, 512)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, crea un embedding de tamaño 30x512</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Chroma también trae un cargador de imágenes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">chromadb.utils.data_loaders</span><span class="w"> </span><span class="kn">import</span> <span class="n">ImageLoader</span>',
      '<span class="n">data_loader</span> <span class="o">=</span> <span class="n">ImageLoader</span><span class="p">()</span>',
      '<span class="n">data</span> <span class="o">=</span> <span class="n">data_loader</span><span class="o">.</span><span class="n">_load_image</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>',
      '<span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">data</span><span class="o">.</span><span class="n">shape</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(numpy.ndarray, (1024, 1024, 3))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Así que podemos crear una colección multimodal con esta función de embedding y el cargador de imágenes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;multimodal_collection&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">embedding_function</span><span class="o">=</span><span class="n">embedding_function</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">data_loader</span><span class="o">=</span><span class="n">data_loader</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y podemos añadir los embeddings de las imágenes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;id1&#39;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">images</span><span class="o">=</span><span class="p">[</span><span class="n">image</span><span class="p">]</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver qué ha guardado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [&#x27;id1&#x27;],',
          '&#x27;embeddings&#x27;: [[-0.014372998848557472,',
          '&#x20;&#x20;&#x20;0.0063015008345246315,',
          '&#x20;&#x20;&#x20;-0.03794914484024048,',
          '&#x20;&#x20;&#x20;-0.028725482523441315,',
          '&#x20;&#x20;&#x20;-0.014304812066257,',
          '&#x20;&#x20;&#x20;-0.04323698952794075,',
          '&#x20;&#x20;&#x20;0.008670451119542122,',
          '&#x20;&#x20;&#x20;-0.016066772863268852,',
          '&#x20;&#x20;&#x20;-0.02365742437541485,',
          '&#x20;&#x20;&#x20;0.07881983369588852,',
          '&#x20;&#x20;&#x20;0.022775636985898018,',
          '&#x20;&#x20;&#x20;0.004407387692481279,',
          '&#x20;&#x20;&#x20;0.058205753564834595,',
          '&#x20;&#x20;&#x20;-0.02389293536543846,',
          '&#x20;&#x20;&#x20;-0.027586588636040688,',
          '&#x20;&#x20;&#x20;0.05778728798031807,',
          '&#x20;&#x20;&#x20;-0.2631031572818756,',
          '&#x20;&#x20;&#x20;0.044124454259872437,',
          '&#x20;&#x20;&#x20;0.010588622651994228,',
          '&#x20;&#x20;&#x20;-0.035578884184360504,',
          '&#x20;&#x20;&#x20;-0.041719693690538406,',
          '&#x20;&#x20;&#x20;-0.0033654430881142616,',
          '&#x20;&#x20;&#x20;-0.04731074720621109,',
          '&#x20;&#x20;&#x20;-0.0019943572115153074,',
          '&#x20;&#x20;&#x20;...',
          '&#x20;&#x20;&#x20;0.04397008568048477,',
          '&#x20;&#x20;&#x20;0.04396628588438034]],',
          '&#x27;metadatas&#x27;: [None],',
          '&#x27;documents&#x27;: [None],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Chroma no almacena las imágenes, solo los embeddings, por lo que para no perder la relación entre los embeddings y las imágenes, podemos guardar la ruta de las imágenes en la metadatos. Vamos a usar el método <code>update</code> para añadir la ruta de la imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;id1&#39;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">images</span><span class="o">=</span><span class="p">[</span><span class="n">image</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;source&quot;</span><span class="p">:</span> <span class="n">image</span><span class="p">}]</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si volvemos a ver qué tiene guardada la colección</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [&#x27;id1&#x27;],',
          '&#x27;embeddings&#x27;: [[-0.014372998848557472,',
          '&#x20;&#x20;&#x20;0.0063015008345246315,',
          '&#x20;&#x20;&#x20;-0.03794914484024048,',
          '&#x20;&#x20;&#x20;-0.028725482523441315,',
          '&#x20;&#x20;&#x20;-0.014304812066257,',
          '&#x20;&#x20;&#x20;-0.04323698952794075,',
          '&#x20;&#x20;&#x20;0.008670451119542122,',
          '&#x20;&#x20;&#x20;-0.016066772863268852,',
          '&#x20;&#x20;&#x20;-0.02365742437541485,',
          '&#x20;&#x20;&#x20;0.07881983369588852,',
          '&#x20;&#x20;&#x20;0.022775636985898018,',
          '&#x20;&#x20;&#x20;0.004407387692481279,',
          '&#x20;&#x20;&#x20;0.058205753564834595,',
          '&#x20;&#x20;&#x20;-0.02389293536543846,',
          '&#x20;&#x20;&#x20;-0.027586588636040688,',
          '&#x20;&#x20;&#x20;0.05778728798031807,',
          '&#x20;&#x20;&#x20;-0.2631031572818756,',
          '&#x20;&#x20;&#x20;0.044124454259872437,',
          '&#x20;&#x20;&#x20;0.010588622651994228,',
          '&#x20;&#x20;&#x20;-0.035578884184360504,',
          '&#x20;&#x20;&#x20;-0.041719693690538406,',
          '&#x20;&#x20;&#x20;-0.0033654430881142616,',
          '&#x20;&#x20;&#x20;-0.04731074720621109,',
          '&#x20;&#x20;&#x20;-0.0019943572115153074,',
          '&#x20;&#x20;&#x20;...',
          '&#x20;&#x20;&#x20;0.04397008568048477,',
          '&#x20;&#x20;&#x20;0.04396628588438034]],',
          '&#x27;metadatas&#x27;: [&#x7B;&#x27;source&#x27;: &#x27;../images/chromadb_dalle3.webp&#x27;&#x7D;],',
          '&#x27;documents&#x27;: [None],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como la colección es multimodal, podemos añadirle documentos igual que antes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;id2&#39;</span><span class="p">,</span> <span class="s1">&#39;id3&#39;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;This is a python docs&quot;</span><span class="p">,</span> <span class="s2">&quot;This is JavaScript docs&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;Python source&quot;</span><span class="p">},</span> <span class="p">{</span><span class="s2">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;JavaScript source&quot;</span><span class="p">}]</span>',
      '<span class="p">)</span>',
      '<span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [&#x27;id1&#x27;, &#x27;id2&#x27;, &#x27;id3&#x27;],',
          '&#x27;embeddings&#x27;: [[-0.014372998848557472,',
          '&#x20;&#x20;&#x20;0.0063015008345246315,',
          '&#x20;&#x20;&#x20;-0.03794914484024048,',
          '&#x20;&#x20;&#x20;-0.028725482523441315,',
          '&#x20;&#x20;&#x20;-0.014304812066257,',
          '&#x20;&#x20;&#x20;-0.04323698952794075,',
          '&#x20;&#x20;&#x20;0.008670451119542122,',
          '&#x20;&#x20;&#x20;-0.016066772863268852,',
          '&#x20;&#x20;&#x20;-0.02365742437541485,',
          '&#x20;&#x20;&#x20;0.07881983369588852,',
          '&#x20;&#x20;&#x20;0.022775636985898018,',
          '&#x20;&#x20;&#x20;0.004407387692481279,',
          '&#x20;&#x20;&#x20;0.058205753564834595,',
          '&#x20;&#x20;&#x20;-0.02389293536543846,',
          '&#x20;&#x20;&#x20;-0.027586588636040688,',
          '&#x20;&#x20;&#x20;0.05778728798031807,',
          '&#x20;&#x20;&#x20;-0.2631031572818756,',
          '&#x20;&#x20;&#x20;0.044124454259872437,',
          '&#x20;&#x20;&#x20;0.010588622651994228,',
          '&#x20;&#x20;&#x20;-0.035578884184360504,',
          '&#x20;&#x20;&#x20;-0.041719693690538406,',
          '&#x20;&#x20;&#x20;-0.0033654430881142616,',
          '&#x20;&#x20;&#x20;-0.04731074720621109,',
          '&#x20;&#x20;&#x20;-0.0019943572115153074,',
          '&#x20;&#x20;&#x20;...',
          '&#x20;&#x20;&#x20;-0.061795610934495926,',
          '&#x20;&#x20;&#x20;-0.02433035336434841]],',
          '&#x27;metadatas&#x27;: [&#x7B;&#x27;source&#x27;: &#x27;../images/chromadb_dalle3.webp&#x27;&#x7D;,',
          '&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;JavaScript source&#x27;&#x7D;],',
          '&#x27;documents&#x27;: [None, &#x27;This is a python docs&#x27;, &#x27;This is JavaScript docs&#x27;],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por último, podemos hacer consultas con texto</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;persona trabajando en una mesa&quot;</span><span class="p">],</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'WARNING:chromadb.segment.impl.vector.local_hnsw:Number of requested results 10 is greater than number of elements in index 3, updating n_results = 3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [[&#x27;id2&#x27;, &#x27;id1&#x27;, &#x27;id3&#x27;]],',
          '&#x27;distances&#x27;: [[1.1276676654815674, 1.1777206659317017, 1.2047353982925415]],',
          '&#x27;metadatas&#x27;: [[&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;../images/chromadb_dalle3.webp&#x27;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;JavaScript source&#x27;&#x7D;]],',
          '&#x27;embeddings&#x27;: None,',
          '&#x27;documents&#x27;: [[&#x27;This is a python docs&#x27;, None, &#x27;This is JavaScript docs&#x27;]],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Con texto no nos ha dado la imagen como primer resultado, sino la documentación de python</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pero también podemos hacerlas con imágenes, en este caso la voy a hacer con esta imagen</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/chromadb_elegant.webp" alt="chroma logo">
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">query_image</span> <span class="o">=</span> <span class="s2">&quot;https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/chromadb_elegant.webp&quot;</span>',
      '<span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">query_images</span><span class="o">=</span><span class="p">[</span><span class="n">query_image</span><span class="p">],</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'WARNING:chromadb.segment.impl.vector.local_hnsw:Number of requested results 10 is greater than number of elements in index 3, updating n_results = 3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;ids&#x27;: [[&#x27;id1&#x27;, &#x27;id2&#x27;, &#x27;id3&#x27;]],',
          '&#x27;distances&#x27;: [[0.6684874296188354, 0.9450105428695679, 1.0639115571975708]],',
          '&#x27;metadatas&#x27;: [[&#x7B;&#x27;source&#x27;: &#x27;../images/chromadb_dalle3.webp&#x27;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;Python source&#x27;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x7B;&#x27;source&#x27;: &#x27;JavaScript source&#x27;&#x7D;]],',
          '&#x27;embeddings&#x27;: None,',
          '&#x27;documents&#x27;: [[None, &#x27;This is a python docs&#x27;, &#x27;This is JavaScript docs&#x27;]],',
          '&#x27;uris&#x27;: None,',
          '&#x27;data&#x27;: None&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora sí da como primer resultado la imagen que habíamos guardado</p>
      </section>







    </div>

  </section>

</PostLayout>
