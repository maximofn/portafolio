---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Docker';
const end_url = 'docker';
const description = '🐳 Crea todos los entornos de desarrollo que quieras con Docker. Ya no más En mi máquina funciona';
const keywords = 'docker, tutorial, desarrollo, entornos';
const languaje = 'ES';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/docker.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1316
    image_height=1126
    image_extension=webp
    article_date=2023-01-22+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Contenedores"><h2>Contenedores</h2></a>
      <a class="anchor-link" href="#Hello world"><h3>Hello world</h3></a>
      <a class="anchor-link" href="#El modo iteractivo"><h3>El modo iteractivo</h3></a>
      <a class="anchor-link" href="#Ciclo de vida de un contenedor"><h3>Ciclo de vida de un contenedor</h3></a>
      <a class="anchor-link" href="#Contenedores de un solo uso"><h3>Contenedores de un solo uso</h3></a>
      <a class="anchor-link" href="#Exponer contenedores al mundo exterior"><h3>Exponer contenedores al mundo exterior</h3></a>
      <a class="anchor-link" href="#Datos en Docker"><h2>Datos en Docker</h2></a>
      <a class="anchor-link" href="#Bind mounts"><h3>Bind mounts</h3></a>
      <a class="anchor-link" href="#Volumenes"><h3>Volúmenes</h3></a>
      <a class="anchor-link" href="#Insertar y extraer archivos de un contenedor"><h3>Insertar y extraer archivos de un contenedor</h3></a>
      <a class="anchor-link" href="#Imagenes"><h2>Imágenes</h2></a>
      <a class="anchor-link" href="#Conceptos fundamentales"><h3>Conceptos fundamentales</h3></a>
      <a class="anchor-link" href="#Crear imágenes mediante Dockerfile"><h3>Crear imágenes mediante <code>Dockerfile</code></h3></a>
      <a class="anchor-link" href="#El sistema de capas"><h3>El sistema de capas</h3></a>
      <a class="anchor-link" href="#Busqueda en docker hub"><h3>Búsqueda en docker hub</h3></a>
      <a class="anchor-link" href="#Uso de docker para crear aplicaciones"><h2>Uso de docker para crear aplicaciones</h2></a>
      <a class="anchor-link" href="#Exposicion de puertos"><h3>Exposición de puertos</h3></a>
      <a class="anchor-link" href="#Reuso del cache de capas al compilar"><h3>Reuso del caché de capas al compilar</h3></a>
      <a class="anchor-link" href="#Escribir correctamente un Dockerfile"><h3>Escribir correctamente un Dockerfile</h3></a>
      <a class="anchor-link" href="#Copiar el codigo antes de la ejecucion"><h4>Copiar el código antes de la ejecución</h4></a>
      <a class="anchor-link" href="#Copiar solo el codigo nesario"><h4>Copiar solo el código nesario</h4></a>
      <a class="anchor-link" href="#Actualizar repositorios e instalar python en la misma linea"><h4>Actualizar repositorios e instalar python en la misma línea</h4></a>
      <a class="anchor-link" href="#No instalar ssh"><h4>No instalar ssh</h4></a>
      <a class="anchor-link" href="#Usar --no-install-recommends"><h4>Usar <code>--no-install-recommends</code></h4></a>
      <a class="anchor-link" href="#Borrar lista de repositorios actualizados"><h4>Borrar lista de repositorios actualizados</h4></a>
      <a class="anchor-link" href="#Usar una imagen de Python"><h4>Usar una imagen de Python</h4></a>
      <a class="anchor-link" href="#Especificar la imagen de Python"><h4>Especificar la imagen de Python</h4></a>
      <a class="anchor-link" href="#Elegir un tag pequeno"><h4>Elegir un tag pequeño</h4></a>
      <a class="anchor-link" href="#Indicar el workspace"><h4>Indicar el workspace</h4></a>
      <a class="anchor-link" href="#Indicar el workspace"><h4>Indicar el workspace</h4></a>
      <a class="anchor-link" href="#Código compartido en una carpeta bind mount"><h3>Código compartido en una carpeta <code>bind mount</code></h3></a>
      <a class="anchor-link" href="#Conectar contenedores por red"><h3>Conectar contenedores por red</h3></a>
      <a class="anchor-link" href="#Uso de GPUs"><h2>Uso de GPUs</h2></a>
      <a class="anchor-link" href="#Configurar el repositorio y la llave GPG"><h3>Configurar el repositorio y la llave GPG</h3></a>
      <a class="anchor-link" href="#Instalación de nvidia container toolkit"><h3>Instalación de <code>nvidia container toolkit</code></h3></a>
      <a class="anchor-link" href="#Reinicio de docker"><h3>Reinicio de docker</h3></a>
      <a class="anchor-link" href="#Uso de GPUs"><h3>Uso de GPUs</h3></a>
      <a class="anchor-link" href="#Docker compose"><h2>Docker compose</h2></a>
      <a class="anchor-link" href="#Docker compose vs docker-compose"><h3>Docker compose vs docker-compose</h3></a>
      <a class="anchor-link" href="#Docker compose"><h3>Docker compose</h3></a>
      <a class="anchor-link" href="#Como nombra docker compose los contenedores"><h3>Cómo nombra docker compose los contenedores</h3></a>
      <a class="anchor-link" href="#Logs en docker compose"><h3>Logs en docker compose</h3></a>
      <a class="anchor-link" href="#Exec servicios"><h3>Exec servicios</h3></a>
      <a class="anchor-link" href="#Deteniendo docker compose"><h3>Deteniendo docker compose</h3></a>
      <a class="anchor-link" href="#Docker compose como herramienta de desarrollo"><h3>Docker compose como herramienta de desarrollo</h3></a>
      <a class="anchor-link" href="#Exposicion de puertos en docker compose"><h3>Exposición de puertos en docker compose</h3></a>
      <a class="anchor-link" href="#Docker compose en equipo - docker override"><h3>Docker compose en equipo - docker override</h3></a>
      <a class="anchor-link" href="#Docker compose restart"><h3>Docker compose restart</h3></a>
      <a class="anchor-link" href="#Docker avanzado"><h2>Docker avanzado</h2></a>
      <a class="anchor-link" href="#Administrar ambiente de trabajo"><h3>Administrar ambiente de trabajo</h3></a>
      <a class="anchor-link" href="#Borrado de contenedores apagados"><h4>Borrado de contenedores apagados</h4></a>
      <a class="anchor-link" href="#Borrado de todos los contenedores"><h4>Borrado de todos los contenedores</h4></a>
      <a class="anchor-link" href="#Borrado de todo"><h4>Borrado de todo</h4></a>
      <a class="anchor-link" href="#Uso de recursos del host por parte de contenedores"><h3>Uso de recursos del host por parte de contenedores</h3></a>
      <a class="anchor-link" href="#Deteniendo contenedores correctamente: SHELL vs EXEC"><h3>Deteniendo contenedores correctamente: SHELL vs EXEC</h3></a>
      <a class="anchor-link" href="#Contenedores ejecutables"><h3>Contenedores ejecutables</h3></a>
      <a class="anchor-link" href="#El contexto de build"><h3>El contexto de <code>build</code></h3></a>
      <a class="anchor-link" href="#Multi-stage build"><h3>Multi-stage build</h3></a>
      <a class="anchor-link" href="#Multi arch builds"><h3>Multi arch builds</h3></a>
      <a class="anchor-link" href="#Escritura correcta de Dockerfiles avanzado"><h3>Escritura correcta de Dockerfiles avanzado</h3></a>
      <a class="anchor-link" href="#Diferencia entre RUN, CMD y ENTRYPOINT"><h3>Diferencia entre RUN, CMD y ENTRYPOINT</h3></a>
      <a class="anchor-link" href="#RUN"><h4>RUN</h4></a>
      <a class="anchor-link" href="#CMD"><h4>CMD</h4></a>
      <a class="anchor-link" href="#ENTRYPOINT"><h4>ENTRYPOINT</h4></a>
      <a class="anchor-link" href="#Cambios en un contenedor"><h3>Cambios en un contenedor</h3></a>
      <a class="anchor-link" href="#Docker en Docker"><h3>Docker en Docker</h3></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Contenedores">Contenedores<a class="anchor-link" href="#Contenedores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 1" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Hello world">Hello world<a class="anchor-link" href="#Hello world"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 2" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ejecutar el primer contenedor tipo Hello world con el comando <code>docker run hello-world</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="n">hello</span><span class="o">-</span><span class="n">world</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Unable to find image &#x27;hello-world:latest&#x27; locally',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'latest: Pulling from library/hello-world',
          '85e32844: Pull complete 457kB/2.457kBBDigest: sha256:dcba6daec718f547568c562956fa47e1b03673dd010fe6ee58ca806767031d1c',
          'Status: Downloaded newer image for hello-world:latest',
          'Hello from Docker!',
          'This message shows that your installation appears to be working correctly.',
          'To generate this message, Docker took the following steps:',
          '1. The Docker client contacted the Docker daemon.',
          '2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.',
          '&#x20;&#x20;&#x20;&#x20;(amd64)',
          '3. The Docker daemon created a new container from that image which runs the',
          '&#x20;&#x20;&#x20;&#x20;executable that produces the output you are currently reading.',
          '4. The Docker daemon streamed that output to the Docker client, which sent it',
          '&#x20;&#x20;&#x20;&#x20;to your terminal.',
          'To try something more ambitious, you can run an Ubuntu container with:',
          '$ docker run -it ubuntu bash',
          'Share images, automate workflows, and more with a free Docker ID:',
          'https://hub.docker.com/',
          'For more examples and ideas, visit:',
          'https://docs.docker.com/get-started/',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como no tenemos el contenedor guardado en local, Docker lo descarga de Docker Hub. Si ahora volvemos a ejecutar el contenedor, ya no aparecerá el primer mensaje, en el que indica que se está descargando</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="n">hello</span><span class="o">-</span><span class="n">world</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hello from Docker!',
          'This message shows that your installation appears to be working correctly.',
          'To generate this message, Docker took the following steps:',
          '1. The Docker client contacted the Docker daemon.',
          '2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.',
          '&#x20;&#x20;&#x20;&#x20;(amd64)',
          '3. The Docker daemon created a new container from that image which runs the',
          '&#x20;&#x20;&#x20;&#x20;executable that produces the output you are currently reading.',
          '4. The Docker daemon streamed that output to the Docker client, which sent it',
          '&#x20;&#x20;&#x20;&#x20;to your terminal.',
          'To try something more ambitious, you can run an Ubuntu container with:',
          '$ docker run -it ubuntu bash',
          'Share images, automate workflows, and more with a free Docker ID:',
          'https://hub.docker.com/',
          'For more examples and ideas, visit:',
          'https://docs.docker.com/get-started/',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para ver los contenedores que están corriendo ejecutar <code>docker ps</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos no hay ningún contenedor abierto. Pero sin embargo, si ejecutamos <code>docker ps -a</code> (<code>all</code>) vemos que sí aparecen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE         COMMAND    CREATED          STATUS                      PORTS     NAMES',
          '1efb51bbbf38   hello-world   &quot;/hello&quot;   10 seconds ago   Exited (0) 9 seconds ago              strange_thompson',
          '5f5705e7603e   hello-world   &quot;/hello&quot;   15 seconds ago   Exited (0) 14 seconds ago             laughing_jang',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que aparecen dos contenedores llamados <code>hello-world</code> que son los dos que hemos ejecutado antes. Por tanto cada vez que ejecutamos el comando <code>run</code>, docker crea un nuevo contenedor, no ejecuta uno que ya exista</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos tener más información de uno de los dos contenedores podemos ejecutar <code>docker inspect &#x3C;id&#x3E;</code>, donde <code>&#x3C;id&#x3E;</code> corresponde a la ID del contenedor que se ha mostrado en la lista anterior</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">inspect</span> <span class="mi">1</span><span class="n">efb51bbbf38</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[',
          '&#x20;&#x20;&#x20;&#x20;&#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Id&quot;: &quot;1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Created&quot;: &quot;2023-09-04T03:59:17.795499354Z&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Path&quot;: &quot;/hello&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Args&quot;: [],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;State&quot;: &#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Status&quot;: &quot;exited&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Running&quot;: false,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Paused&quot;: false,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Restarting&quot;: false,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;OOMKilled&quot;: false,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Dead&quot;: false,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Pid&quot;: 0,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;ExitCode&quot;: 0,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Error&quot;: &quot;&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;StartedAt&quot;: &quot;2023-09-04T03:59:18.406663026Z&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;FinishedAt&quot;: &quot;2023-09-04T03:59:18.406181184Z&quot;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Image&quot;: &quot;sha256:9c7a54a9a43cca047013b82af109fe963fde787f63f9e016fdc3384500c2823d&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e/resolv.conf&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e/hostname&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;HostsPath&quot;: &quot;/var/lib/docker/containers/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e/hosts&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;LogPath&quot;: &quot;/var/lib/docker/containers/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e-json.log&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Name&quot;: &quot;/strange_thompson&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;...',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7D;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7D;',
          '&#x20;&#x20;&#x20;&#x20;&#x7D;',
          ']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como acordarnos de IDs es complicado para nosotros, Docker asigna nombres a los contenedores para facilitarnos la vida. Así en la lista anterior, la última columna corresponde al nombre que ha asignado Docker a cada contenedor, de modo que si ahora ejecutamos <code>docker inspect &#x3C;name&#x3E;</code> obtendremos la misma información que con la ID</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vuelvo a ejecutar <code>docker ps -a</code> para volver a ver la lista</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE         COMMAND    CREATED         STATUS                     PORTS     NAMES',
          '1efb51bbbf38   hello-world   &quot;/hello&quot;   2 minutes ago   Exited (0) 2 minutes ago             strange_thompson',
          '5f5705e7603e   hello-world   &quot;/hello&quot;   2 minutes ago   Exited (0) 2 minutes ago             laughing_jang',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y ahora ejecuto <code>docker inspect &#x3C;name&#x3E;</code> para ver la información del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">inspect</span> <span class="n">strange_thompson</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[',
          '&#x20;&#x20;&#x20;&#x20;&#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Id&quot;: &quot;1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Created&quot;: &quot;2023-09-04T03:59:17.795499354Z&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Path&quot;: &quot;/hello&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Args&quot;: [],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;State&quot;: &#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Status&quot;: &quot;exited&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Running&quot;: false,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Paused&quot;: false,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Restarting&quot;: false,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;OOMKilled&quot;: false,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Dead&quot;: false,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Pid&quot;: 0,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;ExitCode&quot;: 0,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Error&quot;: &quot;&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;StartedAt&quot;: &quot;2023-09-04T03:59:18.406663026Z&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;FinishedAt&quot;: &quot;2023-09-04T03:59:18.406181184Z&quot;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Image&quot;: &quot;sha256:9c7a54a9a43cca047013b82af109fe963fde787f63f9e016fdc3384500c2823d&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e/resolv.conf&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e/hostname&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;HostsPath&quot;: &quot;/var/lib/docker/containers/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e/hosts&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;LogPath&quot;: &quot;/var/lib/docker/containers/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e-json.log&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Name&quot;: &quot;/strange_thompson&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;...',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7D;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7D;',
          '&#x20;&#x20;&#x20;&#x20;&#x7D;',
          ']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pero por qué con <code>docker ps</code> no vemos ningún contenedor y con <code>docker ps -a</code> sí. Esto es porque <code>docker ps</code> solo muestra los contenedores que están corriendo, mientras que <code>docker ps -a</code> muestra todos los contenedores, los que están corriendo y los que están apagados</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos crear un contenedor asignándole un nombre nosotros mediante el comando <code>docker run --name &#x3C;name&#x3E; hello-world</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">--</span><span class="n">name</span> <span class="n">hello_world</span> <span class="n">hello</span><span class="o">-</span><span class="n">world</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hello from Docker!',
          'This message shows that your installation appears to be working correctly.',
          'To generate this message, Docker took the following steps:',
          '1. The Docker client contacted the Docker daemon.',
          '2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.',
          '&#x20;&#x20;&#x20;&#x20;(amd64)',
          '3. The Docker daemon created a new container from that image which runs the',
          '&#x20;&#x20;&#x20;&#x20;executable that produces the output you are currently reading.',
          '4. The Docker daemon streamed that output to the Docker client, which sent it',
          '&#x20;&#x20;&#x20;&#x20;to your terminal.',
          'To try something more ambitious, you can run an Ubuntu container with:',
          '$ docker run -it ubuntu bash',
          'Share images, automate workflows, and more with a free Docker ID:',
          'https://hub.docker.com/',
          'For more examples and ideas, visit:',
          'https://docs.docker.com/get-started/',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Esto será más cómodo para nosotros, ya que podremos controlar nosotros los nombres de los contenedores</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora queremos crear otro contenedor con el mismo nombre no podremos, porque docker no permite que se dupliquen los nombres de los contenedores. De modo que si queremos renombrar el contenedor podemos usar el comando <code>docker rename &#x3C;old name&#x3E; &#x3C;new name&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rename</span> <span class="n">hello_world</span> <span class="n">hello_world2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Tenemos ahora un montón de contenedores iguales. Así que si queremos borrar alguno tenemos que usar el comando <code>docker rm &#x3C;id&#x3E;</code> o <code>docker rm &#x3C;name&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE         COMMAND    CREATED         STATUS                     PORTS     NAMES',
          'f432c9c2ca21   hello-world   &quot;/hello&quot;   9 seconds ago   Exited (0) 8 seconds ago             hello_world2',
          '1efb51bbbf38   hello-world   &quot;/hello&quot;   4 minutes ago   Exited (0) 4 minutes ago             strange_thompson',
          '5f5705e7603e   hello-world   &quot;/hello&quot;   4 minutes ago   Exited (0) 4 minutes ago             laughing_jang',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="n">hello_world2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'hello_world2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si volvemos a ver la lista de contenedores, el contenedor <code>hello_world2</code> ya no estará</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE         COMMAND    CREATED         STATUS                     PORTS     NAMES',
          '1efb51bbbf38   hello-world   &quot;/hello&quot;   5 minutes ago   Exited (0) 5 minutes ago             strange_thompson',
          '5f5705e7603e   hello-world   &quot;/hello&quot;   5 minutes ago   Exited (0) 5 minutes ago             laughing_jang',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos borrar todos los contenedores, podemos hacerlo uno a uno, pero como es muy pesado, podemos borrar todos mediante el comando <code>docker container prune</code>. Este comando elimina solo los contenedores que estén parados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">container</span> <span class="n">prune</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'WARNING! This will remove all stopped containers.',
          'Are you sure you want to continue? [y/N] y',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Docker pregunta si estás seguro, y si le dices que sí, borra todos. Si ahora listo todos los contenedores, no aparece ninguno</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="El modo iteractivo">El modo iteractivo<a class="anchor-link" href="#El modo iteractivo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 3" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ejecutar un ubuntu mediante el comando <code>docker run ubuntu</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="n">ubuntu</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Unable to find image &#x27;ubuntu:latest&#x27; locally',
          'latest: Pulling from library/ubuntu',
          'Digest: sha256:20fa2d7bb4de7723f542be5923b06c4d704370f0390e4ae9e1c833c8785644c1[1A',
          'Status: Downloaded newer image for ubuntu:latest',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, ahora ha tardado más en descargar. Si listamos los contenedores mediante el comando <code>docker ps</code>, vemos que no aparece el contenedor que acabamos de crear, es decir, no está corriendo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Listamos ahora todos los contenedores</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED         STATUS                     PORTS     NAMES',
          'da16b3a85178   ubuntu    &quot;bash&quot;    4 seconds ago   Exited (0) 3 seconds ago             hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que el estado del contenedor es <code>Exited (0)</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si nos fijamos en el comando del contenedor aparece <code>bash</code> y junto al estado <code>Exited (0)</code> nos indica que ha arrancado Ubuntu, ha ejecutado su *bash*, ha terminado la ejecución y ha devuelto un 0. Esto pasa porque al bash de Ubuntu no se le ha dicho nada que hacer. Para solucionar esto, ahora vamos a ejecutar el contenedor mediante el comando <code>docker run -it ubuntu</code>, con <code>it</code> lo que le estamos indicando es que lo queremos ejecutar en modo interactivo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">it</span> <span class="n">ubuntu</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'root@5b633e9d838f:/#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora vemos que estamos dentro del bash de Ubuntu. Si ejecutamos el comando <code>cat /etc/lsb-release</code> podemos ver la distribución de Ubuntu</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">root</span><span class="o">@</span><span class="mi">5</span><span class="n">b633e9d838f</span><span class="p">:</span><span class="o">/</span><span class="c1"># cat /etc/lsb-release</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'DISTRIB_ID=Ubuntu',
          'DISTRIB_RELEASE=22.04',
          'DISTRIB_CODENAME=jammy',
          'DISTRIB_DESCRIPTION=&quot;Ubuntu 22.04.1 LTS&quot;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si abrimos otra terminal y vemos la lista de contenedores, ahora sí aparecerá el contenedor corriendo Ubuntu</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED         STATUS         PORTS     NAMES',
          '5b633e9d838f   ubuntu    &quot;bash&quot;    3 minutes ago   Up 3 minutes             funny_mirzakhani',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos el contenedor con Ubuntu y en su estado podemos ver <code>UP</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si vemos ahora la lista de todos los contenedores, veremos que aparecen los dos contenedores con Ubuntu, el primero apagado y el segundo el que está corriendo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED         STATUS                     PORTS     NAMES',
          '5b633e9d838f   ubuntu    &quot;bash&quot;    3 minutes ago   Up 3 minutes                         funny_mirzakhani',
          'da16b3a85178   ubuntu    &quot;bash&quot;    3 minutes ago   Exited (0) 3 minutes ago             hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si volvemos a la terminal donde teníamos Ubuntu corriendo dentro de un docker, si escribimos <code>exit</code> saldremos de Ubuntu.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">root</span><span class="o">@</span><span class="mi">5</span><span class="n">b633e9d838f</span><span class="p">:</span><span class="o">/</span><span class="c1"># exit</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'exit',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ejecutamos <code>docker ps</code> el contenedor ya no aparece</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pero si ejecuto <code>docker ps -a</code> sí que aparece. Esto quiere decir que el contenedor se apagó</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED         STATUS                      PORTS     NAMES',
          '5b633e9d838f   ubuntu    &quot;bash&quot;    4 minutes ago   Exited (0) 27 seconds ago             funny_mirzakhani',
          'da16b3a85178   ubuntu    &quot;bash&quot;    4 minutes ago   Exited (0) 4 minutes ago              hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Esto ocurre porque al escribir <code>exit</code>, en realidad lo estamos escribiendo en la consola del bash de Ubuntu, lo que significa que estamos terminando el proceso bash de Ubuntu.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Ciclo de vida de un contenedor">Ciclo de vida de un contenedor<a class="anchor-link" href="#Ciclo de vida de un contenedor"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 4" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En Docker, cuando el proceso principal de un contenedor se termina, se apaga el contenedor. Dentro de un contenedor pueden ejecutarse varios procesos, pero solo cuando se termina el proceso principal se apaga el contenedor</p>
      <p>Por tanto, si queremos correr un contenedor que no se apague cuando finalice un proceso, debemos hacer que su proceso principal no termine. En este caso, que no finalice bash</p>
      <p>Si queremos ejecutar un contenedor con Ubuntu, pero que no finalice cuando termine el proceso de Bash lo podemos hacer de la siguiente manera</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">--</span><span class="n">name</span> <span class="n">alwaysup</span> <span class="o">-</span><span class="n">d</span> <span class="n">ubuntu</span> <span class="n">tail</span> <span class="o">-</span><span class="n">f</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">null</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'ce4d60427dcd4b326d15aa832b816c209761d6b4e067a016bb75bf9366c37054',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Lo que hacemos es primero darle el nombre <code>alwaysup</code>, en segundo lugar pasarle la opción <code>-d</code> (<code>detach</code>) para que el contenedor se ejecute en segundo plano y por último le decimos el proceso principal que queremos que se ejecute en el contenedor, que en este caso es <code>tail -f /dev/null</code> que equivale a un comando <code>nop</code></p>
      <p>Esto nos devolverá la ID del contenedor, pero no estaremos dentro de Ubuntu como pasaba antes</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora vemos la lista de contenedores que se están ejecutando, aparece el contenedor que acabamos de crear</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS          PORTS     NAMES',
          'ce4d60427dcd   ubuntu    &quot;tail -f /dev/null&quot;   18 seconds ago   Up 17 seconds             alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como ya tenemos un contenedor corriendo siempre, podemos conectarnos al el mediante el comando <code>exec</code>. Le decimos el nombre o la ID del contenedor y le pasamos el proceso que queremos que se ejecuta. Además pasamos la opción <code>-it</code> para decirle que sea iteractivo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">exec</span> <span class="o">-</span><span class="n">it</span> <span class="n">alwaysup</span> <span class="n">bash</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'root@ce4d60427dcd:/#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora volvemos a estar dentro de Ubuntu. Si ejecutamos el comando <code>ps -aux</code> podemos ver una lista de los procesos que se están ejecutando dentro de Ubuntu.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ps</span> <span class="o">-</span><span class="n">aux</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND',
          'root           1  0.0  0.0   2820  1048 ?        Ss   13:04   0:00 tail -f /dev/null',
          'root           7  0.0  0.0   4628  3796 pts/0    Ss   13:04   0:00 bash',
          'root          15  0.0  0.0   7060  1556 pts/0    R+   13:05   0:00 ps -aux',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos solo tres procesos, el <code>ps -aux</code>, el <code>bash</code> y el <code>tail -f /dev/null</code></p>
      <p>Este contenedor va a estar siempre encendido mientras el proceso <code>tail -f /dev/null</code> siga corriendo</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si salimos del contenedor con el comando <code>exit</code> y ejecutamos el comando <code>docker ps</code> vemos que el contenedor sigue encendido</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">exit</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'exit',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED         STATUS         PORTS     NAMES',
          'ce4d60427dcd   ubuntu    &quot;tail -f /dev/null&quot;   2 minutes ago   Up 2 minutes             alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para poder finalizar el proceso y poder apagar el contenedor debemos usar el comando <code>docker stop &#x3C;name&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">stop</span> <span class="n">alwaysup</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora volvemos a listar los contenedores encendidos ya no aparece el contenedor con Ubuntu</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y si listamos todos los contenedores, aparece el contenedor con Ubuntu, y su estado <code>Exited</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS                            PORTS     NAMES',
          'ce4d60427dcd   ubuntu    &quot;tail -f /dev/null&quot;   14 minutes ago   Exited (137) About a minute ago             alwaysup',
          '5b633e9d838f   ubuntu    &quot;bash&quot;                19 minutes ago   Exited (0) 15 minutes ago                   funny_mirzakhani',
          'da16b3a85178   ubuntu    &quot;bash&quot;                20 minutes ago   Exited (0) 20 minutes ago                   hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>También podemos pausar un contenedor mediante el comando <code>docker pause &#x3C;name&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">--</span><span class="n">name</span> <span class="n">alwaysup</span> <span class="o">-</span><span class="n">d</span> <span class="n">ubuntu</span> <span class="n">tail</span> <span class="o">-</span><span class="n">f</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">null</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '8282eaf9dc3604fa94df206b2062287409cc92cbcd203f1a018742b5c171c9e4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora lo pausamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">pause</span> <span class="n">alwaysup</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si volvemos a ver todos los contenedores, vemos que el contenedor con Ubuntu está pausado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS                       PORTS     NAMES',
          '8282eaf9dc36   ubuntu    &quot;tail -f /dev/null&quot;   41 seconds ago   Up 41 seconds (Paused)                 alwaysup',
          '5b633e9d838f   ubuntu    &quot;bash&quot;                19 minutes ago   Exited (0) 15 minutes ago              funny_mirzakhani',
          'da16b3a85178   ubuntu    &quot;bash&quot;                20 minutes ago   Exited (0) 20 minutes ago              hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Contenedores de un solo uso">Contenedores de un solo uso<a class="anchor-link" href="#Contenedores de un solo uso"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 5" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si a la hora de ejecutar un contenedor, ponemos la opción <code>--rm</code>, ese contenedor se va a borrar cuando termine de ejecutarse.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">--</span><span class="n">rm</span> <span class="o">--</span><span class="n">name</span> <span class="n">autoremove</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">latest</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora vemos cuáles contenedores tenemos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que no está el contenedor que acabamos de crear</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Exponer contenedores al mundo exterior">Exponer contenedores al mundo exterior<a class="anchor-link" href="#Exponer contenedores al mundo exterior"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 6" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear un nuevo contenedor con un servidor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">d</span> <span class="o">--</span><span class="n">name</span> <span class="n">proxy</span> <span class="n">nginx</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Unable to find image &#x27;nginx:latest&#x27; locally',
          'latest: Pulling from library/nginx',
          'f1ad4ce1: Pulling fs layer',
          'b079d0f8: Pulling fs layer',
          '5fbbebc6: Pulling fs layer',
          'ffdd25f4: Pulling fs layer',
          '32c8fba2: Pulling fs layer',
          '24b8ba39: Pull complete 393kB/1.393kBB[5ADigest: sha256:2888a97f7c7d498bbcc47ede1ad0f6ced07d72dfd181071dde051863f1f79d7b',
          'Status: Downloaded newer image for nginx:latest',
          '1a530e04f14be082811b72ea8b6ea5a95dad3037301ee8a1351a0108ff8d3b30',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Esto crea un servidor, vamos a volver a listar los contenedores que están corriendo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND                  CREATED        STATUS                  PORTS     NAMES',
          '1a530e04f14b   nginx     &quot;/docker-entrypoint.…&quot;   1 second ago   Up Less than a second   80/tcp    proxy',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora aparece una nueva columna con el puerto, y nos dice que el servidor que acabamos de crear está en el puerto <code>80</code> bajo el protocolo <code>tcp</code>.</p>
      <p>Si abrimos un navegador e intentamos conectarnos al servidor mediante <code>http://localhost:80</code> no conseguimos conectar. Esto es porque cada contenedor tiene su propia interfaz de red. Es decir, el servidor está escuchando en el puerto <code>80</code> del contenedor, pero nosotros estamos intentando conectar al puerto <code>80</code> del host</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Paramos el contenedor para relanzarlo de otra forma</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">stop</span> <span class="n">proxy</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'proxy',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si listamos los contenedores, no aparece corriendo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Lo borramos para volver a crearlo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="n">proxy</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'proxy',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si listamos todos los contenedores ya no está</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS                       PORTS     NAMES',
          'ce4d60427dcd   ubuntu    &quot;tail -f /dev/null&quot;   19 minutes ago   Exited (137) 5 minutes ago             alwaysup',
          '5b633e9d838f   ubuntu    &quot;bash&quot;                24 minutes ago   Exited (0) 20 minutes ago              funny_mirzakhani',
          'da16b3a85178   ubuntu    &quot;bash&quot;                24 minutes ago   Exited (0) 24 minutes ago              hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para volver a crear el contenedor con el servidor y poderlo ver desde el host, tenemos que usar la opción <code>-p</code> (<code>publish</code>), indicando en primer lugar el puerto en el que queremos verlo en el host y a continuación el puerto del contenedor, es decir, <code>-p &#x3C;ip host&#x3E;:&#x3C;ip contenedor&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">d</span> <span class="o">--</span><span class="n">name</span> <span class="n">proxy</span> <span class="o">-</span><span class="n">p</span> <span class="mi">8080</span><span class="p">:</span><span class="mi">80</span> <span class="n">nginx</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'c199235e42f76a30266f6e1af972e0a59811806eb3d3a9afdd873f6fa1785eae',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Listamos los contenedores</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                   NAMES',
          'c199235e42f7   nginx     &quot;/docker-entrypoint.…&quot;   22 seconds ago   Up 21 seconds   0.0.0.0:8080-&amp;gt;80/tcp, :::8080-&amp;gt;80/tcp   proxy',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que el puerto del contenedor es <code>0.0.0.0:8080-&#x3E;80/tcp</code>. Si ahora vamos a un navegador e introducimos <code>0.0.0.0:8080</code> podremos acceder al servidor del contenedor</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al listar los contenedores, en la columna <code>PORTS</code> indica <code>0.0.0.0:8080-&#x3E;80/tcp</code>, lo que nos ayuda a ver la relación de puertos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para ver los logs del contenedor, mediante el comando <code>docker logs &#x3C;name&#x3E;</code> puedo ver los registros del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">logs</span> <span class="n">proxy</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration',
          '/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/',
          '/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh',
          '10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf',
          '10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf',
          '/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh',
          '/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh',
          '/docker-entrypoint.sh: Configuration complete; ready for start up',
          '2022/09/13 13:24:06 [notice] 1#1: using the &quot;epoll&quot; event method',
          '2022/09/13 13:24:06 [notice] 1#1: nginx/1.23.1',
          '2022/09/13 13:24:06 [notice] 1#1: built by gcc 10.2.1 20210110 (Debian 10.2.1-6)',
          '2022/09/13 13:24:06 [notice] 1#1: OS: Linux 5.15.0-46-generic',
          '2022/09/13 13:24:06 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576',
          '2022/09/13 13:24:06 [notice] 1#1: start worker processes',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 31',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 32',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 33',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 34',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 35',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 36',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 37',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 38',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 39',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 40',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 41',
          '...',
          '172.17.0.1 - - [13/Sep/2022:13:24:40 +0000] &quot;GET /favicon.ico HTTP/1.1&quot; 404 555 &quot;http://0.0.0.0:8080/&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot; &quot;-&quot;',
          '172.17.0.1 - - [13/Sep/2022:13:25:00 +0000] &quot;\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03\xE2\x19V$Zqi&#x27;\xD7\xFC[\x80\xEF\xBA\xE5\xC7\xE8\xF7&amp;amp;3nS\xEB\xC9\xEC\x91\xC2\xD8\xD1\x89\x9E\xBE \xC7?\xE1\xFA\x04a\x1C\xCE\x90\x0F\x8F\x98u\xE3/\xD8RfOH\xEC\x92+\x93\x5C\xBB\xB1\xBF\xD2m\xB09\x00 \xFA\xFA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93\x9A\x9A\x00\x00\x00\x00\x00\x0E\x00\x0C\x00\x00\x09localhost\x00\x17\x00\x00\xFF\x01\x00\x01\x00\x00&quot; 400 157 &quot;-&quot; &quot;-&quot; &quot;-&quot;',
          '172.17.0.1 - - [13/Sep/2022:13:25:00 +0000] &quot;\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03)\x9A\x8FbC\xD9m\xF1\x86\xEBd\x22\xCF\xC4E\x87#~L\xC1\x84\x7F\xB5\x91k\x98\xABl\xEE\x1E[0 \xD0\xD2`\x85\xC6\x8B\x85R\x8B\x87\xEAq&#x7B;P\xF2\xFB\xE2\xA8\x9DI\xF4tH\x99\x13\x10~\xCA1-|\x8E\x00 \xEA\xEA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93&quot; 400 157 &quot;-&quot; &quot;-&quot; &quot;-&quot;',
          '172.17.0.1 - - [13/Sep/2022:13:26:28 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot; &quot;-&quot;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora puedo ver todas las peticiones que se le han hecho al servidor. Pero si quiero ver los logs en tiempo real, mediante <code>docker logs -f &#x3C;name&#x3E;</code> lo puedo hacer</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">logs</span> <span class="o">-</span><span class="n">f</span> <span class="n">proxy</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora puedo ver los logs en tiempo real. Para salir introducir <code>CTRL+C</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como puede llegar un momento en el que haya muchos logs, si solo quieres los últimos logs, mediante la opción <code>--tail &#x3C;num&#x3E;</code> puedes ver los últimos <code>&#x3C;num&#x3E;</code> logs. Si añado la opción <code>-f</code> estaremos viendo siempre los últimos <code>&#x3C;num&#x3E;</code> logs</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">logs</span> <span class="o">--</span><span class="n">tail</span> <span class="mi">10</span> <span class="n">proxy</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 41',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 42',
          '172.17.0.1 - - [13/Sep/2022:13:24:16 +0000] &quot;\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03\x01E\x14\x8E\xB6\x0BEg\xF3\xC9\x9A\x19\x9C\xCA\xEC\xA7y#3\x92\x05\x95\xDCQ\x07\x19\x1D\xEF\xEA$\xBF# \x0B\x83\xF7-,s\x1B!r\xEA|\xAE\xDF\xA1\x9DLZ\xAA4y\xB3t\xAB\xC0\xCE_\xB8\xE7\xFF&#x27;\xCF\x86\x00 \xEA\xEA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93\x8A\x8A\x00\x00\x00\x00\x00\x0E\x00\x0C\x00\x00\x09localhost\x00\x17\x00\x00\xFF\x01\x00\x01\x00\x00&quot; 400 157 &quot;-&quot; &quot;-&quot; &quot;-&quot;',
          '172.17.0.1 - - [13/Sep/2022:13:24:16 +0000] &quot;\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03&#x7D;\xA9Dr&#x7B;\x8C;\x90z\x82\xAD\xBC\x8Az\xC2x\xDF\x1E\x9A\xE6l?\xA7\xE0DoK\x91&#x27;g\xBB\xB5 %\xBB\xFD\xD9\x82?\xDB\x80\xB3T\xF6cJ\xF7\xE5\xC2\xD2\x11\xBC\xA2\x1F\x90\x14\xA3\xEB\xBD=R\xBC\x83\x89\x85\x00 \xCA\xCA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93\x9A\x9A\x00\x00\x00\x00\x00\x0E\x00\x0C\x00\x00\x09localhost\x00\x17\x00\x00\xFF\x01\x00\x01\x00\x00&quot; 400 157 &quot;-&quot; &quot;-&quot; &quot;-&quot;',
          '172.17.0.1 - - [13/Sep/2022:13:24:39 +0000] &quot;GET / HTTP/1.1&quot; 200 615 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot; &quot;-&quot;',
          '2022/09/13 13:24:40 [error] 34#34: *3 open() &quot;/usr/share/nginx/html/favicon.ico&quot; failed (2: No such file or directory), client: 172.17.0.1, server: localhost, request: &quot;GET /favicon.ico HTTP/1.1&quot;, host: &quot;0.0.0.0:8080&quot;, referrer: &quot;http://0.0.0.0:8080/&quot;',
          '172.17.0.1 - - [13/Sep/2022:13:24:40 +0000] &quot;GET /favicon.ico HTTP/1.1&quot; 404 555 &quot;http://0.0.0.0:8080/&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot; &quot;-&quot;',
          '172.17.0.1 - - [13/Sep/2022:13:25:00 +0000] &quot;\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03\xE2\x19V$Zqi&#x27;\xD7\xFC[\x80\xEF\xBA\xE5\xC7\xE8\xF7&amp;amp;3nS\xEB\xC9\xEC\x91\xC2\xD8\xD1\x89\x9E\xBE \xC7?\xE1\xFA\x04a\x1C\xCE\x90\x0F\x8F\x98u\xE3/\xD8RfOH\xEC\x92+\x93\x5C\xBB\xB1\xBF\xD2m\xB09\x00 \xFA\xFA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93\x9A\x9A\x00\x00\x00\x00\x00\x0E\x00\x0C\x00\x00\x09localhost\x00\x17\x00\x00\xFF\x01\x00\x01\x00\x00&quot; 400 157 &quot;-&quot; &quot;-&quot; &quot;-&quot;',
          '172.17.0.1 - - [13/Sep/2022:13:25:00 +0000] &quot;\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03)\x9A\x8FbC\xD9m\xF1\x86\xEBd\x22\xCF\xC4E\x87#~L\xC1\x84\x7F\xB5\x91k\x98\xABl\xEE\x1E[0 \xD0\xD2`\x85\xC6\x8B\x85R\x8B\x87\xEAq&#x7B;P\xF2\xFB\xE2\xA8\x9DI\xF4tH\x99\x13\x10~\xCA1-|\x8E\x00 \xEA\xEA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93&quot; 400 157 &quot;-&quot; &quot;-&quot; &quot;-&quot;',
          '172.17.0.1 - - [13/Sep/2022:13:26:28 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot; &quot;-&quot;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si además añadimos la opción <code>-t</code> podemos ver la fecha y hora de cada log, de esta manera si hemos tenido un problema, podemos saber en qué momento ha ocurrido</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">logs</span> <span class="o">--</span><span class="n">tail</span> <span class="o">-</span><span class="n">t</span> <span class="mi">10</span> <span class="n">proxy</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2022-09-13T13:24:06.573362728Z 2022/09/13 13:24:06 [notice] 1#1: start worker process 41',
          '2022-09-13T13:24:06.651127107Z 2022/09/13 13:24:06 [notice] 1#1: start worker process 42',
          '2022-09-13T13:24:16.651160189Z 172.17.0.1 - - [13/Sep/2022:13:24:16 +0000] &quot;\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03\x01E\x14\x8E\xB6\x0BEg\xF3\xC9\x9A\x19\x9C\xCA\xEC\xA7y#3\x92\x05\x95\xDCQ\x07\x19\x1D\xEF\xEA$\xBF# \x0B\x83\xF7-,s\x1B!r\xEA|\xAE\xDF\xA1\x9DLZ\xAA4y\xB3t\xAB\xC0\xCE_\xB8\xE7\xFF&#x27;\xCF\x86\x00 \xEA\xEA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93\x8A\x8A\x00\x00\x00\x00\x00\x0E\x00\x0C\x00\x00\x09localhost\x00\x17\x00\x00\xFF\x01\x00\x01\x00\x00&quot; 400 157 &quot;-&quot; &quot;-&quot; &quot;-&quot;',
          '2022-09-13T13:24:16.116817914Z 172.17.0.1 - - [13/Sep/2022:13:24:16 +0000] &quot;\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03&#x7D;\xA9Dr&#x7B;\x8C;\x90z\x82\xAD\xBC\x8Az\xC2x\xDF\x1E\x9A\xE6l?\xA7\xE0DoK\x91&#x27;g\xBB\xB5 %\xBB\xFD\xD9\x82?\xDB\x80\xB3T\xF6cJ\xF7\xE5\xC2\xD2\x11\xBC\xA2\x1F\x90\x14\xA3\xEB\xBD=R\xBC\x83\x89\x85\x00 \xCA\xCA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93\x9A\x9A\x00\x00\x00\x00\x00\x0E\x00\x0C\x00\x00\x09localhost\x00\x17\x00\x00\xFF\x01\x00\x01\x00\x00&quot; 400 157 &quot;-&quot; &quot;-&quot; &quot;-&quot;',
          '2022-09-13T13:24:39.117398081Z 172.17.0.1 - - [13/Sep/2022:13:24:39 +0000] &quot;GET / HTTP/1.1&quot; 200 615 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot; &quot;-&quot;',
          '2022-09-13T13:24:39.117412408Z 2022/09/13 13:24:40 [error] 34#34: *3 open() &quot;/usr/share/nginx/html/favicon.ico&quot; failed (2: No such file or directory), client: 172.17.0.1, server: localhost, request: &quot;GET /favicon.ico HTTP/1.1&quot;, host: &quot;0.0.0.0:8080&quot;, referrer: &quot;http://0.0.0.0:8080/&quot;',
          '2022-09-13T13:24:40.117419389Z 172.17.0.1 - - [13/Sep/2022:13:24:40 +0000] &quot;GET /favicon.ico HTTP/1.1&quot; 404 555 &quot;http://0.0.0.0:8080/&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot; &quot;-&quot;',
          '2022-09-13T13:25:00.117434249Z 172.17.0.1 - - [13/Sep/2022:13:25:00 +0000] &quot;\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03\xE2\x19V$Zqi&#x27;\xD7\xFC[\x80\xEF\xBA\xE5\xC7\xE8\xF7&amp;amp;3nS\xEB\xC9\xEC\x91\xC2\xD8\xD1\x89\x9E\xBE \xC7?\xE1\xFA\x04a\x1C\xCE\x90\x0F\x8F\x98u\xE3/\xD8RfOH\xEC\x92+\x93\x5C\xBB\xB1\xBF\xD2m\xB09\x00 \xFA\xFA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93\x9A\x9A\x00\x00\x00\x00\x00\x0E\x00\x0C\x00\x00\x09localhost\x00\x17\x00\x00\xFF\x01\x00\x01\x00\x00&quot; 400 157 &quot;-&quot; &quot;-&quot; &quot;-&quot;',
          '2022-09-13T13:25:00.223560881Z 172.17.0.1 - - [13/Sep/2022:13:25:00 +0000] &quot;\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03)\x9A\x8FbC\xD9m\xF1\x86\xEBd\x22\xCF\xC4E\x87#~L\xC1\x84\x7F\xB5\x91k\x98\xABl\xEE\x1E[0 \xD0\xD2`\x85\xC6\x8B\x85R\x8B\x87\xEAq&#x7B;P\xF2\xFB\xE2\xA8\x9DI\xF4tH\x99\x13\x10~\xCA1-|\x8E\x00 \xEA\xEA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93&quot; 400 157 &quot;-&quot; &quot;-&quot; &quot;-&quot;',
          '2022-09-13T13:26:25.223596738Z 172.17.0.1 - - [13/Sep/2022:13:26:28 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot; &quot;-&quot;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Paramos y borramos el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="o">-</span><span class="n">f</span> <span class="n">proxy</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'proxy',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS                        PORTS     NAMES',
          'ce4d60427dcd   ubuntu    &quot;tail -f /dev/null&quot;   26 minutes ago   Exited (137) 13 minutes ago             alwaysup',
          '5b633e9d838f   ubuntu    &quot;bash&quot;                31 minutes ago   Exited (0) 27 minutes ago               funny_mirzakhani',
          'da16b3a85178   ubuntu    &quot;bash&quot;                32 minutes ago   Exited (0) 32 minutes ago               hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Datos en Docker">Datos en Docker<a class="anchor-link" href="#Datos en Docker"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 7" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Bind mounts">Bind mounts<a class="anchor-link" href="#Bind mounts"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 8" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver los contenedores que tenemos parados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS                        PORTS     NAMES',
          'ce4d60427dcd   ubuntu    &quot;tail -f /dev/null&quot;   26 minutes ago   Exited (137) 13 minutes ago             alwaysup',
          '5b633e9d838f   ubuntu    &quot;bash&quot;                31 minutes ago   Exited (0) 28 minutes ago               funny_mirzakhani',
          'da16b3a85178   ubuntu    &quot;bash&quot;                32 minutes ago   Exited (0) 32 minutes ago               hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a borrar los dos de Ubuntu en los que su comando principal es la Bash y vamos a dejar el que dejamos como no operación</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="n">funny_mirzakhani</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'funny_mirzakhani',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="n">hardcore_kare</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS                        PORTS     NAMES',
          'ce4d60427dcd   ubuntu    &quot;tail -f /dev/null&quot;   27 minutes ago   Exited (137) 14 minutes ago             alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a volver a ejecutar el contenedor de Ubuntu que hemos dejado, esto se hace mediante el comando <code>start</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">start</span> <span class="n">alwaysup</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Nos metemos otra vez dentro de el</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">exec</span> <span class="o">-</span><span class="n">it</span> <span class="n">alwaysup</span> <span class="n">bash</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'root@ce4d60427dcd:/#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En el contenedor, puedo crear una nueva carpeta que se llame <code>dockerfolder</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">dockerfolder</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si listamos los archivos aparecerá la nueva carpeta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'bin  boot  dev  dockerfolder  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si salimos del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">exit</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'exit',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y lo borramos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="o">-</span><span class="n">f</span> <span class="n">alwaysup</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si listamos todos los contenedores, ya no aparece el último que hemos creado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a volver a hacer todo, pero primero vamos a crear una carpeta en el host en la que compartiremos los datos con el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">dockerHostFolder</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que dentro de la carpeta no hay nada</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ls</span> <span class="n">dockerHostFolder</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora obtenemos nuestra ruta absoluta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">pwd</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '/home/wallabot/Documentos/web/portafolio/posts',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Volvemos a crear el contenedor pero añadiendo la opción <code>-v</code> (<code>bind mount</code>). A continuación se añade la ruta absoluta de la carpeta del host y la ruta absoluta de la carpeta en el contenedor, <code>-v &#x3C;host path&#x3E;:&#x3C;container path&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">d</span> <span class="o">--</span><span class="n">name</span> <span class="n">alwaysup</span> <span class="o">-</span><span class="n">v</span> <span class="o">~/</span><span class="n">Documentos</span><span class="o">/</span><span class="n">web</span><span class="o">/</span><span class="n">portafolio</span><span class="o">/</span><span class="n">posts</span><span class="o">/</span><span class="n">dockerHostFolder</span><span class="p">:</span><span class="o">/</span><span class="n">dockerContainerFolder</span> <span class="n">ubuntu</span> <span class="n">tail</span> <span class="o">-</span><span class="n">f</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">null</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '4ede4512c293bdcc155e9c8e874dfb4a28e5163f4d5c7ddda24ad2863f28921b',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Entramos al contenedor, listamos los archivos y ya aparece la carpeta que habíamos creado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">exec</span> <span class="o">-</span><span class="n">it</span> <span class="n">alwaysup</span> <span class="n">bash</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'root@4ede4512c293:/#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">root</span><span class="o">@</span><span class="mi">4</span><span class="n">ede4512c293</span><span class="p">:</span><span class="o">/</span><span class="c1"># ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'bin   dev                    etc   lib    lib64   media  opt   root  sbin  sys  usr',
          'boot  dockerContainerFolder  home  lib32  libx32  mnt    proc  run   srv   tmp  var',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos al directorio del contenedor que hemos compartido, creamos un archivo y salimos del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">root</span><span class="o">@</span><span class="mi">4</span><span class="n">ede4512c293</span><span class="p">:</span><span class="o">/</span><span class="c1"># cd dockerContainerFolder</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">root</span><span class="o">@</span><span class="mi">4</span><span class="n">ede4512c293</span><span class="p">:</span><span class="o">/</span><span class="n">dockerContainerFolder</span><span class="c1"># touch bindFile.txt</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">root</span><span class="o">@</span><span class="mi">4</span><span class="n">ede4512c293</span><span class="p">:</span><span class="o">/</span><span class="n">dockerContainerFolder</span><span class="c1"># exit</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'exit',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos qué hay dentro de la carpeta compartida</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ls</span> <span class="n">dockerHostFolder</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'bindFile.txt',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pero es más, si borramos el contenedor, el archivo sigue allí</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="o">-</span><span class="n">f</span> <span class="n">alwaysup</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ls</span> <span class="n">dockerHostFolder</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'bindFile.txt',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si vuelvo a crear un contenedor compartiendo las carpetas, todos los archivos estarán en el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">d</span> <span class="o">--</span><span class="n">name</span> <span class="n">alwaysup</span> <span class="o">-</span><span class="n">v</span> <span class="o">~/</span><span class="n">Documentos</span><span class="o">/</span><span class="n">web</span><span class="o">/</span><span class="n">portafolio</span><span class="o">/</span><span class="n">posts</span><span class="o">/</span><span class="n">dockerHostFolder</span><span class="p">:</span><span class="o">/</span><span class="n">dockerContainerFolder</span> <span class="n">ubuntu</span> <span class="n">tail</span> <span class="o">-</span><span class="n">f</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">null</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '6c021d37ea29d8b23fe5cd4968baa446085ae1756682f65340288b4c851c362d',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">exec</span> <span class="o">-</span><span class="n">it</span> <span class="n">alwaysup</span> <span class="n">bash</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'root@6c021d37ea29:/#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">root</span><span class="o">@</span><span class="mi">6</span><span class="n">c021d37ea29</span><span class="p">:</span><span class="o">/</span><span class="c1"># ls dockerContainerFolder/</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'bindFile.txt:/#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Eliminamos el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="o">-</span><span class="n">f</span> <span class="n">alwaysup</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Volumenes">Volúmenes<a class="anchor-link" href="#Volumenes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 9" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Los volúmenes se crearon como una evolución de los <code>bind mounts</code> para dar más seguridad. Podemos listar todos los volúmenes de docker mediante <code>docker volume ls</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">volume</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'DRIVER    VOLUME NAME',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear un nuevo volumen para el contenedor de ubuntu, para ello usamos el comando <code>docker volume create &#x3C;volume name&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">volume</span> <span class="n">create</span> <span class="n">ubuntuVolume</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'ubuntuVolume',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si volvemos a listar los volúmenes aparecerá el que acabamos de crear</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">volume</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'DRIVER    VOLUME NAME',
          'local     ubuntuVolume',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Sin embargo, no aparece como una carpeta en el sistema de archivos del host. Con <code>ls -d */</code> listamos todas las carpetas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ls</span> <span class="o">-</span><span class="n">d</span> <span class="o">*/</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dockerHostFolder/  __pycache__/',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a volver a crear un contenedor, pero ahora lo creamos con el volumen que acabamos de crear con la opción <code>--mount</code>, indicando el volumen fuente mediante <code>src=&#x3C;volume name&#x3E;</code> (si el volumen no existiese, docker lo crearía), a continuación el destino separado por una <code>,</code>, <code>dst=&#x3C;container path&#x3E;</code>, es decir <code>--mount src=&#x3C;volume name&#x3E;,dst=&#x3C;container path&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">d</span> <span class="o">--</span><span class="n">name</span> <span class="n">alwaysup</span> <span class="o">--</span><span class="n">mount</span> <span class="n">src</span><span class="o">=</span><span class="n">ubuntuVolume</span><span class="p">,</span><span class="n">dst</span><span class="o">=/</span><span class="n">dockerVolumeFolder</span> <span class="n">ubuntu</span> <span class="n">tail</span> <span class="o">-</span><span class="n">f</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">null</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '42cdcddf4e46dc298a87b0570115e0b2fc900cb4c6db5eea22a61409b8cb271d',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Una vez creado podemos ver los volúmenes del contenedor mediante el comando <code>inspect</code> y filtrando por <code>&#x27;&#123;&#123;.Mounts&#125;&#125;&#x27;</code></p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker inspect --format &#39;&#123;&#123;.Mounts&#125;&#125;&#39; alwaysup <br>[<br>&#x20;&#x20;&#123;<br>&#x20;&#x20;&#x20;&#x20;volume ubuntuVolume /var/lib/docker/volumes/ubuntuVolume/_data /dockerVolumeFolder local z true <br>&#x20;&#x20;&#125;<br>]</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que el volumen se llama <code>ubuntuVolume</code> y además podemos ver la ruta donde está guardado, en este caso en <code>/var/lib/docker/volumes/ubuntuVolume/_data</code>. Hacemos lo mismo que antes, nos metemos en el contenedor, creamos un archivo en la ruta del volumen, salimos y vemos en el host si se ha creado</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker exec -it alwaysup bash<br>root@42cdcddf4e46:/# touch dockerVolumeFolder/volumeFile.txt<br>root@42cdcddf4e46:/# exit</code></pre></div>
            </section>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ sudo ls /var/lib/docker/volumes/ubuntuVolume/_data<br>volumeFile.txt</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Está el archivo creado</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Insertar y extraer archivos de un contenedor">Insertar y extraer archivos de un contenedor<a class="anchor-link" href="#Insertar y extraer archivos de un contenedor"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 10" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primero vamos a crear un archivo que queremos copiar dentro de un contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">touch</span> <span class="n">dockerHostFolder</span><span class="o">/</span><span class="n">text</span><span class="o">.</span><span class="n">txt</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Entramos en el contenedor</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker exec -it alwaysup bash<br>root@42cdcddf4e46:/#</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos una nueva carpeta donde vamos a copiar el archivo y salimos</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">root@42cdcddf4e46:/# mkdir folderToCopy<br>root@42cdcddf4e46:/# ls<br>bin  boot  dev  dockerVolumeFolder  etc  folderToCopy  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<br>root@42cdcddf4e46:/# exit<br>exit</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Copiamos dentro del contenedor el archivo mediante el comando <code>cp</code>, indicando el archivo que **quiero** copiar, el contenedor donde lo queremos copiar y la ruta dentro del contenedor, <code>docker cp &#x3C;file&#x3E; &#x3C;container&#x3E;:&#x3C;container path&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">cp</span> <span class="n">dockerHostFolder</span><span class="o">/</span><span class="n">text</span><span class="o">.</span><span class="n">txt</span> <span class="n">alwaysup</span><span class="p">:</span><span class="o">/</span><span class="n">folderToCopy</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Volvemos a entrar al contenedor y comprobamos que esté el archivo</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker exec -it alwaysup bash<br>root@42cdcddf4e46:/# ls folderToCopy/<br>text.txt</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Salimos del contenedor</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">/# exit<br>exit</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora vamos a extraer el archivo del contenedor y lo vamos a guardar en el host con otro nombre, para ello usamos otra vez el comando <code>cp</code>, pero indicando ahora el contenedor, la ruta del archivo en el contenedor y la ruta y nombre que queremos que tenga el archivo en el host, <code>docker cp &#x3C;container&#x3E;:&#x3C;docker file path&#x3E; &#x3C;host file path&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">cp</span> <span class="n">alwaysup</span><span class="p">:</span><span class="o">/</span><span class="n">folderToCopy</span><span class="o">/</span><span class="n">text</span><span class="o">.</span><span class="n">txt</span> <span class="n">dockerHostFolder</span><span class="o">/</span><span class="n">fileExtract</span><span class="o">.</span><span class="n">txt</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que está en el host</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ls</span> <span class="n">dockerHostFolder</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'bindFile.txt  fileExtract.txt  text.txt',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Aunque el contenedor esté parado también se pueden copiar archivos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por último, borramos el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="o">-</span><span class="n">f</span> <span class="n">alwaysup</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Imagenes">Imágenes<a class="anchor-link" href="#Imagenes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 11" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Conceptos fundamentales">Conceptos fundamentales<a class="anchor-link" href="#Conceptos fundamentales"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 12" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Las imágenes son los archivos ("plantillas") con toda la configuración para crear un contenedor. Cada vez que creamos un contenedor se crea a partir de una imagen. Cuando creábamos contenedores nuevos, la primera vez salía un mensaje diciendo que no teníamos la imagen y que iba a descargarla. En Docker Hub existen multitud de imágenes con todo tipo de máquinas, pero para un entorno de desarrollo muy específico podemos crear nuestra propia plantilla para pasársela a alguien y trabaje en un contenedor con la misma configuración que el nuestro</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver todas las imágenes que tenemos guardadas en nuestro ordenador mediante el comando <code>docker image ls</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">image</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'REPOSITORY    TAG       IMAGE ID       CREATED         SIZE',
          'nginx         latest    2d389e545974   8 hours ago     142MB',
          'ubuntu        latest    2dc39ba059dc   11 days ago     77.8MB',
          'hello-world   latest    feb5d9fea6a5   11 months ago   13.3kB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver los tamaños, y podemos ver cómo la de <code>nginx</code> ocupa mucho y por eso tardó más en descargarse que el resto</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Otra columna que podemos ver es la de <code>TAG</code>, esto indica la versión de la imagen. En todas pone <code>latest</code>, esto quiere decir que es la última. Es decir, en el momento de descargárnosla nos hemos descargado la última versión que hay en Docker Hub. Esto en un entorno de desarrollo no es óptimo, porque nosotros podemos descargarnos una imagen de Ubuntu, y si no especificamos versión se baja la última, por ejemplo la 20.04. Pero después de un tiempo alguien puede querer desarrollar contigo y descargarse esa imagen, pero al no especificar la versión se descargará otra vez la última, que en su caso puede ser la 22.04. Esto puede dar lugar a problemas y a que cosas que a una de las personas le funcione y a la otra no</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver todas las imágenes que hay en docker hub yendo a <code>https://hub.docker.com/</code>. Ahí podrás buscar la imagen que mejor se adapte al proyecto que quieras hacer. Si navegamos a la image de Ubuntu, por ejemplo, podemos ver las versiones (<code>tags</code>) de las imágenes.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a descargar, **pero no ejecutar** una imagen. Para ello usamos el comando <code>docker pull &#x3C;hub&#x3E; &#x3C;image name&#x3E;:&#x3C;tag&#x3E;</code>. Si no indicamos el hub, lo descargará de docker hub por defecto, pero podemos indicar otro, por ejemplo uno privado de nuestra organización. También, si no indicamos el tag, por defecto bajará la última versión</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">pull</span> <span class="n">ubuntu</span><span class="p">:</span><span class="mf">20.04</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '20.04: Pulling from library/ubuntu',
          'Digest: sha256:35ab2bf57814e9ff49e365efd5a5935b6915eede5c7f8581e9e1b85e0eecbe16[1A',
          'Status: Downloaded newer image for ubuntu:20.04',
          'docker.io/library/ubuntu:20.04',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si volvemos a listar las imágenes, vemos que ahora tenemos dos imágenes de Ubuntu, una con el tag <code>20.04</code> y otra con el tag <code>latest</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">image</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'REPOSITORY    TAG       IMAGE ID       CREATED         SIZE',
          'nginx         latest    2d389e545974   8 hours ago     142MB',
          'ubuntu        latest    2dc39ba059dc   11 days ago     77.8MB',
          'ubuntu        20.04     a0ce5a295b63   11 days ago     72.8MB',
          'hello-world   latest    feb5d9fea6a5   11 months ago   13.3kB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Crear imágenes mediante Dockerfile">Crear imágenes mediante <code>Dockerfile</code><a class="anchor-link" href="#Crear imágenes mediante Dockerfile"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 13" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos un directorio en el host llamado <code>dockerImages</code> para trabajar en él</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">dockerImages</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Creamos un archivo <code>Dockerfile</code> con el que crearemos una imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">touch</span> <span class="n">dockerImages</span><span class="o">/</span><span class="n">Dockerfile</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Abrimos el archivo creado con nuestro editor preferido y escribimos lo siguiente:</p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM ubuntu:latest</code></pre></div>
      <p>Esto le dice a docker que cree la imagen a raíz de la imagen <code>latest</code> de ubuntu</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A continuación, escribimos un comando que se va a ejecutar en tiempo de compilación</p>
      <div class='highlight'><pre><code class="language-Dockerfile">RUN touch /test.txt</code></pre></div>
      <p>Esto quiere decir que cuando se compile el <code>Dockerfile</code> se ejecutará ese comando, pero no cuando se corra el contenedor de la imagen</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al final el <code>Dockerfile</code> queda así:</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-dockerfile">&#x20;&#x20;FROM ubuntu:latest<br>&#x20;&#x20;RUN touch /test.txt</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Compilamos el <code>Dockerfile</code> mediante el comando <code>build</code>, con la opción <code>-t</code> podemos darle un <code>tag</code>. Por último, hay que indicarle la ruta del contexto de <code>build</code>, más adelante explicaremos esto</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">build</span> <span class="o">-</span><span class="n">t</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">test</span> <span class="o">./</span><span class="n">dockerImages</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  2.048kB',
          'Step 1/2 : FROM ubuntu:latest',
          '---&amp;gt; 2dc39ba059dc',
          'Step 2/2 : RUN touch /test.txt',
          '---&amp;gt; Using cache',
          '---&amp;gt; a78cf3ea16d8',
          'Successfully built a78cf3ea16d8',
          'Successfully tagged ubuntu:test',
          'Use &#x27;docker scan&#x27; to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos se compila en 2 pasos, cada uno tiene una <code>id</code>, cada una de esas <code>id</code>s son capas de la imagen, esto también lo veremos más adelante</p>
      <p>Volvemos a ver las imágenes que tenemos guardadas en nuestro ordenador y aparece la que acabamos de crear</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">image</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'REPOSITORY    TAG       IMAGE ID       CREATED         SIZE',
          'ubuntu        test      a78cf3ea16d8   8 minutes ago   77.8MB',
          'nginx         latest    2d389e545974   8 hours ago     142MB',
          'ubuntu        latest    2dc39ba059dc   11 days ago     77.8MB',
          'ubuntu        20.04     a0ce5a295b63   11 days ago     72.8MB',
          'hello-world   latest    feb5d9fea6a5   11 months ago   13.3kB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Corremos el contenedor a partir de la imagen que acabamos de crear</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker run -it ubuntu:test<br>root@b57b9d4eedeb:/#</code></pre></div>
            </section>
      <p>Entramos en el bash del contenedor. Como dijimos, el comando RUN se ejecuta en tiempo de compilación de la imagen, por lo que el archivo que hemos pedido que se cree debería estar en nuestro contenedor</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">root@b57b9d4eedeb:/# ls<br>bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  test.txt  tmp  usr  var</code></pre></div>
            </section>
      <p>Es importante entender que ese archivo se creó cuando se construyó la imagen, es decir, la imagen del contenedor ya tiene ese archivo. No se crea cuando se lanza el contenedor</p>
      <p>Salimos del contenedor</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">root@b57b9d4eedeb:/# exit<br>exit</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como ya tenemos una imagen, la podríamos subir al hub de Docker, pero vamos a volver a listar las imágenes antes de eso.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">image</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'REPOSITORY    TAG       IMAGE ID       CREATED          SIZE',
          'ubuntu        test      a78cf3ea16d8   20 minutes ago   77.8MB',
          'nginx         latest    2d389e545974   8 hours ago      142MB',
          'ubuntu        latest    2dc39ba059dc   11 days ago      77.8MB',
          'ubuntu        20.04     a0ce5a295b63   11 days ago      72.8MB',
          'hello-world   latest    feb5d9fea6a5   11 months ago    13.3kB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si vemos, nos está diciendo que la imagen que acabamos de crear pertenece al repositorio de ubuntu, pero nosotros no tenemos acceso al repositorio de ubuntu, por lo que en docker hub nos tenemos que hacer una cuenta para poder subir la imagen a nuestro repositorio. En mi caso, mi repositorio se llama <code>maximofn</code>, por lo que cambio el repositorio de la imagen mediante el comando <code>tag</code>, indicándole la imagen a la que queremos cambiar de repositorio y el nuevo repositorio. En el nuevo repositorio se suele indicar el nombre del repositorio seguido del tipo de imagen y el tag, en mi caso <code>maximofn/ubuntu:test</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">tag</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">test</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">ubuntu</span><span class="p">:</span><span class="n">test</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora volvemos a listar las imágenes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">image</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'REPOSITORY        TAG       IMAGE ID       CREATED          SIZE',
          'ubuntu            test      a78cf3ea16d8   24 minutes ago   77.8MB',
          'maximofn/ubuntu   test      a78cf3ea16d8   24 minutes ago   77.8MB',
          'nginx             latest    2d389e545974   8 hours ago      142MB',
          'ubuntu            latest    2dc39ba059dc   11 days ago      77.8MB',
          'ubuntu            20.04     a0ce5a295b63   11 days ago      72.8MB',
          'hello-world       latest    feb5d9fea6a5   11 months ago    13.3kB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora debemos loguearnos dentro de docker hub para poder subir la imagen, para ello usamos el comando <code>login</code></p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker login<br>Login with your Docker ID to push and pull images from Docker Hub. If you do not have a Docker ID, head over to https://hub.docker.com to create one.<br>Username: maximofn<br>Password:<br><br>Login Succeeded</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora podemos subir la imagen mediante el comando <code>push</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">push</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">ubuntu</span><span class="p">:</span><span class="n">test</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'The push refers to repository [docker.io/maximofn/ubuntu]',
          '06994357: Preparing',
          '06994357: Pushed  from library/ubuntu test: digest: sha256:318d83fc3c35ff930d695b0dc1c5ad1b0ea54e1ec6e3478b8ca85c05fd793c4e size: 735',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ha subido solo la primera capa, la segunda, como la usé a raíz de la imagen de Ubuntu, lo que hace es colocar un puntero a esa imagen para no tener capas subidas más de una vez</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hay que tener en cuenta que este repositorio es público, por lo que no debes subir imágenes con datos sensibles. Además, si una imagen no tiene uso en 6 meses será borrada</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="El sistema de capas">El sistema de capas<a class="anchor-link" href="#El sistema de capas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 14" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mediante el comando <code>history</code> podemos ver las capas de una imagen. Si vemos las capas de la imagen que acabamos de crear, usamos <code>docker history ubuntu:test</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">history</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">test</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'IMAGE          CREATED        CREATED BY                                      SIZE      COMMENT',
          'a78cf3ea16d8   3 minutes ago  /bin/sh -c touch /test.txt                      0B',
          '2dc39ba059dc   12 days ago    /bin/sh -c #(nop)  CMD [&quot;bash&quot;]                 0B',
          '&amp;lt;missing&amp;gt;      12 days ago    /bin/sh -c #(nop) ADD file:a7268f82a86219801…   77.8MB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que la primera capa tiene el comando que hemos introducido en el <code>Dockerfile</code>, además dice que ha sido creada hace 3 minutos. Sin embargo, el resto de capas fueron creadas hace 12 días, y son las capas de la imagen de Ubuntu de la que nos hemos basado</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al <code>Dockerfile</code> que hemos creado anteriormente le añadimos la línea</p>
      <div class='highlight'><pre><code class="language-docker">RUN rm /test.txt</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al final el <code>Dockerfile</code> queda así:</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-dockerfile">&#x20;&#x20;FROM ubuntu:latest<br>&#x20;&#x20;RUN touch /test.txt<br>&#x20;&#x20;RUN rm /test.txt</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si volvemos a compilar, vemos qué pasa</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">build</span> <span class="o">-</span><span class="n">t</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">test</span> <span class="o">./</span><span class="n">dockerImages</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  2.048kB',
          'Step 1/3 : FROM ubuntu:latest',
          '---&amp;gt; 2dc39ba059dc',
          'Step 2/3 : RUN touch /test.txt',
          '---&amp;gt; Using cache',
          '---&amp;gt; a78cf3ea16d8',
          'Step 3/3 : RUN rm /test.txt',
          '---&amp;gt; Running in c2e6887f2025',
          'Removing intermediate container c2e6887f2025',
          '---&amp;gt; 313243a9b573',
          'Successfully built 313243a9b573',
          'Successfully tagged ubuntu:test',
          'Use &#x27;docker scan&#x27; to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, hay una capa más con la nueva línea que hemos agregado. Si volvemos a ver las capas de la imagen con <code>history</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">history</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">test</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'IMAGE          CREATED              CREATED BY                                      SIZE      COMMENT',
          '313243a9b573   About a minute ago   /bin/sh -c rm /test.txt                         0B',
          'a78cf3ea16d8   3 minutes ago        /bin/sh -c touch /test.txt                      0B',
          '2dc39ba059dc   12 days ago          /bin/sh -c #(nop)  CMD [&quot;bash&quot;]                 0B',
          '&amp;lt;missing&amp;gt;      12 days ago          /bin/sh -c #(nop) ADD file:a7268f82a86219801…   77.8MB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que las primeras capas son iguales a las de antes y ha añadido una nueva capa con el nuevo comando</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Busqueda en docker hub">Búsqueda en docker hub<a class="anchor-link" href="#Busqueda en docker hub"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 15" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>No hace falta meterse en la página de docker hub para buscar imágenes, se puede hacer desde la terminal. Para ello usamos el comando <code>docker search &#x3C;image name&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">search</span> <span class="n">ubuntu</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'NAME                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED',
          'ubuntu                           Ubuntu is a Debian-based Linux operating sys…   16425     [OK]',
          'websphere-liberty                WebSphere Liberty multi-architecture images …   297       [OK]',
          'open-liberty                     Open Liberty multi-architecture images based…   62        [OK]',
          'neurodebian                      NeuroDebian provides neuroscience research s…   104       [OK]',
          'ubuntu-debootstrap               DEPRECATED; use &quot;ubuntu&quot; instead                52        [OK]',
          'ubuntu-upstart                   DEPRECATED, as is Upstart (find other proces…   115       [OK]',
          'ubuntu/nginx                     Nginx, a high-performance reverse proxy &amp;amp; we…   98',
          'ubuntu/squid                     Squid is a caching proxy for the Web. Long-t…   66',
          'ubuntu/cortex                    Cortex provides storage for Prometheus. Long…   4',
          'ubuntu/apache2                   Apache, a secure &amp;amp; extensible open-source HT…   60',
          'ubuntu/kafka                     Apache Kafka, a distributed event streaming …   35',
          'ubuntu/mysql                     MySQL open source fast, stable, multi-thread…   53',
          'ubuntu/bind9                     BIND 9 is a very flexible, full-featured DNS…   62',
          'ubuntu/prometheus                Prometheus is a systems and service monitori…   51',
          'ubuntu/zookeeper                 ZooKeeper maintains configuration informatio…   12',
          'ubuntu/postgres                  PostgreSQL is an open source object-relation…   31',
          'ubuntu/redis                     Redis, an open source key-value store. Long-…   19',
          'ubuntu/grafana                   Grafana, a feature rich metrics dashboard &amp;amp; …   9',
          'ubuntu/memcached                 Memcached, in-memory keyvalue store for smal…   5',
          'ubuntu/dotnet-aspnet             Chiselled Ubuntu runtime image for ASP.NET a…   11',
          'ubuntu/dotnet-deps               Chiselled Ubuntu for self-contained .NET &amp;amp; A…   11',
          'ubuntu/prometheus-alertmanager   Alertmanager handles client alerts from Prom…   9',
          'ubuntu/dotnet-runtime            Chiselled Ubuntu runtime image for .NET apps…   10',
          'ubuntu/cassandra                 Cassandra, an open source NoSQL distributed …   2',
          'ubuntu/telegraf                  Telegraf collects, processes, aggregates &amp;amp; w…   4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Uso de docker para crear aplicaciones">Uso de docker para crear aplicaciones<a class="anchor-link" href="#Uso de docker para crear aplicaciones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 16" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Exposicion de puertos">Exposición de puertos<a class="anchor-link" href="#Exposicion de puertos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 17" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Antes vimos cómo podíamos vincular un puerto de un contenedor a un puerto del ordenador (<code>-p 8080:80</code>). Pero para que eso sea posible, a la hora de crear la imagen hay que exponer el puerto, esto se hace añadiendo al Dockerfile la línea <code>EXPOSE &#x3C;port&#x3E;</code>, en el caso de antes</p>
      <div class='highlight'><pre><code class="language-docker">EXPOSE 80</code></pre></div>
      <p>O usar imágenes como base que ya tengan puertos expuestos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Reuso del cache de capas al compilar">Reuso del caché de capas al compilar<a class="anchor-link" href="#Reuso del cache de capas al compilar"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 18" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Cuando compilamos una imagen, si alguna de las capas que hemos definido ya han sido compiladas antes, Docker lo detecta y las usa, no las vuelve a compilar. Si volvemos a compilar la imagen que hemos definido en el <code>Dockerfile</code> ahora tardará muy poco, porque todas las capas ya están compiladas y Docker no las vuelve a compilar</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">build</span> <span class="o">-</span><span class="n">t</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">test</span> <span class="o">./</span><span class="n">dockerImages</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  2.048kB',
          'Step 1/3 : FROM ubuntu:latest',
          '---&amp;gt; 2dc39ba059dc',
          'Step 2/3 : RUN touch /test.txt',
          '---&amp;gt; Using cache',
          '---&amp;gt; a78cf3ea16d8',
          'Step 3/3 : RUN rm /test.txt',
          '---&amp;gt; Using cache',
          '---&amp;gt; 313243a9b573',
          'Successfully built 313243a9b573',
          'Successfully tagged ubuntu:test',
          'Use &#x27;docker scan&#x27; to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En la segunda y tercera capa aparece el texto <code>Using cache</code></p>
      <p>Como esto es un cuaderno Jupyter a la hora de ejecutar las celdas te da la información del tiempo que tardan en ejecutarse, la vez anterior que compilé la imagen tardó 1,4 segundos, mientras que ahora ha tardado 0,5 segundos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pero si ahora cambio el Dockerfile, y en la primera línea, donde decía que nos basábamos en la última versión de Ubuntu y cambiamos a la versión 20.04</p>
      <div class='highlight'><pre><code class="language-docker">FROM ubuntu:20.04</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al final el <code>Dockerfile</code> queda así:</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-dockerfile">&#x20;&#x20;FROM ubuntu:20.04<br>&#x20;&#x20;RUN touch /test.txt<br>&#x20;&#x20;RUN rm /test.txt</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si volvemos a compilar, tardará mucho más</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">build</span> <span class="o">-</span><span class="n">t</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">test</span> <span class="o">./</span><span class="n">dockerImages</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  2.048kB',
          'Step 1/3 : FROM ubuntu:20.04',
          '---&amp;gt; a0ce5a295b63',
          'Step 2/3 : RUN touch /test.txt',
          '---&amp;gt; Running in a40fe8df2c0d',
          'Removing intermediate container a40fe8df2c0d',
          '---&amp;gt; 0bb9b452c11f',
          'Step 3/3 : RUN rm /test.txt',
          '---&amp;gt; Running in 2e14919f3685',
          'Removing intermediate container 2e14919f3685',
          '---&amp;gt; fdc248fa833b',
          'Successfully built fdc248fa833b',
          'Successfully tagged ubuntu:test',
          'Use &#x27;docker scan&#x27; to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ha tardado 1,9 segundos y ya no aparece el texto <code>Using cache</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al cambiar la primera capa, Docker vuelve a compilar todas las capas. Esto puede ser un problema porque a la hora de desarrollar código se puede dar el siguiente caso</p>
      <ul>
        <li>Desarrollamos el código en nuestro ordenador</li>
        <li>Al construir la imagen, copiamos todo el código de nuestro ordenador al contenedor</li>
        <li>Luego le pedimos a la imagen que instale las bibliotecas necesarias</li>
      </ul>
      <p>Esto puede hacer que al cambiar cualquier parte del código, al tener que volver a compilar la imagen, la capa en la que se instalan las librerías se tenga que volver a compilar, ya que ha cambiado una capa anterior</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para solucionar esto, la idea sería que a la hora de crear la imagen, primero pidamos que se instalen las librerías y luego que se copie el código de nuestro ordenador al contenedor. Así, cada vez que cambiemos el código y volvamos a compilar la imagen, solo se recompilará la capa en la que se copia el código, por lo que la compilación será más rápida</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podrás pensar que es mejor compartir una carpeta entre el host y el contenedor (<code>bind mount</code>) donde tendremos el código y así no hace falta volver a compilar la imagen cada vez que cambiemos el código. Y la respuesta es que es verdad, solo he puesto este ejemplo porque es muy fácil de entender, pero es para escenificar que a la hora de crear imágenes hay que pensar bien de manera que si hace falta volver a compilarla, recompile el mínimo número de capas</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Escribir correctamente un Dockerfile">Escribir correctamente un Dockerfile<a class="anchor-link" href="#Escribir correctamente un Dockerfile"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 19" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como hemos visto Docker no vuelve a compilar capas de un Dockerfile si ya las ha compilado antes, por lo que las carga de caché. Vamos a ver cómo tiene que ser la forma correcta de escribir un Dockerfile para aprovecharnos de esto</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a partir de este Dockerfile para ir comentando posibles correcciones</p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM ubuntu
      COPY ./sourceCode /sourceCode
      RUN apt-get update
      RUN apt-get install -y python3 ssh
      CMD ["python3", "/sourceCode/sourceApp/app.py"]</code></pre></div>
      <p>Como se puede ver se parte de una imagen de ubuntu, se copia la carpeta con el código, se actualizan los repositorios, se instala python, se instala también ssh y se corre la aplicación</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Copiar el codigo antes de la ejecucion">Copiar el código antes de la ejecución<a class="anchor-link" href="#Copiar el codigo antes de la ejecucion"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 20" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como hemos dicho antes, si primero copiamos el código y luego instalamos Python, cada vez que hagamos un cambio en el código y compilemos la imagen la compilará entera, pero si copiamos el código después de instalar Python, cada vez que cambiemos el código y compilemos la imagen, solo compilará desde la copia del código y no volverá a instalar Python, por lo que el Dockerfile debería pasar a ser así</p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM ubuntu
      RUN apt-get update
      RUN apt-get install -y python3 ssh
      COPY ./sourceCode /sourceCode
      CMD ["python3", "/sourceCode/sourceApp/app.py"]</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Copiar solo el codigo nesario">Copiar solo el código nesario<a class="anchor-link" href="#Copiar solo el codigo nesario"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 21" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Estamos copiando la carpeta con todo el código, pero a lo mejor dentro tenemos código que no necesitamos, por lo que hay que copiar solo el código que de verdad necesitemos para la aplicación, de esta manera la imagen ocupará menos memoria. De modo que el Dockerfile quedaría así</p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM ubuntu
      RUN apt-get update
      RUN apt-get install -y python3 ssh
      COPY ./sourceCode/sourceApp /sourceCode/sourceApp
      CMD ["python3", "/sourceCode/sourceApp/app.py"]</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Actualizar repositorios e instalar python en la misma linea">Actualizar repositorios e instalar python en la misma línea<a class="anchor-link" href="#Actualizar repositorios e instalar python en la misma linea"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 22" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Estamos actualizando los repositorios en una línea y en otra instalando python3.</p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM ubuntu
      RUN apt-get update &amp;&amp; apt-get install -y python3 ssh
      COPY ./sourceCode/sourceApp /sourceCode/sourceApp
      CMD ["python3", "/sourceCode/sourceApp/app.py"]</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="No instalar ssh">No instalar ssh<a class="anchor-link" href="#No instalar ssh"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 23" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Habíamos instalado ssh en la imagen para poder debuggear en caso de necesitarlo, pero eso hace que la imagen ocupe más memoria. En caso de necesitar debuggear, deberíamos entrar en el contenedor, instalar ssh y a continuación debuggear. Por lo que quitamos la instalación de ssh</p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM ubuntu
      RUN apt-get update &amp;&amp; apt-get install -y python3
      COPY ./sourceCode/sourceApp /sourceCode/sourceApp
      CMD ["python3", "/sourceCode/sourceApp/app.py"]</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Usar --no-install-recommends">Usar <code>--no-install-recommends</code><a class="anchor-link" href="#Usar --no-install-recommends"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 24" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Cuando instalamos algo en Ubuntu instala paquetes recomendados, pero que no necesitamos, por lo que la imagen ocupa más espacio. Así que para evitarlo añadimos a la instalación <code>--no-install-recommends</code></p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM ubuntu
      RUN apt-get update &amp;&amp; apt-get install -y python3 --no-install-recommends
      COPY ./sourceCode/sourceApp /sourceCode/sourceApp
      CMD ["python3", "/sourceCode/sourceApp/app.py"]</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Borrar lista de repositorios actualizados">Borrar lista de repositorios actualizados<a class="anchor-link" href="#Borrar lista de repositorios actualizados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 25" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hemos actualizado la lista de repositorios y hemos instalado python, pero una vez hecho ya no necesitamos la lista de repositorios actualizados, porque lo único que harán será que la imagen ocupe más, de modo que los eliminamos después de instalar python y en su misma línea</p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM ubuntu
      RUN apt-get update &amp;&amp; apt-get install -y python3 --no-install-recommends &amp;&amp; rm -rf /var/lib/apt/lists/*
      COPY ./sourceCode/sourceApp /sourceCode/sourceApp
      CMD ["python3", "/sourceCode/sourceApp/app.py"]</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Usar una imagen de Python">Usar una imagen de Python<a class="anchor-link" href="#Usar una imagen de Python"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 26" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Todo lo que hemos hecho de actualizar la lista de paquetes e instalar python no es necesario, ya que ya existen imágenes de python sobre Ubuntu, que seguramente también han seguido buenas prácticas, que incluso lo hayan hecho mejor que nosotros y que ha sido escaneada en busca de vulnerabilidades por Docker Hub. Por lo que quitamos todo eso y partimos de una imagen de Python</p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM python
      COPY ./sourceCode/sourceApp /sourceCode/sourceApp
      CMD ["python3", "/sourceCode/sourceApp/app.py"]</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Especificar la imagen de Python">Especificar la imagen de Python<a class="anchor-link" href="#Especificar la imagen de Python"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 27" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al no especificar la imagen de Python se está bajando la última, pero en función de cuándo construyas el contenedor se puede bajar una u otra, por lo que hay que añadir el tag con la versión de Python que se quiere</p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM python:3.9.18
      COPY ./sourceCode/sourceApp /sourceCode/sourceApp
      CMD ["python3", "/sourceCode/sourceApp/app.py"]</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Elegir un tag pequeno">Elegir un tag pequeño<a class="anchor-link" href="#Elegir un tag pequeno"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 28" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hemos elegido el tag <code>3.9.18</code>, pero esa versión de python tiene un montón de librerías que posiblemente no las necesitemos, por lo que podemos usar las versiones <code>3.9.18-slim</code> que tiene muchas menos librerías instaladas, o la versión <code>3.9.18-alpine</code> que es una versión de python sobre Alpine y no sobre Ubuntu. Alpine es una distribución de Linux muy ligera que tiene muy pocos paquetes instalados y que se suele usar mucho en contenedores Docker para que ocupen muy poco espacio</p>
      <p>La imagen de python <code>3.9.18</code> ocupa 997 MB, la <code>3.9.18-slim</code> ocupa 126 MB y la <code>3.9.18-alpine</code> ocupa 47.8 MB</p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM python:3.9.18-alpine
      COPY ./sourceCode/sourceApp /sourceCode/sourceApp
      CMD ["python3", "/sourceCode/sourceApp/app.py"]</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Indicar el workspace">Indicar el workspace<a class="anchor-link" href="#Indicar el workspace"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 29" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En lugar de indicar la ruta de la imagen <code>/sourceCode/sourceApp</code> establecemos que dicha ruta sea el workspace de la imagen. Así cuando copiemos el código o ejecutemos la aplicación no hace falta indicar la ruta</p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM python:3.9.18-alpine
      WORKDIR /sourceCode/sourceApp
      COPY ./sourceCode/sourceApp .
      CMD ["python3", "app.py"]</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Indicar el workspace">Indicar el workspace<a class="anchor-link" href="#Indicar el workspace"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 30" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En lugar de indicar la ruta de la imagen <code>/sourceCode/sourceApp</code> establecemos que dicha ruta sea el workspace de la imagen. Así cuando copiemos el código o ejecutemos la aplicación no hace falta indicar la ruta</p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM python:3.9.18-alpine
      WORKDIR /sourceCode/sourceApp
      COPY ./sourceCode/sourceApp .
      CMD ["python3", "app.py"]</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Código compartido en una carpeta bind mount">Código compartido en una carpeta <code>bind mount</code><a class="anchor-link" href="#Código compartido en una carpeta bind mount"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 31" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Habíamos creado una carpeta llamada <code>dockerHostFolder</code> en la que habíamos compartido archivos entre el host y un contenedor. Dentro, además, deberían haber tres archivos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ls</span> <span class="n">dockerHostFolder</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'bindFile.txt  fileExtract.txt  text.txt',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a aprovechar el archivo <code>text.txt</code> para ver eso. Vamos a ver qué hay dentro de <code>text.txt</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cat</span> <span class="n">dockerHostFolder</span><span class="o">/</span><span class="n">text</span><span class="o">.</span><span class="n">txt</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>No hay salida, el archivo está vacío. Vamos a crear de nuevo un contenedor de ubuntu compartiendo la carpeta <code>dockerHostFolder</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">--</span><span class="n">name</span> <span class="n">alwaysup</span> <span class="o">-</span><span class="n">d</span> <span class="o">-</span><span class="n">v</span> <span class="o">~/</span><span class="n">Documentos</span><span class="o">/</span><span class="n">web</span><span class="o">/</span><span class="n">portafolio</span><span class="o">/</span><span class="n">posts</span><span class="o">/</span><span class="n">dockerHostFolder</span><span class="p">:</span><span class="o">/</span><span class="n">dockerContainerFolder</span> <span class="n">ubuntu</span> <span class="n">tail</span> <span class="o">-</span><span class="n">f</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">null</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '24adbded61f507cdf7f192eb5e246e43ee3ffafc9944b7c57918eb2d547dff19',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que el contenedor está corriendo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS          PORTS     NAMES',
          '24adbded61f5   ubuntu    &quot;tail -f /dev/null&quot;   16 seconds ago   Up 15 seconds             alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Entramos en el contenedor, vemos que está <code>text.txt</code> y que está vacío</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker exec -it alwaysup bash<br>root@24adbded61f5:/# ls dockerContainerFolder/<br>bindFile.txt  fileExtract.txt  text.txt<br>root@24adbded61f5:/# cat dockerContainerFolder/text.txt <br>root@24adbded61f5:/# </code></pre></div>
            </section>
      <p>Ahora abrimos en el host el archivo <code>text.txt</code> con el editor de textos que queramos, escribimos <code>Hola mundo</code> y guardamos. Si ahora vemos qué hay dentro del archivo en el contenedor veremos el mismo texto</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">root@24adbded61f5:/# cat dockerContainerFolder/text.txt <br>Hola mundo</code></pre></div>
            </section>
      <p>Ahora editamos el archivo en el contenedor y salimos del contenedor</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">root@24adbded61f5:/# echo hola contenedor &gt; dockerContainerFolder/text.txt <br>root@24adbded61f5:/# cat dockerContainerFolder/text.txt <br>hola contenedor<br>root@24adbded61f5:/# exit<br>exit</code></pre></div>
            </section>
      <p>Si miramos el archivo en el host, veremos el texto que escribimos en el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cat</span> <span class="n">dockerHostFolder</span><span class="o">/</span><span class="n">text</span><span class="o">.</span><span class="n">txt</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'hola contenedor',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Borramos el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="o">-</span><span class="n">f</span> <span class="n">alwaysup</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Conectar contenedores por red">Conectar contenedores por red<a class="anchor-link" href="#Conectar contenedores por red"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 32" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En caso de que queramos tener varios contenedores corriendo y queramos que se comuniquen, podemos hacer que se comuniquen por red. Docker nos da la posibilidad de hacer eso mediante sus redes virtuales</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver qué redes tiene docker mediante el comando <code>docker network ls</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">network</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'NETWORK ID     NAME      DRIVER    SCOPE',
          'de6e8b7b737e   bridge    bridge    local',
          'da1f5f6fccc0   host      host      local',
          'd3b0d93993c0   none      null      local',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que por defecto Docker tiene tres redes</p>
      <ul>
        <li>bridge: Está por retrocompatibilidad con versiones anteriores, pero no deberíamos usarla ya</li>
        <li>host: Es la red del host</li>
        <li>none: Esta es la opción que debemos usar si queremos que un contenedor no tenga acceso a internet</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos crear redes nuevas a las que otros contenedores se puedan conectar, para ello usamos el comando <code>docker network create &#x3C;name&#x3E;</code>, para que otros contenedores se puedan conectar además debemos añadir la opción <code>--attachable</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">network</span> <span class="n">create</span> <span class="o">--</span><span class="n">attachable</span> <span class="n">myNetwork</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2f6f3ddbfa8642e9f6819aa0965c16339e9e910be7bcf56ebb718fcac324cc27',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos inspeccionarla mediante el comando <code>docker network inspect &#x3C;name&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">network</span> <span class="n">inspect</span> <span class="n">myNetwork</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[',
          '&#x20;&#x20;&#x20;&#x20;&#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Name&quot;: &quot;myNetwork&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Id&quot;: &quot;2f6f3ddbfa8642e9f6819aa0965c16339e9e910be7bcf56ebb718fcac324cc27&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Created&quot;: &quot;2022-09-14T15:20:08.539830161+02:00&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Scope&quot;: &quot;local&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Driver&quot;: &quot;bridge&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;EnableIPv6&quot;: false,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;IPAM&quot;: &#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Driver&quot;: &quot;default&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Options&quot;: &#x7B;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Config&quot;: [',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Gateway&quot;: &quot;172.18.0.1&quot;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7D;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;]',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Internal&quot;: false,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Attachable&quot;: true,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Ingress&quot;: false,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;ConfigFrom&quot;: &#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Network&quot;: &quot;&quot;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;ConfigOnly&quot;: false,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Containers&quot;: &#x7B;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Options&quot;: &#x7B;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;Labels&quot;: &#x7B;&#x7D;',
          '&#x20;&#x20;&#x20;&#x20;&#x7D;',
          ']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora tenemos que crear dos contenedores para que se puedan comunicar.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear un nuevo contenedor, que llamaremos <code>container1</code>, con una carpeta compartida y que en su interior se llamará <code>folder1</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">--</span><span class="n">name</span> <span class="n">container1</span> <span class="o">-</span><span class="n">d</span> <span class="o">-</span><span class="n">v</span> <span class="o">~/</span><span class="n">Documentos</span><span class="o">/</span><span class="n">web</span><span class="o">/</span><span class="n">portafolio</span><span class="o">/</span><span class="n">posts</span><span class="o">/</span><span class="n">dockerHostFolder</span><span class="p">:</span><span class="o">/</span><span class="n">folder1</span> <span class="n">ubuntu</span> <span class="n">tail</span> <span class="o">-</span><span class="n">f</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">null</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'a5fca8ba1e4ff0a67002f8f1b8cc3cd43185373c2a7e295546f774059ad8dd1a',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora creamos otro contenedor, llamado <code>container2</code>, con otra carpeta compartida, pero que se llame <code>folder2</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">--</span><span class="n">name</span> <span class="n">container2</span> <span class="o">-</span><span class="n">d</span> <span class="o">-</span><span class="n">v</span> <span class="o">~/</span><span class="n">Documentos</span><span class="o">/</span><span class="n">web</span><span class="o">/</span><span class="n">portafolio</span><span class="o">/</span><span class="n">posts</span><span class="o">/</span><span class="n">dockerHostFolder</span><span class="p">:</span><span class="o">/</span><span class="n">folder2</span> <span class="n">ubuntu</span> <span class="n">tail</span> <span class="o">-</span><span class="n">f</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">null</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '6c8dc18315488ef686f7548516c19b3d716728dd8a173cdb889ec0dd082232f9',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos los contenedores corriendo y vemos que están los dos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED         STATUS         PORTS     NAMES',
          '6c8dc1831548   ubuntu    &quot;tail -f /dev/null&quot;   3 seconds ago   Up 2 seconds             container2',
          'a5fca8ba1e4f   ubuntu    &quot;tail -f /dev/null&quot;   4 seconds ago   Up 3 seconds             container1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora tenemos que conectar los contenedores a la red, para ello usamos el comando <code>docker network connect &#x3C;network name&#x3E; &#x3C;container name&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">network</span> <span class="n">connect</span> <span class="n">myNetwork</span> <span class="n">container1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">network</span> <span class="n">connect</span> <span class="n">myNetwork</span> <span class="n">container2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para comprobar que se han conectado correctamente podemos inspeccionar la red, pero filtrando por los contenedores conectados</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker network inspect --format &#39;&#123;&#123;.Containers&#125;&#125;&#39; myNetwork <br>map<br>[<br>&#x20;&#x20;6c8dc18315488ef686f7548516c19b3d716728dd8a173cdb889ec0dd082232f9:<br>&#x20;&#x20;&#123;<br>&#x20;&#x20;&#x20;&#x20;container2 <br>&#x20;&#x20;&#x20;&#x20;f828d211e894f7a5a992ce41a2a0def8e2424e9737fb4e1485fc09cc2d607b69 <br>&#x20;&#x20;&#x20;&#x20;02:42:ac:12:00:03 <br>&#x20;&#x20;&#x20;&#x20;172.18.0.3/16 <br>&#x20;&#x20;&#125;<br>&#x20;&#x20;a5fca8ba1e4ff0a67002f8f1b8cc3cd43185373c2a7e295546f774059ad8dd1a:<br>&#x20;&#x20;&#123;<br>&#x20;&#x20;&#x20;&#x20;container1 <br>&#x20;&#x20;&#x20;&#x20;cff762e6286ebc169804b2a675bbff904102de796751d367c18d4b490c994c45 <br>&#x20;&#x20;&#x20;&#x20;02:42:ac:12:00:02 <br>&#x20;&#x20;&#x20;&#x20;172.18.0.2/16 <br>&#x20;&#x20;&#125;<br>]</code></pre></div>
            </section>
      <p>Como podemos ver el contenedor <code>container1</code> tiene la IP <code>172.18.0.2</code> y el contenedor <code>container2</code> tiene la IP <code>172.18.0.3</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Nos metemos dentro del contenedor <code>container1</code> e instalamos <code>ping</code></p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker exec -it container1 bash<br>root@a5fca8ba1e4f:/# apt update<br>&#x20;&#x20;...<br>root@a5fca8ba1e4f:/# apt install iputils-ping<br>&#x20;&#x20;...<br>root@a5fca8ba1e4f:/#</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Nos metemos dentro del contenedor <code>container2</code> e instalamos <code>ping</code></p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker exec -it container2 bash<br>root@a5fca8ba1e4f:/# apt update<br>&#x20;&#x20;...<br>root@a5fca8ba1e4f:/# apt install iputils-ping<br>&#x20;&#x20;...<br>root@a5fca8ba1e4f:/#</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora desde el contenedor <code>container1</code> hacemos un ping a la IP <code>172.18.0.3</code>, que pertenece al contenedor <code>container2</code></p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">root@a5fca8ba1e4f:/# ping 172.18.0.3<br>PING 172.18.0.3 (172.18.0.3) 56(84) bytes of data.<br>64 bytes from 172.18.0.3: icmp_seq=1 ttl=64 time=0.115 ms<br>64 bytes from 172.18.0.3: icmp_seq=2 ttl=64 time=0.049 ms<br>64 bytes from 172.18.0.3: icmp_seq=3 ttl=64 time=0.056 ms<br>64 bytes from 172.18.0.3: icmp_seq=4 ttl=64 time=0.060 ms<br>^C<br>--- 172.18.0.3 ping statistics ---<br>4 packets transmitted, 4 received, 0% packet loss, time 3068ms<br>rtt min/avg/max/mdev = 0.049/0.070/0.115/0.026 ms</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Y desde el contenedor <code>container2</code> hacemos un ping a la IP <code>172.18.0.2</code>, que pertenece al contenedor <code>container1</code></p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">root@6c8dc1831548:/# ping 172.18.0.2<br>PING 172.18.0.2 (172.18.0.2) 56(84) bytes of data.<br>64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.076 ms<br>64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.045 ms<br>64 bytes from 172.18.0.2: icmp_seq=3 ttl=64 time=0.049 ms<br>64 bytes from 172.18.0.2: icmp_seq=4 ttl=64 time=0.051 ms<br>^C<br>--- 172.18.0.2 ping statistics ---<br>4 packets transmitted, 4 received, 0% packet loss, time 3074ms<br>rtt min/avg/max/mdev = 0.045/0.055/0.076/0.012 ms</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pero hay una cosa mejor que nos permite hacer Docker, si no me sé la IP del contenedor al que me quiero conectar, en vez de escribir su IP puedo escribir su nombre</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora desde el contenedor <code>container1</code> hacemos un ping a la IP de <code>container2</code></p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">root@a5fca8ba1e4f:/# ping container2<br>PING container2 (172.18.0.3) 56(84) bytes of data.<br>64 bytes from container2.myNetwork (172.18.0.3): icmp_seq=1 ttl=64 time=0.048 ms<br>64 bytes from container2.myNetwork (172.18.0.3): icmp_seq=2 ttl=64 time=0.050 ms<br>64 bytes from container2.myNetwork (172.18.0.3): icmp_seq=3 ttl=64 time=0.052 ms<br>64 bytes from container2.myNetwork (172.18.0.3): icmp_seq=4 ttl=64 time=0.053 ms<br>^C<br>--- container2 ping statistics ---<br>4 packets transmitted, 4 received, 0% packet loss, time 3071ms<br>rtt min/avg/max/mdev = 0.048/0.050/0.053/0.002 ms</code></pre></div>
            </section>
      <p>Como vemos docker sabe que la IP del contenedor <code>container2</code> es la <code>172.18.0.3</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Y desde el contenedor <code>container2</code> hacemos un ping a la IP de <code>container1</code></p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">root@6c8dc1831548:/# ping container1<br>PING container1 (172.18.0.2) 56(84) bytes of data.<br>64 bytes from container1.myNetwork (172.18.0.2): icmp_seq=1 ttl=64 time=0.051 ms<br>64 bytes from container1.myNetwork (172.18.0.2): icmp_seq=2 ttl=64 time=0.058 ms<br>64 bytes from container1.myNetwork (172.18.0.2): icmp_seq=3 ttl=64 time=0.052 ms<br>64 bytes from container1.myNetwork (172.18.0.2): icmp_seq=4 ttl=64 time=0.056 ms<br>^C<br>--- container1 ping statistics ---<br>4 packets transmitted, 4 received, 0% packet loss, time 3057ms<br>rtt min/avg/max/mdev = 0.051/0.054/0.058/0.003 ms</code></pre></div>
            </section>
      <p>Como vemos docker sabe que la IP del contenedor <code>container1</code> es la <code>172.18.0.2</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Salimos de los contenedores y los borramos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="o">-</span><span class="n">f</span> <span class="n">container1</span> <span class="n">container2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'container1',
          'container2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Borramos también la red que hemos creado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">network</span> <span class="n">rm</span> <span class="n">myNetwork</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'myNetwork',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Uso de GPUs">Uso de GPUs<a class="anchor-link" href="#Uso de GPUs"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 33" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para poder usar las GPUs del host dentro de los contenedores Docker es necesario realizar los pasos descritos en la página de instalación de <a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html" target="_blank" rel="nofollow noreferrer">Nvidia container toolkit</a></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Configurar el repositorio y la llave GPG">Configurar el repositorio y la llave GPG<a class="anchor-link" href="#Configurar el repositorio y la llave GPG"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 34" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Tenemos que configurar el repositorio de <code>nvidia container toolkit</code> y la llave GPG, para ello ejecutamos el siguiente comando en la consola</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \<br>&#x20;&#x20;&#x20;&amp;&amp; curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \<br>&#x20;&#x20;&#x20;&amp;&amp; curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | \<br>&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;sed &#39;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&#39; | \<br>&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Instalación de nvidia container toolkit">Instalación de <code>nvidia container toolkit</code><a class="anchor-link" href="#Instalación de nvidia container toolkit"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 35" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Una vez hemos actualizado el repositorio y la llave actualizamos los repositorios mediante el comando</p>
      <div class='highlight'><pre><code class="language-bash">sudo apt update</code></pre></div>
      <p>E instalamos <code>nvidia container toolkit</code></p>
      <div class='highlight'><pre><code class="language-bash">sudo apt install -y nvidia-docker2</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Reinicio de docker">Reinicio de docker<a class="anchor-link" href="#Reinicio de docker"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 36" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Una vez hayamos terminado, tenemos que reiniciar el demonio de Docker mediante</p>
      <div class='highlight'><pre><code class="language-bash">sudo systemctl restart docker</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Uso de GPUs">Uso de GPUs<a class="anchor-link" href="#Uso de GPUs"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 37" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora que hemos configurado Docker para poder usar las GPUs del host dentro de los contenedores lo podemos probar mediante la opción <code>--gpus all</code>. Si se tiene más de una GPU y solo se quiere usar 1 habría que especificarlo, pero de momento aquí solo explicamos cómo usar todas</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos un contenedor que no se va a ejecutar en segundo plano, sino que lo que va a hacer es ejecutar el comando <code>nvidia-smi</code> para que podamos ver si tiene acceso a las GPUs</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">--</span><span class="n">name</span> <span class="n">container_gpus</span> <span class="o">--</span><span class="n">gpus</span> <span class="nb">all</span> <span class="n">ubuntu</span> <span class="n">nvidia</span><span class="o">-</span><span class="n">smi</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Unable to find image &#x27;ubuntu:latest&#x27; locally',
          'latest: Pulling from library/ubuntu',
          '6a12be2b: Pull complete .54MB/29.54MBBDigest: sha256:aabed3296a3d45cede1dc866a24476c4d7e093aa806263c27ddaadbdce3c1054',
          'Status: Downloaded newer image for ubuntu:latest',
          'Mon Sep  4 07:10:36 2023',
          '+-----------------------------------------------------------------------------+',
          '| NVIDIA-SMI 510.39.01    Driver Version: 510.39.01    CUDA Version: 11.6     |',
          '|-------------------------------+----------------------+----------------------+',
          '| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |',
          '| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |',
          '|                               |                      |               MIG M. |',
          '|===============================+======================+======================|',
          '|   0  Quadro T1000        On   | 00000000:01:00.0 Off |                  N/A |',
          '| N/A   44C    P0    15W /  N/A |      9MiB /  4096MiB |      0%      Default |',
          '|                               |                      |                  N/A |',
          '+-------------------------------+----------------------+----------------------+',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;',
          '+-----------------------------------------------------------------------------+',
          '| Processes:                                                                  |',
          '|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |',
          '|        ID   ID                                                   Usage      |',
          '|=============================================================================|',
          '|    0   N/A  N/A      2545      G                                       4MiB |',
          '|    0   N/A  N/A      3421      G                                       4MiB |',
          '+-----------------------------------------------------------------------------+',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Borramos el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">doker</span> <span class="n">rm</span> <span class="n">container_gpus</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Docker compose">Docker compose<a class="anchor-link" href="#Docker compose"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 38" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Docker compose vs docker-compose">Docker compose vs docker-compose<a class="anchor-link" href="#Docker compose vs docker-compose"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 39" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>docker-compose</code> fue una herramienta que se creó para ayudar al mantenimiento de imágenes y contenedores y había que instalarla a parte de docker. Sin embargo docker lo incorporó en sus últimas versiones y ya no es necesario instalarla, sin embargo, para usarla, en vez de usar el comando <code>docker-compose</code> hay que usar el comando <code>docker compose</code>. En muchos sitios encontrarás información con <code>docker-compose</code>, pero al instalar docker ya te vendrá instalado <code>docker compose</code> por lo que todo lo que se podía hacer con <code>docker-compose</code> es compatible con <code>docker compose</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Docker compose">Docker compose<a class="anchor-link" href="#Docker compose"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 40" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Docker Compose es una herramienta de Docker que hace todo lo que hemos visto hasta ahora, pero ahorrándonos tiempo y esfuerzo. Editando un archivo <code>.yml</code> podemos decirle a Docker Compose que cree todos los contenedores que queramos.</p>
      <p>Para usarlo una vez no habrá mucha diferencia de escribir todos los comandos que vimos antes o escribir el archivo <code>.yml</code> pero cuando quieras volver a tener la misma configuración de contenedores trabajando, solo con llamar al archivo <code>.yml</code> volverá a crear toda la configuración</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear una carpeta donde guardaremos los archivos de Docker Compose</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">dockerComposeFiles</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Creamos el archivo .yml dentro</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">touch</span> <span class="n">dockerComposeFiles</span><span class="o">/</span><span class="n">docker</span><span class="o">-</span><span class="n">compose</span><span class="o">.</span><span class="n">yml</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Un archivo Docker Compose tiene que empezar por la versión</p>
      <div class='highlight'><pre><code class="language-json">version: "&lt;v.v&gt;"</code></pre></div>
      <p>En el momento de escribir esto, la última versión es la <code>3.8</code> así que escribimos esa</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>*docker-compose.yml*:</p>
      <div class='highlight'><pre><code class="language-json">    version: "3.8"</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A continuación se indican los servicios, que son los contenedores. En cada servicio hay que especificar la imagen y, además, se pueden añadir otros parámetros como puertos, variables de entorno, etc.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-json">services:<br>&#x20;&#x20;container1:<br>&#x20;&#x20;&#x20;&#x20;image: ubuntu<br>    <br>&#x20;&#x20;container2:<br>&#x20;&#x20;&#x20;&#x20;image: ubuntu</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El <code>docker-compose.yml</code> quedaría así:</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-json">&#x20;&#x20;version: "3.8"<br><br>&#x20;&#x20;services:<br>&#x20;&#x20;container1:<br>&#x20;&#x20;&#x20;&#x20;image: ubuntu<br>    <br>&#x20;&#x20;container2:<br>&#x20;&#x20;&#x20;&#x20;image: ubuntu</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Una vez que hemos creado el archivo, en su path, podemos ejecutar todo mediante el comando <code>docker compose up</code>, pero además añadiendo la opción <code>-d</code> haremos que corra en segundo plano</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">dockerComposeFiles</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">docker</span> <span class="n">compose</span> <span class="n">up</span> <span class="o">-</span><span class="n">d</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[+] Running 1/0',
          '⠿ Network dockercomposefiles_default         Created                      0.1s',
          '⠋ Container dockercomposefiles-container2-1  Creating                     0.0s',
          '⠋ Container dockercomposefiles-container1-1  Creating                     0.0s',
          '[+] Running 1/3',
          '⠿ Network dockercomposefiles_default         Created                      0.1s',
          '⠙ Container dockercomposefiles-container2-1  Creating                     0.1s',
          '⠙ Container dockercomposefiles-container1-1  Creating                     0.1s',
          '[+] Running 1/3',
          '⠿ Network dockercomposefiles_default         Created                      0.1s',
          '⠿ Container dockercomposefiles-container2-1  Starting                     0.2s',
          '⠿ Container dockercomposefiles-container1-1  Starting                     0.2s',
          '[+] Running 1/3',
          '⠿ Network dockercomposefiles_default         Created                      0.1s',
          '⠿ Container dockercomposefiles-container2-1  Starting                     0.3s',
          '⠿ Container dockercomposefiles-container1-1  Starting                     0.3s',
          '[+] Running 1/3',
          '⠿ Network dockercomposefiles_default         Created                      0.1s',
          '⠿ Container dockercomposefiles-container2-1  Starting                     0.4s',
          '⠿ Container dockercomposefiles-container1-1  Starting                     0.4s',
          '[+] Running 1/3',
          '⠿ Network dockercomposefiles_default         Created                      0.1s',
          '⠿ Container dockercomposefiles-container2-1  Starting                     0.5s',
          '⠿ Container dockercomposefiles-container1-1  Starting                     0.5s',
          '[+] Running 2/3',
          '⠿ Network dockercomposefiles_default         Created                      0.1s',
          '⠿ Container dockercomposefiles-container2-1  Started                      0.5s',
          '⠿ Container dockercomposefiles-container1-1  Starting                     0.6s',
          '[+] Running 3/3',
          '⠿ Network dockercomposefiles_default         Created                      0.1s',
          '⠿ Container dockercomposefiles-container2-1  Started                      0.5s',
          '⠿ Container dockercomposefiles-container1-1  Started                      0.7s',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si nos fijamos, ha creado dos contenedores <code>dockercomposefiles-container1-1</code> y <code>dockercomposefiles-container2-1</code> y la red que los une <code>dockercomposefiles_default</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a borrar los dos contenedores</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="o">-</span><span class="n">f</span> <span class="n">dockercomposefiles</span><span class="o">-</span><span class="n">container1</span><span class="o">-</span><span class="mi">1</span> <span class="n">dockercomposefiles</span><span class="o">-</span><span class="n">container2</span><span class="o">-</span><span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dockercomposefiles-container1-1',
          'dockercomposefiles-container2-1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y borramos la red que ha creado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">network</span> <span class="n">rm</span> <span class="n">dockercomposefiles_default</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dockercomposefiles_default',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a intentar hacer lo que hicimos antes con lo que sabemos hasta ahora. Creamos una nueva imagen que venga con <code>ping</code> instalada</p>
      <p>*Dockerfile*:</p>
      <div class='highlight'><pre><code class="language-docker">    FROM ubuntu:20.04
          RUN apt update
          RUN apt install iputils-ping -y</code></pre></div>
      <p>Y la compilamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">build</span> <span class="o">-</span><span class="n">t</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">ping</span> <span class="o">./</span><span class="n">dockerImages</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  2.048kB',
          'Step 1/3 : FROM ubuntu:20.04',
          '---&amp;gt; a0ce5a295b63',
          'Step 2/3 : RUN apt update',
          '---&amp;gt; Running in 3bd5278d39b4',
          'WARNING: apt does not have a stable CLI interface. Use with caution in scripts.',
          'Get:1 http://security.ubuntu.com/ubuntu focal-security InRelease [114 kB]',
          'Get:2 http://archive.ubuntu.com/ubuntu focal InRelease [265 kB]',
          'Get:3 http://security.ubuntu.com/ubuntu focal-security/universe amd64 Packages [898 kB]',
          'Get:4 http://archive.ubuntu.com/ubuntu focal-updates InRelease [114 kB]',
          'Get:5 http://archive.ubuntu.com/ubuntu focal-backports InRelease [108 kB]',
          'Get:6 http://archive.ubuntu.com/ubuntu focal/universe amd64 Packages [11.3 MB]',
          'Get:7 http://security.ubuntu.com/ubuntu focal-security/main amd64 Packages [2133 kB]',
          'Get:8 http://security.ubuntu.com/ubuntu focal-security/multiverse amd64 Packages [27.5 kB]',
          'Get:9 http://security.ubuntu.com/ubuntu focal-security/restricted amd64 Packages [1501 kB]',
          'Get:10 http://archive.ubuntu.com/ubuntu focal/main amd64 Packages [1275 kB]',
          'Get:11 http://archive.ubuntu.com/ubuntu focal/restricted amd64 Packages [33.4 kB]',
          'Get:12 http://archive.ubuntu.com/ubuntu focal/multiverse amd64 Packages [177 kB]',
          'Get:13 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 Packages [2594 kB]',
          'Get:14 http://archive.ubuntu.com/ubuntu focal-updates/restricted amd64 Packages [1613 kB]',
          'Get:15 http://archive.ubuntu.com/ubuntu focal-updates/multiverse amd64 Packages [30.2 kB]',
          'Get:16 http://archive.ubuntu.com/ubuntu focal-updates/universe amd64 Packages [1200 kB]',
          'Get:17 http://archive.ubuntu.com/ubuntu focal-backports/universe amd64 Packages [27.4 kB]',
          '...',
          'Successfully built c3d32aa9de02',
          'Successfully tagged ubuntu:ping',
          'Use &#x27;docker scan&#x27; to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Comprobamos que se ha creado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">image</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'REPOSITORY        TAG       IMAGE ID       CREATED              SIZE',
          'ubuntu            ping      c3d32aa9de02   About a minute ago   112MB',
          'maximofn/ubuntu   test      a78cf3ea16d8   25 hours ago         77.8MB',
          'nginx             latest    2d389e545974   33 hours ago         142MB',
          'ubuntu            latest    2dc39ba059dc   12 days ago          77.8MB',
          'ubuntu            20.04     a0ce5a295b63   12 days ago          72.8MB',
          'hello-world       latest    feb5d9fea6a5   11 months ago        13.3kB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Le cambiamos el tag</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">tag</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">ping</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">ubuntu</span><span class="p">:</span><span class="n">ping</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">image</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'REPOSITORY        TAG       IMAGE ID       CREATED              SIZE',
          'ubuntu            ping      c3d32aa9de02   About a minute ago   112MB',
          'maximofn/ubuntu   ping      c3d32aa9de02   About a minute ago   112MB',
          'maximofn/ubuntu   test      c3d32aa9de02   About a minute ago   112MB',
          'nginx             latest    2d389e545974   33 hours ago         142MB',
          'ubuntu            latest    2dc39ba059dc   12 days ago          77.8MB',
          'ubuntu            20.04     a0ce5a295b63   12 days ago          72.8MB',
          'hello-world       latest    feb5d9fea6a5   11 months ago        13.3kB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Editamos el archivo Docker Compose para que coja las imágenes que acabamos de crear</p>
      <p>*docker-compose.yml*:</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-json">&#x20;&#x20;version: "3.8"<br><br>&#x20;&#x20;services:<br>&#x20;&#x20;&#x20;container1:<br>&#x20;&#x20;&#x20;&#x20;image: maximofn/ubuntu:ping<br><br>&#x20;&#x20;container2:<br>&#x20;&#x20;&#x20;&#x20;image: maximofn/ubuntu:ping</code></pre></div>
            </section>
      <p>Y además le decimos que ejecute una no operación</p>
      <p>El <code>docker-compose.yml</code> quedaría así:</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-json">&#x20;&#x20;version: "3.8"<br><br>&#x20;&#x20;services:<br>&#x20;&#x20;&#x20;container1:<br>&#x20;&#x20;&#x20;&#x20;image: ubuntu<br>&#x20;&#x20;&#x20;&#x20;command: tail -f /dev/null<br><br>&#x20;&#x20;container2:<br>&#x20;&#x20;&#x20;&#x20;image: ubuntu<br>&#x20;&#x20;&#x20;&#x20;command: tail -f /dev/null</code></pre></div>
            </section>
      <p>Lo levantamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">dockerComposeFiles</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">docker</span> <span class="n">compose</span> <span class="n">up</span> <span class="o">-</span><span class="n">d</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[+] Running 0/0',
          '⠋ Container dockercomposefiles-container1-1  Recreate                     0.1s',
          '⠋ Container dockercomposefiles-container2-1  Recreate                     0.1s',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '⠙ Container dockercomposefiles-container2-1  Recreate                     0.2s',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '⠹ Container dockercomposefiles-container2-1  Recreate                     0.3s',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '⠸ Container dockercomposefiles-container2-1  Recreate                     0.4s',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '⠼ Container dockercomposefiles-container2-1  Recreate                     0.5s',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '⠴ Container dockercomposefiles-container2-1  Recreate                     0.6s',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '⠦ Container dockercomposefiles-container2-1  Recreate                     0.7s',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '⠧ Container dockercomposefiles-container2-1  Recreate                     0.8s',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '⠇ Container dockercomposefiles-container2-1  Recreate                     0.9s',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '⠏ Container dockercomposefiles-container2-1  Recreate                     1.0s',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '⠋ Container dockercomposefiles-container2-1  Recreate                     1.1s',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '⠙ Container dockercomposefiles-container2-1  Recreate                     1.2s',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '⠹ Container dockercomposefiles-container2-1  Recreate                     1.3s',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '⠸ Container dockercomposefiles-container2-1  Recreate                     1.4s',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '...',
          '[+] Running 2/2',
          '⠿ Container dockercomposefiles-container1-1  Started                     10.8s',
          '⠿ Container dockercomposefiles-container2-1  Started                     10.9s',
          '[+] Running 2/2',
          '⠿ Container dockercomposefiles-container1-1  Started                     10.8s',
          '⠿ Container dockercomposefiles-container2-1  Started                     10.9s',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos los contenedores que están corriendo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE                  COMMAND               CREATED          STATUS          PORTS     NAMES',
          '935939e5a75d   maximofn/ubuntu:ping   &quot;tail -f /dev/null&quot;   15 seconds ago   Up 13 seconds             dockercomposefiles-container2-1',
          'f9138d7064dd   maximofn/ubuntu:ping   &quot;tail -f /dev/null&quot;   25 seconds ago   Up 13 seconds             dockercomposefiles-container1-1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Están los dos contenedores corriendo, ahora nos metemos en uno e intentamos hacer <code>ping</code> al otro</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker exec -it dockercomposefiles-container1-1 bash<br>root@f9138d7064dd:/# ping dockercomposefiles-container2-1<br>PING dockercomposefiles-container2-1 (172.21.0.3) 56(84) bytes of data.<br>64 bytes from dockercomposefiles-container2-1.dockercomposefiles_default (172.21.0.3): icmp_seq=1 ttl=64 time=0.110 ms<br>64 bytes from dockercomposefiles-container2-1.dockercomposefiles_default (172.21.0.3): icmp_seq=2 ttl=64 time=0.049 ms<br>64 bytes from dockercomposefiles-container2-1.dockercomposefiles_default (172.21.0.3): icmp_seq=3 ttl=64 time=0.049 ms<br>64 bytes from dockercomposefiles-container2-1.dockercomposefiles_default (172.21.0.3): icmp_seq=4 ttl=64 time=0.075 ms<br>^C<br>--- dockercomposefiles-container2-1 ping statistics ---<br>4 packets transmitted, 4 received, 0% packet loss, time 3068ms<br>rtt min/avg/max/mdev = 0.049/0.070/0.110/0.025 ms</code></pre></div>
            </section>
      <p>Como vemos, podemos hacer <code>ping</code>, hemos creado bien la imagen con <code>ping</code> instalado. Además, en el docker-compose hemos hecho que se ejecute una no operación para que los contenedores estén corriendo</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Borramos los dos contenedores y la red que hemos creado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="o">-</span><span class="n">f</span> <span class="n">dockercomposefiles</span><span class="o">-</span><span class="n">container1</span><span class="o">-</span><span class="mi">1</span> <span class="n">dockercomposefiles</span><span class="o">-</span><span class="n">container2</span><span class="o">-</span><span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dockercomposefiles-container1-1',
          'dockercomposefiles-container2-1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">network</span> <span class="n">rm</span> <span class="n">dockercomposefiles_default</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dockercomposefiles_default',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Como nombra docker compose los contenedores">Cómo nombra docker compose los contenedores<a class="anchor-link" href="#Como nombra docker compose los contenedores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 41" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si nos fijamos, los contenedores que crea Docker se llaman <code>dockercomposefiles-container1-1</code> y <code>dockercomposefiles-container2-1</code>. Esto es porque la carpeta en la que está el archivo de Docker Compose está en una carpeta llamada <code>dockerComposeFiles</code>, por eso la primera parte del nombre de los contenedores es <code>dockercomposefiles</code>, a continuación aparece el nombre del servicio que le hemos dado en el archivo Docker Compose (<code>container1</code> y <code>container2</code>) y por último un número para poder crear más si es necesario</p>
      <p>Similar ocurre con el nombre de la red que ha creado <code>dockercomposefiles_default</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Logs en docker compose">Logs en docker compose<a class="anchor-link" href="#Logs en docker compose"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 42" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ahora a cambiar el archivo Docker Compose, en las líneas en las que teníamos <code>command: tail -f /dev/null</code>, vamos a poner <code>command: ping 0.0.0.0</code></p>
      <p>Y además le decimos que ejecute una no operación</p>
      <p>El <code>docker-compose.yml</code> quedaría así:</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-json">&#x20;&#x20;version: "3.8"<br><br>&#x20;&#x20;services:<br>&#x20;&#x20;&#x20;container1:<br>&#x20;&#x20;&#x20;&#x20;image: ubuntu<br>&#x20;&#x20;&#x20;&#x20;command: ping 0.0.0.0<br><br>&#x20;&#x20;container2:<br>&#x20;&#x20;&#x20;&#x20;image: ubuntu<br>&#x20;&#x20;&#x20;&#x20;command: ping 0.0.0.0</code></pre></div>
            </section>
      <p>Esto lo hacemos para que cada contenedor esté escupiendo el ping constantemente, así simulamos algunos logs</p>
      <p>Si ejecutamos de nuevo el docker compose</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">dockerComposeFiles</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">docker</span> <span class="n">compose</span> <span class="n">up</span> <span class="o">-</span><span class="n">d</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[+] Running 0/0',
          '⠋ Container dockercomposefiles-container1-1  Recreate                     0.1s',
          '⠋ Container dockercomposefiles-container2-1  Recreate                     0.1s',
          '[+] Running 0/2',
          '⠙ Container dockercomposefiles-container1-1  Recreate                     0.2s',
          '⠙ Container dockercomposefiles-container2-1  Recreate                     0.2s',
          '[+] Running 0/2',
          '⠹ Container dockercomposefiles-container1-1  Recreate                     0.3s',
          '⠹ Container dockercomposefiles-container2-1  Recreate                     0.3s',
          '[+] Running 0/2',
          '⠸ Container dockercomposefiles-container1-1  Recreate                     0.4s',
          '⠸ Container dockercomposefiles-container2-1  Recreate                     0.4s',
          '[+] Running 0/2',
          '⠼ Container dockercomposefiles-container1-1  Recreate                     0.5s',
          '⠼ Container dockercomposefiles-container2-1  Recreate                     0.5s',
          '[+] Running 0/2',
          '⠴ Container dockercomposefiles-container1-1  Recreate                     0.6s',
          '⠴ Container dockercomposefiles-container2-1  Recreate                     0.6s',
          '[+] Running 0/2',
          '⠦ Container dockercomposefiles-container1-1  Recreate                     0.7s',
          '⠦ Container dockercomposefiles-container2-1  Recreate                     0.7s',
          '[+] Running 0/2',
          '⠧ Container dockercomposefiles-container1-1  Recreate                     0.8s',
          '⠧ Container dockercomposefiles-container2-1  Recreate                     0.8s',
          '[+] Running 0/2',
          '...',
          '⠿ Container dockercomposefiles-container1-1  Starting                    11.0s',
          '⠿ Container dockercomposefiles-container2-1  Started                     11.0s',
          '[+] Running 2/2',
          '⠿ Container dockercomposefiles-container1-1  Started                     11.1s',
          '⠿ Container dockercomposefiles-container2-1  Started                     11.0s',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora podemos ver los logs de los dos contenedores mediante el comando <code>docker compose logs</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">dockerComposeFiles</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">docker</span> <span class="n">compose</span> <span class="n">logs</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dockercomposefiles-container2-1  | PING 0.0.0.0 (127.0.0.1) 56(84) bytes of data.',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.042 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.025 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.022 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=4 ttl=64 time=0.030 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=5 ttl=64 time=0.021 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=6 ttl=64 time=0.021 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=7 ttl=64 time=0.030 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=8 ttl=64 time=0.028 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=9 ttl=64 time=0.028 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=10 ttl=64 time=0.026 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=11 ttl=64 time=0.028 ms',
          'dockercomposefiles-container1-1  | PING 0.0.0.0 (127.0.0.1) 56(84) bytes of data.',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=12 ttl=64 time=0.027 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=13 ttl=64 time=0.039 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=14 ttl=64 time=0.035 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=15 ttl=64 time=0.034 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=16 ttl=64 time=0.036 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=17 ttl=64 time=0.034 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=18 ttl=64 time=0.036 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=19 ttl=64 time=0.032 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=20 ttl=64 time=0.032 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=21 ttl=64 time=0.033 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=22 ttl=64 time=0.034 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.037 ms',
          '...',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=214 ttl=64 time=0.015 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=215 ttl=64 time=0.021 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=216 ttl=64 time=0.020 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=217 ttl=64 time=0.049 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, podemos ver los logs de los dos contenedores, pero en el caso de querer ver solo los de uno, podemos especificar el **nombre del servicio**</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">dockerComposeFiles</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">docker</span> <span class="n">compose</span> <span class="n">logs</span> <span class="n">container1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dockercomposefiles-container1-1  | PING 0.0.0.0 (127.0.0.1) 56(84) bytes of data.',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.037 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.025 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.023 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=4 ttl=64 time=0.031 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=5 ttl=64 time=0.034 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=6 ttl=64 time=0.033 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=7 ttl=64 time=0.034 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=8 ttl=64 time=0.022 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=9 ttl=64 time=0.032 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=10 ttl=64 time=0.029 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=11 ttl=64 time=0.031 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=12 ttl=64 time=0.024 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=13 ttl=64 time=0.029 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=14 ttl=64 time=0.032 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=15 ttl=64 time=0.033 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=16 ttl=64 time=0.034 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=17 ttl=64 time=0.028 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=18 ttl=64 time=0.034 ms',
          '...',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=332 ttl=64 time=0.027 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=333 ttl=64 time=0.030 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=334 ttl=64 time=0.033 ms',
          'dockercomposefiles-container1-1  | 64 bytes from 127.0.0.1: icmp_seq=335 ttl=64 time=0.036 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">dockerComposeFiles</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">docker</span> <span class="n">compose</span> <span class="n">logs</span> <span class="n">container2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dockercomposefiles-container2-1  | PING 0.0.0.0 (127.0.0.1) 56(84) bytes of data.',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.042 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.025 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.022 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=4 ttl=64 time=0.030 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=5 ttl=64 time=0.021 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=6 ttl=64 time=0.021 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=7 ttl=64 time=0.030 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=8 ttl=64 time=0.028 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=9 ttl=64 time=0.028 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=10 ttl=64 time=0.026 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=11 ttl=64 time=0.028 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=12 ttl=64 time=0.027 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=13 ttl=64 time=0.039 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=14 ttl=64 time=0.035 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=15 ttl=64 time=0.034 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=16 ttl=64 time=0.036 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=17 ttl=64 time=0.034 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=18 ttl=64 time=0.036 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=19 ttl=64 time=0.032 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=20 ttl=64 time=0.032 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=21 ttl=64 time=0.033 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=22 ttl=64 time=0.034 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=23 ttl=64 time=0.035 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=24 ttl=64 time=0.037 ms',
          '...',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=340 ttl=64 time=0.034 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=341 ttl=64 time=0.033 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=342 ttl=64 time=0.034 ms',
          'dockercomposefiles-container2-1  | 64 bytes from 127.0.0.1: icmp_seq=343 ttl=64 time=0.036 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos ver los logs continuamente, podemos añadir la opción <code>-f</code>: <code>docker compose logs -f &#x3C;service name&#x3E;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si he hecho un docker compose con más de dos servicios, cuando se quiera ver los logs de varios servicios solo hay que añadir más nombres al comando, <code>docker compose logs &#x3C;name service 1&#x3E; &#x3C;name service 2&#x3E; ...</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Exec servicios">Exec servicios<a class="anchor-link" href="#Exec servicios"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 43" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como hemos visto, mediante el comando <code>exec</code> podemos entrar a un contenedor indicando el nombre del contenedor, el comando que se quiere ejecutar y la opción <code>-it</code>. Con Docker Compose esto es más sencillo, ya que solamente es necesario el nombre del servicio y el comando, pero no es necesaria la opción <code>-it</code> ya que Docker Compose lo da por supuesto</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker compose exec container1 bash<br>root@a7cf282fe66c:/#</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Deteniendo docker compose">Deteniendo docker compose<a class="anchor-link" href="#Deteniendo docker compose"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 44" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Cuando hemos terminado de trabajar, con un solo comando (<code>stop</code>), Docker Compose para todo, no hace falta ir parando uno a uno cada contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">dockerComposeFiles</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">docker</span> <span class="n">compose</span> <span class="n">stop</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[+] Running 0/0',
          '⠋ Container dockercomposefiles-container2-1  Stopping                     0.1s',
          '⠋ Container dockercomposefiles-container1-1  Stopping                     0.1s',
          '[+] Running 0/2',
          '⠙ Container dockercomposefiles-container2-1  Stopping                     0.2s',
          '⠙ Container dockercomposefiles-container1-1  Stopping                     0.2s',
          '[+] Running 0/2',
          '⠹ Container dockercomposefiles-container2-1  Stopping                     0.3s',
          '⠹ Container dockercomposefiles-container1-1  Stopping                     0.3s',
          '[+] Running 0/2',
          '⠸ Container dockercomposefiles-container2-1  Stopping                     0.4s',
          '⠸ Container dockercomposefiles-container1-1  Stopping                     0.4s',
          '[+] Running 0/2',
          '⠼ Container dockercomposefiles-container2-1  Stopping                     0.5s',
          '⠼ Container dockercomposefiles-container1-1  Stopping                     0.5s',
          '[+] Running 0/2',
          '⠴ Container dockercomposefiles-container2-1  Stopping                     0.6s',
          '⠴ Container dockercomposefiles-container1-1  Stopping                     0.6s',
          '[+] Running 0/2',
          '⠦ Container dockercomposefiles-container2-1  Stopping                     0.7s',
          '⠦ Container dockercomposefiles-container1-1  Stopping                     0.7s',
          '[+] Running 0/2',
          '⠧ Container dockercomposefiles-container2-1  Stopping                     0.8s',
          '⠧ Container dockercomposefiles-container1-1  Stopping                     0.8s',
          '...',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container2-1  Stopped                     10.4s',
          '⠸ Container dockercomposefiles-container1-1  Stopping                    10.4s',
          '[+] Running 2/2',
          '⠿ Container dockercomposefiles-container2-1  Stopped                     10.4s',
          '⠿ Container dockercomposefiles-container1-1  Stopped                     10.4s',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver, docker compose ha parado los dos contenedores, pero no los ha borrado, ni ha borrado la red</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE                  COMMAND          CREATED          STATUS                        PORTS     NAMES',
          '1e6c1dd9adb2   maximofn/ubuntu:ping   &quot;ping 0.0.0.0&quot;   16 minutes ago   Exited (137) 25 seconds ago             dockercomposefiles-container2-1',
          'a7cf282fe66c   maximofn/ubuntu:ping   &quot;ping 0.0.0.0&quot;   16 minutes ago   Exited (137) 25 seconds ago             dockercomposefiles-container1-1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">network</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'NETWORK ID     NAME                         DRIVER    SCOPE',
          '13cc632147f3   bridge                       bridge    local',
          'd4a2f718cd83   dockercomposefiles_default   bridge    local',
          'da1f5f6fccc0   host                         host      local',
          'd3b0d93993c0   none                         null      local',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Docker compose como herramienta de desarrollo">Docker compose como herramienta de desarrollo<a class="anchor-link" href="#Docker compose como herramienta de desarrollo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 45" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al igual que vimos antes, para poder desarrollar, lo ideal sería compartir la carpeta que tiene el código con el servicio. Esto con docker compose se hace añadiendo la etiqueta <code>volumes</code> al archivo docker compose. Primero tenemos que añadirle la ruta de la carpeta donde está el código en el host y luego la ruta en el contenedor.</p>
      <p>*docker-compose.yml*:</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-json">&#x20;&#x20;version: "3.8"<br><br>&#x20;&#x20;services:<br>&#x20;&#x20;&#x20;container1:<br>&#x20;&#x20;&#x20;&#x20;image: ubuntu<br>&#x20;&#x20;&#x20;&#x20;command: ping 0.0.0.0<br>&#x20;&#x20;&#x20;&#x20;volumes:<br>&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;- ../dockerHostFolder/:/dockerContainerFolder<br><br>&#x20;&#x20;container2:<br>&#x20;&#x20;&#x20;&#x20;image: ubuntu<br>&#x20;&#x20;&#x20;&#x20;command: ping 0.0.0.0</code></pre></div>
            </section>
      <p>Como se puede ver, la ruta de la carpeta del host la he puesto relativa</p>
      <p>Si levantamos el Docker Compose</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">dockerComposeFiles</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">docker</span> <span class="n">compose</span> <span class="n">up</span> <span class="o">-</span><span class="n">d</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[+] Running 1/0',
          '⠋ Container dockercomposefiles-container1-1  Recreate                     0.1s',
          '⠿ Container dockercomposefiles-container2-1  Created                      0.0s',
          '[+] Running 0/2',
          '⠿ Container dockercomposefiles-container1-1  Starting                     0.2s',
          '⠿ Container dockercomposefiles-container2-1  Starting                     0.2s',
          '[+] Running 0/2',
          '⠿ Container dockercomposefiles-container1-1  Starting                     0.3s',
          '⠿ Container dockercomposefiles-container2-1  Starting                     0.3s',
          '[+] Running 0/2',
          '⠿ Container dockercomposefiles-container1-1  Starting                     0.4s',
          '⠿ Container dockercomposefiles-container2-1  Starting                     0.4s',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container1-1  Started                      0.5s',
          '⠿ Container dockercomposefiles-container2-1  Starting                     0.5s',
          '[+] Running 2/2',
          '⠿ Container dockercomposefiles-container1-1  Started                      0.5s',
          '⠿ Container dockercomposefiles-container2-1  Started                      0.6s',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si entramos en el contenedor, podemos ver qué hay dentro del archivo text.txt</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker compose exec container1 bash<br>root@c8aae9d619d3:/# ls dockerContainerFolder/<br>bindFile.txt  fileExtract.txt  text.txt<br>root@c8aae9d619d3:/# cat dockerContainerFolder/text.txt <br>hola contenedor</code></pre></div>
            </section>
      <p>Si ahora lo abrimos en el host, escribimos <code>hola host</code> y volvemos a ver en el contenedor</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">root@c8aae9d619d3:/# cat dockerContainerFolder/text.txt <br>hola host</code></pre></div>
            </section>
      <p>Y ahora al revés, si lo modificamos en el contenedor</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">root@c8aae9d619d3:/# echo hola compose &gt; dockerContainerFolder/text.txt<br>root@c8aae9d619d3:/# exit<br>exit</code></pre></div>
            </section>
      <p>Si lo vemos desde el host, debemos obtener <code>hola compose</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cat</span> <span class="n">dockerHostFolder</span><span class="o">/</span><span class="n">text</span><span class="o">.</span><span class="n">txt</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'hola compose',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Exposicion de puertos en docker compose">Exposición de puertos en docker compose<a class="anchor-link" href="#Exposicion de puertos en docker compose"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 46" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>También podemos configurar los puertos en el archivo de Docker Compose, mediante la etiqueta <code>ports</code>, indicando el puerto del host y a continuación la IP del servicio</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-json">ports:<br>&#x20;&#x20;- &lt;host port&gt;:&lt;service port&gt;</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Docker compose en equipo - docker override">Docker compose en equipo - docker override<a class="anchor-link" href="#Docker compose en equipo - docker override"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 47" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si somos un grupo de personas desarrollando sobre Docker con Docker Compose, es probable que muchas personas anden cambiando el archivo Docker Compose, lo cual puede hacer que no se sincronicen bien y haya conflictos.</p>
      <p>Para solucionar esto Docker ofrece una herramienta llamada Docker Override. De esta manera puede haber un archivo Docker Compose base y que cada uno lo modifique mediante Docker Override.</p>
      <p>Para hacer esto, ahora tenemos que crear un archivo llamado <code>docker-compose.override.yml</code> que será el que podremos editar</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">touch</span> <span class="n">dockerComposeFiles</span><span class="o">/</span><span class="n">docker</span><span class="o">-</span><span class="n">compose</span><span class="o">.</span><span class="n">override</span><span class="o">.</span><span class="n">yml</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora intentamos levantar el Docker Compose vamos a recibir un error</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">dockerComposeFiles</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">docker</span> <span class="n">compose</span> <span class="n">up</span> <span class="o">-</span><span class="n">d</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Top-level object must be a mapping',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y esto es porque Docker Compose ha detectado que hay un archivo llamado <code>docker-compose.override.yml</code> y que está vacío, por lo que vamos a editarlo. El archivo <code>docker-compose.override.yml</code> lo que hace es editar el archivo <code>docker-compose.yml</code>, por lo que si por ejemplo queremos hacer un cambio en el servicio <code>container2</code> para añadirle un volumen escribiríamos así el archivo <code>docker-compose.override.yml</code></p>
      <p>*docker-compose.override.yml*:</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-json">&#x20;&#x20;version: "3.8"<br><br>&#x20;&#x20;services:<br>&#x20;&#x20;container2:<br>&#x20;&#x20;&#x20;&#x20;volumes:<br>&#x20;&#x20;&#x20;&#x20;- ../dockerHostFolder/:/dockerOverrideFolder</code></pre></div>
            </section>
      <p>Date cuenta de que la carpeta compartida en el servicio la he llamado <code>dockerOverrideFolder</code>, por lo que vamos a levantar el docker compose y ver si vemos esa carpeta en el contenedor <code>container2</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">dockerComposeFiles</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">docker</span> <span class="n">compose</span> <span class="n">up</span> <span class="o">-</span><span class="n">d</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[+] Running 1/0',
          '⠋ Container dockercomposefiles-container2-1  Recreate                     0.1s',
          '⠿ Container dockercomposefiles-container1-1  Running                      0.0s',
          '[+] Running 1/2',
          '⠙ Container dockercomposefiles-container2-1  Recreate                     0.2s',
          '⠿ Container dockercomposefiles-container1-1  Running                      0.0s',
          '[+] Running 1/2',
          '⠹ Container dockercomposefiles-container2-1  Recreate                     0.3s',
          '⠿ Container dockercomposefiles-container1-1  Running                      0.0s',
          '[+] Running 1/2',
          '⠸ Container dockercomposefiles-container2-1  Recreate                     0.4s',
          '⠿ Container dockercomposefiles-container1-1  Running                      0.0s',
          '[+] Running 1/2',
          '⠼ Container dockercomposefiles-container2-1  Recreate                     0.5s',
          '⠿ Container dockercomposefiles-container1-1  Running                      0.0s',
          '[+] Running 1/2',
          '⠴ Container dockercomposefiles-container2-1  Recreate                     0.6s',
          '⠿ Container dockercomposefiles-container1-1  Running                      0.0s',
          '[+] Running 1/2',
          '⠦ Container dockercomposefiles-container2-1  Recreate                     0.7s',
          '⠿ Container dockercomposefiles-container1-1  Running                      0.0s',
          '[+] Running 1/2',
          '⠧ Container dockercomposefiles-container2-1  Recreate                     0.8s',
          '⠿ Container dockercomposefiles-container1-1  Running                      0.0s',
          '...',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container2-1  Starting                    10.8s',
          '⠿ Container dockercomposefiles-container1-1  Running                      0.0s',
          '[+] Running 2/2',
          '⠿ Container dockercomposefiles-container2-1  Started                     10.8s',
          '⠿ Container dockercomposefiles-container1-1  Running                      0.0s',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que ha tardado 10 segundos en montar el servicio <code>container2</code>, eso es porque ha estado aplicando los cambios</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker compose exec container2 bash<br>root@d8777a4e611a:/# ls dockerOverrideFolder/<br>bindFile.txt  fileExtract.txt  text.txt<br>root@d8777a4e611a:/# cat dockerOverrideFolder/text.txt <br>hola compose<br>root@d8777a4e611a:/# exit<br>exit</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Bajamos el Compose y borramos los contenedores y la red creada</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">dockerComposeFiles</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">docker</span> <span class="n">compose</span> <span class="n">down</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[+] Running 0/0',
          '⠋ Container dockercomposefiles-container2-1  Stopping                     0.1s',
          '⠋ Container dockercomposefiles-container1-1  Stopping                     0.1s',
          '[+] Running 0/2',
          '⠙ Container dockercomposefiles-container2-1  Stopping                     0.2s',
          '⠙ Container dockercomposefiles-container1-1  Stopping                     0.2s',
          '[+] Running 0/2',
          '⠹ Container dockercomposefiles-container2-1  Stopping                     0.3s',
          '⠹ Container dockercomposefiles-container1-1  Stopping                     0.3s',
          '[+] Running 0/2',
          '⠸ Container dockercomposefiles-container2-1  Stopping                     0.4s',
          '⠸ Container dockercomposefiles-container1-1  Stopping                     0.4s',
          '[+] Running 0/2',
          '⠼ Container dockercomposefiles-container2-1  Stopping                     0.5s',
          '⠼ Container dockercomposefiles-container1-1  Stopping                     0.5s',
          '[+] Running 0/2',
          '⠴ Container dockercomposefiles-container2-1  Stopping                     0.6s',
          '⠴ Container dockercomposefiles-container1-1  Stopping                     0.6s',
          '[+] Running 0/2',
          '⠦ Container dockercomposefiles-container2-1  Stopping                     0.7s',
          '⠦ Container dockercomposefiles-container1-1  Stopping                     0.7s',
          '[+] Running 0/2',
          '⠧ Container dockercomposefiles-container2-1  Stopping                     0.8s',
          '⠧ Container dockercomposefiles-container1-1  Stopping                     0.8s',
          '...',
          '⠸ Container dockercomposefiles-container2-1  Stopping                    10.4s',
          '⠸ Container dockercomposefiles-container1-1  Stopping                    10.4s',
          '[+] Running 1/2',
          '⠿ Container dockercomposefiles-container2-1  Removed                     10.4s',
          '⠿ Container dockercomposefiles-container1-1  Removing                    10.5s',
          '[+] Running 2/2',
          '⠿ Container dockercomposefiles-container2-1  Removed                     10.4s',
          '⠿ Container dockercomposefiles-container1-1  Removed                     10.5s',
          '⠋ Network dockercomposefiles_default         Removing                     0.1s',
          '[+] Running 3/3',
          '⠿ Container dockercomposefiles-container2-1  Removed                     10.4s',
          '⠿ Container dockercomposefiles-container1-1  Removed                     10.5s',
          '⠿ Network dockercomposefiles_default         Removed                      0.2s',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En este caso, solo con <code>down</code> Docker Compose ha parado y borrado todo, ya que, como vemos en los contenedores y en la red pone <code>Removed</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Docker compose restart">Docker compose restart<a class="anchor-link" href="#Docker compose restart"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 48" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A la hora de escribir un docker compose, podemos añadir la etiqueta <code>restart</code> para que si el contenedor se cae, se reinicie automáticamente</p>
      <div class='highlight'><pre><code class="language-json">restart: always</code></pre></div>
      <p>De esta manera, si el contenedor se cae, se reiniciará automáticamente. Si queremos que se reinicie solo un número de veces, podemos añadirle la opción <code>on-failure</code></p>
      <div class='highlight'><pre><code class="language-json">restart: on-failure:&lt;number&gt;</code></pre></div>
      <p>Ahora el contenedor se reiniciará un número de veces, pero si se cae más veces, no se reiniciará. Si queremos que se reinicie siempre, podemos añadirle la opción <code>unless-stopped</code></p>
      <div class='highlight'><pre><code class="language-json">restart: unless-stopped</code></pre></div>
      <p>Ahora el contenedor se reiniciará siempre, a menos que se pare manualmente</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Docker avanzado">Docker avanzado<a class="anchor-link" href="#Docker avanzado"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 49" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Administrar ambiente de trabajo">Administrar ambiente de trabajo<a class="anchor-link" href="#Administrar ambiente de trabajo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 50" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Borrado de contenedores apagados">Borrado de contenedores apagados<a class="anchor-link" href="#Borrado de contenedores apagados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 51" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Después de estar un tiempo desarrollando, podemos tener varios contenedores apagados, pero guardados en el ordenador. Esto al final ocupa memoria, así que con <code>docker container prune</code> podemos eliminar todos los que están parados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="n">ubuntu</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED          STATUS                      PORTS     NAMES',
          'effcee24f54a   ubuntu    &quot;bash&quot;    37 seconds ago   Exited (0) 36 seconds ago             musing_rosalind',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker container prune <br>WARNING! This will remove all stopped containers.<br>Are you sure you want to continue? [y/N] y<br>Deleted Containers:<br>effcee24f54aab22e34fdea2465b3b7af132d8c627e5432ba3e915a370876977<br><br>Total reclaimed space: 0B</code></pre></div>
            </section>
      <p>En este caso hemos ahorrado 0 bytes, pero en el caso de dejar contenedores apagados después de mucho desarrollo, seguro que el ahorro de memoria será mayor</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Borrado de todos los contenedores">Borrado de todos los contenedores<a class="anchor-link" href="#Borrado de todos los contenedores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 52" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En caso de tener contenedores corriendo, podemos eliminar todos los contenedores mediante otro comando</p>
      <p>El comando <code>docker ps -q</code> nos devuelve la ID de todos los contenedores, por lo que con el comando <code>docker rm -f $(docker ps -aq)</code> pararemos y borraremos todos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">d</span> <span class="n">ubuntu</span> <span class="n">tail</span> <span class="o">-</span><span class="n">f</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">null</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'c22516186ef7e3561fb1ad0d508a914857dbc61274a218f297c4d80b1fc33863',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED              STATUS              PORTS     NAMES',
          'c22516186ef7   ubuntu    &quot;tail -f /dev/null&quot;   About a minute ago   Up About a minute             agitated_knuth',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="o">-</span><span class="n">f</span> <span class="err">$</span><span class="p">(</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">aq</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'c22516186ef7',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Borrado de todo">Borrado de todo<a class="anchor-link" href="#Borrado de todo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 53" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como hemos visto Docker también crea redes, imágenes, volúmenes, etc, así que con el comando <code>docker system prune</code> podemos borrar todos los contenedores parados, todas las redes que no estén usadas por al menos un contenedor, las imágenes repetidas, y lo que haya repetido en la caché de compilación</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker system prune <br>WARNING! This will remove:<br>&#x20;- all stopped containers<br>&#x20;- all networks not used by at least one container<br>&#x20;- all dangling images<br>&#x20;- all dangling build cache<br><br>Are you sure you want to continue? [y/N] y<br>Total reclaimed space: 0B</code></pre></div>
            </section>
      <p>Al igual que antes, no se ha ahorrado mucho espacio, pero después de mucho tiempo desarrollando, el ahorro será considerable</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Uso de recursos del host por parte de contenedores">Uso de recursos del host por parte de contenedores<a class="anchor-link" href="#Uso de recursos del host por parte de contenedores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 54" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por ejemplo a la hora de crear un contenedor, podemos limitar la RAM que el host puede usar mediante la opción <code>--memory</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">d</span> <span class="o">--</span><span class="n">memory</span> <span class="mi">1</span><span class="n">g</span> <span class="n">ubuntu</span> <span class="n">tail</span> <span class="o">-</span><span class="n">f</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">null</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'd84888eafe531831ef8915d2270422365adec02678122bf59580e2da782e6972',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pero con <code>docker ps</code> no tenemos acceso a los recursos que está consumiendo el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS          PORTS     NAMES',
          'd84888eafe53   ubuntu    &quot;tail -f /dev/null&quot;   35 seconds ago   Up 34 seconds             musing_ritchie',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para ello tenemos el comando <code>docker stats</code></p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker stats<br>CONTAINER ID   NAME             CPU %     MEM USAGE / LIMIT   MEM %     NET I/O       BLOCK I/O   PIDS<br>d84888eafe53   musing_ritchie   0.00%     540KiB / 1GiB       0.05%     5.62kB / 0B   0B / 0B     1</code></pre></div>
            </section>
      <p>Esto es muy útil si queremos simular un entorno con un límite de RAM</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Deteniendo contenedores correctamente: SHELL vs EXEC">Deteniendo contenedores correctamente: SHELL vs EXEC<a class="anchor-link" href="#Deteniendo contenedores correctamente: SHELL vs EXEC"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 55" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como hemos explicado, cuando asignamos un proceso a un contenedor, cuando ese proceso termina, el contenedor se para, pero a veces podemos encontrarnos con problemas con esto. Vamos a crear una nueva carpeta llamada Dockerfile_loop</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">Dockerfile_loop</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora vamos a crear un archivo llamado <code>loop.sh</code> dentro de <code>Dockerfile_loop</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">touch</span> <span class="n">Dockerfile_loop</span><span class="o">/</span><span class="n">loop</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y vamos a escribir lo siguiente dentro de <code>loop.sh</code></p>
      <div class='highlight'><pre><code class="language-shell">#!/usr/bin/env bash
      trap "exit 0" SIGTERM
      while true; do :; done</code></pre></div>
      <p>Si yo ejecuto este script en el host se ejecuta hasta que introduzca <code>CTRL+C</code></p>
      <p>``` bash</p>
      <p>./loop</p>
      <p>^C</p>
      <p>```</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora vamos a crear un archivo <code>Dockerfile</code> dentro de <code>Dockerfile_loop</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">touch</span> <span class="n">Dockerfile_loop</span><span class="o">/</span><span class="n">Dockerfile</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>*Dockerfile*:</p>
      <div class='highlight'><pre><code class="language-docker">FROM ubuntu:trusty
      COPY ["loop.sh", "/"]
      CMD /loop.sh</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear una imagen basada en Ubuntu que copia el script dentro y lo ejecuta, y el script se ejecuta hasta que recibe la señal <code>SIGTERM</code> del sistema operativo. Compilamos la imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">build</span> <span class="o">-</span><span class="n">t</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">loop</span> <span class="o">./</span><span class="n">Dockerfile_loop</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  3.072kB',
          'Step 1/3 : FROM ubuntu:trusty',
          '---&amp;gt; 13b66b487594',
          'Step 2/3 : COPY [&quot;loop.sh&quot;, &quot;/&quot;]',
          '---&amp;gt; 89f2bbd25a88',
          'Step 3/3 : CMD /loop.sh',
          '---&amp;gt; Running in ff52569c35fd',
          'Removing intermediate container ff52569c35fd',
          '---&amp;gt; feb091e4efa3',
          'Successfully built feb091e4efa3',
          'Successfully tagged ubuntu:loop',
          'Use &#x27;docker scan&#x27; to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ejecutamos el contenedor</p>
      <div class='highlight'><pre><code class="language-bash">docker run -d --name looper ubuntu:loop bash</code></pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">d</span> <span class="o">--</span><span class="n">name</span> <span class="n">looper</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">loop</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '8a28f8cc9892213c4e0603dfdde320edf52c091b82c60510083549a391cd6645',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Comprobamos y vemos que el contenedor está corriendo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE         COMMAND                 CREATED         STATUS         PORTS     NAMES',
          '8a28f8cc9892   ubuntu:loop   &quot;/bin/sh -c /loop.sh&quot;   4 seconds ago   Up 3 seconds             looper',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Intentamos parar el contenedor con <code>docker stop looper</code>. Docker stop trata de parar el contenedor enviándole la señal <code>SIGTERM</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">time</span>',
      '<span class="err">!</span><span class="n">docker</span> <span class="n">stop</span> <span class="n">looper</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'looper',
          'CPU times: user 89.2 ms, sys: 21.7 ms, total: 111 ms',
          'Wall time: 10.6 s',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Esto ha tardado unos 10 segundos en detenerse, cuando tendría que ser inmediato. Esto es porque <code>stop</code> ha mandado la orden <code>SIGTERM</code> para que se parara el contenedor, pero como no paraba, al rato le ha mandado un <code>SIGKILL</code> para forzar que se detenga. Vemos a ver qué pasa, si listamos los contenedores</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE         COMMAND                 CREATED          STATUS                       PORTS     NAMES',
          '8a28f8cc9892   ubuntu:loop   &quot;/bin/sh -c /loop.sh&quot;   23 seconds ago   Exited (137) 2 seconds ago             looper',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que la señal de <code>Exited</code> es <code>137</code>, eso equivale a SIGKILL, es decir, docker tuvo que forzar el apagado.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a borrar el contenedor y a volverlo a ejecutar</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="n">looper</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'looper',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">d</span> <span class="o">--</span><span class="n">name</span> <span class="n">looper</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">loop</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '84bc37f944d270be5f84a952968db2b8cf5372c61146d29383468198ceed18fd',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora intentamos detener el contenedor con <code>docker kill looper</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">time</span>',
      '<span class="err">!</span><span class="n">docker</span> <span class="n">kill</span> <span class="n">looper</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'looper',
          'CPU times: user 9.1 ms, sys: 857 µs, total: 9.96 ms',
          'Wall time: 545 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que el tiempo son unos 500 ms, es decir, docker lo ha parado en un momento enviándole la orden <code>SIGKILL</code>. Porque <code>kill</code> no manda <code>SIGTERM</code> y si en un tiempo no se ha parado el contenedor manda <code>SIGKILL</code>, lo que hace es mandar <code>SIGKILL</code> desde el inicio.</p>
      <p>Si vemos los contenedores, vemos que la señal de salida es la misma, <code>137</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE         COMMAND                 CREATED         STATUS                       PORTS     NAMES',
          '84bc37f944d2   ubuntu:loop   &quot;/bin/sh -c /loop.sh&quot;   6 seconds ago   Exited (137) 2 seconds ago             looper',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Esta no es la manera correcta de apagar un contenedor, porque cuando queramos apagar el contenedor habría que hacerlo mediante la señal <code>SIGTERM</code>, para que este termine de procesar lo que estuviera haciendo y luego se apague</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si borramos el contenedor y lo volvemos a ejecutar</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="n">looper</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'looper',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">d</span> <span class="o">--</span><span class="n">name</span> <span class="n">looper</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">loop</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'b9d9f370cc0de7569eb09d0a85cd67e8ea6babc0754a517ccba5c5057f5cc50e',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora vemos los procesos que se están ejecutando dentro del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">exec</span> <span class="n">looper</span> <span class="n">ps</span> <span class="o">-</span><span class="n">ef</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'UID          PID    PPID  C STIME TTY          TIME CMD',
          'root           1       0  0 14:05 ?        00:00:00 /bin/sh -c /loop.sh',
          'root           7       1 93 14:05 ?        00:00:02 bash /loop.sh',
          'root           8       0  0 14:05 ?        00:00:00 ps -ef',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En realidad el proceso principal, el 1, no es <code>/loop.sh</code> sino que es <code>/bin/sh -c /loop.sh</code>, es decir, es un proceso hijo del <code>shell</code>. Por lo que cuando llegaba la señal <code>SIGTERM</code> le llegaba al <code>shell</code>, pero este no se lo manda a sus procesos hijos, por eso no le llegaba a <code>loop.sh</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para que no pase esto hay que cambiar el <code>Dockerfile</code> a lo siguiente</p>
      <p>*Dockerfile*:</p>
      <div class='highlight'><pre><code class="language-docker">FROM ubuntu:trusty
      COPY ["loop.sh", "/"]
      CMD ["/loop.sh"]    # antes era CMD /loop.sh</code></pre></div>
      <p>Esta forma se llama <code>exec form</code>, mientras que la anterior se llama <code>shell form</code>, de manera que de la anterior forma corre el proceso como un hijo del <code>shell</code>, mientras que de la forma <code>exec form</code> ejecuta el proceso que le digamos. Así que borramos el contenedor, volvemos a compilar y volvemos a hacer correr el contenedor con la imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="o">-</span><span class="n">f</span> <span class="n">looper</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'looper',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">build</span> <span class="o">-</span><span class="n">t</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">loop</span> <span class="o">./</span><span class="n">Dockerfile_loop</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  3.072kB',
          'Step 1/3 : FROM ubuntu:trusty',
          '---&amp;gt; 13b66b487594',
          'Step 2/3 : COPY [&quot;loop.sh&quot;, &quot;/&quot;]',
          '---&amp;gt; Using cache',
          '---&amp;gt; 89f2bbd25a88',
          'Step 3/3 : CMD [&quot;/loop.sh&quot;]',
          '---&amp;gt; Running in 6b8d92fcd57c',
          'Removing intermediate container 6b8d92fcd57c',
          '---&amp;gt; 35a7bb2b1892',
          'Successfully built 35a7bb2b1892',
          'Successfully tagged ubuntu:loop',
          'Use &#x27;docker scan&#x27; to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">d</span> <span class="o">--</span><span class="n">name</span> <span class="n">looper</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">loop</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '850ae70c071426850b28428ac60dcbf875c6d35d9b7cc66c17cf391a23392965',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Sí ahora veo los procesos dentro del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">exec</span> <span class="n">looper</span> <span class="n">ps</span> <span class="o">-</span><span class="n">ef</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'UID          PID    PPID  C STIME TTY          TIME CMD',
          'root           1       0 88 14:14 ?        00:00:02 bash /loop.sh',
          'root           7       0  0 14:14 ?        00:00:00 ps -ef',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora sí veo que el proceso principal, el 1, es <code>/loop.sh</code></p>
      <p>Si ahora pruebo a parar el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">time</span>',
      '<span class="err">!</span><span class="n">docker</span> <span class="n">stop</span> <span class="n">looper</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'looper',
          'CPU times: user 989 µs, sys: 7.55 ms, total: 8.54 ms',
          'Wall time: 529 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que tarda más. Veamos el código con el que paró</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE         COMMAND      CREATED              STATUS                      PORTS     NAMES',
          '850ae70c0714   ubuntu:loop   &quot;/loop.sh&quot;   About a minute ago   Exited (0) 33 seconds ago             looper',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Contenedores ejecutables">Contenedores ejecutables<a class="anchor-link" href="#Contenedores ejecutables"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 56" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos un binario que corra como un ejecutable, en el <code>dockerfile</code> hay que especificar el comando en <code>ENTRYPOINT</code> y los parámetros del comando en <code>CMD</code>, vamos a verlo</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear una nueva carpeta donde guardaremos el <code>Dockerfile</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">dockerfile_ping</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora creamos un Dockerfile dentro</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">touch</span> <span class="n">dockerfile_ping</span><span class="o">/</span><span class="n">Dockerfile</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Escribimos dentro del Dockerfile lo siguiente</p>
      <div class='highlight'><pre><code class="language-docker">FROM ubuntu:trusty
      ENTRYPOINT [ "/bin/ping", "-c", "3" ]
      CMD [ "localhost" ]</code></pre></div>
      <p>Compilamos la imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">build</span> <span class="o">-</span><span class="n">t</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">ping</span> <span class="o">./</span><span class="n">dockerfile_ping</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  3.072kB',
          'Step 1/3 : FROM ubuntu:trusty',
          '---&amp;gt; 13b66b487594',
          'Step 2/3 : ENTRYPOINT [ &quot;/bin/ping&quot;, &quot;-c&quot;, &quot;3&quot; ]',
          '---&amp;gt; Using cache',
          '---&amp;gt; 1cebcfb542b1',
          'Step 3/3 : CMD [ &quot;localhost&quot; ]',
          '---&amp;gt; Using cache',
          '---&amp;gt; 04ddc3de52a2',
          'Successfully built 04ddc3de52a2',
          'Successfully tagged ubuntu:ping',
          'Use &#x27;docker scan&#x27; to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora corremos la imagen sin pasarle un parámetro, el contenedor se hará un ping a sí mismo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">--</span><span class="n">name</span> <span class="n">ping_localhost</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">ping</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'PING localhost (127.0.0.1) 56(84) bytes of data.',
          '64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.041 ms',
          '64 bytes from localhost (127.0.0.1): icmp_seq=2 ttl=64 time=0.058 ms',
          '64 bytes from localhost (127.0.0.1): icmp_seq=3 ttl=64 time=0.054 ms',
          '--- localhost ping statistics ---',
          '3 packets transmitted, 3 received, 0% packet loss, time 2027ms',
          'rtt min/avg/max/mdev = 0.041/0.051/0.058/0.007 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pero si ahora le pasamos un parámetro, hará ping a la dirección que le digamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">--</span><span class="n">name</span> <span class="n">ping_google</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">ping</span> <span class="n">google</span><span class="o">.</span><span class="n">com</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'PING google.com (216.58.209.78) 56(84) bytes of data.',
          '64 bytes from waw02s06-in-f14.1e100.net (216.58.209.78): icmp_seq=1 ttl=111 time=3.93 ms',
          '64 bytes from waw02s06-in-f14.1e100.net (216.58.209.78): icmp_seq=2 ttl=111 time=6.80 ms',
          '64 bytes from waw02s06-in-f14.1e100.net (216.58.209.78): icmp_seq=3 ttl=111 time=6.92 ms',
          '--- google.com ping statistics ---',
          '3 packets transmitted, 3 received, 0% packet loss, time 2002ms',
          'rtt min/avg/max/mdev = 3.930/5.886/6.920/1.383 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Borramos los contenedores</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="n">ping_localhost</span> <span class="n">ping_google</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'ping_localhost',
          'ping_google',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="El contexto de build">El contexto de <code>build</code><a class="anchor-link" href="#El contexto de build"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 57" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear una carpeta llamada <code>dockerfile_contexto</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">dokerfile_contexto</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora creamos en ella dos archivos: un <code>test.txt</code> y el <code>Dockerfile</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">touch</span> <span class="n">dokerfile_contexto</span><span class="o">/</span><span class="n">Dockerfile</span> <span class="n">dokerfile_contexto</span><span class="o">/</span><span class="n">text</span><span class="o">.</span><span class="n">txt</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Modificamos el Dockerfile y ponemos lo siguiente</p>
      <div class='highlight'><pre><code class="language-docker">FROM ubuntu:trusty
      COPY [".", "/"]</code></pre></div>
      <p>Esto lo que va a hacer es que va a copiar dentro de la imagen, todo lo que tenga en la carpeta en la que se encuentra el <code>Dockerfile</code>. Compilamos la imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">build</span> <span class="o">-</span><span class="n">t</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">contexto</span> <span class="o">./</span><span class="n">dokerfile_contexto</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon   2.56kB',
          'Step 1/2 : FROM ubuntu:trusty',
          '---&amp;gt; 13b66b487594',
          'Step 2/2 : COPY [&quot;.&quot;, &quot;/&quot;]',
          '---&amp;gt; 3ab79fdce389',
          'Successfully built 3ab79fdce389',
          'Successfully tagged ubuntu:contexto',
          'Use &#x27;docker scan&#x27; to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver qué hay dentro del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">--</span><span class="n">name</span> <span class="n">ls</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">contexto</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Dockerfile',
          'bin',
          'boot',
          'dev',
          'etc',
          'home',
          'lib',
          'lib64',
          'media',
          'mnt',
          'opt',
          'proc',
          'root',
          'run',
          'sbin',
          'srv',
          'sys',
          'text.txt',
          'tmp',
          'usr',
          'var',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos está el archivo <code>text.txt</code>. Pero es posible que dentro de la carpeta que está en el mismo directorio que el <code>Dockerfile</code> haya archivos o carpetas que no queremos que se copien en la imagen, por la razón que sea, así que al igual que en git tenemos el <code>.gitignore</code>, en docker tenemos el <code>.dockerignore</code>, donde metemos los archivos o carpetas que no queremos que a la hora de compilar se tengan en cuenta</p>
      <p>Así que creamos un archivo <code>.dockerignore</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">touch</span> <span class="n">dokerfile_contexto</span><span class="o">/.</span><span class="n">dockerignore</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y dentro añadimos el <code>text.txt</code>, y de paso el <code>Dockerfile</code> que no lo necesitamos dentro de la imagen</p>
      <p>*.dockerignore*:</p>
      <div class='highlight'><pre><code class="language-Dockerfile">Dockerfile
      text.txt</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Borramos el contenedor que habíamos creado, volvemos a compilar y vemos qué hay dentro del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'ls',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">build</span> <span class="o">-</span><span class="n">t</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">contexto</span> <span class="o">./</span><span class="n">dokerfile_contexto</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  3.072kB',
          'Step 1/2 : FROM ubuntu:trusty',
          '---&amp;gt; 13b66b487594',
          'Step 2/2 : COPY [&quot;.&quot;, &quot;/&quot;]',
          '---&amp;gt; 7a6689546da4',
          'Successfully built 7a6689546da4',
          'Successfully tagged ubuntu:contexto',
          'Use &#x27;docker scan&#x27; to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">--</span><span class="n">name</span> <span class="n">ls</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">contexto</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'bin',
          'boot',
          'dev',
          'etc',
          'home',
          'lib',
          'lib64',
          'media',
          'mnt',
          'opt',
          'proc',
          'root',
          'run',
          'sbin',
          'srv',
          'sys',
          'tmp',
          'usr',
          'var',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que ahora no están ni <code>Dockerfile</code> ni <code>text.txt</code>. Borramos el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">rm</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'ls',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Multi-stage build">Multi-stage build<a class="anchor-link" href="#Multi-stage build"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 58" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al final de un desarrollo no queremos que todo el código esté en la imagen que se va a mandar a producción.</p>
      <p>Podemos dividir el <code>dockerfile</code> en dos, por ejemplo, el <code>developer.Dockerfile</code> y el <code>production.Dockerfile</code>, donde en desarrollo habrá más cosas que en el de producción. A la hora de compilarlos, mediante la opción <code>-f</code> elegimos el <code>dockerfile</code> que queremos usar</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">docker build -t &lt;tag&gt; -f developer.Dockerfile<br>docker build -t &lt;tag&gt; -f production.Dockerfile</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pero para no tener que crear dos archivos <code>Dockerfile</code>, Docker creó el <code>multi stage builds</code>. Con un solo <code>Dockerfile</code> vamos a solucionar el problema</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos la carpeta donde vamos a guardar el <code>Dockerfile</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">docker_multi_stage</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y dentro creamos el archivo <code>Dockerfile</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">docker_multi_stage</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">Dockerfile</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Editamos el archivo, metiendo lo siguiente</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-dockerfile"># Etapa 1: Generar el ejecutable con Python basado en Alpine<br>FROM python:3.9-alpine as build-stage<br>WORKDIR /app<br># Instalar dependencias para PyInstaller<br>RUN apk add --no-cache gcc musl-dev libc-dev<br># Generar hello.py<br>RUN echo &#39;print("Hello from Alpine!")&#39; &gt; hello.py<br># Instalar PyInstaller<br>RUN pip install pyinstaller<br># Usar PyInstaller para crear un ejecutable independiente<br>RUN pyinstaller --onefile hello.py<br><br># Etapa 2: Ejecutar el ejecutable en una imagen de Alpine<br>FROM alpine:latest<br>WORKDIR /app<br># Copiar el ejecutable desde la etapa de build<br>COPY --from=build-stage /app/dist/hello .<br># Comando por defecto para ejecutar el ejecutable<br>CMD ["./hello"]</code></pre></div>
            </section>
      <p>Como se puede ver, el <code>Dockerfile</code> está dividido en dos. Por un lado, se trabaja sobre la imagen <code>python:3.9-alpine</code>, que se llama como <code>build-stage</code>. Y por otro lado, trabajamos sobre la imagen <code>alpine:latest</code>, que es una imagen de Linux muy ligera y se utiliza mucho en producción</p>
      <p>Lo compilamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">build</span> <span class="o">-</span><span class="n">t</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">multistagebuild</span><span class="p">:</span><span class="n">latest</span> <span class="o">./</span><span class="n">docker_multi_stage</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[+] Building 0.0s (0/2)                                          docker:default',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '[+] Building 0.2s (4/6)                                          docker:default',
          '=&amp;gt; [internal] load build definition from Dockerfile                       0.0s',
          '=&amp;gt; =&amp;gt; transferring dockerfile: 722B                                       0.0s',
          '=&amp;gt; [internal] load .dockerignore                                          0.0s',
          '=&amp;gt; =&amp;gt; transferring context: 2B                                            0.0s',
          '=&amp;gt; [internal] load metadata for docker.io/library/alpine:latest           0.1s',
          '=&amp;gt; [internal] load metadata for docker.io/library/python:3.9-alpine       0.1s',
          '...',
          '=&amp;gt; CACHED [stage-1 3/3] COPY --from=build-stage /app/dist/hello .         0.0s',
          '=&amp;gt; exporting to image                                                     0.0s',
          '=&amp;gt; =&amp;gt; exporting layers                                                    0.0s',
          '=&amp;gt; =&amp;gt; writing image sha256:7fb090d1495d00e892118b6bc3c03400b63a435fd4703  0.0s',
          '=&amp;gt; =&amp;gt; naming to docker.io/maximofn/multistagebuild:latest                 0.0s',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora vemos las imágenes que tenemos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">image</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'REPOSITORY                 TAG       IMAGE ID       CREATED         SIZE',
          'maximofn/multistagebuild   latest    7fb090d1495d   8 minutes ago   13.6MB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a bajarnos la imagen de Python para ver cuánto pesa</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">pull</span> <span class="n">python</span><span class="p">:</span><span class="mf">3.9</span><span class="o">-</span><span class="n">alpine</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '3.9-alpine: Pulling from library/python',
          'a8db6415: Already exists',
          'd5e70e42: Already exists',
          '3fe96417: Already exists',
          'aa4dddbb: Already exists',
          '518be9f7: Already exists Digest: sha256:6e508b43604ff9a81907ec17405c9ad5c13664e45a5affa2206af128818c7486',
          'Status: Downloaded newer image for python:3.9-alpine',
          'docker.io/library/python:3.9-alpine',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">image</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'REPOSITORY                 TAG          IMAGE ID       CREATED         SIZE',
          'maximofn/multistagebuild   latest       7fb090d1495d   9 minutes ago   13.6MB',
          'python                     3.9-alpine   6946662f018b   9 days ago      47.8MB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que mientras nuestra imagen pesa solo 13.6 MB, la de Python con la que ha construido la aplicación pesa 47.8 MB. Por lo que podemos sacar dos conclusiones: con la primera imagen, la de Python, ha construido la aplicación, ha generado el ejecutable y ese ejecutable es el que usamos en la segunda imagen, la de Alpine. Además podemos ver que aunque la primera imagen que usa es la de Python no se descarga en nuestro sistema, ya que la hemos tenido que descargar nosotros</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pues ya sólo queda probarlo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">--</span><span class="n">rm</span> <span class="o">--</span><span class="n">name</span> <span class="n">multi_stage_build</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">multistagebuild</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hello from Alpine!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Funciona!</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Multi arch builds">Multi arch builds<a class="anchor-link" href="#Multi arch builds"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 59" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Supongamos que queremos hacer una imagen que se pueda ejecutar en un ordenador y en una Raspberry. El ordenador probablemente tenga un micro con arquitectura AMD64, mientras que la Raspberry tiene un micro con arquitectura ARM. Por lo tanto, no podemos crear la misma imagen para los dos. Es decir, cuando creamos una imagen, la creamos con un <code>Dockerfile</code> que suele empezar así</p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM ...</code></pre></div>
      <p>Por lo tanto, el <code>Dockerfile</code> de la imagen del ordenador podría empezar así</p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM ubuntu:latest</code></pre></div>
      <p>Mientras que el de la Raspberry podría empezar así</p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM arm64v8/ubuntu:latest</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Tendríamos que crear dos archivos <code>Dockerfile</code>, compilarlos y en el ordenador usar una imagen y en la raspberry usar otra</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para evitar tener que ver la arquitectura del ordenador y ver qué imagen tenemos que usar, Docker crea los <code>manifest</code>, que como su nombre indica es un manifiesto que indica en función de qué arquitectura de micro tengamos, usa una imagen u otra</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Así que vamos a ver cómo hacer esto</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En primer lugar, creamos una carpeta donde vamos a crear nuestros archivos <code>Dockerfile</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">docker_multi_arch</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora creamos los dos Dockerfiles</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">docker_multi_arch</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">Dockerfile_arm64</span> <span class="n">Dockerfile_amd64</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Escribimos el <code>Dockerfile</code> para AMD64</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">docker_multi_arch</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;FROM ubuntu:20.04&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Dockerfile_amd64</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;CMD echo &#39;Hello from amd64&#39;&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Dockerfile_amd64</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">docker_multi_arch</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;FROM arm64v8/ubuntu:latest&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Dockerfile_arm</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;CMD echo &#39;Hello from ARM&#39;&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Dockerfile_arm</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora combinamos las dos imágenes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">docker_multi_arch</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">docker</span> <span class="n">build</span> <span class="o">-</span><span class="n">t</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">multiarch</span><span class="p">:</span><span class="n">arm</span> <span class="o">-</span><span class="n">f</span> <span class="n">Dockerfile_arm</span> <span class="o">.</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[+] Building 0.0s (0/1)                                          docker:default',
          '[+] Building 0.2s (2/3)                                          docker:default',
          '=&amp;gt; [internal] load build definition from Dockerfile_amd64                 0.1s',
          '=&amp;gt; =&amp;gt; transferring dockerfile: 89B                                        0.0s',
          '=&amp;gt; [internal] load .dockerignore                                          0.1s',
          '=&amp;gt; =&amp;gt; transferring context: 2B                                            0.0s',
          '=&amp;gt; [internal] load metadata for docker.io/library/ubuntu:20.04            0.1s',
          '[+] Building 0.3s (2/3)                                          docker:default',
          '=&amp;gt; [internal] load build definition from Dockerfile_amd64                 0.1s',
          '=&amp;gt; =&amp;gt; transferring dockerfile: 89B                                        0.0s',
          '=&amp;gt; [internal] load .dockerignore                                          0.1s',
          '=&amp;gt; =&amp;gt; transferring context: 2B                                            0.0s',
          '=&amp;gt; [internal] load metadata for docker.io/library/ubuntu:20.04            0.2s',
          '[+] Building 0.5s (2/3)                                          docker:default',
          '=&amp;gt; [internal] load build definition from Dockerfile_amd64                 0.1s',
          '=&amp;gt; =&amp;gt; transferring dockerfile: 89B                                        0.0s',
          '=&amp;gt; [internal] load .dockerignore                                          0.1s',
          '=&amp;gt; =&amp;gt; transferring context: 2B                                            0.0s',
          '=&amp;gt; [internal] load metadata for docker.io/library/ubuntu:20.04            0.4s',
          '[+] Building 0.6s (2/3)                                          docker:default',
          '=&amp;gt; [internal] load build definition from Dockerfile_amd64                 0.1s',
          '=&amp;gt; =&amp;gt; transferring dockerfile: 89B                                        0.0s',
          '=&amp;gt; [internal] load .dockerignore                                          0.1s',
          '=&amp;gt; =&amp;gt; transferring context: 2B                                            0.0s',
          '=&amp;gt; [internal] load metadata for docker.io/library/ubuntu:20.04            0.5s',
          '...',
          '=&amp;gt; =&amp;gt; transferring context: 2B                                            0.0s',
          '=&amp;gt; [internal] load build definition from Dockerfile_arm                   0.0s',
          '=&amp;gt; =&amp;gt; transferring dockerfile: 94B                                        0.0s',
          '=&amp;gt; [internal] load metadata for docker.io/arm64v8/ubuntu:latest           1.8s',
          '=&amp;gt; [auth] arm64v8/ubuntu:pull token for registry-1.docker.io              0.0s',
          '=&amp;gt; CACHED [1/1] FROM docker.io/arm64v8/ubuntu:latest@sha256:94d12db896d0  0.0s',
          '=&amp;gt; exporting to image                                                     0.0s',
          '=&amp;gt; =&amp;gt; exporting layers                                                    0.0s',
          '=&amp;gt; =&amp;gt; writing image sha256:a9732c1988756dc8e836fd96e5c9512e349c97ea5af46  0.0s',
          '=&amp;gt; =&amp;gt; naming to docker.io/maximofn/multiarch:arm                          0.0s',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver que tenemos las dos imágenes compiladas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">image</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'REPOSITORY           TAG       IMAGE ID       CREATED       SIZE',
          'maximofn/multiarch   arm       a9732c198875   4 weeks ago   69.2MB',
          'maximofn/multiarch   amd64     5b612c83025f   6 weeks ago   72.8MB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que hemos compilado las dos imágenes. Para poder crear un manifest, primero tenemos que subir las imágenes a Docker Hub, así que las subimos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">push</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">multiarch</span><span class="p">:</span><span class="n">amd64</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'The push refers to repository [docker.io/maximofn/multiarch]',
          '82bdeb5f: Mounted from library/ubuntu amd64: digest: sha256:30e820f2a11a24ad4d8fb624ae485f7c1bcc299e8cfc72c88adce1acd0447e1d size: 529',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">push</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">multiarch</span><span class="p">:</span><span class="n">arm</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'The push refers to repository [docker.io/maximofn/multiarch]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'eda53374: Layer already exists arm: digest: sha256:6ec5a0752d49d3805061314147761bf25b5ff7430ce143adf34b70d4eda15fb8 size: 529',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si me voy a mi Docker Hub puedo ver que mi imagen <code>maximofn/multiarch</code> tiene los tags <code>amd64</code> y <code>arm</code></p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/docker_multi_arch_tags.webp" alt="docker_multi_arch_tags">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora vamos a crear el <code>manifest</code> basado en estas dos imágenes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">manifest</span> <span class="n">create</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">multiarch</span><span class="p">:</span><span class="n">latest</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">multiarch</span><span class="p">:</span><span class="n">amd64</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">multiarch</span><span class="p">:</span><span class="n">arm</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Created manifest list docker.io/maximofn/multiarch:latest',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Una vez creado, tenemos que indicar las arquitecturas de las CPU a las que corresponde cada una</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">manifest</span> <span class="n">annotate</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">multiarch</span><span class="p">:</span><span class="n">latest</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">multiarch</span><span class="p">:</span><span class="n">amd64</span> <span class="o">--</span><span class="n">os</span> <span class="n">linux</span> <span class="o">--</span><span class="n">arch</span> <span class="n">amd64</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">manifest</span> <span class="n">annotate</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">multiarch</span><span class="p">:</span><span class="n">latest</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">multiarch</span><span class="p">:</span><span class="n">arm64</span> <span class="o">--</span><span class="n">os</span> <span class="n">linux</span> <span class="o">--</span><span class="n">arch</span> <span class="n">arm64</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'manifest for image maximofn/multiarch:arm64 does not exist in maximofn/multiarch:latest',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Una vez creado y anotado podemos subir el <code>manifest</code> a Docker Hub</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">manifest</span> <span class="n">push</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">multiarch</span><span class="p">:</span><span class="n">latest</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'sha256:1ea28e9a04867fe0e0d8b0efa455ce8e4e29e7d9fd4531412b75dbd0325e9304',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora vuelvo a mirar los tags que tiene mi imagen <code>maximofn/multiarch</code>, veo también la de <code>latest</code></p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/docker_multi_arch_tags_manifest.webp" alt="docker_multi_arch_tags_manifest">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora, tanto si quiero usar mi imagen desde una máquina con CPU AMD64 o CPU ARM al hacer <code>FROM maximofn/multiarch:latest</code>, docker comprobará la arquitectura de la CPU y bajará el tag <code>amd64</code> o el tag <code>arm</code>. Vamos a verlo, si desde mi ordenador ejecuto la imagen obtengo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">multiarch</span><span class="p">:</span><span class="n">latest</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Unable to find image &#x27;maximofn/multiarch:latest&#x27; locally',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'latest: Pulling from maximofn/multiarch',
          'Digest: sha256:7cef0de10f7fa2b3b0dca0fbf398d1f48af17a0bbc5b9beca701d7c427c9fd84',
          'Status: Downloaded newer image for maximofn/multiarch:latest',
          'Hello from amd64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como no la tiene, se la baja</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora me conecto por ssh a una Raspberry Pi y pruebo lo mismo obtengo</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">raspberrry@raspberrypi:~ $ docker run maximofn/multiarch:latest<br>&#x20;&#x20;Unable to find image &#39;maximofn/multiarch:latest&#39; locally<br>&#x20;&#x20;latest: Pulling from maximofn/multiarch<br>&#x20;&#x20;Digest: sha256:1ea28e9a04867fe0e0d8b0efa455ce8e4e29e7d9fd4531412b75dbd0325e9304<br>&#x20;&#x20;Status: Downloaded newer image for maximofn/multiarch:latest<br>&#x20;&#x20;Hello from ARM</code></pre></div>
            </section>
      <p>Aparece <code>Hello from ARM</code> ya que la raspberry tiene un micro con arquitectura ARM</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver, cada máquina se ha bajado la imagen que necesitaba</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Escritura correcta de Dockerfiles avanzado">Escritura correcta de Dockerfiles avanzado<a class="anchor-link" href="#Escritura correcta de Dockerfiles avanzado"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 60" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ya vimos la manera de escribir correctamente Dockerfiles, pero hay una cosa más que podemos hacer ahora que conocemos el multi-stage build y es crear un contenedor para crear el ejecutable y otro más pequeño para ejecutarlo</p>
      <p>Llegamos a la conclusión de que un buen Dockerfile podría ser este</p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM python:3.9.18-alpine
      WORKDIR /sourceCode/sourceApp
      COPY ./sourceCode/sourceApp .
      CMD ["python3", "app.py"]</code></pre></div>
      <p>Vamos a crear ahora un ejecutable en un contenedor builder y en otro más pequeño lo ejecutamos</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-dockerfile">FROM python:3.9.18-alpine as builder<br>WORKDIR /sourceCode/sourceApp<br>RUN apk add --no-cache gcc musl-dev libc-dev &amp;&amp; pip install pyinstaller<br>COPY ./sourceCode/sourceApp .<br>RUN pyinstaller --onefile app.py<br><br>FROM alpine:3.18.3<br>WORKDIR /sourceCode/sourceApp<br>COPY --from=builder /sourceCode/sourceApp/dist/app .<br>CMD ["./app"]</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos el código de Python en la ruta necesaria</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">multistagebuild</span><span class="o">/</span><span class="n">sourceCode</span>',
      '<span class="err">!</span><span class="n">mkdir</span> <span class="n">multistagebuild</span><span class="o">/</span><span class="n">sourceCode</span><span class="o">/</span><span class="n">sourceApp</span>',
      '<span class="err">!</span><span class="n">touch</span> <span class="n">multistagebuild</span><span class="o">/</span><span class="n">sourceCode</span><span class="o">/</span><span class="n">sourceApp</span><span class="o">/</span><span class="n">app</span><span class="o">.</span><span class="n">py</span>',
      '<span class="err">!</span><span class="n">echo</span> <span class="s1">&#39;print(&quot;Hello from Alpine!&quot;)&#39;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">multistagebuild</span><span class="o">/</span><span class="n">sourceCode</span><span class="o">/</span><span class="n">sourceApp</span><span class="o">/</span><span class="n">app</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora compilandos la imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">build</span> <span class="o">-</span><span class="n">t</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">multistagebuild</span><span class="p">:</span><span class="n">alpine</span><span class="o">-</span><span class="mf">3.18.3</span> <span class="o">./</span><span class="n">multistagebuild</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[+] Building 0.0s (0/0)                                          docker:default',
          '[+] Building 0.0s (0/1)                                          docker:default',
          '[+] Building 0.2s (3/5)                                          docker:default',
          '=&amp;gt; [internal] load build definition from Dockerfile                       0.1s',
          '=&amp;gt; =&amp;gt; transferring dockerfile: 357B                                       0.0s',
          '=&amp;gt; [internal] load .dockerignore                                          0.1s',
          '=&amp;gt; =&amp;gt; transferring context: 2B                                            0.0s',
          '=&amp;gt; [internal] load metadata for docker.io/library/alpine:3.18.3           0.1s',
          '=&amp;gt; [internal] load metadata for docker.io/library/python:3.9.18-alpine    0.1s',
          '=&amp;gt; [auth] library/alpine:pull token for registry-1.docker.io              0.0s',
          '[+] Building 0.3s (3/5)                                          docker:default',
          '=&amp;gt; [internal] load build definition from Dockerfile                       0.1s',
          '=&amp;gt; =&amp;gt; transferring dockerfile: 357B                                       0.0s',
          '=&amp;gt; [internal] load .dockerignore                                          0.1s',
          '=&amp;gt; =&amp;gt; transferring context: 2B                                            0.0s',
          '=&amp;gt; [internal] load metadata for docker.io/library/alpine:3.18.3           0.2s',
          '=&amp;gt; [internal] load metadata for docker.io/library/python:3.9.18-alpine    0.2s',
          '=&amp;gt; [auth] library/alpine:pull token for registry-1.docker.io              0.0s',
          '[+] Building 0.5s (4/6)                                          docker:default',
          '=&amp;gt; [internal] load build definition from Dockerfile                       0.1s',
          '=&amp;gt; =&amp;gt; transferring dockerfile: 357B                                       0.0s',
          '=&amp;gt; [internal] load .dockerignore                                          0.1s',
          '=&amp;gt; =&amp;gt; transferring context: 2B                                            0.0s',
          '=&amp;gt; [internal] load metadata for docker.io/library/alpine:3.18.3           0.4s',
          '...',
          '=&amp;gt; exporting to image                                                     0.1s',
          '=&amp;gt; =&amp;gt; exporting layers                                                    0.1s',
          '=&amp;gt; =&amp;gt; writing image sha256:8a22819145c6fee17e138e818610ccf46d7e13c786825  0.0s',
          '=&amp;gt; =&amp;gt; naming to docker.io/maximofn/multistagebuild:alpine-3.18.3          0.0s',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>La ejecutamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">--</span><span class="n">rm</span> <span class="o">--</span><span class="n">name</span> <span class="n">multi_stage_build</span> <span class="n">maximofn</span><span class="o">/</span><span class="n">multistagebuild</span><span class="p">:</span><span class="n">alpine</span><span class="o">-</span><span class="mf">3.18.3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hello from Alpine!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>La imagen <code>maximofn/multistagebuild:alpine-3.18.3</code> sólo pesa 13.6 MB</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Diferencia entre RUN, CMD y ENTRYPOINT">Diferencia entre RUN, CMD y ENTRYPOINT<a class="anchor-link" href="#Diferencia entre RUN, CMD y ENTRYPOINT"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 61" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="RUN">RUN<a class="anchor-link" href="#RUN"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 62" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El comando <code>RUN</code> es el más sencillo, simplemente ejecuta un comando en el momento de la compilación de la imagen. Por ejemplo, si queremos instalar un paquete en la imagen, lo hacemos mediante <code>RUN</code>.</p>
      <p>Por tanto, es importante, <code>RUN</code> se ejecuta en el momento de la compilación de la imagen, no cuando se ejecuta el contenedor</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="CMD">CMD<a class="anchor-link" href="#CMD"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 63" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El comando <code>CMD</code> es el comando que se ejecuta cuando se ejecuta el contenedor. Por ejemplo, si queremos que el contenedor ejecute un comando cuando se ejecute, lo hacemos mediante <code>CMD</code>. Por ejemplo, si tenemos una aplicación de python en un contenedor, con <code>CMD</code> podemos indicarle que cuando se ejecute el contenedor ejecute la aplicación de python.</p>
      <p>De esta manera, cuando se levante el contenedor, se ejecutará la aplicación de Python. Es decir, si hacemos <code>docker run &#x3C;image&#x3E;</code> se ejecutará la aplicación de Python. Pero <code>CMD</code> nos permite sobreescribir el comando que se ejecuta cuando se levanta el contenedor, por ejemplo, si hacemos <code>docker run &#x3C;image&#x3E; bash</code> se ejecutará <code>bash</code> en vez de la aplicación de Python.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="ENTRYPOINT">ENTRYPOINT<a class="anchor-link" href="#ENTRYPOINT"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 64" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El comando <code>ENTRYPOINT</code> es similar al comando <code>CMD</code>, pero con una diferencia: y es que <code>ENTRYPOINT</code> no está pensado para sobreescribirse. Es decir, si tenemos una aplicación de Python en un contenedor, con <code>ENTRYPOINT</code> podemos indicarle que cuando se ejecute el contenedor ejecute la aplicación de Python. Pero si hacemos <code>docker run &#x3C;image&#x3E; bash</code> se ejecutará la aplicación de Python, no <code>bash</code>.</p>
      <p>Un uso muy común de <code>ENTRYPOINT</code> es cuando queremos que el contenedor sea un ejecutable, por ejemplo, si queremos que el contenedor sea un ejecutable de una versión de Python que no tenemos en nuestro host, porque por ejemplo queremos probar la nueva versión de Python que ha salido podemos hacer</p>
      <div class='highlight'><pre><code class="language-Dockerfile">FROM python:3.9.18-alpine
      ENTRYPOINT ["python3"]</code></pre></div>
      <p>De esta manera, cuando se levante el contenedor, se ejecutará Python. Es decir, si hacemos <code>docker run &#x3C;image&#x3E;</code> se ejecutará Python. Pero <code>ENTRYPOINT</code> nos permite sobreescribir el comando que se ejecuta cuando se levanta el contenedor, por ejemplo, si hacemos <code>docker run &#x3C;image&#x3E; myapp.py</code> se ejecutará <code>python3 myapp.py</code> dentro del contenedor. Así podemos probar nuestra aplicación de Python en la nueva versión de Python</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Cambios en un contenedor">Cambios en un contenedor<a class="anchor-link" href="#Cambios en un contenedor"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 65" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Con <code>docker diff</code> podemos ver las diferencias que hay entre el contenedor y la imagen, lo que es lo mismo, la diferencia en el contenedor desde que se creó hasta ahora</p>
      <p>Vamos a correr un contenedor y dentro creamos un archivo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">--</span><span class="n">rm</span> <span class="o">-</span><span class="n">it</span> <span class="o">--</span><span class="n">name</span> <span class="n">ubuntu</span><span class="o">-</span><span class="mf">20.04</span> <span class="n">ubuntu</span><span class="p">:</span><span class="mf">20.04</span> <span class="n">bash</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'root@895a19aef124:/# touch file.txt',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora podemos ver la diferencia</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">diff</span> <span class="n">ubuntu</span><span class="o">-</span><span class="mf">20.04</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'C /root',
          'A /root/.bash_history',
          'A /file.txt',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p><code>A</code> significa que se ha añadido, <code>C</code> significa que se ha cambiado y <code>D</code> significa que se ha borrado</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Docker en Docker">Docker en Docker<a class="anchor-link" href="#Docker en Docker"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 66" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Supongamos que tenemos contenedores que necesitan levantar o apagar otros contenedores. Esto se logra de la siguiente manera</p>
      <p>Dado que en Linux todo es un archivo y el host se comunica con Docker mediante un socket. Por lo que para Linux, ese socket es un archivo. Así que si le montamos ese socket como un archivo al contenedor, podrá hablar con Docker</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primero vamos a montar un contenedor con Ubuntu</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">d</span> <span class="o">--</span><span class="n">name</span> <span class="n">ubuntu</span> <span class="n">ubuntu</span><span class="p">:</span><span class="n">latest</span> <span class="n">tail</span> <span class="o">-</span><span class="n">f</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">null</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '144091e4a3325c9068064ff438f8865b40f944af5ce649c7156ca55a3453e423',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a montar el contenedor que va a poder hablar con Docker montando la carpeta <code>/var/run/docker.sock</code></p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">$ docker run -it --rm --name main -v /var/run/docker.sock:/var/run/docker.sock docker:19.03.12<br>/ # </code></pre></div>
            </section>
      <p>Nos hemos metido dentro de un contenedor, y si dentro ejecutamos <code>docker ps</code></p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash"># docker ps<br>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES<br>9afb778d6c20        docker:19.03.12     "docker-entrypoint.s…"   3 seconds ago       Up 2 seconds                            main<br>144091e4a332        ubuntu:latest       "tail -f /dev/null"      19 seconds ago      Up 18 seconds                           ubuntu</code></pre></div>
            </section>
      <p>Como podemos ver, dentro de Docker podemos ver los contenedores del host</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos correr un nuevo contenedor</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash"># docker run -d --name ubuntu_from_main ubuntu:latest tail -f /dev/null<br>362654a72bb0fb047c13968707a6f16b87fed7ce051eb5c1a146b15828589a1a<br>/ #</code></pre></div>
            </section>
      <p>Y si volvemos a ver los contenedores</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash"># docker ps<br>CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES<br>362654a72bb0        ubuntu:latest       "tail -f /dev/null"      3 seconds ago        Up 3 seconds                            ubuntu_from_main<br>9afb778d6c20        docker:19.03.12     "docker-entrypoint.s…"   About a minute ago   Up About a minute                       main<br>144091e4a332        ubuntu:latest       "tail -f /dev/null"      2 minutes ago        Up About a minute                       ubuntu</code></pre></div>
            </section>
      <p>Pero si ahora ejecutamos una nueva terminal del host, veremos el contenedor creado desde dentro del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">docker</span> <span class="n">ps</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE             COMMAND                  CREATED              STATUS              PORTS     NAMES',
          '362654a72bb0   ubuntu:latest     &quot;tail -f /dev/null&quot;      About a minute ago   Up About a minute             ubuntu_from_main',
          '9afb778d6c20   docker:19.03.12   &quot;docker-entrypoint.s…&quot;   3 minutes ago        Up 3 minutes                  main',
          '144091e4a332   ubuntu:latest     &quot;tail -f /dev/null&quot;      3 minutes ago        Up 3 minutes                  ubuntu',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Todo lo que hagamos desde el contenedor <code>main</code> se verá reflejado en el host</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Esto tiene la ventaja de que podemos instalar programas en un contenedor que tiene acceso al host para no tener que instalarlos en el host. Por ejemplo <a href="https://github.com/wagoodman/dive" target="_blank" rel="nofollow noreferrer">dive</a> es una herramienta para explorar contenedores, pero si no la quieres instalar en el host la puedes instalar en un contenedor con acceso al host, así desde ese contenedor <code>main</code> puedes explorar el resto de contenedores sin tener que instalarla en el host</p>
      </section>







    </div>

  </section>

</PostLayout>
