---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Bash scripting';
const end_url = 'bash-scripting';
const description = 'Feel like an old school programmer üêß with this post about bash scripting.';
const keywords = 'bash, scripting, linux, old school, terminal';
const languaje = 'EN';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/bash-scripting.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=520
    image_height=245
    image_extension=webp
    article_date=2023-02-01+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Folder-with-scripts"><h2>Folder with scripts</h2></a>
      <a class="anchor-link" href="#First-script"><h2>First script</h2></a>
      <a class="anchor-link" href="#Specification-of-the-execution-binary"><h3>Specification of the execution binary</h3></a>
      <a class="anchor-link" href="#Comments-in-bash-scripts"><h3>Comments in bash scripts</h3></a>
      <a class="anchor-link" href="#Print-on-the-screen-with-the-command-echo."><h3>Print on the screen with the command <code>echo</code>.</h3></a>
      <a class="anchor-link" href="#Variable-declaration"><h2>Variable declaration</h2></a>
      <a class="anchor-link" href="#Scope-of-variables"><h3>Scope of variables</h3></a>
      <a class="anchor-link" href="#Export-of-variables"><h4>Export of variables</h4></a>
      <a class="anchor-link" href="#Types-of-operators"><h2>Types of operators</h2></a>
      <a class="anchor-link" href="#Arguments-step"><h2>Arguments step</h2></a>
      <a class="anchor-link" href="#Execute-commands-and-save-them-in-a-variable"><h2>Execute commands and save them in a variable</h2></a>
      <a class="anchor-link" href="#Debugging"><h2>Debugging</h2></a>
      <a class="anchor-link" href="#Obtain-user-information"><h2>Obtain user information</h2></a>
      <a class="anchor-link" href="#Get-information-using-the-echo-and-read-commands"><h3>Get information using the <code>echo</code> and <code>read</code> commands</h3></a>
      <a class="anchor-link" href="#Get-information-only-by-read-command"><h3>Get information only by <code>read</code> command</h3></a>
      <a class="anchor-link" href="#Validate-user-information"><h2>Validate user information</h2></a>
      <a class="anchor-link" href="#If-else"><h2>If else</h2></a>
      <a class="anchor-link" href="#Conditional-expressions"><h2>Conditional expressions</h2></a>
      <a class="anchor-link" href="#case-statement"><h2><code>case</code> statement</h2></a>
      <a class="anchor-link" href="#Arrays"><h2>Arrays</h2></a>
      <a class="anchor-link" href="#Loop-for"><h2>Loop <code>for</code></h2></a>
      <a class="anchor-link" href="#while-loop"><h2><code>while</code> loop</h2></a>
      <a class="anchor-link" href="#Flow-control-with-break-and-%60continue"><h2>Flow control with <code>break</code> and `continue</h2></a>
      <a class="anchor-link" href="#Functions"><h2>Functions</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Bash-scripting">Bash scripting<a class="anchor-link" href="#Bash-scripting"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 25" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Folder-with-scripts">Folder with scripts<a class="anchor-link" href="#Folder-with-scripts"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 26" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>This notebook has been automatically translated to make it accessible to more people, please let me know if you see any typos.</p>
      <p>To make this post we are going to create a folder where we are going to save all the scripts</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>scripts_bash',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h2 id="First-script">First script<a class="anchor-link" href="#First-script"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 27" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Specification-of-the-execution-binary">Specification of the execution binary<a class="anchor-link" href="#Specification-of-the-execution-binary"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 28" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In linux you can indicate with which program to execute a file by putting in the first line <code>#!&lt;binary path&gt;</code>, for example, if we create a <code>.py</code> we can indicate that it has to be executed with python by putting in the first line <code>#!/usr/bin/python3</code>. In our case, as we are making a terminal script we put in the first line <code>#!/bin/bash</code>.</p>
      <p>Now if the file is given execute permissions, it can be executed directly without specifying the program with which it has to be executed. That is, the <code>.py</code> no longer needs to be executed via <code>python script.py</code>, but can be executed via <code>.script.py</code>. In our case, instead of running the file via <code>bash script.sh</code> we can run it via <code>./script.sh</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Comments-in-bash-scripts">Comments in bash scripts<a class="anchor-link" href="#Comments-in-bash-scripts"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 29" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we want to enter a comment it would be enough to start the line with <code>#</code>.</p>
      <div class="highlight"><pre><span></span><span class="c1"># This is a one-line comment</span>
      </pre></div>
      <p>If we want to enter several lines of comments we have to start with <code>: '</code> and end with <code>'</code>.</p>
      <div class="highlight"><pre><span></span>:<span class="w"> </span><span class="err">'</span>
      This<span class="w"> </span>is<span class="w"> </span>a<span class="w"> </span>multi-line<span class="w"> </span>commentary
      which<span class="w"> </span>extends<span class="w"> </span>across<span class="w"> </span>several<span class="w"> </span>lines.
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Print-on-the-screen-with-the-command-echo.">Print on the screen with the command <code>echo</code>.<a class="anchor-link" href="#Print-on-the-screen-with-the-command-echo."><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 30" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we want to print on the screen we use the command <code>echo</code> followed by what we want to print.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>mkdir<span class="w"> </span>scripts_bash',
          '</span><span class="o">%%writefile</span> scripts_bash/01_primerScript.sh',
          '<span class="ch">#!/bin/bash</span>',
          '<span class="c1"># Comentario de una sola linea</span>',
          '<span class="p">:</span> <span class="s1">\'</span>',
          '<span class="n">Comentario</span> <span class="n">de</span> <span class="n">varias</span>',
          '<span class="n">lineas</span>',
          '<span class="s1">\'</span>',
          '<span class="n">echo</span> <span class="s2">"Hola mundo"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/01_primerScript.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We give execution permissions and run the script</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/01_primerScript.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/01_primerScript.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola mundo',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Variable-declaration">Variable declaration<a class="anchor-link" href="#Variable-declaration"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 31" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>There are two types of variables, <code>user variables</code> and <code>environment variables</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To create a variable just declare it by entering the name you want, followed by <code>=</code> and the value</p>
      <p>To print the value of a variable with <code>echo</code>, you have to reference it by `$<variable name="">.</variable></p>
      <div class="highlight"><pre><span></span><span class="nb">echo</span><span class="w"> </span><span class="s2">"Variable = </span>$<span class="s2">&lt;variable name&gt;"</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"Variable = </span>$<span class="s2">&lt;variable name&gt;</span>
      </pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/02_variables.sh',
          '<span class="ch">#!/bin/bash</span>',
          '<span class="n">opcion</span><span class="o">=</span><span class="mi">1</span>',
          '<span class="n">nombre</span><span class="o">=</span><span class="s2">"Juan"</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Opcion: $opcion"</span>',
          '<span class="n">echo</span> <span class="s2">"Nombre: $nombre"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/02_variables.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/02_variables.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/02_variables.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Opcion: 1',
          'Nombre: Juan',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Scope-of-variables">Scope of variables<a class="anchor-link" href="#Scope-of-variables"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 32" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The variables created are only accessible from within the script, i.e., their scope is within the script.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Export-of-variables">Export of variables<a class="anchor-link" href="#Export-of-variables"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 33" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can export variables so that they can be accessed by other scripts, to do this we first export the variable using the <code>export</code> command and execute call, inside the script, the second script to which we want to pass the variable to</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/02_variables.sh',
          '<span class="ch">#!/bin/bash</span>',
          '<span class="n">opcion</span><span class="o">=</span><span class="mi">1</span>',
          '<span class="n">nombre</span><span class="o">=</span><span class="s2">"Juan"</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Opcion: $opcion"</span>',
          '<span class="n">echo</span> <span class="s2">"Nombre: $nombre"</span>',
          '',
          '<span class="c1"># Exportar variable nombre</span>',
          '<span class="n">echo</span> <span class="s2">"export nombre=$nombre"</span>',
          '<span class="n">export</span> <span class="n">nombre</span>',
          '',
          '<span class="c1"># Ejecutar script de importacion</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Ejecutando script de importacion"</span>',
          '<span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">02</span><span class="n">_variables_importacion</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/02_variables.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/02_variables_importacion.sh',
          '<span class="ch">#!/bin/bash</span>',
          '<span class="n">echo</span> <span class="s2">"Nombre importado: $nombre"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/02_variables_importacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/02_variables.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/02_variables_importacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/02_variables.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Opcion: 1',
          'Nombre: Juan',
          'export nombre=Juan',
          'Ejecutando script de importacion',
          'Nombre importado: Juan',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The second script has to be executed inside the first script. If we now execute the second script we do not have the variable</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/02_variables_importacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/02_variables_importacion.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Nombre importado: ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want it to be accessible from any second script, without having to run it inside the first scritp, we have to export the variable to an environment variable</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Types-of-operators">Types of operators<a class="anchor-link" href="#Types-of-operators"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 34" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>All possible operators are shown below</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/03_operadores.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="c1"># Asignaci√≥n de variables</span>',
          '<span class="n">x</span><span class="o">=</span><span class="mi">10</span>',
          '<span class="n">y</span><span class="o">=</span><span class="mi">20</span>',
          '<span class="n">echo</span> <span class="s2">"x = $x"</span>',
          '<span class="n">echo</span> <span class="s2">"y = $y"</span>',
          '',
          '<span class="c1"># Operadores aritm√©ticos</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Operadores aritm√©ticos"</span>',
          '<span class="n">echo</span> <span class="s2">"x + y = $((x + y))"</span>',
          '<span class="n">echo</span> <span class="s2">"x - y = $((x - y))"</span>',
          '<span class="n">echo</span> <span class="s2">"x * y = $((x * y))"</span>',
          '<span class="n">echo</span> <span class="s2">"x / y = $((x / y))"</span>',
          '<span class="n">echo</span> <span class="s2">"x % y = $((x % y))"</span>',
          '',
          '<span class="c1"># Operadores de comparaci√≥n</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Operadores de comparaci√≥n"</span>',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$x"</span> <span class="o">-</span><span class="n">eq</span> <span class="s2">"$y"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"x es igual a y"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"x no es igual a y"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$x"</span> <span class="o">-</span><span class="n">ne</span> <span class="s2">"$y"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"x no es igual a y"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"x es igual a y"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$x"</span> <span class="o">-</span><span class="n">lt</span> <span class="s2">"$y"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"x es menor que y"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"x no es menor que y"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$x"</span> <span class="o">-</span><span class="n">gt</span> <span class="s2">"$y"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"x es mayor que y"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"x no es mayor que y"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="c1"># Operadores de cadena</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Operadores de cadena"</span>',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$a"</span> <span class="o">=</span> <span class="s2">"$b"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"a es igual a b"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"a no es igual a b"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$a"</span> <span class="o">!=</span> <span class="s2">"$b"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"a no es igual a b"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"a es igual a b"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">z</span> <span class="s2">"$a"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"a es una cadena vac√≠a"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"a no es una cadena vac√≠a"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"$a"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"a no es una cadena vac√≠a"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"a es una cadena vac√≠a"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="c1"># Operadores de archivo</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Operadores de archivo"</span>',
          '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"/path/to/file"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"El archivo existe"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"El archivo no existe"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">f</span> <span class="s2">"/path/to/file"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"Es un archivo regular"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"No es un archivo regular"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">d</span> <span class="s2">"/path/to/dir"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"Es un directorio"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"No es un directorio"</span>',
          '<span class="n">fi</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/03_operadores.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/03_operadores.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/03_operadores.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'x = 10',
          'y = 20',
          'Operadores aritm√©ticos',
          'x + y = 30',
          'x - y = -10',
          'x * y = 200',
          'x / y = 0',
          'x % y = 10',
          'Operadores de comparaci√≥n',
          'x no es igual a y',
          'x no es igual a y',
          'x es menor que y',
          'x no es mayor que y',
          'Operadores de cadena',
          'a es igual a b',
          'a es igual a b',
          'a es una cadena vac√≠a',
          'a es una cadena vac√≠a',
          'Operadores de archivo',
          'El archivo no existe',
          'No es un archivo regular',
          'No es un directorio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Arguments-step">Arguments step<a class="anchor-link" href="#Arguments-step"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 35" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Arguments can be passed to the scripts, once inside the script we can make use of them as follows</p>
      <ul>
      <li>By argument number: in this case they will be named as <code>$1</code>, <code>$2</code>, etc. But in case the number of arguments is greater than 9, that is to say that more than 2 digits are needed to name it, in this case the number will be identified between braces, <code>${1}</code>, <code>${2}</code>, ..., ${10}, ${11}, etc.</li>
      <li>If the $0 argument is called, we are getting the file name.</li>
      <li>If we want all the arguments we do it with <code>$*</code>.</li>
      <li>If what we want is the number of arguments we have, we obtain it by means of <code>$#</code>.</li>
      <li>If we want to saner the output of the last command, we can know it by <code>$?</code>.</li>
      <li>If we want to know the <code>PID</code> of the script, we can know it through <code>$$</code>.</li>
      <li>We can replace the value of a string in an argument by <code>${opening_brace}&lt;argument index&gt;/string to be replaced/new string{closing_brace}</code>, i.e. if we have <code>${opening_brace}1/hello/hello{closing_brace}</code> it will replace the word <code>hello</code> with the word <code>hello</code> in argument 1.</li>
      <li>However, if we use <code>${opening_brace}&lt;argument index&gt;/#string to be replaced/new string{closing_brace}</code>, it will only replace the string in the argument if this argument starts with that string.</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/04_argumentos.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="c1"># Pasos de argumentos simples</span>',
          '<span class="n">echo</span> <span class="s2">"Primer argumento: $1"</span>',
          '<span class="n">echo</span> <span class="s2">"Segundo argumento: $2"</span>',
          '<span class="n">echo</span> <span class="s2">"Tercer argumento: $3"</span>',
          '',
          '<span class="c1"># Accediendo a todos los argumentos</span>',
          '<span class="n">echo</span> <span class="s2">"Todos los argumentos: $*"</span>',
          '',
          '<span class="c1"># Accediendo al n√∫mero de argumentos</span>',
          '<span class="n">echo</span> <span class="s2">"N√∫mero de argumentos: $#"</span>',
          '',
          '<span class="c1"># Accediendo al nombre del script</span>',
          '<span class="n">echo</span> <span class="s2">"Nombre del script: $0"</span>',
          '',
          '<span class="c1"># Accediendo al c√≥digo de salida del √∫ltimo comando ejecutado</span>',
          '<span class="n">echo</span> <span class="s2">"C√≥digo de salida del √∫ltimo comando: $?"</span>',
          '',
          '<span class="c1"># Accediendo al PID del script</span>',
          '<span class="n">echo</span> <span class="s2">"PID del script: $$"</span>',
          '',
          '<span class="c1"># Accediendo a los argumentos con √≠ndices</span>',
          '<span class="n">echo</span> <span class="s2">"Argumento 3: $</span><span class="si">{3}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Argumento 2: $</span><span class="si">{2}</span><span class="s2">"</span>',
          '',
          '<span class="c1"># Accediendo a los argumentos con √≠ndices y longitud m√°xima</span>',
          '<span class="n">echo</span> <span class="s2">"Argumento 3 con longitud m√°xima de 2 caracteres: ${3:0:2}"</span>',
          '<span class="n">echo</span> <span class="s2">"Argumento 2 con longitud m√°xima de 3 caracteres: ${2:0:3}"</span>',
          '',
          '<span class="c1"># Reemplazando argumentos con √≠ndices y longitud m√°xima</span>',
          '<span class="n">echo</span> <span class="s2">"Reemplazando argumento 3: ${3/arg/ARG}"</span>',
          '<span class="n">echo</span> <span class="s2">"Reemplazando argumento{2/arg/ARG}"</span>',
          '',
          '<span class="c1"># Accediendo a los argumentos con √≠ndices y patrones de reemplazo</span>',
          '<span class="n">echo</span> <span class="s2">"Reemplazando patr√≥n en argumento 3: ${3/#tercer/TERCER}"</span>',
          '<span class="n">echo</span> <span class="s2">"Reemplazando patr√≥n en argumento 2: ${2/#arg/ARG}"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/04_argumentos.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nv">arg1</span><span class="o">=</span><span class="s2">"primer argumento"</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nv">arg2</span><span class="o">=</span><span class="s2">"segundo argumento"</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nv">arg3</span><span class="o">=</span><span class="s2">"tercer argumento"</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/04_argumentos.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/04_argumentos.sh<span class="w"> </span><span class="s2">"</span><span class="nv">$arg1</span><span class="s2">"</span><span class="w"> </span><span class="s2">"</span><span class="nv">$arg2</span><span class="s2">"</span><span class="w"> </span><span class="s2">"</span><span class="nv">$arg3</span><span class="s2">"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Primer argumento: primer argumento',
          'Segundo argumento: segundo argumento',
          'Tercer argumento: tercer argumento',
          'Todos los argumentos: primer argumento segundo argumento tercer argumento',
          'N√∫mero de argumentos: 3',
          'Nombre del script: ./scripts_bash/04_argumentos.sh',
          'C√≥digo de salida del √∫ltimo comando: 0',
          'PID del script: 11644',
          'Argumento 3: tercer argumento',
          'Argumento 2: segundo argumento',
          'Argumento 3 con longitud m√°xima de 2 caracteres: te',
          'Argumento 2 con longitud m√°xima de 3 caracteres: seg',
          'Reemplazando argumento 3: tercer ARGumento',
          'Reemplazando argumento 2: segundo ARGumento',
          'Reemplazando patr√≥n en argumento 3: tercer argumento',
          'Reemplazando patr√≥n en argumento 2: segundo argumento',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Execute-commands-and-save-them-in-a-variable">Execute commands and save them in a variable<a class="anchor-link" href="#Execute-commands-and-save-them-in-a-variable"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 36" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We have two ways of executing a command and saving its output in a variable</p>
      <ul>
      <li>Through variable=<code>command</code></li>
      <li>Through <code>variable=$$(command)</code>.</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/05_variables_comandos.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">path</span><span class="o">=</span><span class="err">$</span><span class="p">(</span><span class="n">pwd</span><span class="p">)</span>',
          '<span class="n">infokernel</span><span class="o">=</span><span class="err">`</span><span class="n">uname</span> <span class="o">-</span><span class="n">a</span><span class="err">`</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"El directorio actual es: $path"</span>',
          '<span class="n">echo</span> <span class="s2">"La informaci√≥n del kernel es: $infokernel"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/05_variables_comandos.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/05_variables_comandos.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/05_variables_comandos.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'El directorio actual es: /home/wallabot/Documentos/web/portafolio/posts',
          'La informaci√≥n del kernel es: Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Debugging">Debugging<a class="anchor-link" href="#Debugging"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 37" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>There are two ways to be able to debug in bash scripting</p>
      <ul>
      <li>Using <code>-v</code>: Detailed line-by-line script execution</li>
      <li>Using <code>-x</code>: Display of script information</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>bash<span class="w"> </span>-v<span class="w"> </span>scripts_bash/05_variables_comandos.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '#!/bin/bash',
          'path=$(pwd)',
          'infokernel=`uname -a`',
          'echo "El directorio actual es: $path"',
          'El directorio actual es: /home/wallabot/Documentos/web/portafolio/posts',
          'echo "La informaci√≥n del kernel es: $infokernel"',
          'La informaci√≥n del kernel es: Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>bash<span class="w"> </span>-x<span class="w"> </span>scripts_bash/05_variables_comandos.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '++ pwd',
          '+ path=/home/wallabot/Documentos/web/portafolio/posts',
          '++ uname -a',
          '+ infokernel=\'Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux\'',
          '+ echo \'El directorio actual es: /home/wallabot/Documentos/web/portafolio/posts\'',
          'El directorio actual es: /home/wallabot/Documentos/web/portafolio/posts',
          '+ echo \'La informaci√≥n del kernel es: Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux\'',
          'La informaci√≥n del kernel es: Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Obtain-user-information">Obtain user information<a class="anchor-link" href="#Obtain-user-information"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 38" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Get-information-using-the-echo-and-read-commands">Get information using the <code>echo</code> and <code>read</code> commands<a class="anchor-link" href="#Get-information-using-the-echo-and-read-commands"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 39" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We have two ways to obtain user information</p>
      <ol>
      <li>With the command <code>echo -n</code>. With the flag <code>-n</code> we indicate that we do not want a line break to be printed at the end of the <code>echo</code>. For example, <code>echo -n "Enter data:"</code>, with this command we ask for a data and the cursor will stay on the same line, there will be no line break.</li>
      </ol>
      <p>Using the <code>read</code> command. With this command the program will wait for the user to enter data ending with a line break. What has been entered will be stored in the variable <code>REPLY</code>. If you want the variable where the data entered by the user is saved to have another name, you must enter <code>read [variable]</code>, for example the command <code>read myVariable</code>, will save the user's data in the variable <code>myVariable</code>.
       Using the command <code>$REPLY</code> or <code>$[variable]</code> we access the data entered by the user.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/06_leer_informacion.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">option</span><span class="o">=</span><span class="mi">0</span>',
          '<span class="n">backupName</span><span class="o">=</span><span class="s2">""</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Programa de utilidades"</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar una opci√≥n: "</span>',
          '<span class="n">read</span>',
          '<span class="n">option</span><span class="o">=</span><span class="err">$</span><span class="n">REPLY</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar un nombre: "</span>',
          '<span class="n">read</span> <span class="n">backupName</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Opci√≥n: $option, backupName: $backupName"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/06_leer_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As in a jupyter notebook I can't enter the data as it is requested, I enter it first in a <code>|</code> pipe.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/06_leer_informacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"1\nnombreprueba"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>./scripts_bash/06_leer_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Programa de utilidades',
          'Ingresar una opci√≥n: ',
          'Ingresar un nombre: ',
          'Opci√≥n: 1, backupName: nombreprueba',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Get-information-only-by-read-command">Get information only by <code>read</code> command<a class="anchor-link" href="#Get-information-only-by-read-command"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 40" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Another way to obtain information is to use only the <code>read</code> command, the syntax would be</p>
      <div class="highlight"><pre><span></span><span class="nb">read</span><span class="w"> </span>-p<span class="w"> </span><span class="s2">"Prompt message:"</span><span class="w"> </span><span class="o">[</span>variable<span class="o">]</span>.
      </pre></div>
      <p>The <code>-p</code> flag indicates that the <code>Hint prompt:</code> message will be displayed before waiting for the user to enter the data. If no variable name is specified, the data will be stored in the <code>REPLY</code> variable.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/06_leer_informacion.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">option</span><span class="o">=</span><span class="mi">0</span>',
          '<span class="n">backupName</span><span class="o">=</span><span class="s2">""</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Programa de utilidades"</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar una opci√≥n: "</span>',
          '<span class="n">read</span>',
          '<span class="n">option1</span><span class="o">=</span><span class="err">$</span><span class="n">REPLY</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar un nombre: "</span>',
          '<span class="n">read</span> <span class="n">backupName</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">p</span> <span class="s2">"Ingresar otra opci√≥n: "</span> <span class="n">option2</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Opci√≥n: $option1-$option2, backupName: $backupName"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/06_leer_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/06_leer_informacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"1\nnombreprueba\n2"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>./scripts_bash/06_leer_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Programa de utilidades',
          'Ingresar una opci√≥n: ',
          'Ingresar un nombre: ',
          'Opci√≥n: 1-2, backupName: nombreprueba',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Validate-user-information">Validate user information<a class="anchor-link" href="#Validate-user-information"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 41" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To validate the user's information it would be best to use regular expressions, here is a <a href="https://www.maximofn.com/en/regular-expressions//">post</a> where I explain them</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can also specify the number of characters we want the user to enter when using <code>read</code>, for this we use the <code>-n</code> flag, which, if not followed by a number, will wait until the user enters a line break, and if followed by a number, will wait until the user enters that number of characters.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/07_validar_informacion.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">option</span><span class="o">=</span><span class="mi">0</span>',
          '<span class="n">backupName</span><span class="o">=</span><span class="s2">""</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Programa de utilidades"</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar una opci√≥n: "</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">n1</span>',
          '<span class="n">option1</span><span class="o">=</span><span class="err">$</span><span class="n">REPLY</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar un nombre: "</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">n4</span> <span class="n">backupName</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">p</span> <span class="s2">"Ingresar otra opci√≥n: "</span> <span class="n">option2</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Opci√≥n: $option1-$option2, backupName: $backupName"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/07_validar_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/07_validar_informacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"1back2"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>./scripts_bash/07_validar_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Programa de utilidades',
          'Ingresar una opci√≥n: ',
          'Ingresar un nombre: ',
          'Opci√≥n: 1-2, backupName: back',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want to enter a confidential value, such as a key, we set the <code>-s</code> (security) flag. This way, when the user enters the data, it will not be printed in the console.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/07_validar_informacion.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">option</span><span class="o">=</span><span class="mi">0</span>',
          '<span class="n">backupName</span><span class="o">=</span><span class="s2">""</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Programa de utilidades"</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar una opci√≥n: "</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">n1</span>',
          '<span class="n">option1</span><span class="o">=</span><span class="err">$</span><span class="n">REPLY</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar un nombre: "</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">n4</span> <span class="n">backupName</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">p</span> <span class="s2">"Ingresar otra opci√≥n: "</span> <span class="n">option2</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">s</span> <span class="o">-</span><span class="n">p</span> <span class="s2">"Password: "</span> <span class="n">password</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Opci√≥n: $option1-$option2, backupName: $backupName, password: $password"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/07_validar_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/07_validar_informacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"1back2\n1234"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>./scripts_bash/07_validar_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Programa de utilidades',
          'Ingresar una opci√≥n: ',
          'Ingresar un nombre: ',
          'Opci√≥n: 1-2, backupName: back, password: 1234',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="If-else">If else<a class="anchor-link" href="#If-else"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 42" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The way to write <code>if</code>-<code>else</code> conditionals is:</p>
      <div class="highlight"><pre><span></span><span class="k">if</span><span class="w"> </span><span class="o">[[</span>condition<span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
      <span class="w">    </span>statement
      <span class="k">elif</span><span class="w"> </span><span class="o">[[</span>condition<span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
      <span class="w">    </span>statement
      <span class="k">else</span>
      <span class="w">    </span>statement
      <span class="k">fi</span>
      </pre></div>
      <p>It is important to emphasize that the conditions must be enclosed in two square brackets <code>[[]]</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/08_if_else.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="k">if</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"Verdadero"</span>',
          '<span class="k">elif</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"Verdadero"</span>',
          '<span class="k">else</span>',
          '    <span class="n">echo</span> <span class="s2">"Falso"</span>',
          '<span class="n">fi</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/08_if_else.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/08_if_else.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/08_if_else.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Falso',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's see how to create nested <code>if</code>s</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/08_if_else.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="k">if</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"Verdadero"</span>',
          '<span class="k">elif</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"Verdadero"</span>',
          '<span class="k">else</span>',
          '    <span class="k">if</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">4</span> <span class="p">]];</span> <span class="n">then</span>',
          '        <span class="n">echo</span> <span class="s2">"Verdadero pero falso"</span>',
          '    <span class="k">else</span>',
          '        <span class="n">echo</span> <span class="s2">"Totalmente falso"</span>',
          '    <span class="n">fi</span>',
          '<span class="n">fi</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/08_if_else.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/08_if_else.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/08_if_else.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Totalmente falso',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Conditional-expressions">Conditional expressions<a class="anchor-link" href="#Conditional-expressions"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 43" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We have already seen how to create <code>if</code>s, but it is necessary to explain how to create conditional expressions.</p>
      <p>If we are going to make comparisons between strings or strings</p>
      <table>
      <thead>
      <tr>
      <th>operation</th>
      <th>command</th>
      <th>example</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td>greater than</td>
      <td>`&gt;&gt;``</td>
      <td></td>
      <td><code>[[[ string1 &gt; string2 ]]</code></td>
      <td></td>
      </tr>
      <tr>
      <td>less than</td>
      <td><code>&lt;</code></td>
      <td></td>
      <td></td>
      <td></td>
      <td>[[[ string1 &lt; string2 ]]`</td>
      <td></td>
      </tr>
      <tr>
      <td>same as</td>
      <td><code>==</code></td>
      <td></td>
      <td></td>
      <td>[[[ string1 == string2 ]]`</td>
      <td></td>
      </tr>
      <tr>
      <td>same as</td>
      <td>`=``</td>
      <td><code>[[[[ string1 = string2 ]]</code></td>
      </tr>
      </tbody>
      </table>
      <p>empty string|<code>-z</code>||<code>[[ -z string ]]</code>|
         |non-empty string|<code>-n</code>|<code>[[ -n string ]]</code>||
         |||<code>[[[ string ]]</code>||||</p>
      <p>If what we are going to do is to make comparisons between numbers</p>
      <table>
      <thead>
      <tr>
      <th>operation</th>
      <th>command</th>
      <th>example</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td>greater than</td>
      <td><code>-gt</code></td>
      <td></td>
      <td><code>[[[ number1 -gt number2 ]]</code></td>
      </tr>
      </tbody>
      </table>
      <p>greater than or equal to|<code>-ge</code>||<code>[[[ numero1 -ge numero2 ]]</code>||
         |less than|<code>-lt</code>||<code>[[[ number1 -lt number2 ]]</code>||
         |less than or equal to|<code>-le</code>||<code>[[[ number1 -le number2 ]]</code>||
         |equal to|<code>-eq</code>|<code>[[[ number1 -eq number2 ]]</code>||
         |different than|``-ne<code>|</code>[[[ number1 -ne number2 ]]`||</p>
      <p>If we want to check files or directories</p>
      <table>
      <thead>
      <tr>
      <th>operation</th>
      <th>command</th>
      <th>example</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td>is a directory?</td>
      <td><code>-d</code></td>
      <td></td>
      <td><code>[[ -d &lt;dir&gt; ]]</code></td>
      <td></td>
      </tr>
      <tr>
      <td>is a file?</td>
      <td><code>-f</code></td>
      <td></td>
      <td><code>[[[ -f &lt;file&gt; ]]</code></td>
      </tr>
      <tr>
      <td>exists?</td>
      <td><code>-e</code></td>
      <td></td>
      <td><code>[[ -e &lt;file&gt; ]]</code> or <code>[[ -e &lt;dir&gt; ]]</code></td>
      <td></td>
      </tr>
      <tr>
      <td>is it readable?</td>
      <td><code>-r</code></td>
      <td><code>[[ -r &lt;file&gt; ]]</code></td>
      <td></td>
      </tr>
      <tr>
      <td>is it writable?</td>
      <td><code>-w</code></td>
      <td></td>
      <td><code>[[[ -w &lt;file&gt; ]]</code></td>
      </tr>
      <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>is executable?</td>
      <td><code>-x</code></td>
      <td></td>
      <td></td>
      <td>[[[ -x <file> ]]`</file></td>
      </tr>
      <tr>
      <td>is a link?</td>
      <td><code>-L</code></td>
      <td></td>
      <td><code>[[[ -L &lt;file&gt; ]]</code></td>
      </tr>
      <tr>
      <td>es has content?</td>
      <td><code>-s</code></td>
      <td></td>
      <td><code>[[ -s &lt;file&gt; ]]</code></td>
      </tr>
      <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>[[[ -O <file> ]]`</file></td>
      <td></td>
      </tr>
      <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>is owned by the group?</td>
      <td><code>-G</code></td>
      <td></td>
      <td><code>[[[ -G &lt;file&gt; ]]</code></td>
      </tr>
      <tr>
      <td>was modified?</td>
      <td><code>-N</code></td>
      <td></td>
      <td><code>[[[ -N &lt;file&gt; ]]</code></td>
      </tr>
      <tr>
      <td>file1 is newer than file2?</td>
      <td>``-nt`</td>
      <td></td>
      <td><code>[[[ &lt;file1&gt; -nt &lt;file2&gt; ]]</code></td>
      <td></td>
      </tr>
      <tr>
      <td>file1 is older than file2?</td>
      <td>``-ot`</td>
      <td></td>
      <td><code>[[[ &lt;file1&gt; -ot &lt;file2&gt; ]]</code></td>
      <td></td>
      </tr>
      <tr>
      <td>file1 is the same file as file2?</td>
      <td><code>-ef</code></td>
      <td></td>
      <td><code>[[[ &lt;file1&gt; -ef &lt;file2&gt; ]]</code></td>
      <td></td>
      </tr>
      <tr>
      <td>file1 is the same file as file2?</td>
      <td><code>-ef</code></td>
      <td></td>
      <td><code>[[[ &lt;file1&gt; -ef &lt;file2&gt; ]]</code></td>
      </tr>
      </tbody>
      </table>
      <p>If we want to compare joint conditions with <code>and</code>, <code>or</code> and <code>not</code>, we need to use <code>and</code>, <code>or</code> and <code>not</code>.</p>
      <table>
      <thead>
      <tr>
      <th>operation</th>
      <th>command</th>
      <th>example</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td>and</td>
      <td>`&amp;&amp;&amp;``</td>
      <td>``[[[ <condition1> &amp;&amp; <condition2> ]]`</condition2></condition1></td>
      <td></td>
      </tr>
      <tr>
      <td>or</td>
      <td></td>
      <td>`</td>
      <td></td>
      <td></td>
      <td>`</td>
      <td></td>
      <td>``[[[ <condition1></condition1></td>
      <td></td>
      <td><condition2> ]]`</condition2></td>
      </tr>
      </tbody>
      </table>
      <p>If we want to deny conditions</p>
      <table>
      <thead>
      <tr>
      <th>operation</th>
      <th>command</th>
      <th>example</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td>not</td>
      <td><code>!</code></td>
      <td></td>
      <td><code>[[ ! &lt;condition&gt; ]]</code></td>
      </tr>
      </tbody>
      </table>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/09_condicionales.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Comparando strings"</span>',
          '<span class="n">string1</span><span class="o">=</span><span class="s2">"hola"</span>',
          '<span class="n">string2</span><span class="o">=</span><span class="s2">"hola"</span>',
          '<span class="n">string3</span><span class="o">=</span><span class="s2">"chao"</span>',
          '<span class="n">string4</span><span class="o">=</span><span class="s2">""</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string1</span> <span class="o">&gt;</span> <span class="err">$</span><span class="n">string3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string1 es mayor que $string3"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string3</span> <span class="o">&lt;</span> <span class="err">$</span><span class="n">string1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string3 es menor que $string1"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string1</span> <span class="o">==</span> <span class="err">$</span><span class="n">string2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string1 es igual que $string2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string1</span> <span class="o">!=</span> <span class="err">$</span><span class="n">string3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string1 es diferente que $string3"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">z</span> <span class="err">$</span><span class="n">string4</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string4 es una cadena vac√≠a"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">n</span> <span class="err">$</span><span class="n">string3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string3 es una cadena no vac√≠a"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string3 es una cadena no vac√≠a"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Comparando n√∫meros"</span>',
          '<span class="n">number1</span><span class="o">=</span><span class="mi">10</span>',
          '<span class="n">number2</span><span class="o">=</span><span class="mi">10</span>',
          '<span class="n">number3</span><span class="o">=</span><span class="mi">20</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number3</span> <span class="o">-</span><span class="n">gt</span> <span class="err">$</span><span class="n">number1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number3 es mayor que $number1"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number3</span> <span class="o">-</span><span class="n">ge</span> <span class="err">$</span><span class="n">number2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number3 es mayor o igual que $number2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number1</span> <span class="o">-</span><span class="n">lt</span> <span class="err">$</span><span class="n">number3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number1 es menor que $number3"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number1</span> <span class="o">-</span><span class="n">le</span> <span class="err">$</span><span class="n">number2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number1 es menor o igual que $number2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number1</span> <span class="o">-</span><span class="n">eq</span> <span class="err">$</span><span class="n">number2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number1 es igual que $number2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number1</span> <span class="o">-</span><span class="n">ne</span> <span class="err">$</span><span class="n">number3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number1 es diferente que $number3"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Comparando archivos"</span>',
          '<span class="n">file1</span><span class="o">=</span><span class="s2">"$PWD/2021-02-11-Introduccion-a-Python.ipynb"</span>',
          '<span class="n">file2</span><span class="o">=</span><span class="s2">"$PWD/scripts_bash"</span>',
          '<span class="n">file3</span><span class="o">=</span><span class="s2">"$PWD/mi_paquete_de_python"</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">d</span> <span class="err">$</span><span class="n">file2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file2 es un directorio"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">f</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es un archivo"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">e</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 existe"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">r</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es legible"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">w</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es escribible"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">x</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es ejecutable"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">L</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es un link"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">s</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 tiene contenido"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">O</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es propiedad del usuario"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">G</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es propiedad del grupo"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">N</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 fue modificado"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">file1</span> <span class="o">-</span><span class="n">nt</span> <span class="err">$</span><span class="n">file2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es m√°s nuevo que $file2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">file1</span> <span class="o">-</span><span class="n">ot</span> <span class="err">$</span><span class="n">file2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es m√°s viejo que $file2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">file1</span> <span class="o">-</span><span class="n">ef</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es el mismo archivo que $file2"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Comparando expresiones con AND"</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">3</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"2 &gt; 1 y 3 &gt; 1"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Comparando expresiones con OR"</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"2 &gt; 1 o 1 &gt; 2"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Comparando expresiones con NOT"</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">!</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"1 &gt; 2 no es cierto"</span>',
          '<span class="n">fi</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/09_condicionales.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/09_condicionales.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/09_condicionales.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Comparando strings',
          'hola es mayor que chao',
          'chao es menor que hola',
          'hola es igual que hola',
          'hola es diferente que chao',
          ' es una cadena vac√≠a',
          'chao es una cadena no vac√≠a',
          'chao es una cadena no vac√≠a',
          'Comparando n√∫meros',
          '20 es mayor que 10',
          '20 es mayor o igual que 10',
          '10 es menor que 20',
          '10 es menor o igual que 10',
          '10 es igual que 10',
          '10 es diferente que 20',
          'Comparando archivos',
          '/home/wallabot/Documentos/web/portafolio/posts/scripts_bash es un directorio',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es un archivo',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb existe',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es legible',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es escribible',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb tiene contenido',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es propiedad del usuario',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es propiedad del grupo',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es m√°s viejo que /home/wallabot/Documentos/web/portafolio/posts/scripts_bash',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es el mismo archivo que /home/wallabot/Documentos/web/portafolio/posts/scripts_bash',
          'Comparando expresiones con AND',
          '2 &gt; 1 y 3 &gt; 1',
          'Comparando expresiones con OR',
          '2 &gt; 1 o 1 &gt; 2',
          'Comparando expresiones con NOT',
          '1 &gt; 2 no es cierto',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="case-statement"><code>case</code> statement<a class="anchor-link" href="#case-statement"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 44" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Next we are going to see how to write the typical <code>switch-case</code>, but in this case we only use <code>case</code>.</p>
      <div class="highlight"><pre><span></span><span class="k">case</span><span class="w"> </span><span class="nv">$variable</span><span class="w"> </span><span class="k">in</span>
      <span class="w">    </span>&lt;value1&gt;<span class="o">)</span><span class="w"> </span>&lt;sentence1&gt;<span class="p">;;</span>
      <span class="w">    </span>&lt;value2&gt;<span class="o">)</span><span class="w"> </span>&lt;sentence2&gt;<span class="p">;;</span>
      <span class="w">    </span>&lt;value3&gt;<span class="o">)</span><span class="w"> </span>&lt;sentence3&gt;<span class="p">;;</span>
      <span class="w">    </span>...
      <span class="w">    </span>*<span class="o">)</span><span class="w"> </span>&lt;sentence<span class="w"> </span>that<span class="w"> </span>does<span class="w"> </span>not<span class="w"> </span>meet<span class="w"> </span>any<span class="w"> </span>of<span class="w"> </span>the<span class="w"> </span>above&gt;.
      <span class="k">esac</span>
      </pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/10_case.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">variable</span><span class="o">=</span><span class="s2">"amarillo"</span>',
          '',
          '<span class="k">case</span> <span class="err">$</span><span class="n">variable</span> <span class="ow">in</span>',
          '    <span class="s2">"rojo"</span><span class="p">)</span> <span class="n">echo</span> <span class="s2">"Color rojo"</span><span class="p">;;</span>',
          '    <span class="s2">"verde"</span><span class="p">)</span> <span class="n">echo</span> <span class="s2">"Color verde"</span><span class="p">;;</span>',
          '    <span class="s2">"azul"</span><span class="p">)</span> <span class="n">echo</span> <span class="s2">"Color azul"</span><span class="p">;;</span>',
          '    <span class="o">*</span><span class="p">)</span> <span class="n">echo</span> <span class="s2">"Color desconocido"</span><span class="p">;;</span>',
          '<span class="n">esac</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/10_case.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/10_case.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/10_case.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Color desconocido',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Arrays">Arrays<a class="anchor-link" href="#Arrays"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 45" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's see how arrays behave in bash scripting</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/11_arrays.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">arrayNumeros</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span>',
          '<span class="n">arrayStrings</span><span class="o">=</span><span class="p">(</span><span class="s2">"hola"</span> <span class="s2">"chao"</span> <span class="s2">"adios"</span><span class="p">)</span>',
          '<span class="n">arrayMixto</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span> <span class="s2">"hola"</span> <span class="mi">2</span> <span class="s2">"chao"</span> <span class="mi">3</span> <span class="s2">"adios"</span><span class="p">)</span>',
          '<span class="n">arrayVacio</span><span class="o">=</span><span class="p">()</span>',
          '<span class="n">arrayRango</span><span class="o">=</span><span class="p">({</span><span class="n">A</span><span class="o">..</span><span class="n">Z</span><span class="p">})</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Arrays"</span>',
          '<span class="n">echo</span> <span class="s2">"Array de n√∫meros: $</span><span class="si">{arrayNumeros[*]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Array de strings: $</span><span class="si">{arrayStrings[*]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Array mixto: $</span><span class="si">{arrayMixto[*]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Array vac√≠o: $</span><span class="si">{arrayVacio[*]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Array de rango: $</span><span class="si">{arrayRango[*]}</span><span class="s2">"</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Accediendo a elementos"</span>',
          '<span class="n">echo</span> <span class="s2">"Primer elemento del array de n√∫meros: $</span><span class="si">{arrayNumeros[0]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Segundo elemento del array de strings: $</span><span class="si">{arrayStrings[1]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"√öltimo elemento del array de n√∫meros: $</span><span class="si">{arrayNumeros[-1]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Pen√∫ltimo elemento del array de strings: $</span><span class="si">{arrayStrings[-2]}</span><span class="s2">"</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Longitud de arrays"</span>',
          '<span class="n">echo</span> <span class="s2">"Longitud del array de n√∫meros: ${#arrayNumeros[*]}"</span>',
          '<span class="n">echo</span> <span class="s2">"Longitud del array de strings: ${#arrayStrings[*]}"</span>',
          '<span class="n">echo</span> <span class="s2">"Longitud del array mixto: ${#arrayMixto[*]}"</span>',
          '<span class="n">echo</span> <span class="s2">"Longitud del array vac√≠o: ${#arrayVacio[*]}"</span>',
          '<span class="n">echo</span> <span class="s2">"Longitud del array de rango: ${#arrayRango[*]}"</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">A√±adiendo y eliminando elementos"</span>',
          '<span class="n">arrayNumeros</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="mi">6</span>',
          '<span class="n">echo</span> <span class="s2">"A√±adiendo elemento al array de n√∫meros: $</span><span class="si">{arrayNumeros[*]}</span><span class="s2">"</span>',
          '<span class="n">unset</span> <span class="n">arrayStrings</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
          '<span class="n">echo</span> <span class="s2">"Eliminando elemento del array de strings: $</span><span class="si">{arrayStrings[*]}</span><span class="s2">"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/11_arrays.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/11_arrays.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/11_arrays.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Arrays',
          'Array de n√∫meros: 1 2 3 4 5',
          'Array de strings: hola chao adios',
          'Array mixto: 1 hola 2 chao 3 adios',
          'Array vac√≠o: ',
          'Array de rango: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z',
          'Accediendo a elementos',
          'Primer elemento del array de n√∫meros: 1',
          'Segundo elemento del array de strings: chao',
          '√öltimo elemento del array de n√∫meros: 5',
          'Pen√∫ltimo elemento del array de strings: chao',
          'Longitud de arrays',
          'Longitud del array de n√∫meros: 5',
          'Longitud del array de strings: 3',
          'Longitud del array mixto: 6',
          'Longitud del array vac√≠o: 0',
          'Longitud del array de rango: 26',
          'A√±adiendo y eliminando elementos',
          'A√±adiendo elemento al array de n√∫meros: 1 2 3 4 5 6',
          'Eliminando elemento del array de strings: hola adios',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Loop-for">Loop <code>for</code><a class="anchor-link" href="#Loop-for"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 46" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To use the <code>for</code> loop use the following syntax</p>
      <div class="highlight"><pre><span></span><span class="k">for</span><span class="w"> </span>&lt;variable&gt;<span class="w"> </span><span class="k">in</span><span class="w"> </span>&lt;array&gt;
      <span class="k">do</span>
      <span class="w">    </span>sentence
      <span class="k">done</span>
      </pre></div>
      <p>Let's see an example</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/12_for.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">arrayNumeros</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span>',
          '<span class="n">arrayStrings</span><span class="o">=</span><span class="p">(</span><span class="s2">"hola"</span> <span class="s2">"chao"</span> <span class="s2">"adios"</span><span class="p">)</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Iterar a trav√©s de un array de numeros"</span>',
          '<span class="k">for</span> <span class="n">numero</span> <span class="ow">in</span> <span class="err">$</span><span class="p">{</span><span class="n">arrayNumeros</span><span class="p">[</span><span class="o">*</span><span class="p">]}</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"N√∫mero: $numero"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a trav√©s de un array de strings"</span>',
          '<span class="k">for</span> <span class="n">string</span> <span class="ow">in</span> <span class="err">$</span><span class="p">{</span><span class="n">arrayStrings</span><span class="p">[</span><span class="o">*</span><span class="p">]}</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"String: $string"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a trav√©s de un array no declarado"</span>',
          '<span class="k">for</span> <span class="n">string</span> <span class="ow">in</span> <span class="s2">"Manolo"</span> <span class="s2">"Juan"</span> <span class="s2">"Pedro"</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"String: $string"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a trav√©s de un rango"</span>',
          '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">{</span><span class="mf">1..10</span><span class="p">}</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"N√∫mero: $i"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a trav√©s de un rango de manera cl√°sica"</span>',
          '<span class="k">for</span> <span class="p">((</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">))</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"N√∫mero: $i"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a trav√©s de un comando"</span>',
          '<span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="err">$</span><span class="p">(</span><span class="n">ls</span><span class="p">)</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"Archivo: $file"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a trav√©s de un directorio"</span>',
          '<span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="o">*</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"Archivo: $file"</span>',
          '<span class="n">done</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/12_for.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/12_for.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/12_for.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Iterar a trav√©s de un array de numeros',
          'N√∫mero: 1',
          'N√∫mero: 2',
          'N√∫mero: 3',
          'N√∫mero: 4',
          'N√∫mero: 5',
          'Iterar a trav√©s de un array de strings',
          'String: hola',
          'String: chao',
          'String: adios',
          'Iterar a trav√©s de un array no declarado',
          'String: Manolo',
          'String: Juan',
          'String: Pedro',
          'Iterar a trav√©s de un rango',
          'N√∫mero: 1',
          'N√∫mero: 2',
          'N√∫mero: 3',
          'N√∫mero: 4',
          'N√∫mero: 5',
          'N√∫mero: 6',
          'N√∫mero: 7',
          'N√∫mero: 8',
          'N√∫mero: 9',
          'N√∫mero: 10',
          'Iterar a trav√©s de un rango de manera cl√°sica',
          'N√∫mero: 1',
          'N√∫mero: 2',
          'N√∫mero: 3',
          'N√∫mero: 4',
          'N√∫mero: 5',
          'N√∫mero: 6',
          'N√∫mero: 7',
          'N√∫mero: 8',
          'N√∫mero: 9',
          'N√∫mero: 10',
          'Iterar a trav√©s de un comando',
          'Archivo: 2021-02-11-Introduccion-a-Python.ipynb',
          'Archivo: 2021-04-23-Calculo-matricial-con-Numpy.ipynb',
          'Archivo: 2021-06-15-Manejo-de-datos-con-Pandas.ipynb',
          'Archivo: 2022-09-12-Introduccion-a-la-terminal.ipynb',
          'Archivo: 2023-01-22-Docker.ipynb',
          'Archivo: 2023-XX-XX-Bash-scripting.ipynb',
          'Archivo: california_housing_train.csv',
          'Archivo: command-line-cheat-sheet.pdf',
          'Archivo: CSS.ipynb',
          'Archivo: Expresiones',
          'Archivo: regulares.ipynb',
          'Archivo: html_files',
          'Archivo: html.ipynb',
          'Archivo: introduccion_python',
          'Archivo: mi_paquete_de_python',
          'Archivo: movies.csv',
          'Archivo: movies.dat',
          'Archivo: notebooks_translated',
          'Archivo: __pycache__',
          'Archivo: scripts_bash',
          'Archivo: ssh.ipynb',
          'Archivo: test.ipynb',
          'Iterar a trav√©s de un directorio',
          'Archivo: 2021-02-11-Introduccion-a-Python.ipynb',
          'Archivo: 2021-04-23-Calculo-matricial-con-Numpy.ipynb',
          'Archivo: 2021-06-15-Manejo-de-datos-con-Pandas.ipynb',
          'Archivo: 2022-09-12-Introduccion-a-la-terminal.ipynb',
          'Archivo: 2023-01-22-Docker.ipynb',
          'Archivo: 2023-XX-XX-Bash-scripting.ipynb',
          'Archivo: california_housing_train.csv',
          'Archivo: command-line-cheat-sheet.pdf',
          'Archivo: CSS.ipynb',
          'Archivo: Expresiones regulares.ipynb',
          'Archivo: html_files',
          'Archivo: html.ipynb',
          'Archivo: introduccion_python',
          'Archivo: mi_paquete_de_python',
          'Archivo: movies.csv',
          'Archivo: movies.dat',
          'Archivo: notebooks_translated',
          'Archivo: __pycache__',
          'Archivo: scripts_bash',
          'Archivo: ssh.ipynb',
          'Archivo: test.ipynb',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="while-loop"><code>while</code> loop<a class="anchor-link" href="#while-loop"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 47" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To use the <code>while</code> loop use the following syntax</p>
      <div class="highlight"><pre><span></span><span class="k">while</span><span class="w"> </span>&lt;condition&gt;
      <span class="k">do</span>
      <span class="w">    </span>sentence
      <span class="k">done</span>
      </pre></div>
      <p>Let's see an example</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/13_while.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">numero</span><span class="o">=</span><span class="mi">1</span>',
          '<span class="k">while</span> <span class="p">[</span> <span class="err">$</span><span class="n">numero</span> <span class="o">-</span><span class="n">ne</span> <span class="mi">5</span> <span class="p">]</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"N√∫mero: $numero"</span>',
          '    <span class="n">numero</span><span class="o">=</span><span class="err">$</span><span class="p">((</span> <span class="n">numero</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">))</span>',
          '<span class="n">done</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/13_while.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/13_while.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/13_while.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'N√∫mero: 1',
          'N√∫mero: 2',
          'N√∫mero: 3',
          'N√∫mero: 4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Flow-control-with-break-and-%60continue">Flow control with <code>break</code> and `continue<a class="anchor-link" href="#Flow-control-with-break-and-%60continue"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 48" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can control the flow of a loop by using the words <code>break</code> and <code>continue</code>, let's see an example</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/14_control_de_flujo.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">numero</span><span class="o">=</span><span class="mi">1</span>',
          '<span class="k">while</span> <span class="p">[</span> <span class="err">$</span><span class="n">numero</span> <span class="o">-</span><span class="n">ne</span> <span class="mi">10</span> <span class="p">]</span>',
          '<span class="n">do</span>',
          '    <span class="k">if</span> <span class="p">[</span> <span class="err">$</span><span class="n">numero</span> <span class="o">-</span><span class="n">eq</span> <span class="mi">5</span> <span class="p">];</span> <span class="n">then</span>',
          '        <span class="n">numero</span><span class="o">=</span><span class="err">$</span><span class="p">((</span> <span class="n">numero</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">))</span>',
          '        <span class="n">echo</span> <span class="s2">"Saltando el n√∫mero 5"</span>',
          '        <span class="k">continue</span>',
          '    <span class="k">elif</span>',
          '        <span class="p">[</span> <span class="err">$</span><span class="n">numero</span> <span class="o">-</span><span class="n">eq</span> <span class="mi">8</span> <span class="p">];</span> <span class="n">then</span>',
          '        <span class="n">echo</span> <span class="s2">"Terminando el bucle"</span>',
          '        <span class="k">break</span>',
          '    <span class="n">fi</span> ',
          '    <span class="n">echo</span> <span class="s2">"N√∫mero: $numero"</span>',
          '    <span class="n">numero</span><span class="o">=</span><span class="err">$</span><span class="p">((</span> <span class="n">numero</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">))</span>',
          '<span class="n">done</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/14_control_de_flujo.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/14_control_de_flujo.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/14_control_de_flujo.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'N√∫mero: 1',
          'N√∫mero: 2',
          'N√∫mero: 3',
          'N√∫mero: 4',
          'Saltando el n√∫mero 5',
          'N√∫mero: 6',
          'N√∫mero: 7',
          'Terminando el bucle',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Functions">Functions<a class="anchor-link" href="#Functions"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 49" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The syntax for writing functions is</p>
      <div class="highlight"><pre><span></span>&lt;<span class="k">function</span><span class="w"> </span>name&gt;<span class="w"> </span><span class="o">(){opening_brace}</span>
      <span class="w">    </span>sentences
      <span class="o">{closing_brace}</span>
      </pre></div>
      <p>Here is an example</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/15_funciones.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">funcion</span> <span class="p">()</span> <span class="p">{</span>',
          '    <span class="n">echo</span> <span class="s2">"Soy una funci√≥n"</span>',
          '<span class="p">}</span>',
          '',
          '<span class="n">funcoionConParametros</span> <span class="p">()</span> <span class="p">{</span>',
          '    <span class="n">echo</span> <span class="s2">"Soy una funci√≥n con par√°metros"</span>',
          '    <span class="n">echo</span> <span class="s2">"Par√°metro 1: $1"</span>',
          '    <span class="n">echo</span> <span class="s2">"Par√°metro 2: $2"</span>',
          '<span class="p">}</span>',
          '',
          '<span class="n">funcion</span>',
          '<span class="n">funcoionConParametros</span> <span class="s2">"Hola"</span> <span class="s2">"Adi√≥s"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/15_funciones.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/15_funciones.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/15_funciones.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Soy una funci√≥n',
          'Soy una funci√≥n con par√°metros',
          'Par√°metro 1: Hola',
          'Par√°metro 2: Adi√≥s',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      






    </div>

  </section>

</PostLayout>
