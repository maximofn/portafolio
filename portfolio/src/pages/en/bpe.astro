---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'BPE tokenizer';
const end_url = 'bpe';
const description = 'üîç Discover the secret of tokenization! üîë I reveal you the mysteries of BPE (Byte Pair Encoding) tokenization, one of the most popular and effective methods to split text into tokens. Learn how to to tokenize with BPE! üíª Read my post and discover the tips and tricks to master tokenization with BPE! üìÑ';
const keywords = 'bpe tokenizer, byte pair encoding, tokenization, nlp, natural language processing, text processing';
const languaje = 'EN';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/BPE_tokenizer.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=770
    image_height=728
    image_extension=webp
    article_date=2024-06-04+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Training Algorithm"><h2>Training Algorithm</h2></a>
      <a class="anchor-link" href="#Tokenization"><h2>Tokenization</h2></a>
      <a class="anchor-link" href="#Token Viewer"><h2>Token Viewer</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Disclaimer: This post has been translated to English using a machine translation model. Please, let me know if you find any mistakes.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>BPE</code> (Byte Pair Encoding - byte pair encoding) algorithm is a data compression technique used to create a subword vocabulary from a text corpus. This algorithm is based on the frequency of byte pairs in the text. It gained popularity because it was used as a tokenizer by LLMs such as GPT, GPT-2, RoBERTa, BART, and DeBERTa.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Training Algorithm">Training Algorithm<a class="anchor-link" href="#Training Algorithm"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 5" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suppose we have a text corpus that only contains the following words <code>hug, pug, pun, bun, and hugs</code>, the first step is to create a vocabulary with all the characters present in the corpus, in our case it will be <code>b, g, h, n, p, s, u</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">corpus_words</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;hug&quot;</span><span class="p">,</span> <span class="s2">&quot;pug&quot;</span><span class="p">,</span> <span class="s2">&quot;pun&quot;</span><span class="p">,</span> <span class="s2">&quot;bun&quot;</span><span class="p">,</span> <span class="s2">&quot;hugs&quot;</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Concatenate all the words in the corpus</span>',
      '<span class="n">initial_corpus_tokens</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>',
      '<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">corpus_words</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">initial_corpus_tokens</span> <span class="o">+=</span> <span class="n">word</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Convert the concatenated string to a set of tokens to get unique tokens</span>',
      '<span class="n">initial_corpus_tokens</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">initial_corpus_tokens</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Corpus words: </span><span class="si">{</span><span class="n">corpus_words</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Initial corpus tokens: </span><span class="si">{</span><span class="n">initial_corpus_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Number of initial corpus tokens: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">initial_corpus_tokens</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Corpus words: [&#x27;hug&#x27;, &#x27;pug&#x27;, &#x27;pun&#x27;, &#x27;bun&#x27;, &#x27;hugs&#x27;]',
          'Initial corpus tokens: &#x7B;&#x27;p&#x27;, &#x27;n&#x27;, &#x27;u&#x27;, &#x27;s&#x27;, &#x27;h&#x27;, &#x27;g&#x27;, &#x27;b&#x27;&#x7D;',
          'Number of initial corpus tokens: 7',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now let's assume this is our corpus of sentences; it's a made-up corpus, it doesn't make sense.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">corpus</span> <span class="o">=</span> <span class="p">[</span>',
      '<span class="w">    </span><span class="s2">&quot;hug hug hug pun pun bun hugs&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="s2">&quot;hug hug pug pug pun pun hugs&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="s2">&quot;hug hug pug pug pun pun pun pun hugs&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="s2">&quot;pug pun pun pun bun hugs&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="s2">&quot;hug hug hug pun bun bun hugs&quot;</span><span class="p">,</span>',
      '<span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's count the number of times each word appears in the corpus, to check that what we put before is correct.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">num_hug</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="n">num_pug</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="n">num_pun</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="n">num_bun</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="n">num_hugs</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">sentence</span> <span class="ow">in</span> <span class="n">corpus</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">words</span> <span class="o">=</span> <span class="n">sentence</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">&quot;hug&quot;</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">num_hug</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span><span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">&quot;pug&quot;</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">num_pug</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span><span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">&quot;pun&quot;</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">num_pun</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span><span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">&quot;bun&quot;</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">num_bun</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span><span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">&quot;hugs&quot;</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">num_hugs</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Number of hug: </span><span class="si">{</span><span class="n">num_hug</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Number of pug: </span><span class="si">{</span><span class="n">num_pug</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Number of pun: </span><span class="si">{</span><span class="n">num_pun</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Number of bun: </span><span class="si">{</span><span class="n">num_bun</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Number of hugs: </span><span class="si">{</span><span class="n">num_hugs</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Number of hug: 10',
          'Number of pug: 5',
          'Number of pun: 12',
          'Number of bun: 4',
          'Number of hugs: 5',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Everything we had discussed is fine, we can continue.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's create a dictionary with the tokens of each word and the number of times they appear in the corpus</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dict_tokens_by_word_appearance</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="s2">&quot;hug&quot;</span><span class="p">:</span>',
      '<span class="w">        </span><span class="p">{</span>',
      '<span class="w">            </span><span class="s2">&quot;count&quot;</span><span class="p">:</span> <span class="n">num_hug</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;tokens&quot;</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">&quot;hug&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="p">},</span>',
      '<span class="w">    </span><span class="s2">&quot;pug&quot;</span><span class="p">:</span>',
      '<span class="w">        </span><span class="p">{</span>',
      '<span class="w">            </span><span class="s2">&quot;count&quot;</span><span class="p">:</span> <span class="n">num_pug</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;tokens&quot;</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">&quot;pug&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="p">},</span>',
      '<span class="w">    </span><span class="s2">&quot;pun&quot;</span><span class="p">:</span>',
      '<span class="w">        </span><span class="p">{</span>',
      '<span class="w">            </span><span class="s2">&quot;count&quot;</span><span class="p">:</span> <span class="n">num_pun</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;tokens&quot;</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">&quot;pun&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="p">},</span>',
      '<span class="w">    </span><span class="s2">&quot;bun&quot;</span><span class="p">:</span>',
      '<span class="w">        </span><span class="p">{</span>',
      '<span class="w">            </span><span class="s2">&quot;count&quot;</span><span class="p">:</span> <span class="n">num_bun</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;tokens&quot;</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">&quot;bun&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="p">},</span>',
      '<span class="w">    </span><span class="s2">&quot;hugs&quot;</span><span class="p">:</span>',
      '<span class="w">        </span><span class="p">{</span>',
      '<span class="w">            </span><span class="s2">&quot;count&quot;</span><span class="p">:</span> <span class="n">num_hugs</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;tokens&quot;</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">&quot;hugs&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="p">},</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">dict_tokens_by_word_appearance</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;hug&#x27;: &#x7B;&#x27;count&#x27;: 10, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;]&#x7D;,',
          '&#x27;pug&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;g&#x27;]&#x7D;,',
          '&#x27;pun&#x27;: &#x7B;&#x27;count&#x27;: 12, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;n&#x27;]&#x7D;,',
          '&#x27;bun&#x27;: &#x7B;&#x27;count&#x27;: 4, &#x27;tokens&#x27;: [&#x27;b&#x27;, &#x27;u&#x27;, &#x27;n&#x27;]&#x7D;,',
          '&#x27;hugs&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;s&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we are going to find the pair of consecutive tokens that appears most frequently in the dictionary</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dict_keys</span> <span class="o">=</span> <span class="n">dict_tokens_by_word_appearance</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="n">list_consecutive_tokens</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">key</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">dict_keys</span><span class="p">):</span>',
      '<span class="w">    </span><span class="c1"># Get the tokens of the word</span>',
      '<span class="w">    </span><span class="n">number_of_toneks_of_word</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">&quot;tokens&quot;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Get consecituve tokens</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">number_of_toneks_of_word</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>',
      '<span class="w">        </span><span class="c1"># Get consecutive tokens</span>',
      '<span class="w">        </span><span class="n">consecutive_tokens</span> <span class="o">=</span> <span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">&quot;tokens&quot;</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">&quot;tokens&quot;</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>',
      '<span class="w">        </span><span class="c1"># Append the consecutive tokens to the list the number of times the word appears</span>',
      '<span class="w">        </span><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">&quot;count&quot;</span><span class="p">]):</span>',
      '<span class="w">            </span><span class="n">list_consecutive_tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">consecutive_tokens</span><span class="p">)</span>',
      '<span class="c1"># Print the list of consecutive tokens</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;List of consecutive tokens: </span><span class="si">{</span><span class="n">list_consecutive_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Get consecutive tokens with maximum frequency</span>',
      '<span class="n">dict_consecutive_tokens</span> <span class="o">=</span> <span class="p">{}</span>',
      '<span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">list_consecutive_tokens</span><span class="p">:</span>',
      '<span class="w">    </span><span class="c1"># Check if the token is already in the dictionary</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">dict_consecutive_tokens</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Increment the count of the token</span>',
      '<span class="w">        </span><span class="n">dict_consecutive_tokens</span><span class="p">[</span><span class="n">token</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># If the token is not in the dictionary</span>',
      '<span class="w">    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Add the token to the dictionary</span>',
      '<span class="w">        </span><span class="n">dict_consecutive_tokens</span><span class="p">[</span><span class="n">token</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>',
      '<span class="c1"># Print the dictionary of consecutive tokens</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Dictionary of consecutive tokens: </span><span class="si">{</span><span class="n">dict_consecutive_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Get the consecutive token with maximum frequency</span>',
      '<span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
      '<span class="w">    </span><span class="c1"># Get the token with maximum frequency</span>',
      '<span class="w">    </span><span class="n">consecutive_token</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dict_consecutive_tokens</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">dict_consecutive_tokens</span><span class="o">.</span><span class="n">get</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Check if the token is already in the list of tokens</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="n">consecutive_token</span> <span class="ow">in</span> <span class="n">initial_corpus_tokens</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Remove token from the dictionary</span>',
      '<span class="w">        </span><span class="n">dict_consecutive_tokens</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">consecutive_token</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># If the token is not in the list of tokens</span>',
      '<span class="w">    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Assign the token to the max_consecutive_token</span>',
      '<span class="w">        </span><span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="n">consecutive_token</span>',
      '<span class="w">        </span><span class="k">break</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Print the consecutive token with maximum frequency</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Consecutive token with maximum frequency: </span><span class="si">{</span><span class="n">max_consecutive_token</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'List of consecutive tokens: [&#x27;hu&#x27;, &#x27;hu&#x27;, &#x27;hu&#x27;, &#x27;hu&#x27;, &#x27;hu&#x27;, &#x27;hu&#x27;, &#x27;hu&#x27;, &#x27;hu&#x27;, &#x27;hu&#x27;, &#x27;hu&#x27;, &#x27;ug&#x27;, &#x27;ug&#x27;, &#x27;ug&#x27;, &#x27;ug&#x27;, &#x27;ug&#x27;, &#x27;ug&#x27;, &#x27;ug&#x27;, &#x27;ug&#x27;, &#x27;ug&#x27;, &#x27;ug&#x27;, &#x27;pu&#x27;, &#x27;pu&#x27;, &#x27;pu&#x27;, &#x27;pu&#x27;, &#x27;pu&#x27;, &#x27;ug&#x27;, &#x27;ug&#x27;, &#x27;ug&#x27;, &#x27;ug&#x27;, &#x27;ug&#x27;, &#x27;pu&#x27;, &#x27;pu&#x27;, &#x27;pu&#x27;, &#x27;pu&#x27;, &#x27;pu&#x27;, &#x27;pu&#x27;, &#x27;pu&#x27;, &#x27;pu&#x27;, &#x27;pu&#x27;, &#x27;pu&#x27;, &#x27;pu&#x27;, &#x27;pu&#x27;, &#x27;un&#x27;, &#x27;un&#x27;, &#x27;un&#x27;, &#x27;un&#x27;, &#x27;un&#x27;, &#x27;un&#x27;, &#x27;un&#x27;, &#x27;un&#x27;, &#x27;un&#x27;, &#x27;un&#x27;, &#x27;un&#x27;, &#x27;un&#x27;, &#x27;bu&#x27;, &#x27;bu&#x27;, &#x27;bu&#x27;, &#x27;bu&#x27;, &#x27;un&#x27;, &#x27;un&#x27;, &#x27;un&#x27;, &#x27;un&#x27;, &#x27;hu&#x27;, &#x27;hu&#x27;, &#x27;hu&#x27;, &#x27;hu&#x27;, &#x27;hu&#x27;, &#x27;ug&#x27;, &#x27;ug&#x27;, &#x27;ug&#x27;, &#x27;ug&#x27;, &#x27;ug&#x27;, &#x27;gs&#x27;, &#x27;gs&#x27;, &#x27;gs&#x27;, &#x27;gs&#x27;, &#x27;gs&#x27;]',
          'Dictionary of consecutive tokens: &#x7B;&#x27;hu&#x27;: 15, &#x27;ug&#x27;: 20, &#x27;pu&#x27;: 17, &#x27;un&#x27;: 16, &#x27;bu&#x27;: 4, &#x27;gs&#x27;: 5&#x7D;',
          'Consecutive token with maximum frequency: ug',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We have obtained the pair of tokens that appear most frequently. Let's encapsulate this in a function because we are going to use it more times.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">get_consecutive_tokens_with_max_frequency</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">list_corpus_tokens</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">dict_keys</span> <span class="o">=</span> <span class="n">dict_tokens_by_word_appearance</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="n">list_consecutive_tokens</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">key</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">dict_keys</span><span class="p">):</span>',
      '<span class="w">        </span><span class="c1"># Get the tokens of the word</span>',
      '<span class="w">        </span><span class="n">number_of_toneks_of_word</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">&quot;tokens&quot;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="c1"># Get consecituve tokens</span>',
      '<span class="w">        </span><span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">number_of_toneks_of_word</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>',
      '<span class="w">            </span><span class="c1"># Get consecutive tokens</span>',
      '<span class="w">            </span><span class="n">consecutive_tokens</span> <span class="o">=</span> <span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">&quot;tokens&quot;</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">&quot;tokens&quot;</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>',
      '<span class="w">            </span><span class="c1"># Append the consecutive tokens to the list</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">&quot;count&quot;</span><span class="p">]):</span>',
      '<span class="w">                </span><span class="n">list_consecutive_tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">consecutive_tokens</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Get consecutive tokens with maximum frequency</span>',
      '<span class="w">    </span><span class="n">dict_consecutive_tokens</span> <span class="o">=</span> <span class="p">{}</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">list_consecutive_tokens</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Check if the token is already in the dictionary</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">dict_consecutive_tokens</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Increment the count of the token</span>',
      '<span class="w">            </span><span class="n">dict_consecutive_tokens</span><span class="p">[</span><span class="n">token</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># If the token is not in the dictionary</span>',
      '<span class="w">        </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Add the token to the dictionary</span>',
      '<span class="w">            </span><span class="n">dict_consecutive_tokens</span><span class="p">[</span><span class="n">token</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Get the consecutive token with maximum frequency</span>',
      '<span class="w">    </span><span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">    </span><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Get the token with maximum frequency</span>',
      '<span class="w">        </span><span class="n">consecutive_token</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dict_consecutive_tokens</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">dict_consecutive_tokens</span><span class="o">.</span><span class="n">get</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="c1"># Check if the token is already in the list of tokens</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">consecutive_token</span> <span class="ow">in</span> <span class="n">list_corpus_tokens</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Remove token from the dictionary</span>',
      '<span class="w">            </span><span class="n">dict_consecutive_tokens</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">consecutive_token</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="c1"># If the token is not in the list of tokens</span>',
      '<span class="w">        </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Assign the token to the max_consecutive_token</span>',
      '<span class="w">            </span><span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="n">consecutive_token</span>',
      '<span class="w">            </span><span class="k">break</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">max_consecutive_token</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We check that we get the same as before</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="n">get_consecutive_tokens_with_max_frequency</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">initial_corpus_tokens</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Consecutive token with maximum frequency: </span><span class="si">{</span><span class="n">max_consecutive_token</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Consecutive token with maximum frequency: ug',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that yes</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Now our token corpus can be modified by adding the <code>ug</code> token</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># new_corpus_tokens = initial_corpus_tokens + max_consecutive_token</span>',
      '<span class="n">new_corpus_tokens</span> <span class="o">=</span> <span class="n">initial_corpus_tokens</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>',
      '<span class="n">new_corpus_tokens</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Initial corpus tokens: </span><span class="si">{</span><span class="n">initial_corpus_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;New corpus tokens: </span><span class="si">{</span><span class="n">new_corpus_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Initial corpus tokens: &#x7B;&#x27;p&#x27;, &#x27;n&#x27;, &#x27;u&#x27;, &#x27;s&#x27;, &#x27;h&#x27;, &#x27;g&#x27;, &#x27;b&#x27;&#x7D;',
          'New corpus tokens: &#x7B;&#x27;p&#x27;, &#x27;n&#x27;, &#x27;ug&#x27;, &#x27;g&#x27;, &#x27;b&#x27;, &#x27;u&#x27;, &#x27;s&#x27;, &#x27;h&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We also put this in a function</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">get_new_corpus_tokens</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">,</span> <span class="n">initial_corpus_tokens</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">new_corpus_tokens</span> <span class="o">=</span> <span class="n">initial_corpus_tokens</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>',
      '<span class="w">    </span><span class="n">new_corpus_tokens</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">new_corpus_tokens</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We will check again that we get the same as before</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">new_corpus_tokens</span> <span class="o">=</span> <span class="n">get_new_corpus_tokens</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">,</span> <span class="n">initial_corpus_tokens</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Initial corpus tokens: </span><span class="si">{</span><span class="n">initial_corpus_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;New corpus tokens: </span><span class="si">{</span><span class="n">new_corpus_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Initial corpus tokens: &#x7B;&#x27;p&#x27;, &#x27;n&#x27;, &#x27;u&#x27;, &#x27;s&#x27;, &#x27;h&#x27;, &#x27;g&#x27;, &#x27;b&#x27;&#x7D;',
          'New corpus tokens: &#x7B;&#x27;p&#x27;, &#x27;n&#x27;, &#x27;ug&#x27;, &#x27;g&#x27;, &#x27;b&#x27;, &#x27;u&#x27;, &#x27;s&#x27;, &#x27;h&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that yes</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Now we are going to modify the dictionary where the words, the tokens, and the number of times they appear are listed with the new token</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">copy</span>',
      '<span class="w"> </span>',
      '<span class="n">dict_keys</span> <span class="o">=</span> <span class="n">dict_tokens_by_word_appearance</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
      '<span class="n">dict_tokens_by_word_appearance_tmp</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">dict_keys</span><span class="p">:</span>',
      '<span class="w">    </span><span class="c1"># Check if the new token is in the word</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="n">max_consecutive_token</span> <span class="ow">in</span> <span class="n">key</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Token </span><span class="si">{</span><span class="n">max_consecutive_token</span><span class="si">}</span><span class="s2"> is in the word </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="c1"># Add the new token to the word tokens</span>',
      '<span class="w">        </span><span class="n">dict_tokens_by_word_appearance_tmp</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">&quot;tokens&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;New tokens of the word </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">dict_tokens_by_word_appearance_tmp</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s1">&#39;tokens&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Initial tokens by word appearance: </span><span class="si">{</span><span class="n">dict_tokens_by_word_appearance</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;New tokens by word appearance: &quot;</span><span class="p">)</span>',
      '<span class="n">dict_tokens_by_word_appearance_tmp</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Token ug is in the word hug',
          'New tokens of the word hug: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;]',
          'Token ug is in the word pug',
          'New tokens of the word pug: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;]',
          'Token ug is in the word hugs',
          'New tokens of the word hugs: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;s&#x27;, &#x27;ug&#x27;]',
          'Initial tokens by word appearance: &#x7B;&#x27;hug&#x27;: &#x7B;&#x27;count&#x27;: 10, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;]&#x7D;, &#x27;pug&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;g&#x27;]&#x7D;, &#x27;pun&#x27;: &#x7B;&#x27;count&#x27;: 12, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;n&#x27;]&#x7D;, &#x27;bun&#x27;: &#x7B;&#x27;count&#x27;: 4, &#x27;tokens&#x27;: [&#x27;b&#x27;, &#x27;u&#x27;, &#x27;n&#x27;]&#x7D;, &#x27;hugs&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;s&#x27;]&#x7D;&#x7D;',
          'New tokens by word appearance:',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;hug&#x27;: &#x7B;&#x27;count&#x27;: 10, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;]&#x7D;,',
          '&#x27;pug&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;]&#x7D;,',
          '&#x27;pun&#x27;: &#x7B;&#x27;count&#x27;: 12, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;n&#x27;]&#x7D;,',
          '&#x27;bun&#x27;: &#x7B;&#x27;count&#x27;: 4, &#x27;tokens&#x27;: [&#x27;b&#x27;, &#x27;u&#x27;, &#x27;n&#x27;]&#x7D;,',
          '&#x27;hugs&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;s&#x27;, &#x27;ug&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We put this into a function</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">update_tokens_by_word_appearance</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">max_consecutive_token</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">dict_tokens_by_word_appearance_tmp</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">dict_keys</span> <span class="o">=</span> <span class="n">dict_tokens_by_word_appearance_tmp</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">dict_keys</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Check if the new token is in the word</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">max_consecutive_token</span> <span class="ow">in</span> <span class="n">key</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Add the new token to the word tokens</span>',
      '<span class="w">            </span><span class="n">dict_tokens_by_word_appearance_tmp</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">&quot;tokens&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">dict_tokens_by_word_appearance_tmp</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We check that it is correct</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dict_tokens_by_word_appearance</span> <span class="o">=</span> <span class="n">update_tokens_by_word_appearance</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">max_consecutive_token</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;New tokens by word appearance: &quot;</span><span class="p">)</span>',
      '<span class="n">dict_tokens_by_word_appearance</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'New tokens by word appearance:',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;hug&#x27;: &#x7B;&#x27;count&#x27;: 10, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;]&#x7D;,',
          '&#x27;pug&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;]&#x7D;,',
          '&#x27;pun&#x27;: &#x7B;&#x27;count&#x27;: 12, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;n&#x27;]&#x7D;,',
          '&#x27;bun&#x27;: &#x7B;&#x27;count&#x27;: 4, &#x27;tokens&#x27;: [&#x27;b&#x27;, &#x27;u&#x27;, &#x27;n&#x27;]&#x7D;,',
          '&#x27;hugs&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;s&#x27;, &#x27;ug&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In summary, in the first iteration we have moved from a token corpus of <code>s, g, h, u, n, p, b</code> to the new token corpus <code>h, u, n, p, s, g, b, ug</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We now perform a second iteration, obtaining the pair of consecutive tokens that appear most frequently in the dictionary</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="n">get_consecutive_tokens_with_max_frequency</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">new_corpus_tokens</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Consecutive token with maximum frequency: </span><span class="si">{</span><span class="n">max_consecutive_token</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Consecutive token with maximum frequency: pu',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We obtain the new token corpus</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">corpus_tokens</span> <span class="o">=</span> <span class="n">get_new_corpus_tokens</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">,</span> <span class="n">new_corpus_tokens</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Initial corpus tokens: </span><span class="si">{</span><span class="n">new_corpus_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;New corpus tokens: </span><span class="si">{</span><span class="n">corpus_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Initial corpus tokens: &#x7B;&#x27;p&#x27;, &#x27;n&#x27;, &#x27;ug&#x27;, &#x27;g&#x27;, &#x27;b&#x27;, &#x27;u&#x27;, &#x27;s&#x27;, &#x27;h&#x27;&#x7D;',
          'New corpus tokens: &#x7B;&#x27;p&#x27;, &#x27;n&#x27;, &#x27;pu&#x27;, &#x27;u&#x27;, &#x27;s&#x27;, &#x27;h&#x27;, &#x27;ug&#x27;, &#x27;g&#x27;, &#x27;b&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>And we get the new dictionary in which the words, the tokens, and the number of times they appear are listed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dict_tokens_by_word_appearance</span> <span class="o">=</span> <span class="n">update_tokens_by_word_appearance</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">max_consecutive_token</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;New tokens by word appearance: &quot;</span><span class="p">)</span>',
      '<span class="n">dict_tokens_by_word_appearance</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'New tokens by word appearance:',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;hug&#x27;: &#x7B;&#x27;count&#x27;: 10, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;]&#x7D;,',
          '&#x27;pug&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;, &#x27;pu&#x27;]&#x7D;,',
          '&#x27;pun&#x27;: &#x7B;&#x27;count&#x27;: 12, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;n&#x27;, &#x27;pu&#x27;]&#x7D;,',
          '&#x27;bun&#x27;: &#x7B;&#x27;count&#x27;: 4, &#x27;tokens&#x27;: [&#x27;b&#x27;, &#x27;u&#x27;, &#x27;n&#x27;]&#x7D;,',
          '&#x27;hugs&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;s&#x27;, &#x27;ug&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we can continue until we have a corpus of tokens of the size we want, let's create a corpus of 15 tokens</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">len_corpus_tokens</span> <span class="o">=</span> <span class="mi">15</span>',
      '<span class="w"> </span>',
      '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">len_corpus_tokens</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="n">get_consecutive_tokens_with_max_frequency</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">corpus_tokens</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Consecutive token with maximum frequency: </span><span class="si">{</span><span class="n">max_consecutive_token</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># If there are no more consecutive tokens break the loop</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="n">max_consecutive_token</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">break</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="n">corpus_tokens</span> <span class="o">=</span> <span class="n">get_new_corpus_tokens</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">,</span> <span class="n">corpus_tokens</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;New corpus tokens: </span><span class="si">{</span><span class="n">corpus_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="n">dict_tokens_by_word_appearance</span> <span class="o">=</span> <span class="n">update_tokens_by_word_appearance</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">max_consecutive_token</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;New tokens by word appearance: </span><span class="si">{</span><span class="n">dict_tokens_by_word_appearance</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Consecutive token with maximum frequency: un',
          'New corpus tokens: &#x7B;&#x27;p&#x27;, &#x27;n&#x27;, &#x27;pu&#x27;, &#x27;un&#x27;, &#x27;u&#x27;, &#x27;s&#x27;, &#x27;h&#x27;, &#x27;ug&#x27;, &#x27;g&#x27;, &#x27;b&#x27;&#x7D;',
          'New tokens by word appearance: &#x7B;&#x27;hug&#x27;: &#x7B;&#x27;count&#x27;: 10, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;]&#x7D;, &#x27;pug&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;, &#x27;pu&#x27;]&#x7D;, &#x27;pun&#x27;: &#x7B;&#x27;count&#x27;: 12, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;n&#x27;, &#x27;pu&#x27;, &#x27;un&#x27;]&#x7D;, &#x27;bun&#x27;: &#x7B;&#x27;count&#x27;: 4, &#x27;tokens&#x27;: [&#x27;b&#x27;, &#x27;u&#x27;, &#x27;n&#x27;, &#x27;un&#x27;]&#x7D;, &#x27;hugs&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;s&#x27;, &#x27;ug&#x27;]&#x7D;&#x7D;',
          'Consecutive token with maximum frequency: hu',
          'New corpus tokens: &#x7B;&#x27;p&#x27;, &#x27;hu&#x27;, &#x27;n&#x27;, &#x27;pu&#x27;, &#x27;un&#x27;, &#x27;u&#x27;, &#x27;s&#x27;, &#x27;h&#x27;, &#x27;ug&#x27;, &#x27;g&#x27;, &#x27;b&#x27;&#x7D;',
          'New tokens by word appearance: &#x7B;&#x27;hug&#x27;: &#x7B;&#x27;count&#x27;: 10, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;, &#x27;hu&#x27;]&#x7D;, &#x27;pug&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;, &#x27;pu&#x27;]&#x7D;, &#x27;pun&#x27;: &#x7B;&#x27;count&#x27;: 12, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;n&#x27;, &#x27;pu&#x27;, &#x27;un&#x27;]&#x7D;, &#x27;bun&#x27;: &#x7B;&#x27;count&#x27;: 4, &#x27;tokens&#x27;: [&#x27;b&#x27;, &#x27;u&#x27;, &#x27;n&#x27;, &#x27;un&#x27;]&#x7D;, &#x27;hugs&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;s&#x27;, &#x27;ug&#x27;, &#x27;hu&#x27;]&#x7D;&#x7D;',
          'Consecutive token with maximum frequency: gug',
          'New corpus tokens: &#x7B;&#x27;p&#x27;, &#x27;hu&#x27;, &#x27;n&#x27;, &#x27;pu&#x27;, &#x27;un&#x27;, &#x27;gug&#x27;, &#x27;u&#x27;, &#x27;s&#x27;, &#x27;h&#x27;, &#x27;ug&#x27;, &#x27;g&#x27;, &#x27;b&#x27;&#x7D;',
          'New tokens by word appearance: &#x7B;&#x27;hug&#x27;: &#x7B;&#x27;count&#x27;: 10, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;, &#x27;hu&#x27;]&#x7D;, &#x27;pug&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;, &#x27;pu&#x27;]&#x7D;, &#x27;pun&#x27;: &#x7B;&#x27;count&#x27;: 12, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;n&#x27;, &#x27;pu&#x27;, &#x27;un&#x27;]&#x7D;, &#x27;bun&#x27;: &#x7B;&#x27;count&#x27;: 4, &#x27;tokens&#x27;: [&#x27;b&#x27;, &#x27;u&#x27;, &#x27;n&#x27;, &#x27;un&#x27;]&#x7D;, &#x27;hugs&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;s&#x27;, &#x27;ug&#x27;, &#x27;hu&#x27;]&#x7D;&#x7D;',
          'Consecutive token with maximum frequency: ughu',
          'New corpus tokens: &#x7B;&#x27;p&#x27;, &#x27;hu&#x27;, &#x27;n&#x27;, &#x27;pu&#x27;, &#x27;un&#x27;, &#x27;gug&#x27;, &#x27;u&#x27;, &#x27;s&#x27;, &#x27;h&#x27;, &#x27;ughu&#x27;, &#x27;ug&#x27;, &#x27;g&#x27;, &#x27;b&#x27;&#x7D;',
          'New tokens by word appearance: &#x7B;&#x27;hug&#x27;: &#x7B;&#x27;count&#x27;: 10, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;, &#x27;hu&#x27;]&#x7D;, &#x27;pug&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;, &#x27;pu&#x27;]&#x7D;, &#x27;pun&#x27;: &#x7B;&#x27;count&#x27;: 12, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;n&#x27;, &#x27;pu&#x27;, &#x27;un&#x27;]&#x7D;, &#x27;bun&#x27;: &#x7B;&#x27;count&#x27;: 4, &#x27;tokens&#x27;: [&#x27;b&#x27;, &#x27;u&#x27;, &#x27;n&#x27;, &#x27;un&#x27;]&#x7D;, &#x27;hugs&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;s&#x27;, &#x27;ug&#x27;, &#x27;hu&#x27;]&#x7D;&#x7D;',
          'Consecutive token with maximum frequency: npu',
          'New corpus tokens: &#x7B;&#x27;p&#x27;, &#x27;hu&#x27;, &#x27;n&#x27;, &#x27;npu&#x27;, &#x27;pu&#x27;, &#x27;un&#x27;, &#x27;gug&#x27;, &#x27;u&#x27;, &#x27;s&#x27;, &#x27;h&#x27;, &#x27;ughu&#x27;, &#x27;ug&#x27;, &#x27;g&#x27;, &#x27;b&#x27;&#x7D;',
          'New tokens by word appearance: &#x7B;&#x27;hug&#x27;: &#x7B;&#x27;count&#x27;: 10, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;, &#x27;hu&#x27;]&#x7D;, &#x27;pug&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;, &#x27;pu&#x27;]&#x7D;, &#x27;pun&#x27;: &#x7B;&#x27;count&#x27;: 12, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;n&#x27;, &#x27;pu&#x27;, &#x27;un&#x27;]&#x7D;, &#x27;bun&#x27;: &#x7B;&#x27;count&#x27;: 4, &#x27;tokens&#x27;: [&#x27;b&#x27;, &#x27;u&#x27;, &#x27;n&#x27;, &#x27;un&#x27;]&#x7D;, &#x27;hugs&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;s&#x27;, &#x27;ug&#x27;, &#x27;hu&#x27;]&#x7D;&#x7D;',
          'Consecutive token with maximum frequency: puun',
          'New corpus tokens: &#x7B;&#x27;p&#x27;, &#x27;hu&#x27;, &#x27;n&#x27;, &#x27;npu&#x27;, &#x27;pu&#x27;, &#x27;un&#x27;, &#x27;gug&#x27;, &#x27;puun&#x27;, &#x27;u&#x27;, &#x27;s&#x27;, &#x27;h&#x27;, &#x27;ughu&#x27;, &#x27;ug&#x27;, &#x27;g&#x27;, &#x27;b&#x27;&#x7D;',
          'New tokens by word appearance: &#x7B;&#x27;hug&#x27;: &#x7B;&#x27;count&#x27;: 10, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;, &#x27;hu&#x27;]&#x7D;, &#x27;pug&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;ug&#x27;, &#x27;pu&#x27;]&#x7D;, &#x27;pun&#x27;: &#x7B;&#x27;count&#x27;: 12, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;n&#x27;, &#x27;pu&#x27;, &#x27;un&#x27;]&#x7D;, &#x27;bun&#x27;: &#x7B;&#x27;count&#x27;: 4, &#x27;tokens&#x27;: [&#x27;b&#x27;, &#x27;u&#x27;, &#x27;n&#x27;, &#x27;un&#x27;]&#x7D;, &#x27;hugs&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;s&#x27;, &#x27;ug&#x27;, &#x27;hu&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now that we have seen how the BPE tokenizer is trained, let's train it from scratch to reinforce our knowledge.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">corpus_words</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;hug&quot;</span><span class="p">,</span> <span class="s2">&quot;pug&quot;</span><span class="p">,</span> <span class="s2">&quot;pun&quot;</span><span class="p">,</span> <span class="s2">&quot;bun&quot;</span><span class="p">,</span> <span class="s2">&quot;hugs&quot;</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Concatenate all the words in the corpus</span>',
      '<span class="n">initial_corpus_tokens</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>',
      '<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">corpus_words</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">initial_corpus_tokens</span> <span class="o">+=</span> <span class="n">word</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Convert the concatenated string to a set of tokens to get unique tokens</span>',
      '<span class="n">corpus_tokens</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">initial_corpus_tokens</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Corpus words: </span><span class="si">{</span><span class="n">corpus_words</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Initial corpus tokens: </span><span class="si">{</span><span class="n">corpus_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Number of initial corpus tokens: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Corpus words: [&#x27;hug&#x27;, &#x27;pug&#x27;, &#x27;pun&#x27;, &#x27;bun&#x27;, &#x27;hugs&#x27;]',
          'Initial corpus tokens: &#x7B;&#x27;p&#x27;, &#x27;n&#x27;, &#x27;u&#x27;, &#x27;s&#x27;, &#x27;h&#x27;, &#x27;g&#x27;, &#x27;b&#x27;&#x7D;',
          'Number of initial corpus tokens: 7',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">corpus</span> <span class="o">=</span> <span class="p">[</span>',
      '<span class="w">    </span><span class="s2">&quot;hug hug hug pun pun bun hugs&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="s2">&quot;hug hug pug pug pun pun hugs&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="s2">&quot;hug hug pug pug pun pun pun pun hugs&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="s2">&quot;pug pun pun pun bun hugs&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="s2">&quot;hug hug hug pun bun bun hugs&quot;</span><span class="p">,</span>',
      '<span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="n">num_hug</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="n">num_pug</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="n">num_pun</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="n">num_bun</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="n">num_hugs</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">sentence</span> <span class="ow">in</span> <span class="n">corpus</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">words</span> <span class="o">=</span> <span class="n">sentence</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">&quot;hug&quot;</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">num_hug</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span><span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">&quot;pug&quot;</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">num_pug</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span><span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">&quot;pun&quot;</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">num_pun</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span><span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">&quot;bun&quot;</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">num_bun</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span><span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">&quot;hugs&quot;</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">num_hugs</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w"> </span>',
      '<span class="n">dict_tokens_by_word_appearance</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="s2">&quot;hug&quot;</span><span class="p">:</span>',
      '<span class="w">        </span><span class="p">{</span>',
      '<span class="w">            </span><span class="s2">&quot;count&quot;</span><span class="p">:</span> <span class="n">num_hug</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;tokens&quot;</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">&quot;hug&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="p">},</span>',
      '<span class="w">    </span><span class="s2">&quot;pug&quot;</span><span class="p">:</span>',
      '<span class="w">        </span><span class="p">{</span>',
      '<span class="w">            </span><span class="s2">&quot;count&quot;</span><span class="p">:</span> <span class="n">num_pug</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;tokens&quot;</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">&quot;pug&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="p">},</span>',
      '<span class="w">    </span><span class="s2">&quot;pun&quot;</span><span class="p">:</span>',
      '<span class="w">        </span><span class="p">{</span>',
      '<span class="w">            </span><span class="s2">&quot;count&quot;</span><span class="p">:</span> <span class="n">num_pun</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;tokens&quot;</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">&quot;pun&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="p">},</span>',
      '<span class="w">    </span><span class="s2">&quot;bun&quot;</span><span class="p">:</span>',
      '<span class="w">        </span><span class="p">{</span>',
      '<span class="w">            </span><span class="s2">&quot;count&quot;</span><span class="p">:</span> <span class="n">num_bun</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;tokens&quot;</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">&quot;bun&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="p">},</span>',
      '<span class="w">    </span><span class="s2">&quot;hugs&quot;</span><span class="p">:</span>',
      '<span class="w">        </span><span class="p">{</span>',
      '<span class="w">            </span><span class="s2">&quot;count&quot;</span><span class="p">:</span> <span class="n">num_hugs</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;tokens&quot;</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">&quot;hugs&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="p">},</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">dict_tokens_by_word_appearance</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;hug&#x27;: &#x7B;&#x27;count&#x27;: 10, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;]&#x7D;,',
          '&#x27;pug&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;g&#x27;]&#x7D;,',
          '&#x27;pun&#x27;: &#x7B;&#x27;count&#x27;: 12, &#x27;tokens&#x27;: [&#x27;p&#x27;, &#x27;u&#x27;, &#x27;n&#x27;]&#x7D;,',
          '&#x27;bun&#x27;: &#x7B;&#x27;count&#x27;: 4, &#x27;tokens&#x27;: [&#x27;b&#x27;, &#x27;u&#x27;, &#x27;n&#x27;]&#x7D;,',
          '&#x27;hugs&#x27;: &#x7B;&#x27;count&#x27;: 5, &#x27;tokens&#x27;: [&#x27;h&#x27;, &#x27;u&#x27;, &#x27;g&#x27;, &#x27;s&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We trained it from scratch until we obtained a corpus of 15 tokens</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">len_corpus_tokens</span> <span class="o">=</span> <span class="mi">15</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Initial corpus tokens: (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">)</span><span class="si">}</span><span class="s2">) </span><span class="si">{</span><span class="n">corpus_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">len_corpus_tokens</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="n">get_consecutive_tokens_with_max_frequency</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">corpus_tokens</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># If there are no more consecutive tokens break the loop</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="n">max_consecutive_token</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">break</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="n">corpus_tokens</span> <span class="o">=</span> <span class="n">get_new_corpus_tokens</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">,</span> <span class="n">corpus_tokens</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="n">dict_tokens_by_word_appearance</span> <span class="o">=</span> <span class="n">update_tokens_by_word_appearance</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">max_consecutive_token</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;New corpus tokens: (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">)</span><span class="si">}</span><span class="s2">) </span><span class="si">{</span><span class="n">corpus_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Initial corpus tokens: (7) &#x7B;&#x27;p&#x27;, &#x27;n&#x27;, &#x27;u&#x27;, &#x27;s&#x27;, &#x27;h&#x27;, &#x27;g&#x27;, &#x27;b&#x27;&#x7D;',
          'New corpus tokens: (15) &#x7B;&#x27;p&#x27;, &#x27;hu&#x27;, &#x27;n&#x27;, &#x27;npu&#x27;, &#x27;pu&#x27;, &#x27;un&#x27;, &#x27;gug&#x27;, &#x27;puun&#x27;, &#x27;u&#x27;, &#x27;s&#x27;, &#x27;h&#x27;, &#x27;ughu&#x27;, &#x27;ug&#x27;, &#x27;g&#x27;, &#x27;b&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Tokenization">Tokenization<a class="anchor-link" href="#Tokenization"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 6" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we now wanted to tokenize, we would first have to create a vocabulary, that is, assign an ID to each token.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">vocab</span> <span class="o">=</span> <span class="p">{}</span>',
      '<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">token</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">vocab</span><span class="p">[</span><span class="n">token</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Vocabulary: &quot;</span><span class="p">)</span>',
      '<span class="n">vocab</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Vocabulary:',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;p&#x27;: 0,',
          '&#x27;hu&#x27;: 1,',
          '&#x27;sug&#x27;: 2,',
          '&#x27;npu&#x27;: 3,',
          '&#x27;ugpu&#x27;: 4,',
          '&#x27;gug&#x27;: 5,',
          '&#x27;u&#x27;: 6,',
          '&#x27;ug&#x27;: 7,',
          '&#x27;ughu&#x27;: 8,',
          '&#x27;n&#x27;: 9,',
          '&#x27;pu&#x27;: 10,',
          '&#x27;un&#x27;: 11,',
          '&#x27;puun&#x27;: 12,',
          '&#x27;s&#x27;: 13,',
          '&#x27;h&#x27;: 14,',
          '&#x27;gs&#x27;: 15,',
          '&#x27;g&#x27;: 16,',
          '&#x27;b&#x27;: 17&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We put it in a function</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">get_vocabulary</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">vocab</span> <span class="o">=</span> <span class="p">{}</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">token</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">):</span>',
      '<span class="w">        </span><span class="n">vocab</span><span class="p">[</span><span class="n">token</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">vocab</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We check that it is correct</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">vocab</span> <span class="o">=</span> <span class="n">get_vocabulary</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Vocabulary: &quot;</span><span class="p">)</span>',
      '<span class="n">vocab</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Vocabulary:',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;p&#x27;: 0,',
          '&#x27;hu&#x27;: 1,',
          '&#x27;sug&#x27;: 2,',
          '&#x27;npu&#x27;: 3,',
          '&#x27;ugpu&#x27;: 4,',
          '&#x27;gug&#x27;: 5,',
          '&#x27;u&#x27;: 6,',
          '&#x27;ug&#x27;: 7,',
          '&#x27;ughu&#x27;: 8,',
          '&#x27;n&#x27;: 9,',
          '&#x27;pu&#x27;: 10,',
          '&#x27;un&#x27;: 11,',
          '&#x27;puun&#x27;: 12,',
          '&#x27;s&#x27;: 13,',
          '&#x27;h&#x27;: 14,',
          '&#x27;gs&#x27;: 15,',
          '&#x27;g&#x27;: 16,',
          '&#x27;b&#x27;: 17&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we now want to tokenize the word <code>bug</code> we can do</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">word</span> <span class="o">=</span> <span class="s1">&#39;bug&#39;</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Get the maximum length of tokens</span>',
      '<span class="n">max_len</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">token</span><span class="p">)</span> <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">vocab</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Maximum length of tokens: </span><span class="si">{</span><span class="n">max_len</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create a empty list of tokens</span>',
      '<span class="n">tokens</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">    </span><span class="c1"># Flag to check if the token is found</span>',
      '<span class="w">    </span><span class="n">found</span> <span class="o">=</span> <span class="kc">False</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Iterate over the maximum length of tokens from max_len to 0</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_len</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>',
      '<span class="w">        </span><span class="c1"># Get the prefix of the word</span>',
      '<span class="w">        </span><span class="n">prefix</span> <span class="o">=</span> <span class="n">word</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Prefix: </span><span class="si">{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="c1"># Check if the prefix is in the vocabulary</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">prefix</span> <span class="ow">in</span> <span class="n">vocab</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;prefix </span><span class="si">{</span><span class="n">prefix</span><span class="si">}</span><span class="s2"> is in the vocabulary&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="n">tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">prefix</span><span class="p">)</span>',
      '<span class="w">            </span><span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">:]</span>',
      '<span class="w">            </span><span class="n">found</span> <span class="o">=</span> <span class="kc">True</span>',
      '<span class="w">            </span><span class="k">break</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># if not found:</span>',
      '<span class="w">    </span><span class="c1">#     tokens.append(&#39;&amp;lt;UNK&amp;gt;&#39;)</span>',
      '<span class="w">    </span><span class="c1">#     word = word[1:]</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Tokens: </span><span class="si">{</span><span class="n">tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Maximum length of tokens: 4',
          'Prefix: bug',
          'Prefix: bug',
          'Prefix: bu',
          'Prefix: b',
          'prefix b is in the vocabulary',
          'Prefix: ug',
          'prefix ug is in the vocabulary',
          'Tokens: [&#x27;b&#x27;, &#x27;ug&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>But if we now want to tokenize the word <code>mug</code> we couldn't because the character <code>m</code> is not in the vocabulary, so we tokenize it with the <code>&#x3C;UNK&#x3E;</code> token.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">word</span> <span class="o">=</span> <span class="s1">&#39;mug&#39;</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Get the maximum length of tokens</span>',
      '<span class="n">max_len</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">token</span><span class="p">)</span> <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">vocab</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Maximum length of tokens: </span><span class="si">{</span><span class="n">max_len</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create a empty list of tokens</span>',
      '<span class="n">tokens</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">    </span><span class="c1"># Flag to check if the token is found</span>',
      '<span class="w">    </span><span class="n">found</span> <span class="o">=</span> <span class="kc">False</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Iterate over the maximum length of tokens from max_len to 0</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_len</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>',
      '<span class="w">        </span><span class="c1"># Get the prefix of the word</span>',
      '<span class="w">        </span><span class="n">prefix</span> <span class="o">=</span> <span class="n">word</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Prefix: </span><span class="si">{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="c1"># Check if the prefix is in the vocabulary</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">prefix</span> <span class="ow">in</span> <span class="n">vocab</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;prefix </span><span class="si">{</span><span class="n">prefix</span><span class="si">}</span><span class="s2"> is in the vocabulary&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="n">tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">prefix</span><span class="p">)</span>',
      '<span class="w">            </span><span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">:]</span>',
      '<span class="w">            </span><span class="n">found</span> <span class="o">=</span> <span class="kc">True</span>',
      '<span class="w">            </span><span class="k">break</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;&amp;lt;UNK&amp;gt;&#39;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Tokens: </span><span class="si">{</span><span class="n">tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Maximum length of tokens: 4',
          'Prefix: mug',
          'Prefix: mug',
          'Prefix: mu',
          'Prefix: m',
          'Prefix: ug',
          'prefix ug is in the vocabulary',
          'Tokens: [&#x27;&amp;lt;UNK&amp;gt;&#x27;, &#x27;ug&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We put it in a function</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">tokenize_word</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">vocab</span><span class="p">):</span>',
      '<span class="w">    </span><span class="c1"># Get the maximum length of tokens</span>',
      '<span class="w">    </span><span class="n">max_len</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">token</span><span class="p">)</span> <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">vocab</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Create a empty list of tokens</span>',
      '<span class="w">    </span><span class="n">tokens</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">    </span><span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Flag to check if the token is found</span>',
      '<span class="w">        </span><span class="n">found</span> <span class="o">=</span> <span class="kc">False</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="c1"># Iterate over the maximum length of tokens from max_len to 0</span>',
      '<span class="w">        </span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_len</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>',
      '<span class="w">            </span><span class="c1"># Get the prefix of the word</span>',
      '<span class="w">            </span><span class="n">prefix</span> <span class="o">=</span> <span class="n">word</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="c1"># Check if the prefix is in the vocabulary</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">prefix</span> <span class="ow">in</span> <span class="n">vocab</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">prefix</span><span class="p">)</span>',
      '<span class="w">                </span><span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">:]</span>',
      '<span class="w">                </span><span class="n">found</span> <span class="o">=</span> <span class="kc">True</span>',
      '<span class="w">                </span><span class="k">break</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="k">if</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;&amp;lt;UNK&amp;gt;&#39;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">tokens</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We check that it is correct</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Tokenization of the word &#39;bug&#39;: </span><span class="si">{</span><span class="n">tokenize_word</span><span class="p">(</span><span class="s1">&#39;bug&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">vocab</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Tokenization of the word &#39;mug&#39;: </span><span class="si">{</span><span class="n">tokenize_word</span><span class="p">(</span><span class="s1">&#39;mug&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">vocab</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Tokenization of the word &#x27;bug&#x27;: [&#x27;b&#x27;, &#x27;ug&#x27;]',
          'Tokenization of the word &#x27;mug&#x27;: [&#x27;&amp;lt;UNK&amp;gt;&#x27;, &#x27;ug&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Token Viewer">Token Viewer<a class="anchor-link" href="#Token Viewer"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 7" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Now that we know how a BPE tokenizer works, let's see using the visualizer <a href="https://huggingface.co/spaces/Xenova/the-tokenizer-playground" target="_blank" rel="nofollow noreferrer">the-tokenizer-playground</a> what the tokens of any sentence would look like.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <iframe>
      <p>src="https://xenova-the-tokenizer-playground.static.hf.space"</p>
      <p>frameborder="0"</p>
      <p>width="850"</p>
      <p>height="450"</p>
      <blockquote>
      <p></iframe></p>
      </blockquote>
      </section>







    </div>

  </section>

</PostLayout>
