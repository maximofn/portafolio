---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Fine tuning Florence-2';
const end_url = 'fine-tuning-florence-2';
const description = 'You\'ve already got Florence-2 on your radar, but now you want to take it to the next level! ðŸš€ It\'s time for fine-tuning! ðŸ’» In this post, I\'ll walk you step-by-step through the process of adapting this multimodal model to your specific needs. ðŸ“Š From preparing your data to setting up hyperparameters, I\'ll show you how to get the most out of Florence-2. ðŸ’¡ With PyTorch and Python, we\'ll make this model fit your needs and become your trusted tool for solving language and vision tasks. ðŸ“ˆ So get ready to take your model to the next level and make Florence-2 shine in all its glory! âœ¨';
const keywords = 'florence 2, fine tuning, multimodal model, pytorch, python';
const languaje = 'EN';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/Florence-2_fine_tuning_thumnail.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1080
    image_height=778
    image_extension=webp
    article_date=2024-07-18+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Fine tuning for Document VQA"><h2>Fine tuning for Document VQA</h2></a>
      <a class="anchor-link" href="#Dataset"><h3>Dataset</h3></a>
      <a class="anchor-link" href="#Fine tuning"><h3>Fine tuning</h3></a>
      <a class="anchor-link" href="#Test the fine-tuned model"><h3>Test the fine-tuned model</h3></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Disclaimer: This post has been translated to English using a machine translation model. Please, let me know if you find any mistakes.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In the post <a href="https://maximofn.com/florence-2/">Florence-2</a> we already explained the Florence-2 model and saw how to use it. So in this post, we are going to see how to fine-tune it.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Fine tuning for Document VQA">Fine tuning for Document VQA<a class="anchor-link" href="#Fine tuning for Document VQA"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 6" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>This fine-tuning is based on the post by <a href="https://huggingface.co/merve" target="_blank" rel="nofollow noreferrer">Merve Noyan</a>, <a href="https://huggingface.co/andito">Andres Marafioti</a> and <a href="https://huggingface.co/SkalskiP">Piotr Skalski</a>, <a href="https://huggingface.co/blog/finetune-florence2">Fine-tuning Florence-2 - Microsoft's Cutting-edge Vision Language Models</a>, in which they explain that although this method is very comprehensive, it does not allow asking questions about documents, so they perform a retraining with the <a href="https://huggingface.co/datasets/HuggingFaceM4/DocumentVQA">DocumentVQA</a> dataset.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Dataset">Dataset<a class="anchor-link" href="#Dataset"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 7" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First, we download the dataset. I'm leaving the <code>dataset_percentage</code> variable in case you don't want to download everything.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">datasets</span><span class="w"> </span><span class="kn">import</span> <span class="n">load_dataset</span>',
      '<span class="w"> </span>',
      '<span class="n">dataset_percentage</span> <span class="o">=</span> <span class="mi">100</span>',
      '<span class="n">data_train</span> <span class="o">=</span> <span class="n">load_dataset</span><span class="p">(</span><span class="s2">&quot;HuggingFaceM4/DocumentVQA&quot;</span><span class="p">,</span> <span class="n">split</span><span class="o">=</span><span class="sa">f</span><span class="s2">&quot;train[:</span><span class="si">{</span><span class="n">dataset_percentage</span><span class="si">}</span><span class="s2">%]&quot;</span><span class="p">)</span>',
      '<span class="n">data_validation</span> <span class="o">=</span> <span class="n">load_dataset</span><span class="p">(</span><span class="s2">&quot;HuggingFaceM4/DocumentVQA&quot;</span><span class="p">,</span> <span class="n">split</span><span class="o">=</span><span class="sa">f</span><span class="s2">&quot;validation[:</span><span class="si">{</span><span class="n">dataset_percentage</span><span class="si">}</span><span class="s2">%]&quot;</span><span class="p">)</span>',
      '<span class="n">data_test</span> <span class="o">=</span> <span class="n">load_dataset</span><span class="p">(</span><span class="s2">&quot;HuggingFaceM4/DocumentVQA&quot;</span><span class="p">,</span> <span class="n">split</span><span class="o">=</span><span class="sa">f</span><span class="s2">&quot;test[:</span><span class="si">{</span><span class="n">dataset_percentage</span><span class="si">}</span><span class="s2">%]&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">data_train</span><span class="p">,</span> <span class="n">data_validation</span><span class="p">,</span> <span class="n">data_test</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(Dataset(&#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;features: [&#x27;questionId&#x27;, &#x27;question&#x27;, &#x27;question_types&#x27;, &#x27;image&#x27;, &#x27;docId&#x27;, &#x27;ucsf_document_id&#x27;, &#x27;ucsf_document_page_no&#x27;, &#x27;answers&#x27;],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;num_rows: 39463',
          '&#x7D;),',
          'Dataset(&#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;features: [&#x27;questionId&#x27;, &#x27;question&#x27;, &#x27;question_types&#x27;, &#x27;image&#x27;, &#x27;docId&#x27;, &#x27;ucsf_document_id&#x27;, &#x27;ucsf_document_page_no&#x27;, &#x27;answers&#x27;],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;num_rows: 5349',
          '&#x7D;),',
          'Dataset(&#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;features: [&#x27;questionId&#x27;, &#x27;question&#x27;, &#x27;question_types&#x27;, &#x27;image&#x27;, &#x27;docId&#x27;, &#x27;ucsf_document_id&#x27;, &#x27;ucsf_document_page_no&#x27;, &#x27;answers&#x27;],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;num_rows: 5188',
          '&#x7D;))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We make a subset of the dataset if you want to speed up the training, in my case I use 100% of the data</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">percentage</span> <span class="o">=</span> <span class="mi">1</span>',
      '<span class="w"> </span>',
      '<span class="n">subset_data_train</span> <span class="o">=</span> <span class="n">data_train</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data_train</span><span class="p">)</span> <span class="o">*</span> <span class="n">percentage</span><span class="p">)))</span>',
      '<span class="n">subset_data_validation</span> <span class="o">=</span> <span class="n">data_validation</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data_validation</span><span class="p">)</span> <span class="o">*</span> <span class="n">percentage</span><span class="p">)))</span>',
      '<span class="n">subset_data_test</span> <span class="o">=</span> <span class="n">data_test</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data_test</span><span class="p">)</span> <span class="o">*</span> <span class="n">percentage</span><span class="p">)))</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;train dataset length: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">subset_data_train</span><span class="p">)</span><span class="si">}</span><span class="s2">, validation dataset length: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">subset_data_validation</span><span class="p">)</span><span class="si">}</span><span class="s2">, test dataset length: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">subset_data_test</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'train dataset length: 39463, validation dataset length: 5349, test dataset length: 5188',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We also instantiate the model</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">transformers</span><span class="w"> </span><span class="kn">import</span> <span class="n">AutoModelForCausalLM</span><span class="p">,</span> <span class="n">AutoProcessor</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">torch</span>',
      '<span class="w"> </span>',
      '<span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s2">&quot;cuda&quot;</span> <span class="k">if</span> <span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="s2">&quot;cpu&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">checkpoints</span> <span class="o">=</span> <span class="s1">&#39;microsoft/Florence-2-base-ft&#39;</span>',
      '<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">checkpoints</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '<span class="n">processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">checkpoints</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Just like in the post <a href="https://maximofn.com/florence-2/">Florence-2</a> we create a function to ask the model for responses</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">create_prompt</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="n">text_input</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span>',
      '<span class="w">    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span> <span class="o">+</span> <span class="n">text_input</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">prompt</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="s2">&quot;cpu&quot;</span><span class="p">):</span>',
      '<span class="w">    </span><span class="c1"># Create prompt</span>',
      '<span class="w">    </span><span class="n">prompt</span> <span class="o">=</span> <span class="n">create_prompt</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Ensure the image is in RGB mode</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="n">image</span><span class="o">.</span><span class="n">mode</span> <span class="o">!=</span> <span class="s2">&quot;RGB&quot;</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s2">&quot;RGB&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Get inputs</span>',
      '<span class="w">    </span><span class="n">inputs</span> <span class="o">=</span> <span class="n">processor</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span> <span class="n">images</span><span class="o">=</span><span class="n">image</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">&quot;pt&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Get outputs</span>',
      '<span class="w">    </span><span class="n">generated_ids</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span>',
      '<span class="w">      </span><span class="n">input_ids</span><span class="o">=</span><span class="n">inputs</span><span class="p">[</span><span class="s2">&quot;input_ids&quot;</span><span class="p">],</span>',
      '<span class="w">      </span><span class="n">pixel_values</span><span class="o">=</span><span class="n">inputs</span><span class="p">[</span><span class="s2">&quot;pixel_values&quot;</span><span class="p">],</span>',
      '<span class="w">      </span><span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span>',
      '<span class="w">      </span><span class="n">early_stopping</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
      '<span class="w">      </span><span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
      '<span class="w">      </span><span class="n">num_beams</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>',
      '<span class="w">    </span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Decode the generated IDs</span>',
      '<span class="w">    </span><span class="n">generated_text</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">batch_decode</span><span class="p">(</span><span class="n">generated_ids</span><span class="p">,</span> <span class="n">skip_special_tokens</span><span class="o">=</span><span class="kc">False</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Post-process the generated text</span>',
      '<span class="w">    </span><span class="n">parsed_answer</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">post_process_generation</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">generated_text</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">task</span><span class="o">=</span><span class="n">task_prompt</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">image_size</span><span class="o">=</span><span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>',
      '<span class="w">    </span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">parsed_answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We test the model with 3 documents from the dataset, with the task <code>DocVQA</code> to see if we get anything.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">&quot;&amp;lt;DocVQA&amp;gt;&quot;</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">&#39;What do you see in this image?&#39;</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '<span class="w">  </span><span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;docvQA&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;docvQA&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;DocVQA&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">&quot;DocVQA&quot;</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">&#39;What do you see in this image?&#39;</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '<span class="w">  </span><span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;DocVQA&#x27;: &#x27;unanswerable&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;DocVQA&#x27;: &#x27;unanswerable&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;DocVQA&#x27;: &#x27;499150498&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that the answers are not good.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We are now testing with the <code>OCR</code> task</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">&quot;&amp;lt;OCR&amp;gt;&quot;</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '<span class="w">  </span><span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;OCR&amp;gt;&#x27;: &#x27;ConfidentialDATE:11/8/18RJT FR APPROVALBUBJECT: Rl gdasPROPOSED RELEASE DATE:for responseFOR RELEASE TO!CONTRACT: P. CARTERROUTE TO!NameIntiifnPeggy CarterAce11/fesMura PayneDavid Fishhel037Tom Gisis Com-Diane BarrowsEd BlackmerTow KuckerReturn to Peggy Carter, PR, 16 Raynolds BuildingLLS. 2015Source: https://www.industrydocuments.ucsf.edu/docs/xnbl0037&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;OCR&amp;gt;&#x27;: &#x27;ConfidentialDATE:11/8/18RJT FR APPROVALBUBJECT: Rl gdasPROPOSED RELEASE DATE:for responseFOR RELEASE TO!CONTRACT: P. CARTERROUTE TO!NameIntiifnPeggy CarterAce11/fesMura PayneDavid Fishhel037Tom Gisis Com-Diane BarrowsEd BlackmerTow KuckerReturn to Peggy Carter, PR, 16 Raynolds BuildingLLS. 2015Source: https://www.industrydocuments.ucsf.edu/docs/xnbl0037&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;OCR&amp;gt;&#x27;: &#x27;BSABROWN &amp;amp; WILLIAMSON JOBACCO CORPORATIONRESEARCH &amp;amp; DEVELOPMENTINTERNAL CORRESPONDENCETO:R. H. HoneycuttCC:C.J. CookFROM:May 9, 1995SUBJECT: Review of Existing Brainstorming Ideas/43The major function of the Product Innovation Ideas is developed marketable novel productsthat would be profile of the manufacturer and sell. Novel is defined as: a new kind, or differentfrom anything seen in known before, Innovation things as something is available. The products mayintroduced and the most technologies, materials and know, available to give a uniquetaste or tok.The first task of the product innovation was was an easy-view review and then a list ofexisting brainstorming ideas. These were group was used for two major categories that may differapparance and lerato,Ideas are grouped into two major products that may offercategories include a combination print of the above, flowers, and packaged and brand directions.ApparanceThis category is used in a novel cigarette constructions that yield visually different products withminimal changes in smokecigarette.Two cigarettes in one.Multi-plug in your.C-Switch menthol or non non smoking cigarette.E-Switch with ORPORated perforations to enable smoke to separate unburned section forfuture smoking.Tout smoking.Bobace section 30 mm.Novelcigarette constructions and permit a significant reduction in tobacco weight whilemaintaining fast smoking mechanics and visual reduction for tobacco weight.higher basis weight paper, potential reduction for cigarette weight.Easter or in an ebony agent for tobacco, e.g. starch.Colored tow and cigarette papers; seasonal promotions, eg. pastel colored cigarettes forEaster and in an Ebony brand containing a mixture of all black (black paper and tow)and all white cigarettes.499150498Source: https://www.industrydocuments.ucs.edu/docs/mxj0037&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We obtain the text from the documents, but not what the documents are about.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Lastly, we test with the <code>CAPTION</code> tasks</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">&quot;&amp;lt;CAPTION&amp;gt;&quot;</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">&quot;&amp;lt;DETAILED_CAPTION&amp;gt;&quot;</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">&quot;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&quot;</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '<span class="w">  </span><span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;CAPTION&amp;gt;&#x27;: &#x27;A certificate is stamped with the date of 18/18.&#x27;&#x7D;',
          '&#x7B;&#x27;&amp;lt;DETAILED_CAPTION&amp;gt;&#x27;: &#x27;In this image we can see a paper with some text on it.&#x27;&#x7D;',
          '&#x7B;&#x27;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#x27;: &#x27;A letter is written in black ink on a white paper. The letters are written in a cursive language. The letter is addressed to peggy carter. &#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;CAPTION&amp;gt;&#x27;: &#x27;A certificate is stamped with the date of 18/18.&#x27;&#x7D;',
          '&#x7B;&#x27;&amp;lt;DETAILED_CAPTION&amp;gt;&#x27;: &#x27;In this image we can see a paper with some text on it.&#x27;&#x7D;',
          '&#x7B;&#x27;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#x27;: &#x27;A letter is written in black ink on a white paper. The letters are written in a cursive language. The letter is addressed to peggy carter. &#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;CAPTION&amp;gt;&#x27;: &quot;a paper that says &#x27;brown &amp;amp; williamson tobacco corporation research &amp;amp; development&#x27; on it&quot;&#x7D;',
          '&#x7B;&#x27;&amp;lt;DETAILED_CAPTION&amp;gt;&#x27;: &#x27;In this image we can see a paper with some text on it.&#x27;&#x7D;',
          '&#x7B;&#x27;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#x27;: &#x27;The image is a page from a book titled &quot;Brown &amp;amp; Williamson Jobacco Corporation Research &amp;amp; Development&quot;.  The page is white and has black text.  The title of the page is &quot;R. H. Honeycutt&quot; at the top.  There is a logo of the company BSA in the top right corner.  A paragraph is written in black text below the title.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's not accept these responses either, so we are going to do some fine-tuning.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Fine tuning">Fine tuning<a class="anchor-link" href="#Fine tuning"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 8" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First we create a Pytorch dataset</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">torch.utils.data</span><span class="w"> </span><span class="kn">import</span> <span class="n">Dataset</span>',
      '<span class="w"> </span>',
      '<span class="k">class</span><span class="w"> </span><span class="nc">DocVQADataset</span><span class="p">(</span><span class="n">Dataset</span><span class="p">):</span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>',
      '<span class="w">        </span><span class="n">example</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>',
      '<span class="w">        </span><span class="n">question</span> <span class="o">=</span> <span class="s2">&quot;&amp;lt;DocVQA&amp;gt;&quot;</span> <span class="o">+</span> <span class="n">example</span><span class="p">[</span><span class="s1">&#39;question&#39;</span><span class="p">]</span>',
      '<span class="w">        </span><span class="n">first_answer</span> <span class="o">=</span> <span class="n">example</span><span class="p">[</span><span class="s1">&#39;answers&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w">        </span><span class="n">image</span> <span class="o">=</span> <span class="n">example</span><span class="p">[</span><span class="s1">&#39;image&#39;</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">image</span><span class="o">.</span><span class="n">mode</span> <span class="o">!=</span> <span class="s2">&quot;RGB&quot;</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s2">&quot;RGB&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="n">question</span><span class="p">,</span> <span class="n">first_answer</span><span class="p">,</span> <span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">train_dataset</span> <span class="o">=</span> <span class="n">DocVQADataset</span><span class="p">(</span><span class="n">subset_data_train</span><span class="p">)</span>',
      '<span class="n">val_dataset</span> <span class="o">=</span> <span class="n">DocVQADataset</span><span class="p">(</span><span class="n">subset_data_validation</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's see it</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">train_dataset</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(&#x27;&amp;lt;DocVQA&amp;gt;what is the date mentioned in this letter?&#x27;,',
          '&#x27;1/8/93&#x27;,',
          '&amp;lt;PIL.Image.Image image mode=RGB size=1695x2025&amp;gt;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">data_train</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;questionId&#x27;: 337,',
          '&#x27;question&#x27;: &#x27;what is the date mentioned in this letter?&#x27;,',
          '&#x27;question_types&#x27;: [&#x27;handwritten&#x27;, &#x27;form&#x27;],',
          '&#x27;image&#x27;: &amp;lt;PIL.PngImagePlugin.PngImageFile image mode=L size=1695x2025&amp;gt;,',
          '&#x27;docId&#x27;: 279,',
          '&#x27;ucsf_document_id&#x27;: &#x27;xnbl0037&#x27;,',
          '&#x27;ucsf_document_page_no&#x27;: &#x27;1&#x27;,',
          '&#x27;answers&#x27;: [&#x27;1/8/93&#x27;]&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We create a DataLoader</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">os</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">torch.utils.data</span><span class="w"> </span><span class="kn">import</span> <span class="n">DataLoader</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">tqdm</span><span class="w"> </span><span class="kn">import</span> <span class="n">tqdm</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">transformers</span><span class="w"> </span><span class="kn">import</span> <span class="p">(</span><span class="n">AdamW</span><span class="p">,</span> <span class="n">AutoProcessor</span><span class="p">,</span> <span class="n">get_scheduler</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">collate_fn</span><span class="p">(</span><span class="n">batch</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">questions</span><span class="p">,</span> <span class="n">answers</span><span class="p">,</span> <span class="n">images</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">batch</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">inputs</span> <span class="o">=</span> <span class="n">processor</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">questions</span><span class="p">),</span> <span class="n">images</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">images</span><span class="p">),</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">&quot;pt&quot;</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">answers</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create DataLoader</span>',
      '<span class="n">batch_size</span> <span class="o">=</span> <span class="mi">8</span>',
      '<span class="n">num_workers</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="w"> </span>',
      '<span class="n">train_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">train_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">collate_fn</span><span class="o">=</span><span class="n">collate_fn</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="n">num_workers</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span class="n">val_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">val_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">collate_fn</span><span class="o">=</span><span class="n">collate_fn</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="n">num_workers</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's see a sample</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">sample</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="nb">iter</span><span class="p">(</span><span class="n">train_loader</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">sample</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(&#x7B;&#x27;input_ids&#x27;: tensor([[    0, 41552, 42291,   846,  1864,   250, 15698, 12375,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;3383,     9,   331,     9,  2042,   116,     2,     1,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;11968,   196,   205, 22922,   346, 17487,     2,     1,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1229,    13,   403,   690,   116,     2,     1,     1,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;5480,  1280,   116,     2,     1,     1,     1,     1,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698, 12196,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1842,   346,    13,    20,  4680, 41828, 42237,     8, 30147, 17487,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;2,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,   560,    61,   675,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;473,    42,  1013,   266,  9943,     7,   116,     2,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698, 12196,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1280,     9, 39432,   642,  6228,  2394,  2801,    11,     5,   576,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;266, 17487,     2],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,  1982,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;11,     5,  6655,  2325,    23,     5,   299,   235,     9,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;3780,   116,     2]]), &#x27;attention_mask&#x27;: tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;...',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x27;97.00&#x27;,',
          '&#x20;&#x20;&#x27;123&#x27;,',
          '&#x20;&#x20;&#x27;1 January 1979 - 31 December 1979&#x27;,',
          '&#x20;&#x20;&#x27;$2,720.14&#x27;,',
          '&#x20;&#x20;&#x27;GPI&#x27;))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The raw sample is a lot of information, so let's check the length of the sample</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">sample</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We get a length of 2 because we have the input to the model and the response</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">sample_inputs</span> <span class="o">=</span> <span class="n">sample</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="n">sample_answers</span> <span class="o">=</span> <span class="n">sample</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see the input</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">sample_inputs</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;input_ids&#x27;: tensor([[    0, 41552, 42291,   846,  1864,   250, 15698, 12375,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;3383,     9,   331,     9,  2042,   116,     2,     1,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;11968,   196,   205, 22922,   346, 17487,     2,     1,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1229,    13,   403,   690,   116,     2,     1,     1,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;5480,  1280,   116,     2,     1,     1,     1,     1,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698, 12196,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1842,   346,    13,    20,  4680, 41828, 42237,     8, 30147, 17487,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;2,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,   560,    61,   675,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;473,    42,  1013,   266,  9943,     7,   116,     2,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698, 12196,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1280,     9, 39432,   642,  6228,  2394,  2801,    11,     5,   576,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;266, 17487,     2],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,  1982,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;11,     5,  6655,  2325,    23,     5,   299,   235,     9,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;3780,   116,     2]]), &#x27;attention_mask&#x27;: tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;...',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[ 2.6400,  2.6400,  2.6400,  ...,  1.3502,  0.7925,  1.3502],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[ 2.6400,  2.6400,  2.6400,  ...,  0.9319,  1.4025,  0.8448],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[ 2.6400,  2.6400,  2.6400,  ...,  1.0365,  1.2282,  0.8099]]]])&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The raw input also has too much information, so let's look at the keys</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">sample_inputs</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dict_keys([&#x27;input_ids&#x27;, &#x27;attention_mask&#x27;, &#x27;pixel_values&#x27;])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, we have the <code>input_ids</code> and the <code>attention_mask</code> which correspond to the input text, and the <code>pixel_values</code> which correspond to the image. Let's check the dimension of each one.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">sample_inputs</span><span class="p">[</span><span class="s1">&#39;input_ids&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">sample_inputs</span><span class="p">[</span><span class="s1">&#39;attention_mask&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">sample_inputs</span><span class="p">[</span><span class="s1">&#39;pixel_values&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(torch.Size([8, 23]), torch.Size([8, 23]), torch.Size([8, 3, 768, 768]))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In all of them there are 8 elements, because when creating the dataloader we set a batch size of 8. In the <code>input_ids</code> and <code>attention_mask</code>, each element has 28 tokens, and in the <code>pixel_values</code>, each element has 3 channels, 768 pixels in height, and 768 pixels in width.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's now look at the answers</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">sample_answers</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(&#x27;JAMES A. RHODES&#x27;,',
          '&#x27;1-800-992-3284&#x27;,',
          '&#x27;$50,000&#x27;,',
          '&#x27;97.00&#x27;,',
          '&#x27;123&#x27;,',
          '&#x27;1 January 1979 - 31 December 1979&#x27;,',
          '&#x27;$2,720.14&#x27;,',
          '&#x27;GPI&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We obtained 8 responses, for the same reason as before, because when creating the dataloader we set a batch size of 8</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">sample_answers</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '8',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We create a function to perform the fine tuning</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">train_model</span><span class="p">(</span><span class="n">train_loader</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">processor</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">lr</span><span class="o">=</span><span class="mf">1e-6</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">optimizer</span> <span class="o">=</span> <span class="n">AdamW</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="n">lr</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">num_training_steps</span> <span class="o">=</span> <span class="n">epochs</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">lr_scheduler</span> <span class="o">=</span> <span class="n">get_scheduler</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;linear&quot;</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">optimizer</span><span class="o">=</span><span class="n">optimizer</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">num_warmup_steps</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">num_training_steps</span><span class="o">=</span><span class="n">num_training_steps</span><span class="p">,</span>',
      '<span class="w">    </span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">epochs</span><span class="p">):</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="c1"># Training phase</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Training Epoch </span><span class="si">{</span><span class="n">epoch</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">epochs</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>',
      '<span class="w">        </span><span class="n">train_loss</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="w">        </span><span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>',
      '<span class="w">        </span><span class="k">for</span> <span class="n">batch</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">train_loader</span><span class="p">,</span> <span class="n">desc</span><span class="o">=</span><span class="sa">f</span><span class="s2">&quot;Training Epoch </span><span class="si">{</span><span class="n">epoch</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">epochs</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">):</span>',
      '<span class="w">            </span><span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">            </span><span class="n">inputs</span><span class="p">,</span> <span class="n">answers</span> <span class="o">=</span> <span class="n">batch</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">input_ids</span> <span class="o">=</span> <span class="n">inputs</span><span class="p">[</span><span class="s2">&quot;input_ids&quot;</span><span class="p">]</span>',
      '<span class="w">            </span><span class="n">pixel_values</span> <span class="o">=</span> <span class="n">inputs</span><span class="p">[</span><span class="s2">&quot;pixel_values&quot;</span><span class="p">]</span>',
      '<span class="w">            </span><span class="n">labels</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">tokenizer</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">answers</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">&quot;pt&quot;</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">return_token_type_ids</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span><span class="o">.</span><span class="n">input_ids</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">input_ids</span><span class="o">=</span><span class="n">input_ids</span><span class="p">,</span> <span class="n">pixel_values</span><span class="o">=</span><span class="n">pixel_values</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">labels</span><span class="p">)</span>',
      '<span class="w">            </span><span class="n">loss</span> <span class="o">=</span> <span class="n">outputs</span><span class="o">.</span><span class="n">loss</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">optimizer</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">lr_scheduler</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">optimizer</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">train_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="n">avg_train_loss</span> <span class="o">=</span> <span class="n">train_loss</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Average Training Loss: </span><span class="si">{</span><span class="n">avg_train_loss</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="c1"># Validation phase</span>',
      '<span class="w">        </span><span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>',
      '<span class="w">        </span><span class="n">val_loss</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="w">        </span><span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">batch</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">val_loader</span><span class="p">,</span> <span class="n">desc</span><span class="o">=</span><span class="sa">f</span><span class="s2">&quot;Validation Epoch </span><span class="si">{</span><span class="n">epoch</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">epochs</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">):</span>',
      '<span class="w">                </span><span class="n">inputs</span><span class="p">,</span> <span class="n">answers</span> <span class="o">=</span> <span class="n">batch</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="n">input_ids</span> <span class="o">=</span> <span class="n">inputs</span><span class="p">[</span><span class="s2">&quot;input_ids&quot;</span><span class="p">]</span>',
      '<span class="w">                </span><span class="n">pixel_values</span> <span class="o">=</span> <span class="n">inputs</span><span class="p">[</span><span class="s2">&quot;pixel_values&quot;</span><span class="p">]</span>',
      '<span class="w">                </span><span class="n">labels</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">tokenizer</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">answers</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">&quot;pt&quot;</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">return_token_type_ids</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span><span class="o">.</span><span class="n">input_ids</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">input_ids</span><span class="o">=</span><span class="n">input_ids</span><span class="p">,</span> <span class="n">pixel_values</span><span class="o">=</span><span class="n">pixel_values</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">labels</span><span class="p">)</span>',
      '<span class="w">                </span><span class="n">loss</span> <span class="o">=</span> <span class="n">outputs</span><span class="o">.</span><span class="n">loss</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="n">val_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="n">avg_val_loss</span> <span class="o">=</span> <span class="n">val_loss</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">val_loader</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Average Validation Loss: </span><span class="si">{</span><span class="n">avg_val_loss</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We train</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">train_model</span><span class="p">(</span><span class="n">train_loader</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">processor</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">lr</span><span class="o">=</span><span class="mf">1e-6</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Training Epoch 1/3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Training Epoch 1/3: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 4933/4933 [2:45:28&amp;lt;00:00,  2.01s/it]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Average Training Loss: 1.153514638062836',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Validation Epoch 1/3: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 669/669 [13:52&amp;lt;00:00,  1.24s/it]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Average Validation Loss: 0.7698153616646124',
          'Training Epoch 2/3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Training Epoch 2/3: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 4933/4933 [2:42:51&amp;lt;00:00,  1.98s/it]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Average Training Loss: 0.6530420315007687',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Validation Epoch 2/3: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 669/669 [13:48&amp;lt;00:00,  1.24s/it]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Average Validation Loss: 0.725301219375946',
          'Training Epoch 3/3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Training Epoch 3/3: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 4933/4933 [2:42:52&amp;lt;00:00,  1.98s/it]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Average Training Loss: 0.5878197003753292',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Validation Epoch 3/3: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 669/669 [13:45&amp;lt;00:00,  1.23s/it]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Average Validation Loss: 0.716769086751079',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[

        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Test the fine-tuned model">Test the fine-tuned model<a class="anchor-link" href="#Test the fine-tuned model"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 9" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We now test the model on a few documents from the test set</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">&quot;&amp;lt;DocVQA&amp;gt;&quot;</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">&#39;What do you see in this image?&#39;</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_test</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '<span class="w">  </span><span class="n">display</span><span class="p">(</span><span class="n">data_test</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;CAGR 19%&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;memorandum&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;14000&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that it gives us information</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's now retest on the test set to compare with what came out before training</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">&quot;&amp;lt;DocVQA&amp;gt;&quot;</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">&#39;What do you see in this image?&#39;</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '<span class="w">  </span><span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;Confidential&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;Confidential&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;Brown &amp;amp; Williamson Tobacco Corporation Research &amp;amp; Development&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>It doesn't yield very good results, but we have only trained for 3 epochs. Although it could be improved by training more, what can be seen is that when we previously used the task tag <code>&#x3C;DocVQA&#x3E;</code>, we didn't get a response, but now we do.</p>
      </section>







    </div>

  </section>

</PostLayout>
