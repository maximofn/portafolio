---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Git';
const end_url = 'git';
const description = 'Have you rewritten that code that took you hours to do? Don\'t panic! With GIT, say goodbye to Oops, I deleted it. Join me on this adventure and learn how to play with versions like a programming rockstar. ðŸŽ¸ ðŸ’¾ #GITandRoll';
const keywords = 'git, version control, control de versiones, versionamento, git tags, git branches, git reset, git checkout';
const languaje = 'EN';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/Git.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1268
    image_height=664
    image_extension=webp
    article_date=2023-04-23+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Introduction"><h2>Introduction</h2></a>
      <a class="anchor-link" href="#The areas of git"><h2>The areas of git</h2></a>
      <a class="anchor-link" href="#Install git"><h2>Install git</h2></a>
      <a class="anchor-link" href="#Initial Setup"><h2>Initial Setup</h2></a>
      <a class="anchor-link" href="#Setting the name and email"><h3>Setting the name and email</h3></a>
      <a class="anchor-link" href="#Set the default editor"><h3>Set the default editor</h3></a>
      <a class="anchor-link" href="#Check git configuration"><h3>Check git configuration</h3></a>
      <a class="anchor-link" href="#Local version control"><h2>Local version control</h2></a>
      <a class="anchor-link" href="#Initialize a new repository (git init)"><h3>Initialize a new repository (<code>git init</code>)</h3></a>
      <a class="anchor-link" href="#Create new files"><h3>Create new files</h3></a>
      <a class="anchor-link" href="#Undo the creation of a new file"><h3>Undo the creation of a new file</h3></a>
      <a class="anchor-link" href="#git clean"><h4><code>git clean</code></h4></a>
      <a class="anchor-link" href="#Add a file to the staging area (git add)"><h3>Add a file to the staging area (<code>git add</code>)</h3></a>
      <a class="anchor-link" href="#Unstage a file (git reset)"><h3>Unstage a file (<code>git reset</code>)</h3></a>
      <a class="anchor-link" href="#Commit (git commit)"><h3>Commit (<code>git commit</code>)</h3></a>
      <a class="anchor-link" href="#Skipping the staging area with git commit -a -m or git commit -am"><h4>Skipping the staging area with <code>git commit -a -m</code> or <code>git commit -am</code></h4></a>
      <a class="anchor-link" href="#Modify a file that has already been committed"><h3>Modify a file that has already been committed</h3></a>
      <a class="anchor-link" href="#View changes in a file (git diff &#x3C;file&#x3E;)"><h3>View changes in a file (<code>git diff &#x3C;file&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Unstage changes in a file (git restore &#x3C;file&#x3E;)"><h3>Unstage changes in a file (<code>git restore &#x3C;file&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Change history (git log)"><h3>Change history (<code>git log</code>)</h3></a>
      <a class="anchor-link" href="#HEAD"><h3>HEAD</h3></a>
      <a class="anchor-link" href="#Modify a commit (git commit --amend)"><h3>Modify a commit (<code>git commit --amend</code>)</h3></a>
      <a class="anchor-link" href="#Modify the commit message"><h4>Modify the commit message</h4></a>
      <a class="anchor-link" href="#Add files to the last commit"><h4>Add files to the last commit</h4></a>
      <a class="anchor-link" href="#Undo a Commit (git reset HEAD~1)"><h3>Undo a Commit (<code>git reset HEAD~1</code>)</h3></a>
      <a class="anchor-link" href="#Undo a commit while keeping the changes (git reset --soft HEAD~1)"><h4>Undo a commit while keeping the changes (<code>git reset --soft HEAD~1</code>)</h4></a>
      <a class="anchor-link" href="#Undo a commit by discarding the changes (git reset --hard HEAD~1)"><h4>Undo a commit by discarding the changes (<code>git reset --hard HEAD~1</code>)</h4></a>
      <a class="anchor-link" href="#Modify a remote commit (git push --force)"><h3>Modify a remote commit (<code>git push --force</code>)</h3></a>
      <a class="anchor-link" href="#Modify a remote commit (git push --force-with-lease)"><h3>Modify a remote commit (<code>git push --force-with-lease</code>)</h3></a>
      <a class="anchor-link" href="#Ignoring files (.gitignore)"><h3>Ignoring files (<code>.gitignore</code>)</h3></a>
      <a class="anchor-link" href="#What files to add to the .gitignore?"><h4>What files to add to the <code>.gitignore</code>?</h4></a>
      <a class="anchor-link" href="#How to always ignore the same files?"><h4>How to always ignore the same files?</h4></a>
      <a class="anchor-link" href="#Remove a file from a commit"><h3>Remove a file from a commit</h3></a>
      <a class="anchor-link" href="#Delete the file and create a new commit"><h4>Delete the file and create a new commit</h4></a>
      <a class="anchor-link" href="#Undo the commit and create it again without the file"><h4>Undo the commit and create it again without the file</h4></a>
      <a class="anchor-link" href="#Change history of a file (git log &#x3C;file&#x3E;)"><h3>Change history of a file (<code>git log &#x3C;file&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#View modifications of a file at a specific point in history (git show &#x3C;hash&#x3E; &#x3C;file&#x3E; or git diff &#x3C;file&#x3E;)"><h3>View modifications of a file at a specific point in history (<code>git show &#x3C;hash&#x3E; &#x3C;file&#x3E;</code> or <code>git diff &#x3C;file&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Journey to the past (git reset --hard &#x3C;hash&#x3E; or git reset --soft &#x3C;hash&#x3E;)"><h3>Journey to the past (<code>git reset --hard &#x3C;hash&#x3E;</code> or <code>git reset --soft &#x3C;hash&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Back to the Future (git reflog)"><h3>Back to the Future (<code>git reflog</code>)</h3></a>
      <a class="anchor-link" href="#File Search (git grep &#x3C;word&#x3E;)"><h3>File Search (<code>git grep &#x3C;word&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Searching in Commits (git log -S &#x3C;word&#x3E;)"><h3>Searching in Commits (<code>git log -S &#x3C;word&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Branches"><h2>Branches</h2></a>
      <a class="anchor-link" href="#Create a branch (git branch &#x3C;branch name&#x3E;)"><h3>Create a branch (<code>git branch &#x3C;branch name&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#List branches (git branch)"><h3>List branches (<code>git branch</code>)</h3></a>
      <a class="anchor-link" href="#Rename branches, farewell to the master branch (git branch -m &#x3C;old name&#x3E; &#x3C;new name&#x3E;)"><h3>Rename branches, farewell to the <code>master</code> branch (<code>git branch -m &#x3C;old name&#x3E; &#x3C;new name&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Switch branches (git switch &#x3C;branch&#x3E;)"><h3>Switch branches (<code>git switch &#x3C;branch&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Get the current branch (git branch --show-current)"><h3>Get the current branch (<code>git branch --show-current</code>)</h3></a>
      <a class="anchor-link" href="#List of most recent branches (git branch --sort=-committerdate)"><h3>List of most recent branches (<code>git branch --sort=-committerdate</code>)</h3></a>
      <a class="anchor-link" href="#The deprecated git checkout command"><h3>The deprecated <code>git checkout</code> command</h3></a>
      <a class="anchor-link" href="#Merging branches (git merge)"><h3>Merging branches (<code>git merge</code>)</h3></a>
      <a class="anchor-link" href="#Fast-forward"><h4>Fast-forward</h4></a>
      <a class="anchor-link" href="#No fast-forward or true merge"><h4>No fast-forward or true merge</h4></a>
      <a class="anchor-link" href="#Squash"><h4>Squash</h4></a>
      <a class="anchor-link" href="#Conflicts when merging"><h3>Conflicts when merging</h3></a>
      <a class="anchor-link" href="#We create a conflict"><h4>We create a conflict</h4></a>
      <a class="anchor-link" href="#Resolve a conflict"><h4>Resolve a conflict</h4></a>
      <a class="anchor-link" href="#Delete branches"><h3>Delete branches</h3></a>
      <a class="anchor-link" href="#Delete merged branches (git branch -d &#x3C;branch&#x3E;)"><h4>Delete merged branches (<code>git branch -d &#x3C;branch&#x3E;</code>)</h4></a>
      <a class="anchor-link" href="#Delete branches that have not been merged with the main branch (git branch -D &#x3C;branch&#x3E;)"><h4>Delete branches that have not been merged with the main branch (<code>git branch -D &#x3C;branch&#x3E;</code>)</h4></a>
      <a class="anchor-link" href="#Working with remote repositories"><h2>Working with remote repositories</h2></a>
      <a class="anchor-link" href="#Clone a remote repository (git clone &#x3C;repository&#x3E;)"><h3>Clone a remote repository (<code>git clone &#x3C;repository&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Linking a Local Repository to a Remote One"><h3>Linking a Local Repository to a Remote One</h3></a>
      <a class="anchor-link" href="#Push changes from a local repository to a remote repository (git push)"><h3>Push changes from a local repository to a remote repository (<code>git push</code>)</h3></a>
      <a class="anchor-link" href="#Download changes from a remote repository to a local repository (git pull)"><h3>Download changes from a remote repository to a local repository (<code>git pull</code>)</h3></a>
      <a class="anchor-link" href="#Synchronize remote and local branches"><h3>Synchronize remote and local branches</h3></a>
      <a class="anchor-link" href="#Alias"><h2>Alias</h2></a>
      <a class="anchor-link" href="#Aliases of existing git commands"><h3>Aliases of existing git commands</h3></a>
      <a class="anchor-link" href="#Aliases for commands that are not git commands"><h3>Aliases for commands that are not git commands</h3></a>
      <a class="anchor-link" href="#List with all the aliases"><h3>List with all the aliases</h3></a>
      <a class="anchor-link" href="#Stash store (git stash)"><h2>Stash store (<code>git stash</code>)</h2></a>
      <a class="anchor-link" href="#Everything to the stash (git stash -u -a)"><h3>Everything to the stash (<code>git stash -u -a</code>)</h3></a>
      <a class="anchor-link" href="#List of stashes (git stash list)"><h3>List of stashes (<code>git stash list</code>)</h3></a>
      <a class="anchor-link" href="#Stash with description (git stash push -m &#x3C;description&#x3E;)"><h3>Stash with description (<code>git stash push -m &#x3C;description&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Recover the last stash (git stash pop)"><h3>Recover the last stash (<code>git stash pop</code>)</h3></a>
      <a class="anchor-link" href="#Remove a stash (git stash drop &#x3C;position&#x3E;)"><h3>Remove a stash (<code>git stash drop &#x3C;position&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Clear all stashes (git stash clear)"><h3>Clear all stashes (<code>git stash clear</code>)</h3></a>
      <a class="anchor-link" href="#Tags"><h2>Tags</h2></a>
      <a class="anchor-link" href="#Create a new tag (git tag -a &#x3C;tag_name&#x3E; -m &quot;&#x3C;message&#x3E;&quot;)"><h3>Create a new tag (<code>git tag -a &#x3C;tag_name&#x3E; -m &quot;&#x3C;message&#x3E;&quot;</code>)</h3></a>
      <a class="anchor-link" href="#List of tags (git tag)"><h3>List of tags (<code>git tag</code>)</h3></a>
      <a class="anchor-link" href="#Create a tag from an old commit (git tag -a &#x3C;tag_name&#x3E; -m &quot;&#x3C;message&#x3E;&quot; &#x3C;hash&#x3E;)"><h3>Create a tag from an old commit (<code>git tag -a &#x3C;tag_name&#x3E; -m &quot;&#x3C;message&#x3E;&quot; &#x3C;hash&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Switching between tags (git reset --hard &#x3C;tag&#x3E; or git reset --soft &#x3C;tag&#x3E;)"><h3>Switching between tags (<code>git reset --hard &#x3C;tag&#x3E;</code> or <code>git reset --soft &#x3C;tag&#x3E;</code>)</h3></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Disclaimer: This post has been translated to English using a machine translation model. Please, let me know if you find any mistakes.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Introduction">Introduction<a class="anchor-link" href="#Introduction"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 83" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Git is a version control software created by Linus Torvalds, who developed it to have good version control while developing the Linux kernel.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="The areas of git">The areas of git<a class="anchor-link" href="#The areas of git"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 84" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Git has three areas, although a fourth can also be considered.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/git-states.webp" alt="git states">
      <ul>
        <li>The first one is our workspace, where we have all our code. Here, when we modify or create a file, it becomes untracked, so we have to move it to the <code>staged</code> area.</li>
        <li>The second area is the <code>staged</code>. Here, the files that we had modified or created and were not *tracked* move to being tracked, meaning Git starts tracking them. We will send the files to the next <code>head</code> area from here.</li>
        <li>The third area is the <code>head</code>. Here we have recorded a version of our code. By recording versions, we can revert to previous versions if necessary. The recorded version of our code can be sent to a server so that it is accessible by multiple people.</li>
        <li>The three areas mentioned above correspond to local work, but there is one more area and that is the <code>remote server</code>. Here we send the recorded version of our code to a server so that we have access to the code from anywhere, or so that more people can access it.</li>
      </ul>
      <p>To make an analogy, it's like a scenario where you are going to take a photo. First, you have your modified files, so the ones you want to immortalize you send to the <code>staged</code> area, which is the stage. Once you've sent all the files you consider necessary, you take the photo, meaning you send all the files to the <code>head</code> area. This way, you can keep taking many photos as the code evolves, so you can have a photo album showing the evolution of the code. Finally, you can upload that photo to a server to make it accessible to more people, which means you send them to the <code>remote server</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Install git">Install git<a class="anchor-link" href="#Install git"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 85" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In most Linux distributions, Git is already installed. We can check this by running <code>git --version</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="o">--</span><span class="n">version</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'git version 2.25.1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If you don't have it or want to update the version of git, just run <code>sudo apt update</code> and then <code>sudo apt install git</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">sudo</span> <span class="n">apt</span> <span class="n">update</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">sudo</span> <span class="n">apt</span> <span class="n">install</span> <span class="n">git</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[sudo] password for maximo.fernandez@AEROESPACIAL.SENER:',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We check the version again</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="o">--</span><span class="n">version</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'git version 2.25.1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In my case, I already had the latest version</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Initial Setup">Initial Setup<a class="anchor-link" href="#Initial Setup"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 86" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Setting the name and email">Setting the name and email<a class="anchor-link" href="#Setting the name and email"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 87" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Before starting to use Git, it is advisable to make some minimal configurations such as your username and email. This information will be displayed when showing who has made changes to the code. To do this, you need to run</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">git config --global user.name "&lt;username&gt;"<br>git config --global user.email "&lt;email&gt;"</code></pre></div>
            </section>
      <p>In my case, I would put</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">git config --global user.name "MaximoFN"<br>git config --global user.email "maximofn@gmail.com"</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As can be seen, the <code>--global</code> flag changes the global git configuration. However, if you need to set different data for a specific repository, simply navigate to that repository and remove the <code>--global</code> flag from the previous commands.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">git config user.name "&lt;username&gt;"<br>git config user.email "&lt;email&gt;"</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Set the default editor">Set the default editor<a class="anchor-link" href="#Set the default editor"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 88" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Later on, when we explain what <code>commit</code>s are, we will see that one of the options can open a browser. By default, git will try to use <code>vim</code>, but since it is not a very easy editor to use, we can modify it. Below is how to do it with some common editors.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">git config --global core.editor "code"  # vscode as editor<br>git config --global core.editor "atom"  # Atom as editor<br>git config --global core.editor "subl"  # Sublime Text as editor<br>git config --global core.editor "nano"  # Nano as the editor</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Check git configuration">Check git configuration<a class="anchor-link" href="#Check git configuration"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 89" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To review the git configuration we can use <code>git config --list</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'user.name=maximofn',
          'user.email=maximofn@gmail.com',
          'user.user=maximofn',
          'http.sslverify=true',
          'core.repositoryformatversion=0',
          'core.filemode=true',
          'core.bare=false',
          'core.logallrefupdates=true',
          'remote.origin.url=https://github.com/maximofn/portafolio.git',
          'remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*',
          'branch.main.remote=origin',
          'branch.main.merge=refs/heads/main',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can use the flags <code>--global</code>, <code>--local</code>, and <code>--system</code> to view only the global configuration, local (if it exists), and system (if it exists).</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="o">--</span><span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'user.name=maximofn',
          'user.email=maximofn@gmail.com',
          'user.user=maximofn',
          'http.sslverify=true',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">local</span> <span class="o">--</span><span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'core.repositoryformatversion=0',
          'core.filemode=true',
          'core.bare=false',
          'core.logallrefupdates=true',
          'remote.origin.url=https://github.com/maximofn/portafolio.git',
          'remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*',
          'branch.main.remote=origin',
          'branch.main.merge=refs/heads/main',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">system</span> <span class="o">--</span><span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'fatal: unable to read config file &#x27;/etc/gitconfig&#x27;: No such file or directory',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In my case there is no system configuration</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If you want to know only the value of a configuration parameter, it would be enough to enter <code>git config &#x3C;parameter&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'maximofn',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Local version control">Local version control<a class="anchor-link" href="#Local version control"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 90" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Initialize a new repository (git init)">Initialize a new repository (<code>git init</code>)<a class="anchor-link" href="#Initialize a new repository (git init)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 91" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>There are two ways to initialize a new repository:</p>
      <ul>
        <li>One is by doing <code>git init <repository name></code>. This will create a new folder with the repository name.</li>
        <li>Another is navigating to the folder where we want to create a repository and running <code>git init</code></li>
      </ul>
      <p>I am going to create a new repository</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">init</span> <span class="n">notebook_git</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Inicializado repositorio Git vacÃ­o en /home/wallabot/Documentos/web/portafolio/posts/notebook_git/.git/',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we now run <code>ls</code> we will see that a new folder called <code>notebook_git</code> has been created.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ls</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">notebook_git</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'notebook_git',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We move to it</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now inside the folder we have two ways to know that the repository has been created, one by doing <code>ls -a</code> which will show all files and we will see that there is a folder called <code>.git</code>. The other way is by doing <code>git status</code> which will tell us the state of the repository.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '.  ..  .git',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'No hay commits todavÃ­a',
          'no hay nada para confirmar (crea/copia archivos y usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Since we are in a notebook, each cell has its <code>path</code> within the notebook's <code>path</code>, which is why I had to do <code>cd notebook_git &amp;&amp;</code> twice, to change to the folder with the repository we just created.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we now try <code>git status</code> in another <code>path</code> where a repository has not been initialized, it will give us an error.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="o">~/</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'fatal: no es un repositorio git (ni ninguno de los directorios superiores): .git',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Create new files">Create new files<a class="anchor-link" href="#Create new files"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 92" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Once we have initialized a repository, we can start creating new files, so we create one and see what happens</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Hello World&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">hello</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we now run <code>git status</code> again, we see that it shows us</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'No hay commits todavÃ­a',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se serÃ¡ confirmado)',
          'hello.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As you can see now, it's telling us that the file <code>hello.py</code> is not being tracked. This means we need to add <code>hello.py</code> to the <code>staged</code> area, which we remember was like the stage where we put everything that we will later take a photo of.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Undo the creation of a new file">Undo the creation of a new file<a class="anchor-link" href="#Undo the creation of a new file"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 93" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In this case, since these are files that git is not yet tracking, that is, they are not yet in the <code>staged</code> area, we would have three ways to do it</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <ul>
        <li>Simply deleting it: Since git is not yet tracking the file, we could do <code>rm hello.py</code> and that's it.</li>
        <li>Deleting it using a Git command: We previously deleted with <code>rm</code>, but you might be on a system that does not have the <code>rm</code> command. In that case, you can use the Git command <code>git rm hello.py</code>* Finally, we can use <code>git clean</code>. This is useful, for example, when there are many new files, and thus, in a single command, we remove all of them.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="git clean"><code>git clean</code><a class="anchor-link" href="#git clean"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 94" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we run <code>git clean</code> by itself, it will give us an error</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">clean</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'fatal: clean.requireForce default en true y ninguno de -i, -n, ni -f entregado; rehusando el clean',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>It is telling us that we need to add one of these flags <code>-n</code>, <code>-i</code> or <code>-f</code>. Additionally, we will look at the <code>-d</code> flag.</p>
      <ul>
        <li><code>-n</code> (dry run): It will tell us which files are going to be deleted, but it won't delete them.</li>
        <li><code>-i</code>: It will ask for each file that is going to be deleted* <code>-f</code>: Will force the deletion of files</li>
        <li><code>-d</code>: It will also delete folders</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's test it, first we do <code>git clean -n</code> to know which files would be deleted</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">clean</span> <span class="o">-</span><span class="n">n</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'SerÃ¡ borrado hello.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we do <code>git clean -f</code> to delete it, since we agree that it should be deleted.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">clean</span> <span class="o">-</span><span class="n">f</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Borrando hello.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, it has deleted <code>hello.py</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Add a file to the staging area (git add)">Add a file to the staging area (<code>git add</code>)<a class="anchor-link" href="#Add a file to the staging area (git add)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 95" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We go back to creating a file</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Hola mundo&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We run <code>git status</code> again to check that we have the file</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'No hay commits todavÃ­a',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se serÃ¡ confirmado)',
          'hola.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that we have the file <code>hola.py</code> but git is not tracking it. Additionally, it helps us and tells us to <code>use &quot;git add&quot; to track them</code></p>
      <p>The syntax is as follows <code>git add &#x3C;file&#x3E;</code>, but we can do it in several ways</p>
      <ul>
        <li>If we want to add more than one file, we can do so by listing all the files we want to add to the staging area, separated by a space: <code>git add <file1> <file2> <file3></code></li>
        <li>If we want to add all files of the same format, for example, if we want to add all Python files it would be <code>git add *.py</code></li>
        <li>If we want to add all files from a folder <code>git add <folder>/</code></li>
        <li>If we want to add all files, we have three options: <code>git add --all</code>, <code>git add -A</code> or <code>git add .</code></li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's add the newly created file</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We run a <code>git status</code> to see what has happened</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'No hay commits todavÃ­a',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git rm --cached &amp;lt;archivo&amp;gt;...&quot; para sacar del Ã¡rea de stage)',
          'nuevos archivos: hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, it tells us that we have a new file being tracked and awaiting confirmation <code>hola.py</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Unstage a file (git reset)">Unstage a file (<code>git reset</code>)<a class="anchor-link" href="#Unstage a file (git reset)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 96" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we add a file to the staging area and want to remove it, we have to use <code>git reset &#x3C;file&#x3E;</code>, let's see it.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We create and add a new file to the staging area</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Este no&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">adios</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">adios</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We run <code>git status</code> to check that it is in the staging area</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'No hay commits todavÃ­a',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git rm --cached &amp;lt;archivo&amp;gt;...&quot; para sacar del Ã¡rea de stage)',
          'nuevos archivos: adios.py',
          'nuevos archivos: hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, there are <code>hola.py</code> and <code>adios.py</code>, so we use <code>git reset adios.py</code> to remove it from the staging area.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="n">adios</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We run a <code>git status</code> to check that it has come out</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'No hay commits todavÃ­a',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git rm --cached &amp;lt;archivo&amp;gt;...&quot; para sacar del Ã¡rea de stage)',
          'nuevos archivos: hola.py',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se serÃ¡ confirmado)',
          'adios.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can see that <code>adios.py</code> is no longer being tracked by git, it has been removed from the staging area.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We do <code>git clean -f</code> to delete it</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">clean</span> <span class="o">-</span><span class="n">f</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Borrando adios.py',
          'En la rama master',
          'No hay commits todavÃ­a',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git rm --cached &amp;lt;archivo&amp;gt;...&quot; para sacar del Ã¡rea de stage)',
          'nuevos archivos: hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Commit (git commit)">Commit (<code>git commit</code>)<a class="anchor-link" href="#Commit (git commit)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 97" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we go back to the analogy where we said that the staging area was the stage where we sent the files we wanted to take a picture of, now it's time to take the picture to immortalize the current state. This is making a <code>commit</code></p>
      <p>This is how the current state of the code is registered; thus, with each commit, a record of the code's evolution will be kept. Similarly to a photo album, with each photo we have a record of the evolution of what we put on stage.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Since Git is registering the code change when making a commit, it doesn't allow us to commit without at least a minimal comment. Therefore, there are two ways to make a commit.</p>
      <ul>
        <li><code>git commit</code> this way the editor we have set in git's configuration will open. If we haven't configured a default editor, <code>vi</code> will open. If we want to change the editor configuration, we can do, for example, <code>git config --global core.editor "code"</code> or <code>git config core.editor "code"</code> to set vscode as the default editor globally or locally.</li>
        <li><code>git commit -m "Commit message"</code>. This way we add the message directly</li>
      </ul>
      <p>When making the commit in the first way, we can have a first line that will be the commit title and several more lines where it is explained in more detail. If we want to be able to do this with the <code>-m</code> flag, it is enough to add several consecutive <code>-m</code> flags: <code>git commit -m &quot;Commit title&quot; -m &quot;First line explaining more&quot; -m &quot;Second line explaining more&quot;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Once we have made the commit, this will save a record of the change to our repository locally. We haven't connected to a remote server yet.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's try to make the commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Primer commit, hola.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master (commit-raÃ­z) 1c95e4f] Primer commit, hola.py',
          '1 file changed, 1 insertion(+)',
          'create mode 100644 hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We do a <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'nada para hacer commit, el Ã¡rbol de trabajo estÃ¡ limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that it tells us there is nothing new, we have our entire repository fully under control.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Skipping the staging area with git commit -a -m or git commit -am">Skipping the staging area with <code>git commit -a -m</code> or <code>git commit -am</code><a class="anchor-link" href="#Skipping the staging area with git commit -a -m or git commit -am"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 98" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In the case where we want to move all modified files to the staging area and then commit them, we can do this in a single step using <code>git commit -a -m &quot;message&quot;</code>, <code>git commit --all -m &quot;message&quot;</code>, or <code>git commit -am &quot;message&quot;</code></p>
      <blockquote>
      <p>Note: This is only valid if a file is modified. If the file is new and git is not tracking it, this is not valid.</p>
      </blockquote>
      <p>Let's see an example, we are going to modify <code>hola.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;He aÃ±adido una nueva linea&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's do a <code>git status</code> to make sure</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios no rastreados para el commit:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para actualizar lo que serÃ¡ confirmado)',
          '&#x20;&#x20;(usa &quot;git restore &amp;lt;archivo&amp;gt;...&quot; para descartar los cambios en el directorio de trabajo)',
          'modificados:     hola.py',
          'sin cambios agregados al commit (usa &quot;git add&quot; y/o &quot;git commit -a&quot;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can see that in the git help itself, it suggests using <code>git commit -a</code>, so let's do it.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;Segundo commit, hola.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master 6e99e73] Segundo commit, hola.py',
          '1 file changed, 1 insertion(+)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We run <code>git status</code> again</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'nada para hacer commit, el Ã¡rbol de trabajo estÃ¡ limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>There is nothing to commit, the change has already been committed.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Modify a file that has already been committed">Modify a file that has already been committed<a class="anchor-link" href="#Modify a file that has already been committed"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 99" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>While we are developing, we might modify files that we have already committed. In our case, we are going to add a line to <code>hola.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;He aÃ±adido una tercera linea&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">cat</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'print(&#x27;Hola mundo&#x27;)',
          'print(&#x27;He aÃ±adido una nueva linea&#x27;)',
          'print(&#x27;He aÃ±adido una tercera linea&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we run <code>git status</code> we will see that <code>hola.py</code> has modifications</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios no rastreados para el commit:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para actualizar lo que serÃ¡ confirmado)',
          '&#x20;&#x20;(usa &quot;git restore &amp;lt;archivo&amp;gt;...&quot; para descartar los cambios en el directorio de trabajo)',
          'modificados:     hola.py',
          'sin cambios agregados al commit (usa &quot;git add&quot; y/o &quot;git commit -a&quot;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="View changes in a file (git diff &#x3C;file&#x3E;)">View changes in a file (<code>git diff &#x3C;file&#x3E;</code>)<a class="anchor-link" href="#View changes in a file (git diff &#x3C;file&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 100" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We might have been developing for a while since the last commit and not know what modifications we've made. For this, we use <code>git diff &#x3C;file&#x3E;</code> which will tell us the changes we've made.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">diff</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'diff --git a/hola.py b/hola.py',
          'index 91dee80..fba0d22 100644',
          '--- a/hola.py',
          '+++ b/hola.py',
          '@@ -1,2 +1,3 @@',
          'print(&#x27;Hola mundo&#x27;)',
          'print(&#x27;He aÃ±adido una nueva linea&#x27;)',
          '+print(&#x27;He aÃ±adido una tercera linea&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Although it's not very intuitive, we can see that we've added the last line in <code>hola.py</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Unstage changes in a file (git restore &#x3C;file&#x3E;)">Unstage changes in a file (<code>git restore &#x3C;file&#x3E;</code>)<a class="anchor-link" href="#Unstage changes in a file (git restore &#x3C;file&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 101" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we don't like the changes we've made and want to remove them, what we can do is <code>git restore &#x3C;file&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">restore</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's see what has happened with a <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'nada para hacer commit, el Ã¡rbol de trabajo estÃ¡ limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that the changes in <code>hola.py</code> have been discarded since the last commit.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Change history (git log)">Change history (<code>git log</code>)<a class="anchor-link" href="#Change history (git log)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 102" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>With git we can see the history of all the changes we have been committing, for this we use <code>git log</code>. It's like if we were to review our photo album.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'commit 6e99e73cf0c5474078cc9f328ee6a54fb9ffb169 (HEAD -&amp;gt; master)',
          'Author: maximofn &amp;lt;maximofn@gmail.com&amp;gt;',
          'Date:   Sun Apr 16 02:29:04 2023 +0200',
          '&#x20;&#x20;&#x20;&#x20;Segundo commit, hola.py',
          'commit 1c95e4fd8388ceedee368e0121c4b0ef4900c2ac',
          'Author: maximofn &amp;lt;maximofn@gmail.com&amp;gt;',
          'Date:   Sun Apr 16 02:28:44 2023 +0200',
          '&#x20;&#x20;&#x20;&#x20;Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can see the history of changes, we need to read it from bottom to top.</p>
      <p>First we see the commit with the message <code>Initial commit, hello.py</code>, we can see the date, the author, and the hash, which is its unique identifier</p>
      <p>Below we see the second commit with the message <code>Second commit, hello.py</code>, along with its date, author, and hash. It also shows where the <code>HEAD</code> is and which branch we are on.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we use flags, we can obtain information in different ways, but depending on which flags we use, one might be more suitable than others. The following are some useful flags:</p>
      <ul>
        <li><code>git log --oneline</code>: Displays commits in a single line, with the abbreviated hash and the commit message.</li>
        <li><code>git log --graph</code>: Shows a text graph of the repository history, including branches and merges.</li>
        <li><code>git log --decorate</code>: Shows the references (branches, tags, HEAD, etc.) in the log along with the commit they point to.</li>
        <li><code>git log --author="<author>"</code>: Filters the commit history to show only those made by a specific author.</li>
        <li><code>git log --since="<date>"</code>: Shows the commits made since a specific date. You can use different date formats, such as "1 week ago" or "2023-01-01".</li>
        <li><code>git log --until="<date>"</code>: Shows the commits made until a specific date.</li>
        <li><code>git log <branch></code>: Shows the commits of a specific branch.* <code>git log <commit1>..<commit2></code>: Shows the commits that are in the range between two specific commits.</li>
        <li><code>git log --grep="<word>"</code>: Searches through the commit messages for a specific word or phrase.</li>
        <li><code>git log -p</code>: Shows the differences (in patch form) introduced in each commit.</li>
        <li><code>git log -n <number></code>: Displays the last number of commits. For example, git log -n 5 will show the last 5 commits.</li>
        <li><code>git log --stat</code>: Shows file change statistics for each commit, such as the number of lines added and removed.</li>
      </ul>
      <p>For example, a convenient way to view the history is to use <code>git log --graph --oneline --decorate</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 6e99e73 (HEAD -&amp;gt; master) Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can see that instead of giving us the entire hash, it only gives us a few numbers. This is because, for now, the repository has such little history that those few numbers are sufficient. If we wanted to go back to the previous point, instead of entering the entire hash (<code>7c448f69e30ab1b5783f5cf9ee3ae5bc362ecd4d</code>), just entering <code>7c448f6</code> would be enough.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We will talk about branches later, but now let's see what <code>HEAD</code> is.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="HEAD">HEAD<a class="anchor-link" href="#HEAD"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 103" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>While developing, we have been able to make changes and commit them, that is, we have been filling in the photo album of our code. <code>HEAD</code> is the position in the album where we are.</p>
      <p>Normally it is the last position of all the commits.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we want to know where we are, we can do so with <code>git rev-parse HEAD</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">rev</span><span class="o">-</span><span class="n">parse</span> <span class="n">HEAD</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '6e99e73cf0c5474078cc9f328ee6a54fb9ffb169',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As can be seen, the obtained hash matches the last one obtained when running <code>git log</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'commit 6e99e73cf0c5474078cc9f328ee6a54fb9ffb169 (HEAD -&amp;gt; master)',
          'Author: maximofn &amp;lt;maximofn@gmail.com&amp;gt;',
          'Date:   Sun Apr 16 02:29:04 2023 +0200',
          '&#x20;&#x20;&#x20;&#x20;Segundo commit, hola.py',
          'commit 1c95e4fd8388ceedee368e0121c4b0ef4900c2ac',
          'Author: maximofn &amp;lt;maximofn@gmail.com&amp;gt;',
          'Date:   Sun Apr 16 02:28:44 2023 +0200',
          '&#x20;&#x20;&#x20;&#x20;Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Modify a commit (git commit --amend)">Modify a commit (<code>git commit --amend</code>)<a class="anchor-link" href="#Modify a commit (git commit --amend)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 104" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We might want to modify a commit, either because we want to change the message, or because we want to add more files to the commit, so we will cover both cases.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Modify the commit message">Modify the commit message<a class="anchor-link" href="#Modify the commit message"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 105" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If you only want to modify the message, what we need to do is <code>git commit --amend -m &quot;New message&quot;</code>, let's see an example, we are going to modify <code>hola.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Esta es la tercera linea&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We do a <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios no rastreados para el commit:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para actualizar lo que serÃ¡ confirmado)',
          '&#x20;&#x20;(usa &quot;git restore &amp;lt;archivo&amp;gt;...&quot; para descartar los cambios en el directorio de trabajo)',
          'modificados:     hola.py',
          'sin cambios agregados al commit (usa &quot;git add&quot; y/o &quot;git commit -a&quot;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Indeed we see that <code>hola.py</code> has modifications, so we make a commit with these changes.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;Tercer commot, hola.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master 60e2ffd] Tercer commot, hola.py',
          '1 file changed, 1 insertion(+)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's check the commit history</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 60e2ffd (HEAD -&amp;gt; master) Tercer commot, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>**Oh no!** we wrote <code>commot</code> instead of <code>commit</code>, so let's modify the message</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">--</span><span class="n">amend</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Tercer commit, hola.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master c4930d7] Tercer commit, hola.py',
          'Date: Sun Apr 16 02:29:59 2023 +0200',
          '1 file changed, 1 insertion(+)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We revisit the history</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* c4930d7 (HEAD -&amp;gt; master) Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that it is now correct.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Add files to the last commit">Add files to the last commit<a class="anchor-link" href="#Add files to the last commit"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 106" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suppose we forgot to add a file to the last commit, we simply do a <code>git add</code> with that file and then do <code>git commit --amend -m &quot;message&quot;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's create two new files</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Este es el archivo 1&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Este es el archivo 2&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo2</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we only commit one</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Commit con el archivo 1&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master 285b243] Commit con el archivo 1',
          '1 file changed, 1 insertion(+)',
          'create mode 100644 archivo1.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se serÃ¡ confirmado)',
          'archivo2.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 285b243 (HEAD -&amp;gt; master) Commit con el archivo 1',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, we have left out file 2, so we modify the commit and add file 2.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo2</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">--</span><span class="n">amend</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Commit con los archivos 1 y 2&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master 04ebd1f] Commit con los archivos 1 y 2',
          'Date: Sun Apr 16 02:30:26 2023 +0200',
          '2 files changed, 2 insertions(+)',
          'create mode 100644 archivo1.py',
          'create mode 100644 archivo2.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'nada para hacer commit, el Ã¡rbol de trabajo estÃ¡ limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 04ebd1f (HEAD -&amp;gt; master) Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now the last commit has the two new files</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Undo a Commit (git reset HEAD~1)">Undo a Commit (<code>git reset HEAD~1</code>)<a class="anchor-link" href="#Undo a Commit (git reset HEAD~1)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 107" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>With this command, we tell Git to go back one position in the commit history. There are two options: <code>--soft</code>, which will not delete the changes we have made, and <code>--hard</code>, which will.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Undo a commit while keeping the changes (git reset --soft HEAD~1)">Undo a commit while keeping the changes (<code>git reset --soft HEAD~1</code>)<a class="anchor-link" href="#Undo a commit while keeping the changes (git reset --soft HEAD~1)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 108" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's create a new file</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Este es el archivo 3&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo3</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We do a <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se serÃ¡ confirmado)',
          'archivo3.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We make a commit adding this file</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo3</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Commit con el archivos 3&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master 6dc7be6] Commit con el archivos 3',
          '1 file changed, 1 insertion(+)',
          'create mode 100644 archivo3.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 6dc7be6 (HEAD -&amp;gt; master) Commit con el archivos 3',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that in the last commit there is <code>archivo3.py</code>, let's remove the commit while keeping <code>archivo3.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">soft</span> <span class="n">HEAD</span><span class="o">~</span><span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We now run a <code>git log</code> to see if the last commit has been removed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 04ebd1f (HEAD -&amp;gt; master) Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Indeed, we see that the last commit has been removed.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We run a <code>git status</code> to check if <code>archivo3.py</code> has been preserved.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del Ã¡rea de stage)',
          'nuevos archivos: archivo3.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>It has been maintained</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Undo a commit by discarding the changes (git reset --hard HEAD~1)">Undo a commit by discarding the changes (<code>git reset --hard HEAD~1</code>)<a class="anchor-link" href="#Undo a commit by discarding the changes (git reset --hard HEAD~1)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 109" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We have <code>archivo3.py</code> that we have created and it is in the staging area</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del Ã¡rea de stage)',
          'nuevos archivos: archivo3.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Therefore, we make a commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Commit con el archivo 3&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master 0147d65] Commit con el archivo 3',
          '1 file changed, 1 insertion(+)',
          'create mode 100644 archivo3.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We run a <code>git log</code> to check that there is a commit with this file</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 0147d65 (HEAD -&amp;gt; master) Commit con el archivo 3',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Indeed there is a commit adding <code>archivo3.py</code>. Now we will remove this commit by discarding <code>archivo3.py</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="n">HEAD</span><span class="o">~</span><span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'HEAD estÃ¡ ahora en 04ebd1f Commit con los archivos 1 y 2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We run a <code>git log</code> to check that the last commit has been removed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 04ebd1f (HEAD -&amp;gt; master) Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The commit with <code>archivo3.py</code> has been removed, now we run a <code>git status</code> to check what happened to <code>archivo3.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'nada para hacer commit, el Ã¡rbol de trabajo estÃ¡ limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p><code>archivo3.py</code> does not appear as a file that needs to be committed, let's check if it has indeed been completely removed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">archivo3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Indeed, <code>archivo3.py</code> has been removed from the file system.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Modify a remote commit (git push --force)">Modify a remote commit (<code>git push --force</code>)<a class="anchor-link" href="#Modify a remote commit (git push --force)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 110" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Although later we will see how to synchronize with remote repositories, in the case that you have made a commit, pushed it to a remote repository (<code>git push</code>), and then modified the commit locally (because you changed the message or undid the commit), to revert the changes in the remote repository you need to do <code>git push --force</code></p>
      <blockquote>
      <p>**Careful!**: This command modifies the remote repository's history, so it can affect other people working with that repository. Therefore, use this command with great care and caution. It is better to have a commit history where the first commit has the incorrect description and then a new commit with the correct description, rather than modifying the history.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Modify a remote commit (git push --force-with-lease)">Modify a remote commit (<code>git push --force-with-lease</code>)<a class="anchor-link" href="#Modify a remote commit (git push --force-with-lease)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 111" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If you are convinced to change the history, at least use <code>git push --force-with-lease</code>, which will not modify commits that have been made subsequently.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Ignoring files (.gitignore)">Ignoring files (<code>.gitignore</code>)<a class="anchor-link" href="#Ignoring files (.gitignore)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 112" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suppose we have a file with <code>API key</code>s, this file we actually don't want to save in the repository, because if we later share this repository, anyone would have access to these keys, so we need to tell git not to track this file.</p>
      <p>This is done with the <code>.gitignore</code> file, in which we add the path of the files or directories that we do not want git to track.</p>
      <p>Let's see it</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We create the file with the keys</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">api_keys</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we do <code>git status</code> we see that Git considers it</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se serÃ¡ confirmado)',
          'api_keys.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we do nothing, one day we might run a <code>git add .</code> and add it to the repository, so for safety, we need to tell git not to track this file. To do this, we create the <code>.gitignore</code> file by adding this file.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;api_keys.py&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">.</span><span class="n">gitignore</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's see what happens if we now do <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se serÃ¡ confirmado)',
          '.gitignore',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that git has stopped considering <code>api_keys.py</code>, but it does consider <code>.gitignore</code>, so we make a commit to add <code>.gitignore</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="o">.</span><span class="n">gitignore</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;AÃ±adido .gitignore&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master 0b09cfa] AÃ±adido .gitignore',
          '1 file changed, 1 insertion(+)',
          'create mode 100644 .gitignore',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="What files to add to the .gitignore?">What files to add to the <code>.gitignore</code>?<a class="anchor-link" href="#What files to add to the .gitignore?"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 113" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <ul>
        <li>Files containing credentials or API keys (you shouldn't upload them to the repository, just inject them via environment variables)</li>
        <li>Configuration folders of your editor (<code>/.vscode</code>)</li>
        <li>Log files</li>
        <li>System files like <code>.DS_Store</code>* Folders generated with static files or builds such as <code>/dist</code> or <code>/build</code></li>
        <li>Dependencies that can be downloaded (<code>/node_modules</code>)</li>
        <li>Testing coverage (<code>/coverage</code>)</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="How to always ignore the same files?">How to always ignore the same files?<a class="anchor-link" href="#How to always ignore the same files?"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 114" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If for example your IDE always generates the same configuration files, it would be good to tell git to always ignore those files. For this, we create a global <code>.gitignore</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">touch</span> <span class="o">~/.</span><span class="n">gitignore_global</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>In my case I will add the directory <code>__pycache__/</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">echo</span> <span class="s2">&quot;__pycache__/&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">~/.</span><span class="n">gitignore_global</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we need to tell Git that this is our global <code>.gitignore</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">core</span><span class="o">.</span><span class="n">excludesfile</span> <span class="o">~/.</span><span class="n">gitignore_global</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ready, from now on the directory <code>__pycache__/</code> will always be ignored.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>GitHub has a <a href="https://github.com/github/gitignore" target="_blank" rel="nofollow noreferrer">repository</a> with <code>.gitignore</code>s for many languages, I have based mine on <a href="https://github.com/github/gitignore/blob/main/Python.gitignore">this one</a> for Python</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Remove a file from a commit">Remove a file from a commit<a class="anchor-link" href="#Remove a file from a commit"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 115" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's see how to remove a file from a commit we have made. First, we create two files and commit them.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Este es el archivo 4&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo4</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Este es el archivo 5&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo5</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We make a commit with the two files</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo4</span><span class="o">.</span><span class="n">py</span> <span class="n">archivo5</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Commit con los archivos 4 y 5&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master e3153a5] Commit con los archivos 4 y 5',
          '2 files changed, 2 insertions(+)',
          'create mode 100644 archivo4.py',
          'create mode 100644 archivo5.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* e3153a5 (HEAD -&amp;gt; master) Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>From here on, there are two options to remove a file from a commit:</p>
      <ul>
        <li>Delete the file and create a new commit* Undo the commit and create it again without the file</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Delete the file and create a new commit">Delete the file and create a new commit<a class="anchor-link" href="#Delete the file and create a new commit"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 116" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suppose we want to delete the file <code>archivo5.py</code>, so we delete it with <code>git rm archivo5.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">rm</span> <span class="n">archivo5</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'rm &#x27;archivo5.py&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's do a <code>git status</code> to see what happens</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del Ã¡rea de stage)',
          'borrados:        archivo5.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, <code>archivo5.py</code> has been deleted. Now we create a new commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Eliminado archivo5.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master ea615a9] Eliminado archivo5.py',
          '1 file changed, 1 deletion(-)',
          'delete mode 100644 archivo5.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* ea615a9 (HEAD -&amp;gt; master) Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Undo the commit and create it again without the file">Undo the commit and create it again without the file<a class="anchor-link" href="#Undo the commit and create it again without the file"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 117" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We create two files again and make a commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Este es el archivo 6&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo6</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Este es el archivo 7&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo7</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se serÃ¡ confirmado)',
          'archivo6.py',
          'archivo7.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo6</span><span class="o">.</span><span class="n">py</span> <span class="n">archivo7</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Commit con los archivos 6 y 7&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master d6dc485] Commit con los archivos 6 y 7',
          '2 files changed, 2 insertions(+)',
          'create mode 100644 archivo6.py',
          'create mode 100644 archivo7.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* d6dc485 (HEAD -&amp;gt; master) Commit con los archivos 6 y 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>First, we undo the last commit with <code>git reset --soft HEAD~1</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">soft</span> <span class="n">HEAD</span><span class="o">~</span><span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We run a <code>git status</code> to see what has happened</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del Ã¡rea de stage)',
          'nuevos archivos: archivo6.py',
          'nuevos archivos: archivo7.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that I have undone the commit, but the two files are still in the staging area. Therefore, to remove one of the files from the commit, we first need to take it out of the staging area. To do this, we run <code>git reset archivo6.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="n">archivo6</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We run <code>git status</code> again</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del Ã¡rea de stage)',
          'nuevos archivos: archivo7.py',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se serÃ¡ confirmado)',
          'archivo6.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that <code>archivo7.py</code> is in the staged area, while <code>archivo6.py</code> is no longer there. Now we can delete file 6, for this we use <code>git clean</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">clean</span> <span class="o">-</span><span class="n">n</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'SerÃ¡ borrado archivo6.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">clean</span> <span class="o">-</span><span class="n">f</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Borrando archivo6.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We run <code>git status</code> again</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del Ã¡rea de stage)',
          'nuevos archivos: archivo7.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, <code>archivo.py</code> is no longer there, so we can make a new commit.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Commit con el archivo 7&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master 4bb9d75] Commit con el archivo 7',
          '1 file changed, 1 insertion(+)',
          'create mode 100644 archivo7.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 4bb9d75 (HEAD -&amp;gt; master) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We have removed the last commit and overwritten it with a new one, removing the file we wanted.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Change history of a file (git log &#x3C;file&#x3E;)">Change history of a file (<code>git log &#x3C;file&#x3E;</code>)<a class="anchor-link" href="#Change history of a file (git log &#x3C;file&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 118" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Although we have previously seen how we can view the repository history with <code>git log</code>, it might not be of interest to see the history of the entire repository. We may have a bug in a code file that we didn't have at first, so it's possible that we want to see only the history of that file. For this, we use <code>git log &#x3C;file&#x3E;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First we check the files we have</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'api_keys.py  archivo1.py  archivo2.py  archivo4.py  archivo7.py  hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Suppose we only want to see the changes in <code>hola.py</code>, so we do <code>git log hola.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can see that there are many fewer results than if we had done <code>git log</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 4bb9d75 (HEAD -&amp;gt; master) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="View modifications of a file at a specific point in history (git show &#x3C;hash&#x3E; &#x3C;file&#x3E; or git diff &#x3C;file&#x3E;)">View modifications of a file at a specific point in history (<code>git show &#x3C;hash&#x3E; &#x3C;file&#x3E;</code> or <code>git diff &#x3C;file&#x3E;</code>)<a class="anchor-link" href="#View modifications of a file at a specific point in history (git show &#x3C;hash&#x3E; &#x3C;file&#x3E; or git diff &#x3C;file&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 119" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's assume we already know at which point a change was made to the file that contains a bug, so now we want to know what changes were made to understand what might be causing the bug. For this, we can use <code>git show &#x3C;hash&#x3E; &#x3C;file&#x3E;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's see what changes were made in <code>hola.py</code> in the hash <code>c4930d7</code>, that is, when the third commit was made.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">show</span> <span class="n">c4930d7</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'commit c4930d7267c3f8df389ab0cb1bda0b5fceabb5c2',
          'Author: maximofn &amp;lt;maximofn@gmail.com&amp;gt;',
          'Date:   Sun Apr 16 02:29:59 2023 +0200',
          '&#x20;&#x20;&#x20;&#x20;Tercer commit, hola.py',
          'diff --git a/hola.py b/hola.py',
          'index 91dee80..33bdb99 100644',
          '--- a/hola.py',
          '+++ b/hola.py',
          '@@ -1,2 +1,3 @@',
          'print(&#x27;Hola mundo&#x27;)',
          'print(&#x27;He aÃ±adido una nueva linea&#x27;)',
          '+print(&#x27;Esta es la tercera linea&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The way to view changes in git is not very intuitive, but we can see that the line <code>print(&#x27;This is the third line&#x27;)</code> has been added.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Another way to view changes is with <code>git diff</code>, we have two options: we can see the changes in the file at the current moment compared to a specific point in history. For this, we do <code>git diff &#x3C;hash&#x3E; &#x3C;file&#x3E;</code>.</p>
      <p>For example, if we want to see the changes of <code>hola.py</code> from when the first commit (hash <code>1c95e4f</code>) was made compared to the current situation, we need to enter (<code>git diff 1c95e4f hola.py</code>)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">diff</span> <span class="mi">1</span><span class="n">c95e4f</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'diff --git a/hola.py b/hola.py',
          'index f140969..33bdb99 100644',
          '--- a/hola.py',
          '+++ b/hola.py',
          '@@ -1 +1,3 @@',
          'print(&#x27;Hola mundo&#x27;)',
          '+print(&#x27;He aÃ±adido una nueva linea&#x27;)',
          '+print(&#x27;Esta es la tercera linea&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>But if what we want is to see the difference between a specific point in history and another specific point, we need to introduce the hashes of the two moments, that is <code>git diff &#x3C;hash1&#x3E; &#x3C;hash2&#x3E; &#x3C;file&#x3E;</code></p>
      <p>If we want to see the changes in <code>hola.py</code> between the second commit (hash <code>6e99e73</code>) and the first commit (hash <code>1c95e4f</code>), we would need to enter <code>git diff 1c95e4f 6e99e73 hola.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">diff</span> <span class="mi">1</span><span class="n">c95e4f</span> <span class="mf">6e99</span><span class="n">e73</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'diff --git a/hola.py b/hola.py',
          'index f140969..91dee80 100644',
          '--- a/hola.py',
          '+++ b/hola.py',
          '@@ -1 +1,2 @@',
          'print(&#x27;Hola mundo&#x27;)',
          '+print(&#x27;He aÃ±adido una nueva linea&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The above shows the changes of the second commit with respect to the first, but if what we want is the changes of the first commit with respect to the second, we just need to put the hashes in reverse order, that is <code>git diff 6e99e73 1c95e4f hola.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">diff</span> <span class="mf">6e99</span><span class="n">e73</span> <span class="mi">1</span><span class="n">c95e4f</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'diff --git a/hola.py b/hola.py',
          'index 91dee80..f140969 100644',
          '--- a/hola.py',
          '+++ b/hola.py',
          '@@ -1,2 +1 @@',
          'print(&#x27;Hola mundo&#x27;)',
          '-print(&#x27;He aÃ±adido una nueva linea&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Journey to the past (git reset --hard &#x3C;hash&#x3E; or git reset --soft &#x3C;hash&#x3E;)">Journey to the past (<code>git reset --hard &#x3C;hash&#x3E;</code> or <code>git reset --soft &#x3C;hash&#x3E;</code>)<a class="anchor-link" href="#Journey to the past (git reset --hard &#x3C;hash&#x3E; or git reset --soft &#x3C;hash&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 120" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's imagine we've found that everything we did after generating the bug is useless and we need to go back to working from that point. We can revert to a position in the history using <code>git reset --hard &#x3C;hash&#x3E;</code> (this will not keep the changes) or <code>git reset --soft &#x3C;hash&#x3E;</code> (this will keep the changes).</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's first look at the history</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 4bb9d75 (HEAD -&amp;gt; master) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Suppose we want to go back to the moment when we made the third commit (hash <code>c4930d7</code>), and we do this without keeping the changes, meaning all modifications made afterward will be deleted. We run <code>git reset --hard c4930d7</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First we do <code>ls</code> to see the files we have now</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'api_keys.py  archivo1.py  archivo2.py  archivo4.py  archivo7.py  hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's go to the third commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="n">c4930d7</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'HEAD estÃ¡ ahora en c4930d7 Tercer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we do <code>ls</code> we will see that we no longer have <code>archivo1.py</code>, <code>archivo2.py</code>, <code>archivo4.py</code>, nor <code>archivo7.py</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'api_keys.py  hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Back to the Future (git reflog)">Back to the Future (<code>git reflog</code>)<a class="anchor-link" href="#Back to the Future (git reflog)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 121" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suppose we regret our decision and want to go back to where we were, to the last point in history. One way would be to do <code>git reset --hard &#x3C;hash&#x3E;</code>. But let's imagine we don't know the hash because we didn't run <code>git log</code> before, and if we do it now, it only gives us information about the history up to the third commit.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* c4930d7 (HEAD -&amp;gt; master) Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Here what we can do is <code>git reflog</code>, which will give us a history including the jumps</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reflog</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'c4930d7 (HEAD -&amp;gt; master) HEAD@&#x7B;0&#x7D;: reset: moving to c4930d7',
          '4bb9d75 HEAD@&#x7B;1&#x7D;: commit: Commit con el archivo 7',
          'ea615a9 HEAD@&#x7B;2&#x7D;: reset: moving to HEAD~1',
          'd6dc485 HEAD@&#x7B;3&#x7D;: commit: Commit con los archivos 6 y 7',
          'ea615a9 HEAD@&#x7B;4&#x7D;: commit: Eliminado archivo5.py',
          'e3153a5 HEAD@&#x7B;5&#x7D;: commit: Commit con los archivos 4 y 5',
          '0b09cfa HEAD@&#x7B;6&#x7D;: commit: AÃ±adido .gitignore',
          '04ebd1f HEAD@&#x7B;7&#x7D;: reset: moving to HEAD~1',
          '0147d65 HEAD@&#x7B;8&#x7D;: commit: Commit con el archivo 3',
          '04ebd1f HEAD@&#x7B;9&#x7D;: reset: moving to HEAD~1',
          '6dc7be6 HEAD@&#x7B;10&#x7D;: commit: Commit con el archivos 3',
          '04ebd1f HEAD@&#x7B;11&#x7D;: commit (amend): Commit con los archivos 1 y 2',
          '285b243 HEAD@&#x7B;12&#x7D;: commit: Commit con el archivo 1',
          'c4930d7 (HEAD -&amp;gt; master) HEAD@&#x7B;13&#x7D;: commit (amend): Tercer commit, hola.py',
          '60e2ffd HEAD@&#x7B;14&#x7D;: commit: Tercer commot, hola.py',
          '6e99e73 HEAD@&#x7B;15&#x7D;: commit: Segundo commit, hola.py',
          '1c95e4f HEAD@&#x7B;16&#x7D;: commit (initial): Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can see that it tells us we were at the commit with hash <code>4bb9d75</code>, which is the last commit we made, and from there we went back to the commit with hash <code>c4930d7</code>, which if you notice, is the same hash as the commit with message <code>Tercer commit, hola.py</code>. So now that we know the hash of the last commit, <code>4bb9d75</code>, to return to the position of the last commit we do <code>git reset --hard 4bb9d75</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="mi">4</span><span class="n">bb9d75</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'HEAD estÃ¡ ahora en 4bb9d75 Commit con el archivo 7',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we now run a log again</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 4bb9d75 (HEAD -&amp;gt; master) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that we are indeed at the position of the last commit, *we have returned to the future*</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="File Search (git grep &#x3C;word&#x3E;)">File Search (<code>git grep &#x3C;word&#x3E;</code>)<a class="anchor-link" href="#File Search (git grep &#x3C;word&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 122" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we want to search within files, we can do it with the <code>git grep</code> command. Since the repository we have been working on is very small and has very few files, we are going to download a new one using a command that we will see in more detail later.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">facebookresearch</span><span class="o">/</span><span class="n">segment</span><span class="o">-</span><span class="n">anything</span><span class="o">.</span><span class="n">git</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Clonando en &#x27;segment-anything&#x27;...',
          'remote: Enumerating objects: 279, done.',
          'remote: Counting objects: 100% (181/181), done.',
          'remote: Compressing objects: 100% (77/77), done.',
          'remote: Total 279 (delta 116), reused 104 (delta 104), pack-reused 98',
          'Recibiendo objetos: 100% (279/279), 18.31 MiB | 21.25 MiB/s, listo.',
          'Resolviendo deltas: 100% (140/140), listo.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The repository we have downloaded is the source code of SAM, a neural network by Meta for segmenting any object. We enter the repository folder and look for, for example, how many times the word <code>softmax</code> has been written.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">segment</span><span class="o">-</span><span class="n">anything</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">grep</span> <span class="n">softmax</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'segment_anything/modeling/image_encoder.py:        attn = attn.softmax(dim=-1)',
          'segment_anything/modeling/transformer.py:        attn = torch.softmax(attn, dim=-1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that changes have been made in the files <code>segment_anything/modeling/image_encoder.py</code> and <code>segment_anything/modeling/transformer.py</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we now also want to know on which lines of the files the text has been written, we use the flag <code>-n</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">segment</span><span class="o">-</span><span class="n">anything</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">grep</span> <span class="o">-</span><span class="n">n</span> <span class="n">softmax</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'segment_anything/modeling/image_encoder.py:236:        attn = attn.softmax(dim=-1)',
          'segment_anything/modeling/transformer.py:233:        attn = torch.softmax(attn, dim=-1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If what we want is to count how many times a word appears, we can use the <code>-c</code> flag</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">segment</span><span class="o">-</span><span class="n">anything</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">grep</span> <span class="o">-</span><span class="n">c</span> <span class="n">softmax</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'segment_anything/modeling/image_encoder.py:1',
          'segment_anything/modeling/transformer.py:1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>And we see that it appears once in each file</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>And it tells us that they are on lines 236 and 233 respectively.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Searching in Commits (git log -S &#x3C;word&#x3E;)">Searching in Commits (<code>git log -S &#x3C;word&#x3E;</code>)<a class="anchor-link" href="#Searching in Commits (git log -S &#x3C;word&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 123" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we want to search through the commit history, we can use the command <code>git log -S &#x3C;word&#x3E;</code>. For example, let's search for the word <code>fix</code> in the commit history of the repository we downloaded earlier.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">segment</span><span class="o">-</span><span class="n">anything</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">-</span><span class="n">S</span> <span class="s2">&quot;collab&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'commit 2780a301de4483e5c46edb230ea781556159c658',
          'Author: Eric Mintun &amp;lt;eric.mintun@gmail.com&amp;gt;',
          'Date:   Mon Apr 10 10:50:17 2023 -0700',
          '&#x20;&#x20;&#x20;&#x20;Fix typo in notebook &#x27;using_collab&#x27;-&amp;gt;&#x27;using_colab&#x27; in other two notebooks.',
          'commit 2c11ea23525970ac288f23dc74b203bcbfb4cc6a',
          'Author: jp-x-g &amp;lt;jpxg-dev@protonmail.com&amp;gt;',
          'Date:   Thu Apr 6 20:00:04 2023 -0700',
          '&#x20;&#x20;&#x20;&#x20;fix parameter name',
          '&#x20;&#x20;&#x20;&#x20;',
          '&#x20;&#x20;&#x20;&#x20;&quot;using_collab&quot; does not appear in subsequent text, replacing with &quot;using_colab&quot;',
          'commit b47d02d68c308672751be29742fcef02a86e2f02',
          'Author: Eric Mintun &amp;lt;eric.mintun@gmail.com&amp;gt;',
          'Date:   Wed Apr 5 06:13:09 2023 -0700',
          '&#x20;&#x20;&#x20;&#x20;Fix broken links in notebook Colab setup.',
          'commit 571794162e0887c15d12b809505b902c7bf8b4db',
          'Author: Eric Mintun &amp;lt;eric.mintun@gmail.com&amp;gt;',
          'Date:   Tue Apr 4 22:25:49 2023 -0700',
          '&#x20;&#x20;&#x20;&#x20;Initial commit',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We delete the SAM folder</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">rm</span> <span class="o">-</span><span class="n">r</span> <span class="n">segment</span><span class="o">-</span><span class="n">anything</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Branches">Branches<a class="anchor-link" href="#Branches"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 124" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/GIT-Branchand-its-Operations.webp" alt="branches">
      <p>The use of branches is very useful, as we can start developing a new feature without having to modify the original code.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Create a branch (git branch &#x3C;branch name&#x3E;)">Create a branch (<code>git branch &#x3C;branch name&#x3E;</code>)<a class="anchor-link" href="#Create a branch (git branch &#x3C;branch name&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 125" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>**Note**: Before anything else, it should be mentioned that to create a branch in a repository there must be at least one commit. If you try to create a branch before making the first commit, you will receive an error.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To create a branch we use the command <code>git branch &#x3C;branch name&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="n">new_branch</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="List branches (git branch)">List branches (<code>git branch</code>)<a class="anchor-link" href="#List branches (git branch)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 126" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We have created our first branch, we can check all the branches we have created by simply writing <code>git branch</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* master',
          '&#x20;&#x20;new_branch',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In addition to listing, it tells us with an asterisk <code>*</code> which branch we are on, in this case the <code>master</code> branch.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Rename branches, farewell to the master branch (git branch -m &#x3C;old name&#x3E; &#x3C;new name&#x3E;)">Rename branches, farewell to the <code>master</code> branch (<code>git branch -m &#x3C;old name&#x3E; &#x3C;new name&#x3E;</code>)<a class="anchor-link" href="#Rename branches, farewell to the master branch (git branch -m &#x3C;old name&#x3E; &#x3C;new name&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 127" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Historically in git the main branch has been called <code>master</code>, but this has negative historical connotations due to the <code>master-slave</code> concept, which refers to the suffering many people endured. Therefore, it is now common to refer to the main branch as <code>main</code>. To rename the branch, we use <code>git branch -m master main</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">m</span> <span class="n">master</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We list the branches</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* main',
          '&#x20;&#x20;new_branch',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, we have been able to change the name of the main branch from <code>master</code> to <code>main</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Switch branches (git switch &#x3C;branch&#x3E;)">Switch branches (<code>git switch &#x3C;branch&#x3E;</code>)<a class="anchor-link" href="#Switch branches (git switch &#x3C;branch&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 128" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we want to switch branches, we just need to write <code>git switch &#x3C;branch name&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">new_branch</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;new_branch&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's check which branch we are on with <code>git branch</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;main',
          '* new_branch',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, we have switched to the new_branch.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we want to create and switch to a branch in a single command, we can use <code>git switch -c &#x3C;branch name&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="o">-</span><span class="n">c</span> <span class="n">new_branch2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a nueva rama &#x27;new_branch2&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's check which branch we are on</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;main',
          '&#x20;&#x20;new_branch',
          '* new_branch2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We have created and switched branches with a single command</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Get the current branch (git branch --show-current)">Get the current branch (<code>git branch --show-current</code>)<a class="anchor-link" href="#Get the current branch (git branch --show-current)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 129" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we have seen so far with <code>git branch</code> we can get a list of all branches and also see which one we are currently on. However, in the case where we have a large number of branches, which can happen in a team with many people, it is better to get only the current branch without getting a list of all branches. For this, we use <code>git branch --show-current</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'new_branch2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="List of most recent branches (git branch --sort=-committerdate)">List of most recent branches (<code>git branch --sort=-committerdate</code>)<a class="anchor-link" href="#List of most recent branches (git branch --sort=-committerdate)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 130" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In case of having many branches, we might be interested in knowing which ones are the most recent to see which were the last created and where the latest development should be. For this, we use <code>git branch --sort=-committerdate</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">sort</span><span class="o">=-</span><span class="n">committerdate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* new_branch2',
          '&#x20;&#x20;new_branch',
          '&#x20;&#x20;main',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, he has ordered them in reverse order of when we created them.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="The deprecated git checkout command">The deprecated <code>git checkout</code> command<a class="anchor-link" href="#The deprecated git checkout command"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 131" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Until recently, the command to create branches and switch between them was <code>git checkout</code>, but this command does more than that; it also restores the working directory. However, this goes against the Linux philosophy, which is why the commands <code>git branch</code>, <code>git switch</code>, and <code>git restore</code> were created to split this functionality.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Merging branches (git merge)">Merging branches (<code>git merge</code>)<a class="anchor-link" href="#Merging branches (git merge)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 132" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we have said, creating branches is very useful for developing new features without affecting the rest of the team. But when they are finished, they need to be brought into the main branch, for which we use the command <code>git merge &#x3C;branch&#x3E;</code></p>
      <blockquote>
      <p>**Important**: We need to be on the branch that will adopt the changes. That is, if we want to merge the changes made in the branch <code>new_branch2</code> into the branch <code>main</code>, we first need to make sure we are on the branch <code>main</code>.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First we check which branch we are on</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'new_branch2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We remove <code>archivo7.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">rm</span> <span class="n">archivo7</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'rm &#x27;archivo7.py&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We make a commit with the changes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;Eliminado archivo7.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[new_branch2 5168f78] Eliminado archivo7.py',
          '1 file changed, 1 deletion(-)',
          'delete mode 100644 archivo7.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we do a <code>ls</code> we see that <code>archivo7.py</code> is no longer there</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">archivo7</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We create a new file and make a commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">archivo8</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo8</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Commit con el archivo 8&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[new_branch2 564ccfb] Commit con el archivo 8',
          '1 file changed, 0 insertions(+), 0 deletions(-)',
          'create mode 100644 archivo8.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We have made two new commits in this branch, let's check it with <code>git log</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 564ccfb (HEAD -&amp;gt; new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch, main) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We switch to the main branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;main&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we now run <code>ls</code> again, we will see that <code>archivo7.py</code> is there.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">archivo7</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'archivo7.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We merge the branches, bringing the changes from <code>new_branch2</code> to <code>main</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">new_branch2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Actualizando 4bb9d75..564ccfb',
          'Fast-forward',
          'archivo7.py | 1 -',
          'archivo8.py | 0',
          '2 files changed, 1 deletion(-)',
          'delete mode 100644 archivo7.py',
          'create mode 100644 archivo8.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We do a <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama main',
          'nada para hacer commit, el Ã¡rbol de trabajo estÃ¡ limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that when doing the merge, no commit is necessary. Let's check with a <code>git log</code> what has happened.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 564ccfb (HEAD -&amp;gt; main, new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that the commit from the branch <code>new_branch2</code> has been incorporated into this branch.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Fast-forward">Fast-forward<a class="anchor-link" href="#Fast-forward"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 133" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In this case, we create a new branch, leaving the main one untouched and only modifying the new one, making several commits. Therefore, when merging the new branch into the main one, all the commits made in the new branch will be visible. To perform this type of merge, we write <code>git merge --ff-only &#x3C;branch&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1">### Este cÃ³digo es para crear el grÃ¡fico de las ramas, no es necesario para el curso</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">graphviz</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Crear el grÃ¡fico con la direcciÃ³n de las flechas de izquierda a derecha</span>',
      '<span class="n">orin</span> <span class="o">=</span> <span class="n">graphviz</span><span class="o">.</span><span class="n">Digraph</span><span class="p">(</span><span class="s1">&#39;G&#39;</span><span class="p">,</span> <span class="n">graph_attr</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;rankdir&#39;</span><span class="p">:</span> <span class="s1">&#39;LR&#39;</span><span class="p">})</span>',
      '<span class="n">fast_foward</span> <span class="o">=</span> <span class="n">graphviz</span><span class="o">.</span><span class="n">Digraph</span><span class="p">(</span><span class="s1">&#39;G&#39;</span><span class="p">,</span> <span class="n">graph_attr</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;rankdir&#39;</span><span class="p">:</span> <span class="s1">&#39;LR&#39;</span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar nodos (pelotas) A, B, C y D en la rama principal</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;transparent&#39;</span><span class="p">)</span>',
      '<span class="n">fast_foward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">fast_foward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">fast_foward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">fast_foward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar nodos (pelotas) X e Y en la rama secundaria</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>',
      '<span class="n">fast_foward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;magenta&#39;</span><span class="p">)</span>',
      '<span class="n">fast_foward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;magenta&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar flechas entre los nodos en la rama principal</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;AB&#39;</span><span class="p">,</span> <span class="s1">&#39;BC&#39;</span><span class="p">,</span> <span class="s1">&#39;CD&#39;</span><span class="p">])</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edge</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;transparent&#39;</span><span class="p">)</span>  <span class="c1"># Hacer la flecha de C a D transparente</span>',
      '<span class="n">fast_foward</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;AB&#39;</span><span class="p">,</span> <span class="s1">&#39;BC&#39;</span><span class="p">,</span> <span class="s1">&#39;CD&#39;</span><span class="p">,</span> <span class="s1">&#39;DX&#39;</span><span class="p">,</span> <span class="s1">&#39;XY&#39;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar flechas entre los nodos en la rama secundaria</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;DX&#39;</span><span class="p">,</span> <span class="s1">&#39;XY&#39;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Mostrar el diagrama de flujo en la celda de cÃ³digo de Jupyter Notebook</span>',
      '<span class="n">display</span><span class="p">(</span><span class="n">orin</span><span class="p">)</span>',
      '<span class="n">display</span><span class="p">(</span><span class="n">fast_foward</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;graphviz.graphs.Digraph at 0x7f58f80c09a0&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;graphviz.graphs.Digraph at 0x7f58f9203fa0&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's first check that we are on the main branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'main',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We create a new branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="n">branch_fast_forward</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We switch to her</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">branch_fast_forward</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;branch_fast_forward&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'branch_fast_forward',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's check the log</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span> <span class="o">--</span><span class="nb">all</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 564ccfb (HEAD -&amp;gt; branch_fast_forward, new_branch2, main) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Okay, we are on a branch created from the main one with its entire log history, and we make two new commits.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">rm</span> <span class="n">archivo4</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;Eliminado archivo4.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'rm &#x27;archivo4.py&#x27;',
          '[branch_fast_forward 4484e70] Eliminado archivo4.py',
          '1 file changed, 1 deletion(-)',
          'delete mode 100644 archivo4.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">rm</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;Eliminado hola.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'rm &#x27;hola.py&#x27;',
          '[branch_fast_forward 94149fc] Eliminado hola.py',
          '1 file changed, 3 deletions(-)',
          'delete mode 100644 hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We make a new log to see what has been created in this new branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 94149fc (HEAD -&amp;gt; branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2, main) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, the last two commits are the ones we have created and we can check that these commits are not in the main branch (for this I specify that it should be done on the <code>main</code> branch)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="n">main</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 564ccfb (new_branch2, main) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we are going to the <code>main</code> branch to make the merge</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;main&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Finally, we do a fast-forward merge</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">merge</span> <span class="o">--</span><span class="n">ff</span><span class="o">-</span><span class="n">only</span> <span class="n">branch_fast_forward</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Actualizando 564ccfb..94149fc',
          'Fast-forward',
          'archivo4.py | 1 -',
          'hola.py     | 3 ---',
          '2 files changed, 4 deletions(-)',
          'delete mode 100644 archivo4.py',
          'delete mode 100644 hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The merge has been done, let's see what happened with the log in the <code>main</code> branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 94149fc (HEAD -&amp;gt; main, branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As you can see, the two commits made in the <code>branch_fast_forward</code> branch have been kept.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="No fast-forward or true merge">No fast-forward or true merge<a class="anchor-link" href="#No fast-forward or true merge"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 134" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In this case, we create a new branch, leaving the main one untouched, and modify the new one, performing several commits. Then, we make a commit on the main branch. Therefore, when merging the new branch into the main, only a single commit will be visible from the new branch. To perform this type of merge, we write <code>git merge &#x3C;branch&#x3E; --no-ff</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1">### Este cÃ³digo es para crear el grÃ¡fico de las ramas, no es necesario para el curso</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">graphviz</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Crear el grÃ¡fico con la direcciÃ³n de las flechas de izquierda a derecha</span>',
      '<span class="n">orin</span> <span class="o">=</span> <span class="n">graphviz</span><span class="o">.</span><span class="n">Digraph</span><span class="p">(</span><span class="s1">&#39;G&#39;</span><span class="p">,</span> <span class="n">graph_attr</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;rankdir&#39;</span><span class="p">:</span> <span class="s1">&#39;LR&#39;</span><span class="p">})</span>',
      '<span class="n">not_fast_forward</span> <span class="o">=</span> <span class="n">graphviz</span><span class="o">.</span><span class="n">Digraph</span><span class="p">(</span><span class="s1">&#39;G&#39;</span><span class="p">,</span> <span class="n">graph_attr</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;rankdir&#39;</span><span class="p">:</span> <span class="s1">&#39;LR&#39;</span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar nodos (pelotas) A, B, C y D en la rama principal</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;transparent&#39;</span><span class="p">)</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar nodos (pelotas) X e Y en la rama secundaria</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar nodo (pelota) M en la rama principal</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;M&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;M&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;magenta&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar flechas entre los nodos en la rama principal</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;AB&#39;</span><span class="p">,</span> <span class="s1">&#39;BC&#39;</span><span class="p">,</span> <span class="s1">&#39;CD&#39;</span><span class="p">])</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edge</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;transparent&#39;</span><span class="p">)</span>  <span class="c1"># Hacer la flecha de C a D transparente</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;AB&#39;</span><span class="p">,</span> <span class="s1">&#39;BC&#39;</span><span class="p">,</span> <span class="s1">&#39;CD&#39;</span><span class="p">,</span> <span class="s1">&#39;DE&#39;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar flechas entre los nodos en la rama secundaria</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;DX&#39;</span><span class="p">,</span> <span class="s1">&#39;XY&#39;</span><span class="p">])</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;DX&#39;</span><span class="p">,</span> <span class="s1">&#39;XY&#39;</span><span class="p">,</span> <span class="s1">&#39;YM&#39;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar flechas de la rama principal al nodo M</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">edge</span><span class="p">(</span><span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="s1">&#39;M&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Mostrar el diagrama de flujo en la celda de cÃ³digo de Jupyter Notebook</span>',
      '<span class="n">display</span><span class="p">(</span><span class="n">orin</span><span class="p">)</span>',
      '<span class="n">display</span><span class="p">(</span><span class="n">not_fast_forward</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;graphviz.graphs.Digraph at 0x7f58f80c2fb0&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;graphviz.graphs.Digraph at 0x7f58f80c2230&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's first check that we are on the main branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'main',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We create a new branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="n">branch_no_fast_forward</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We switch to her</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">branch_no_fast_forward</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;branch_no_fast_forward&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'branch_no_fast_forward',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Okay, we are on a branch created from the main one with its entire log history, and we make two new commits.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">file1</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">file1</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;file1&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[branch_no_fast_forward e4e23c9] file1',
          '1 file changed, 0 insertions(+), 0 deletions(-)',
          'create mode 100644 file1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">file2</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">file2</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;file2&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[branch_no_fast_forward 8df3429] file2',
          '1 file changed, 0 insertions(+), 0 deletions(-)',
          'create mode 100644 file2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We make a new log to see what has been created in this new branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 8df3429 (HEAD -&amp;gt; branch_no_fast_forward) file2',
          '* e4e23c9 file1',
          '* 94149fc (main, branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, the last two commits are the ones we have created and we can check that these commits are not in the main branch (for this I specify that it should be done on the <code>main</code> branch)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="n">main</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 94149fc (main, branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we are going to the <code>main</code> branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;main&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We create a new commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">file3</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">file3</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;file3&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[main 8bdf4d8] file3',
          '1 file changed, 0 insertions(+), 0 deletions(-)',
          'create mode 100644 file3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Finally, we do a non-fast-forward merge</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">branch_no_fast_forward</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">ff</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'ommit. comenzando con &#x27;#&#x27; serÃ¡n ignoradas, y un mensaje vacÃ­o abortasaria esta&amp;gt;# especialmente si esto fusiona un upstream actualizado en una rama de tÃ³pico. /home/wallabot/Documentos/web/portafolio/posts/notebook_git/.git/MERGE_MSG   [ lÃ­nea 1/7 (14%), col 1/48 (2%), car 0/301 (0%) ]             [ PÃ¡rrafo justificado ]...llabot/Documentos/web/portafolio/posts/notebook_git/.git/MERGE_MSG Modificado',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, it opens the editor to enter a commit message and a default message. We accept the message and see what has happened.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama main',
          'nada para hacer commit, el Ã¡rbol de trabajo estÃ¡ limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '*   274529c (HEAD -&amp;gt; main) Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'api_keys.py  archivo1.py  archivo2.py  archivo8.py  file1  file2  file3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, a new commit has been created with the changes from the new branch in the main branch.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Squash">Squash<a class="anchor-link" href="#Squash"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 135" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In this type of merge, all the commits from a new branch are combined into a single commit in the main branch. For this, we write <code>git merge &#x3C;branch&#x3E; --squash</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1">### Este cÃ³digo es para crear el grÃ¡fico de las ramas, no es necesario para el curso</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">graphviz</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Crear el grÃ¡fico con la direcciÃ³n de las flechas de izquierda a derecha</span>',
      '<span class="n">orin</span> <span class="o">=</span> <span class="n">graphviz</span><span class="o">.</span><span class="n">Digraph</span><span class="p">(</span><span class="s1">&#39;G&#39;</span><span class="p">,</span> <span class="n">graph_attr</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;rankdir&#39;</span><span class="p">:</span> <span class="s1">&#39;LR&#39;</span><span class="p">})</span>',
      '<span class="n">squash</span> <span class="o">=</span> <span class="n">graphviz</span><span class="o">.</span><span class="n">Digraph</span><span class="p">(</span><span class="s1">&#39;G&#39;</span><span class="p">,</span> <span class="n">graph_attr</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;rankdir&#39;</span><span class="p">:</span> <span class="s1">&#39;LR&#39;</span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar nodos (pelotas) A, B, C y D en la rama principal</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;transparent&#39;</span><span class="p">)</span>',
      '<span class="n">squash</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">squash</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">squash</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">squash</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar nodos (pelotas) X e Y en la rama secundaria</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar nodo (pelota) M en la rama principal</span>',
      '<span class="n">squash</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;M&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;M&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;magenta&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar flechas entre los nodos en la rama principal</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;AB&#39;</span><span class="p">,</span> <span class="s1">&#39;BC&#39;</span><span class="p">,</span> <span class="s1">&#39;CD&#39;</span><span class="p">])</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edge</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;transparent&#39;</span><span class="p">)</span>  <span class="c1"># Hacer la flecha de C a D transparente</span>',
      '<span class="n">squash</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;AB&#39;</span><span class="p">,</span> <span class="s1">&#39;BC&#39;</span><span class="p">,</span> <span class="s1">&#39;CD&#39;</span><span class="p">,</span> <span class="s1">&#39;DM&#39;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar flechas entre los nodos en la rama secundaria</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;DX&#39;</span><span class="p">,</span> <span class="s1">&#39;XY&#39;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Mostrar el diagrama de flujo en la celda de cÃ³digo de Jupyter Notebook</span>',
      '<span class="n">display</span><span class="p">(</span><span class="n">orin</span><span class="p">)</span>',
      '<span class="n">display</span><span class="p">(</span><span class="n">squash</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;graphviz.graphs.Digraph at 0x7f58f80e6470&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;graphviz.graphs.Digraph at 0x7f58f80e6f80&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's first check that we are on the main branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'main',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We create a new branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="n">branch_squash</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We switch to her</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">branch_squash</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;branch_squash&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'branch_squash',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's check the log</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span> <span class="o">--</span><span class="nb">all</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '*   274529c (HEAD -&amp;gt; branch_squash, main) Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Okay, we are on a branch created from the main one with its entire log history, and we make three new commits.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">rm</span> <span class="n">file1</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;Eliminado file1&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'rm &#x27;file1&#x27;',
          '[branch_squash 767b632] Eliminado file1',
          '1 file changed, 0 insertions(+), 0 deletions(-)',
          'delete mode 100644 file1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">rm</span> <span class="n">file2</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;Eliminado file2&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'rm &#x27;file2&#x27;',
          '[branch_squash a47f771] Eliminado file2',
          '1 file changed, 0 insertions(+), 0 deletions(-)',
          'delete mode 100644 file2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">rm</span> <span class="n">file3</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;Eliminado file3&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'rm &#x27;file3&#x27;',
          '[branch_squash 85f8c9f] Eliminado file3',
          '1 file changed, 0 insertions(+), 0 deletions(-)',
          'delete mode 100644 file3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We make a new log to see what has been created in this new branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 85f8c9f (HEAD -&amp;gt; branch_squash) Eliminado file3',
          '* a47f771 Eliminado file2',
          '* 767b632 Eliminado file1',
          '*   274529c (main) Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, the last three commits are the ones we have created and we can verify that these commits are not in the main branch (for this reason I specify that it should be done on the <code>main</code> branch)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="n">main</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '*   274529c (main) Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we are going to the <code>main</code> branch to make the merge</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;main&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We perform a squash merge</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">branch_squash</span> <span class="o">--</span><span class="n">squash</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Actualizando 274529c..85f8c9f',
          'Fast-forward',
          'Commit de aplastamiento -- no actualizando HEAD',
          'file1 | 0',
          'file2 | 0',
          'file3 | 0',
          '3 files changed, 0 insertions(+), 0 deletions(-)',
          'delete mode 100644 file1',
          'delete mode 100644 file2',
          'delete mode 100644 file3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The merge has been made, let's see what happened with the log in the <code>main</code> branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '*   274529c (HEAD -&amp;gt; main) Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Changes made in the branch are not showing up, let's do a <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama main',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del Ã¡rea de stage)',
          'borrados:        file1',
          'borrados:        file2',
          'borrados:        file3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that we have to make the commit with the merge. This is because git doesn't know what message to put and leaves it to us to do so, so we do it.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Merge squash de los commits de la rama branch_squash&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[main 52acb97] Merge squash de los commits de la rama branch_squash',
          '3 files changed, 0 insertions(+), 0 deletions(-)',
          'delete mode 100644 file1',
          'delete mode 100644 file2',
          'delete mode 100644 file3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We run <code>git log</code> again</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 52acb97 (HEAD -&amp;gt; main) Merge squash de los commits de la rama branch_squash',
          '*   274529c Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Conflicts when merging">Conflicts when merging<a class="anchor-link" href="#Conflicts when merging"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 136" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>When branches are merged, it can happen that the same file has been modified in several branches. This is common in projects where multiple people are developing, so let's see how to solve it.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="We create a conflict">We create a conflict<a class="anchor-link" href="#We create a conflict"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 137" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We check that we are on the <code>main</code> branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'main',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We create a new branch from this one</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="n">rama_con_conflicto</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We add a line to the file <code>archivo1.py</code>, remember that we are on the <code>main</code> branch.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;rama main&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">cat</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'print(&#x27;Este es el archivo 1&#x27;)',
          'print(&#x27;rama main&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p><code>archivo1.py</code> is modified, we make a commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;archivo1.py en rama main&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[main 53f909b] archivo1.py en rama main',
          '1 file changed, 1 insertion(+)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we are going to the branch <code>rama_con_conflicto</code> and add a new line to <code>archivo1.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">rama_con_conflicto</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;rama_con_conflicto&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'rama_con_conflicto',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;rama rama_con_conflicto&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">cat</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'print(&#x27;Este es el archivo 1&#x27;)',
          'print(&#x27;rama rama_con_conflicto&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, <code>archivo1.py</code> is not the same in the <code>main</code> branch and in the <code>rama_con_conflicto</code> branch. We make a commit with the modification of <code>archivo1.py</code> in the <code>rama_con_conflicto</code> branch.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;archivo1.py en rama rama_con_conflicto&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[rama_con_conflicto 32851c3] archivo1.py en rama rama_con_conflicto',
          '1 file changed, 1 insertion(+)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We go back to the <code>main</code> branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;main&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'main',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We do a merge of the branch <code>rama_con_conflicto</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">rama_con_conflicto</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Auto-fusionando archivo1.py',
          'CONFLICTO (contenido): Conflicto de fusiÃ³n en archivo1.py',
          'FusiÃ³n automÃ¡tica fallÃ³; arregle los conflictos y luego realice un commit con el resultado.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>When doing the merge, it already warns us that there is a conflict in <code>archivo1.py</code> and that the merge could not be completed. We run a <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama main',
          'Tienes rutas no fusionadas.',
          '&#x20;&#x20;(arregla los conflictos y ejecuta &quot;git commit&quot;',
          '&#x20;&#x20;(usa &quot;git merge --abort&quot; para abortar la fusion)',
          'Rutas no fusionadas:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para marcar una resoluciÃ³n)',
          'modificados por ambos:  archivo1.py',
          'sin cambios agregados al commit (usa &quot;git add&quot; y/o &quot;git commit -a&quot;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>It tells us the same thing, but gives us more information, telling us that we can abort the merge with <code>git merge --abort</code>. But instead of that, we are going to solve it.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Resolve a conflict">Resolve a conflict<a class="anchor-link" href="#Resolve a conflict"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 138" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In our case we know where the problem is, but if we don't know it, we can find the problem using <code>git diff</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">diff</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'diff --cc archivo1.py',
          'index 8b4bf58,b5c003c..0000000',
          '--- a/archivo1.py',
          '+++ b/archivo1.py',
          '@@@ -1,2 -1,2 +1,6 @@@',
          '&#x20;&#x20;print(&#x27;Este es el archivo 1&#x27;)',
          '++&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD',
          '+print(&#x27;rama main&#x27;)',
          '++=======',
          '+ print(&#x27;rama rama_con_conflicto&#x27;)',
          '++&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; rama_con_conflicto',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p><code>git diff</code> is telling us that the problem is in the last line. The version of the file from the <code>HEAD</code> branch (which we are currently on, <code>main</code>) has <code>print(&#x27;rama main&#x27;)</code> on the last line, while the version from the <code>rama_con_conflicto</code> branch has <code>print(&#x27;rama rama_con_conflicto&#x27;)</code> on the last line. So, we need to open the file with any editor and resolve this.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>After editing the file with my code editor, I have removed all the unnecessary lines and it looks like this:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">cat</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'print(&#x27;Este es el archivo 1&#x27;)',
          'print(&#x27;rama main&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we do a <code>git status</code> to see what we have to do</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama main',
          'Tienes rutas no fusionadas.',
          '&#x20;&#x20;(arregla los conflictos y ejecuta &quot;git commit&quot;',
          '&#x20;&#x20;(usa &quot;git merge --abort&quot; para abortar la fusion)',
          'Rutas no fusionadas:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para marcar una resoluciÃ³n)',
          'modificados por ambos:  archivo1.py',
          'sin cambios agregados al commit (usa &quot;git add&quot; y/o &quot;git commit -a&quot;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>It tells us that we have the file <code>archivo1.py</code> with modifications, so we add it to the <code>staged</code> area and then make a commit.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;archivo1.py con el merge resuelto&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[main 679bb49] archivo1.py con el merge resuelto',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We run <code>git status</code> again to see if it has been resolved.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama main',
          'nada para hacer commit, el Ã¡rbol de trabajo estÃ¡ limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>It seems to be resolved, let's do a <code>git log</code> to check it.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '*   679bb49 (HEAD -&amp;gt; main) archivo1.py con el merge resuelto',
          '|\\',
          '| * 32851c3 (rama_con_conflicto) archivo1.py en rama rama_con_conflicto',
          '* | 53f909b archivo1.py en rama main',
          '|/',
          '* 52acb97 Merge squash de los commits de la rama branch_squash',
          '*   274529c Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Delete branches">Delete branches<a class="anchor-link" href="#Delete branches"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 139" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The idea of a branch is to open it to develop a new feature or functionality in such a way that it does not affect the rest of the development team. Therefore, once this is achieved, it is merged with the main branch. So after the merge, there is no point in keeping the branch, so it should be deleted, but this will be done differently depending on whether the branch has been merged with the main one or not.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Delete merged branches (git branch -d &#x3C;branch&#x3E;)">Delete merged branches (<code>git branch -d &#x3C;branch&#x3E;</code>)<a class="anchor-link" href="#Delete merged branches (git branch -d &#x3C;branch&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 140" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To delete a branch that has already been merged with the main branch, you just need to do <code>git branch -d &#x3C;branch&#x3E;</code> or <code>git branch --delete &#x3C;branch&#x3E;</code>. Let's delete the last branch we created and merged.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">d</span> <span class="n">rama_con_conflicto</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Eliminada la rama rama_con_conflicto (era 32851c3).',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we now list all the branches, we can see that we no longer have <code>rama_con_conflicto</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;branch_fast_forward',
          '&#x20;&#x20;branch_no_fast_forward',
          '&#x20;&#x20;branch_squash',
          '* main',
          '&#x20;&#x20;new_branch',
          '&#x20;&#x20;new_branch2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Delete branches that have not been merged with the main branch (git branch -D &#x3C;branch&#x3E;)">Delete branches that have not been merged with the main branch (<code>git branch -D &#x3C;branch&#x3E;</code>)<a class="anchor-link" href="#Delete branches that have not been merged with the main branch (git branch -D &#x3C;branch&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 141" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we try to do the same thing with a branch that has never been merged with another, we will get an error</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's create a new branch, we're going to make a commit and we won't merge it.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="n">branch_sin_fusion</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">branch_sin_fusion</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;branch_sin_fusion&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">file4</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">file4</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;file4&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[branch_sin_fusion 9506b0a] file4',
          '1 file changed, 0 insertions(+), 0 deletions(-)',
          'create mode 100644 file4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;main&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>With everything we've learned so far, we can see that what we have done is create a new branch, switch to it, create a new file, make a commit, and return to the <code>main</code> branch. Now let's try to delete this new branch.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">d</span> <span class="n">branch_sin_fusion</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'error: La rama &#x27;branch_sin_fusion&#x27; no ha sido fusionada completamente.',
          'Si estÃ¡s seguro de querer borrarla, ejecuta &#x27;git branch -D branch_sin_fusion&#x27;.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, it tells us that <code>branch_sin_fusion</code> has not been merged and therefore has not been deleted. If we are sure we want to delete it, we need to do <code>git branch -D branch_sin_fusion</code>, so we do this to delete it.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">D</span> <span class="n">branch_sin_fusion</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Eliminada la rama branch_sin_fusion (era 9506b0a).',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now it has been deleted</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Working with remote repositories">Working with remote repositories<a class="anchor-link" href="#Working with remote repositories"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 142" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>When we develop software, we usually don't do it alone; we typically work in a team. Therefore, it doesn't make sense to have a local Git repository, but rather to have a remote repository that everyone can work on and share progress.</p>
      <blockquote>
      <p>Note: The goal of this post is to explain Git. For the connection with remote repositories, I will explain it using GitHub because it is the most used Git repository hosting service, but I will not go into depth about GitHub.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Clone a remote repository (git clone &#x3C;repository&#x3E;)">Clone a remote repository (<code>git clone &#x3C;repository&#x3E;</code>)<a class="anchor-link" href="#Clone a remote repository (git clone &#x3C;repository&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 143" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we start working on a repository that has already been created, the first thing we need to do is clone it. For this, we need to run <code>git clone &#x3C;repository&#x3E;</code>, where <code>&#x3C;repository&#x3E;</code> can be a URL or an SSH address. Since large language models and ChatGPT are very popular right now, let's clone an open-source repository created by the community, <a href="https://github.com/LAION-AI/Open-Assistant" target="_blank" rel="nofollow noreferrer">Open-Assistant</a>. To do this, we will run <code>git clone https://github.com/LAION-AI/Open-Assistant</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">LAION</span><span class="o">-</span><span class="n">AI</span><span class="o">/</span><span class="n">Open</span><span class="o">-</span><span class="n">Assistant</span><span class="o">.</span><span class="n">git</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Clonando en &#x27;Open-Assistant&#x27;...',
          'remote: Enumerating objects: 29769, done.',
          'remote: Counting objects: 100% (673/673), done.',
          'remote: Compressing objects: 100% (310/310), done.',
          'remote: Total 29769 (delta 398), reused 577 (delta 354), pack-reused 29096',
          'Recibiendo objetos: 100% (29769/29769), 33.61 MiB | 29.29 MiB/s, listo.',
          'Resolviendo deltas: 100% (19967/19967), listo.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>This creates the <code>Open-Assistant</code> folder with all the code from the repository, we can go inside and check out all the code.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">Open</span><span class="o">-</span><span class="n">Assistant</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'ansible		 deploy		      model	      safety',
          'assets		 discord-bots	      notebooks       scripts',
          'backend		 docker		      oasst-data      setup.cfg',
          'CODEOWNERS	 docker-compose.yaml  oasst-shared    text-frontend',
          'CONTRIBUTING.md  docs		      pyproject.toml  website',
          'copilot		 inference	      README.md',
          'data		 LICENSE	      redis.conf',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>I delete the folder</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">rm</span> <span class="o">-</span><span class="n">r</span> <span class="n">Open</span><span class="o">-</span><span class="n">Assistant</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Linking a Local Repository to a Remote One">Linking a Local Repository to a Remote One<a class="anchor-link" href="#Linking a Local Repository to a Remote One"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 144" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If the opposite happens, if we first start developing locally and then want to synchronize with a remote repository, we have to do the following</p>
      <ul>
        <li>First create an empty remote repository, in my case I created the repository <code>notebook_git</code> on GitHub which I will delete later</li>
        <li>Get the repository URL or SSH address</li>
        <li>Synchronize them using <code>git remote add origin &lt;URL&gt;</code></li>
      </ul>
      <p>The empty repository I created on GitHub looks like this</p>
      <p>!<a href="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/notebook_git_repo.webp" target="_blank" rel="nofollow noreferrer">notebook git repo</a></p>
      <p>In my case, I will use the SSH address which is <code>git@github.com:maximofn/notebook_git.git</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">remote</span> <span class="n">add</span> <span class="n">origin</span> <span class="n">git</span><span class="nd">@github</span><span class="o">.</span><span class="n">com</span><span class="p">:</span><span class="n">maximofn</span><span class="o">/</span><span class="n">notebook_git</span><span class="o">.</span><span class="n">git</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>They are already linked, but to make sure we can run <code>git remote -v</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">remote</span> <span class="o">-</span><span class="n">v</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'origin	git@github.com:maximofn/notebook_git.git (fetch)',
          'origin	git@github.com:maximofn/notebook_git.git (push)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Push changes from a local repository to a remote repository (git push)">Push changes from a local repository to a remote repository (<code>git push</code>)<a class="anchor-link" href="#Push changes from a local repository to a remote repository (git push)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 145" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we said, they are linked, but if I go to my repository on GitHub it still looks like this</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/notebook_git_repo.webp" alt="notebook git repo">
      <p>The local and remote repositories are linked, but now all changes from the local repository need to be sent to the remote repository. To do this, you would use <code>git push origin &#x3C;local branch&#x3E;:&#x3C;remote branch&#x3E;</code>, that is, since our main branch is called <code>main</code> and the main branch on GitHub is also called <code>main</code>, you would do <code>git push origin main:main</code>.</p>
      <p>If you remember, by default Git used to call the main branch <code>master</code>, but GitHub now calls the main branch <code>main</code> by default. So, if each person names their branches differently in their local repository, you need to specify which local branch writes to which remote branch.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>You can configure the default connection between branches in git by running <code>git push --set-upstream origin main</code>. This sets up a relationship between the local branch <code>main</code> and the remote branch <code>main</code>. Once this relationship is established, you only need to run <code>git push</code> to upload changes made locally to the remote server.</p>
      <p>So we establish the connection between branches</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">push</span> <span class="o">--</span><span class="nb">set</span><span class="o">-</span><span class="n">upstream</span> <span class="n">origin</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Enumerando objetos: 51, listo.',
          'Contando objetos: 100% (51/51), listo.',
          'CompresiÃ³n delta usando hasta 12 hilos',
          'Comprimiendo objetos: 100% (38/38), listo.',
          'Escribiendo objetos: 100% (51/51), 4.21 KiB | 2.11 MiB/s, listo.',
          'Total 51 (delta 18), reusado 0 (delta 0)',
          'remote: Resolving deltas: 100% (18/18), done.',
          'To github.com:maximofn/notebook_git.git',
          '* [new branch]      main -&amp;gt; main',
          'Rama &#x27;main&#x27; configurada para hacer seguimiento a la rama remota &#x27;main&#x27; de &#x27;origin&#x27;.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we can just do <code>git push</code> to upload local changes to the remote repository</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">push</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Everything up-to-date',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we now go back to our GitHub repository, it looks like this</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/notebook_git_repo_push.webp" alt="notebook git repo push">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we do a <code>ls</code> in our local repository, we can see that the files we have in the remote repository are also in the local repository, meaning we have synchronized the local and remote repositories.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '.  ..  api_keys.py  archivo1.py  archivo2.py  archivo8.py  .git  .gitignore',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The only ones not in the remote repository are <code>api_keys.py</code>, which we added to the <code>.gitignore</code> file, meaning we told git not to track it. And <code>.git</code>, which is where the configuration of our local repository is stored and should not be uploaded to the remote repository, because each person will have their own git configuration and therefore it should not be synchronized.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Download changes from a remote repository to a local repository (git pull)">Download changes from a remote repository to a local repository (<code>git pull</code>)<a class="anchor-link" href="#Download changes from a remote repository to a local repository (git pull)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 146" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Now we are going to do the opposite, we are going to pull down any new changes that have been made in the remote repository. If we look at the state of the remote repository, we can see there is a button that says <code>Add a README</code>, so we click it to add it.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/notebook_git_repo_push.webp" alt="notebook git repo push">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>When we click, an editor will open. We leave what GitHub has put and save the changes by clicking on the <code>Commit changes...</code> button.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/notebook_git_repo_readme.webp" alt="noteboot git repo readme">
      <p>A window will pop up asking for a commit message, we leave the default one and click on <code>Commit changes</code></p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/notebook_git_repo_commit_message.webp" alt="notebook git repo commit message">
      <p>By doing that, the repository will end up like this</p>
      <p>!<a href="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/notebook_git_repo_pull.webp" target="_blank" rel="nofollow noreferrer">notebook git repo pull</a></p>
      <p>A new file called <code>README.md</code> has been created, but if we run <code>ls</code> in the local repository we won't find it.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">README</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>So, we need to bring the changes from the remote repository to the local one. For this, you have to do <code>git pull origin &#x3C;remote branch&#x3E;</code> to tell Git which remote branch you are going to fetch data from. However, just like before, you can establish a relationship between the remote branch and the local branch in the following way: <code>git branch --set-upstream-to=origin/&#x3C;local branch&#x3E; &#x3C;remote branch&#x3E;</code>. But since our local branch is called <code>main</code> and the remote GitHub branch is also called <code>main</code>, you would need to change the previous command to <code>git branch --set-upstream-to=origin/main main</code>.</p>
      <p>Once this is done, to download the new changes from the remote repository to the local one, you would only need to do <code>git pull</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's establish the relationship between branches with <code>git branch --set-upstream-to=origin/main main</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="nb">set</span><span class="o">-</span><span class="n">upstream</span><span class="o">-</span><span class="n">to</span><span class="o">=</span><span class="n">origin</span><span class="o">/</span><span class="n">main</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Rama &#x27;main&#x27; configurada para hacer seguimiento a la rama remota &#x27;main&#x27; de &#x27;origin&#x27;.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we can bring the changes from the remote repository to the local repository with <code>git pull</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">pull</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'remote: Enumerating objects: 4, done.',
          'remote: Counting objects: 100% (4/4), done.',
          'remote: Compressing objects: 100% (2/2), done.',
          'remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0',
          'Desempaquetando objetos: 100% (3/3), 646 bytes | 646.00 KiB/s, listo.',
          'Desde github.com:maximofn/notebook_git',
          '&#x20;&#x20;&#x20;679bb49..527e07a  main       -&amp;gt; origin/main',
          'Actualizando 679bb49..527e07a',
          'Fast-forward',
          'README.md | 1 +',
          '1 file changed, 1 insertion(+)',
          'create mode 100644 README.md',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, it says that <code>README.md</code> has been added, let's check by running <code>ls</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">README</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'README.md',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We have the file locally</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Synchronize remote and local branches">Synchronize remote and local branches<a class="anchor-link" href="#Synchronize remote and local branches"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 147" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we have seen, we had to synchronize the remote and local branches in order to upload and download data. However, if we first create the repository on GitHub and then clone it, such synchronization is no longer necessary.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Alias">Alias<a class="anchor-link" href="#Alias"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 148" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Every time we have wanted to make a log we have used this command <code>git log --graph --oneline --decorate</code>, however, remembering this command is quite complicated, in fact, I don't remember it, every time I have wanted to use it I had to look it up because I didn't remember it, so it would be great to have a way to abbreviate it.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>For this, Git offers <code>aliases</code>, so you can create aliases for any commands you want. To do this, you need to run <code>git config --global alias.&#x3C;name of the alias&#x3E; &quot;command&quot;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Therefore, we are going to call <code>git tree</code> the command <code>git log --graph --oneline --decorate</code>, since it allows us to see the history with branch forks and merges as if they were the growth of a tree, so we do <code>git config --global alias.tree &quot;log --graph --oneline --decorate&quot;</code></p>
      <blockquote>
      <p>**Important**: Do not put the word <code>git</code> inside the command</p>
      </blockquote>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">alias</span><span class="o">.</span><span class="n">tree</span> <span class="s2">&quot;log --graph --oneline --decorate&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we now go to our repository and run <code>git tree</code>, we will see the history as we used to before.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tree</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 527e07a (HEAD -&amp;gt; main, origin/main) Create README.md',
          '*   679bb49 archivo1.py con el merge resuelto',
          '|\\',
          '| * 32851c3 archivo1.py en rama rama_con_conflicto',
          '* | 53f909b archivo1.py en rama main',
          '|/',
          '* 52acb97 Merge squash de los commits de la rama branch_squash',
          '*   274529c Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, our alias has been created.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Aliases of existing git commands">Aliases of existing git commands<a class="anchor-link" href="#Aliases of existing git commands"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 149" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>You can create aliases for commands that already exist in git; in fact, this is a practice used by many people, especially to abbreviate. So we are going to create one. We will make an alias for the <code>git status</code> command and rename it as <code>git st</code> in the following way: <code>git config --global alias.st &quot;status&quot;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">alias</span><span class="o">.</span><span class="n">st</span> <span class="s2">&quot;status&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We test it now</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">st</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama main',
          'Tu rama estÃ¡ actualizada con &#x27;origin/main&#x27;.',
          'nada para hacer commit, el Ã¡rbol de trabajo estÃ¡ limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We already have the command <code>git status</code> simplified to <code>git st</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Aliases for commands that are not git commands">Aliases for commands that are not git commands<a class="anchor-link" href="#Aliases for commands that are not git commands"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 150" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can create aliases for commands that are not git-related, for example, because we think git needs that new command. It's done the same way with the exception that the command must be preceded by <code>!</code>, that is, it would be <code>git config --global alias.&#x3C;alias name&#x3E; &quot;!command&quot;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>When we have seen the conflicts, we have seen that git tells us where they are, but to resolve them we have to edit the code ourselves, so we can create a git alias so that we can open a file with the text editor of our choice. In my case, I will create an alias that will open files with <code>vscode</code>. To do this, I need to run <code>git config --global alias.code &quot;!code&quot;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">alias</span><span class="o">.</span><span class="n">code</span> <span class="s2">&quot;!code&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We tested it</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">code</span> <span class="n">README</span><span class="o">.</span><span class="n">md</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>After doing this, <code>README.md</code> opened in <code>vscode</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="List with all the aliases">List with all the aliases<a class="anchor-link" href="#List with all the aliases"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 151" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we forget the aliases we have created, we can view the global git configuration. However, since this can be a bit overwhelming due to the amount of information it provides, we can filter it to show only the aliases we have created. For this, we use <code>git config --get-regexp ^alias\.</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">get</span><span class="o">-</span><span class="n">regexp</span> <span class="o">^</span><span class="n">alias</span>\<span class="o">.</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'alias.tree log --graph --oneline --decorate',
          'alias.st status',
          'alias.code !code',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We get the aliases we have created</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>But even better, we can create an alias to get the aliases, for this we do <code>git config --global alias.alias &quot;config --get-regexp ^alias\.&quot;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">alias</span><span class="o">.</span><span class="n">alias</span> <span class="s2">&quot;config --get-regexp ^alias\.&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we now do <code>git alias</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">alias</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'alias.tree log --graph --oneline --decorate',
          'alias.st status',
          'alias.code !code',
          'alias.alias config --get-regexp ^alias\.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We get the list with all our aliases</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Stash store (git stash)">Stash store (<code>git stash</code>)<a class="anchor-link" href="#Stash store (git stash)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 152" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suppose we are working on a branch, we have several modified files, we haven't made a commit, and for some reason we need to switch to another branch. For example, we are on a branch developing a new feature, and we have to leave it halfway because there is a critical bug in the main branch.</p>
      <p>One solution would be to make a commit to save the changes and come back later. But maybe we left the code halfway and don't want to make a commit. So for that, stash was invented, which is like a storage place where you leave your code stored to be able to recover it later.</p>
      <p>It is a stack, which means that the last thing to enter is the first to exit.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's see how to do it, first we create a new branch that we will call <code>new_feature</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="n">new_feature</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We switch to her</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">new_feature</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;new_feature&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We are going to modify <code>archivo2.py</code> and <code>archivo8.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;new_feature&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo2</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;new_feature&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo8</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We run a <code>git status</code> to check that changes have been made</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'Cambios no rastreados para el commit:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para actualizar lo que serÃ¡ confirmado)',
          '&#x20;&#x20;(usa &quot;git restore &amp;lt;archivo&amp;gt;...&quot; para descartar los cambios en el directorio de trabajo)',
          'modificados:     archivo2.py',
          'modificados:     archivo8.py',
          'sin cambios agregados al commit (usa &quot;git add&quot; y/o &quot;git commit -a&quot;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's add <code>archivo8.py</code> to the <code>staged</code> area</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo8</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We run <code>git status</code> again</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del Ã¡rea de stage)',
          'modificados:     archivo8.py',
          'Cambios no rastreados para el commit:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para actualizar lo que serÃ¡ confirmado)',
          '&#x20;&#x20;(usa &quot;git restore &amp;lt;archivo&amp;gt;...&quot; para descartar los cambios en el directorio de trabajo)',
          'modificados:     archivo2.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, we have two modified files, one of which is also in the <code>staged</code> area. If we now needed to switch branches, to avoid losing our changes, we could either commit them or store them in the <code>stash</code>, so let's do the latter using <code>git stash</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Directorio de trabajo y estado de Ã­ndice WIP on new_feature: 527e07a Create README.md guardados',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we now run <code>git status</code> again, let's see what happens</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'nada para hacer commit, el Ã¡rbol de trabajo estÃ¡ limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Files with modifications no longer appear, it's as if we had made a commit.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>**Important**: New files that have never been tracked by Git will not be added to the repository, so for new files, you need to at least do a <code>git add</code> first.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If I now create a new file and try to take it to the repository, I will get an error.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">archivo9</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se serÃ¡ confirmado)',
          'archivo9.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'No hay cambios locales para guardar',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se serÃ¡ confirmado)',
          'archivo9.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, <code>archivo9.py</code> has not been saved in the repository, so it should have been added with <code>git add</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">rm</span> <span class="n">archivo9</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Everything to the stash (git stash -u -a)">Everything to the stash (<code>git stash -u -a</code>)<a class="anchor-link" href="#Everything to the stash (git stash -u -a)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 153" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we have seen, only the files that git is tracking are sent to the repository. However, if we have newly created files or ignored files, they will not be sent. To solve this, we can use the <code>-u</code> or <code>--include-untracked</code> flags to send new files that git has not yet tracked, and the <code>-a</code> or <code>--all</code> flag to include everything, even ignored files.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="List of stashes (git stash list)">List of stashes (<code>git stash list</code>)<a class="anchor-link" href="#List of stashes (git stash list)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 154" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we have mentioned, the stash acts as a stack, so if we use this stash many times, in reality we will have a list of stashes, and to see the ones we have stored we can use <code>git stash list</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span> <span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'stash@&#x7B;0&#x7D;: WIP on new_feature: 527e07a Create README.md',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, we only have one, which indicates the branch (<code>on new_feature</code>), the last commit (<code>Create README.md</code>), and an identifier (<code>527e07a</code>).</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Stash with description (git stash push -m &#x3C;description&#x3E;)">Stash with description (<code>git stash push -m &#x3C;description&#x3E;</code>)<a class="anchor-link" href="#Stash with description (git stash push -m &#x3C;description&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 155" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we have seen, the list returns the branch and the last commit, but this information only helps us know where we started modifying before saving to the history. Additionally, it returns an identifier that doesn't tell us much, so we can add a first description to the stash with <code>git stash push -m &#x3C;description&#x3E;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First we do a <code>git status</code> to see what we have uncommitted.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se serÃ¡ confirmado)',
          'archivo9.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We have <code>archivo9.py</code>, but let's remember that it has never been tracked by git, so to include it in a stash we need to use the <code>-u</code> flag or the <code>-a</code> flag, so we create a new stash with a description using the command <code>git stash push -u -m &#x3C;description&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span> <span class="n">push</span> <span class="o">-</span><span class="n">u</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;archivo9.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Directorio de trabajo y estado de Ã­ndice On new_feature: archivo9.py guardados',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We pull out the list from the stash</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span> <span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'stash@&#x7B;0&#x7D;: On new_feature: archivo9.py',
          'stash@&#x7B;1&#x7D;: WIP on new_feature: 527e07a Create README.md',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The new one appears much more clearly</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Recover the last stash (git stash pop)">Recover the last stash (<code>git stash pop</code>)<a class="anchor-link" href="#Recover the last stash (git stash pop)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 156" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we have said, the stash is a stack of stores, so when it comes to recovering them, we will do it just like a stack, always recovering the last one.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/git-stash-push-pop.webp" alt="git stash push pop">
      <p>To recover the last stash we have to do <code>git stash pop</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First we do a <code>git status</code> to check that we don't have any pending changes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'nada para hacer commit, el Ã¡rbol de trabajo estÃ¡ limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we recover the last stash</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span> <span class="n">pop</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del Ã¡rea de stage)',
          'nuevos archivos: archivo9.py',
          'Descartado refs/stash@&#x7B;0&#x7D; (0246b0e922f654e7fc68cfeaf26e24fc511feb37)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we run <code>git status</code> again, we will see that we have <code>archivo9.py</code> pending to be committed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del Ã¡rea de stage)',
          'nuevos archivos: archivo9.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>And if we check the stash list, we will see that we only have one left.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span> <span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'stash@&#x7B;0&#x7D;: WIP on new_feature: 527e07a Create README.md',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Remove a stash (git stash drop &#x3C;position&#x3E;)">Remove a stash (<code>git stash drop &#x3C;position&#x3E;</code>)<a class="anchor-link" href="#Remove a stash (git stash drop &#x3C;position&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 157" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we want to delete a stash, we have to do <code>git stash drop &#x3C;position&#x3E;</code>, where <code>&#x3C;position&#x3E;</code> is the position that the stash occupies in the list.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We get the list of stashes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span> <span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'stash@&#x7B;0&#x7D;: WIP on new_feature: 527e07a Create README.md',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In our case, we only have one and it is at position 0 (<code>stash@&#123;0&#125;</code>), so to remove it, we would have to do <code>git stash drop 0</code>, but I'm not going to do it because I will delete it now with another command.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Clear all stashes (git stash clear)">Clear all stashes (<code>git stash clear</code>)<a class="anchor-link" href="#Clear all stashes (git stash clear)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 158" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we want to empty the entire stash list, we have to do <code>git stash clear</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span> <span class="n">clear</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we now request the list of stashes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span> <span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We don't get anything because we have removed everything</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's leave everything as it was, we do a <code>git status</code> to remember the changes we had pending</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del Ã¡rea de stage)',
          'nuevos archivos: archivo9.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that we are on the <code>new_feature</code> branch and that we have <code>archivo9.py</code> pending to be committed. Since we created it for the example, we delete it and return to the main branch.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="n">archivo9</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">rm</span> <span class="n">archivo9</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;main&#x27;',
          'Tu rama estÃ¡ actualizada con &#x27;origin/main&#x27;.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Tags">Tags<a class="anchor-link" href="#Tags"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 159" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>When we are developing code, there come times when we generate versions, for example <code>v1.1</code>, <code>v1.2</code>, etc. To have this better controlled, Git provides us with tags.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Create a new tag (git tag -a &#x3C;tag_name&#x3E; -m &quot;&#x3C;message&#x3E;&quot;)">Create a new tag (<code>git tag -a &#x3C;tag_name&#x3E; -m &quot;&#x3C;message&#x3E;&quot;</code>)<a class="anchor-link" href="#Create a new tag (git tag -a &#x3C;tag_name&#x3E; -m &quot;&#x3C;message&#x3E;&quot;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 160" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To create a tag we have to do <code>git tag -a &#x3C;tag_name&#x3E; -m &quot;&#x3C;message&#x3E;&quot;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>For example, let's create a tag on the current version of the repository. To do this, I will run <code>git tag -a v_tag -m &quot;Tag with the repository at the end, where we explain the tags&quot;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tag</span> <span class="o">-</span><span class="n">a</span> <span class="n">v_tag</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Tag con el repositorio en la parte final, en la que explicamos los tags&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="List of tags (git tag)">List of tags (<code>git tag</code>)<a class="anchor-link" href="#List of tags (git tag)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 161" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To see the tags we have created, we can run <code>git tag</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tag</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'v_tag',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Create a tag from an old commit (git tag -a &#x3C;tag_name&#x3E; -m &quot;&#x3C;message&#x3E;&quot; &#x3C;hash&#x3E;)">Create a tag from an old commit (<code>git tag -a &#x3C;tag_name&#x3E; -m &quot;&#x3C;message&#x3E;&quot; &#x3C;hash&#x3E;</code>)<a class="anchor-link" href="#Create a tag from an old commit (git tag -a &#x3C;tag_name&#x3E; -m &quot;&#x3C;message&#x3E;&quot; &#x3C;hash&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 162" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's do a <code>git tree</code> to see the history</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tree</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 527e07a (HEAD -&amp;gt; main, tag: v_tag, origin/main, new_feature) Create README.md',
          '*   679bb49 archivo1.py con el merge resuelto',
          '|\\',
          '| * 32851c3 archivo1.py en rama rama_con_conflicto',
          '* | 53f909b archivo1.py en rama main',
          '|/',
          '* 52acb97 Merge squash de los commits de la rama branch_squash',
          '*   274529c Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Although it's not mentioned in the description, when we made the commit <code>4bb9d75</code> that was when we finished the local version control part, so it would also be good to have a tag for that moment. To do this, we need to create a tag by adding the hash of that moment.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tag</span> <span class="o">-</span><span class="n">a</span> <span class="n">v_local</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Tag con el repositorio en la parte de control de versiones de manera local&quot;</span> <span class="mi">4</span><span class="n">bb9d75</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we now make a list of the tags, the new one appears</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tag</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'v_local',
          'v_tag',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>And if we look at the commit history</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tree</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 527e07a (HEAD -&amp;gt; main, tag: v_tag, origin/main, new_feature) Create README.md',
          '*   679bb49 archivo1.py con el merge resuelto',
          '|\\',
          '| * 32851c3 archivo1.py en rama rama_con_conflicto',
          '* | 53f909b archivo1.py en rama main',
          '|/',
          '* 52acb97 Merge squash de los commits de la rama branch_squash',
          '*   274529c Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (tag: v_local, new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>At the point in history where we created the tag, the tag now appears <code>* 4bb9d75 (tag: v_local, new_branch) Commit with file 7</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Switching between tags (git reset --hard &#x3C;tag&#x3E; or git reset --soft &#x3C;tag&#x3E;)">Switching between tags (<code>git reset --hard &#x3C;tag&#x3E;</code> or <code>git reset --soft &#x3C;tag&#x3E;</code>)<a class="anchor-link" href="#Switching between tags (git reset --hard &#x3C;tag&#x3E; or git reset --soft &#x3C;tag&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 163" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Just like we can move between different commits in the history, we can also move between tags. This has the advantage that we can move to another point in history without having to know the hash; by knowing the name of the tag we placed at that moment, we can simply do <code>git reset --hard &#x3C;tag&#x3E;</code> or <code>git reset --soft &#x3C;tag&#x3E;</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First, let's do an <code>ls</code> to see the files we have</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'api_keys.py  archivo1.py  archivo2.py  archivo8.py  README.md',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We also do a <code>git tree</code> to see where we are in the history.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tree</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 527e07a (HEAD -&amp;gt; main, tag: v_tag, origin/main, new_feature) Create README.md',
          '*   679bb49 archivo1.py con el merge resuelto',
          '|\\',
          '| * 32851c3 archivo1.py en rama rama_con_conflicto',
          '* | 53f909b archivo1.py en rama main',
          '|/',
          '* 52acb97 Merge squash de los commits de la rama branch_squash',
          '*   274529c Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (tag: v_local, new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now let's move to the point where we created the <code>v_local</code> tag using <code>git reset --hard v_local</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="n">v_local</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'HEAD estÃ¡ ahora en 4bb9d75 Commit con el archivo 7',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we now run <code>ls</code> again, we see that we don't have the same files.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'api_keys.py  archivo1.py  archivo2.py  archivo4.py  archivo7.py  hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we also look at the history, we can see that we have changed the moment in history.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tree</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 4bb9d75 (HEAD -&amp;gt; main, tag: v_local, new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>To go back to the last moment in history, since we have also created a tag, it will be enough to do <code>git reset --hard v_tag</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="n">v_tag</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'HEAD estÃ¡ ahora en 527e07a Create README.md',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We go back to the history to check that we have returned to the last moment of the history</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tree</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 527e07a (HEAD -&amp;gt; main, tag: v_tag, origin/main, new_feature) Create README.md',
          '*   679bb49 archivo1.py con el merge resuelto',
          '|\\',
          '| * 32851c3 archivo1.py en rama rama_con_conflicto',
          '* | 53f909b archivo1.py en rama main',
          '|/',
          '* 52acb97 Merge squash de los commits de la rama branch_squash',
          '*   274529c Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (tag: v_local, new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa AÃ±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>









































    </div>

  </section>

</PostLayout>
