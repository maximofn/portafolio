---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'LLMs quantization';
const end_url = 'llms-quantization';
const description = 'Imagine having a giant language model that can answer any question, from the capital of France to the perfect brownie recipe! üçûÔ∏èüá´üá∑ But what happens when that model has to fit on a mobile device? üì± That\'s where quantization comes in! üéâ This technique allows us to reduce the size of models without sacrificing their accuracy, which means we can enjoy artificial intelligence on our mobile devices without the need for a supercomputer. üíª It\'s like compressing an elephant into a shoebox, but without crushing the elephant! üêòüòÇ';
const keywords = 'quantization, LLMs, GPT, AI, machine learning, deep learning, FP16, FP32, TF32, BF16, INT8, UINT8, FP8, FP4, post-training, during-training, zero-point, affine, QLoRA, AWQ, QuIP, GGUF, HQQ, AQLM, FBGEMM FP8';
const languaje = 'EN';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/quantization-thumbnail.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1080
    image_height=794
    image_extension=webp
    article_date=2024-07-21+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Format of the parameters"><h2>Format of the parameters</h2></a>
      <a class="anchor-link" href="#Types of Quantization"><h2>Types of Quantization</h2></a>
      <a class="anchor-link" href="#Zero-Point Quantization"><h3>Zero-Point Quantization</h3></a>
      <a class="anchor-link" href="#Affine Quantization"><h3>Affine Quantization</h3></a>
      <a class="anchor-link" href="#Moments of Quantization"><h2>Moments of Quantization</h2></a>
      <a class="anchor-link" href="#Post-training Quantization"><h3>Post-training Quantization</h3></a>
      <a class="anchor-link" href="#Quantization during training"><h3>Quantization during training</h3></a>
      <a class="anchor-link" href="#Quantization Methods"><h2>Quantization Methods</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Disclaimer: This post has been translated to English using a machine translation model. Please, let me know if you find any mistakes.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Language models are getting larger, which makes them increasingly expensive and costly to run.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/LLMs-size-evolution.webp" alt="LLMs-size-evolution">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/Llama-size-evolution.webp" alt="Llama-size-evolution">
      <p>For example, the Llama 3 400B model, if its parameters are stored in FP32 format, each parameter therefore occupies 4 bytes, which means that just to store the model requires 400*(10e9)*4 bytes = 1.6 TB of VRAM. This amounts to 20 GPUs with 80GB of VRAM each, which are not cheap either.</p>
      <p>But if we set aside giant models and move to more common sizes, for example, 70B parameters, just storing the model requires 70*(10e9)*4 bytes = 280 GB of VRAM, which means 4 GPUs with 80GB of VRAM each.</p>
      <p>This is because we store the weights in FP32 format, meaning that each parameter occupies 4 bytes. But what if we manage to make each parameter occupy fewer bytes? This is called quantization.</p>
      <p>For example, if we manage to make a 70B parameter model's parameters take up half a byte, then we would only need 70*(10e9)*0.5 bytes = 35 GB of VRAM memory, which means 2 GPUs with 24GB of VRAM each, which can already be considered normal user GPUs.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We therefore need ways to reduce the size of these models. There are three ways to do this: distillation, pruning, and quantization.</p>
      <p>Distillation involves training a smaller model based on the outputs of the larger one. That is, an input is fed to both the small and large models, and it is considered that the correct output is that of the large model, so the small model is trained according to the output of the large model. However, this requires storing the large model, which is not what we want or can do.</p>
      <p>Pruning consists of eliminating parameters from the model, making it progressively smaller. This method is based on the idea that current language models are oversized and only a few parameters are the ones that truly provide information. Therefore, if we can eliminate the parameters that do not contribute information, we will achieve a smaller model. However, this is not straightforward today, as we do not have a good way of knowing which parameters are important and which are not.</p>
      <p>On the other hand, quantization consists of reducing the size of each of the model's parameters. And this is what we are going to explain in this post.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Format of the parameters">Format of the parameters<a class="anchor-link" href="#Format of the parameters"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 10" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The parameters of the weights can be stored in various types of formats</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/numbers-representation.webp" alt="numbers-representation">
      <p>Originally, FP32 was used to store the parameters, but due to running out of memory to store the models, they started switching to FP16, which did not yield bad results.</p>
      <p>However, the problem with FP16 is that it does not reach values as high as FP32, which can lead to overflow issues. This means that during internal calculations in the network, the result may be so high that it cannot be represented in FP16, leading to errors. This happens because the model was trained in FP32, allowing all possible internal calculations to be feasible. However, when switching to FP16 for inference, some internal calculations can produce overflows.</p>
      <p>Due to these overflow errors, TF32 and BF16 were created, which have the same number of exponent bits, allowing them to reach as high values as FP32, but with the advantage of using less memory due to having fewer bits. However, both, with fewer mantissa bits, cannot represent numbers with as much precision as FP32, which can lead to rounding errors, but at least we won't get an error when running the network. TF32 has a total of 19 bits, while BF16 has 16 bits. BF16 is more commonly used because it saves more memory.</p>
      <p>Historically, the INT8 and UINT8 formats have existed, which can represent numbers from -128 to 127 and from 0 to 255 respectively. Although these are good formats because they allow saving memory, as each parameter occupies 1 byte compared to the 4 bytes of FP32, the problem they have is that they can only represent a small range of numbers and also only integers, which can lead to the two problems seen earlier: overflow and lack of precision.</p>
      <p>To solve the problem that the INT8 and UINT8 formats only represent integers, the FP8 and FP4 formats have been created, but they are not yet well established, nor do they have a very standardized format.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Although we have ways to store model parameters in smaller formats, and even if we manage to solve overflow and rounding issues, we have another problem: not all GPUs are capable of representing all formats. This is because these memory issues are relatively new, so older GPUs were not designed to address these problems and therefore cannot represent all formats.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/GPUs-data-formating.webp" alt="GPUs-data-formating">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As a final detail, as a curiosity, during the training of the models, what is called mixed precision is used. The model weights are stored in FP32 format, however, the <code>forward pass</code> and the <code>backward pass</code> are performed in FP16 to make it faster. The resulting gradients from the <code>backward pass</code> are stored in FP16 and are used to modify the FP32 values of the weights.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Types of Quantization">Types of Quantization<a class="anchor-link" href="#Types of Quantization"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 11" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Zero-Point Quantization">Zero-Point Quantization<a class="anchor-link" href="#Zero-Point Quantization"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 12" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>This is the simplest type of quantization. It consists of linearly reducing the range of values, the minimum value of FP32 corresponds to the minimum value of the new format, the zero of FP32 corresponds to the zero of the new format, and the maximum value of FP32 corresponds to the maximum value of the new format.</p>
      <p>For example, if we want to represent numbers from -1 to 1 in UINT8 format, since the limits of UINT8 are -127 and 127, if we want to represent the value 0.3, we multiply 0.3 by 127, which gives 38.1, and round it to 38, which is the value that would be stored in UINT8.</p>
      <p>If we want to do the opposite step, to convert 38 to a format between -1 and 1, what we do is divide 38 by 127, which gives 0.2992, which is approximately 0.3, and we can see that we have an error of 0.008</p>
      <p>!<a href="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/quantization-zero-point.webp" target="_blank" rel="nofollow noreferrer">quantization-zero-point</a></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Affine Quantization">Affine Quantization<a class="anchor-link" href="#Affine Quantization"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 13" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In this type of quantization, if you have an array of values in one format and you want to convert it to another, first the entire array is divided by the maximum value of the array, and then the entire array is multiplied by the maximum value of the new format.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/quantization-affine.webp" alt="quantization-affine">
      <p>For example, in the previous image we have the array</p>
      <div class='highlight'><pre><code>[1.2, -0.5, -4.3, 1.2, -3.1, 0.8, 2.4, 5.4]</code></pre></div>
      <p>As its maximum value is <code>5.4</code>, we divide the array by that value and obtain</p>
      <div class='highlight'><pre><code>[0.2222222222, -0.09259259259, -0.7962962963, 0.2222222222, -0.5740740741, 0.1481481481, 0.4444444444, 1]</code></pre></div>
      <p>If we now multiply all the values by <code>127</code>, which is the maximum value of UINT8, we get</p>
      <div class='highlight'><pre><code>[28,22222222, -11.75925926, -101.1296296, 28.22222222, -72.90740741, 18.81481481, 56.44444444, 127]</code></pre></div>
      <p>Which, rounding, would be</p>
      <div class='highlight'><pre><code>[28, -12, -101, 28, -73, 19, 56, 127]</code></pre></div>
      <p>If we now wanted to perform the inverse step, we would have to divide the resulting array by <code>127</code>, which would give</p>
      <div class='highlight'><pre><code>[0, 0.2204724409, -0.09448818898, -0.7952755906, 0.2204724409, -0.5748031496, 0.1496062992, 0.4409448819, 1]</code></pre></div>
      <p>And multiply by <code>5.4</code> again, which would give us</p>
      <div class='highlight'><pre><code>[1, 1.190551181, -0.5102362205, -4.294488189, 1.190551181, -3.103937008, 0.8078740157, 2.381102362, 5.4]</code></pre></div>
      <p>If we compare it with the original array, we see that we have an error</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Moments of Quantization">Moments of Quantization<a class="anchor-link" href="#Moments of Quantization"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 14" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Post-training Quantization">Post-training Quantization<a class="anchor-link" href="#Post-training Quantization"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 15" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As the name suggests, quantization occurs after training. The model is trained in FP32 and then quantized to another format. This method is the simplest, but it can lead to precision errors in quantization.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Quantization during training">Quantization during training<a class="anchor-link" href="#Quantization during training"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 16" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>During training, the <code>forward pass</code> is performed on both the original model and a quantized model to observe potential errors arising from quantization and mitigate them. This process makes training more expensive because you need to store both the original and quantized models in memory, and slower because you have to perform the <code>forward pass</code> on two models.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Quantization Methods">Quantization Methods<a class="anchor-link" href="#Quantization Methods"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 17" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Below I show the links to the posts where I explain each of the methods so that this post doesn't become too long</p>
      <ul>
        <li><a href="/llm-int8">LLM.int8()</a></li>
        <li><a href="/gptq">GPTQ</a></li>
        <li><a href="/qlora">QLoRA</a></li>
        <li>AWQ</li>
        <li>QuIP</li>
        <li>GGUF</li>
        <li>HQQ</li>
        <li>AQLM</li>
        <li>FBGEMM FP8</li>
      </ul>
      </section>







    </div>

  </section>

</PostLayout>
