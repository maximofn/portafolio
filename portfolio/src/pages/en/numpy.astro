---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Matrix calculation with NumPy';
const end_url = 'numpy';
const description = 'ðŸŸ¢ Learn to do all the matrix calculation you want in an agile way with NumPy';
const keywords = 'NumPy, matrix calculation, Python, tutorial, beginners';
const languaje = 'EN';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/numpy-icon.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=212
    image_height=238
    image_extension=webp
    article_date=2021-04-23+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#1.-Summary"><h2>1. Summary</h2></a>
      <a class="anchor-link" href="#2.-What-is-NumPy?"><h2>2. What is NumPy?</h2></a>
      <a class="anchor-link" href="#2.1.-NumPy-as-np"><h3>2.1. NumPy as <code>np</code></h3></a>
      <a class="anchor-link" href="#3.-Speed-of-NumPy"><h2>3. Speed of NumPy</h2></a>
      <a class="anchor-link" href="#4.-Matrices-in-NumPy"><h2>4. Matrices in NumPy</h2></a>
      <a class="anchor-link" href="#4.1.-How-to-Create-Matrices"><h3>4.1. How to Create Matrices</h3></a>
      <a class="anchor-link" href="#4.2.-Dimensions-of-matrices"><h3>4.2. Dimensions of matrices</h3></a>
      <a class="anchor-link" href="#4.3.-Size-of-the-matrices"><h3>4.3. Size of the matrices</h3></a>
      <a class="anchor-link" href="#5.-Data-Type"><h2>5. Data Type</h2></a>
      <a class="anchor-link" href="#6.-Mathematical-operations"><h2>6. Mathematical operations</h2></a>
      <a class="anchor-link" href="#6.1.-Basic-Operations"><h3>6.1. Basic Operations</h3></a>
      <a class="anchor-link" href="#6.2.-Functions-on-Arrays"><h3>6.2. Functions on Arrays</h3></a>
      <a class="anchor-link" href="#6.3.-Broadcasting"><h3>6.3. Broadcasting</h3></a>
      <a class="anchor-link" href="#7.-Array-Indexing"><h2>7. Array Indexing</h2></a>
      <a class="anchor-link" href="#7.1.-Slices-of-arrays"><h3>7.1. Slices of arrays</h3></a>
      <a class="anchor-link" href="#Set-the-range-with-negative-numbers"><h2>Set the range with negative numbers</h2></a>
      <a class="anchor-link" href="#Ejemplo-en-Python"><h3>Ejemplo en Python</h3></a>
      <a class="anchor-link" href="#Aplicaciones"><h3>Aplicaciones</h3></a>
      <a class="anchor-link" href="#Conclusi%C3%B3n"><h3>ConclusiÃ³n</h3></a>
      <a class="anchor-link" href="#7.2.-Iteration-over-Arrays"><h3>7.2. Iteration over Arrays</h3></a>
      <a class="anchor-link" href="#8.-Copying-Arrays"><h2>8. Copying Arrays</h2></a>
      <a class="anchor-link" href="#8.1.-Copy"><h3>8.1. Copy</h3></a>
      <a class="anchor-link" href="#8.2.-View"><h3>8.2. View</h3></a>
      <a class="anchor-link" href="#8.3.-Data-Owner"><h3>8.3. Data Owner</h3></a>
      <a class="anchor-link" href="#9.-Shape-of-Matrices"><h2>9. Shape of Matrices</h2></a>
      <a class="anchor-link" href="#9.1.-Reshape"><h3>9.1. Reshape</h3></a>
      <a class="anchor-link" href="#9.2.-Unknown-Dimension"><h3>9.2. Unknown Dimension</h3></a>
      <a class="anchor-link" href="#9.3.-Array-Flattening"><h3>9.3. Array Flattening</h3></a>
      <a class="anchor-link" href="#9.4.-Transposed-Matrix"><h3>9.4. Transposed Matrix</h3></a>
      <a class="anchor-link" href="#10.-Stacking-Arrays"><h2>10. Stacking Arrays</h2></a>
      <a class="anchor-link" href="#10.1.-Vertical-stacking"><h3>10.1. Vertical stacking</h3></a>
      <a class="anchor-link" href="#10.2.-Horizontal-Stacking"><h3>10.2. Horizontal Stacking</h3></a>
      <a class="anchor-link" href="#10.3.-Stacking-in-depth"><h3>10.3. Stacking in depth</h3></a>
      <a class="anchor-link" href="#10.3.-Custom-Stacking"><h3>10.3. Custom Stacking</h3></a>
      <a class="anchor-link" href="#11.-Splitting-Matrices"><h2>11. Splitting Matrices</h2></a>
      <a class="anchor-link" href="#11.1.-Split-Vertically"><h3>11.1. Split Vertically</h3></a>
      <a class="anchor-link" href="#11.2.-Split-horizontally"><h3>11.2. Split horizontally</h3></a>
      <a class="anchor-link" href="#11.3.-custom-splitting"><h3>11.3. custom splitting</h3></a>
      <a class="anchor-link" href="#12.-Matrix-Search"><h2>12. Matrix Search</h2></a>
      <a class="anchor-link" href="#13.-Sorting-Arrays"><h2>13. Sorting Arrays</h2></a>
      <a class="anchor-link" href="#14.-Filters-in-Arrays"><h2>14. Filters in Arrays</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Matrix-Calculation-with-NumPy">Matrix Calculation with NumPy<a class="anchor-link" href="#Matrix-Calculation-with-NumPy"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 38" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Disclaimer: This post has been translated to English using a machine translation model. Please, let me know if you find any mistakes.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="1.-Summary">1. Summary<a class="anchor-link" href="#1.-Summary"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 39" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's take a brief introduction to the matrix calculation library <code>NumPy</code>. This library is designed for all types of matrix calculations, so we will focus only on the part that will be useful to understand the calculations within neural networks, but we will leave out interesting things like the use of the library for linear algebra.</p>
      <p align="center">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" alt="No description has been provided for this image" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/numpy-icon.webp" width="212" height="238"/>
      </p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="2.-What-is-NumPy?">2. What is NumPy?<a class="anchor-link" href="#2.-What-is-NumPy?"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 40" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>NumPy is a Python library designed for matrix calculations. Matrix calculations are widely used in science in general and in data science in particular, so it is necessary to have a library that does this very well.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Its name means Numerical Python</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Its primary object is the <code>ndarray</code>, which encapsulates <code>n</code>-dimensional arrays of homogeneous data types, unlike Python lists, which can have data of different types.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>NumPy aims to perform matrix calculations much faster than with Python lists, but how is this possible?</p>
      <ul>
      <li>NumPy uses compiled code, while Python uses interpreted code. The difference is that Python at runtime has to interpret, compile, and execute the code, while NumPy is already compiled, so it runs faster</li>
      <li><code>ndarray</code>s have a fixed size, unlike Python lists which are dynamic. If you want to modify the size of an array in NumPy, a new one will be created and the old one will be deleted</li>
      <li>All elements of <code>ndarray</code>s are of the same data type, unlike Python lists which can have elements of different types</li>
      <li>Part of the NumPy code is written in C/C++ (much faster than Python)</li>
      <li>The data in arrays is stored in memory contiguously, unlike Python lists, which makes it much faster to manipulate them</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Numpy offers the facility of using code that is simple to write and read, but is written and precompiled in C, which makes it much faster.</p>
      <p>Suppose we want to multiply two vectors, this would be done in C in the following way</p>
      <div class="highlight"><pre><span></span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">rows</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="p">{opening_brace}</span>
      <span class="w">  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">columns</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">++</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="p">{</span>
      <span class="w">    </span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">*</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
      <span class="w">  </span><span class="p">}</span>
      <span class="p">}</span>
      </pre></div>
      <p>Numpy offers the possibility of executing this code underneath, but much easier to write and understand by means of</p>
      <p>``python
      c = a * b</p>
      <pre><code></code></pre>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>NumPy offers vectorized code, which means you don't have to write loops, but they are being executed underneath in optimized and precompiled C code. This has the following advantages:</p>
      <ul>
      <li>The code is easier to write and read</li>
      <li>Since fewer lines of code are needed, there is less likelihood of introducing errors</li>
      <li>The code is more similar to mathematical notation</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.1.-NumPy-as-np">2.1. NumPy as <code>np</code><a class="anchor-link" href="#2.1.-NumPy-as-np"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 41" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Usually when importing NumPy, it is typically imported with the alias <code>np</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1.18.1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="3.-Speed-of-NumPy">3. Speed of NumPy<a class="anchor-link" href="#3.-Speed-of-NumPy"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 42" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As explained, NumPy performs the calculation much faster than Python lists, let's see an example where the dot product of two matrices is performed using Python lists and <code>ndarray</code>s.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">time</span>',
          ' ',
          '<span class="c1"># DimensiÃ³n de las matrices</span>',
          '<span class="n">dim</span> <span class="o">=</span> <span class="mi">1000</span>',
          '<span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="n">dim</span><span class="p">,</span> <span class="n">dim</span><span class="p">)</span>',
          ' ',
          '<span class="c1"># Se crean dos ndarrays de NumPy de dimensiÃ³n dim x dim</span>',
          '<span class="n">ndarray_a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">shape</span><span class="p">)</span>',
          '<span class="n">ndarray_b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">shape</span><span class="p">)</span>',
          ' ',
          '<span class="c1"># Se crean dos listas de Python de dimensiÃ³n dim x dim a partir de los ndarrays</span>',
          '<span class="n">list_a</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">ndarray_a</span><span class="p">)</span>',
          '<span class="n">list_b</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">ndarray_b</span><span class="p">)</span>',
          ' ',
          '<span class="c1"># Se crean el ndarray y la lista de Python donde se guardarÃ¡n los resultados</span>',
          '<span class="n">ndarray_c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">shape</span><span class="p">)</span>',
          '<span class="n">list_c</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">ndarray_c</span><span class="p">)</span>',
          ' ',
          '<span class="c1"># Producto escalar de dos listas de python</span>',
          '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>',
          '<span class="k">for</span> <span class="n">fila</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">dim</span><span class="p">):</span>',
          '  <span class="k">for</span> <span class="n">columna</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">dim</span><span class="p">):</span>',
          '    <span class="n">list_c</span><span class="p">[</span><span class="n">fila</span><span class="p">][</span><span class="n">columna</span><span class="p">]</span> <span class="o">=</span> <span class="n">list_a</span><span class="p">[</span><span class="n">fila</span><span class="p">][</span><span class="n">columna</span><span class="p">]</span> <span class="o">*</span> <span class="n">list_b</span><span class="p">[</span><span class="n">fila</span><span class="p">][</span><span class="n">columna</span><span class="p">]</span>',
          '<span class="n">t</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>',
          '<span class="n">t_listas</span> <span class="o">=</span> <span class="n">t</span><span class="o">-</span><span class="n">t0</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Tiempo para realizar el producto escalar de dos listas de Python de dimensiones </span><span class="si">{</span><span class="n">dim</span><span class="si">}</span><span class="s2">x</span><span class="si">{</span><span class="n">dim</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">t_listas</span><span class="si">:</span><span class="s2">.4f</span><span class="si">}</span><span class="s2"> ms"</span><span class="p">)</span>',
          ' ',
          ' ',
          '<span class="c1"># Producto escalar de dos ndarrays de NumPy</span>',
          '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>',
          '<span class="n">ndarray_c</span> <span class="o">=</span> <span class="n">ndarray_a</span> <span class="o">*</span> <span class="n">ndarray_b</span>',
          '<span class="n">t</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>',
          '<span class="n">t_ndarrays</span> <span class="o">=</span> <span class="n">t</span><span class="o">-</span><span class="n">t0</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Tiempo para realizar el producto escalar de dos ndarrays de NumPy de dimensiones </span><span class="si">{</span><span class="n">dim</span><span class="si">}</span><span class="s2">x</span><span class="si">{</span><span class="n">dim</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">t_ndarrays</span><span class="si">:</span><span class="s2">.4f</span><span class="si">}</span><span class="s2"> ms"</span><span class="p">)</span>',
          ' ',
          '<span class="c1"># ComparaciÃ³n de tiempos</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">Hacer el cÃ¡lculo con listas de Python tarda </span><span class="si">{</span><span class="n">t_listas</span><span class="o">/</span><span class="n">t_ndarrays</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> veces mÃ¡s rÃ¡pido que con ndarrays de NumPy"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Tiempo para realizar el producto escalar de dos listas de Python de dimensiones 1000x1000: 0.5234 ms',
          'Tiempo para realizar el producto escalar de dos ndarrays de NumPy de dimensiones 1000x1000: 0.0017 ms',
          'Hacer el cÃ¡lculo con listas de Python tarda 316.66 veces mÃ¡s rÃ¡pido que con ndarrays de NumPy',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="4.-Matrices-in-NumPy">4. Matrices in NumPy<a class="anchor-link" href="#4.-Matrices-in-NumPy"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 43" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In NumPy, a matrix is an <code>ndarray</code> object</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[1 2 3 4 5]',
          '&lt;class \'numpy.ndarray\'&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.1.-How-to-Create-Matrices">4.1. How to Create Matrices<a class="anchor-link" href="#4.1.-How-to-Create-Matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 44" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>With the <code>array()</code> method, <code>ndarray</code>s can be created by inputting Python lists (as in the previous example) or tuples.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[1 2 3 4 5]',
          '&lt;class \'numpy.ndarray\'&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>With the <code>zeros()</code> method, you can create matrices filled with zeros</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[0. 0. 0. 0.]',
          ' [0. 0. 0. 0.]',
          ' [0. 0. 0. 0.]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The method <code>zeros_like(A)</code> returns an array with the same shape as the array A, but filled with zeros</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros_like</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[0 0 0 0 0]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>With the <code>ones()</code> method, you can create matrices filled with ones</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[1. 1. 1.]',
          ' [1. 1. 1.]',
          ' [1. 1. 1.]',
          ' [1. 1. 1.]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The method <code>ones_like(A)</code> returns a matrix with the same shape as matrix A, but filled with ones.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones_like</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[1 1 1 1 1]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>With the <code>empty()</code> method, we can create arrays with the desired dimensions, but they are randomly initialized.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">((</span><span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[4.66169180e-310 2.35541533e-312 2.41907520e-312]',
          ' [2.14321575e-312 2.46151512e-312 2.31297541e-312]',
          ' [2.35541533e-312 2.05833592e-312 2.22809558e-312]',
          ' [2.56761491e-312 2.48273508e-312 2.05833592e-312]',
          ' [2.05833592e-312 2.29175545e-312 2.07955588e-312]',
          ' [2.14321575e-312 0.00000000e+000 0.00000000e+000]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The method <code>empty_like(A)</code> returns an array with the same shape as matrix A, but initialized randomly.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty_like</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[4607182418800017408 4611686018427387904 4613937818241073152',
          ' 4616189618054758400 4617315517961601024]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>With the method <code>arange(start, stop, step)</code>, you can create arrays within a specified range. This method is similar to Python's <code>range()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[10 15 20 25]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>When <code>arange</code> is used with floating-point arguments, it is generally not possible to predict the number of elements obtained, because the precision of floating-point is finite.</p>
      <p>For this reason, it is usually better to use the <code>linspace(start, stop, n)</code> function which takes the number of elements we want as an argument, instead of the step size.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[0.   0.25 0.5  0.75 1.   1.25 1.5  1.75 2.  ]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Finally, if we want to create matrices with random numbers we can use the <code>random.rand</code> function with a tuple with the dimensions as a parameter</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[0.32726085 0.65571767 0.73126697]',
          ' [0.91938206 0.9862451  0.95033649]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.2.-Dimensions-of-matrices">4.2. Dimensions of matrices<a class="anchor-link" href="#4.2.-Dimensions-of-matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 45" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In NumPy, we can create matrices of any dimension. To get the dimension of an array, we use the <code>ndim</code> method.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Matrix of dimension 0, which would be equivalent to a number</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">ndim</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '42',
          '0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>1-dimensional matrix, which would be equivalent to a vector</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">ndim</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[1 2 3 4 5]',
          '1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Matrix of dimension 2, which would be equivalent to a matrix</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">ndim</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[ 1  2  3  4  5]',
          ' [ 6  7  8  9 10]]',
          '2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Matrix of dimension 3</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">ndim</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[[ 1  2  3  4  5]',
          '  [ 6  7  8  9 10]]',
          ' [[11 12 13 14 15]',
          '  [16 17 18 19 20]]]',
          '3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>N-dimensional array. When creating <code>ndarray</code>s, the number of dimensions can be set using the <code>ndim</code> parameter.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="n">ndmin</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">ndim</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[[[[[1 2 3 4 5]]]]]]',
          '6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.3.-Size-of-the-matrices">4.3. Size of the matrices<a class="anchor-link" href="#4.3.-Size-of-the-matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 46" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If instead of the dimension of the matrix, we want to see its size, we can use the <code>shape</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(2, 2, 5)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="5.-Data-Type">5. Data Type<a class="anchor-link" href="#5.-Data-Type"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 47" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The data that NumPy arrays can store are the following:</p>
      <ul>
      <li><code>i</code> - Integer</li>
      <li><code>b</code> - Boolean</li>
      <li><code>u</code> - Unsigned integer</li>
      <li><code>f</code> - Float</li>
      <li><code>c</code> - Complex float</li>
      <li><code>m</code> - Timedelta</li>
      <li><code>M</code> - DateTime</li>
      <li><code>O</code> - Object</li>
      <li><code>S</code> - String</li>
      <li><code>U</code> - Unicode string</li>
      <li><code>V</code> - Fixed memory fragment for another type (void)</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can check the data type of an array using <code>dtype</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
          '',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="s1">\'apple\'</span><span class="p">,</span> <span class="s1">\'banana\'</span><span class="p">,</span> <span class="s1">\'cherry\'</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'int64',
          '&lt;U6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can also create arrays indicating the data type we want them to have using <code>dtype</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">\'i\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Enteros:"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
          ' ',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">\'f\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">Float:"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
          ' ',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">\'f\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">Complejos:"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
          ' ',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">\'S\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">String:"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
          ' ',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">\'U\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">Unicode string:"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
          ' ',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">\'O\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">Objeto:"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Enteros:',
          '[1 2 3 4]',
          'int32',
          'Float:',
          '[1. 2. 3. 4.]',
          'float32',
          'Complejos:',
          '[1. 2. 3. 4.]',
          'float32',
          'String:',
          '[b\'1\' b\'2\' b\'3\' b\'4\']',
          '|S1',
          'Unicode string:',
          '[\'1\' \'2\' \'3\' \'4\']',
          '&lt;U1',
          'Objeto:',
          '[1 2 3 4]',
          'object',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="6.-Mathematical-operations">6. Mathematical operations<a class="anchor-link" href="#6.-Mathematical-operations"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 48" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.1.-Basic-Operations">6.1. Basic Operations<a class="anchor-link" href="#6.1.-Basic-Operations"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 49" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Matrix operations are performed element-wise. For example, if we add two matrices, the elements of each matrix in the same position will be added, just as it is done in the mathematical addition of two matrices.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
          '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz A: tamaÃ±o </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz B: tamaÃ±o </span><span class="si">{</span><span class="n">B</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">B</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz C: tamaÃ±o </span><span class="si">{</span><span class="n">C</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">D</span> <span class="o">=</span> <span class="n">A</span> <span class="o">-</span> <span class="n">B</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz D: tamaÃ±o </span><span class="si">{</span><span class="n">D</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">D</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Matriz A: tamaÃ±o (3,)',
          '[1 2 3]',
          'Matriz B: tamaÃ±o (3,)',
          '[1 2 3]',
          'Matriz C: tamaÃ±o (3,)',
          '[2 4 6]',
          'Matriz D: tamaÃ±o (3,)',
          '[0 0 0]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>However, if we multiply two matrices, the multiplication of each element of the matrices is also performed (scalar product)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
          '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">]])</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz A: tamaÃ±o </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz B: tamaÃ±o </span><span class="si">{</span><span class="n">B</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          ' ',
          '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">*</span> <span class="n">B</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz C: tamaÃ±o </span><span class="si">{</span><span class="n">C</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Matriz A: tamaÃ±o (2, 2)',
          '[[3 5]',
          ' [4 1]]',
          'Matriz B: tamaÃ±o (2, 2)',
          '[[ 1  2]',
          ' [-3  0]]',
          'Matriz C: tamaÃ±o (2, 2)',
          '[[  3  10]',
          ' [-12   0]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>To perform the matrix product that has been taught in mathematics all your life, you need to use the <code>@</code> operator or the <code>dot</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]])</span>',
          '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">]])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz A: tamaÃ±o </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz B: tamaÃ±o </span><span class="si">{</span><span class="n">B</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">@</span> <span class="n">B</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz C: tamaÃ±o </span><span class="si">{</span><span class="n">C</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">D</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz D: tamaÃ±o </span><span class="si">{</span><span class="n">D</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">D</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Matriz A: tamaÃ±o (3, 2)',
          '[[ 3  5]',
          ' [ 4  1]',
          ' [ 6 -1]]',
          'Matriz B: tamaÃ±o (2, 3)',
          '[[ 1  2  3]',
          ' [-3  0  4]]',
          'Matriz C: tamaÃ±o (3, 3)',
          '[[-12   6  29]',
          ' [  1   8  16]',
          ' [  9  12  14]]',
          'Matriz D: tamaÃ±o (3, 3)',
          '[[-12   6  29]',
          ' [  1   8  16]',
          ' [  9  12  14]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If instead of creating a new array, you want to modify an existing one, you can use the operators <code>+=</code>, <code>-=</code> or <code>*=</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
          '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">]])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz A: tamaÃ±o </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz B: tamaÃ±o </span><span class="si">{</span><span class="n">B</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">A</span> <span class="o">+=</span> <span class="n">B</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz A tras suma: tamaÃ±o </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">A</span> <span class="o">-=</span> <span class="n">B</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz A tras resta: tamaÃ±o </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">A</span> <span class="o">*=</span> <span class="n">B</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz A tras multiplicaciÃ³n: tamaÃ±o </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Matriz A: tamaÃ±o (2, 2)',
          '[[3 5]',
          ' [4 1]]',
          'Matriz B: tamaÃ±o (2, 2)',
          '[[ 1  2]',
          ' [-3  0]]',
          'Matriz A tras suma: tamaÃ±o (2, 2)',
          '[[4 7]',
          ' [1 1]]',
          'Matriz A tras resta: tamaÃ±o (2, 2)',
          '[[3 5]',
          ' [4 1]]',
          'Matriz A tras multiplicaciÃ³n: tamaÃ±o (2, 2)',
          '[[  3  10]',
          ' [-12   0]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operations can be performed on all elements of a matrix, this is thanks to a property called <code>broadcasting</code> which we will discuss in more detail later.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz A: tamaÃ±o </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          ' ',
          '<span class="n">B</span> <span class="o">=</span> <span class="n">A</span> <span class="o">*</span> <span class="mi">2</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz B: tamaÃ±o </span><span class="si">{</span><span class="n">B</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          ' ',
          '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">**</span> <span class="mi">2</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz C: tamaÃ±o </span><span class="si">{</span><span class="n">C</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          ' ',
          '<span class="n">D</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz D: tamaÃ±o </span><span class="si">{</span><span class="n">D</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">D</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Matriz A: tamaÃ±o (2, 2)',
          '[[3 5]',
          ' [4 1]]',
          'Matriz B: tamaÃ±o (2, 2)',
          '[[ 6 10]',
          ' [ 8  2]]',
          'Matriz C: tamaÃ±o (2, 2)',
          '[[ 9 25]',
          ' [16  1]]',
          'Matriz D: tamaÃ±o (2, 2)',
          '[[ 0.28224002 -1.91784855]',
          ' [-1.51360499  1.68294197]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.2.-Functions-on-Arrays">6.2. Functions on Arrays<a class="anchor-link" href="#6.2.-Functions-on-Arrays"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 50" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As you can see in the last calculation, NumPy offers function operators over arrays, there are plenty of <a href="https://numpy.org/doc/stable/reference/routines.html" target="_blank" rel="nofollow noreferrer">functions</a> that can be performed on arrays, such as mathematical, logical, linear algebra functions, etc. Below we show some.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"exp(A)</span><span class="se">\\n</span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">A</span><span class="p">)</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"sqrt(A)</span><span class="se">\\n</span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">A</span><span class="p">)</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"cos(A)</span><span class="se">\\n</span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">A</span><span class="p">)</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'A',
          '[[3 5]',
          ' [4 1]]',
          'exp(A)',
          '[[ 20.08553692 148.4131591 ]',
          ' [ 54.59815003   2.71828183]]',
          'sqrt(A)',
          '[[1.73205081 2.23606798]',
          ' [2.         1.        ]]',
          'cos(A)',
          '[[-0.9899925   0.28366219]',
          ' [-0.65364362  0.54030231]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>There are some functions that return information from arrays, such as the mean</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A.mean()</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'A',
          '[[3 5]',
          ' [4 1]]',
          'A.mean()',
          '3.25',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>However, we can obtain this information from each axis through the <code>axis</code> attribute; if it is 0, it is done over each column, whereas if it is 1, it is done over each row.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A.mean() columnas</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A.mean() filas</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'A',
          '[[3 5]',
          ' [4 1]]',
          'A.mean() columnas',
          '[3.5 3. ]',
          'A.mean() filas',
          '[4.  2.5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.3.-Broadcasting">6.3. Broadcasting<a class="anchor-link" href="#6.3.-Broadcasting"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 51" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Matrix operations can be performed with matrices of different dimensions. In this case, NumPy will detect this and project the smaller matrix to match the larger one.</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="numpy_broadcasting" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/numpy_broadcasting.webp" width="432" height="324"/></p>
      <p>This is a great feature of NumPy, which allows calculations to be performed on arrays without having to worry about matching their dimensions.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">B</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="mi">5</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"B</span><span class="se">\\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'A',
          '[1 2 3]',
          'B',
          '[6 7 8]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
          '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"B</span><span class="se">\\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">B</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"C</span><span class="se">\\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'A',
          '[1 2 3]',
          'B',
          '[[1. 1. 1.]',
          ' [1. 1. 1.]',
          ' [1. 1. 1.]]',
          'C',
          '[[2. 3. 4.]',
          ' [2. 3. 4.]',
          ' [2. 3. 4.]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
          '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">]])</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"B</span><span class="se">\\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          ' ',
          '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">B</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"C</span><span class="se">\\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'A',
          '[1 2 3]',
          'B',
          '[[1]',
          ' [2]',
          ' [3]]',
          'C',
          '[[2 3 4]',
          ' [3 4 5]',
          ' [4 5 6]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="7.-Array-Indexing">7. Array Indexing<a class="anchor-link" href="#7.-Array-Indexing"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 52" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Array indexing is done the same way as with Python lists</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
          '<span class="n">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In the case of having more than one dimension, the index in each of them must be indicated.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]])</span>',
          '<span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '8',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Negative indexing can be used</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '9',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If one of the axes is not indicated, it is considered as an integer.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]])</span>',
          '<span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([ 6,  7,  8,  9, 10])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.1.-Slices-of-arrays">7.1. Slices of arrays<a class="anchor-link" href="#7.1.-Slices-of-arrays"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 53" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>When indexing, we can select parts of arrays just as we did with Python lists.</p>
      <p>Remember that it was done as follows:</p>
      <p><code>start:stop:step</code></p>
      <p>Where the range goes from <code>start</code> (inclusive) to <code>stop</code> (exclusive) with a <code>step</code></p>
      <p>If <code>step</code> is not specified, it defaults to 1</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>For example, if we want items from the second row and from the second to the fourth column:</p>
      <ul>
      <li>We select the second row with a 1 (since counting starts from 0)</li>
      <li>We select from the second to the fourth row using 1:4, the 1 to indicate the second column and the 4 to indicate the fifth (since the second number indicates the column where it ends without including this column). The two numbers considering that counting starts from 0</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[ 1  2  3  4  5]',
          ' [ 6  7  8  9 10]]',
          '[7 8 9]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can take from one position to the end</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">:]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([ 8,  9, 10])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>From the beginning to a position</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">:</span><span class="mi">3</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([6, 7, 8])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Set-the-range-with-negative-numbers">Set the range with negative numbers<a class="anchor-link" href="#Set-the-range-with-negative-numbers"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 54" src={opening_brace}svg_paths.link_svg_path{closing_brace}/></a></h2><h3 id="Introducci%C3%B3n">IntroducciÃ³n<a class="anchor-link" href="#Introducci%C3%B3n"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 54" src={opening_brace}svg_paths.link_svg_path{closing_brace}/></a></h3><p>En matemÃ¡ticas, los <strong>rangos negativos</strong> permiten representar intervalos en los que los nÃºmeros negativos estÃ¡n incluidos. Es una tÃ©cnica Ãºtil, especialmente en el campo de la programaciÃ³n y grÃ¡ficos por computadora. En este documento, vamos a aprender cÃ³mo establecer un rango que incluya nÃºmeros negativos.</p>
      <h3 id="Ejemplo-en-Python">Ejemplo en Python<a class="anchor-link" href="#Ejemplo-en-Python"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 55" src={opening_brace}svg_paths.link_svg_path{closing_brace}/></a></h3><p>A continuaciÃ³n se muestra un ejemplo sencillo de cÃ³mo podrÃ­as hacer esto en Python:</p>
      <div class="highlight"><pre><span></span><span class="c1"># Usando range() con nÃºmeros negativos</span>
      <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span>
          <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
      </pre></div>
      <p>Este cÃ³digo imprimirÃ¡ nÃºmeros desde -10 hasta -1. La funciÃ³n <code>range()</code> de Python nos permite definir fÃ¡cilmente un rango con nÃºmeros negativos.</p>
      <h3 id="Aplicaciones">Aplicaciones<a class="anchor-link" href="#Aplicaciones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 56" src={svg_paths.link_svg_path}/></a></h3><ol>
      <li><strong>GrÃ¡ficos por computadora:</strong> Los rangos negativos son Ãºtiles para representar coordenadas en grÃ¡ficos que pueden centrarse alrededor de un punto (0,0).</li>
      <li><strong>AnÃ¡lisis de datos:</strong> En estadÃ­sticas, puede ser necesario trabajar con rangos que incluyan nÃºmeros negativos, especialmente al tratar con desviaciones y valores por debajo de la media.</li>
      <li><strong>Simulaciones fÃ­sicas:</strong> Muchos fenÃ³menos fÃ­sicos tienen estados negativos, como temperaturas y fuerzas, lo que hace esencial trabajar con rangos negativos para modelar estos sistemas.</li>
      </ol>
      <h3 id="Conclusi%C3%B3n">ConclusiÃ³n<a class="anchor-link" href="#Conclusi%C3%B3n"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 57" src={opening_brace}svg_paths.link_svg_path{closing_brace}/></a></h3><p>Establecer rangos que incluyan nÃºmeros negativos es una herramienta esencial en varias disciplinas. Python ofrece una manera simple y eficaz para crear estos rangos, lo que facilita su uso en diversas aplicaciones.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([8, 9])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Choose the step</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([7, 9])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.2.-Iteration-over-Arrays">7.2. Iteration over Arrays<a class="anchor-link" href="#7.2.-Iteration-over-Arrays"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 58" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Iteration over multidimensional arrays is done with respect to the first axis</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">M</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span> <span class="p">[[[</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">],</span>',
          '                <span class="p">[</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]],</span>',
          '               <span class="p">[[</span><span class="mi">100</span><span class="p">,</span><span class="mi">101</span><span class="p">,</span><span class="mi">102</span><span class="p">],</span>',
          '                <span class="p">[</span><span class="mi">110</span><span class="p">,</span><span class="mi">112</span><span class="p">,</span><span class="mi">113</span><span class="p">]]])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Matriz de dimensiÃ³n: </span><span class="si">{</span><span class="n">M</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="s1">\'</span><span class="p">)</span>',
          '',
          '<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="k">for</span> <span class="n">fila</span> <span class="ow">in</span> <span class="n">M</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Fila </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1">: </span><span class="si">{</span><span class="n">fila</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Matriz de dimensiÃ³n: (2, 2, 3)',
          'Fila 0: [[ 0  1  2]',
          ' [10 12 13]]',
          'Fila 1: [[100 101 102]',
          ' [110 112 113]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>However, if what we want is to iterate over each item, we can use the 'flat' method</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="k">for</span> <span class="n">fila</span> <span class="ow">in</span> <span class="n">M</span><span class="o">.</span><span class="n">flat</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Elemento </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1">: </span><span class="si">{</span><span class="n">fila</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Elemento 0: 0',
          'Elemento 1: 1',
          'Elemento 2: 2',
          'Elemento 3: 10',
          'Elemento 4: 12',
          'Elemento 5: 13',
          'Elemento 6: 100',
          'Elemento 7: 101',
          'Elemento 8: 102',
          'Elemento 9: 110',
          'Elemento 10: 112',
          'Elemento 11: 113',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="8.-Copying-Arrays">8. Copying Arrays<a class="anchor-link" href="#8.-Copying-Arrays"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 59" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In NumPy we have two ways to copy arrays, using <code>copy</code>, which makes a new copy of the array, and using <code>view</code> which makes a view of the original array.</p>
      <p>The copy is proprietary of the data and any changes made to the copy will not affect the original array, and any changes made to the original array will not affect the copy.</p>
      <p>The view does not own the data and any changes made to the copy will affect the original array, and any changes made to the original array will affect the copy.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.1.-Copy">8.1. Copy<a class="anchor-link" href="#8.1.-Copy"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 60" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
          '<span class="n">copy_arr</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>',
          '<span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">42</span>',
          '<span class="n">copy_arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">43</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Original: </span><span class="si">{</span><span class="n">arr</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Copia:    </span><span class="si">{</span><span class="n">copy_arr</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Original: [42  2  3  4  5]',
          'Copia:    [ 1 43  3  4  5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.2.-View">8.2. View<a class="anchor-link" href="#8.2.-View"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 61" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
          '<span class="n">view_arr</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">view</span><span class="p">()</span>',
          '<span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">42</span>',
          '<span class="n">view_arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">43</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Original: </span><span class="si">{</span><span class="n">arr</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Vista:    </span><span class="si">{</span><span class="n">view_arr</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Original: [42 43  3  4  5]',
          'Vista:    [42 43  3  4  5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.3.-Data-Owner">8.3. Data Owner<a class="anchor-link" href="#8.3.-Data-Owner"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 62" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>When in doubt if we have a copy or a view, we can use <code>base</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
          ' ',
          '<span class="n">copy_arr</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>',
          '<span class="n">view_arr</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">view</span><span class="p">()</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="n">copy_arr</span><span class="o">.</span><span class="n">base</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">view_arr</span><span class="o">.</span><span class="n">base</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'None',
          '[1 2 3 4 5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="9.-Shape-of-Matrices">9. Shape of Matrices<a class="anchor-link" href="#9.-Shape-of-Matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 63" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can know the shape of the matrix using the <code>shape</code> method. This will return a tuple, the size of the tuple represents the dimensions of the matrix, and each element of the tuple indicates the number of items in each of the matrix dimensions.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[[ 1  2  3  4  5]',
          '  [ 6  7  8  9 10]]',
          ' [[11 12 13 14 15]',
          '  [16 17 18 19 20]]]',
          '(2, 2, 5)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.1.-Reshape">9.1. Reshape<a class="anchor-link" href="#9.1.-Reshape"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 64" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can change the shape of the arrays to whatever we want using the <code>reshape</code> method.</p>
      <p>For example, the previous array, which has a shape of <code>(2, 2, 4)</code>. We can reshape it to <code>(5, 4)</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr_reshape</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_reshape</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_reshape</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[ 1  2  3  4]',
          ' [ 5  6  7  8]',
          ' [ 9 10 11 12]',
          ' [13 14 15 16]',
          ' [17 18 19 20]]',
          '(5, 4)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Keep in mind that to resize matrices, the number of items in the new shape must have the same number of items as the original shape.</p>
      <p>That is, in the previous example, the first matrix had 20 items (2x2x4), and the new matrix has 20 items (5x4). What we cannot do is resize it to a matrix of size (3, 4), as there would be a total of 12 items.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr_reshape</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-red-fg">---------------------------------------------------------------------------</span>',
          '<span class="ansi-red-fg">ValueError</span>                                Traceback (most recent call last)',
          '<span class="ansi-green-fg">&lt;ipython-input-12-29e85875d1df&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span><span class="ansi-blue-fg">()</span>',
          '<span class="ansi-green-fg">----&gt; 1</span><span class="ansi-red-fg"> </span>arr_reshape <span class="ansi-blue-fg">=</span> arr<span class="ansi-blue-fg">.</span>reshape<span class="ansi-blue-fg">(</span><span class="ansi-cyan-fg">3</span><span class="ansi-blue-fg">,</span> <span class="ansi-cyan-fg">4</span><span class="ansi-blue-fg">)</span>',
          '<span class="ansi-red-fg">ValueError</span>: cannot reshape array of size 20 into shape (3,4)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.2.-Unknown-Dimension">9.2. Unknown Dimension<a class="anchor-link" href="#9.2.-Unknown-Dimension"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 65" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In the case that we want to change the shape of a matrix and we don't care about one of the dimensions, or we don't know it, we can have NumPy calculate it for us by entering a <code>-1</code> as a parameter</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">arr_reshape</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_reshape</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_reshape</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[ 1  2  3  4  5  6  7  8  9 10]',
          ' [11 12 13 14 15 16 17 18 19 20]]',
          '(2, 10)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Keep in mind that you cannot put any number in the known dimensions. The number of items in the original matrix must be a multiple of the known dimensions.</p>
      <p>In the previous example, the array has 20 items, which is a multiple of 2, a known dimension introduced. One could not have used 3 as a known dimension since 20 is not a multiple of 3, and there would be no number that could be put in the unknown dimension that would make a total of 20 items.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.3.-Array-Flattening">9.3. Array Flattening<a class="anchor-link" href="#9.3.-Array-Flattening"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 66" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can flatten arrays, that is, convert them to a single dimension using <code>reshape(-1)</code>. In this way, regardless of the dimensions of the original array, the new one will always have a single dimension.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">arr_flatten</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_flatten</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_flatten</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20]',
          '(20,)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another way to flatten an array is by using the <code>ravel()</code> method</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">arr_flatten</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">ravel</span><span class="p">()</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_flatten</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_flatten</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20]',
          '(20,)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.4.-Transposed-Matrix">9.4. Transposed Matrix<a class="anchor-link" href="#9.4.-Transposed-Matrix"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 67" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>You can obtain the transpose of a matrix using the <code>T</code> method. Transposing a matrix means swapping the rows and columns of the matrix, as illustrated in the following image.</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="transpose_matrix" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/Transpose_matrix.webp" width="512" height="111"/></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">9</span><span class="p">]])</span>',
          ' ',
          '<span class="n">arr_t</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">T</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_t</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_t</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[ 1  0  6]',
          ' [ 0  5  0]',
          ' [ 4  0 -9]]',
          '(3, 3)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="10.-Stacking-Arrays">10. Stacking Arrays<a class="anchor-link" href="#10.-Stacking-Arrays"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 68" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="10.1.-Vertical-stacking">10.1. Vertical stacking<a class="anchor-link" href="#10.1.-Vertical-stacking"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 69" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Matrices can be stacked vertically (joining rows) using the <code>vstack()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '              <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">]])</span>',
          '',
          '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> ',
          '              <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">]])</span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([[1, 1, 1],',
          '       [2, 2, 2],',
          '       [3, 3, 3],',
          '       [4, 4, 4],',
          '       [5, 5, 5],',
          '       [6, 6, 6]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If there are matrices with more than 2 dimensions, <code>vstack()</code> will stack along the first dimension.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          ' ',
          '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          ' ',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([[[1, 1],',
          '        [2, 2]],',
          '       [[3, 3],',
          '        [4, 4]],',
          '       [[5, 5],',
          '        [6, 6]],',
          '       [[7, 7],',
          '        [8, 8]]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="10.2.-Horizontal-Stacking">10.2. Horizontal Stacking<a class="anchor-link" href="#10.2.-Horizontal-Stacking"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 70" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Arrays can be stacked horizontally (joining columns) using the <code>hstack()</code> method</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '              <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]])</span>',
          '',
          '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> ',
          '              <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]])</span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([[1, 2, 3, 4, 5, 6],',
          '       [1, 2, 3, 4, 5, 6],',
          '       [1, 2, 3, 4, 5, 6]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If you have matrices with more than 2 dimensions, <code>hstack()</code> will stack along the second dimension</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([[[1, 1],',
          '        [2, 2],',
          '        [5, 5],',
          '        [6, 6]],',
          '       [[3, 3],',
          '        [4, 4],',
          '        [7, 7],',
          '        [8, 8]]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another way to add columns to a matrix is through the <code>column_stack()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '              <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]])</span>',
          ' ',
          '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>',
          ' ',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">column_stack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([[1, 2, 3, 4],',
          '       [1, 2, 3, 4],',
          '       [1, 2, 3, 4]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="10.3.-Stacking-in-depth">10.3. Stacking in depth<a class="anchor-link" href="#10.3.-Stacking-in-depth"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 71" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Arrays can be stacked in depth (third dimension) using the <code>dstack()</code> method</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"c: </span><span class="si">{</span><span class="n">c</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a.shape: </span><span class="si">{</span><span class="n">a</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">, b.shape: </span><span class="si">{</span><span class="n">b</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">, c.shape: </span><span class="si">{</span><span class="n">c</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'c: [[[1 1 1 1]',
          '  [2 2 2 2]]',
          ' [[3 3 3 3]',
          '  [4 4 4 4]]]',
          'a.shape: (2, 2, 2), b.shape: (2, 2, 2), c.shape: (2, 2, 4)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If there are matrices with more than 4 dimensions, <code>dstack()</code> will stack along the third dimension</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="n">ndmin</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>',
          '',
          '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="n">ndmin</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a.shape: </span><span class="si">{</span><span class="n">a</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">, b.shape: </span><span class="si">{</span><span class="n">b</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">, c.shape: </span><span class="si">{</span><span class="n">c</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a.shape: (1, 1, 1, 5), b.shape: (1, 1, 1, 5), c.shape: (1, 1, 2, 5)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="10.3.-Custom-Stacking">10.3. Custom Stacking<a class="anchor-link" href="#10.3.-Custom-Stacking"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 72" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Using the <code>concatenate()</code> method, you can choose the axis on which you want to stack the matrices.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">conc0</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="c1"># concatenamiento en el primer eje</span>',
          '<span class="n">conc1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># concatenamiento en el segundo eje</span>',
          '<span class="n">conc2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># concatenamiento en el tercer eje</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"conc0: </span><span class="si">{</span><span class="n">conc0</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"conc1: </span><span class="si">{</span><span class="n">conc1</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"conc2: </span><span class="si">{</span><span class="n">conc2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'conc0: [[[1 1]',
          '  [2 2]]',
          ' [[3 3]',
          '  [4 4]]',
          ' [[5 5]',
          '  [6 6]]',
          ' [[7 7]',
          '  [8 8]]]',
          'conc1: [[[1 1]',
          '  [2 2]',
          '  [5 5]',
          '  [6 6]]',
          ' [[3 3]',
          '  [4 4]',
          '  [7 7]',
          '  [8 8]]]',
          'conc2: [[[1 1 5 5]',
          '  [2 2 6 6]]',
          ' [[3 3 7 7]',
          '  [4 4 8 8]]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="11.-Splitting-Matrices">11. Splitting Matrices<a class="anchor-link" href="#11.-Splitting-Matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 73" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.1.-Split-Vertically">11.1. Split Vertically<a class="anchor-link" href="#11.1.-Split-Vertically"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 74" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Matrices can be split vertically (separating rows) using the <code>vsplit()</code> method</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mf">1.1</span><span class="p">,</span> <span class="mf">1.2</span><span class="p">,</span> <span class="mf">1.3</span><span class="p">,</span> <span class="mf">1.4</span><span class="p">],</span> ',
          '              <span class="p">[</span><span class="mf">2.1</span><span class="p">,</span> <span class="mf">2.2</span><span class="p">,</span> <span class="mf">2.3</span><span class="p">,</span> <span class="mf">2.4</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mf">3.1</span><span class="p">,</span> <span class="mf">3.2</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mf">4.1</span><span class="p">,</span> <span class="mf">4.2</span><span class="p">,</span> <span class="mf">4.3</span><span class="p">,</span> <span class="mf">4.4</span><span class="p">]])</span>',
          '',
          '<span class="p">[</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">vsplit</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a1: </span><span class="si">{</span><span class="n">a1</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a2: </span><span class="si">{</span><span class="n">a2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a1: [[1.1 1.2 1.3 1.4]',
          ' [2.1 2.2 2.3 2.4]]',
          'a2: [[3.1 3.2 3.3 3.4]',
          ' [4.1 4.2 4.3 4.4]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If there are matrices with more than 2 dimensions, <code>vsplit()</code> will split along the first dimension</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="p">[</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">vsplit</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a1: </span><span class="si">{</span><span class="n">a1</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a2: </span><span class="si">{</span><span class="n">a2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a1: [[[1 1]',
          '  [2 2]]]',
          'a2: [[[3 3]',
          '  [4 4]]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.2.-Split-horizontally">11.2. Split horizontally<a class="anchor-link" href="#11.2.-Split-horizontally"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 75" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Matrices can be divided horizontally (separating columns) using the <code>hsplit()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mf">1.1</span><span class="p">,</span> <span class="mf">1.2</span><span class="p">,</span> <span class="mf">1.3</span><span class="p">,</span> <span class="mf">1.4</span><span class="p">],</span> ',
          '              <span class="p">[</span><span class="mf">2.1</span><span class="p">,</span> <span class="mf">2.2</span><span class="p">,</span> <span class="mf">2.3</span><span class="p">,</span> <span class="mf">2.4</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mf">3.1</span><span class="p">,</span> <span class="mf">3.2</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mf">4.1</span><span class="p">,</span> <span class="mf">4.2</span><span class="p">,</span> <span class="mf">4.3</span><span class="p">,</span> <span class="mf">4.4</span><span class="p">]])</span>',
          '',
          '<span class="p">[</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">hsplit</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a1: </span><span class="si">{</span><span class="n">a1</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a2: </span><span class="si">{</span><span class="n">a2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a1: [[1.1 1.2]',
          ' [2.1 2.2]',
          ' [3.1 3.2]',
          ' [4.1 4.2]]',
          'a2: [[1.3 1.4]',
          ' [2.3 2.4]',
          ' [3.3 3.4]',
          ' [4.3 4.4]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If you have arrays with more than 2 dimensions, <code>hsplit()</code> will split along the second dimension</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="p">[</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">hsplit</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a1: </span><span class="si">{</span><span class="n">a1</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a2: </span><span class="si">{</span><span class="n">a2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a1: [[[1 1]]',
          ' [[3 3]]]',
          'a2: [[[2 2]]',
          ' [[4 4]]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.3.-custom-splitting">11.3. custom splitting<a class="anchor-link" href="#11.3.-custom-splitting"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 76" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Using the <code>array_split()</code> method, you can choose the axis on which to split the arrays.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="p">[</span><span class="n">a1_eje0</span><span class="p">,</span> <span class="n">a2_eje0</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array_split</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>',
          '<span class="p">[</span><span class="n">a1_eje1</span><span class="p">,</span> <span class="n">a2_eje1</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array_split</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>',
          '<span class="p">[</span><span class="n">a1_eje2</span><span class="p">,</span> <span class="n">a2_eje2</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array_split</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a1_eje0: </span><span class="si">{</span><span class="n">a1_eje0</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a2_eje0: </span><span class="si">{</span><span class="n">a2_eje0</span><span class="si">}</span><span class="se">\n\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a1_eje1: </span><span class="si">{</span><span class="n">a1_eje1</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a2_eje1: </span><span class="si">{</span><span class="n">a2_eje1</span><span class="si">}</span><span class="se">\n\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a1_eje2: </span><span class="si">{</span><span class="n">a1_eje2</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a2_eje2: </span><span class="si">{</span><span class="n">a2_eje2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a1_eje0: [[[1 1]',
          '  [2 2]]]',
          'a2_eje0: [[[3 3]',
          '  [4 4]]]',
          'a1_eje1: [[[1 1]]',
          ' [[3 3]]]',
          'a2_eje1: [[[2 2]]',
          ' [[4 4]]]',
          'a1_eje2: [[[1]',
          '  [2]]',
          ' [[3]',
          '  [4]]]',
          'a2_eje2: [[[1]',
          '  [2]]',
          ' [[3]',
          '  [4]]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="12.-Matrix-Search">12. Matrix Search<a class="anchor-link" href="#12.-Matrix-Search"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 77" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If you want to search for a value within a matrix, you can use the <code>where()</code> method which returns the positions where the matrix has the value we are looking for.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>',
          '',
          '<span class="n">ids</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">arr</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span>',
          '<span class="n">ids</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(array([3, 5, 6]),)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Functions can be used to search, for example, if we want to find in which positions the values are even.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">])</span>',
          '',
          '<span class="n">ids</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">arr</span><span class="o">%</span><span class="k">2</span>)',
          '<span class="n">ids</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(array([0, 2, 4, 6]),)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="13.-Sorting-Arrays">13. Sorting Arrays<a class="anchor-link" href="#13.-Sorting-Arrays"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 78" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Using the <code>sort()</code> method we can sort arrays</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>',
          '',
          '<span class="n">arr_ordenado</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="n">arr_ordenado</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([0, 1, 2, 3])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If what we have are strings, it sorts them alphabetically</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="s1">\'banana\'</span><span class="p">,</span> <span class="s1">\'apple\'</span><span class="p">,</span> <span class="s1">\'cherry\'</span><span class="p">])</span>',
          '',
          '<span class="n">arr_ordenado</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="n">arr_ordenado</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([\'apple\', \'banana\', \'cherry\'], dtype=\'&lt;U6\')',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>And it also sorts boolean arrays</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">])</span>',
          '',
          '<span class="n">arr_ordenado</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="n">arr_ordenado</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([False,  True,  True])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If there are matrices with more than one dimension, it sorts them by dimensions, that is, if there is a 2-dimensional matrix, it sorts the numbers in the first row among themselves and the numbers in the second row among themselves.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
          '',
          '<span class="n">arr_ordenado</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="n">arr_ordenado</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([[2, 3, 4],',
          '       [0, 1, 5]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>By default, it always sorts with respect to the rows, but if sorting by another dimension is desired, it must be specified through the <code>axis</code> variable.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
          '',
          '<span class="n">arr_ordenado0</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="c1"># Se ordena con respecto a la primera dimensiÃ³n</span>',
          '<span class="n">arr_ordenado1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># Se ordena con respecto a la segunda dimensiÃ³n</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"arr_ordenado0: </span><span class="si">{</span><span class="n">arr_ordenado0</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"arr_ordenado1: </span><span class="si">{</span><span class="n">arr_ordenado1</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'arr_ordenado0: [[3 0 1]',
          ' [5 2 4]]',
          'arr_ordenado1: [[2 3 4]',
          ' [0 1 5]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="14.-Filters-in-Arrays">14. Filters in Arrays<a class="anchor-link" href="#14.-Filters-in-Arrays"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 79" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>NumPy offers the possibility to search for certain elements in an array and create a new one</p>
      <p>It does this by creating a matrix of boolean indices, that is, it creates a new matrix indicating which positions we keep from the matrix and which we do not.</p>
      <p>Let's see an example of a boolean index array</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">37</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">22</span><span class="p">])</span>',
          '',
          '<span class="n">indices_booleanos</span> <span class="o">=</span> <span class="p">[</span><span class="kc">False</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">]</span>',
          '',
          '<span class="n">arr_filter</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">indices_booleanos</span><span class="p">]</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Array original: </span><span class="si">{</span><span class="n">arr</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"indices booleanos: </span><span class="si">{</span><span class="n">indices_booleanos</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Array filtrado: </span><span class="si">{</span><span class="n">arr_filter</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Array original: [37 85 12 45 69 22]',
          'indices booleanos: [False, False, True, False, False, True]',
          'Array filtrado: [12 22]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As you can see, the filtered array (<code>arr_filtr</code>), has only kept from the original array (<code>arr</code>) the elements that match those where the <code>indices_booleanos</code> array is <code>True</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Another thing we can see is that it has only kept the even elements, so now we will move on to see how to keep the even elements of a matrix without having to do it manually as we did in the previous example.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]])</span>',
          ' ',
          '<span class="n">indices_booleanos</span> <span class="o">=</span> <span class="n">arr</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>',
          ' ',
          '<span class="n">arr_filter</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">indices_booleanos</span><span class="p">]</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Array original: </span><span class="si">{</span><span class="n">arr</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"indices booleanos: </span><span class="si">{</span><span class="n">indices_booleanos</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Array filtrado: </span><span class="si">{</span><span class="n">arr_filter</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Array original: [[ 1  2  3  4  5]',
          ' [ 6  7  8  9 10]]',
          'indices booleanos: [[False  True False  True False]',
          ' [ True False  True False  True]]',
          'Array filtrado: [ 2  4  6  8 10]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      





    </div>

  </section>

</PostLayout>
