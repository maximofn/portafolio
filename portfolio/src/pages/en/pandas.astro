---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Data management with Pandas';
const end_url = 'pandas';
const description = 'üìä Manage data üìù easily with Pandas üìñ';
const keywords = 'pandas, data, data analysis, data manipulation, data cleaning, data visualization';
const languaje = 'EN';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas-icon.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=900
    image_height=364
    image_extension=webp
    article_date=2021-06-15+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#1.-Summary"><h2>1. Summary</h2></a>
      <a class="anchor-link" href="#2.-What-is-Pandas?"><h2>2. What is Pandas?</h2></a>
      <a class="anchor-link" href="#2.1.-Pandas-as-pd"><h3>2.1. Pandas as <code>pd</code></h3></a>
      <a class="anchor-link" href="#3.-Data-Structures-in-Pandas"><h2>3. Data Structures in Pandas</h2></a>
      <a class="anchor-link" href="#3.1.-Series"><h3>3.1. Series</h3></a>
      <a class="anchor-link" href="#3.1.1.-Series-from-a-dictionary"><h4>3.1.1. Series from a dictionary</h4></a>
      <a class="anchor-link" href="#3.1.2.-Series-from-a-list-or-tuple"><h4>3.1.2. Series from a list or tuple</h4></a>
      <a class="anchor-link" href="#3.1.3.-Series-from-an-ndarray"><h4>3.1.3. Series from an ndarray</h4></a>
      <a class="anchor-link" href="#3.1.4.-Series-from-a-scalar"><h4>3.1.4. Series from a scalar</h4></a>
      <a class="anchor-link" href="#3.1.5.-Operations-with-Series"><h4>3.1.5. Operations with Series</h4></a>
      <a class="anchor-link" href="#3.1.6.-Attribute-name-of-the-Series"><h4>3.1.6. Attribute name of the Series</h4></a>
      <a class="anchor-link" href="#3.2.-DataFrames"><h3>3.2. DataFrames</h3></a>
      <a class="anchor-link" href="#3.2.1.-DataFrames-from-a-Dictionary-of-Series"><h4>3.2.1. DataFrames from a Dictionary of Series</h4></a>
      <a class="anchor-link" href="#3.2.2.-DataFrames-from-a-dictionary-of-ndarrays-or-lists"><h4>3.2.2. DataFrames from a dictionary of ndarrays or lists</h4></a>
      <a class="anchor-link" href="#3.2.3.-DataFrames-from-a-matrix"><h4>3.2.3. DataFrames from a matrix</h4></a>
      <a class="anchor-link" href="#3.2.4.-DataFrames-from-a-list-of-dictionaries"><h4>3.2.4. DataFrames from a list of dictionaries</h4></a>
      <a class="anchor-link" href="#3.2.5.-DataFrames-from-a-dictionary-of-tuples"><h4>3.2.5. DataFrames from a dictionary of tuples</h4></a>
      <a class="anchor-link" href="#3.2.6.-DataFrames-from-a-Series"><h4>3.2.6. DataFrames from a Series</h4></a>
      <a class="anchor-link" href="#4.-Exploration-of-a-DataFrame"><h2>4. Exploration of a DataFrame</h2></a>
      <a class="anchor-link" href="#4.1.-DataFrame-Header"><h3>4.1. DataFrame Header</h3></a>
      <a class="anchor-link" href="#4.2.-Tail-of-the-DataFrame"><h3>4.2. Tail of the DataFrame</h3></a>
      <a class="anchor-link" href="#4.3.-DataFrame-Information"><h3>4.3. DataFrame Information</h3></a>
      <a class="anchor-link" href="#4.4.-Rows-and-Columns-of-DataFrame"><h3>4.4. Rows and Columns of DataFrame</h3></a>
      <a class="anchor-link" href="#4.5.-Description-of-the-DataFrame"><h3>4.5. Description of the DataFrame</h3></a>
      <a class="anchor-link" href="#4.6.-Sorting-the-DataFrame"><h3>4.6. Sorting the <code>DataFrame</code></h3></a>
      <a class="anchor-link" href="#4.7.-DataFrame-Statistics"><h3>4.7. DataFrame Statistics</h3></a>
      <a class="anchor-link" href="#4.8.-Used-Memory"><h3>4.8. Used Memory</h3></a>
      <a class="anchor-link" href="#5.-Addition-of-Data"><h2>5. Addition of Data</h2></a>
      <a class="anchor-link" href="#5.1.-Addition-of-Columns"><h3>5.1. Addition of Columns</h3></a>
      <a class="anchor-link" href="#5.2.-Addition-of-Rows"><h3>5.2. Addition of Rows</h3></a>
      <a class="anchor-link" href="#6.-Data-Deletion"><h2>6. Data Deletion</h2></a>
      <a class="anchor-link" href="#6.1.-Column-Deletion"><h3>6.1. Column Deletion</h3></a>
      <a class="anchor-link" href="#6.1.-Row-Deletion"><h3>6.1. Row Deletion</h3></a>
      <a class="anchor-link" href="#7.-Operations-on-DataFrames"><h2>7. Operations on DataFrames</h2></a>
      <a class="anchor-link" href="#8.-Transpose"><h2>8. Transpose</h2></a>
      <a class="anchor-link" href="#9.-Conversion-to-Numpy"><h2>9. Conversion to Numpy</h2></a>
      <a class="anchor-link" href="#10.-Reading-data-from-external-sources"><h2>10. Reading data from external sources</h2></a>
      <a class="anchor-link" href="#11.-Indexing-in-DataFrames"><h2>11. Indexing in DataFrames</h2></a>
      <a class="anchor-link" href="#11.1.-Column-Indexing"><h3>11.1. Column Indexing</h3></a>
      <a class="anchor-link" href="#11.2.-Row-Indexing-by-Positions"><h3>11.2. Row Indexing by Positions</h3></a>
      <a class="anchor-link" href="#11.3.-Row-Label-Indexing"><h3>11.3. Row Label Indexing</h3></a>
      <a class="anchor-link" href="#11.4.-Selection-of-a-Portion-of-the-DataFrame-by-Positions"><h3>11.4. Selection of a Portion of the DataFrame by Positions</h3></a>
      <a class="anchor-link" href="#11.5.-Selecting-a-Portion-of-the-DataFrame-Using-Labels"><h3>11.5. Selecting a Portion of the DataFrame Using Labels</h3></a>
      <a class="anchor-link" href="#11.6.-Lambda-Function-Indexing"><h3>11.6. Lambda Function Indexing</h3></a>
      <a class="anchor-link" href="#11.7.-Conditional-Indexing"><h3>11.7. Conditional Indexing</h3></a>
      <a class="anchor-link" href="#11.8.-Random-Indexing"><h3>11.8. Random Indexing</h3></a>
      <a class="anchor-link" href="#12.-Merging-DataFrames"><h2>12. Merging DataFrames</h2></a>
      <a class="anchor-link" href="#12.1.-Concatenation-of-DataFrames"><h3>12.1. Concatenation of DataFrames</h3></a>
      <a class="anchor-link" href="#12.1.1.-Intersection-of-Concatenation"><h4>12.1.1. Intersection of Concatenation</h4></a>
      <a class="anchor-link" href="#12.2.-Merge-of-DataFrames"><h3>12.2. <code>Merge</code> of DataFrames</h3></a>
      <a class="anchor-link" href="#12.3.-Join-of-dataframes"><h3>12.3. <code>Join</code> of dataframes</h3></a>
      <a class="anchor-link" href="#13.-Missing-data-(NaN)"><h2>13. Missing data (<code>NaN</code>)</h2></a>
      <a class="anchor-link" href="#13.1.-Removal-of-Rows-with-Missing-Data"><h3>13.1. Removal of Rows with Missing Data</h3></a>
      <a class="anchor-link" href="#13.2.-Dropping-Columns-with-Missing-Data"><h3>13.2. Dropping Columns with Missing Data</h3></a>
      <a class="anchor-link" href="#13.3.-Boolean-mask-with-missing-positions"><h3>13.3. Boolean mask with missing positions</h3></a>
      <a class="anchor-link" href="#13.4.-Filling-Missing-Data"><h3>13.4. Filling Missing Data</h3></a>
      <a class="anchor-link" href="#14.-Time-series"><h2>14. Time series</h2></a>
      <a class="anchor-link" href="#15.-Categorical-Data"><h2>15. Categorical Data</h2></a>
      <a class="anchor-link" href="#16.-Groupby"><h2>16. Groupby</h2></a>
      <a class="anchor-link" href="#17.-Graphics"><h2>17. Graphics</h2></a>
      <a class="anchor-link" href="#17.1.-Basic-Graph"><h3>17.1. Basic Graph</h3></a>
      <a class="anchor-link" href="#17.2.-Vertical-Bar-Chart"><h3>17.2. Vertical Bar Chart</h3></a>
      <a class="anchor-link" href="#17.3.-Horizontal-Bar-Chart"><h3>17.3. Horizontal Bar Chart</h3></a>
      <a class="anchor-link" href="#17.4.-Histogram"><h3>17.4. Histogram</h3></a>
      <a class="anchor-link" href="#17.5.-Candlestick-Diagrams"><h3>17.5. Candlestick Diagrams</h3></a>
      <a class="anchor-link" href="#17.6.-Area-Charts"><h3>17.6. Area Charts</h3></a>
      <a class="anchor-link" href="#17.7.-Scatter-plot"><h3>17.7. Scatter plot</h3></a>
      <a class="anchor-link" href="#17.8.-Hexagonal-Container-Plot"><h3>17.8. Hexagonal Container Plot</h3></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Data-handling-with-Pandas">Data handling with Pandas<a class="anchor-link" href="#Data-handling-with-Pandas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 69" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Disclaimer: This post has been translated to English using a machine translation model. Please, let me know if you find any mistakes.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="1.-Summary">1. Summary<a class="anchor-link" href="#1.-Summary"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 70" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's take a look at a brief introduction to the data manipulation and analysis library <code>Pandas</code>. With it, we can handle and process tabular data, which will help us operate with the data and extract valuable information.</p>
      <p align="center"><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="No description has been provided for this image" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas-icon.webp" width="900" height="364"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="2.-What-is-Pandas?">2. What is Pandas?<a class="anchor-link" href="#2.-What-is-Pandas?"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 71" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pandas is a <strong>Python</strong> library designed to make working with <em>relational</em> or <em>labeled</em> data easy and intuitive
      Pandas is designed for many different types of data:</p>
      <ul>
      <li>Tabular data with heterogeneous column types, such as in an SQL table or an Excel spreadsheet*   Time series data, ordered and unordered (not necessarily of fixed frequency).*   Arbitrary matrix data (homogeneous or heterogeneous) with row and column labels*   Any other form of observational/statistical datasets. Data does not need to be labeled at all in order to place it into a Pandas data structure.</li>
      </ul>
      <p>The two main data structures of Pandas are <code>Series</code> (one-dimensional) and <code>DataFrames</code> (two-dimensional). Pandas is built on top of NumPy and is designed to integrate well within a scientific computing environment with many other third-party libraries.
      For data scientists, working with data is generally divided into several stages: collecting and cleaning data, analyzing/modeling it, and then organizing the analysis results in a suitable format for plotting or displaying them in tabular form. pandas is the ideal tool for all these tasks.
      Another feature is that pandas is fast, many of the low-level algorithms have been built in <code>C</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.1.-Pandas-as-pd">2.1. Pandas as <code>pd</code><a class="anchor-link" href="#2.1.-Pandas-as-pd"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 72" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Generally when importing pandas, it is usually imported with the alias <code>pd</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1.0.1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="3.-Data-Structures-in-Pandas">3. Data Structures in Pandas<a class="anchor-link" href="#3.-Data-Structures-in-Pandas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 73" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In Pandas there are two types of data structures: <code>Series</code> and <code>DataFrames</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.1.-Series">3.1. Series<a class="anchor-link" href="#3.1.-Series"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 74" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>Serie</code> data type is a one-dimensional labeled array capable of holding any data type (integers, strings, floating-point numbers, Python objects, etc.). It is divided into indices.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To create a <code>Series</code> data type, the most common way is</p>
      <div class="highlight"><pre><span></span><span class="n">series</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="n">index</span><span class="p">)</span><span class="err">```</span>
      
      <span class="n">Where</span> <span class="err">`</span><span class="n">data</span><span class="err">`</span> <span class="n">can</span> <span class="n">be</span><span class="p">:</span><span class="o">*</span> <span class="n">A</span> <span class="n">dictionary</span><span class="o">*</span> <span class="n">A</span> <span class="nb">list</span> <span class="ow">or</span> <span class="nb">tuple</span><span class="o">*</span> <span class="n">A</span> <span class="err">`</span><span class="n">ndarray</span><span class="err">`</span> <span class="kn">from</span> <span class="nn">Numpy</span><span class="o">*</span> <span class="n">A</span> <span class="n">scalar</span> <span class="n">value</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As one of the data types can be a <code>ndarray</code> from NumPy, we import NumPy to be able to use it</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.1.-Series-from-a-dictionary">3.1.1. Series from a dictionary<a class="anchor-link" href="#3.1.1.-Series-from-a-dictionary"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 75" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"b"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>',
          '',
          '<span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'b    1',
          'a    0',
          'c    2',
          'dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If an index is passed, the values corresponding to the index labels will be extracted. If they do not exist, they are created as <code>NaN</code> (not a number)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"b"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>',
          '',
          '<span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">diccionario</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">])</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'b    1.0',
          'c    2.0',
          'd    NaN',
          'a    0.0',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.2.-Series-from-a-list-or-tuple">3.1.2. Series from a list or tuple<a class="anchor-link" href="#3.1.2.-Series-from-a-list-or-tuple"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 76" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If the data comes from a list or tuple and no index is passed, one will be created with values [0, ..., len(data)-1]</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0    1',
          '1    2',
          '2    3',
          '3    4',
          'dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If an index is passed, it must have the same length as the data</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">])</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a    1',
          'b    2',
          'c    3',
          'd    4',
          'dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.3.-Series-from-an-ndarray">3.1.3. Series from an ndarray<a class="anchor-link" href="#3.1.3.-Series-from-an-ndarray"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 77" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If the data comes from an ndarray and no index is passed, one will be created with values <code>[0, ..., len(data)-1]</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0    1.267865',
          '1   -0.877857',
          '2   -0.138556',
          '3   -0.132987',
          '4   -0.827295',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If an index is passed, it must have the same length as the data</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">,</span> <span class="s2">"e"</span><span class="p">])</span>',
          '<span class="n">serie</span> ',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a   -1.091828',
          'b   -0.584243',
          'c    0.220398',
          'd    1.248923',
          'e    1.652351',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.4.-Series-from-a-scalar">3.1.4. Series from a scalar<a class="anchor-link" href="#3.1.4.-Series-from-a-scalar"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 78" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If the series is created from a scalar, it will be created with a single item</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="mf">5.0</span><span class="p">)</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0    5.0',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If you want to create more items in the series, you need to pass the index with the number of items you want, so all the items will have the value of the scalar</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="mf">5.0</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">,</span> <span class="s2">"e"</span><span class="p">])</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a    5.0',
          'b    5.0',
          'c    5.0',
          'd    5.0',
          'e    5.0',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.5.-Operations-with-Series">3.1.5. Operations with Series<a class="anchor-link" href="#3.1.5.-Operations-with-Series"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 79" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Just like with Numpy, we can perform operations on all elements of a series without having to iterate through each one of them.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="mf">5.0</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">,</span> <span class="s2">"e"</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"serie:</span><span class="se">\\n</span><span class="si">{</span><span class="n">serie</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">serie + serie =</span><span class="se">\\n</span><span class="si">{</span><span class="n">serie</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">serie</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'serie:',
          'a    5.0',
          'b    5.0',
          'c    5.0',
          'd    5.0',
          'e    5.0',
          'dtype: float64',
          'serie + serie =',
          'a    10.0',
          'b    10.0',
          'c    10.0',
          'd    10.0',
          'e    10.0',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="mf">5.0</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">,</span> <span class="s2">"e"</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"serie:</span><span class="se">\\n</span><span class="si">{</span><span class="n">serie</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">exp(serie) =</span><span class="se">\\n</span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">serie</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'serie:',
          'a    5.0',
          'b    5.0',
          'c    5.0',
          'd    5.0',
          'e    5.0',
          'dtype: float64',
          'exp(serie) =',
          'a    148.413159',
          'b    148.413159',
          'c    148.413159',
          'd    148.413159',
          'e    148.413159',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A difference between <code>Series</code> and ndarrays is that operations between <code>Series</code> automatically align the data according to their labels. Therefore, calculations can be written without considering whether the involved <code>Series</code> have the same labels. If a label is not found in one <code>Series</code> or the other, the result will be marked as missing (NaN).</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="mf">5.0</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">,</span> <span class="s2">"e"</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"serie:</span><span class="se">\\n</span><span class="si">{</span><span class="n">serie</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">serie[1:] + serie[:-1] =</span><span class="se">\\n</span><span class="si">{</span><span class="n">serie</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">serie</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'serie:',
          'a    5.0',
          'b    5.0',
          'c    5.0',
          'd    5.0',
          'e    5.0',
          'dtype: float64',
          'serie[1:] + serie[:-1] =',
          'a     NaN',
          'b    10.0',
          'c    10.0',
          'd    10.0',
          'e     NaN',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.6.-Attribute-name-of-the-Series">3.1.6. Attribute name of the Series<a class="anchor-link" href="#3.1.6.-Attribute-name-of-the-Series"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 80" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>One of the attributes of <code>Series</code> is <code>name</code>, which corresponds to the name they will have when added to a DataFrame. Conversely, when a series is obtained from a DataFrame, this series will have the same name it had in the DataFrame.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="s2">"aleatorio"</span><span class="p">)</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0   -0.191009',
          '1   -0.793151',
          '2   -0.907747',
          '3   -1.440508',
          '4   -0.676419',
          'Name: aleatorio, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The name of a series can be changed using the <code>rename()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">serie</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="s2">"random"</span><span class="p">)</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0   -0.191009',
          '1   -0.793151',
          '2   -0.907747',
          '3   -1.440508',
          '4   -0.676419',
          'Name: random, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.2.-DataFrames">3.2. DataFrames<a class="anchor-link" href="#3.2.-DataFrames"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 81" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A <code>DataFrame</code> is a labeled and two-dimensional data structure, with potentially different types of columns, meaning that one column can contain integer data, another column string data, etc. You can think of it as a spreadsheet or an SQL table, or a dictionary of <code>Series</code> objects.
      It is the most used pandas object. Just like <code>Series</code>, <code>DataFrames</code> accept many different types of input:</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Along with the data, you can optionally pass index arguments (row labels) and columns (column labels). If you pass an index and/or columns, you are guaranteeing the index and/or columns of the resulting <code>DataFrame</code>. Therefore, a dictionary of <code>Series</code> plus a specific index will discard all data that does not match the passed index.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If axis labels are not provided, they will be constructed from the input data based on common sense rules.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.1.-DataFrames-from-a-Dictionary-of-Series">3.2.1. DataFrames from a Dictionary of Series<a class="anchor-link" href="#3.2.1.-DataFrames-from-a-Dictionary-of-Series"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 82" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If a dictionary of <code>Series</code> is passed, the <code>DataFrame</code> will be created with as many columns as <code>Series</code> the dictionary has.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[87]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If each of the <code>Series</code> has defined indices, the resulting <code>DataFrame</code> will be the union of these indices.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[88]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>a</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>b</th>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>c</th>
      <td>3.0</td>
      <td>6.0</td>
      </tr>
      <tr>
      <th>d</th>
      <td>NaN</td>
      <td>7.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"d"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">])</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[89]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>d</th>
      <td>NaN</td>
      <td>7.0</td>
      </tr>
      <tr>
      <th>b</th>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>a</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If the columns are passed, they will appear in the passed order</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">"dos"</span><span class="p">,</span> <span class="s2">"tres"</span><span class="p">])</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[90]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>a</th>
      <td>4.0</td>
      <td>NaN</td>
      </tr>
      <tr>
      <th>b</th>
      <td>5.0</td>
      <td>NaN</td>
      </tr>
      <tr>
      <th>c</th>
      <td>6.0</td>
      <td>NaN</td>
      </tr>
      <tr>
      <th>d</th>
      <td>7.0</td>
      <td>NaN</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.2.-DataFrames-from-a-dictionary-of-ndarrays-or-lists">3.2.2. DataFrames from a dictionary of ndarrays or lists<a class="anchor-link" href="#3.2.2.-DataFrames-from-a-dictionary-of-ndarrays-or-lists"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 83" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>All ndarrays or lists must have the same length. If an index is passed, it must also have the same length as the ndarrays or lists.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="mf">4.0</span><span class="p">],</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="p">[</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">]</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[91]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>3.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>2.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>4.0</td>
      <td>1.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.3.-DataFrames-from-a-matrix">3.2.3. DataFrames from a matrix<a class="anchor-link" href="#3.2.3.-DataFrames-from-a-matrix"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 84" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If an index is passed, it must have the same length as the number of rows in the array, and if columns are passed, they must have the same length as the columns in the array.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">matriz</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">matriz</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">],</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">"columna1"</span><span class="p">,</span> <span class="s2">"columna2"</span><span class="p">])</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[92]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>columna1</th>
      <th>columna2</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>a</th>
      <td>1</td>
      <td>3</td>
      </tr>
      <tr>
      <th>b</th>
      <td>2</td>
      <td>2</td>
      </tr>
      <tr>
      <th>c</th>
      <td>3</td>
      <td>1</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.4.-DataFrames-from-a-list-of-dictionaries">3.2.4. DataFrames from a list of dictionaries<a class="anchor-link" href="#3.2.4.-DataFrames-from-a-list-of-dictionaries"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 85" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[{opening_brace}</span><span class="s2">"a"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">:</span> <span class="mi">2</span><span class="p">{closing_brace},</span> <span class="p">{opening_brace}</span><span class="s2">"a"</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">:</span> <span class="mi">20</span><span class="p">{closing_brace}]</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">lista</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[93]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1</td>
      <td>2</td>
      <td>NaN</td>
      </tr>
      <tr>
      <th>1</th>
      <td>5</td>
      <td>10</td>
      <td>20.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.5.-DataFrames-from-a-dictionary-of-tuples">3.2.5. DataFrames from a dictionary of tuples<a class="anchor-link" href="#3.2.5.-DataFrames-from-a-dictionary-of-tuples"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 86" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="p">(</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">):</span> <span class="p">{opening_brace}(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"B"</span><span class="p">):</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"C"</span><span class="p">):</span> <span class="mi">2</span><span class="p">{closing_brace},</span>
          <span class="p">(</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">):</span> <span class="p">{opening_brace}(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"C"</span><span class="p">):</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"B"</span><span class="p">):</span> <span class="mi">4</span><span class="p">{closing_brace},</span>
          <span class="p">(</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">):</span> <span class="p">{opening_brace}(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"B"</span><span class="p">):</span> <span class="mi">5</span><span class="p">,</span> <span class="p">(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"C"</span><span class="p">):</span> <span class="mi">6</span><span class="p">{closing_brace},</span>
          <span class="p">(</span><span class="s2">"b"</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">):</span> <span class="p">{opening_brace}(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"C"</span><span class="p">):</span> <span class="mi">7</span><span class="p">,</span> <span class="p">(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"B"</span><span class="p">):</span> <span class="mi">8</span><span class="p">{closing_brace},</span>
          <span class="p">(</span><span class="s2">"b"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">):</span> <span class="p">{opening_brace}(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"D"</span><span class="p">):</span> <span class="mi">9</span><span class="p">,</span> <span class="p">(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"B"</span><span class="p">):</span> <span class="mi">10</span><span class="p">{closing_brace},</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[94]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead tr th {
              text-align: left;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr>
      <th></th>
      <th></th>
      <th colspan="3" halign="left">a</th>
      <th colspan="2" halign="left">b</th>
      </tr>
      <tr>
      <th></th>
      <th></th>
      <th>b</th>
      <th>a</th>
      <th>c</th>
      <th>a</th>
      <th>b</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th rowspan="3" valign="top">A</th>
      <th>B</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>8.0</td>
      <td>10.0</td>
      </tr>
      <tr>
      <th>C</th>
      <td>2.0</td>
      <td>3.0</td>
      <td>6.0</td>
      <td>7.0</td>
      <td>NaN</td>
      </tr>
      <tr>
      <th>D</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>9.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.6.-DataFrames-from-a-Series">3.2.6. DataFrames from a Series<a class="anchor-link" href="#3.2.6.-DataFrames-from-a-Series"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 87" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The result will be a <code>DataFrame</code> with the same index as the input Series, and with a column whose name is the original name of the Series (only if another column name is not provided).</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span><span class="s2">"b"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">:</span> <span class="mi">2</span><span class="p">{closing_brace}</span>
      
      <span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">serie</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[95]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>b</th>
      <td>1</td>
      </tr>
      <tr>
      <th>a</th>
      <td>0</td>
      </tr>
      <tr>
      <th>c</th>
      <td>2</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="4.-Exploration-of-a-DataFrame">4. Exploration of a DataFrame<a class="anchor-link" href="#4.-Exploration-of-a-DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 88" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>When a <code>DataFrame</code> is very large, it cannot be fully represented.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv"</span><span class="p">)</span>
      <span class="n">california_housing_train</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[102]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>-114.31</td>
      <td>34.19</td>
      <td>15.0</td>
      <td>5612.0</td>
      <td>1283.0</td>
      <td>1015.0</td>
      <td>472.0</td>
      <td>1.4936</td>
      <td>66900.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>-114.47</td>
      <td>34.40</td>
      <td>19.0</td>
      <td>7650.0</td>
      <td>1901.0</td>
      <td>1129.0</td>
      <td>463.0</td>
      <td>1.8200</td>
      <td>80100.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>-114.56</td>
      <td>33.69</td>
      <td>17.0</td>
      <td>720.0</td>
      <td>174.0</td>
      <td>333.0</td>
      <td>117.0</td>
      <td>1.6509</td>
      <td>85700.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>-114.57</td>
      <td>33.64</td>
      <td>14.0</td>
      <td>1501.0</td>
      <td>337.0</td>
      <td>515.0</td>
      <td>226.0</td>
      <td>3.1917</td>
      <td>73400.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>-114.57</td>
      <td>33.57</td>
      <td>20.0</td>
      <td>1454.0</td>
      <td>326.0</td>
      <td>624.0</td>
      <td>262.0</td>
      <td>1.9250</td>
      <td>65500.0</td>
      </tr>
      <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      </tr>
      <tr>
      <th>16995</th>
      <td>-124.26</td>
      <td>40.58</td>
      <td>52.0</td>
      <td>2217.0</td>
      <td>394.0</td>
      <td>907.0</td>
      <td>369.0</td>
      <td>2.3571</td>
      <td>111400.0</td>
      </tr>
      <tr>
      <th>16996</th>
      <td>-124.27</td>
      <td>40.69</td>
      <td>36.0</td>
      <td>2349.0</td>
      <td>528.0</td>
      <td>1194.0</td>
      <td>465.0</td>
      <td>2.5179</td>
      <td>79000.0</td>
      </tr>
      <tr>
      <th>16997</th>
      <td>-124.30</td>
      <td>41.84</td>
      <td>17.0</td>
      <td>2677.0</td>
      <td>531.0</td>
      <td>1244.0</td>
      <td>456.0</td>
      <td>3.0313</td>
      <td>103600.0</td>
      </tr>
      <tr>
      <th>16998</th>
      <td>-124.30</td>
      <td>41.80</td>
      <td>19.0</td>
      <td>2672.0</td>
      <td>552.0</td>
      <td>1298.0</td>
      <td>478.0</td>
      <td>1.9797</td>
      <td>85800.0</td>
      </tr>
      <tr>
      <th>16999</th>
      <td>-124.35</td>
      <td>40.54</td>
      <td>52.0</td>
      <td>1820.0</td>
      <td>300.0</td>
      <td>806.0</td>
      <td>270.0</td>
      <td>3.0147</td>
      <td>94600.0</td>
      </tr>
      </tbody>
      </table>
      <p>17000 rows √ó 9 columns</p>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>So it's very useful to have methods for exploring it and getting information quickly.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.1.-DataFrame-Header">4.1. DataFrame Header<a class="anchor-link" href="#4.1.-DataFrame-Header"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 89" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To view the first rows and get an idea of what the <code>DataFrame</code> looks like, there is the <code>head()</code> method, which by default displays the first 5 rows of the <code>DataFrame</code>. If you want to see a different number of rows, specify it using the <code>n</code> attribute.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[103]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>-114.31</td>
      <td>34.19</td>
      <td>15.0</td>
      <td>5612.0</td>
      <td>1283.0</td>
      <td>1015.0</td>
      <td>472.0</td>
      <td>1.4936</td>
      <td>66900.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>-114.47</td>
      <td>34.40</td>
      <td>19.0</td>
      <td>7650.0</td>
      <td>1901.0</td>
      <td>1129.0</td>
      <td>463.0</td>
      <td>1.8200</td>
      <td>80100.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>-114.56</td>
      <td>33.69</td>
      <td>17.0</td>
      <td>720.0</td>
      <td>174.0</td>
      <td>333.0</td>
      <td>117.0</td>
      <td>1.6509</td>
      <td>85700.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>-114.57</td>
      <td>33.64</td>
      <td>14.0</td>
      <td>1501.0</td>
      <td>337.0</td>
      <td>515.0</td>
      <td>226.0</td>
      <td>3.1917</td>
      <td>73400.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>-114.57</td>
      <td>33.57</td>
      <td>20.0</td>
      <td>1454.0</td>
      <td>326.0</td>
      <td>624.0</td>
      <td>262.0</td>
      <td>1.9250</td>
      <td>65500.0</td>
      </tr>
      <tr>
      <th>5</th>
      <td>-114.58</td>
      <td>33.63</td>
      <td>29.0</td>
      <td>1387.0</td>
      <td>236.0</td>
      <td>671.0</td>
      <td>239.0</td>
      <td>3.3438</td>
      <td>74000.0</td>
      </tr>
      <tr>
      <th>6</th>
      <td>-114.58</td>
      <td>33.61</td>
      <td>25.0</td>
      <td>2907.0</td>
      <td>680.0</td>
      <td>1841.0</td>
      <td>633.0</td>
      <td>2.6768</td>
      <td>82400.0</td>
      </tr>
      <tr>
      <th>7</th>
      <td>-114.59</td>
      <td>34.83</td>
      <td>41.0</td>
      <td>812.0</td>
      <td>168.0</td>
      <td>375.0</td>
      <td>158.0</td>
      <td>1.7083</td>
      <td>48500.0</td>
      </tr>
      <tr>
      <th>8</th>
      <td>-114.59</td>
      <td>33.61</td>
      <td>34.0</td>
      <td>4789.0</td>
      <td>1175.0</td>
      <td>3134.0</td>
      <td>1056.0</td>
      <td>2.1782</td>
      <td>58400.0</td>
      </tr>
      <tr>
      <th>9</th>
      <td>-114.60</td>
      <td>34.83</td>
      <td>46.0</td>
      <td>1497.0</td>
      <td>309.0</td>
      <td>787.0</td>
      <td>271.0</td>
      <td>2.1908</td>
      <td>48100.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.2.-Tail-of-the-DataFrame">4.2. Tail of the DataFrame<a class="anchor-link" href="#4.2.-Tail-of-the-DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 90" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If you want to see the last rows, you can use the <code>tail()</code> method. By using the <code>n</code> parameter, you can choose how many rows to display.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">tail</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[104]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>16995</th>
      <td>-124.26</td>
      <td>40.58</td>
      <td>52.0</td>
      <td>2217.0</td>
      <td>394.0</td>
      <td>907.0</td>
      <td>369.0</td>
      <td>2.3571</td>
      <td>111400.0</td>
      </tr>
      <tr>
      <th>16996</th>
      <td>-124.27</td>
      <td>40.69</td>
      <td>36.0</td>
      <td>2349.0</td>
      <td>528.0</td>
      <td>1194.0</td>
      <td>465.0</td>
      <td>2.5179</td>
      <td>79000.0</td>
      </tr>
      <tr>
      <th>16997</th>
      <td>-124.30</td>
      <td>41.84</td>
      <td>17.0</td>
      <td>2677.0</td>
      <td>531.0</td>
      <td>1244.0</td>
      <td>456.0</td>
      <td>3.0313</td>
      <td>103600.0</td>
      </tr>
      <tr>
      <th>16998</th>
      <td>-124.30</td>
      <td>41.80</td>
      <td>19.0</td>
      <td>2672.0</td>
      <td>552.0</td>
      <td>1298.0</td>
      <td>478.0</td>
      <td>1.9797</td>
      <td>85800.0</td>
      </tr>
      <tr>
      <th>16999</th>
      <td>-124.35</td>
      <td>40.54</td>
      <td>52.0</td>
      <td>1820.0</td>
      <td>300.0</td>
      <td>806.0</td>
      <td>270.0</td>
      <td>3.0147</td>
      <td>94600.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.3.-DataFrame-Information">4.3. DataFrame Information<a class="anchor-link" href="#4.3.-DataFrame-Information"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 91" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Another very useful method is <code>info()</code> which gives us information about the <code>DataFrame</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">info</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;class \'pandas.core.frame.DataFrame\'&gt;',
          'RangeIndex: 17000 entries, 0 to 16999',
          'Data columns (total 9 columns):',
          ' #   Column              Non-Null Count  Dtype  ',
          '---  ------              --------------  -----  ',
          ' 0   longitude           17000 non-null  float64',
          ' 1   latitude            17000 non-null  float64',
          ' 2   housing_median_age  17000 non-null  float64',
          ' 3   total_rooms         17000 non-null  float64',
          ' 4   total_bedrooms      17000 non-null  float64',
          ' 5   population          17000 non-null  float64',
          ' 6   households          17000 non-null  float64',
          ' 7   median_income       17000 non-null  float64',
          ' 8   median_house_value  17000 non-null  float64',
          'dtypes: float64(9)',
          'memory usage: 1.2 MB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.4.-Rows-and-Columns-of-DataFrame">4.4. Rows and Columns of DataFrame<a class="anchor-link" href="#4.4.-Rows-and-Columns-of-DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 92" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The indices and columns of a <code>DataFrame</code> can be obtained using the <code>index</code> and <code>columns</code> methods.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '    <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">]),</span>',
          '    <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">])</span>',
          '    <span class="p">}</span>',
          '',
          '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
          '',
          '<span class="n">indices</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">index</span>',
          '<span class="n">columnas</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">columns</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"El DataFrame tiene los √≠ndices</span><span class="se">\\n\t</span><span class="si">{</span><span class="n">indices</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"El DataFrame tiene las columnas</span><span class="se">\\n\t</span><span class="si">{</span><span class="n">columnas</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'El DataFrame tiene los √≠ndices',
          '	Index([\'a\', \'b\', \'c\', \'d\'], dtype=\'object\')',
          'El DataFrame tiene las columnas',
          '	Index([\'uno\', \'dos\'], dtype=\'object\')',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.5.-Description-of-the-DataFrame">4.5. Description of the DataFrame<a class="anchor-link" href="#4.5.-Description-of-the-DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 93" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>describe()</code> method displays a quick statistical summary of the data in the <code>DataFrame</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv"</span><span class="p">)</span>
      <span class="n">california_housing_train</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[107]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>count</th>
      <td>17000.000000</td>
      <td>17000.000000</td>
      <td>17000.000000</td>
      <td>17000.000000</td>
      <td>17000.000000</td>
      <td>17000.000000</td>
      <td>17000.000000</td>
      <td>17000.000000</td>
      <td>17000.000000</td>
      </tr>
      <tr>
      <th>mean</th>
      <td>-119.562108</td>
      <td>35.625225</td>
      <td>28.589353</td>
      <td>2643.664412</td>
      <td>539.410824</td>
      <td>1429.573941</td>
      <td>501.221941</td>
      <td>3.883578</td>
      <td>207300.912353</td>
      </tr>
      <tr>
      <th>std</th>
      <td>2.005166</td>
      <td>2.137340</td>
      <td>12.586937</td>
      <td>2179.947071</td>
      <td>421.499452</td>
      <td>1147.852959</td>
      <td>384.520841</td>
      <td>1.908157</td>
      <td>115983.764387</td>
      </tr>
      <tr>
      <th>min</th>
      <td>-124.350000</td>
      <td>32.540000</td>
      <td>1.000000</td>
      <td>2.000000</td>
      <td>1.000000</td>
      <td>3.000000</td>
      <td>1.000000</td>
      <td>0.499900</td>
      <td>14999.000000</td>
      </tr>
      <tr>
      <th>25%</th>
      <td>-121.790000</td>
      <td>33.930000</td>
      <td>18.000000</td>
      <td>1462.000000</td>
      <td>297.000000</td>
      <td>790.000000</td>
      <td>282.000000</td>
      <td>2.566375</td>
      <td>119400.000000</td>
      </tr>
      <tr>
      <th>50%</th>
      <td>-118.490000</td>
      <td>34.250000</td>
      <td>29.000000</td>
      <td>2127.000000</td>
      <td>434.000000</td>
      <td>1167.000000</td>
      <td>409.000000</td>
      <td>3.544600</td>
      <td>180400.000000</td>
      </tr>
      <tr>
      <th>75%</th>
      <td>-118.000000</td>
      <td>37.720000</td>
      <td>37.000000</td>
      <td>3151.250000</td>
      <td>648.250000</td>
      <td>1721.000000</td>
      <td>605.250000</td>
      <td>4.767000</td>
      <td>265000.000000</td>
      </tr>
      <tr>
      <th>max</th>
      <td>-114.310000</td>
      <td>41.950000</td>
      <td>52.000000</td>
      <td>37937.000000</td>
      <td>6445.000000</td>
      <td>35682.000000</td>
      <td>6082.000000</td>
      <td>15.000100</td>
      <td>500001.000000</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.6.-Sorting-the-DataFrame">4.6. Sorting the <code>DataFrame</code><a class="anchor-link" href="#4.6.-Sorting-the-DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 94" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Rows of a <code>DataFrame</code> can be alphabetically sorted using the <code>sort_index()</code> method.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv"</span><span class="p">)</span>
      <span class="n">california_housing_train</span><span class="o">.</span><span class="n">sort_index</span><span class="p">()</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[108]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>-114.31</td>
      <td>34.19</td>
      <td>15.0</td>
      <td>5612.0</td>
      <td>1283.0</td>
      <td>1015.0</td>
      <td>472.0</td>
      <td>1.4936</td>
      <td>66900.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>-114.47</td>
      <td>34.40</td>
      <td>19.0</td>
      <td>7650.0</td>
      <td>1901.0</td>
      <td>1129.0</td>
      <td>463.0</td>
      <td>1.8200</td>
      <td>80100.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>-114.56</td>
      <td>33.69</td>
      <td>17.0</td>
      <td>720.0</td>
      <td>174.0</td>
      <td>333.0</td>
      <td>117.0</td>
      <td>1.6509</td>
      <td>85700.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>-114.57</td>
      <td>33.64</td>
      <td>14.0</td>
      <td>1501.0</td>
      <td>337.0</td>
      <td>515.0</td>
      <td>226.0</td>
      <td>3.1917</td>
      <td>73400.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>-114.57</td>
      <td>33.57</td>
      <td>20.0</td>
      <td>1454.0</td>
      <td>326.0</td>
      <td>624.0</td>
      <td>262.0</td>
      <td>1.9250</td>
      <td>65500.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Since the rows were already sorted in this case, we set <code>ascending=False</code> to reverse the order.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">sort_index</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[109]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>16999</th>
      <td>-124.35</td>
      <td>40.54</td>
      <td>52.0</td>
      <td>1820.0</td>
      <td>300.0</td>
      <td>806.0</td>
      <td>270.0</td>
      <td>3.0147</td>
      <td>94600.0</td>
      </tr>
      <tr>
      <th>16998</th>
      <td>-124.30</td>
      <td>41.80</td>
      <td>19.0</td>
      <td>2672.0</td>
      <td>552.0</td>
      <td>1298.0</td>
      <td>478.0</td>
      <td>1.9797</td>
      <td>85800.0</td>
      </tr>
      <tr>
      <th>16997</th>
      <td>-124.30</td>
      <td>41.84</td>
      <td>17.0</td>
      <td>2677.0</td>
      <td>531.0</td>
      <td>1244.0</td>
      <td>456.0</td>
      <td>3.0313</td>
      <td>103600.0</td>
      </tr>
      <tr>
      <th>16996</th>
      <td>-124.27</td>
      <td>40.69</td>
      <td>36.0</td>
      <td>2349.0</td>
      <td>528.0</td>
      <td>1194.0</td>
      <td>465.0</td>
      <td>2.5179</td>
      <td>79000.0</td>
      </tr>
      <tr>
      <th>16995</th>
      <td>-124.26</td>
      <td>40.58</td>
      <td>52.0</td>
      <td>2217.0</td>
      <td>394.0</td>
      <td>907.0</td>
      <td>369.0</td>
      <td>2.3571</td>
      <td>111400.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If you want to sort the columns, you need to set <code>axis=1</code> since the default is <code>0</code>.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">sort_index</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[110]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>households</th>
      <th>housing_median_age</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>median_house_value</th>
      <th>median_income</th>
      <th>population</th>
      <th>total_bedrooms</th>
      <th>total_rooms</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>472.0</td>
      <td>15.0</td>
      <td>34.19</td>
      <td>-114.31</td>
      <td>66900.0</td>
      <td>1.4936</td>
      <td>1015.0</td>
      <td>1283.0</td>
      <td>5612.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>463.0</td>
      <td>19.0</td>
      <td>34.40</td>
      <td>-114.47</td>
      <td>80100.0</td>
      <td>1.8200</td>
      <td>1129.0</td>
      <td>1901.0</td>
      <td>7650.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>117.0</td>
      <td>17.0</td>
      <td>33.69</td>
      <td>-114.56</td>
      <td>85700.0</td>
      <td>1.6509</td>
      <td>333.0</td>
      <td>174.0</td>
      <td>720.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>226.0</td>
      <td>14.0</td>
      <td>33.64</td>
      <td>-114.57</td>
      <td>73400.0</td>
      <td>3.1917</td>
      <td>515.0</td>
      <td>337.0</td>
      <td>1501.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>262.0</td>
      <td>20.0</td>
      <td>33.57</td>
      <td>-114.57</td>
      <td>65500.0</td>
      <td>1.9250</td>
      <td>624.0</td>
      <td>326.0</td>
      <td>1454.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we want to sort the <code>DataFrame</code> by a specific column, we need to use the <code>sort_values()</code> method and specify the label of the column to sort by.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s1">'median_house_value'</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[111]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>568</th>
      <td>-117.02</td>
      <td>36.40</td>
      <td>19.0</td>
      <td>619.0</td>
      <td>239.0</td>
      <td>490.0</td>
      <td>164.0</td>
      <td>2.1000</td>
      <td>14999.0</td>
      </tr>
      <tr>
      <th>16643</th>
      <td>-122.74</td>
      <td>39.71</td>
      <td>16.0</td>
      <td>255.0</td>
      <td>73.0</td>
      <td>85.0</td>
      <td>38.0</td>
      <td>1.6607</td>
      <td>14999.0</td>
      </tr>
      <tr>
      <th>16801</th>
      <td>-123.17</td>
      <td>40.31</td>
      <td>36.0</td>
      <td>98.0</td>
      <td>28.0</td>
      <td>18.0</td>
      <td>8.0</td>
      <td>0.5360</td>
      <td>14999.0</td>
      </tr>
      <tr>
      <th>3226</th>
      <td>-117.86</td>
      <td>34.24</td>
      <td>52.0</td>
      <td>803.0</td>
      <td>267.0</td>
      <td>628.0</td>
      <td>225.0</td>
      <td>4.1932</td>
      <td>14999.0</td>
      </tr>
      <tr>
      <th>7182</th>
      <td>-118.33</td>
      <td>34.15</td>
      <td>39.0</td>
      <td>493.0</td>
      <td>168.0</td>
      <td>259.0</td>
      <td>138.0</td>
      <td>2.3667</td>
      <td>17500.0</td>
      </tr>
      <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      </tr>
      <tr>
      <th>15834</th>
      <td>-122.42</td>
      <td>37.81</td>
      <td>52.0</td>
      <td>1314.0</td>
      <td>317.0</td>
      <td>473.0</td>
      <td>250.0</td>
      <td>4.3472</td>
      <td>500001.0</td>
      </tr>
      <tr>
      <th>7927</th>
      <td>-118.40</td>
      <td>33.87</td>
      <td>38.0</td>
      <td>2398.0</td>
      <td>431.0</td>
      <td>911.0</td>
      <td>392.0</td>
      <td>5.2319</td>
      <td>500001.0</td>
      </tr>
      <tr>
      <th>3546</th>
      <td>-117.90</td>
      <td>33.63</td>
      <td>28.0</td>
      <td>2370.0</td>
      <td>352.0</td>
      <td>832.0</td>
      <td>347.0</td>
      <td>7.1148</td>
      <td>500001.0</td>
      </tr>
      <tr>
      <th>7924</th>
      <td>-118.40</td>
      <td>33.88</td>
      <td>35.0</td>
      <td>1060.0</td>
      <td>191.0</td>
      <td>444.0</td>
      <td>196.0</td>
      <td>8.0015</td>
      <td>500001.0</td>
      </tr>
      <tr>
      <th>14011</th>
      <td>-122.04</td>
      <td>37.26</td>
      <td>24.0</td>
      <td>4973.0</td>
      <td>709.0</td>
      <td>1692.0</td>
      <td>696.0</td>
      <td>7.8627</td>
      <td>500001.0</td>
      </tr>
      </tbody>
      </table>
      <p>17000 rows √ó 9 columns</p>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.7.-DataFrame-Statistics">4.7. DataFrame Statistics<a class="anchor-link" href="#4.7.-DataFrame-Statistics"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 95" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Statistics can be obtained from the <code>DataFrame</code>, such as the mean, mode, and standard deviation.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"media:</span><span class="se">\\n</span><span class="si">{</span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n\\n</span><span class="s2">desviaci√≥n estandar:</span><span class="se">\\n</span><span class="si">{</span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">std</span><span class="p">()</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'media:',
          'longitude               -119.562108',
          'latitude                  35.625225',
          'housing_median_age        28.589353',
          'total_rooms             2643.664412',
          'total_bedrooms           539.410824',
          'population              1429.573941',
          'households               501.221941',
          'median_income              3.883578',
          'median_house_value    207300.912353',
          'dtype: float64',
          'desviaci√≥n estandar:',
          'longitude                  2.005166',
          'latitude                   2.137340',
          'housing_median_age        12.586937',
          'total_rooms             2179.947071',
          'total_bedrooms           421.499452',
          'population              1147.852959',
          'households               384.520841',
          'median_income              1.908157',
          'median_house_value    115983.764387',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If you want to get statistics about the rows instead of the columns, you need to specify it using <code>axis=1</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"media:</span><span class="se">\\n</span><span class="si">{</span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n\\n</span><span class="s2">desviaci√≥n estandar:</span><span class="se">\\n</span><span class="si">{</span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">std</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'media:',
          '0         8357.597067',
          '1        10131.527778',
          '2         9664.642322',
          '3         8435.029078',
          '4         7567.436111',
          '             ...     ',
          '16995    12806.408567',
          '16996     9276.770878',
          '16997    12049.507922',
          '16998    10082.053300',
          '16999    10863.022744',
          'Length: 17000, dtype: float64',
          'desviaci√≥n estandar:',
          '0        22026.612445',
          '1        26352.939272',
          '2        28514.316588',
          '3        24366.754747',
          '4        21730.014569',
          '             ...     ',
          '16995    36979.676899',
          '16996    26158.006771',
          '16997    34342.876792',
          '16998    28408.152329',
          '16999    31407.119788',
          'Length: 17000, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another useful thing that can be obtained from <code>DataFrame</code>s is, for example, the number of times each item in a column repeats.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">california_housing_train</span><span class="p">[</span><span class="s2">"total_rooms"</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1582.0     16',
          '1527.0     15',
          '1717.0     14',
          '1471.0     14',
          '1703.0     14',
          '           ..',
          '157.0       1',
          '2760.0      1',
          '458.0       1',
          '10239.0     1',
          '4068.0      1',
          'Name: total_rooms, Length: 5533, dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>For example, we can see that there are a total of 16 houses with 1582 rooms.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.8.-Used-Memory">4.8. Used Memory<a class="anchor-link" href="#4.8.-Used-Memory"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 96" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can see the memory used by the DataFrame</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">memory_usage</span><span class="p">(</span><span class="n">deep</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Index                    128',
          'longitude             136000',
          'latitude              136000',
          'housing_median_age    136000',
          'total_rooms           136000',
          'total_bedrooms        136000',
          'population            136000',
          'households            136000',
          'median_income         136000',
          'median_house_value    136000',
          'dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="5.-Addition-of-Data">5. Addition of Data<a class="anchor-link" href="#5.-Addition-of-Data"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 97" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.1.-Addition-of-Columns">5.1. Addition of Columns<a class="anchor-link" href="#5.1.-Addition-of-Columns"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 98" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Columns can be easily added as operations of other columns</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      
      <span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"uno"</span><span class="p">]</span> <span class="o">+</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"dos"</span><span class="p">]</span>
      <span class="n">dataframe</span><span class="p">[</span><span class="s2">"flag"</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mf">7.0</span>
      
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      <th>flag</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>False</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>7.0</td>
      <td>False</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      <td>9.0</td>
      <td>True</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      <td>NaN</td>
      <td>False</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Columns can also be added indicating what value all their items will have</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span><span class="s2">"constante"</span><span class="p">]</span> <span class="o">=</span> <span class="mf">8.0</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      <th>flag</th>
      <th>constante</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>False</td>
      <td>8.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>7.0</td>
      <td>False</td>
      <td>8.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      <td>9.0</td>
      <td>True</td>
      <td>8.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      <td>NaN</td>
      <td>False</td>
      <td>8.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If a <code>Series</code> is added that does not have the same number of indices as the <code>DataFrame</code>, it will be adjusted to match the number of indices of the <code>DataFrame</code>.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span><span class="s2">"Menos indices"</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"uno"</span><span class="p">][:</span><span class="mi">2</span><span class="p">]</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      <th>flag</th>
      <th>constante</th>
      <th>Menos indices</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>False</td>
      <td>8.0</td>
      <td>1.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>7.0</td>
      <td>False</td>
      <td>8.0</td>
      <td>2.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      <td>9.0</td>
      <td>True</td>
      <td>8.0</td>
      <td>NaN</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      <td>NaN</td>
      <td>False</td>
      <td>8.0</td>
      <td>NaN</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>With the previous methods, the column was added at the end, but if you want to add the column in a specific position, you can use the <code>insert()</code> method.
      For example, if you want to add a column at position 3 (keeping in mind that indexing starts from position 0), with the name of the column being <em>inserted column</em> and its value being double that of the column <em>three</em>, it would be done as follows:</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s2">"columna insertada"</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      <th>columna insertada</th>
      <th>flag</th>
      <th>constante</th>
      <th>Menos indices</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>10.0</td>
      <td>False</td>
      <td>8.0</td>
      <td>1.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>7.0</td>
      <td>14.0</td>
      <td>False</td>
      <td>8.0</td>
      <td>2.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      <td>9.0</td>
      <td>18.0</td>
      <td>True</td>
      <td>8.0</td>
      <td>NaN</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>False</td>
      <td>8.0</td>
      <td>NaN</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If you want to add more than one column per command, you can use the <code>assign()</code> method.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">assign</span><span class="p">(</span>
          <span class="n">columna_asignada1</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"uno"</span><span class="p">]</span> <span class="o">*</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">],</span>
          <span class="n">columna_asignada2</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"dos"</span><span class="p">]</span> <span class="o">*</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">],</span>
          <span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      <th>columna insertada</th>
      <th>flag</th>
      <th>constante</th>
      <th>Menos indices</th>
      <th>columna_asignada1</th>
      <th>columna_asignada2</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>10.0</td>
      <td>False</td>
      <td>8.0</td>
      <td>1.0</td>
      <td>5.0</td>
      <td>20.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>7.0</td>
      <td>14.0</td>
      <td>False</td>
      <td>8.0</td>
      <td>2.0</td>
      <td>14.0</td>
      <td>35.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      <td>9.0</td>
      <td>18.0</td>
      <td>True</td>
      <td>8.0</td>
      <td>NaN</td>
      <td>27.0</td>
      <td>54.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>False</td>
      <td>8.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.2.-Addition-of-Rows">5.2. Addition of Rows<a class="anchor-link" href="#5.2.-Addition-of-Rows"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 99" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      
      <span class="n">dataframe</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[20]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can add a row at the end using the <code>concat</code> method (which we will cover in more detail later)</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="p">[</span><span class="mf">10.0</span><span class="p">],</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="p">[</span><span class="mf">20.0</span><span class="p">]</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe</span><span class="p">,</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)])</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[21]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      </tr>
      <tr>
      <th>0</th>
      <td>10.0</td>
      <td>20.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We see that the column has been added at the end, but it has index zero, so we reorder the indices using the method <code>reset_index(drop=True)</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[23]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>index</th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>0</td>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>1</td>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>2</td>
      <td>3.0</td>
      <td>6.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>3</td>
      <td>NaN</td>
      <td>7.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>0</td>
      <td>10.0</td>
      <td>20.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="6.-Data-Deletion">6. Data Deletion<a class="anchor-link" href="#6.-Data-Deletion"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 100" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.1.-Column-Deletion">6.1. Column Deletion<a class="anchor-link" href="#6.1.-Column-Deletion"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 101" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A specific column can be deleted using the <code>pop()</code> method.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s2">"constante"</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      <th>columna insertada</th>
      <th>flag</th>
      <th>Menos indices</th>
      <th>columna_asignada1</th>
      <th>columna_asignada2</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>10.0</td>
      <td>False</td>
      <td>1.0</td>
      <td>5.0</td>
      <td>20.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>7.0</td>
      <td>14.0</td>
      <td>False</td>
      <td>2.0</td>
      <td>14.0</td>
      <td>35.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      <td>9.0</td>
      <td>18.0</td>
      <td>True</td>
      <td>NaN</td>
      <td>27.0</td>
      <td>54.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>False</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Or using <code>del</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="k">del</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"flag"</span><span class="p">]</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      <th>columna insertada</th>
      <th>Menos indices</th>
      <th>columna_asignada1</th>
      <th>columna_asignada2</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>10.0</td>
      <td>1.0</td>
      <td>5.0</td>
      <td>20.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>7.0</td>
      <td>14.0</td>
      <td>2.0</td>
      <td>14.0</td>
      <td>35.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      <td>9.0</td>
      <td>18.0</td>
      <td>NaN</td>
      <td>27.0</td>
      <td>54.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.1.-Row-Deletion">6.1. Row Deletion<a class="anchor-link" href="#6.1.-Row-Deletion"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 102" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span> <span class="mf">8.0</span><span class="p">,</span> <span class="mf">9.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">11.0</span><span class="p">,</span> <span class="mf">12.0</span><span class="p">,</span> <span class="mf">13.0</span><span class="p">,</span> <span class="mf">14.0</span><span class="p">,</span> <span class="mf">15.0</span><span class="p">,</span> <span class="mf">16.0</span><span class="p">,</span> <span class="mf">17.0</span><span class="p">,</span> <span class="mf">18.0</span><span class="p">,</span> <span class="mf">19.0</span><span class="p">,</span> <span class="mf">20.0</span><span class="p">]),</span>
          <span class="s2">"tres"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">21.0</span><span class="p">,</span> <span class="mf">22.0</span><span class="p">,</span> <span class="mf">23.0</span><span class="p">,</span> <span class="mf">24.0</span><span class="p">,</span> <span class="mf">25.0</span><span class="p">,</span> <span class="mf">26.0</span><span class="p">,</span> <span class="mf">27.0</span><span class="p">,</span> <span class="mf">28.0</span><span class="p">,</span> <span class="mf">29.0</span><span class="p">,</span> <span class="mf">30.0</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      
      <span class="n">dataframe</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[49]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>11.0</td>
      <td>21.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>12.0</td>
      <td>22.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>13.0</td>
      <td>23.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>4.0</td>
      <td>14.0</td>
      <td>24.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>5.0</td>
      <td>15.0</td>
      <td>25.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we want to delete a row, we can use the <code>drop</code> method, specifying its position. For example, if we want to delete the row at position 1</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[50]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>11.0</td>
      <td>21.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>13.0</td>
      <td>23.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>4.0</td>
      <td>14.0</td>
      <td>24.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>5.0</td>
      <td>15.0</td>
      <td>25.0</td>
      </tr>
      <tr>
      <th>5</th>
      <td>6.0</td>
      <td>16.0</td>
      <td>26.0</td>
      </tr>
      <tr>
      <th>6</th>
      <td>7.0</td>
      <td>17.0</td>
      <td>27.0</td>
      </tr>
      <tr>
      <th>7</th>
      <td>8.0</td>
      <td>18.0</td>
      <td>28.0</td>
      </tr>
      <tr>
      <th>8</th>
      <td>9.0</td>
      <td>19.0</td>
      <td>29.0</td>
      </tr>
      <tr>
      <th>9</th>
      <td>10.0</td>
      <td>20.0</td>
      <td>30.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we want to delete the last row</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">dataframe</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[51]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>11.0</td>
      <td>21.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>13.0</td>
      <td>23.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>4.0</td>
      <td>14.0</td>
      <td>24.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>5.0</td>
      <td>15.0</td>
      <td>25.0</td>
      </tr>
      <tr>
      <th>5</th>
      <td>6.0</td>
      <td>16.0</td>
      <td>26.0</td>
      </tr>
      <tr>
      <th>6</th>
      <td>7.0</td>
      <td>17.0</td>
      <td>27.0</td>
      </tr>
      <tr>
      <th>7</th>
      <td>8.0</td>
      <td>18.0</td>
      <td>28.0</td>
      </tr>
      <tr>
      <th>9</th>
      <td>10.0</td>
      <td>20.0</td>
      <td>30.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If what we want is to delete a range of rows</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[52]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>11.0</td>
      <td>21.0</td>
      </tr>
      <tr>
      <th>5</th>
      <td>6.0</td>
      <td>16.0</td>
      <td>26.0</td>
      </tr>
      <tr>
      <th>6</th>
      <td>7.0</td>
      <td>17.0</td>
      <td>27.0</td>
      </tr>
      <tr>
      <th>7</th>
      <td>8.0</td>
      <td>18.0</td>
      <td>28.0</td>
      </tr>
      <tr>
      <th>9</th>
      <td>10.0</td>
      <td>20.0</td>
      <td>30.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If what we want is to remove a specific set of rows</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">drop</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">])</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[53]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>11.0</td>
      <td>21.0</td>
      </tr>
      <tr>
      <th>6</th>
      <td>7.0</td>
      <td>17.0</td>
      <td>27.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Just like when we added rows, we see that some indices have been removed, so we reorder the indices using the method <code>reset_index(drop=True)</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[54]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>11.0</td>
      <td>21.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>7.0</td>
      <td>17.0</td>
      <td>27.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="7.-Operations-on-DataFrames">7. Operations on DataFrames<a class="anchor-link" href="#7.-Operations-on-DataFrames"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 103" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operations can be performed on <code>DataFrame</code>s just as they can with Numpy.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span> <span class="mf">8.0</span><span class="p">,</span> <span class="mf">9.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">11.0</span><span class="p">,</span> <span class="mf">12.0</span><span class="p">,</span> <span class="mf">13.0</span><span class="p">,</span> <span class="mf">14.0</span><span class="p">,</span> <span class="mf">15.0</span><span class="p">,</span> <span class="mf">16.0</span><span class="p">,</span> <span class="mf">17.0</span><span class="p">,</span> <span class="mf">18.0</span><span class="p">,</span> <span class="mf">19.0</span><span class="p">,</span> <span class="mf">20.0</span><span class="p">]),</span>
          <span class="s2">"tres"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">21.0</span><span class="p">,</span> <span class="mf">22.0</span><span class="p">,</span> <span class="mf">23.0</span><span class="p">,</span> <span class="mf">24.0</span><span class="p">,</span> <span class="mf">25.0</span><span class="p">,</span> <span class="mf">26.0</span><span class="p">,</span> <span class="mf">27.0</span><span class="p">,</span> <span class="mf">28.0</span><span class="p">,</span> <span class="mf">29.0</span><span class="p">,</span> <span class="mf">30.0</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      
      <span class="n">dataframe</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[58]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>11.0</td>
      <td>21.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>12.0</td>
      <td>22.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>13.0</td>
      <td>23.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>4.0</td>
      <td>14.0</td>
      <td>24.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>5.0</td>
      <td>15.0</td>
      <td>25.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span> <span class="p">[</span><span class="s2">"uno"</span><span class="p">,</span> <span class="s2">"dos"</span><span class="p">,</span> <span class="s2">"tres"</span><span class="p">]</span> <span class="p">]</span> <span class="o">*</span> <span class="mi">2</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[59]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>2.0</td>
      <td>22.0</td>
      <td>42.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>4.0</td>
      <td>24.0</td>
      <td>44.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>6.0</td>
      <td>26.0</td>
      <td>46.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>8.0</td>
      <td>28.0</td>
      <td>48.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>10.0</td>
      <td>30.0</td>
      <td>50.0</td>
      </tr>
      <tr>
      <th>5</th>
      <td>12.0</td>
      <td>32.0</td>
      <td>52.0</td>
      </tr>
      <tr>
      <th>6</th>
      <td>14.0</td>
      <td>34.0</td>
      <td>54.0</td>
      </tr>
      <tr>
      <th>7</th>
      <td>16.0</td>
      <td>36.0</td>
      <td>56.0</td>
      </tr>
      <tr>
      <th>8</th>
      <td>18.0</td>
      <td>38.0</td>
      <td>58.0</td>
      </tr>
      <tr>
      <th>9</th>
      <td>20.0</td>
      <td>40.0</td>
      <td>60.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">dataframe</span><span class="p">[</span> <span class="p">[</span><span class="s2">"uno"</span><span class="p">,</span> <span class="s2">"dos"</span><span class="p">,</span> <span class="s2">"tres"</span><span class="p">]</span> <span class="p">])</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[60]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>2.718282</td>
      <td>5.987414e+04</td>
      <td>1.318816e+09</td>
      </tr>
      <tr>
      <th>1</th>
      <td>7.389056</td>
      <td>1.627548e+05</td>
      <td>3.584913e+09</td>
      </tr>
      <tr>
      <th>2</th>
      <td>20.085537</td>
      <td>4.424134e+05</td>
      <td>9.744803e+09</td>
      </tr>
      <tr>
      <th>3</th>
      <td>54.598150</td>
      <td>1.202604e+06</td>
      <td>2.648912e+10</td>
      </tr>
      <tr>
      <th>4</th>
      <td>148.413159</td>
      <td>3.269017e+06</td>
      <td>7.200490e+10</td>
      </tr>
      <tr>
      <th>5</th>
      <td>403.428793</td>
      <td>8.886111e+06</td>
      <td>1.957296e+11</td>
      </tr>
      <tr>
      <th>6</th>
      <td>1096.633158</td>
      <td>2.415495e+07</td>
      <td>5.320482e+11</td>
      </tr>
      <tr>
      <th>7</th>
      <td>2980.957987</td>
      <td>6.565997e+07</td>
      <td>1.446257e+12</td>
      </tr>
      <tr>
      <th>8</th>
      <td>8103.083928</td>
      <td>1.784823e+08</td>
      <td>3.931334e+12</td>
      </tr>
      <tr>
      <th>9</th>
      <td>22026.465795</td>
      <td>4.851652e+08</td>
      <td>1.068647e+13</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If more complex operations are desired, the <code>apply()</code> method can be used.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">max</span><span class="p">()</span> <span class="o">-</span> <span class="n">x</span><span class="o">.</span><span class="n">min</span><span class="p">())</span>',
          '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'uno     9.0',
          'dos     9.0',
          'tres    9.0',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A <code>lambda</code> function has been applied because it is a simple function, but if we want to apply more complex functions, we can define and apply them.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>',
          '    <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>',
          '        <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="mi">5</span><span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '    <span class="k">elif</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">:</span>',
          '        <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">tan</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '    <span class="k">else</span><span class="p">:</span>',
          '        <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">log10</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">log2</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '    ',
          '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">funcion</span><span class="p">)</span>',
          '',
          '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'uno     8102.277265',
          'dos     8102.277265',
          'tres    8102.277265',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Using the <code>apply</code> method on a DataFrame is much faster than looping through each row and performing the operation.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv"</span><span class="p">)</span>
      <span class="n">california_housing_train</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[64]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>-114.31</td>
      <td>34.19</td>
      <td>15.0</td>
      <td>5612.0</td>
      <td>1283.0</td>
      <td>1015.0</td>
      <td>472.0</td>
      <td>1.4936</td>
      <td>66900.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>-114.47</td>
      <td>34.40</td>
      <td>19.0</td>
      <td>7650.0</td>
      <td>1901.0</td>
      <td>1129.0</td>
      <td>463.0</td>
      <td>1.8200</td>
      <td>80100.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>-114.56</td>
      <td>33.69</td>
      <td>17.0</td>
      <td>720.0</td>
      <td>174.0</td>
      <td>333.0</td>
      <td>117.0</td>
      <td>1.6509</td>
      <td>85700.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>-114.57</td>
      <td>33.64</td>
      <td>14.0</td>
      <td>1501.0</td>
      <td>337.0</td>
      <td>515.0</td>
      <td>226.0</td>
      <td>3.1917</td>
      <td>73400.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>-114.57</td>
      <td>33.57</td>
      <td>20.0</td>
      <td>1454.0</td>
      <td>326.0</td>
      <td>624.0</td>
      <td>262.0</td>
      <td>1.9250</td>
      <td>65500.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's calculate the percentage of bedrooms out of the total number of rooms.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="p">[</span><span class="s2">"percent_bedrooms"</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>
      <span class="o">%</span><span class="k">time</span> california_housing_train["percent_bedrooms"] = california_housing_train.apply(lambda x: x["total_bedrooms"] / x["total_rooms"], axis=1)
      <span class="n">california_housing_train</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>CPU times: user 309 ms, sys: 86 ¬µs, total: 309 ms
      Wall time: 309 ms
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[74]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      <th>percent_bedrooms</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>-114.31</td>
      <td>34.19</td>
      <td>15.0</td>
      <td>5612.0</td>
      <td>1283.0</td>
      <td>1015.0</td>
      <td>472.0</td>
      <td>1.4936</td>
      <td>66900.0</td>
      <td>0.228617</td>
      </tr>
      <tr>
      <th>1</th>
      <td>-114.47</td>
      <td>34.40</td>
      <td>19.0</td>
      <td>7650.0</td>
      <td>1901.0</td>
      <td>1129.0</td>
      <td>463.0</td>
      <td>1.8200</td>
      <td>80100.0</td>
      <td>0.248497</td>
      </tr>
      <tr>
      <th>2</th>
      <td>-114.56</td>
      <td>33.69</td>
      <td>17.0</td>
      <td>720.0</td>
      <td>174.0</td>
      <td>333.0</td>
      <td>117.0</td>
      <td>1.6509</td>
      <td>85700.0</td>
      <td>0.241667</td>
      </tr>
      <tr>
      <th>3</th>
      <td>-114.57</td>
      <td>33.64</td>
      <td>14.0</td>
      <td>1501.0</td>
      <td>337.0</td>
      <td>515.0</td>
      <td>226.0</td>
      <td>3.1917</td>
      <td>73400.0</td>
      <td>0.224517</td>
      </tr>
      <tr>
      <th>4</th>
      <td>-114.57</td>
      <td>33.57</td>
      <td>20.0</td>
      <td>1454.0</td>
      <td>326.0</td>
      <td>624.0</td>
      <td>262.0</td>
      <td>1.9250</td>
      <td>65500.0</td>
      <td>0.224209</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="p">[</span><span class="s2">"percent_bedrooms"</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>
      <span class="o">%</span><span class="k">time</span> for i in range(len(california_housing_train)): california_housing_train["percent_bedrooms"][i] = california_housing_train["total_bedrooms"][i] / california_housing_train["total_rooms"][i]
      <span class="n">california_housing_train</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>/home/wallabot/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: 
      A value is trying to be set on a copy of a slice from a DataFrame
      
      See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
        """Entry point for launching an IPython kernel.
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>CPU times: user 1.72 s, sys: 12 ms, total: 1.73 s
      Wall time: 1.72 s
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[77]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      <th>percent_bedrooms</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>-114.31</td>
      <td>34.19</td>
      <td>15.0</td>
      <td>5612.0</td>
      <td>1283.0</td>
      <td>1015.0</td>
      <td>472.0</td>
      <td>1.4936</td>
      <td>66900.0</td>
      <td>0.228617</td>
      </tr>
      <tr>
      <th>1</th>
      <td>-114.47</td>
      <td>34.40</td>
      <td>19.0</td>
      <td>7650.0</td>
      <td>1901.0</td>
      <td>1129.0</td>
      <td>463.0</td>
      <td>1.8200</td>
      <td>80100.0</td>
      <td>0.248497</td>
      </tr>
      <tr>
      <th>2</th>
      <td>-114.56</td>
      <td>33.69</td>
      <td>17.0</td>
      <td>720.0</td>
      <td>174.0</td>
      <td>333.0</td>
      <td>117.0</td>
      <td>1.6509</td>
      <td>85700.0</td>
      <td>0.241667</td>
      </tr>
      <tr>
      <th>3</th>
      <td>-114.57</td>
      <td>33.64</td>
      <td>14.0</td>
      <td>1501.0</td>
      <td>337.0</td>
      <td>515.0</td>
      <td>226.0</td>
      <td>3.1917</td>
      <td>73400.0</td>
      <td>0.224517</td>
      </tr>
      <tr>
      <th>4</th>
      <td>-114.57</td>
      <td>33.57</td>
      <td>20.0</td>
      <td>1454.0</td>
      <td>326.0</td>
      <td>624.0</td>
      <td>262.0</td>
      <td>1.9250</td>
      <td>65500.0</td>
      <td>0.224209</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>lambda</code> function took about 300 ms, while the <code>for</code> loop took more than 1 second.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="8.-Transpose">8. Transpose<a class="anchor-link" href="#8.-Transpose"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 104" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The transpose of a <code>DataFrame</code> can be obtained using the <code>T</code> method.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"fila a"</span><span class="p">,</span> <span class="s2">"fila b"</span><span class="p">,</span> <span class="s2">"fila c"</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"fila a"</span><span class="p">,</span> <span class="s2">"fila b"</span><span class="p">,</span> <span class="s2">"fila c"</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      
      <span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"uno"</span><span class="p">]</span> <span class="o">+</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"dos"</span><span class="p">]</span>
      <span class="n">dataframe</span><span class="p">[</span><span class="s2">"flag"</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mf">7.0</span>
      
      <span class="n">dataframe</span><span class="o">.</span><span class="n">T</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>fila a</th>
      <th>fila b</th>
      <th>fila c</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>uno</th>
      <td>1</td>
      <td>2</td>
      <td>3</td>
      </tr>
      <tr>
      <th>dos</th>
      <td>4</td>
      <td>5</td>
      <td>6</td>
      </tr>
      <tr>
      <th>tres</th>
      <td>5</td>
      <td>7</td>
      <td>9</td>
      </tr>
      <tr>
      <th>flag</th>
      <td>False</td>
      <td>False</td>
      <td>True</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="9.-Conversion-to-Numpy">9. Conversion to Numpy<a class="anchor-link" href="#9.-Conversion-to-Numpy"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 105" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If you want to convert a <code>Series</code> or <code>DataFrame</code> to NumPy, you can use the <code>to_numpy()</code> method or the <code>np.asarray()</code> function.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"fila a"</span><span class="p">,</span> <span class="s2">"fila b"</span><span class="p">,</span> <span class="s2">"fila c"</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"fila a"</span><span class="p">,</span> <span class="s2">"fila b"</span><span class="p">,</span> <span class="s2">"fila c"</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      
      <span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"uno"</span><span class="p">]</span> <span class="o">+</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"dos"</span><span class="p">]</span>
      <span class="n">dataframe</span><span class="p">[</span><span class="s2">"flag"</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mf">7.0</span>
      
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      <th>flag</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>fila a</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>False</td>
      </tr>
      <tr>
      <th>fila b</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>7.0</td>
      <td>False</td>
      </tr>
      <tr>
      <th>fila c</th>
      <td>3.0</td>
      <td>6.0</td>
      <td>9.0</td>
      <td>True</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">matriz_np</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span>',
          '<span class="n">matriz_np</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([[1.0, 4.0, 5.0, False],',
          '       [2.0, 5.0, 7.0, False],',
          '       [3.0, 6.0, 9.0, True]], dtype=object)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">matriz_np</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">dataframe</span><span class="p">)</span>',
          '<span class="n">matriz_np</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([[1.0, 4.0, 5.0, False],',
          '       [2.0, 5.0, 7.0, False],',
          '       [3.0, 6.0, 9.0, True]], dtype=object)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>This example is not the most appropriate, as it mixes numbers with booleans, and as we explained in the previous post <a href="https://maximofn.com/numpy/">Matrix Calculus with NumPy</a>, all elements of an <code>ndarray</code> must be of the same type.
      In this case we are mixing numbers with booleans, so to solve it NumPy converts them all to objects
      To solve this, we keep only the numbers and convert them to an <code>ndarray</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">matriz_np</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span> <span class="p">[</span><span class="s2">"uno"</span><span class="p">,</span> <span class="s2">"dos"</span><span class="p">,</span> <span class="s2">"tres"</span><span class="p">]</span> <span class="p">]</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span>',
          '<span class="n">matriz_np</span><span class="p">,</span> <span class="n">matriz_np</span><span class="o">.</span><span class="n">dtype</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(array([[1., 4., 5.],',
          '        [2., 5., 7.],',
          '        [3., 6., 9.]]), dtype(\'float64\'))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now it can be seen that an <code>ndarray</code> has been created where all the data are of type <code>float</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="10.-Reading-data-from-external-sources">10. Reading data from external sources<a class="anchor-link" href="#10.-Reading-data-from-external-sources"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 106" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>One of the greatest strengths of Pandas is being able to read data from files, so it's not necessary to create a <code>DataFrame</code> with the data you want to process; instead, it can be read from a file.
      Just like you can create <code>DataFrame</code>s from external files, you can also save <code>DataFrame</code>s to files, so you can create your own dataset, configure it the way you want, and save it to a file to use it later.
      The following table shows the functions for reading and writing files in different formats.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>|Format|File type|Reading function|Writing function||---|---|---|---||text|CSV|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-read-csv-table" target="_blank" rel="nofollow noreferrer">read_csv</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-store-in-csv">to_csv</a>||text|Fixed-Width Text File|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-fwf-reader">read_fwf</a>|||text|JSON|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-json-reader">read_json</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-json-writer">to_json</a>||text|HTML|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-read-html">read_html</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-html">to_html</a>||text|Local clipboard|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-clipboard">read_clipboard</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-clipboard">to_clipboard</a>||binary|MS Excel|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-excel-reader">read_excel</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-excel-writer">to_excel</a>||binary|OpenDocument|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-ods">read_excel</a>||binary|HDF5 Format|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-hdf5">read_hdf</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-hdf5">to_hdf</a>||binary|Feather Format|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-feather">read_feather</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-feather">to_feather</a>||binary|Parquet Format|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-parquet">read_parquet</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-parquet">to_parquet</a>||binary|ORC Format|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-orc">read_orc</a>||binary|Msgpack|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-msgpack">read_msgpack</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-msgpack">to_msgpack</a>||binary|Stata|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-stata-reader">read_stata</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-stata-writer">to_stata</a>||binary|SAS|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sas-reader">read_sas</a>||binary|SPSS|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-spss-reader">read_spss</a>||binary|Python Pickle Format|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-pickle">read_pickle</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-pickle">to_pickle</a>||SQL|SQL|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sql">read_sql</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sql">to_sql</a>||SQL|Google BigQuery|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-bigquery">read_gbq</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-bigquery">to_gbq</a>|</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="11.-Indexing-in-DataFrames">11. Indexing in DataFrames<a class="anchor-link" href="#11.-Indexing-in-DataFrames"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 107" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>There are many ways to index into <code>DataFrame</code>s.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">fechas</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s1">'1/1/2000'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">fechas</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">'A'</span><span class="p">,</span> <span class="s1">'B'</span><span class="p">,</span> <span class="s1">'C'</span><span class="p">,</span> <span class="s1">'D'</span><span class="p">])</span>
      
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[56]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>-0.869298</td>
      <td>-0.210502</td>
      <td>0.477938</td>
      <td>0.912121</td>
      </tr>
      <tr>
      <th>2000-01-02</th>
      <td>-0.502425</td>
      <td>-1.897287</td>
      <td>-0.084122</td>
      <td>-1.203818</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>-0.204297</td>
      <td>0.711485</td>
      <td>-1.271802</td>
      <td>-0.138120</td>
      </tr>
      <tr>
      <th>2000-01-04</th>
      <td>1.512985</td>
      <td>0.726718</td>
      <td>0.960902</td>
      <td>0.433124</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>0.724005</td>
      <td>-2.127668</td>
      <td>0.674417</td>
      <td>-0.297808</td>
      </tr>
      <tr>
      <th>2000-01-06</th>
      <td>-0.217175</td>
      <td>-0.621172</td>
      <td>0.668163</td>
      <td>0.170576</td>
      </tr>
      <tr>
      <th>2000-01-07</th>
      <td>0.352484</td>
      <td>0.260515</td>
      <td>-1.576033</td>
      <td>1.263213</td>
      </tr>
      <tr>
      <th>2000-01-08</th>
      <td>-0.032928</td>
      <td>-0.648313</td>
      <td>-0.622509</td>
      <td>0.231683</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.1.-Column-Indexing">11.1. Column Indexing<a class="anchor-link" href="#11.1.-Column-Indexing"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 108" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To select columns within a <code>DataFrame</code>, you can do so by selecting the column between brackets <code>[]</code>, or by indicating the column as if it were an attribute of the <code>DataFrame</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span><span class="p">[</span><span class="s1">\'A\'</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2000-01-01    0.813153',
          '2000-01-02   -0.244584',
          '2000-01-03    0.125729',
          '2000-01-04    0.352275',
          '2000-01-05   -2.050976',
          '2000-01-06   -0.312296',
          '2000-01-07    0.897837',
          '2000-01-08    0.271403',
          'Freq: D, Name: A, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">A</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2000-01-01    0.813153',
          '2000-01-02   -0.244584',
          '2000-01-03    0.125729',
          '2000-01-04    0.352275',
          '2000-01-05   -2.050976',
          '2000-01-06   -0.312296',
          '2000-01-07    0.897837',
          '2000-01-08    0.271403',
          'Freq: D, Name: A, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If specific rows are desired, they are passed through a list</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span> <span class="p">[</span><span class="s1">'A'</span><span class="p">,</span> <span class="s1">'B'</span><span class="p">]</span> <span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>-0.341962</td>
      <td>0.639913</td>
      </tr>
      <tr>
      <th>2000-01-02</th>
      <td>0.507258</td>
      <td>-0.942036</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>-1.463557</td>
      <td>1.041023</td>
      </tr>
      <tr>
      <th>2000-01-04</th>
      <td>1.781058</td>
      <td>-1.849352</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>0.318897</td>
      <td>-0.229218</td>
      </tr>
      <tr>
      <th>2000-01-06</th>
      <td>0.362064</td>
      <td>-0.193479</td>
      </tr>
      <tr>
      <th>2000-01-07</th>
      <td>-0.084632</td>
      <td>-0.112474</td>
      </tr>
      <tr>
      <th>2000-01-08</th>
      <td>0.739424</td>
      <td>0.253191</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.2.-Row-Indexing-by-Positions">11.2. Row Indexing by Positions<a class="anchor-link" href="#11.2.-Row-Indexing-by-Positions"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 109" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A range of rows from a <code>DataFrame</code> can be selected as follows</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>0.813153</td>
      <td>-0.869356</td>
      <td>0.934293</td>
      <td>0.338644</td>
      </tr>
      <tr>
      <th>2000-01-02</th>
      <td>-0.244584</td>
      <td>0.536352</td>
      <td>0.322248</td>
      <td>0.238903</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>0.125729</td>
      <td>2.046910</td>
      <td>-0.877466</td>
      <td>-0.710034</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If you want to select a single row, you need to specify a range of rows that includes only that one. For example, if you want to select row number 1</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-02</th>
      <td>-0.244584</td>
      <td>0.536352</td>
      <td>0.322248</td>
      <td>0.238903</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Another method to select a row by its position is the <code>iloc[]</code> method</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>0.813153</td>
      <td>-0.869356</td>
      <td>0.934293</td>
      <td>0.338644</td>
      </tr>
      <tr>
      <th>2000-01-02</th>
      <td>-0.244584</td>
      <td>0.536352</td>
      <td>0.322248</td>
      <td>0.238903</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>0.125729</td>
      <td>2.046910</td>
      <td>-0.877466</td>
      <td>-0.710034</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If specific rows are desired, a list with their positions is passed.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span> <span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>-0.341962</td>
      <td>0.639913</td>
      <td>0.765817</td>
      <td>0.056692</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>-1.463557</td>
      <td>1.041023</td>
      <td>-1.321715</td>
      <td>2.822735</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>0.318897</td>
      <td>-0.229218</td>
      <td>-1.095593</td>
      <td>-0.186248</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.3.-Row-Label-Indexing">11.3. Row Label Indexing<a class="anchor-link" href="#11.3.-Row-Label-Indexing"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 110" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To select a row by its labels, we can use the <code>loc[]</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="s1">\'2000-01-01\'</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'A    0.813153',
          'B   -0.869356',
          'C    0.934293',
          'D    0.338644',
          'Name: 2000-01-01 00:00:00, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If you want to select a range of rows, you can index them using the colon <code>:</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="s1">'2000-01-01'</span><span class="p">:</span><span class="s1">'2000-01-03'</span><span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>0.813153</td>
      <td>-0.869356</td>
      <td>0.934293</td>
      <td>0.338644</td>
      </tr>
      <tr>
      <th>2000-01-02</th>
      <td>-0.244584</td>
      <td>0.536352</td>
      <td>0.322248</td>
      <td>0.238903</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>0.125729</td>
      <td>2.046910</td>
      <td>-0.877466</td>
      <td>-0.710034</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If specific rows are desired, they are passed through a list</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">[</span><span class="s1">'2000-01-01'</span><span class="p">,</span> <span class="s1">'2000-01-03'</span><span class="p">,</span> <span class="s1">'2000-01-05'</span><span class="p">]</span> <span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>-0.341962</td>
      <td>0.639913</td>
      <td>0.765817</td>
      <td>0.056692</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>-1.463557</td>
      <td>1.041023</td>
      <td>-1.321715</td>
      <td>2.822735</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>0.318897</td>
      <td>-0.229218</td>
      <td>-1.095593</td>
      <td>-0.186248</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.4.-Selection-of-a-Portion-of-the-DataFrame-by-Positions">11.4. Selection of a Portion of the DataFrame by Positions<a class="anchor-link" href="#11.4.-Selection-of-a-Portion-of-the-DataFrame-by-Positions"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 111" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>0.813153</td>
      <td>-0.869356</td>
      </tr>
      <tr>
      <th>2000-01-02</th>
      <td>-0.244584</td>
      <td>0.536352</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>0.125729</td>
      <td>2.046910</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If specific rows and columns are desired, lists with the desired positions are passed.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>C</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>-0.341962</td>
      <td>0.765817</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>-1.463557</td>
      <td>-1.321715</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>0.318897</td>
      <td>-1.095593</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.5.-Selecting-a-Portion-of-the-DataFrame-Using-Labels">11.5. Selecting a Portion of the DataFrame Using Labels<a class="anchor-link" href="#11.5.-Selecting-a-Portion-of-the-DataFrame-Using-Labels"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 112" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="s1">'2000-01-01'</span><span class="p">:</span><span class="s1">'2000-01-03'</span><span class="p">,</span> <span class="s1">'A'</span><span class="p">:</span><span class="s1">'B'</span><span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>0.813153</td>
      <td>-0.869356</td>
      </tr>
      <tr>
      <th>2000-01-02</th>
      <td>-0.244584</td>
      <td>0.536352</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>0.125729</td>
      <td>2.046910</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If you want certain rows and columns, you pass lists with the desired labels</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">[</span><span class="s1">'2000-01-01'</span><span class="p">,</span> <span class="s1">'2000-01-03'</span><span class="p">,</span> <span class="s1">'2000-01-05'</span><span class="p">],</span> <span class="p">[</span><span class="s1">'A'</span><span class="p">,</span> <span class="s1">'C'</span><span class="p">]</span> <span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>C</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>-0.341962</td>
      <td>0.765817</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>-1.463557</td>
      <td>-1.321715</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>0.318897</td>
      <td>-1.095593</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.6.-Lambda-Function-Indexing">11.6. Lambda Function Indexing<a class="anchor-link" href="#11.6.-Lambda-Function-Indexing"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 113" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Data can be selected from a <code>DataFrame</code> that meets a condition given by a <code>lambda</code> function.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="k">lambda</span> <span class="n">dataframe</span><span class="p">:</span><span class="mi">2</span><span class="o">*</span><span class="n">dataframe</span><span class="p">[</span><span class="s1">'A'</span><span class="p">]</span><span class="o">+</span><span class="mi">5</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">dataframe</span><span class="p">[</span><span class="s1">'B'</span><span class="p">])</span><span class="o">&gt;</span><span class="mf">0.2</span><span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[58]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>-0.869298</td>
      <td>-0.210502</td>
      <td>0.477938</td>
      <td>0.912121</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>-0.204297</td>
      <td>0.711485</td>
      <td>-1.271802</td>
      <td>-0.138120</td>
      </tr>
      <tr>
      <th>2000-01-04</th>
      <td>1.512985</td>
      <td>0.726718</td>
      <td>0.960902</td>
      <td>0.433124</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>0.724005</td>
      <td>-2.127668</td>
      <td>0.674417</td>
      <td>-0.297808</td>
      </tr>
      <tr>
      <th>2000-01-06</th>
      <td>-0.217175</td>
      <td>-0.621172</td>
      <td>0.668163</td>
      <td>0.170576</td>
      </tr>
      <tr>
      <th>2000-01-07</th>
      <td>0.352484</td>
      <td>0.260515</td>
      <td>-1.576033</td>
      <td>1.263213</td>
      </tr>
      <tr>
      <th>2000-01-08</th>
      <td>-0.032928</td>
      <td>-0.648313</td>
      <td>-0.622509</td>
      <td>0.231683</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As can be seen, this form of indexing is very powerful</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.7.-Conditional-Indexing">11.7. Conditional Indexing<a class="anchor-link" href="#11.7.-Conditional-Indexing"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 114" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we don't need complex functions for indexing, but only conditionals, we can do</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span><span class="n">dataframe</span><span class="p">[</span><span class="s1">'A'</span><span class="p">]</span><span class="o">&gt;</span><span class="mf">0.2</span><span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[61]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-04</th>
      <td>1.512985</td>
      <td>0.726718</td>
      <td>0.960902</td>
      <td>0.433124</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>0.724005</td>
      <td>-2.127668</td>
      <td>0.674417</td>
      <td>-0.297808</td>
      </tr>
      <tr>
      <th>2000-01-07</th>
      <td>0.352484</td>
      <td>0.260515</td>
      <td>-1.576033</td>
      <td>1.263213</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can make multiple conditions</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[(</span><span class="n">dataframe</span><span class="p">[</span><span class="s1">'A'</span><span class="p">]</span><span class="o">&gt;</span><span class="mf">0.2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">dataframe</span><span class="p">[</span><span class="s1">'B'</span><span class="p">]</span><span class="o">&gt;</span><span class="mf">0.2</span><span class="p">)]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[69]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-04</th>
      <td>1.512985</td>
      <td>0.726718</td>
      <td>0.960902</td>
      <td>0.433124</td>
      </tr>
      <tr>
      <th>2000-01-07</th>
      <td>0.352484</td>
      <td>0.260515</td>
      <td>-1.576033</td>
      <td>1.263213</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.8.-Random-Indexing">11.8. Random Indexing<a class="anchor-link" href="#11.8.-Random-Indexing"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 115" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>By using the <code>sample()</code> method, we will obtain a random row from the <code>DataFrame</code>.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">sample</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-06</th>
      <td>-0.312296</td>
      <td>0.129097</td>
      <td>-0.991085</td>
      <td>1.704535</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we want more than one sample, we indicate it with the attribute <code>n</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-08</th>
      <td>0.271403</td>
      <td>1.527116</td>
      <td>0.144970</td>
      <td>1.175728</td>
      </tr>
      <tr>
      <th>2000-01-01</th>
      <td>0.813153</td>
      <td>-0.869356</td>
      <td>0.934293</td>
      <td>0.338644</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>0.125729</td>
      <td>2.046910</td>
      <td>-0.877466</td>
      <td>-0.710034</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If random columns are desired, this must be indicated using <code>axis=1</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>0.338644</td>
      </tr>
      <tr>
      <th>2000-01-02</th>
      <td>0.238903</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>-0.710034</td>
      </tr>
      <tr>
      <th>2000-01-04</th>
      <td>0.504410</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>-1.601926</td>
      </tr>
      <tr>
      <th>2000-01-06</th>
      <td>1.704535</td>
      </tr>
      <tr>
      <th>2000-01-07</th>
      <td>-0.584860</td>
      </tr>
      <tr>
      <th>2000-01-08</th>
      <td>1.175728</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If a single item from the <code>DataFrame</code> is desired, the <code>sample()</code> method has to be called twice.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">sample</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-05</th>
      <td>-1.601926</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="12.-Merging-DataFrames">12. Merging DataFrames<a class="anchor-link" href="#12.-Merging-DataFrames"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 116" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="12.1.-Concatenation-of-DataFrames">12.1. Concatenation of DataFrames<a class="anchor-link" href="#12.1.-Concatenation-of-DataFrames"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 117" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To concatenate multiple <code>DataFrame</code>s we use the <code>concat()</code> method, where a list of the <code>DataFrame</code>s to be joined is passed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A0"</span><span class="p">,</span> <span class="s2">"A1"</span><span class="p">,</span> <span class="s2">"A2"</span><span class="p">,</span> <span class="s2">"A3"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B0"</span><span class="p">,</span> <span class="s2">"B1"</span><span class="p">,</span> <span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">],</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C0"</span><span class="p">,</span> <span class="s2">"C1"</span><span class="p">,</span> <span class="s2">"C2"</span><span class="p">,</span> <span class="s2">"C3"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D0"</span><span class="p">,</span> <span class="s2">"D1"</span><span class="p">,</span> <span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A4"</span><span class="p">,</span> <span class="s2">"A5"</span><span class="p">,</span> <span class="s2">"A6"</span><span class="p">,</span> <span class="s2">"A7"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B4"</span><span class="p">,</span> <span class="s2">"B5"</span><span class="p">,</span> <span class="s2">"B6"</span><span class="p">,</span> <span class="s2">"B7"</span><span class="p">],</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C4"</span><span class="p">,</span> <span class="s2">"C5"</span><span class="p">,</span> <span class="s2">"C6"</span><span class="p">,</span> <span class="s2">"C7"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D4"</span><span class="p">,</span> <span class="s2">"D5"</span><span class="p">,</span> <span class="s2">"D6"</span><span class="p">,</span> <span class="s2">"D7"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe3</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A8"</span><span class="p">,</span> <span class="s2">"A9"</span><span class="p">,</span> <span class="s2">"A10"</span><span class="p">,</span> <span class="s2">"A11"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B8"</span><span class="p">,</span> <span class="s2">"B9"</span><span class="p">,</span> <span class="s2">"B10"</span><span class="p">,</span> <span class="s2">"B11"</span><span class="p">],</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C8"</span><span class="p">,</span> <span class="s2">"C9"</span><span class="p">,</span> <span class="s2">"C10"</span><span class="p">,</span> <span class="s2">"C11"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D8"</span><span class="p">,</span> <span class="s2">"D9"</span><span class="p">,</span> <span class="s2">"D10"</span><span class="p">,</span> <span class="s2">"D11"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe1</span><span class="p">,</span> <span class="n">dataframe2</span><span class="p">,</span> <span class="n">dataframe3</span><span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe3:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe3</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '    A   B   C   D',
          '0  A0  B0  C0  D0',
          '1  A1  B1  C1  D1',
          '2  A2  B2  C2  D2',
          '3  A3  B3  C3  D3',
          'dataframe2:',
          '    A   B   C   D',
          '0  A4  B4  C4  D4',
          '1  A5  B5  C5  D5',
          '2  A6  B6  C6  D6',
          '3  A7  B7  C7  D7',
          'dataframe3:',
          '     A    B    C    D',
          '0   A8   B8   C8   D8',
          '1   A9   B9   C9   D9',
          '2  A10  B10  C10  D10',
          '3  A11  B11  C11  D11',
          'dataframe:',
          '     A    B    C    D',
          '0   A0   B0   C0   D0',
          '1   A1   B1   C1   D1',
          '2   A2   B2   C2   D2',
          '3   A3   B3   C3   D3',
          '0   A4   B4   C4   D4',
          '1   A5   B5   C5   D5',
          '2   A6   B6   C6   D6',
          '3   A7   B7   C7   D7',
          '0   A8   B8   C8   D8',
          '1   A9   B9   C9   D9',
          '2  A10  B10  C10  D10',
          '3  A11  B11  C11  D11',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As can be seen, the indices <code>0</code>, <code>1</code>, <code>2</code>, and <code>3</code> are repeated because each dataframe has those indices. To prevent this, you should use the parameter <code>ignore_index=True</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe1</span><span class="p">,</span> <span class="n">dataframe2</span><span class="p">,</span> <span class="n">dataframe3</span><span class="p">],</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe3:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe3</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '    A   B   C   D',
          '0  A0  B0  C0  D0',
          '1  A1  B1  C1  D1',
          '2  A2  B2  C2  D2',
          '3  A3  B3  C3  D3',
          'dataframe2:',
          '    A   B   C   D',
          '0  A4  B4  C4  D4',
          '1  A5  B5  C5  D5',
          '2  A6  B6  C6  D6',
          '3  A7  B7  C7  D7',
          'dataframe3:',
          '     A    B    C    D',
          '0   A8   B8   C8   D8',
          '1   A9   B9   C9   D9',
          '2  A10  B10  C10  D10',
          '3  A11  B11  C11  D11',
          'dataframe:',
          '      A    B    C    D',
          '0    A0   B0   C0   D0',
          '1    A1   B1   C1   D1',
          '2    A2   B2   C2   D2',
          '3    A3   B3   C3   D3',
          '4    A4   B4   C4   D4',
          '5    A5   B5   C5   D5',
          '6    A6   B6   C6   D6',
          '7    A7   B7   C7   D7',
          '8    A8   B8   C8   D8',
          '9    A9   B9   C9   D9',
          '10  A10  B10  C10  D10',
          '11  A11  B11  C11  D11',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="concat" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/merging_concat_basic.webp" width="370" height="375"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If the concatenation was intended to be performed along the columns, the variable <code>axis=1</code> should have been used.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe1</span><span class="p">,</span> <span class="n">dataframe2</span><span class="p">,</span> <span class="n">dataframe3</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe3:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe3</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '    A   B   C   D',
          '0  A0  B0  C0  D0',
          '1  A1  B1  C1  D1',
          '2  A2  B2  C2  D2',
          '3  A3  B3  C3  D3',
          'dataframe2:',
          '    A   B   C   D',
          '0  A4  B4  C4  D4',
          '1  A5  B5  C5  D5',
          '2  A6  B6  C6  D6',
          '3  A7  B7  C7  D7',
          'dataframe3:',
          '     A    B    C    D',
          '0   A8   B8   C8   D8',
          '1   A9   B9   C9   D9',
          '2  A10  B10  C10  D10',
          '3  A11  B11  C11  D11',
          'dataframe:',
          '    A   B   C   D   A   B   C   D    A    B    C    D',
          '0  A0  B0  C0  D0  A4  B4  C4  D4   A8   B8   C8   D8',
          '1  A1  B1  C1  D1  A5  B5  C5  D5   A9   B9   C9   D9',
          '2  A2  B2  C2  D2  A6  B6  C6  D6  A10  B10  C10  D10',
          '3  A3  B3  C3  D3  A7  B7  C7  D7  A11  B11  C11  D11',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="12.1.1.-Intersection-of-Concatenation">12.1.1. Intersection of Concatenation<a class="anchor-link" href="#12.1.1.-Intersection-of-Concatenation"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 118" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>There are two ways to perform the concatenation, either taking all the indices from the <code>DataFrame</code>s or only those that match. This is determined by the <code>join</code> variable, which accepts the values <code>'outer'</code> (default) (takes all indices) or <code>'inner'</code> (only those that match).</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's see an example of <code>'outer'</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A0"</span><span class="p">,</span> <span class="s2">"A1"</span><span class="p">,</span> <span class="s2">"A2"</span><span class="p">,</span> <span class="s2">"A3"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B0"</span><span class="p">,</span> <span class="s2">"B1"</span><span class="p">,</span> <span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">],</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C0"</span><span class="p">,</span> <span class="s2">"C1"</span><span class="p">,</span> <span class="s2">"C2"</span><span class="p">,</span> <span class="s2">"C3"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D0"</span><span class="p">,</span> <span class="s2">"D1"</span><span class="p">,</span> <span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">],</span>',
          '     <span class="p">},</span>',
          '     <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
          '',
          '<span class="n">dataframe4</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">,</span> <span class="s2">"B6"</span><span class="p">,</span> <span class="s2">"B7"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">,</span> <span class="s2">"D6"</span><span class="p">,</span> <span class="s2">"D7"</span><span class="p">],</span>',
          '        <span class="s2">"F"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"F2"</span><span class="p">,</span> <span class="s2">"F3"</span><span class="p">,</span> <span class="s2">"F6"</span><span class="p">,</span> <span class="s2">"F7"</span><span class="p">],</span>',
          '     <span class="p">},</span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">])</span>',
          '',
          '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe1</span><span class="p">,</span> <span class="n">dataframe4</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe4</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '    A   B   C   D',
          '0  A0  B0  C0  D0',
          '1  A1  B1  C1  D1',
          '2  A2  B2  C2  D2',
          '3  A3  B3  C3  D3',
          'dataframe2:',
          '    B   D   F',
          '2  B2  D2  F2',
          '3  B3  D3  F3',
          '6  B6  D6  F6',
          '7  B7  D7  F7',
          'dataframe:',
          '     A    B    C    D    B    D    F',
          '0   A0   B0   C0   D0  NaN  NaN  NaN',
          '1   A1   B1   C1   D1  NaN  NaN  NaN',
          '2   A2   B2   C2   D2   B2   D2   F2',
          '3   A3   B3   C3   D3   B3   D3   F3',
          '6  NaN  NaN  NaN  NaN   B6   D6   F6',
          '7  NaN  NaN  NaN  NaN   B7   D7   F7',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="outlier" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/merging_concat_axis1.webp" width="629" height="175"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's see an example of <code>'inner'</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe1</span><span class="p">,</span> <span class="n">dataframe4</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">join</span><span class="o">=</span><span class="s2">"inner"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe4</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '    A   B   C   D',
          '0  A0  B0  C0  D0',
          '1  A1  B1  C1  D1',
          '2  A2  B2  C2  D2',
          '3  A3  B3  C3  D3',
          'dataframe2:',
          '    B   D   F',
          '2  B2  D2  F2',
          '3  B3  D3  F3',
          '6  B6  D6  F6',
          '7  B7  D7  F7',
          'dataframe:',
          '    A   B   C   D   B   D   F',
          '2  A2  B2  C2  D2  B2  D2  F2',
          '3  A3  B3  C3  D3  B3  D3  F3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="inner" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/merging_concat_axis1_inner.webp" width="629" height="125"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="12.2.-Merge-of-DataFrames">12.2. <code>Merge</code> of DataFrames<a class="anchor-link" href="#12.2.-Merge-of-DataFrames"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 119" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We previously created a new dataframe by merging several dataframes. Now we can complete one dataframe with another using <code>merge</code>, passing the parameter <code>on</code> to specify which column should be used for the <code>merge</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"Key"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">],</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A0"</span><span class="p">,</span> <span class="s2">"A1"</span><span class="p">,</span> <span class="s2">"A2"</span><span class="p">,</span> <span class="s2">"A3"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B0"</span><span class="p">,</span> <span class="s2">"B1"</span><span class="p">,</span> <span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"Key"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">],</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C0"</span><span class="p">,</span> <span class="s2">"C1"</span><span class="p">,</span> <span class="s2">"C2"</span><span class="p">,</span> <span class="s2">"C3"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D0"</span><span class="p">,</span> <span class="s2">"D1"</span><span class="p">,</span> <span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="s2">"Key"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '  Key   A   B',
          '0  K0  A0  B0',
          '1  K1  A1  B1',
          '2  K2  A2  B2',
          '3  K3  A3  B3',
          'dataframe2:',
          '  Key   C   D',
          '0  K0  C0  D0',
          '1  K1  C1  D1',
          '2  K2  C2  D2',
          '3  K3  C3  D3',
          'dataframe:',
          '  Key   A   B   C   D',
          '0  K0  A0  B0  C0  D0',
          '1  K1  A1  B1  C1  D1',
          '2  K2  A2  B2  C2  D2',
          '3  K3  A3  B3  C3  D3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In this case, both dataframes had a key with the same name (<code>Key</code>), but if we have dataframes where their keys are named differently, we can use the <code>left_on</code> and <code>right_on</code> parameters.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"Key1"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">],</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A0"</span><span class="p">,</span> <span class="s2">"A1"</span><span class="p">,</span> <span class="s2">"A2"</span><span class="p">,</span> <span class="s2">"A3"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B0"</span><span class="p">,</span> <span class="s2">"B1"</span><span class="p">,</span> <span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"Key2"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">],</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C0"</span><span class="p">,</span> <span class="s2">"C1"</span><span class="p">,</span> <span class="s2">"C2"</span><span class="p">,</span> <span class="s2">"C3"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D0"</span><span class="p">,</span> <span class="s2">"D1"</span><span class="p">,</span> <span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">"Key1"</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">"Key2"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '  Key1   A   B',
          '0   K0  A0  B0',
          '1   K1  A1  B1',
          '2   K2  A2  B2',
          '3   K3  A3  B3',
          'dataframe2:',
          '  Key2   C   D',
          '0   K0  C0  D0',
          '1   K1  C1  D1',
          '2   K2  C2  D2',
          '3   K3  C3  D3',
          'dataframe:',
          '  Key1   A   B Key2   C   D',
          '0   K0  A0  B0   K0  C0  D0',
          '1   K1  A1  B1   K1  C1  D1',
          '2   K2  A2  B2   K2  C2  D2',
          '3   K3  A3  B3   K3  C3  D3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In the case where one of the keys does not match, the <code>merge</code> will not be performed on that key.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"Key1"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">],</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A0"</span><span class="p">,</span> <span class="s2">"A1"</span><span class="p">,</span> <span class="s2">"A2"</span><span class="p">,</span> <span class="s2">"A3"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B0"</span><span class="p">,</span> <span class="s2">"B1"</span><span class="p">,</span> <span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"Key2"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">],</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C0"</span><span class="p">,</span> <span class="s2">"C1"</span><span class="p">,</span> <span class="s2">"C2"</span><span class="p">,</span> <span class="s2">"C3"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D0"</span><span class="p">,</span> <span class="s2">"D1"</span><span class="p">,</span> <span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">"Key1"</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">"Key2"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '  Key1   A   B',
          '0   K0  A0  B0',
          '1   K1  A1  B1',
          '2   K2  A2  B2',
          '3   K3  A3  B3',
          'dataframe2:',
          '  Key2   C   D',
          '0   K0  C0  D0',
          '1   K1  C1  D1',
          '2   K2  C2  D2',
          '3  NaN  C3  D3',
          'dataframe:',
          '  Key1   A   B Key2   C   D',
          '0   K0  A0  B0   K0  C0  D0',
          '1   K1  A1  B1   K1  C1  D1',
          '2   K2  A2  B2   K2  C2  D2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>To change this behavior, we can use the <code>how</code> parameter, which by default has the value <code>inner</code>, but we can pass it the values <code>left</code>, <code>right</code>, and <code>outer</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"Key1"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">],</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A0"</span><span class="p">,</span> <span class="s2">"A1"</span><span class="p">,</span> <span class="s2">"A2"</span><span class="p">,</span> <span class="s2">"A3"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B0"</span><span class="p">,</span> <span class="s2">"B1"</span><span class="p">,</span> <span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"Key2"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">],</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C0"</span><span class="p">,</span> <span class="s2">"C1"</span><span class="p">,</span> <span class="s2">"C2"</span><span class="p">,</span> <span class="s2">"C3"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D0"</span><span class="p">,</span> <span class="s2">"D1"</span><span class="p">,</span> <span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe_inner</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">"Key1"</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">"Key2"</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">"inner"</span><span class="p">)</span>',
          '<span class="n">dataframe_left</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">"Key1"</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">"Key2"</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">"left"</span><span class="p">)</span>',
          '<span class="n">dataframe_right</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">"Key1"</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">"Key2"</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">"right"</span><span class="p">)</span>',
          '<span class="n">dataframe_outer</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">"Key1"</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">"Key2"</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">"outer"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe inner:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe_inner</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe left:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe_left</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe right:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe_right</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe outer:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe_outer</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '  Key1   A   B',
          '0   K0  A0  B0',
          '1   K1  A1  B1',
          '2   K2  A2  B2',
          '3   K3  A3  B3',
          'dataframe2:',
          '  Key2   C   D',
          '0   K0  C0  D0',
          '1   K1  C1  D1',
          '2   K2  C2  D2',
          '3  NaN  C3  D3',
          'dataframe inner:',
          '  Key1   A   B Key2   C   D',
          '0   K0  A0  B0   K0  C0  D0',
          '1   K1  A1  B1   K1  C1  D1',
          '2   K2  A2  B2   K2  C2  D2',
          'dataframe left:',
          '  Key1   A   B Key2    C    D',
          '0   K0  A0  B0   K0   C0   D0',
          '1   K1  A1  B1   K1   C1   D1',
          '2   K2  A2  B2   K2   C2   D2',
          '3   K3  A3  B3  NaN  NaN  NaN',
          'dataframe right:',
          '  Key1    A    B Key2   C   D',
          '0   K0   A0   B0   K0  C0  D0',
          '1   K1   A1   B1   K1  C1  D1',
          '2   K2   A2   B2   K2  C2  D2',
          '3  NaN  NaN  NaN  NaN  C3  D3',
          'dataframe outer:',
          '  Key1    A    B Key2    C    D',
          '0   K0   A0   B0   K0   C0   D0',
          '1   K1   A1   B1   K1   C1   D1',
          '2   K2   A2   B2   K2   C2   D2',
          '3   K3   A3   B3  NaN  NaN  NaN',
          '4  NaN  NaN  NaN  NaN   C3   D3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As can be seen, when <code>left</code> is chosen, only the values from the left dataframe are added, and when <code>right</code> is chosen, the values from the right dataframe are added.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="12.3.-Join-of-dataframes">12.3. <code>Join</code> of dataframes<a class="anchor-link" href="#12.3.-Join-of-dataframes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 120" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The last tool for joining dataframes is <code>join</code>. It is similar to <code>merge</code>, except that instead of looking for similarities based on specified columns, it looks for them based on the indices.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A0"</span><span class="p">,</span> <span class="s2">"A1"</span><span class="p">,</span> <span class="s2">"A2"</span><span class="p">,</span> <span class="s2">"A3"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B0"</span><span class="p">,</span> <span class="s2">"B1"</span><span class="p">,</span> <span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">],</span>',
          '     <span class="p">},</span>',
          '     <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">])</span>',
          '',
          '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C0"</span><span class="p">,</span> <span class="s2">"C1"</span><span class="p">,</span> <span class="s2">"C2"</span><span class="p">,</span> <span class="s2">"C3"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D0"</span><span class="p">,</span> <span class="s2">"D1"</span><span class="p">,</span> <span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">],</span>',
          '     <span class="p">},</span>',
          '        <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">])</span>',
          '',
          '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '     A   B',
          'K0  A0  B0',
          'K1  A1  B1',
          'K2  A2  B2',
          'K3  A3  B3',
          'dataframe2:',
          '     C   D',
          'K0  C0  D0',
          'K1  C1  D1',
          'K2  C2  D2',
          'K3  C3  D3',
          'dataframe:',
          '     A   B   C   D',
          'K0  A0  B0  C0  D0',
          'K1  A1  B1  C1  D1',
          'K2  A2  B2  C2  D2',
          'K3  A3  B3  C3  D3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In this case, the indices are the same, but when they are different we can specify how to join the dataframes using the <code>how</code> parameter, which by default has the value <code>inner</code>, but can also have the values <code>left</code>, <code>right</code>, or <code>outer</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A0"</span><span class="p">,</span> <span class="s2">"A1"</span><span class="p">,</span> <span class="s2">"A2"</span><span class="p">,</span> <span class="s2">"A3"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B0"</span><span class="p">,</span> <span class="s2">"B1"</span><span class="p">,</span> <span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">],</span>',
          '     <span class="p">},</span>',
          '     <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">])</span>',
          '',
          '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C0"</span><span class="p">,</span> <span class="s2">"C2"</span><span class="p">,</span> <span class="s2">"C3"</span><span class="p">,</span> <span class="s2">"C4"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D0"</span><span class="p">,</span> <span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">,</span> <span class="s2">"D4"</span><span class="p">],</span>',
          '     <span class="p">},</span>',
          '        <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">,</span> <span class="s2">"K4"</span><span class="p">])</span>',
          '',
          '<span class="n">dataframe_inner</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">"inner"</span><span class="p">)</span>',
          '<span class="n">dataframe_left</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">"left"</span><span class="p">)</span>',
          '<span class="n">dataframe_right</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">"right"</span><span class="p">)</span>',
          '<span class="n">dataframe_outer</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">"outer"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe inner:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe_inner</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe left:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe_left</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe rigth:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe_right</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe outer:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe_outer</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '     A   B',
          'K0  A0  B0',
          'K1  A1  B1',
          'K2  A2  B2',
          'K3  A3  B3',
          'dataframe2:',
          '     C   D',
          'K0  C0  D0',
          'K2  C2  D2',
          'K3  C3  D3',
          'K4  C4  D4',
          'dataframe:',
          '     A   B   C   D',
          'K0  A0  B0  C0  D0',
          'K2  A2  B2  C2  D2',
          'K3  A3  B3  C3  D3',
          'dataframe:',
          '     A   B    C    D',
          'K0  A0  B0   C0   D0',
          'K1  A1  B1  NaN  NaN',
          'K2  A2  B2   C2   D2',
          'K3  A3  B3   C3   D3',
          'dataframe:',
          '      A    B   C   D',
          'K0   A0   B0  C0  D0',
          'K2   A2   B2  C2  D2',
          'K3   A3   B3  C3  D3',
          'K4  NaN  NaN  C4  D4',
          'dataframe:',
          '      A    B    C    D',
          'K0   A0   B0   C0   D0',
          'K1   A1   B1  NaN  NaN',
          'K2   A2   B2   C2   D2',
          'K3   A3   B3   C3   D3',
          'K4  NaN  NaN   C4   D4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="13.-Missing-data-(NaN)">13. Missing data (<code>NaN</code>)<a class="anchor-link" href="#13.-Missing-data-(NaN)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 121" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In a <code>DataFrame</code> there can be some missing data, Pandas represents them as <code>np.nan</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="13.1.-Removal-of-Rows-with-Missing-Data">13.1. Removal of Rows with Missing Data<a class="anchor-link" href="#13.1.-Removal-of-Rows-with-Missing-Data"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 122" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To avoid having rows with missing data, these can be removed.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">how</span><span class="o">=</span><span class="s2">"any"</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="13.2.-Dropping-Columns-with-Missing-Data">13.2. Dropping Columns with Missing Data<a class="anchor-link" href="#13.2.-Dropping-Columns-with-Missing-Data"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 123" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s1">'any'</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>5.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>6.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>7.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="13.3.-Boolean-mask-with-missing-positions">13.3. Boolean mask with missing positions<a class="anchor-link" href="#13.3.-Boolean-mask-with-missing-positions"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 124" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">pd</span><span class="o">.</span><span class="n">isna</span><span class="p">(</span><span class="n">dataframe</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>False</td>
      <td>False</td>
      </tr>
      <tr>
      <th>1</th>
      <td>False</td>
      <td>False</td>
      </tr>
      <tr>
      <th>2</th>
      <td>False</td>
      <td>False</td>
      </tr>
      <tr>
      <th>3</th>
      <td>True</td>
      <td>False</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="13.4.-Filling-Missing-Data">13.4. Filling Missing Data<a class="anchor-link" href="#13.4.-Filling-Missing-Data"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 125" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="mf">5.5</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[¬†]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>5.5</td>
      <td>7.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Tip: By setting the variable <code>inplace=True</code>, the <code>DataFrame</code> being operated on is modified, so there's no need to write <code>dataframe = dataframe.fillna(value=5.5)</code></p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="14.-Time-series">14. Time series<a class="anchor-link" href="#14.-Time-series"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 126" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pandas offers the possibility of working with time series. For example, we create a <code>Series</code> of 100 random data points every second starting from 01/01/2021</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">indices</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s2">"1/1/2021"</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">freq</span><span class="o">=</span><span class="s2">"S"</span><span class="p">)</span>',
          '<span class="n">datos</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">indices</span><span class="p">))</span>',
          '',
          '<span class="n">serie_temporal</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">datos</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="n">indices</span><span class="p">)</span>',
          '<span class="n">serie_temporal</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2021-01-01 00:00:00    241',
          '2021-01-01 00:00:01     14',
          '2021-01-01 00:00:02    190',
          '2021-01-01 00:00:03    407',
          '2021-01-01 00:00:04     94',
          '                      ... ',
          '2021-01-01 00:01:35    275',
          '2021-01-01 00:01:36     56',
          '2021-01-01 00:01:37    448',
          '2021-01-01 00:01:38    151',
          '2021-01-01 00:01:39    316',
          'Freq: S, Length: 100, dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>This Pandas functionality is very powerful, for example, we can have a dataset at certain hours of one time zone and change them to another time zone.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">horas</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s2">"3/6/2021 00:00"</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">freq</span><span class="o">=</span><span class="s2">"H"</span><span class="p">)</span>',
          '<span class="n">datos</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">horas</span><span class="p">))</span>',
          '',
          '<span class="n">serie_horaria</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">datos</span><span class="p">,</span> <span class="n">horas</span><span class="p">)</span>',
          '<span class="n">serie_horaria</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2021-03-06 00:00:00   -0.853524',
          '2021-03-06 01:00:00   -1.355372',
          '2021-03-06 02:00:00   -1.267503',
          '2021-03-06 03:00:00   -1.155787',
          '2021-03-06 04:00:00    0.730935',
          '2021-03-06 05:00:00    1.435957',
          '2021-03-06 06:00:00    0.460912',
          '2021-03-06 07:00:00    0.723451',
          '2021-03-06 08:00:00   -0.853337',
          '2021-03-06 09:00:00    0.456359',
          'Freq: H, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We locate the data in a time zone</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie_horaria_utc</span> <span class="o">=</span> <span class="n">serie_horaria</span><span class="o">.</span><span class="n">tz_localize</span><span class="p">(</span><span class="s2">"UTC"</span><span class="p">)</span>',
          '<span class="n">serie_horaria_utc</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2021-03-06 00:00:00+00:00   -0.853524',
          '2021-03-06 01:00:00+00:00   -1.355372',
          '2021-03-06 02:00:00+00:00   -1.267503',
          '2021-03-06 03:00:00+00:00   -1.155787',
          '2021-03-06 04:00:00+00:00    0.730935',
          '2021-03-06 05:00:00+00:00    1.435957',
          '2021-03-06 06:00:00+00:00    0.460912',
          '2021-03-06 07:00:00+00:00    0.723451',
          '2021-03-06 08:00:00+00:00   -0.853337',
          '2021-03-06 09:00:00+00:00    0.456359',
          'Freq: H, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>And now we can change them to another use</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie_horaria_US</span> <span class="o">=</span> <span class="n">serie_horaria_utc</span><span class="o">.</span><span class="n">tz_convert</span><span class="p">(</span><span class="s2">"US/Eastern"</span><span class="p">)</span>',
          '<span class="n">serie_horaria_US</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2021-03-05 19:00:00-05:00   -0.853524',
          '2021-03-05 20:00:00-05:00   -1.355372',
          '2021-03-05 21:00:00-05:00   -1.267503',
          '2021-03-05 22:00:00-05:00   -1.155787',
          '2021-03-05 23:00:00-05:00    0.730935',
          '2021-03-06 00:00:00-05:00    1.435957',
          '2021-03-06 01:00:00-05:00    0.460912',
          '2021-03-06 02:00:00-05:00    0.723451',
          '2021-03-06 03:00:00-05:00   -0.853337',
          '2021-03-06 04:00:00-05:00    0.456359',
          'Freq: H, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="15.-Categorical-Data">15. Categorical Data<a class="anchor-link" href="#15.-Categorical-Data"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 127" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pandas offers the possibility of adding categorical data in a <code>DataFrame</code>. Suppose the following <code>DataFrame</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
          <span class="p">{opening_brace}</span><span class="s2">"id"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="s2">"raw_grade"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">,</span> <span class="s2">"e"</span><span class="p">]{closing_brace}</span>
      <span class="p">)</span>
      
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[2]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>raw_grade</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1</td>
      <td>a</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2</td>
      <td>b</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3</td>
      <td>b</td>
      </tr>
      <tr>
      <th>3</th>
      <td>4</td>
      <td>a</td>
      </tr>
      <tr>
      <th>4</th>
      <td>5</td>
      <td>a</td>
      </tr>
      <tr>
      <th>5</th>
      <td>6</td>
      <td>e</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can convert the data in the <code>raw_grade</code> column to categorical data using the <code>astype()</code> method.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span><span class="s1">'grade'</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"raw_grade"</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s2">"category"</span><span class="p">)</span>
      
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[3]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>raw_grade</th>
      <th>grade</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1</td>
      <td>a</td>
      <td>a</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2</td>
      <td>b</td>
      <td>b</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3</td>
      <td>b</td>
      <td>b</td>
      </tr>
      <tr>
      <th>3</th>
      <td>4</td>
      <td>a</td>
      <td>a</td>
      </tr>
      <tr>
      <th>4</th>
      <td>5</td>
      <td>a</td>
      <td>a</td>
      </tr>
      <tr>
      <th>5</th>
      <td>6</td>
      <td>e</td>
      <td>e</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The columns <code>raw_grade</code> and <code>grade</code> seem identical, but if we look at the information of the <code>DataFrame</code> we can see that this is not the case.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">info</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;class \'pandas.core.frame.DataFrame\'&gt;',
          'RangeIndex: 6 entries, 0 to 5',
          'Data columns (total 3 columns):',
          ' #   Column     Non-Null Count  Dtype   ',
          '---  ------     --------------  -----   ',
          ' 0   id         6 non-null      int64   ',
          ' 1   raw_grade  6 non-null      object  ',
          ' 2   grade      6 non-null      category',
          'dtypes: category(1), int64(1), object(1)',
          'memory usage: 334.0+ bytes',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>It can be seen that the column <code>grade</code> is of categorical type</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can see the categories of categorical data types through the method <code>cat.categories()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span><span class="p">[</span><span class="s2">"grade"</span><span class="p">]</span><span class="o">.</span><span class="n">cat</span><span class="o">.</span><span class="n">categories</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Index([\'a\', \'b\', \'e\'], dtype=\'object\')',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can also rename the categories using the same method, but by providing a list with the new categories.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span><span class="s2">"grade"</span><span class="p">]</span><span class="o">.</span><span class="n">cat</span><span class="o">.</span><span class="n">categories</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"very good"</span><span class="p">,</span> <span class="s2">"good"</span><span class="p">,</span> <span class="s2">"very bad"</span><span class="p">]</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[7]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>raw_grade</th>
      <th>grade</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1</td>
      <td>a</td>
      <td>very good</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2</td>
      <td>b</td>
      <td>good</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3</td>
      <td>b</td>
      <td>good</td>
      </tr>
      <tr>
      <th>3</th>
      <td>4</td>
      <td>a</td>
      <td>very good</td>
      </tr>
      <tr>
      <th>4</th>
      <td>5</td>
      <td>a</td>
      <td>very good</td>
      </tr>
      <tr>
      <th>5</th>
      <td>6</td>
      <td>e</td>
      <td>very bad</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pandas gives us the possibility to numerically encode categorical data using the <code>get_dummies</code> method.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">pd</span><span class="o">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">dataframe</span><span class="p">[</span><span class="s2">"grade"</span><span class="p">])</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[8]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>very good</th>
      <th>good</th>
      <th>very bad</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      </tr>
      <tr>
      <th>5</th>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="16.-Groupby">16. Groupby<a class="anchor-link" href="#16.-Groupby"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 128" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can group the dataframes by values from one of the columns. Let's reload the dataframe with the value of houses in California.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv"</span><span class="p">)</span>
      <span class="n">california_housing_train</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[43]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>-114.31</td>
      <td>34.19</td>
      <td>15.0</td>
      <td>5612.0</td>
      <td>1283.0</td>
      <td>1015.0</td>
      <td>472.0</td>
      <td>1.4936</td>
      <td>66900.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>-114.47</td>
      <td>34.40</td>
      <td>19.0</td>
      <td>7650.0</td>
      <td>1901.0</td>
      <td>1129.0</td>
      <td>463.0</td>
      <td>1.8200</td>
      <td>80100.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>-114.56</td>
      <td>33.69</td>
      <td>17.0</td>
      <td>720.0</td>
      <td>174.0</td>
      <td>333.0</td>
      <td>117.0</td>
      <td>1.6509</td>
      <td>85700.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>-114.57</td>
      <td>33.64</td>
      <td>14.0</td>
      <td>1501.0</td>
      <td>337.0</td>
      <td>515.0</td>
      <td>226.0</td>
      <td>3.1917</td>
      <td>73400.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>-114.57</td>
      <td>33.57</td>
      <td>20.0</td>
      <td>1454.0</td>
      <td>326.0</td>
      <td>624.0</td>
      <td>262.0</td>
      <td>1.9250</td>
      <td>65500.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Now we can group the data by one of the columns, for example, let's group the houses based on the number of years and see how many houses there are of each age with <code>count</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">"housing_median_age"</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">()</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[8]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      <tr>
      <th>housing_median_age</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>1.0</th>
      <td>2</td>
      <td>2</td>
      <td>2</td>
      <td>2</td>
      <td>2</td>
      <td>2</td>
      <td>2</td>
      <td>2</td>
      </tr>
      <tr>
      <th>2.0</th>
      <td>49</td>
      <td>49</td>
      <td>49</td>
      <td>49</td>
      <td>49</td>
      <td>49</td>
      <td>49</td>
      <td>49</td>
      </tr>
      <tr>
      <th>3.0</th>
      <td>46</td>
      <td>46</td>
      <td>46</td>
      <td>46</td>
      <td>46</td>
      <td>46</td>
      <td>46</td>
      <td>46</td>
      </tr>
      <tr>
      <th>4.0</th>
      <td>161</td>
      <td>161</td>
      <td>161</td>
      <td>161</td>
      <td>161</td>
      <td>161</td>
      <td>161</td>
      <td>161</td>
      </tr>
      <tr>
      <th>5.0</th>
      <td>199</td>
      <td>199</td>
      <td>199</td>
      <td>199</td>
      <td>199</td>
      <td>199</td>
      <td>199</td>
      <td>199</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we can see in all the columns, we get the same value, which is the number of houses that have a certain age, but we can find out the average value of each column with <code>mean</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">"housing_median_age"</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[9]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      <tr>
      <th>housing_median_age</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>1.0</th>
      <td>-121.465000</td>
      <td>37.940000</td>
      <td>2158.000000</td>
      <td>335.500000</td>
      <td>637.000000</td>
      <td>190.000000</td>
      <td>4.756800</td>
      <td>190250.000000</td>
      </tr>
      <tr>
      <th>2.0</th>
      <td>-119.035306</td>
      <td>35.410816</td>
      <td>5237.102041</td>
      <td>871.448980</td>
      <td>2005.224490</td>
      <td>707.122449</td>
      <td>5.074237</td>
      <td>229438.836735</td>
      </tr>
      <tr>
      <th>3.0</th>
      <td>-118.798478</td>
      <td>35.164783</td>
      <td>6920.326087</td>
      <td>1190.826087</td>
      <td>2934.673913</td>
      <td>1030.413043</td>
      <td>5.572013</td>
      <td>239450.043478</td>
      </tr>
      <tr>
      <th>4.0</th>
      <td>-118.805093</td>
      <td>34.987764</td>
      <td>6065.614907</td>
      <td>1068.192547</td>
      <td>2739.956522</td>
      <td>964.291925</td>
      <td>5.196055</td>
      <td>230054.105590</td>
      </tr>
      <tr>
      <th>5.0</th>
      <td>-118.789497</td>
      <td>35.095327</td>
      <td>4926.261307</td>
      <td>910.924623</td>
      <td>2456.979899</td>
      <td>826.768844</td>
      <td>4.732460</td>
      <td>211035.708543</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can obtain several measures for each age using the <code>agg</code> (aggregation) command, passing it the measures we want through a list. For example, let's look at the minimum, maximum, and mean of each column for each age:</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">"housing_median_age"</span><span class="p">)</span><span class="o">.</span><span class="n">agg</span><span class="p">([</span><span class="s1">'min'</span><span class="p">,</span> <span class="s1">'max'</span><span class="p">,</span> <span class="s1">'mean'</span><span class="p">])</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[10]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead tr th {
              text-align: left;
          }
      
          .dataframe thead tr:last-of-type th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr>
      <th></th>
      <th colspan="3" halign="left">longitude</th>
      <th colspan="3" halign="left">latitude</th>
      <th colspan="3" halign="left">total_rooms</th>
      <th>total_bedrooms</th>
      <th>...</th>
      <th>population</th>
      <th colspan="3" halign="left">households</th>
      <th colspan="3" halign="left">median_income</th>
      <th colspan="3" halign="left">median_house_value</th>
      </tr>
      <tr>
      <th></th>
      <th>min</th>
      <th>max</th>
      <th>mean</th>
      <th>min</th>
      <th>max</th>
      <th>mean</th>
      <th>min</th>
      <th>max</th>
      <th>mean</th>
      <th>min</th>
      <th>...</th>
      <th>mean</th>
      <th>min</th>
      <th>max</th>
      <th>mean</th>
      <th>min</th>
      <th>max</th>
      <th>mean</th>
      <th>min</th>
      <th>max</th>
      <th>mean</th>
      </tr>
      <tr>
      <th>housing_median_age</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>1.0</th>
      <td>-122.00</td>
      <td>-120.93</td>
      <td>-121.465000</td>
      <td>37.65</td>
      <td>38.23</td>
      <td>37.940000</td>
      <td>2062.0</td>
      <td>2254.0</td>
      <td>2158.000000</td>
      <td>328.0</td>
      <td>...</td>
      <td>637.000000</td>
      <td>112.0</td>
      <td>268.0</td>
      <td>190.000000</td>
      <td>4.2500</td>
      <td>5.2636</td>
      <td>4.756800</td>
      <td>189200.0</td>
      <td>191300.0</td>
      <td>190250.000000</td>
      </tr>
      <tr>
      <th>2.0</th>
      <td>-122.51</td>
      <td>-115.80</td>
      <td>-119.035306</td>
      <td>33.16</td>
      <td>40.58</td>
      <td>35.410816</td>
      <td>96.0</td>
      <td>21897.0</td>
      <td>5237.102041</td>
      <td>18.0</td>
      <td>...</td>
      <td>2005.224490</td>
      <td>16.0</td>
      <td>2873.0</td>
      <td>707.122449</td>
      <td>1.9667</td>
      <td>10.1531</td>
      <td>5.074237</td>
      <td>47500.0</td>
      <td>500001.0</td>
      <td>229438.836735</td>
      </tr>
      <tr>
      <th>3.0</th>
      <td>-122.33</td>
      <td>-115.60</td>
      <td>-118.798478</td>
      <td>32.87</td>
      <td>38.77</td>
      <td>35.164783</td>
      <td>475.0</td>
      <td>21060.0</td>
      <td>6920.326087</td>
      <td>115.0</td>
      <td>...</td>
      <td>2934.673913</td>
      <td>123.0</td>
      <td>3112.0</td>
      <td>1030.413043</td>
      <td>2.1187</td>
      <td>11.5199</td>
      <td>5.572013</td>
      <td>83200.0</td>
      <td>500001.0</td>
      <td>239450.043478</td>
      </tr>
      <tr>
      <th>4.0</th>
      <td>-122.72</td>
      <td>-116.76</td>
      <td>-118.805093</td>
      <td>32.65</td>
      <td>39.00</td>
      <td>34.987764</td>
      <td>2.0</td>
      <td>37937.0</td>
      <td>6065.614907</td>
      <td>2.0</td>
      <td>...</td>
      <td>2739.956522</td>
      <td>2.0</td>
      <td>5189.0</td>
      <td>964.291925</td>
      <td>0.5360</td>
      <td>13.4883</td>
      <td>5.196055</td>
      <td>42500.0</td>
      <td>500001.0</td>
      <td>230054.105590</td>
      </tr>
      <tr>
      <th>5.0</th>
      <td>-122.55</td>
      <td>-115.55</td>
      <td>-118.789497</td>
      <td>32.55</td>
      <td>40.60</td>
      <td>35.095327</td>
      <td>111.0</td>
      <td>25187.0</td>
      <td>4926.261307</td>
      <td>21.0</td>
      <td>...</td>
      <td>2456.979899</td>
      <td>20.0</td>
      <td>3886.0</td>
      <td>826.768844</td>
      <td>0.7526</td>
      <td>12.6320</td>
      <td>4.732460</td>
      <td>50000.0</td>
      <td>500001.0</td>
      <td>211035.708543</td>
      </tr>
      </tbody>
      </table>
      <p>5 rows √ó 24 columns</p>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can specify on which columns we want to perform certain calculations by passing a dictionary, where the keys will be the columns on which we want to perform calculations and the values will be lists with the calculations.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">"housing_median_age"</span><span class="p">)</span><span class="o">.</span><span class="n">agg</span><span class="p">({opening_brace}</span><span class="s1">'total_rooms'</span><span class="p">:</span> <span class="p">[</span><span class="s1">'min'</span><span class="p">,</span> <span class="s1">'max'</span><span class="p">,</span> <span class="s1">'mean'</span><span class="p">],</span> <span class="s1">'total_bedrooms'</span><span class="p">:</span> <span class="p">[</span><span class="s1">'min'</span><span class="p">,</span> <span class="s1">'max'</span><span class="p">,</span> <span class="s1">'mean'</span><span class="p">,</span> <span class="s1">'median'</span><span class="p">]{closing_brace})</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[12]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead tr th {
              text-align: left;
          }
      
          .dataframe thead tr:last-of-type th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr>
      <th></th>
      <th colspan="3" halign="left">total_rooms</th>
      <th colspan="4" halign="left">total_bedrooms</th>
      </tr>
      <tr>
      <th></th>
      <th>min</th>
      <th>max</th>
      <th>mean</th>
      <th>min</th>
      <th>max</th>
      <th>mean</th>
      <th>median</th>
      </tr>
      <tr>
      <th>housing_median_age</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>1.0</th>
      <td>2062.0</td>
      <td>2254.0</td>
      <td>2158.000000</td>
      <td>328.0</td>
      <td>343.0</td>
      <td>335.500000</td>
      <td>335.5</td>
      </tr>
      <tr>
      <th>2.0</th>
      <td>96.0</td>
      <td>21897.0</td>
      <td>5237.102041</td>
      <td>18.0</td>
      <td>3513.0</td>
      <td>871.448980</td>
      <td>707.0</td>
      </tr>
      <tr>
      <th>3.0</th>
      <td>475.0</td>
      <td>21060.0</td>
      <td>6920.326087</td>
      <td>115.0</td>
      <td>3559.0</td>
      <td>1190.826087</td>
      <td>954.0</td>
      </tr>
      <tr>
      <th>4.0</th>
      <td>2.0</td>
      <td>37937.0</td>
      <td>6065.614907</td>
      <td>2.0</td>
      <td>5471.0</td>
      <td>1068.192547</td>
      <td>778.0</td>
      </tr>
      <tr>
      <th>5.0</th>
      <td>111.0</td>
      <td>25187.0</td>
      <td>4926.261307</td>
      <td>21.0</td>
      <td>4386.0</td>
      <td>910.924623</td>
      <td>715.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can group by more than one column, for this, we have to pass the columns in a list</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s2">"housing_median_age"</span><span class="p">,</span> <span class="s2">"total_bedrooms"</span><span class="p">])</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[16]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>total_rooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      <tr>
      <th>housing_median_age</th>
      <th>total_bedrooms</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th rowspan="2" valign="top">1.0</th>
      <th>328.0</th>
      <td>-120.93</td>
      <td>37.65</td>
      <td>2254.0</td>
      <td>402.0</td>
      <td>112.0</td>
      <td>4.2500</td>
      <td>189200.0</td>
      </tr>
      <tr>
      <th>343.0</th>
      <td>-122.00</td>
      <td>38.23</td>
      <td>2062.0</td>
      <td>872.0</td>
      <td>268.0</td>
      <td>5.2636</td>
      <td>191300.0</td>
      </tr>
      <tr>
      <th rowspan="3" valign="top">2.0</th>
      <th>18.0</th>
      <td>-115.80</td>
      <td>33.26</td>
      <td>96.0</td>
      <td>30.0</td>
      <td>16.0</td>
      <td>5.3374</td>
      <td>47500.0</td>
      </tr>
      <tr>
      <th>35.0</th>
      <td>-121.93</td>
      <td>37.78</td>
      <td>227.0</td>
      <td>114.0</td>
      <td>49.0</td>
      <td>3.1591</td>
      <td>434700.0</td>
      </tr>
      <tr>
      <th>55.0</th>
      <td>-117.27</td>
      <td>33.93</td>
      <td>337.0</td>
      <td>115.0</td>
      <td>49.0</td>
      <td>3.1042</td>
      <td>164800.0</td>
      </tr>
      <tr>
      <th>...</th>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      </tr>
      <tr>
      <th rowspan="5" valign="top">52.0</th>
      <th>1360.0</th>
      <td>-118.35</td>
      <td>34.06</td>
      <td>3446.0</td>
      <td>1768.0</td>
      <td>1245.0</td>
      <td>2.4722</td>
      <td>500001.0</td>
      </tr>
      <tr>
      <th>1535.0</th>
      <td>-122.41</td>
      <td>37.80</td>
      <td>3260.0</td>
      <td>3260.0</td>
      <td>1457.0</td>
      <td>0.9000</td>
      <td>500001.0</td>
      </tr>
      <tr>
      <th>1944.0</th>
      <td>-118.25</td>
      <td>34.05</td>
      <td>2806.0</td>
      <td>2232.0</td>
      <td>1605.0</td>
      <td>0.6775</td>
      <td>350000.0</td>
      </tr>
      <tr>
      <th>2509.0</th>
      <td>-122.41</td>
      <td>37.79</td>
      <td>6016.0</td>
      <td>3436.0</td>
      <td>2119.0</td>
      <td>2.5166</td>
      <td>275000.0</td>
      </tr>
      <tr>
      <th>2747.0</th>
      <td>-122.41</td>
      <td>37.79</td>
      <td>5783.0</td>
      <td>4518.0</td>
      <td>2538.0</td>
      <td>1.7240</td>
      <td>225000.0</td>
      </tr>
      </tbody>
      </table>
      <p>13394 rows √ó 7 columns</p>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="17.-Graphics">17. Graphics<a class="anchor-link" href="#17.-Graphics"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 129" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pandas offers the possibility of representing the data in our <code>DataFrame</code>s in charts to obtain a better representation of it. For this, it uses the <code>matplotlib</code> library, which we will cover in the next post.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.1.-Basic-Graph">17.1. Basic Graph<a class="anchor-link" href="#17.1.-Basic-Graph"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 130" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To represent the data in a chart, the easiest way is to use the <code>plot()</code> method.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s2">"1/1/2000"</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">1000</span><span class="p">))</span>
      <span class="n">serie</span> <span class="o">=</span> <span class="n">serie</span><span class="o">.</span><span class="n">cumsum</span><span class="p">()</span>
      
      <span class="n">serie</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[13]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc5666b9990&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas0.webp" width="377" height="260" alt="image pandas 1" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In the case of having a <code>DataFrame</code>, the <code>plot()</code> method will represent each of the columns of the <code>DataFrame</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
          <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">ts</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"B"</span><span class="p">,</span> <span class="s2">"C"</span><span class="p">,</span> <span class="s2">"D"</span><span class="p">]</span>
      <span class="p">)</span>
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">cumsum</span><span class="p">()</span>
      
      <span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[15]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc5663ce610&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas1.webp" width="377" height="260" alt="image pandas 2" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.2.-Vertical-Bar-Chart">17.2. Vertical Bar Chart<a class="anchor-link" href="#17.2.-Vertical-Bar-Chart"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 131" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>There are more methods to create charts, such as the vertical bar chart using <code>plot.bar()</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">])</span>
      <span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">bar</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas2.webp" width="372" height="245" alt="image pandas 3" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we want to stack the bars, we indicate this through the variable <code>stacked=True</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">stacked</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[20]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc56265c5d0&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas3.webp" width="372" height="245" alt="image pandas 4" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.3.-Horizontal-Bar-Chart">17.3. Horizontal Bar Chart<a class="anchor-link" href="#17.3.-Horizontal-Bar-Chart"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 132" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To create a horizontal bar chart we use <code>plot.barh()</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">barh</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[21]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc56247fa10&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas4.webp" width="362" height="248" alt="image pandas 5" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we want to stack the bars, we indicate this through the variable <code>stacked=True</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">barh</span><span class="p">(</span><span class="n">stacked</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[22]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc562d1d2d0&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas5.webp" width="362" height="248" alt="image pandas 6" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.4.-Histogram">17.4. Histogram<a class="anchor-link" href="#17.4.-Histogram"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 133" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To create a histogram we use <code>plot.hist()</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
          <span class="p">{opening_brace}</span>
              <span class="s2">"a"</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
              <span class="s2">"b"</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span>
              <span class="s2">"c"</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span>
          <span class="p">{closing_brace}</span>
      <span class="p">)</span>
      
      <span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[28]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc5650711d0&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas6.webp" width="389" height="248" alt="image pandas 7" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we want to stack the bars, we indicate this through the variable <code>stacked=True</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">stacked</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[29]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc5625779d0&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas7.webp" width="389" height="248" alt="image pandas 8" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we want to add more columns, that is, if we want the histogram to be more informative or accurate, we indicate this through the <code>bins</code> variable.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">stacked</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[30]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc562324990&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas8.webp" width="389" height="248" alt="image pandas 9" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.5.-Candlestick-Diagrams">17.5. Candlestick Diagrams<a class="anchor-link" href="#17.5.-Candlestick-Diagrams"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 134" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To create a candlestick chart we use <code>plot.box()</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"B"</span><span class="p">,</span> <span class="s2">"C"</span><span class="p">,</span> <span class="s2">"D"</span><span class="p">,</span> <span class="s2">"E"</span><span class="p">])</span>
      
      <span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">box</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[34]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc56201a410&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas9.webp" width="372" height="248" alt="image pandas 10" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.6.-Area-Charts">17.6. Area Charts<a class="anchor-link" href="#17.6.-Area-Charts"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 135" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To create an area chart we use <code>plot.area()</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">area</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[36]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc561e9ca50&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas10.webp" width="372" height="248" alt="image pandas 11" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.7.-Scatter-plot">17.7. Scatter plot<a class="anchor-link" href="#17.7.-Scatter-plot"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 136" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To create a scatter plot we use <code>plot.scatter()</code>, where you need to specify the <code>x</code> and <code>y</code> variables of the plot.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">'A'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">'B'</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[38]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc561e2ff10&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas11.webp" width="386" height="262" alt="image pandas 12" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.8.-Hexagonal-Container-Plot">17.8. Hexagonal Container Plot<a class="anchor-link" href="#17.8.-Hexagonal-Container-Plot"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 137" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To create a hexagonal bin plot we use <code>plot.hexbin()</code>, where you need to specify the <code>x</code> and <code>y</code> variables of the plot and the mesh size using <code>gridsize</code>.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">])</span>
      <span class="n">dataframe</span><span class="p">[</span><span class="s2">"b"</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"b"</span><span class="p">]</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
      
      <span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hexbin</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s2">"a"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s2">"b"</span><span class="p">,</span> <span class="n">gridsize</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[40]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc561cdded0&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas12.webp" width="369" height="241" alt="image pandas 13" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      






    </div>

  </section>

</PostLayout>
