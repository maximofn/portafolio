---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Introduction to Python';
const end_url = 'python';
const description = 'Python üêç is one of the most used programming languages üíª. Enter and learn everything you need about Python üêç';
const keywords = 'python, introduction, tutorial, basic, beginners';
const languaje = 'EN';
const image_path = '/images/icon-python.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=800
    image_height=336
    image_extension=webp
    article_date=2021-02-11+T00:00:00Z
>

  <section class="post-body">


    <div class="post-index">
      <a class="anchor-link" href="#1.-Summary"><h2>1. Summary</h2></a>
      <a class="anchor-link" href="#2.-Python-data-types"><h2>2. Python data types</h2></a>
      <a class="anchor-link" href="#2.1.-Strings"><h3>2.1. Strings</h3></a>
      <a class="anchor-link" href="#2.2.-Numbers"><h3>2.2. Numbers</h3></a>
      <a class="anchor-link" href="#2.2.1.-Integers"><h4>2.2.1. Integers</h4></a>
      <a class="anchor-link" href="#2.2.2.2.-Float"><h4>2.2.2.2. Float</h4></a>
      <a class="anchor-link" href="#2.2.3.-Complexes"><h4>2.2.3. Complexes</h4></a>
      <a class="anchor-link" href="#2.2.4.-Conversion"><h4>2.2.4. Conversion</h4></a>
      <a class="anchor-link" href="#2.3.-Sequences"><h3>2.3. Sequences</h3></a>
      <a class="anchor-link" href="#2.3.1.-Lists"><h4>2.3.1. Lists</h4></a>
      <a class="anchor-link" href="#2.3.1.1.1.-Editing-lists"><h5>2.3.1.1.1. Editing lists</h5></a>
      <a class="anchor-link" href="#2.3.1.2.-List-comprehension"><h5>2.3.1.2. List comprehension</h5></a>
      <a class="anchor-link" href="#2.3.1.3.-Sorting-lists"><h5>2.3.1.3. Sorting lists</h5></a>
      <a class="anchor-link" href="#2.3.1.4.-Copying-lists"><h5>2.3.1.4. Copying lists</h5></a>
      <a class="anchor-link" href="#2.3.1.5.-Concatenating-lists"><h5>2.3.1.5. Concatenating lists</h5></a>
      <a class="anchor-link" href="#2.3.2.-Tuples"><h4>2.3.2. Tuples</h4></a>
      <a class="anchor-link" href="#2.3.2.1.-Modifying-tuples"><h5>2.3.2.1. Modifying tuples</h5></a>
      <a class="anchor-link" href="#2.3.2.2.2.-Unpacking-tuples"><h5>2.3.2.2.2. Unpacking tuples</h5></a>
      <a class="anchor-link" href="#2.3.2.3.-Concatenate-tuples"><h5>2.3.2.3. Concatenate tuples</h5></a>
      <a class="anchor-link" href="#2.3.2.2.4.-Tuple-Methods"><h5>2.3.2.2.4. Tuple Methods</h5></a>
      <a class="anchor-link" href="#2.3.3.3.-Range"><h4>2.3.3.3. Range</h4></a>
      <a class="anchor-link" href="#2.4.-Dictionaries"><h3>2.4. Dictionaries</h3></a>
      <a class="anchor-link" href="#2.4.1.-Accessing-Items"><h4>2.4.1. Accessing Items</h4></a>
      <a class="anchor-link" href="#2.4.2.-Modifying-the-items"><h4>2.4.2. Modifying the items</h4></a>
      <a class="anchor-link" href="#2.4.3.-Adding-items"><h4>2.4.3. Adding items</h4></a>
      <a class="anchor-link" href="#2.4.4.-Delete-items"><h4>2.4.4. Delete items</h4></a>
      <a class="anchor-link" href="#2.4.5.-Copy-dictionaries"><h4>2.4.5. Copy dictionaries</h4></a>
      <a class="anchor-link" href="#2.4.6.-Nested-dictionaries"><h4>2.4.6. Nested dictionaries</h4></a>
      <a class="anchor-link" href="#2.4.7.-Dictionary-methods"><h4>2.4.7. Dictionary methods</h4></a>
      <a class="anchor-link" href="#2.4.8.-Dictionary-comprehension"><h4>2.4.8. Dictionary comprehension</h4></a>
      <a class="anchor-link" href="#2.5.-Sets"><h3>2.5. Sets</h3></a>
      <a class="anchor-link" href="#2.5.1.-Set"><h4>2.5.1. Set</h4></a>
      <a class="anchor-link" href="#2.5.1.1.-Add-items"><h5>2.5.1.1. Add items</h5></a>
      <a class="anchor-link" href="#2.5.1.2.-Delete-items"><h5>2.5.1.2. Delete items</h5></a>
      <a class="anchor-link" href="#2.5.1.3.-Linking-Items"><h5>2.5.1.3. Linking Items</h5></a>
      <a class="anchor-link" href="#2.5.1.4.-Set-methods"><h5>2.5.1.4. Set methods</h5></a>
      <a class="anchor-link" href="#2.5.2.-Frozenset"><h4>2.5.2. Frozenset</h4></a>
      <a class="anchor-link" href="#2.6.-Booleans"><h3>2.6. Booleans</h3></a>
      <a class="anchor-link" href="#2.6.1.-Other-data-types-True-or-False"><h4>2.6.1. Other data types True or False</h4></a>
      <a class="anchor-link" href="#2.7.-Binaries"><h3>2.7. Binaries</h3></a>
      <a class="anchor-link" href="#2.7.1.-Bytes"><h4>2.7.1. Bytes</h4></a>
      <a class="anchor-link" href="#2.7.2.-Bytearray"><h4>2.7.2. Bytearray</h4></a>
      <a class="anchor-link" href="#2.7.3.-Memoryview"><h4>2.7.3. Memoryview</h4></a>
      <a class="anchor-link" href="#3.-Operators"><h2>3. Operators</h2></a>
      <a class="anchor-link" href="#3.1.-Arithmetic-operators"><h3>3.1. Arithmetic operators</h3></a>
      <a class="anchor-link" href="#3.2.-Comparison-operators"><h3>3.2. Comparison operators</h3></a>
      <a class="anchor-link" href="#3.3.-Logical-operators"><h3>3.3. Logical operators</h3></a>
      <a class="anchor-link" href="#3.4.-Identity-operators"><h3>3.4. Identity operators</h3></a>
      <a class="anchor-link" href="#3.5.-Membership-operators"><h3>3.5. Membership operators</h3></a>
      <a class="anchor-link" href="#3.6.-Bitwise-operators"><h3>3.6. Bitwise operators</h3></a>
      <a class="anchor-link" href="#3.7.-Assignment-operators"><h3>3.7. Assignment operators</h3></a>
      <a class="anchor-link" href="#Flow-control"><h2>Flow control</h2></a>
      <a class="anchor-link" href="#If"><h3>If</h3></a>
      <a class="anchor-link" href="#4.2.-While"><h3>4.2. While</h3></a>
      <a class="anchor-link" href="#4.3.-For"><h3>4.3. For</h3></a>
      <a class="anchor-link" href="#5.-Functions"><h2>5. Functions</h2></a>
      <a class="anchor-link" href="#5.1.-Built-in-functions"><h3>5.1. Built in functions</h3></a>
      <a class="anchor-link" href="#5.2.-Documentation-of-a-function"><h3>5.2. Documentation of a function</h3></a>
      <a class="anchor-link" href="#5.3.-Decorators"><h3>5.3. Decorators</h3></a>
      <a class="anchor-link" href="#5.4.-*args-and-**kwargs."><h3>5.4. <code>*args</code> and <code>**kwargs</code>.</h3></a>
      <a class="anchor-link" href="#5.4.1.-*args."><h4>5.4.1. <code>*args</code>.</h4></a>
      <a class="anchor-link" href="#5.4.2.-**kwargs."><h4>5.4.2. <code>**kwargs</code>.</h4></a>
      <a class="anchor-link" href="#Additional-functions"><h2>Additional functions</h2></a>
      <a class="anchor-link" href="#6.1.-Functions-*call"><h3>6.1. Functions *call</h3></a>
      <a class="anchor-link" href="#6.2.-Map-function"><h3>6.2. Map function</h3></a>
      <a class="anchor-link" href="#6.3.-Filter-function"><h3>6.3. Filter function</h3></a>
      <a class="anchor-link" href="#6.4.-Function-reduce."><h3>6.4. Function <code>reduce</code>.</h3></a>
      <a class="anchor-link" href="#6.5.-Zip-function"><h3>6.5. Zip function</h3></a>
      <a class="anchor-link" href="#6.5.-Generators"><h3>6.5. Generators</h3></a>
      <a class="anchor-link" href="#6.6.-High-order-functions"><h3>6.6. High order functions</h3></a>
      <a class="anchor-link" href="#7.-Classes-and-objects"><h2>7. Classes and objects</h2></a>
      <a class="anchor-link" href="#7.1.-Inheritance"><h3>7.1. Inheritance</h3></a>
      <a class="anchor-link" href="#7.2.-Operator-overload"><h3>7.2. Operator overload</h3></a>
      <a class="anchor-link" href="#7.3.-Custom-Iterators"><h3>7.3. Custom Iterators</h3></a>
      <a class="anchor-link" href="#7.4.-Calling-objects-as-functions"><h3>7.4. Calling objects as functions</h3></a>
      <a class="anchor-link" href="#7.5.-Private-attributes-and-functions"><h3>7.5. Private attributes and functions</h3></a>
      <a class="anchor-link" href="#8.-Iterators"><h2>8. Iterators</h2></a>
      <a class="anchor-link" href="#8.1.-Create-an-iterator-object"><h3>8.1. Create an iterator object</h3></a>
      <a class="anchor-link" href="#8.2.-Iterate-obtaining-the-index-and-value"><h3>8.2. Iterate obtaining the index and value</h3></a>
      <a class="anchor-link" href="#8.3.-Iterate-through-two-iterable-objects-at-the-same-time."><h3>8.3. Iterate through two iterable objects at the same time.</h3></a>
      <a class="anchor-link" href="#9.-Scope-of-variables"><h2>9. Scope of variables</h2></a>
      <a class="anchor-link" href="#9.1.-Local-Scope"><h3>9.1. Local Scope</h3></a>
      <a class="anchor-link" href="#9.2.-Global-Scope"><h3>9.2. Global Scope</h3></a>
      <a class="anchor-link" href="#10.-Modules"><h2>10. Modules</h2></a>
      <a class="anchor-link" href="#10.1.-Entry-points:-files-as-modules-and-not-as-scripts"><h3>10.1. Entry points: files as modules and not as scripts</h3></a>
      <a class="anchor-link" href="#11.-Packages"><h2>11. Packages</h2></a>
      <a class="anchor-link" href="#12.-Try...-Except"><h2>12. Try... Except</h2></a>
      <a class="anchor-link" href="#12.1.-Creating-an-exception"><h3>12.1. Creating an exception</h3></a>
      <a class="anchor-link" href="#13.-Keywords-or-reserved-words"><h2>13. Keywords or reserved words</h2></a>
      <a class="anchor-link" href="#14.-The-Zen-of-Python"><h2>14. The Zen of Python</h2></a>
    </div>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Introduction-to-Python">Introduction to Python<a class="anchor-link" href="#Introduction-to-Python"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Disclaimer: This post has been translated to English using a machine translation model. Please, let me know if you find any mistakes.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>This notebook has been automatically translated to make it accessible to more people, please let me know if you see any typos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="1.-Summary">1. Summary<a class="anchor-link" href="#1.-Summary"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We are going to make a brief introduction to Python, explaining the types of data we have, the operators, the use of functions and classes. We will also see how to use iterable objects, how to use modules, etc.</p>
      <p><img alt="python" src="https://raw.githubusercontent.com/maximofn/portafolio/main/portfolio/public/images/icon-python.webp"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="2.-Python-data-types">2. Python data types<a class="anchor-link" href="#2.-Python-data-types"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>There are 7 data types in Python</p>
      <ol>
      <li>Of type text:<code>str</code></li>
      <li>Numeric: <code>int</code>, <code>float</code>, <code>complex</code>.</li>
      <li>Sequences: <code>list</code>, <code>tuple</code>, <code>range</code>.</li>
      <li>Mapping: <code>dict</code>.</li>
      <li>Sets: <code>set</code>, <code>frozenset</code>.</li>
      <li>Booleans: <code>bool</code>.</li>
      <li>Binaries: <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code>.</li>
      </ol>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can obtain the data type by means of the <code>type()</code> function</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">type</span><span class="p">(</span><span class="mf">5.</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'float',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Python is a dynamically typed language, i.e. you can have a variable of one type and then assign another type to it.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>',
          '<span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'int',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '<span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'str',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Python types the variables for you, but if you want to type them yourself it can be done</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mf">5.1</span><span class="p">)</span>',
          '<span class="nb">type</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="n">b</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(int, 5)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Although <code>b</code> has been initialized as <code>5.1</code>, that is, it should be of type <code>float</code>, when we type it to type <code>int</code>, we see that it is of type <code>int</code> and also its value is <code>5</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.1.-Strings">2.1. Strings<a class="anchor-link" href="#2.1.-Strings"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Strings are character strings, they can be defined with double quotation marks <code>"</code> or single quotation marks <code>'</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"MaximoFN"</span>',
          '<span class="n">string</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'MaximoFN\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '<span class="n">string</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'MaximoFN\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>To write a very long <code>string</code> and not have a row that takes up a lot of space, you can enter it in several lines</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"""Este es un ejemplo de</span>',
          '<span class="s2">como estoy introduciendo un string</span>',
          '<span class="s2">en varias lineas"""</span>',
          '<span class="n">string</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'Este es un ejemplo de\ncomo estoy introduciendo un string\nen varias lineas\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">\'\'\'Este es un ejemplo de</span>',
          '<span class="s1">como estoy introduciendo un string</span>',
          '<span class="s1">en varias lineas\'\'\'</span>',
          '<span class="n">string</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'Este es un ejemplo de\ncomo estoy introduciendo un string\nen varias lineas\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>However, we can see that in the middle the character <code>n</code> has been inserted, this character indicates the line break. If we use the <code>print()</code> function we will see how it does not appear anymore.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es un ejemplo de',
          'como estoy introduciendo un string',
          'en varias lineas',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we have said, strings are character strings, so we can navigate and iterate through them.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>',
          '  <span class="c1"># Se indica a la funci√≥n print que cuando imprima no termine con un salto de </span>',
          '  <span class="c1"># linea para escribir todo en la misma linea</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es un',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can obtain the length of our string using the <code>len()</code> function</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '73',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Check if there is a certain string inside our string</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="s1">\'ejemplo\'</span> <span class="ow">in</span> <span class="n">string</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Strings have certain useful attributes, such as capitalizing everything.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">upper</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'ESTE ES UN EJEMPLO DE',
          'COMO ESTOY INTRODUCIENDO UN STRING',
          'EN VARIAS LINEAS',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>All in lowercase</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'este es un ejemplo de',
          'como estoy introduciendo un string',
          'en varias lineas',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Replace characters</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'o\'</span><span class="p">,</span> <span class="s1">\'@\'</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es un ejempl@ de',
          'c@m@ est@y intr@duciend@ un string',
          'en varias lineas',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Get all words</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">split</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'Este\', \'es\', \'un\', \'ejemplo\', \'de\', \'como\', \'estoy\', \'introduciendo\', \'un\', \'string\', \'en\', \'varias\', \'lineas\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>You can see all the methods of the strings in this <a href="https://docs.python.org/3.9/library/stdtypes.html#string-methods">link</a></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Another useful thing you can do with the strings is to concatenate them</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s1">\'Maximo\'</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s1">\'FN\'</span>',
          '<span class="n">string1</span> <span class="o">+</span> <span class="n">string2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'MaximoFN\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Earlier we explained that the <code>n</code> character corresponded to a line break, this special character corresponds to a series of special characters called <code>Escape Characters</code>. Let's see others</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we declare a string with double quotation marks and we want to add a double quotation mark inside the string we use the escape character <code>"</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s2">"Este es el blog de </span><span class="se">\\"</span><span class="s2">MaximoFN</span><span class="se">\\"</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es el blog de "MaximoFN"',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The same with the single quotation mark, we add '`'.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'Este es el blog de </span><span class="se">\\\'</span><span class="s1">MaximoFN</span><span class="se">\\\'</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es el blog de \'MaximoFN\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we have the problem of whether we want to add the <code>scape character</code>, since as we have seen it is an <code>escape character</code>, so we solve it by putting double backslash <code>slash</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'Este es el blog de </span><span class="se">\\\\</span><span class="s1">MaximoFN</span><span class="se">\\\\</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es el blog de \\MaximoFN\\',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We have already seen before the <code>escape character</code> of new line <code>n</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'Este es el blog de </span><span class="se">\\n</span><span class="s1">MaximoFN\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es el blog de ',
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want to write from the beginning of the line, we add <code>\r</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'Esto no se imprimir√° </span><span class="se">\\r</span><span class="s1">Este es el blog de MaximoFN\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es el blog de MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want to add a large space (indent) we use ``t`.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'Este es el blog de </span><span class="se">\\t</span><span class="s1">MaximoFN\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es el blog de 	MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can erase a character with ``b`.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'Este es el blog de </span><span class="se">\\b</span><span class="s1">MaximoFN\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es el blog deMaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can add the code <a href="http://www.asciitable.com/">ASCII</a> in octal by ``ooo`.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'</span><span class="se">\\115\\141\\170\\151\\155\\157\\106\\116</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or add the code <a href="http://www.asciitable.com/">ASCII</a> in hexadecimal by <code>xhh</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'</span><span class="se">\\x4d\\x61\\x78\\x69\\x6d\\x6f\\x46\\x4e</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Finally, we can convert another data type to string</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mi">5</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">type</span> <span class="p">(</span><span class="n">n</span><span class="p">))</span>',
          '<span class="n">string</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;class \'int\'&gt;',
          '&lt;class \'str\'&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.2.-Numbers">2.2. Numbers<a class="anchor-link" href="#2.2.-Numbers"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.2.1.-Integers">2.2.1. Integers<a class="anchor-link" href="#2.2.1.-Integers"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Numbers of integer type</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mi">5</span>',
          '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(5, int)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.2.2.2.-Float">2.2.2.2. Float<a class="anchor-link" href="#2.2.2.2.-Float"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Floating point type numbers</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mf">5.1</span>',
          '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(5.1, float)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.2.3.-Complexes">2.2.3. Complexes<a class="anchor-link" href="#2.2.3.-Complexes"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Complex numbers</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">5</span><span class="n">j</span>',
          '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '((3+5j), complex)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.2.4.-Conversion">2.2.4. Conversion<a class="anchor-link" href="#2.2.4.-Conversion"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>You can convert between number types</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mi">5</span>',
          '<span class="n">n</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
          '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(5.0, float)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mf">5.1</span>',
          '<span class="n">n</span> <span class="o">=</span> <span class="nb">complex</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
          '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '((5.1+0j), complex)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mf">5.1</span>',
          '<span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
          '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(5, int)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Cannot convert a <code>complex</code> number to type <code>int</code> or type <code>float</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.3.-Sequences">2.3. Sequences<a class="anchor-link" href="#2.3.-Sequences"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.3.1.-Lists">2.3.1. Lists<a class="anchor-link" href="#2.3.1.-Lists"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Lists store multiple items in a variable. They are declared using the symbols <code>[]</code>, with items separated by commas.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s1">\'item0\'</span><span class="p">,</span> <span class="s1">\'item1\'</span><span class="p">,</span> <span class="s1">\'item2\'</span><span class="p">,</span> <span class="s1">\'item3\'</span><span class="p">,</span> <span class="s1">\'item4\'</span><span class="p">,</span> <span class="s1">\'item5\'</span><span class="p">]</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', \'item1\', \'item2\', \'item3\', \'item4\', \'item5\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can obtain the length of a list using the <code>len()</code> function.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">lista</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Lists can have items of different types</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s1">\'item0\'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="mf">5.3</span><span class="p">,</span> <span class="s2">"item4"</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mf">6.6</span><span class="p">]</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1, True, 5.3, \'item4\', 5, 6.6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In Python we start counting from position 0, that is, if we want to obtain the first position of the list</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'item0\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>But one of the powerful things about Python is that if we want to access the last position we can use negative indices</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '6.6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If instead of the last position in the list we want the penultimate one</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '5',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we only want a range of values, for example, from the second to the fifth item, we access through <code>[2:5]</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[True, 5.3, \'item4\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If the first number of the range is omitted it means that we want from the first item of the list to the indicated item, that is, if we want from the first item to the fifth we use <code>[:5]</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1, True, 5.3, \'item4\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If the last number of the range is omitted it means that we want from the indicated item to the last one, i.e. if we want from the third item to the last one we use <code>[3:]</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[</span><span class="mi">3</span><span class="p">:]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[5.3, \'item4\', 5, 6.6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can choose the range of items also with negative numbers, that is, if we want from the antepenultimate to the penultimate we use <code>[-3:-1]</code>. This is useful when you have lists that you do not know their length, but you know that you want a range of values from the end, because for example, the list has been created with measurements that are being taken and you want to know the last averages.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item4\', 5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>You can check if an item is in the list</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="s1">\'item4\'</span> <span class="ow">in</span> <span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.1.1.1.-Editing-lists">2.3.1.1.1. Editing lists<a class="anchor-link" href="#2.3.1.1.1.-Editing-lists"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Lists in Python are dynamic, that is, they can be modified. For example, you can modify the third item</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1, False, 5.3, \'item4\', 5, 6.6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>You can also modify a range of values</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mf">1.1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1.1, True, 3, \'item4\', 5, 6.6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Values can be added to the end of the list using the <code>append()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">\'item7\'</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1.1, True, 3, \'item4\', 5, 6.6, \'item7\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or we can insert a value at a given position using the <code>insert()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s1">\'insert\'</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1.1, \'insert\', True, 3, \'item4\', 5, 6.6, \'item7\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Lists can be joined using the <code>extend()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista2</span> <span class="o">=</span> <span class="p">[</span><span class="s1">\'item8\'</span><span class="p">,</span> <span class="s1">\'item9\'</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">lista2</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1.1, \'insert\', True, 3, \'item4\', 5, 6.6, \'item7\', \'item8\', \'item9\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>It is not necessary to extend the list by another list, it can be done by another iterable Python data type (<code>tuples</code>, <code>sets</code>, <code>dictionaries</code>, etc).</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">\'item10\'</span><span class="p">,</span> <span class="s1">\'item11\'</span><span class="p">)</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\',',
          ' 1.1,',
          ' \'insert\',',
          ' True,',
          ' 3,',
          ' \'item4\',',
          ' 5,',
          ' 6.6,',
          ' \'item7\',',
          ' \'item8\',',
          ' \'item9\',',
          ' \'item10\',',
          ' \'item11\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can delete a given position using the <code>pop()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\',',
          ' 1.1,',
          ' True,',
          ' 3,',
          ' \'item4\',',
          ' 5,',
          ' 6.6,',
          ' \'item7\',',
          ' \'item8\',',
          ' \'item9\',',
          ' \'item10\',',
          ' \'item11\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If the index is not specified, the last item is deleted.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1.1, True, 3, \'item4\', 5, 6.6, \'item7\', \'item8\', \'item9\', \'item10\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or you can remove an item knowing its value using the <code>remove()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">\'item7\'</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1.1, True, 3, \'item4\', 5, 6.6, \'item8\', \'item9\', \'item10\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The <code>del()</code> function can also be used to remove an item from the specified position.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">del</span> <span class="n">lista</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1.1, True, \'item4\', 5, 6.6, \'item8\', \'item9\', \'item10\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If the index is not indicated, the entire list is deleted.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>With the <code>clear()</code> method leaves the list empty.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The number of items with a given value can be obtained using the <code>count()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>You can also get the first index of an item with a given value by using the <code>index()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.1.2.-List-comprehension">2.3.1.2. List comprehension<a class="anchor-link" href="#2.3.1.2.-List-comprehension"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can operate through the list</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">,</span> <span class="s2">"cherry"</span><span class="p">,</span> <span class="s2">"kiwi"</span><span class="p">,</span> <span class="s2">"mango"</span><span class="p">]</span>',
          '<span class="n">newlist</span> <span class="o">=</span> <span class="p">[]</span>',
          '',
          '<span class="c1"># Iteramos por todos los items de la lista</span>',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fruits</span><span class="p">:</span>',
          '  <span class="c1"># Si el item contiene el caracter "a" lo a√±adimos a newlist</span>',
          '  <span class="k">if</span> <span class="s2">"a"</span> <span class="ow">in</span> <span class="n">x</span><span class="p">:</span>',
          '    <span class="n">newlist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '',
          '<span class="n">newlist</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'apple\', \'banana\', \'mango\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another powerful feature of Python is <code>list comprehension</code>, which allows you to do everything in a single line and make the code more compact.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">,</span> <span class="s2">"cherry"</span><span class="p">,</span> <span class="s2">"kiwi"</span><span class="p">,</span> <span class="s2">"mango"</span><span class="p">]</span>',
          '',
          '<span class="n">newlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fruits</span> <span class="k">if</span> <span class="s2">"a"</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>',
          '',
          '<span class="n">newlist</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'apple\', \'banana\', \'mango\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The syntax is as follows</p>
      <pre><code>newlist = [expression for item in iterable if condition == True]</code></pre>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>You can take advantage of this opportunity to perform operations on the original list</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">newlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fruits</span> <span class="k">if</span> <span class="s2">"a"</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>',
          '<span class="n">newlist</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'APPLE\', \'BANANA\', \'MANGO\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.1.3.-Sorting-lists">2.3.1.3. Sorting lists<a class="anchor-link" href="#2.3.1.3.-Sorting-lists"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To sort lists we use the <code>sort()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[3, 4, 5, 5, 6, 8, 9]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>It also orders them allphabetically</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"orange"</span><span class="p">,</span> <span class="s2">"mango"</span><span class="p">,</span> <span class="s2">"kiwi"</span><span class="p">,</span> <span class="s2">"pineapple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'banana\', \'kiwi\', \'mango\', \'orange\', \'pineapple\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>When sorting alphabetically, distinguish between upper and lower case letters</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"orange"</span><span class="p">,</span> <span class="s2">"mango"</span><span class="p">,</span> <span class="s2">"kiwi"</span><span class="p">,</span> <span class="s2">"Pineapple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'Pineapple\', \'banana\', \'kiwi\', \'mango\', \'orange\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>They can be sorted in descending order using the attribute <code>reverse = True</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">reverse</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[9, 8, 6, 5, 5, 4, 3]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>They can be sorted in any order we want using the <code>key</code> attribute.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">myfunc</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>',
          '  <span class="c1"># devuelve el valor absoluto de n - 50</span>',
          '  <span class="k">return</span> <span class="nb">abs</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">50</span><span class="p">)</span>',
          '',
          '<span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">23</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span> <span class="o">=</span> <span class="n">myfunc</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[50, 65, 23, 82, 100]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>You can take advantage of this so that, for example, when ordering, it does not distinguish between upper and lower case letters.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"orange"</span><span class="p">,</span> <span class="s2">"mango"</span><span class="p">,</span> <span class="s2">"kiwi"</span><span class="p">,</span> <span class="s2">"Pineapple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span> <span class="o">=</span> <span class="nb">str</span><span class="o">.</span><span class="n">lower</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'banana\', \'kiwi\', \'mango\', \'orange\', \'Pineapple\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>You can flip the list using the <code>reverse</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[6, 5, 9, 4, 3, 8, 5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.1.4.-Copying-lists">2.3.1.4. Copying lists<a class="anchor-link" href="#2.3.1.4.-Copying-lists"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Lists cannot be copied using <code>list1 = list2</code>, because if <code>list1</code> is modified, <code>list2</code> is also modified.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
          '<span class="n">lista2</span> <span class="o">=</span> <span class="n">lista1</span>',
          '<span class="n">lista1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>',
          '<span class="n">lista2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[True, 8, 3, 4, 9, 5, 6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>So you have to use the <code>copy()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
          '<span class="n">lista2</span> <span class="o">=</span> <span class="n">lista1</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>',
          '<span class="n">lista1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>',
          '<span class="n">lista2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[5, 8, 3, 4, 9, 5, 6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or you have to use the <code>list()</code> list constructor.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
          '<span class="n">lista2</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">lista1</span><span class="p">)</span>',
          '<span class="n">lista1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>',
          '<span class="n">lista2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[5, 8, 3, 4, 9, 5, 6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.1.5.-Concatenating-lists">2.3.1.5. Concatenating lists<a class="anchor-link" href="#2.3.1.5.-Concatenating-lists"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Lists can be concatenated using the <code>+</code> operator.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
          '<span class="n">lista2</span> <span class="o">=</span> <span class="p">[</span><span class="s1">\'a\'</span><span class="p">,</span> <span class="s1">\'b\'</span><span class="p">,</span> <span class="s1">\'c\'</span><span class="p">]</span>',
          '<span class="n">lista</span> <span class="o">=</span> <span class="n">lista1</span> <span class="o">+</span> <span class="n">lista2</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[5, 8, 3, 4, 9, 5, 6, \'a\', \'b\', \'c\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or by using the extend method</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
          '<span class="n">lista2</span> <span class="o">=</span> <span class="p">[</span><span class="s1">\'a\'</span><span class="p">,</span> <span class="s1">\'b\'</span><span class="p">,</span> <span class="s1">\'c\'</span><span class="p">]</span>',
          '<span class="n">lista1</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">lista2</span><span class="p">)</span>',
          '<span class="n">lista1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[5, 8, 3, 4, 9, 5, 6, \'a\', \'b\', \'c\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another way to concatenate is to repeat the tuple X times using the <code>*</code> operator.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="s1">\'a\'</span><span class="p">,</span> <span class="s1">\'b\'</span><span class="p">,</span> <span class="s1">\'c\'</span><span class="p">]</span>',
          '<span class="n">lista2</span> <span class="o">=</span> <span class="n">lista1</span> <span class="o">*</span> <span class="mi">3</span>',
          '<span class="n">lista2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'a\', \'b\', \'c\', \'a\', \'b\', \'c\', \'a\', \'b\', \'c\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.3.2.-Tuples">2.3.2. Tuples<a class="anchor-link" href="#2.3.2.-Tuples"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Tuples are similar to lists, they store multiple items in a variable, can contain items of different types, but cannot be modified or reordered. They are defined by <code>()</code>, with items separated by commas.</p>
      <p>Not being able to be modified makes tuples run a little faster than lists, so if you don't need to modify the data it is better to use tuples instead of lists.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">\'item0\'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">,</span> <span class="s1">\'item4\'</span><span class="p">,</span> <span class="kc">True</span><span class="p">)</span>',
          '<span class="n">tupla</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'item0\', 1, True, 3.3, \'item4\', True)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Its length can be obtained using the <code>len()</code> function.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">len</span> <span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>To create tuples with a single element it is necessary to add a comma</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">\'item0\'</span><span class="p">,)</span>',
          '<span class="n">tupla</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '((\'item0\',), tuple)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>To access a tuple element, proceed in the same way as for lists.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">\'item0\'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">,</span> <span class="s1">\'item4\'</span><span class="p">,</span> <span class="kc">True</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">tupla</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">tupla</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">tupla</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">tupla</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'item0',
          'True',
          '(True, 3.3)',
          '(True, 3.3)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can check if there is an item in the tuple</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="s1">\'item4\'</span> <span class="ow">in</span> <span class="n">tupla</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.2.1.-Modifying-tuples">2.3.2.1. Modifying tuples<a class="anchor-link" href="#2.3.2.1.-Modifying-tuples"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Although tuples are not modifiable, they can be modified by converting them to lists, modifying the list and then converting it back to a tuple.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
          '<span class="n">lista</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="s1">\'ITEM4\'</span>',
          '<span class="n">tupla</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">lista</span><span class="p">)</span>',
          '<span class="n">tupla</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'item0\', 1, True, 3.3, \'ITEM4\', True)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>By converting it to a list we can make all the modifications seen in lists.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>What you can do is to delete the entire tuple</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">del</span> <span class="n">tupla</span>',
          '',
          '<span class="k">if</span> <span class="s1">\'tupla\'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="nb">locals</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"tupla eliminada"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'tupla eliminada',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.2.2.2.-Unpacking-tuples">2.3.2.2.2. Unpacking tuples<a class="anchor-link" href="#2.3.2.2.2.-Unpacking-tuples"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>When we create tuples, we are actually packaging data.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">\'item0\'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">,</span> <span class="s1">\'item4\'</span><span class="p">,</span> <span class="kc">True</span><span class="p">)</span>',
          '<span class="n">tupla</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'item0\', 1, True, 3.3, \'item4\', True)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>but we can unpack them</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="n">item3</span><span class="p">,</span> <span class="n">item4</span><span class="p">,</span> <span class="n">item5</span> <span class="o">=</span> <span class="n">tupla</span>',
          '<span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="n">item3</span><span class="p">,</span> <span class="n">item4</span><span class="p">,</span> <span class="n">item5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'item0\', 1, True, 3.3, \'item4\', True)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want to get less data than the length of the tuple we add a <code>*</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="o">*</span><span class="n">item3</span> <span class="o">=</span> <span class="n">tupla</span>',
          '<span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="n">item3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'item0\', 1, True, [3.3, \'item4\', True])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>You can put the asterisk <code>*</code> elsewhere if, for example, what you want is the last item</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="o">*</span><span class="n">item2</span><span class="p">,</span> <span class="n">item5</span> <span class="o">=</span> <span class="n">tupla</span>',
          '<span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="n">item5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'item0\', 1, [True, 3.3, \'item4\'], True)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.2.3.-Concatenate-tuples">2.3.2.3. Concatenate tuples<a class="anchor-link" href="#2.3.2.3.-Concatenate-tuples"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>You can concatenate tuples using the <code>+</code> operator.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla1</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span> <span class="p">,</span> <span class="s2">"c"</span><span class="p">)</span>',
          '<span class="n">tupla2</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>',
          '',
          '<span class="n">tupla3</span> <span class="o">=</span> <span class="n">tupla1</span> <span class="o">+</span> <span class="n">tupla2</span>',
          '<span class="n">tupla3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'a\', \'b\', \'c\', 1, 2, 3)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another way to concatenate is to repeat the tuple X times using the <code>*</code> operator.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla1</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span> <span class="p">,</span> <span class="s2">"c"</span><span class="p">)</span>',
          '',
          '<span class="n">tupla2</span> <span class="o">=</span> <span class="n">tupla1</span> <span class="o">*</span> <span class="mi">3</span>',
          '<span class="n">tupla2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'a\', \'b\', \'c\', \'a\', \'b\', \'c\', \'a\', \'b\', \'c\')',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.2.2.4.-Tuple-Methods">2.3.2.2.4. Tuple Methods<a class="anchor-link" href="#2.3.2.2.4.-Tuple-Methods"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The tuples have two methods, the first is the <code>count()</code> method that returns the number of times an item exists within the tuple.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>',
          '<span class="n">tupla</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another method is <code>index()</code> which returns the first position of an item in the tuple.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>',
          '<span class="n">tupla</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.3.3.3.-Range">2.3.3.3. Range<a class="anchor-link" href="#2.3.3.3.-Range"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>With <code>range()</code> we can create a sequence of numbers, starting from 0 (by default), increments by 1 (by default) and stops before a specified number.</p>
      <pre><code>range(start, stop, step)</code></pre>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>For example if we want a sequence from 0 to 5 (not including the 5)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1"> \'</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0 1 2 3 4 ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If, for example, we do not want it to start at 0</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1"> \'</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2 3 4 ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1"> \'</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '-2 -1 0 1 2 3 4 ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Finally, if we do not want it to increment by 1. If for example we want a sequence of even numbers</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1"> \'</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0 2 4 6 8 ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.4.-Dictionaries">2.4. Dictionaries<a class="anchor-link" href="#2.4.-Dictionaries"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Dictionaries are used to store data in <code>key:data</code> pairs. They are modifiable, unordered and do not allow duplicates. They are defined by the symbols <code>{}</code>. They support items of different data types</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span><span class="p">,</span>',
          '  <span class="s2">"colors"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"red"</span><span class="p">,</span> <span class="s2">"white"</span><span class="p">,</span> <span class="s2">"blue"</span><span class="p">]</span>',
          '<span class="p">}</span>',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'brand\': \'Ford\',',
          ' \'model\': \'Mustang\',',
          ' \'year\': 1964,',
          ' \'colors\': [\'red\', \'white\', \'blue\']}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As mentioned above, duplicity is not allowed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">2000</span><span class="p">,</span>',
          '  <span class="s2">"colors"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"red"</span><span class="p">,</span> <span class="s2">"white"</span><span class="p">,</span> <span class="s2">"blue"</span><span class="p">]</span>',
          '<span class="p">}</span>',
          '<span class="n">diccionario</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2000',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Its length can be obtained using the <code>len()</code> function.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As you can see the length is 4 and not 5, since <code>year</code> is counted only once.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.1.-Accessing-Items">2.4.1. Accessing Items<a class="anchor-link" href="#2.4.1.-Accessing-Items"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To access an item we can do it through its <code>key</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span><span class="p">[</span><span class="s2">"model"</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'Mustang\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>It can also be accessed through the <code>get()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"model"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'Mustang\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>To know all the <code>keys</code>s of the dictionaries, you can use the <code>keys()</code> method</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dict_keys([\'brand\', \'model\', \'year\', \'colors\'])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A variable can be used to point to the <code>keys</code>s of the dictionary, so calling it once is required</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '<span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '<span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '<span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se declara una vez la variable que apunta a las keys</span>',
          '<span class="n">x</span> <span class="o">=</span> <span class="n">diccionario</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '',
          '<span class="c1"># Se a√±ade una nueva key</span>',
          '<span class="n">diccionario</span><span class="p">[</span><span class="s2">"color"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"white"</span>',
          '',
          '<span class="c1"># Se consulta la variable que apunta a las key</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dict_keys([\'brand\', \'model\', \'year\'])',
          'dict_keys([\'brand\', \'model\', \'year\', \'color\'])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>To obtain the dictionary values you can use the method 'values()'.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span><span class="o">.</span><span class="n">values</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dict_values([\'Ford\', \'Mustang\', 1964, \'white\'])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>You can use a variable to point to the <code>values</code>s of the dictionary, so calling it once is necessary</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '<span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '<span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '<span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se declara una vez la variable que apunta a los values</span>',
          '<span class="n">x</span> <span class="o">=</span> <span class="n">diccionario</span><span class="o">.</span><span class="n">values</span><span class="p">()</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '',
          '<span class="c1"># Se modifica un value</span>',
          '<span class="n">diccionario</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2020</span>',
          '',
          '<span class="c1"># Se consulta la variable que apunta a los values</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dict_values([\'Ford\', \'Mustang\', 1964])',
          'dict_values([\'Ford\', \'Mustang\', 2020])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If what you want are the <code>item</code>s integers, that is <code>key</code>s and <code>value</code>s you have to use the <code>items()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dict_items([(\'brand\', \'Ford\'), (\'model\', \'Mustang\'), (\'year\', 2020)])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A variable can be used to point to the <code>item</code>s in the dictionary, so calling it once is required</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '<span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '<span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '<span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se declara una vez la variable que apunta a los items</span>',
          '<span class="n">x</span> <span class="o">=</span> <span class="n">diccionario</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '',
          '<span class="c1"># Se modifica un value</span>',
          '<span class="n">diccionario</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2020</span>',
          '',
          '<span class="c1"># Se consulta la variable que apunta a los items</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dict_items([(\'brand\', \'Ford\'), (\'model\', \'Mustang\'), (\'year\', 1964)])',
          'dict_items([(\'brand\', \'Ford\'), (\'model\', \'Mustang\'), (\'year\', 2020)])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>You can check if a <code>key</code> exists in the dictionary.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="s2">"model"</span> <span class="ow">in</span> <span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.2.-Modifying-the-items">2.4.2. Modifying the items<a class="anchor-link" href="#2.4.2.-Modifying-the-items"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>An <code>item</code> can be modified by accessing it directly</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '<span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '<span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '<span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se modifica un item</span>',
          '<span class="n">diccionario</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2020</span>',
          '',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'brand\': \'Ford\', \'model\': \'Mustang\', \'year\': 2020}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or it can be modified using the <code>update()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se modifica un item</span>',
          '<span class="n">diccionario</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s2">"year"</span><span class="p">:</span> <span class="mi">2020</span><span class="p">})</span>',
          '',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'brand\': \'Ford\', \'model\': \'Mustang\', \'year\': 2020}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.3.-Adding-items">2.4.3. Adding items<a class="anchor-link" href="#2.4.3.-Adding-items"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>You can add an <code>item</code> by adding it without further ado.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '<span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '<span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '<span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se modifica un item</span>',
          '<span class="n">diccionario</span><span class="p">[</span><span class="s2">"colour"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"blue"</span>',
          '',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'brand\': \'Ford\', \'model\': \'Mustang\', \'year\': 1964, \'colour\': \'blue\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or it can be added using the <code>update()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se modifica un item</span>',
          '<span class="n">diccionario</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s2">"colour"</span><span class="p">:</span> <span class="s2">"blue"</span><span class="p">})</span>',
          '',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'brand\': \'Ford\', \'model\': \'Mustang\', \'year\': 1964, \'colour\': \'blue\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.4.-Delete-items">2.4.4. Delete items<a class="anchor-link" href="#2.4.4.-Delete-items"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>An <code>item</code> with a specific <code>key</code> can be removed using the <code>pop()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se elimina un item</span>',
          '<span class="n">diccionario</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s2">"model"</span><span class="p">)</span>',
          '',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'brand\': \'Ford\', \'year\': 1964}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or you can delete an <code>item</code> with a specific <code>key</code> by <code>del</code> indicating the name of the <code>key</code> between the <code>[]</code> symbols.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se elimina un item</span>',
          '<span class="k">del</span> <span class="n">diccionario</span><span class="p">[</span><span class="s2">"model"</span><span class="p">]</span>',
          '',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'brand\': \'Ford\', \'year\': 1964}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The entire dictionary is deleted if <code>del</code> is used and the <code>key</code> of an <code>item</code> is not specified.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se elimina un item</span>',
          '<span class="k">del</span> <span class="n">diccionario</span>',
          '',
          '<span class="k">if</span> <span class="s1">\'diccionario\'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="nb">locals</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"diccionario eliminado"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'diccionario eliminado',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If you want to delete the last <code>item</code> entered, you can use the <code>popitem()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se elimina el √∫ltimo item introducido</span>',
          '<span class="n">diccionario</span><span class="o">.</span><span class="n">popitem</span><span class="p">()</span>',
          '',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'brand\': \'Ford\', \'model\': \'Mustang\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If you want to clean the dictionary you must use the <code>clear()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '<span class="n">diccionario</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.5.-Copy-dictionaries">2.4.5. Copy dictionaries<a class="anchor-link" href="#2.4.5.-Copy-dictionaries"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>It is not possible to copy dictionaries using <code>dictionary1 = dictionary2</code>, because if <code>dictionary1</code> is modified, <code>dictionary2</code> is also modified.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario1</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '<span class="n">diccionario2</span> <span class="o">=</span> <span class="n">diccionario1</span>',
          '<span class="n">diccionario1</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2000</span>',
          '<span class="n">diccionario2</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2000',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>So you have to use the <code>copy()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario1</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '<span class="n">diccionario2</span> <span class="o">=</span> <span class="n">diccionario1</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>',
          '<span class="n">diccionario1</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2000</span>',
          '<span class="n">diccionario2</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1964',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or you have to use the dictionary constructor <code>dict()</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario1</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '<span class="n">diccionario2</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">diccionario1</span><span class="p">)</span>',
          '<span class="n">diccionario1</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2000</span>',
          '<span class="n">diccionario2</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1964',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.6.-Nested-dictionaries">2.4.6. Nested dictionaries<a class="anchor-link" href="#2.4.6.-Nested-dictionaries"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Dictionaries can have <code>items</code>s of any type of data, including other dictionaries. Such dictionaries are called <code>nested</code> dictionaries.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario_nested</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"child1"</span> <span class="p">:</span> <span class="p">{</span>',
          '    <span class="s2">"name"</span> <span class="p">:</span> <span class="s2">"Emil"</span><span class="p">,</span>',
          '    <span class="s2">"year"</span> <span class="p">:</span> <span class="mi">2004</span>',
          '  <span class="p">},</span>',
          '  <span class="s2">"child2"</span> <span class="p">:</span> <span class="p">{</span>',
          '    <span class="s2">"name"</span> <span class="p">:</span> <span class="s2">"Tobias"</span><span class="p">,</span>',
          '    <span class="s2">"year"</span> <span class="p">:</span> <span class="mi">2007</span>',
          '  <span class="p">},</span>',
          '  <span class="s2">"child3"</span> <span class="p">:</span> <span class="p">{</span>',
          '    <span class="s2">"name"</span> <span class="p">:</span> <span class="s2">"Linus"</span><span class="p">,</span>',
          '    <span class="s2">"year"</span> <span class="p">:</span> <span class="mi">2011</span>',
          '  <span class="p">}</span>',
          '<span class="p">}</span>',
          '<span class="n">diccionario_nested</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'child1\': {\'name\': \'Emil\', \'year\': 2004},',
          ' \'child2\': {\'name\': \'Tobias\', \'year\': 2007},',
          ' \'child3\': {\'name\': \'Linus\', \'year\': 2011}}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">child1</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"name"</span> <span class="p">:</span> <span class="s2">"Emil"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span> <span class="p">:</span> <span class="mi">2004</span>',
          '<span class="p">}</span>',
          '<span class="n">child2</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"name"</span> <span class="p">:</span> <span class="s2">"Tobias"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span> <span class="p">:</span> <span class="mi">2007</span>',
          '<span class="p">}</span>',
          '<span class="n">child3</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"name"</span> <span class="p">:</span> <span class="s2">"Linus"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span> <span class="p">:</span> <span class="mi">2011</span>',
          '<span class="p">}</span>',
          '',
          '<span class="n">diccionario_nested</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"child1"</span> <span class="p">:</span> <span class="n">child1</span><span class="p">,</span>',
          '  <span class="s2">"child2"</span> <span class="p">:</span> <span class="n">child2</span><span class="p">,</span>',
          '  <span class="s2">"child3"</span> <span class="p">:</span> <span class="n">child3</span>',
          '<span class="p">}</span>',
          '',
          '<span class="n">diccionario_nested</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'child1\': {\'name\': \'Emil\', \'year\': 2004},',
          ' \'child2\': {\'name\': \'Tobias\', \'year\': 2007},',
          ' \'child3\': {\'name\': \'Linus\', \'year\': 2011}}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.7.-Dictionary-methods">2.4.7. Dictionary methods<a class="anchor-link" href="#2.4.7.-Dictionary-methods"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>These are the <a href="https://www.w3schools.com/python/python_dictionaries_methods.asp">methods</a> that may be used in dictionaries</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.8.-Dictionary-comprehension">2.4.8. Dictionary comprehension<a class="anchor-link" href="#2.4.8.-Dictionary-comprehension"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Just as we could make <code>lists comprehensions</code> using the syntax</p>
      <div class="highlight"><pre><span></span><span class="n">list_comprehension</span> <span class="o">=</span> <span class="p">[</span><span class="n">expression</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">iterable</span> <span class="k">if</span> <span class="n">condition</span> <span class="o">==</span> <span class="kc">True</span><span class="p">]</span>
      <span class="err">```</span>
      
      <span class="n">We</span> <span class="n">can</span> <span class="n">make</span> <span class="err">`</span><span class="n">disctionarys</span> <span class="n">comprehensions</span><span class="err">`</span> <span class="n">using</span> <span class="n">the</span> <span class="n">following</span> <span class="n">syntax</span>
      
      <span class="err">```</span> <span class="n">python</span>
      <span class="n">dictionary_comprehension</span> <span class="o">=</span> <span class="p">[</span><span class="n">key</span> <span class="n">expression</span><span class="p">:</span> <span class="n">value</span> <span class="n">expression</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">iterable</span> <span class="k">if</span> <span class="n">condition</span> <span class="o">==</span> <span class="kc">True</span><span class="p">]</span><span class="o">.</span>
      <span class="err">```</span>
      
      <span class="n">Let</span><span class="s1">'s see an example</span>
      </pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dictionary_comprehension</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">}</span>',
          '<span class="n">dictionary_comprehension</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{4: 16, 6: 36}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.5.-Sets">2.5. Sets<a class="anchor-link" href="#2.5.-Sets"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.5.1.-Set">2.5.1. Set<a class="anchor-link" href="#2.5.1.-Set"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Sets are used in Python to store a set of items in a single variable. You can store items of different types. They are unordered and have no index.</p>
      <p>They differ from lists in that they have neither order nor index.</p>
      <p>They are declared by means of the symbols <code>{}</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Since <code>set</code> is a reserved word in Python, we create an <code>set</code> with the name <code>set_</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set_</span> <span class="o">=</span> <span class="p">{</span><span class="s1">\'item0\'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">5.3</span><span class="p">,</span> <span class="s2">"item4"</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mf">6.6</span><span class="p">}</span>',
          '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 5, 5.3, 6.6, \'item0\', \'item4\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>There can be no duplicate items, if any duplicate item is found, only one item is kept</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set_</span> <span class="o">=</span> <span class="p">{</span><span class="s1">\'item0\'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">5.3</span><span class="p">,</span> <span class="s2">"item4"</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mf">6.6</span><span class="p">,</span> <span class="s1">\'item0\'</span><span class="p">}</span>',
          '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 5, 5.3, 6.6, \'item0\', \'item4\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The length of the <code>set</code> can be obtained using the <code>len()</code> function.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">set_</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As you can see the length of the set is 6 and not 7, since it remains with only one <code>'item0'</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>You can check if an item is in the set.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="s1">\'item4\'</span> <span class="ow">in</span> <span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.5.1.1.-Add-items">2.5.1.1. Add items<a class="anchor-link" href="#2.5.1.1.-Add-items"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>An item can be added to the set using the <code>add()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set_</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mf">8.8</span><span class="p">)</span>',
          '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 5, 5.3, 6.6, 8.8, \'item0\', \'item4\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another set can be added using the <code>update()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"item5"</span><span class="p">,</span> <span class="s2">"item6"</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>',
          '<span class="n">set_</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
          '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 5, 5.3, 6.6, 7, 8.8, \'item0\', \'item4\', \'item5\', \'item6\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>You can also add items from Python iterable data types</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"item9"</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mf">11.2</span><span class="p">]</span>',
          '<span class="n">set_</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">lista</span><span class="p">)</span>',
          '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 10, 11.2, 5, 5.3, 6.6, 7, 8.8, \'item0\', \'item4\', \'item5\', \'item6\', \'item9\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.5.1.2.-Delete-items">2.5.1.2. Delete items<a class="anchor-link" href="#2.5.1.2.-Delete-items"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A given item can be removed using the <code>remove()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set_</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">\'item9\'</span><span class="p">)</span>',
          '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 10, 11.2, 5, 5.3, 6.6, 7, 8.8, \'item0\', \'item4\', \'item5\', \'item6\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or by using the <code>discard()</code> method</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set_</span><span class="o">.</span><span class="n">discard</span><span class="p">(</span><span class="s1">\'item6\'</span><span class="p">)</span>',
          '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 10, 11.2, 5, 5.3, 6.6, 7, 8.8, \'item0\', \'item4\', \'item5\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Using the <code>pop()</code> method you can remove the last item, but since the <code>set</code>s are not sorted there is no way to know which is the last item. The <code>pop()</code> method returns the deleted item.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"set antes de pop(): </span><span class="si">{</span><span class="n">set_</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="n">eliminado</span> <span class="o">=</span> <span class="n">set_</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Se ha eliminado </span><span class="si">{</span><span class="n">eliminado</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'set antes de pop(): {1, 5, 5.3, 6.6, 8.8, 7, 10, 11.2, \'item5\', \'item0\', \'item4\'}',
          'Se ha eliminado 1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>By means of the <code>clear()</code> method, the set can be emptied.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set_</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>',
          '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'set()',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Finally, with <code>del</code> you can delete the set</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">del</span> <span class="n">set_</span>',
          '',
          '<span class="k">if</span> <span class="s1">\'set_\'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="nb">locals</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"set eliminado"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'set eliminado',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.5.1.3.-Linking-Items">2.5.1.3. Linking Items<a class="anchor-link" href="#2.5.1.3.-Linking-Items"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>One way to join sets is through the <code>union()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span> <span class="p">,</span> <span class="s2">"c"</span><span class="p">}</span>',
          '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>',
          '<span class="n">set3</span> <span class="o">=</span> <span class="n">set1</span><span class="o">.</span><span class="n">union</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
          '<span class="n">set3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 2, 3, \'a\', \'b\', \'c\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another way is through the <code>update()</code> method, but this way you add one set to another, not create a new one.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span> <span class="p">,</span> <span class="s2">"c"</span><span class="p">}</span>',
          '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>',
          '<span class="n">set1</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
          '<span class="n">set1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 2, 3, \'a\', \'b\', \'c\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>These union methods remove duplicates, but if we want to get the duplicate items in two sets we use the <code>intersection()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">,</span> <span class="s2">"cherry"</span><span class="p">}</span>',
          '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"google"</span><span class="p">,</span> <span class="s2">"microsoft"</span><span class="p">,</span> <span class="s2">"apple"</span><span class="p">}</span>',
          '',
          '<span class="n">set3</span> <span class="o">=</span> <span class="n">set1</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
          '<span class="n">set3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'apple\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want to get the duplicate items in two sets, but without creating a new set, we use the <code>intersection_update()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">,</span> <span class="s2">"cherry"</span><span class="p">}</span>',
          '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"google"</span><span class="p">,</span> <span class="s2">"microsoft"</span><span class="p">,</span> <span class="s2">"apple"</span><span class="p">}</span>',
          '',
          '<span class="n">set1</span><span class="o">.</span><span class="n">intersection_update</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
          '<span class="n">set1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'apple\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now the other way around, if we want to keep the non-duplicates we use the <code>symmetric_difference()</code> method.</p>
      <p>The difference between that and the union between two sets is that in the union it keeps all the items, but the ones that are duplicated it only takes them once. Now we are left with the ones that are not duplicated</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">,</span> <span class="s2">"cherry"</span><span class="p">}</span>',
          '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"google"</span><span class="p">,</span> <span class="s2">"microsoft"</span><span class="p">,</span> <span class="s2">"apple"</span><span class="p">}</span>',
          '',
          '<span class="n">set3</span> <span class="o">=</span> <span class="n">set1</span><span class="o">.</span><span class="n">symmetric_difference</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
          '<span class="n">set3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'banana\', \'cherry\', \'google\', \'microsoft\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want to keep the non-duplicates without creating a new set we use the <code>symmetric_difference_update()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">,</span> <span class="s2">"cherry"</span><span class="p">}</span>',
          '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"google"</span><span class="p">,</span> <span class="s2">"microsoft"</span><span class="p">,</span> <span class="s2">"apple"</span><span class="p">}</span>',
          '',
          '<span class="n">set1</span><span class="o">.</span><span class="n">symmetric_difference_update</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
          '<span class="n">set1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'banana\', \'cherry\', \'google\', \'microsoft\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.5.1.4.-Set-methods">2.5.1.4. Set methods<a class="anchor-link" href="#2.5.1.4.-Set-methods"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>These are the <a href="https://www.w3schools.com/python/python_sets_methods.asp">methods</a> that can be used in the sets</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.5.2.-Frozenset">2.5.2. Frozenset<a class="anchor-link" href="#2.5.2.-Frozenset"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>frozenset</code>s are like the <code>set</code>s but with the exception that they are immutable, just as the <code>tuple</code>s are like the <code>list</code>s but immutable. So we will not be able to add or delete items</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.6.-Booleans">2.6. Booleans<a class="anchor-link" href="#2.6.-Booleans"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>There are only two Booleans in Python: <code>True</code> and <code>False</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Using the <code>bool()</code> function, you can evaluate whether anything is <code>True</code> or <code>False</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="s2">"Hello"</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="mi">15</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.6.1.-Other-data-types-True-or-False">2.6.1. Other data types True or False<a class="anchor-link" href="#2.6.1.-Other-data-types-True-or-False"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The following data are <code>True</code>:</p>
      <ul>
      <li>Any string that is not empty</li>
      <li>Any number except 0</li>
      <li>Any non-empty list, tuple, dictionary, or set</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="s2">"Hola"</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="s2">""</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">lista</span><span class="p">))</span>',
          '',
          '<span class="n">lista</span> <span class="o">=</span> <span class="p">[]</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">lista</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">tupla</span><span class="p">))</span>',
          '',
          '<span class="n">tupla</span> <span class="o">=</span> <span class="p">()</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">tupla</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span><span class="p">,</span>',
          '  <span class="s2">"colors"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"red"</span><span class="p">,</span> <span class="s2">"white"</span><span class="p">,</span> <span class="s2">"blue"</span><span class="p">]</span>',
          '<span class="p">}</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">diccionario</span><span class="p">))</span>',
          '',
          '<span class="n">diccionario</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">diccionario</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set_</span> <span class="o">=</span> <span class="p">{</span><span class="s1">\'item0\'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">5.3</span><span class="p">,</span> <span class="s2">"item4"</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mf">6.6</span><span class="p">}</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">set_</span><span class="p">))</span>',
          '',
          '<span class="n">set_</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">set_</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.7.-Binaries">2.7. Binaries<a class="anchor-link" href="#2.7.-Binaries"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.7.1.-Bytes">2.7.1. Bytes<a class="anchor-link" href="#2.7.1.-Bytes"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>bytes</code> type is an immutable sequence of bytes. Only ASCII characters are supported. Bytes can also be represented by integers whose values must satisfy <code>0 &lt;= x &lt; 256</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To create a byte type we must first enter the character <code>b</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">byte</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">"MaximoFN"</span>',
          '<span class="n">byte</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'b\'MaximoFN\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>They can also be created using its <code>bytes()</code> contructor.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">byte</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>',
          '<span class="n">byte</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'b\'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">byte</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>',
          '<span class="n">byte</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'b\'\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Bytes can be concatenated using the <code>+</code> operator.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">byte1</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">\'DeepMax\'</span>',
          '<span class="n">byte2</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">\'FN\'</span>',
          '<span class="n">byte3</span> <span class="o">=</span> <span class="n">byte1</span> <span class="o">+</span> <span class="n">byte2</span>',
          '<span class="n">byte3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'b\'DeepMaxFN\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or by repeating with the operator <code>*</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">byte1</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">\'MaximoFN \'</span>',
          '<span class="n">byte2</span> <span class="o">=</span> <span class="n">byte1</span> <span class="o">*</span> <span class="mi">3</span>',
          '<span class="n">byte2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'b\'MaximoFN MaximoFN MaximoFN \'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can check if a character is inside the string</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="sa">b</span><span class="s1">\'D\'</span> <span class="ow">in</span> <span class="n">byte1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>These are the <a href="https://plataforma.josedomingo.org/pledin/cursos/python3/curso/u30/#m%C3%A9todos-de-bytes-y-bytearray">methods</a> that can be used in the <code>bytes</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.7.2.-Bytearray">2.7.2. Bytearray<a class="anchor-link" href="#2.7.2.-Bytearray"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>bytearray</code>s are the same as <code>bytes</code> only they are mutable.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">byte_array</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="sa">b</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span>',
          '<span class="n">byte_array</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'bytearray(b\'MaximoFN\')',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.7.3.-Memoryview">2.7.3. Memoryview<a class="anchor-link" href="#2.7.3.-Memoryview"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Memoryview objects allow Python code to access the internal data of an object that supports the buffer protocol without making copies.</p>
      <p>The <code>memoryview()</code> function allows direct read and write access to the byte-oriented data of an object without the need to copy it first. This can generate large performance gains when operating on large objects, since it does not create a copy when cutting.</p>
      <p>Buffer protocol, you can create another access object to modify large data without copying it. This makes the program use less memory and increases execution speed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">byte_array</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="s1">\'XYZ\'</span><span class="p">,</span> <span class="s1">\'utf-8\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Antes de acceder a la memoria: </span><span class="si">{</span><span class="n">byte_array</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '',
          '<span class="n">mem_view</span> <span class="o">=</span> <span class="nb">memoryview</span><span class="p">(</span><span class="n">byte_array</span><span class="p">)</span>',
          '',
          '<span class="n">mem_view</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span> <span class="mi">74</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Despu√©s de acceder a la memoria: </span><span class="si">{</span><span class="n">byte_array</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Antes de acceder a la memoria: bytearray(b\'XYZ\')',
          'Despu√©s de acceder a la memoria: bytearray(b\'XYJ\')',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="3.-Operators">3. Operators<a class="anchor-link" href="#3.-Operators"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.1.-Arithmetic-operators">3.1. Arithmetic operators<a class="anchor-link" href="#3.1.-Arithmetic-operators"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Sum operator <code>+</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">3</span> <span class="o">+</span> <span class="mi">5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '8',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Oeprador subtracts <code>-</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">3</span> <span class="o">-</span> <span class="mi">5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '-2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Multiplication operator <code>*</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">3</span> <span class="o">*</span> <span class="mi">5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '15',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator division <code>/</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">3</span> <span class="o">/</span> <span class="mi">5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0.6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Modulo operator <code>%</code>. Returns the remainder of a division</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">25</span> <span class="o">%</span> <span class="mi">2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Exponent operator <code>**</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">5</span> <span class="o">**</span> <span class="mi">2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '25',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Integer division operator <code>//</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">25</span> <span class="o">//</span> <span class="mi">2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '12',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.2.-Comparison-operators">3.2. Comparison operators<a class="anchor-link" href="#3.2.-Comparison-operators"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operator equals <code>==</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator is different <code>!=</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">1</span> <span class="o">!=</span> <span class="mi">2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator is greater than <code>&gt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">3</span> <span class="o">&gt;</span> <span class="mi">2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator is less than <code>&lt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">2</span> <span class="o">&lt;</span> <span class="mi">3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator is greater than or equal to <code>&gt;=</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">3</span> <span class="o">&gt;=</span> <span class="mi">3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator is less than or equal to <code>&lt;=</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">3</span> <span class="o">&lt;=</span> <span class="mi">3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.3.-Logical-operators">3.3. Logical operators<a class="anchor-link" href="#3.3.-Logical-operators"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>and</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kc">True</span> <span class="ow">and</span> <span class="kc">True</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>or</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kc">True</span> <span class="ow">or</span> <span class="kc">False</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>not</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="ow">not</span> <span class="kc">False</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.4.-Identity-operators">3.4. Identity operators<a class="anchor-link" href="#3.4.-Identity-operators"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>is</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mf">5.3</span> <span class="ow">is</span> <span class="mf">5.3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>is not` operator</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mf">5.3</span> <span class="ow">is</span> <span class="ow">not</span> <span class="mi">5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.5.-Membership-operators">3.5. Membership operators<a class="anchor-link" href="#3.5.-Membership-operators"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>in</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">]</span>',
          '',
          '<span class="s2">"banana"</span> <span class="ow">in</span> <span class="n">x</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Not in` operator</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">]</span>',
          '',
          '<span class="s2">"orange"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">x</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.6.-Bitwise-operators">3.6. Bitwise operators<a class="anchor-link" href="#3.6.-Bitwise-operators"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>AND operator <code>&amp;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span><span class="p">;</span>        <span class="c1"># 12 = 0000 1100</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '12',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>OR operator <code>|</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">|</span> <span class="n">b</span><span class="p">;</span>        <span class="c1"># 61 = 0011 1101</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '61',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>XOR operator <code>^</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="p">;</span>        <span class="c1"># 49 = 0011 0001</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '49',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>NOT operator <code>~</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="o">~</span><span class="n">a</span><span class="p">;</span>           <span class="c1"># -61 = 1100 0011</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '-61',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator shift left <code>&lt;&lt;</code> operator</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">;</span>       <span class="c1"># 240 = 1111 0000</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '240',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Right shift operator <code>&gt;&gt;&gt;</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">;</span>       <span class="c1"># 15 = 0000 1111</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '15',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.7.-Assignment-operators">3.7. Assignment operators<a class="anchor-link" href="#3.7.-Assignment-operators"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>=</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '5',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>+=</code>. <code>x += y</code> is equivalent to <code>x = x + y</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">+=</span> <span class="mi">5</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '10',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>-=</code>. <code>x -= y</code> is equivalent to `x = x - y</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">-=</span> <span class="mi">5</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '5',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>*=</code>. <code>x *= y</code> is equivalent to `x = x * y</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">*=</span> <span class="mi">3</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '15',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>/=</code>. <code>x /= y</code> is equivalent to `x = x / y</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">/=</span> <span class="mi">3</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '5.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>%=</code>. <code>x %= y</code> is equivalent to `x = x % y</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">25</span>',
          '<span class="n">a</span> <span class="o">%=</span> <span class="mi">2</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>//=</code>. <code>x //= y</code> is equivalent to `x = x // y</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">25</span>',
          '<span class="n">a</span> <span class="o">//=</span> <span class="mi">2</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '12',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>**=</code>. <code>x **= y</code> is equivalent to `x = x ** ** y</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>',
          '<span class="n">a</span> <span class="o">**=</span> <span class="mi">2</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '25',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>&amp;=</code>. <code>x &amp;= y</code> is equivalent to `x = x &amp; y</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
          '',
          '<span class="n">a</span> <span class="o">&amp;=</span> <span class="n">b</span><span class="p">;</span>           <span class="c1"># 12 = 0000 1100</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '12',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>|=</code>. <code>x |= y</code> is equivalent to `x = x | y</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
          '',
          '<span class="n">a</span> <span class="o">|=</span> <span class="n">b</span><span class="p">;</span>           <span class="c1"># 61 = 0011 1101</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '61',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>^=</code>. <code>x ^= y</code> is equivalent to `x = x ^ y</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
          '',
          '<span class="n">a</span> <span class="o">^=</span> <span class="n">b</span><span class="p">;</span>           <span class="c1"># 49 = 0011 0001</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '49',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>&gt;&gt;=</code>. <code>x &gt;&gt;= y</code> is equivalent to `x = x &gt;&gt; y</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '',
          '<span class="n">a</span> <span class="o">&lt;&lt;=</span> <span class="mi">2</span><span class="p">;</span>          <span class="c1"># 240 = 1111 0000</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '240',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>&lt;&lt;=</code>. <code>x &lt;&lt;= y</code> is equivalent to `x = x &lt;&lt;&lt; y</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '',
          '<span class="n">a</span> <span class="o">&gt;&gt;=</span> <span class="mi">2</span><span class="p">;</span>          <span class="c1"># 15 = 0000 1111</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '15',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Flow-control">Flow control<a class="anchor-link" href="#Flow-control"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To be able to use the flow control tools it is necessary to add the statement, colon <code>:</code> and in a new line write the code with indentation</p>
      <p>Unlike other languages, Python requires indentation (adding whitespace) to define the code inside a flow control tool.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="If">If<a class="anchor-link" href="#If"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Using <code>if</code> we can create conditions</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">==</span> <span class="mi">8</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene 8 caracteres\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want to create more than one condition we can use <code>elif</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene menos de 8 caracteres\'</span><span class="p">)</span>',
          '<span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">==</span> <span class="mi">8</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene 8 caracteres\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If what we want is that something is executed in case none of the indicated conditions is fulfilled, we can use <code>else</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene menos de 8 caracteres\'</span><span class="p">)</span>',
          '<span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene m√°s de 8 caracteres\'</span><span class="p">)</span>',
          '<span class="k">else</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene 8 caracteres\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want to write everything on a single line</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">==</span> <span class="mi">8</span><span class="p">:</span> <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene 8 caracteres\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The same, if we want to write everything in one line, but with several conditions</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene menos de 8 caracteres\'</span><span class="p">)</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">8</span> <span class="k">else</span> <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene m√°s de 8 caracteres\'</span><span class="p">)</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">8</span> <span class="k">else</span> <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene 8 caracteres\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If for example we want to make the <code>if</code> structure but we do not want, for the moment, to code one of the conditions we can use <code>pass</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene menos de 8 caracteres\'</span><span class="p">)</span>',
          '<span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="p">:</span>',
          '  <span class="k">pass</span>',
          '<span class="k">else</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene 8 caracteres\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.2.-While">4.2. While<a class="anchor-link" href="#4.2.-While"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>while</code> loop is executed as long as the condition is <code>True</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
          '  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want the loop to stop for some condition we use <code>break</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span>',
          '  <span class="k">if</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s1">\'F\'</span><span class="p">:</span>',
          '    <span class="k">break</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
          '  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Maximo',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want one of the iterations not to be executed for some reason we use <code>continue</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">string</span> <span class="o">=</span> <span class="s1">\'Maximo FN\'</span>',
          '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span>',
          '  <span class="k">if</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s1">\' \'</span><span class="p">:</span>',
          '    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
          '    <span class="k">continue</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
          '  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Using <code>else</code> you can execute a code block if the <code>while</code> condition is not <code>True</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '',
          '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
          '  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
          '<span class="k">else</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">Se ha terminado el while"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
          'Se ha terminado el while',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.3.-For">4.3. For<a class="anchor-link" href="#4.3.-For"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>for</code> loop is used to execute code while iterating through a sequence, this sequence can be any iterable Python element (<code>string</code>, <code>list</code>, <code>tuple</code>, <code>range</code>, <code>dictionary</code>, <code>set</code>).</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s1">\'M\'</span><span class="p">,</span> <span class="s1">\'a\'</span><span class="p">,</span> <span class="s1">\'x\'</span><span class="p">,</span> <span class="s1">\'i\'</span><span class="p">,</span> <span class="s1">\'m\'</span><span class="p">,</span> <span class="s1">\'o\'</span><span class="p">,</span> <span class="s1">\'F\'</span><span class="p">,</span> <span class="s1">\'N\'</span><span class="p">]</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">lista</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">\'M\'</span><span class="p">,</span> <span class="s1">\'a\'</span><span class="p">,</span> <span class="s1">\'x\'</span><span class="p">,</span> <span class="s1">\'i\'</span><span class="p">,</span> <span class="s1">\'m\'</span><span class="p">,</span> <span class="s1">\'o\'</span><span class="p">,</span> <span class="s1">\'F\'</span><span class="p">,</span> <span class="s1">\'N\'</span><span class="p">)</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">tupla</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '',
          '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"letra1"</span><span class="p">:</span> <span class="s2">"M"</span><span class="p">,</span>',
          '  <span class="s2">"letra2"</span><span class="p">:</span> <span class="s2">"a"</span><span class="p">,</span>',
          '  <span class="s2">"letra3"</span><span class="p">:</span> <span class="s2">"x"</span><span class="p">,</span>',
          '  <span class="s2">"letra4"</span><span class="p">:</span> <span class="s2">"i"</span><span class="p">,</span>',
          '  <span class="s2">"letra5"</span><span class="p">:</span> <span class="s2">"m"</span><span class="p">,</span>',
          '  <span class="s2">"letra6"</span><span class="p">:</span> <span class="s2">"o"</span><span class="p">,</span>',
          '  <span class="s2">"letra7"</span><span class="p">:</span> <span class="s2">"F"</span><span class="p">,</span>',
          '  <span class="s2">"letra8"</span><span class="p">:</span> <span class="s2">"N"</span><span class="p">,</span>',
          '<span class="p">}</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">diccionario</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>You can also iterate through the <code>set</code>s, but since they are unordered elements, you have no control over the order of execution.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set_</span> <span class="o">=</span> <span class="p">{</span><span class="s1">\'M\'</span><span class="p">,</span> <span class="s1">\'a\'</span><span class="p">,</span> <span class="s1">\'x\'</span><span class="p">,</span> <span class="s1">\'i\'</span><span class="p">,</span> <span class="s1">\'m\'</span><span class="p">,</span> <span class="s1">\'o\'</span><span class="p">,</span> <span class="s1">\'F\'</span><span class="p">,</span> <span class="s1">\'N\'</span><span class="p">}</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">set_</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'NximoaMF',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want the loop to stop for some condition we use <code>break</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
          '  <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="s1">\'F\'</span><span class="p">:</span>',
          '    <span class="k">break</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span> ',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Maximo',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want one of the iterations not to be executed for some reason we use <code>continue</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">\'Maximo FN\'</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
          '  <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="s1">\' \'</span><span class="p">:</span>',
          '    <span class="k">continue</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span> ',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Using <code>else</code> you can execute a code block if the <code>while</code> condition is not <code>True</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span> ',
          '<span class="k">else</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">Se ha terminado el for"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
          'Se ha terminado el for',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If, for example, we want to make the <code>for</code> structure but we do not want to code the interior for the moment, we can use <code>pass</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
          '  <span class="k">pass</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s1">\'Interior del for no codificado\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Interior del for no codificado',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="5.-Functions">5. Functions<a class="anchor-link" href="#5.-Functions"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A function is a piece of code that can be executed as many times as you want. It can be passed arguments and can return data as a result.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To define a function, start with the reserved word <code>def</code> followed by the function name, parentheses <code>()</code>, colon <code>:</code> and then in a new line indented the function code</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
      '        <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>







      
      <section class="section-block-markdown-cell">
      <p>To call the function it is only necessary to type its name</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span>',
          '</span><span class="n">funcion</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>You can pass as many arguments as you want to the functions, inside the parenthesis and separated by commas.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="n">string1</span><span class="p">,</span> <span class="n">string2</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">string1</span> <span class="o">+</span> <span class="s1">\' \'</span> <span class="o">+</span> <span class="n">string2</span><span class="p">)</span>',
          '',
          '<span class="n">funcion</span><span class="p">(</span><span class="s2">"Hola"</span><span class="p">,</span> <span class="s2">"MaximoFN"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>When calling the function you must pass the same number of arguments that have been declared, if you pass more or less you will get an error.</p>
      <p>If we do not know the arguments that the function is going to receive, we can use <code>*args</code>, that is, putting an <code>*</code> before the arguments indicates that the number of arguments is free.</p>
      <p>This is done by passing a <code>tuple</code> (remember that it is immutable) with the arguments</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="o">*</span><span class="n">argumentos</span><span class="p">):</span>',
          '  <span class="n">numero_argumentos</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">argumentos</span><span class="p">)</span>',
          '',
          '  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">numero_argumentos</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">argumentos</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '',
          '<span class="n">funcion</span><span class="p">(</span><span class="s2">"funcion"</span><span class="p">,</span> <span class="s2">"con"</span><span class="p">,</span> <span class="s2">"varios"</span><span class="p">,</span> <span class="s2">"argumentos"</span><span class="p">,</span> <span class="s2">"sin"</span><span class="p">,</span> <span class="s2">"especificar"</span><span class="p">,</span> <span class="s2">"cuantos"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'funcion con varios argumentos sin especificar cuantos ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In case we do not know the order of the arguments of a function, we can indicate the argument we want to pass to it by indicating its name</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="n">argumento1</span><span class="p">,</span> <span class="n">argumento2</span><span class="p">,</span> <span class="n">argumento3</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">argumento1</span> <span class="o">+</span> <span class="s1">\' \'</span><span class="o">+</span> <span class="n">argumento2</span> <span class="o">+</span> <span class="s1">\' \'</span> <span class="o">+</span> <span class="n">argumento3</span><span class="p">)</span>',
          '',
          '<span class="n">funcion</span><span class="p">(</span><span class="n">argumento3</span> <span class="o">=</span> <span class="s2">"MaximoFN"</span><span class="p">,</span> <span class="n">argumento1</span> <span class="o">=</span> <span class="s2">"Blog"</span><span class="p">,</span> <span class="n">argumento2</span> <span class="o">=</span> <span class="s2">"de"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Blog de MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In case you want to pass the arguments with their name, but in case you don't know how many arguments will be passed, you can use <code>**kargs</code>. In this case a dictionary with the arguments will be passed to you.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="o">**</span><span class="n">kargumentos</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Autor del blog: "</span> <span class="o">+</span> <span class="n">kargumentos</span><span class="p">[</span><span class="s2">"autor"</span><span class="p">])</span>',
          '',
          '<span class="n">funcion</span><span class="p">(</span><span class="n">blog</span> <span class="o">=</span> <span class="s2">"Blog"</span><span class="p">,</span> <span class="n">pertenencia</span> <span class="o">=</span> <span class="s2">"de"</span><span class="p">,</span> <span class="n">autor</span> <span class="o">=</span> <span class="s2">"MaximoFN"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Autor del blog: MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want some argument to have a default value we can indicate it between the parenthesis of the function. This way if at the time of calling the function this argument is not passed, this in the function will have the value by default</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="n">argumento1</span><span class="p">,</span> <span class="n">argumento2</span><span class="p">,</span> <span class="n">argumento3</span> <span class="o">=</span> <span class="s2">"MaximoFN"</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">argumento1</span> <span class="o">+</span> <span class="s1">\' \'</span><span class="o">+</span> <span class="n">argumento2</span> <span class="o">+</span> <span class="s1">\' \'</span> <span class="o">+</span> <span class="n">argumento3</span><span class="p">)</span>',
          '',
          '<span class="n">funcion</span><span class="p">(</span><span class="s2">"Blog"</span><span class="p">,</span> <span class="s2">"de"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Blog de MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>You can pass any type of data as an argument, for example if you pass a <code>list</code> as an argument, inside the function, this argument will be treated as a <code>list</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="n">argumento</span><span class="p">):</span>',
          '  <span class="n">longitud_lista</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">argumento</span><span class="p">)</span>',
          '',
          '  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">longitud_lista</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">argumento</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '',
          '<span class="n">funcion</span><span class="p">([</span><span class="s2">"Blog"</span><span class="p">,</span> <span class="s2">"de"</span><span class="p">,</span> <span class="s2">"MaximoFN"</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Blog de MaximoFN ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Functions can return data, this is done by means of the reserved word <code>return</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="n">argumento</span><span class="p">):</span>',
          '  <span class="n">longitud_lista</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">argumento</span><span class="p">)</span>',
          '  <span class="n">string</span> <span class="o">=</span> <span class="s2">""</span>',
          '',
          '  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">longitud_lista</span><span class="p">):</span>',
          '    <span class="n">string</span> <span class="o">=</span> <span class="n">string</span> <span class="o">+</span> <span class="n">argumento</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="s1">\' \'</span>',
          '',
          '  <span class="k">return</span> <span class="n">string</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">funcion</span><span class="p">([</span><span class="s2">"Blog"</span><span class="p">,</span> <span class="s2">"de"</span><span class="p">,</span> <span class="s2">"MaximoFN"</span><span class="p">]))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Blog de MaximoFN ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>More than one data can be returned</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="n">argumento</span><span class="p">):</span>',
          '  <span class="n">longitud_lista</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">argumento</span><span class="p">)</span>',
          '  <span class="n">string0</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
          '  <span class="n">string1</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
          '  <span class="n">string2</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>',
          '',
          '  <span class="k">return</span> <span class="n">string0</span><span class="p">,</span> <span class="n">string1</span><span class="p">,</span> <span class="n">string2</span>',
          '',
          '<span class="n">dato0</span><span class="p">,</span> <span class="n">dato1</span><span class="p">,</span> <span class="n">dato2</span> <span class="o">=</span> <span class="n">funcion</span><span class="p">([</span><span class="s2">"Blog"</span><span class="p">,</span> <span class="s2">"de"</span><span class="p">,</span> <span class="s2">"MaximoFN"</span><span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">dato0</span> <span class="o">+</span> <span class="s1">\' \'</span> <span class="o">+</span> <span class="n">dato1</span> <span class="o">+</span> <span class="s1">\' \'</span> <span class="o">+</span> <span class="n">dato2</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Blog de MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we are not interested in one of the returned data, we can skip it by <code>_</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="n">argumento</span><span class="p">):</span>',
          '  <span class="n">longitud_lista</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">argumento</span><span class="p">)</span>',
          '  <span class="n">string0</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
          '  <span class="n">string1</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
          '  <span class="n">string2</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>',
          '',
          '  <span class="k">return</span> <span class="n">string0</span><span class="p">,</span> <span class="n">string1</span><span class="p">,</span> <span class="n">string2</span>',
          '',
          '<span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">dato_de_interes</span> <span class="o">=</span> <span class="n">funcion</span><span class="p">([</span><span class="s2">"Blog"</span><span class="p">,</span> <span class="s2">"de"</span><span class="p">,</span> <span class="s2">"MaximoFN"</span><span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">dato_de_interes</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If for example we want to make the structure of the function but we do not want, for the moment, to code the interior we can use <code>pass</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
      '        <span class="k">pass</span>',
      '      ',
      '      <span class="n">funcion</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>









      
      <section class="section-block-markdown-cell">
      <p>A function can call itself, this is called function recursion or function recursion.</p>
      <p>For example, we can use this quality to calculate the factorial of a number</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="k">pass</span>',
          '',
          '<span class="n">funcion</span><span class="p">()</span>',
          '</span><span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>',
          '  <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>',
          '    <span class="k">return</span> <span class="mi">1</span>',
          '  <span class="k">else</span><span class="p">:</span>',
          '    <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>',
          '',
          '<span class="n">factorial</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '120',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.1.-Built-in-functions">5.1. Built in functions<a class="anchor-link" href="#5.1.-Built-in-functions"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>There are a number of functions already defined in Python that can be used, for example the <code>abs()</code> function, which returns the absolute value</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">abs</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '5',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The following is a list of these functions</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">builtins</span>',
          '',
          '<span class="nb">dir</span><span class="p">(</span><span class="n">builtins</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'ArithmeticError\',',
          ' \'AssertionError\',',
          ' \'AttributeError\',',
          ' \'BaseException\',',
          ' \'BlockingIOError\',',
          ' \'BrokenPipeError\',',
          ' \'BufferError\',',
          ' \'BytesWarning\',',
          ' \'ChildProcessError\',',
          ' \'ConnectionAbortedError\',',
          ' \'ConnectionError\',',
          ' \'ConnectionRefusedError\',',
          ' \'ConnectionResetError\',',
          ' \'DeprecationWarning\',',
          ' \'EOFError\',',
          ' \'Ellipsis\',',
          ' \'EnvironmentError\',',
          ' \'Exception\',',
          ' \'False\',',
          ' \'FileExistsError\',',
          ' \'FileNotFoundError\',',
          ' \'FloatingPointError\',',
          ' \'FutureWarning\',',
          ' \'GeneratorExit\',',
          ' \'IOError\',',
          ' \'ImportError\',',
          ' \'ImportWarning\',',
          ' \'IndentationError\',',
          ' \'IndexError\',',
          ' \'InterruptedError\',',
          ' \'IsADirectoryError\',',
          ' \'KeyError\',',
          ' \'KeyboardInterrupt\',',
          ' \'LookupError\',',
          ' \'MemoryError\',',
          ' \'ModuleNotFoundError\',',
          ' \'NameError\',',
          ' \'None\',',
          ' \'NotADirectoryError\',',
          ' \'NotImplemented\',',
          ' \'NotImplementedError\',',
          ' \'OSError\',',
          ' \'OverflowError\',',
          ' \'PendingDeprecationWarning\',',
          ' \'PermissionError\',',
          ' \'ProcessLookupError\',',
          ' \'RecursionError\',',
          ' \'ReferenceError\',',
          ' \'ResourceWarning\',',
          ' \'RuntimeError\',',
          ' \'RuntimeWarning\',',
          ' \'StopAsyncIteration\',',
          ' \'StopIteration\',',
          ' \'SyntaxError\',',
          ' \'SyntaxWarning\',',
          ' \'SystemError\',',
          ' \'SystemExit\',',
          ' \'TabError\',',
          ' \'TimeoutError\',',
          ' \'True\',',
          ' \'TypeError\',',
          ' \'UnboundLocalError\',',
          ' \'UnicodeDecodeError\',',
          ' \'UnicodeEncodeError\',',
          ' \'UnicodeError\',',
          ' \'UnicodeTranslateError\',',
          ' \'UnicodeWarning\',',
          ' \'UserWarning\',',
          ' \'ValueError\',',
          ' \'Warning\',',
          ' \'ZeroDivisionError\',',
          ' \'__IPYTHON__\',',
          ' \'__build_class__\',',
          ' \'__debug__\',',
          ' \'__doc__\',',
          ' \'__import__\',',
          ' \'__loader__\',',
          ' \'__name__\',',
          ' \'__package__\',',
          ' \'__spec__\',',
          ' \'abs\',',
          ' \'all\',',
          ' \'any\',',
          ' \'ascii\',',
          ' \'bin\',',
          ' \'bool\',',
          ' \'breakpoint\',',
          ' \'bytearray\',',
          ' \'bytes\',',
          ' \'callable\',',
          ' \'chr\',',
          ' \'classmethod\',',
          ' \'compile\',',
          ' \'complex\',',
          ' \'copyright\',',
          ' \'credits\',',
          ' \'delattr\',',
          ' \'dict\',',
          ' \'dir\',',
          ' \'display\',',
          ' \'divmod\',',
          ' \'enumerate\',',
          ' \'eval\',',
          ' \'exec\',',
          ' \'filter\',',
          ' \'float\',',
          ' \'format\',',
          ' \'frozenset\',',
          ' \'get_ipython\',',
          ' \'getattr\',',
          ' \'globals\',',
          ' \'hasattr\',',
          ' \'hash\',',
          ' \'help\',',
          ' \'hex\',',
          ' \'id\',',
          ' \'input\',',
          ' \'int\',',
          ' \'isinstance\',',
          ' \'issubclass\',',
          ' \'iter\',',
          ' \'len\',',
          ' \'license\',',
          ' \'list\',',
          ' \'locals\',',
          ' \'map\',',
          ' \'max\',',
          ' \'memoryview\',',
          ' \'min\',',
          ' \'next\',',
          ' \'object\',',
          ' \'oct\',',
          ' \'open\',',
          ' \'ord\',',
          ' \'pow\',',
          ' \'print\',',
          ' \'property\',',
          ' \'range\',',
          ' \'repr\',',
          ' \'reversed\',',
          ' \'round\',',
          ' \'set\',',
          ' \'setattr\',',
          ' \'slice\',',
          ' \'sorted\',',
          ' \'staticmethod\',',
          ' \'str\',',
          ' \'sum\',',
          ' \'super\',',
          ' \'tuple\',',
          ' \'type\',',
          ' \'vars\',',
          ' \'zip\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.2.-Documentation-of-a-function">5.2. Documentation of a function<a class="anchor-link" href="#5.2.-Documentation-of-a-function"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>An explanation of a function that we create can be added by means of a comment at the beginning of the function, this way when we call the <code>built in function</code> <code>help()</code> it will show us this explanation.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="s2">"Esta es la explicaci√≥n de la funci√≥n"</span>',
          '',
          '  <span class="kc">None</span>',
          '',
          '<span class="n">help</span><span class="p">(</span><span class="n">funcion</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Help on function funcion in module __main__:',
          'funcion()',
          '    Esta es la explicaci√≥n de la funci√≥n',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another option to see the explanation of the function is to use the <code>__doc__</code> method of the function</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">funcion</span><span class="o">.</span><span class="vm">__doc__</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'Esta es la explicaci√≥n de la funci√≥n\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.3.-Decorators">5.3. Decorators<a class="anchor-link" href="#5.3.-Decorators"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Decorators are a Python feature that allow you to add new features to a function.</p>
      <p>A decorator function is created that has another function as parameter. The decorator function then adds the new feature to the function it receives</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">decorador</span><span class="p">(</span><span class="n">parametro_funcion</span><span class="p">):</span>',
          '<span class="w">  </span><span class="sd">"""Agrega barritas arriba y abajo de la funcion"""</span>',
          '',
          '  <span class="k">def</span> <span class="nf">envoltorio</span><span class="p">():</span>',
          '<span class="w">    </span><span class="sd">"""Aplica las barritas al texto"""</span>',
          '',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"=================="</span><span class="p">)</span>',
          '    <span class="n">parametro_funcion</span><span class="p">()</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"=================="</span><span class="p">)</span>',
          '      ',
          '  <span class="k">return</span> <span class="n">envoltorio</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"MaximoFN"</span><span class="p">)</span>',
          '',
          '<span class="n">funcion_envoltorio</span> <span class="o">=</span> <span class="n">decorador</span><span class="p">(</span><span class="n">funcion</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="s1">\'Funci√≥n sin decoradores: \'</span><span class="p">)</span>',
          '<span class="n">funcion</span><span class="p">()</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="s1">\'</span><span class="se">\\n</span><span class="s1">Funci√≥n con decoradores: \'</span><span class="p">)</span>',
          '<span class="n">funcion_envoltorio</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Funci√≥n sin decoradores: ',
          'MaximoFN',
          'Funci√≥n con decoradores: ',
          '==================',
          'MaximoFN',
          '==================',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>But another more powerful way to use decorators is by using <code>@</code> and the decorator name before the function.</p>
      <p>That is, the decorator is first defined and then a function is called with the defined decorator</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">decorador2</span><span class="p">(</span><span class="n">parametro_funcion2</span><span class="p">):</span>',
          '<span class="w">  </span><span class="sd">"""Agrega barritas arriba y abajo de la funcion"""</span>',
          '',
          '  <span class="k">def</span> <span class="nf">envoltorio2</span><span class="p">():</span>',
          '<span class="w">    </span><span class="sd">"""Aplica las barritas al texto"""</span>',
          '',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"=================="</span><span class="p">)</span>',
          '    <span class="n">parametro_funcion2</span><span class="p">()</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"=================="</span><span class="p">)</span>',
          '      ',
          '  <span class="k">return</span> <span class="n">envoltorio2</span>',
          '',
          '<span class="nd">@decorador2</span>',
          '<span class="k">def</span> <span class="nf">funcion2</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"MaximoFN"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="s1">\'Funci√≥n con decoradores: \'</span><span class="p">)</span>',
          '<span class="n">funcion2</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Funci√≥n con decoradores: ',
          '==================',
          'MaximoFN',
          '==================',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.4.-*args-and-**kwargs.">5.4. <code>*args</code> and <code>**kwargs</code>.<a class="anchor-link" href="#5.4.-*args-and-**kwargs."><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>*args</code> and <code>**kwargs</code> are optional arguments that can be used when defining a function in Python. The syntax is as follows:</p>
      <div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">my_function</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
          <span class="c1"># function code here</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="5.4.1.-*args.">5.4.1. <code>*args</code>.<a class="anchor-link" href="#5.4.1.-*args."><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>*args</code> is used to send a variable number of arguments to a function. By using <code>*args</code>, you can send a variable number of arguments to the function without having to specify the exact number of arguments the function needs. The arguments are received by the function as a tuple.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">saludo</span><span class="p">(</span><span class="n">saludo</span><span class="p">,</span> <span class="o">*</span><span class="n">nombres</span><span class="p">):</span>',
          '    <span class="k">for</span> <span class="n">nombre</span> <span class="ow">in</span> <span class="n">nombres</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">saludo</span><span class="si">}</span><span class="s2">, </span><span class="si">{</span><span class="n">nombre</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">saludo</span><span class="p">(</span><span class="s2">"Hola"</span><span class="p">,</span> <span class="s2">"Alicia"</span><span class="p">,</span> <span class="s2">"Roberto"</span><span class="p">,</span> <span class="s2">"Carlos"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola, Alicia',
          'Hola, Roberto',
          'Hola, Carlos',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="5.4.2.-**kwargs.">5.4.2. <code>**kwargs</code>.<a class="anchor-link" href="#5.4.2.-**kwargs."><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>**kwargs</code> is used in the same way, but to send a variable number of keyword arguments to a function. By using <code>**kwargs</code>, you can send a variable number of arguments to the function, and specify the value of each argument using its name. The arguments are received by the function as a dictionary.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">saludo</span><span class="p">(</span><span class="n">saludo</span><span class="p">,</span> <span class="o">**</span><span class="n">personas</span><span class="p">):</span>',
          '    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">personas</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">saludo</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s2">, tu edad es </span><span class="si">{</span><span class="n">value</span><span class="si">}</span><span class="s2"> a√±os"</span><span class="p">)</span>',
          '',
          '<span class="n">saludo</span><span class="p">(</span><span class="s2">"Hola"</span><span class="p">,</span> <span class="n">Juan</span><span class="o">=</span><span class="mi">22</span><span class="p">,</span> <span class="n">Maria</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">Pedro</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola Juan, tu edad es 22 a√±os',
          'Hola Maria, tu edad es 32 a√±os',
          'Hola Pedro, tu edad es 25 a√±os',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Additional-functions">Additional functions<a class="anchor-link" href="#Additional-functions"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.1.-Functions-*call">6.1. Functions *call<a class="anchor-link" href="#6.1.-Functions-*call"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A <em>call</em> function is a small anonymous function.</p>
      <p>A <em>call</em> function can take any number of arguments, but it can only have one expression.</p>
      <p>The <em>lambda</em> functions are defined as follows:</p>
      <pre><code>    lambda arguments : expression</code></pre>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">x</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span> <span class="p">:</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">10</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '15',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">x</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="p">:</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '13',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The power of <em>lambda</em> is best shown when you use it as an anonymous function inside another function.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">myfunc</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>',
          '  <span class="k">return</span> <span class="k">lambda</span> <span class="n">a</span> <span class="p">:</span> <span class="n">a</span> <span class="o">*</span> <span class="n">n</span>',
          '',
          '<span class="n">mydoubler</span> <span class="o">=</span> <span class="n">myfunc</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>',
          '<span class="n">mytripler</span> <span class="o">=</span> <span class="n">myfunc</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"mydoubler: </span><span class="si">{</span><span class="n">mydoubler</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"mytripler: </span><span class="si">{</span><span class="n">mytripler</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'mydoubler: 22',
          'mytripler: 33',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.2.-Map-function">6.2. Map function<a class="anchor-link" href="#6.2.-Map-function"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>map</code> function allows you to apply a function to each element of an iterable structure.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion_mas_1</span><span class="p">(</span><span class="n">valor</span><span class="p">):</span>',
          '  <span class="k">return</span> <span class="n">valor</span> <span class="o">+</span> <span class="mi">1</span>',
          '',
          '<span class="n">lista_modificada</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">funcion_mas_1</span><span class="p">,</span> <span class="n">lista</span><span class="p">))</span>',
          '<span class="n">lista_modificada</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[2, 3, 4]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>This is equivalent to using <code>list comprehension</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista_modificada</span> <span class="o">=</span> <span class="p">[</span><span class="n">funcion_mas_1</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">lista</span><span class="p">]</span>',
          '<span class="n">lista_modificada</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[2, 3, 4]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.3.-Filter-function">6.3. Filter function<a class="anchor-link" href="#6.3.-Filter-function"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>filter</code> function allows you to select the elements of an iterable structure that meet a characteristic.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>',
          '',
          '<span class="k">def</span> <span class="nf">esPar</span><span class="p">(</span><span class="n">valor</span><span class="p">):</span>',
          '  <span class="k">return</span> <span class="n">valor</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>',
          '',
          '<span class="n">lista_filtrada</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="n">esPar</span><span class="p">,</span> <span class="n">lista</span><span class="p">))</span>',
          '<span class="n">lista_filtrada</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[2, 4, 6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>This is equivalent to using <code>list comprehension</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista_filtrada</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">lista</span> <span class="k">if</span> <span class="n">esPar</span><span class="p">(</span><span class="n">x</span><span class="p">)]</span>',
          '<span class="n">lista_filtrada</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[2, 4, 6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.4.-Function-reduce.">6.4. Function <code>reduce</code>.<a class="anchor-link" href="#6.4.-Function-reduce."><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>reduce</code> function allows cumulative tasks to be performed on iterable structures.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">reduce</span>',
          '',
          '<span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">33</span><span class="p">]</span>',
          '',
          '<span class="k">def</span> <span class="nf">acumular</span><span class="p">(</span><span class="n">valor</span><span class="p">,</span> <span class="n">acumulador</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'valor = </span><span class="si">{</span><span class="n">valor</span><span class="si">}</span><span class="s1">, acumulador = </span><span class="si">{</span><span class="n">acumulador</span><span class="si">}</span><span class="s1">, acumulacion = </span><span class="si">{</span><span class="n">valor</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">acumulador</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '  <span class="k">return</span> <span class="n">valor</span> <span class="o">+</span> <span class="n">acumulador</span>',
          '',
          '<span class="n">acumulacion</span> <span class="o">=</span> <span class="n">reduce</span><span class="p">(</span><span class="n">acumular</span><span class="p">,</span> <span class="n">lista</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'</span><span class="se">\\n</span><span class="s1">acumulacion = </span><span class="si">{</span><span class="n">acumulacion</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'valor = 1, acumulador = 22, acumulacion = 23',
          'valor = 23, acumulador = 33, acumulacion = 56',
          'acumulacion = 56',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.5.-Zip-function">6.5. Zip function<a class="anchor-link" href="#6.5.-Zip-function"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>With the <code>zip</code> function you can compress several iterable structures into a single one, that is, you can group several <em>A<sub>x</sub></em> structures into a single <em>B</em> structure. The <em>B</em> structure is formed by tuples of the elements of the <em>A<sub>x</sub></em> structures.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">nombres</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Manolo"</span><span class="p">,</span> <span class="s2">"Andres"</span><span class="p">,</span> <span class="s2">"Fernando"</span><span class="p">]</span>',
          '<span class="n">altura</span> <span class="o">=</span> <span class="p">[</span><span class="mi">181</span><span class="p">,</span> <span class="mi">178</span><span class="p">,</span> <span class="mi">180</span><span class="p">]</span>',
          '',
          '<span class="n">my_zip</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">nombres</span><span class="p">,</span> <span class="n">altura</span><span class="p">))</span>',
          '<span class="n">my_zip</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[(\'Manolo\', 181), (\'Andres\', 178), (\'Fernando\', 180)]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.5.-Generators">6.5. Generators<a class="anchor-link" href="#6.5.-Generators"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suppose we want to iterate over a sequence of numbers, but in a special way that does not offer us any kind of loop, we can solve this with the generators. To be able to do this, the generator function does not have to return the value with <code>return</code>, but with <code>yield</code> so that it knows that it has to continue iterating.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">iterador_custom</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>',
          '    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span> <span class="p">(</span><span class="n">N</span><span class="p">):</span>',
          '        <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>',
          '            <span class="k">yield</span> <span class="n">i</span>',
          '',
          '<span class="n">generador</span> <span class="o">=</span> <span class="n">iterador_custom</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>',
          '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">generador</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0',
          '3',
          '6',
          '9',
          '12',
          '15',
          '18',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We have just made an iterator for numbers multiples of 3</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.6.-High-order-functions">6.6. High order functions<a class="anchor-link" href="#6.6.-High-order-functions"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can create functions that receive other functions as parameters, so that the function that receives another function as parameter is called a high order function. Let's see an example</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">increment</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>',
          '    <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>',
          '',
          '<span class="k">def</span> <span class="nf">hof</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>',
          '    <span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">hof</span><span class="p">(</span><span class="n">increment</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '8',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="7.-Classes-and-objects">7. Classes and objects<a class="anchor-link" href="#7.-Classes-and-objects"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Python is an object-oriented programming language. Almost everything in Python is an object, with its properties and methods.</p>
      <p>A class is like an object constructor or a "blueprint" for creating objects.</p>
      <p>To create a class you use the reserved word <code>class</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span> <span class="nc">Clase</span><span class="p">:</span>',
      '        <span class="n">variable</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>







      
      <section class="section-block-markdown-cell">
      <p>Once the class has been created, you can create an object of this class</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Clase</span><span class="p">:</span>',
          '  <span class="n">variable</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '</span><span class="n">objeto</span> <span class="o">=</span> <span class="n">Clase</span><span class="p">()</span>',
          '<span class="n">Clase</span><span class="o">.</span><span class="n">variable</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'MaximoFN\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Normally classes have an initial function, which is executed when an object of the class is created. This function is called <em>dunder init</em> and is written <code>__init__()</code>. The function <em>dunder init</em> must always be passed the variable <code>self</code>, which indicates the class itself, and then, the variables that you want</p>
      <p>This function is used to initialize the variables of the classes, or to execute the code required when an object of the class is created.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Persona</span><span class="p">:</span>',
          '  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">edad</span><span class="p">):</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">nombre</span> <span class="o">=</span> <span class="n">nombre</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">edad</span> <span class="o">=</span> <span class="n">edad</span>',
          '',
          '<span class="n">objeto_persona</span> <span class="o">=</span> <span class="n">Persona</span><span class="p">(</span><span class="s2">"Miguel"</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">objeto_persona</span><span class="o">.</span><span class="n">nombre</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">objeto_persona</span><span class="o">.</span><span class="n">edad</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Miguel',
          '36',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In addition to the initial <em>dunder init</em> function, more functions can be created. These functions are called <em>methods</em> of the class. These <em>methods</em> must always be passed the variable <code>self</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Persona</span><span class="p">:</span>',
          '  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">edad</span><span class="p">):</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">nombre</span> <span class="o">=</span> <span class="n">nombre</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">edad</span> <span class="o">=</span> <span class="n">edad</span>',
          '',
          '  <span class="k">def</span> <span class="nf">saludar</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Hola mi nombre es </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">nombre</span><span class="si">}</span><span class="s1"> y tengo </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">edad</span><span class="si">}</span><span class="s1"> a√±os\'</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_persona</span> <span class="o">=</span> <span class="n">Persona</span><span class="p">(</span><span class="s2">"Miguel"</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_persona</span><span class="o">.</span><span class="n">saludar</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola mi nombre es Miguel y tengo 36 a√±os',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The variable <code>self</code> does not have to be called <code>self</code>, it can have any name, but within each class it must always be the same. But by convention we usually use <code>self</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Persona</span><span class="p">:</span>',
          '  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="n">yo_mismo</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">edad</span><span class="p">):</span>',
          '    <span class="n">yo_mismo</span><span class="o">.</span><span class="n">nombre</span> <span class="o">=</span> <span class="n">nombre</span>',
          '    <span class="n">yo_mismo</span><span class="o">.</span><span class="n">edad</span> <span class="o">=</span> <span class="n">edad</span>',
          '',
          '  <span class="k">def</span> <span class="nf">saludar</span><span class="p">(</span><span class="n">yo_mismo</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Hola mi nombre es </span><span class="si">{</span><span class="n">yo_mismo</span><span class="o">.</span><span class="n">nombre</span><span class="si">}</span><span class="s1"> y tengo </span><span class="si">{</span><span class="n">yo_mismo</span><span class="o">.</span><span class="n">edad</span><span class="si">}</span><span class="s1"> a√±os\'</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_persona</span> <span class="o">=</span> <span class="n">Persona</span><span class="p">(</span><span class="s2">"Miguel"</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_persona</span><span class="o">.</span><span class="n">saludar</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola mi nombre es Miguel y tengo 36 a√±os',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Object variables can be modified</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">objeto_persona</span><span class="o">.</span><span class="n">nombre</span> <span class="o">=</span> <span class="s1">\'Marta\'</span>',
          '<span class="n">objeto_persona</span><span class="o">.</span><span class="n">saludar</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola mi nombre es Marta y tengo 36 a√±os',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Even eliminate them</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">del</span> <span class="n">objeto_persona</span><span class="o">.</span><span class="n">nombre</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>You can also delete the entire object</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">del</span> <span class="n">objeto_persona</span><span class="o">.</span><span class="n">nombre</span>',
      '<span></span><span class="k">del</span> <span class="n">objeto_persona</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>If for example we want to make the structure of the class but we do not want, for the moment, to code the interior we can use <code>pass</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">del</span> <span class="n">objeto_persona</span><span class="o">.</span><span class="n">nombre</span>',
      '<span></span><span class="k">del</span> <span class="n">objeto_persona</span>',
      '<span></span><span class="k">class</span> <span class="nc">Persona</span><span class="p">:</span>',
      '        <span class="k">pass</span>',
      '      ',
      '      <span class="n">objeto_persona</span> <span class="o">=</span> <span class="n">Persona</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>









      
      <section class="section-block-markdown-cell">
      <h3 id="7.1.-Inheritance">7.1. Inheritance<a class="anchor-link" href="#7.1.-Inheritance"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Inheritance allows us to define a class that inherits all the methods and properties of another class.</p>
      <p>The <strong>parent class</strong> is the class from which it is inherited, also called <strong>base class</strong>.</p>
      <p>The <strong>child class</strong> is the class that inherits from another class, also called <strong>derived class</strong>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We create a parent class</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">del</span> <span class="n">objeto_persona</span><span class="o">.</span><span class="n">nombre</span>',
          '</span><span class="k">del</span> <span class="n">objeto_persona</span>',
          '</span><span class="k">class</span> <span class="nc">Persona</span><span class="p">:</span>',
          '  <span class="k">pass</span>',
          '',
          '<span class="n">objeto_persona</span> <span class="o">=</span> <span class="n">Persona</span><span class="p">()</span>',
          '</span><span class="k">class</span> <span class="nc">Persona</span><span class="p">:</span>',
          '  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">):</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">nombre</span> <span class="o">=</span> <span class="n">nombre</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">apellido</span> <span class="o">=</span> <span class="n">apellido</span>',
          '',
          '  <span class="k">def</span> <span class="nf">imprimir_nombre</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Me llamo </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">nombre</span><span class="si">}</span><span class="s1"> </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">apellido</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_padre</span> <span class="o">=</span> <span class="n">Persona</span><span class="p">(</span><span class="s2">"Laura"</span><span class="p">,</span> <span class="s2">"Perez"</span><span class="p">)</span>',
          '<span class="n">objeto_padre</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Me llamo Laura Perez',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>To create the child class you must indicate in parentheses, when declaring the class, which class it inherits from</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span> <span class="nc">Estudiante</span><span class="p">(</span><span class="n">Persona</span><span class="p">):</span>',
      '        <span class="k">pass</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>







      
      <section class="section-block-markdown-cell">
      <p>And when creating the object of the child class, the parameters that the parent class needs are passed to it</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Estudiante</span><span class="p">(</span><span class="n">Persona</span><span class="p">):</span>',
          '  <span class="k">pass</span>',
          '</span><span class="n">objeto_hijo</span> <span class="o">=</span> <span class="n">Estudiante</span><span class="p">(</span><span class="s2">"Mariano"</span><span class="p">,</span> <span class="s2">"Sanz"</span><span class="p">)</span>',
          '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Me llamo Mariano Sanz',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>So far the child class has inherited the functions of the parent class, but we can modify them by rewriting them. For example by rewriting the <em>duder init</em> function.</p>
      <p>If the <em>dunder init</em> function is rewritten, if we want the <em>dunder init</em> function of the parent class to be called, it must be called.</p>
      <p>There are two ways to do this, one is through the name of the parent class, in this case you have to pass the variable <code>self</code> to it.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Estudiante</span><span class="p">(</span><span class="n">Persona</span><span class="p">):</span>',
          '  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">):</span>',
          '    <span class="n">Persona</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_hijo</span> <span class="o">=</span> <span class="n">Estudiante</span><span class="p">(</span><span class="s2">"Mariano"</span><span class="p">,</span> <span class="s2">"Sanz"</span><span class="p">)</span>',
          '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Me llamo Mariano Sanz',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another way is through <code>super()</code>, in this case it is not necessary to pass the variable <code>self</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Estudiante</span><span class="p">(</span><span class="n">Persona</span><span class="p">):</span>',
          '  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">):</span>',
          '    <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_hijo</span> <span class="o">=</span> <span class="n">Estudiante</span><span class="p">(</span><span class="s2">"Mariano"</span><span class="p">,</span> <span class="s2">"Sanz"</span><span class="p">)</span>',
          '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Me llamo Mariano Sanz',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>New code can be added when modifying functions</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Estudiante</span><span class="p">(</span><span class="n">Persona</span><span class="p">):</span>',
          '  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">,</span> <span class="n">curso</span><span class="p">):</span>',
          '    <span class="n">Persona</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">)</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">curso</span> <span class="o">=</span> <span class="n">curso</span>',
          '',
          '  <span class="k">def</span> <span class="nf">imprimir_nombre</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="n">Persona</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Estoy en el curso n√∫mero </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">curso</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_hijo</span> <span class="o">=</span> <span class="n">Estudiante</span><span class="p">(</span><span class="s2">"Mariano"</span><span class="p">,</span> <span class="s2">"Sanz"</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>',
          '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Me llamo Mariano Sanz',
          'Estoy en el curso n√∫mero 4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Finally, new methods can be added</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Estudiante</span><span class="p">(</span><span class="n">Persona</span><span class="p">):</span>',
          '  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">,</span> <span class="n">curso</span><span class="p">):</span>',
          '    <span class="n">Persona</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">)</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">curso</span> <span class="o">=</span> <span class="n">curso</span>',
          '',
          '  <span class="k">def</span> <span class="nf">imprimir_nombre</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="n">Persona</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Estoy en el curso n√∫mero </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">curso</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '',
          '  <span class="k">def</span> <span class="nf">imprimir_estudiante</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Soy un estudiante del curso n√∫mero </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">curso</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_hijo</span> <span class="o">=</span> <span class="n">Estudiante</span><span class="p">(</span><span class="s2">"Mariano"</span><span class="p">,</span> <span class="s2">"Sanz"</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>',
          '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
          '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_estudiante</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Me llamo Mariano Sanz',
          'Estoy en el curso n√∫mero 4',
          'Soy un estudiante del curso n√∫mero 4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.2.-Operator-overload">7.2. Operator overload<a class="anchor-link" href="#7.2.-Operator-overload"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can define basic operations, such as addition, between several objects of a class. For example, if we have a class that represents a vector, we can define addition and multiplication between objects of that class</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Vector</span><span class="p">:</span>',
          '    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>',
          '        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>',
          '        <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>',
          '    ',
          '    <span class="k">def</span> <span class="fm">__add__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="n">Vector</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">other</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">other</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>',
          '    ',
          '    <span class="k">def</span> <span class="fm">__mul__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="n">Vector</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">other</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">other</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>',
          '    ',
          '    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="sa">f</span><span class="s2">"Vector (</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="si">}</span><span class="s2">, </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">y</span><span class="si">}</span><span class="s2">)"</span>',
          '',
          '<span class="n">v1</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>',
          '<span class="n">v2</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">v1</span> <span class="o">+</span> <span class="n">v2</span><span class="p">)</span>  <span class="c1"># Vector (4, 6)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">v1</span> <span class="o">*</span> <span class="n">v2</span><span class="p">)</span>  <span class="c1"># Vector (3, 8)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Vector (4, 6)',
          'Vector (3, 8)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>All possible overload operations are:</p>
      <ul>
      <li><code>__add__(self, other)</code>: overloads the addition operator (<code>+</code>).</li>
      <li><code>__sub__(self, other)</code>: overloads the subtraction operator (<code>-</code>).</li>
      <li><code>__mul__(self, other)</code>: overloads the multiplication operator (<code>*</code>).</li>
      <li><code>__truediv__(self, other)</code>: overloads the division operator (<code>/</code>).</li>
      <li><code>__floordiv__(self, other)</code>: overloads the rounding division operator (<code>//</code>).</li>
      <li><code>__mod__(self, other)</code>: overloads the module operator (<code>%</code>).</li>
      <li><code>__divmod__(self, other)</code>: overloads the <code>divmod()</code> function.</li>
      <li><code>__pow__(self, other)</code>: overloads the power operator (<code>**</code>).</li>
      <li><code>__lshift__(self, other)</code>: overloads the left shift operator (<code>&lt;&lt;</code>).</li>
      <li><code>__rshift__(self, other)</code>: overloads the right shift operator (<code>&gt;&gt;</code>).</li>
      <li><code>__and__(self, other)</code>: overloads the and operator (<code>&amp;</code>).</li>
      <li><code>__or__(self, other)</code>: overloads the or operator (<code>|</code>).</li>
      <li><code>__xor__(self, other)</code>: overloads the xor operator (<code>^</code>).</li>
      <li><code>__lt__(self, other)</code>: overloads the comparison operator less than (<code>&lt;</code>).</li>
      <li><code>__le__(self, other)</code>: overloads the comparison operator less than or equal to (<code>&lt;=</code>).</li>
      <li><code>__eq__(self, other)</code>: overloads the comparison operator equal to (<code>==</code>).</li>
      <li><code>__ne__(self, other)</code>: overloads the comparison operator other than (<code>!=</code>).</li>
      <li><code>__gt__(self, other)</code>: overloads the comparison operator greater than (<code>&gt;</code>).</li>
      <li><code>__ge__(self, other)</code>: overloads the comparison operator greater than or equal to (<code>&gt;=</code>).</li>
      <li><code>__neg__(self)</code>: overloads the negation operator (<code>-</code>).</li>
      <li><code>__pos__(self)</code>: overloads the position operator (<code>+</code>).</li>
      <li><code>__abs__(self)</code>: overloads the <code>abs()</code> function.</li>
      <li><code>__invert__(self)</code>: overloads the inversion operator (<code>~</code>).</li>
      <li><code>__complex__(self)</code>: overloads the <code>complex()</code> function.</li>
      <li><code>__int__(self)</code>: overloads the <code>int()</code> function.</li>
      <li><code>__float__(self)</code>: overloads the <code>float()</code> function.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.3.-Custom-Iterators">7.3. Custom Iterators<a class="anchor-link" href="#7.3.-Custom-Iterators"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we have seen in section <a href="https://maximofn.com/introduccion-a-python/#2.-Tipos-de-datos-de-Python">2 (Python data types)</a>, there are some data types that can be iterated over. But we can make our own iterable class, as long as it has the <code>__len__</code> and <code>__getitem__</code> functions.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">custonIterator</span><span class="p">:</span>',
          '    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>',
          '        <span class="bp">self</span><span class="o">.</span><span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>',
          '    ',
          '    <span class="k">def</span> <span class="fm">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>',
          '    ',
          '    <span class="k">def</span> <span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>',
          '',
          '<span class="n">iterator</span> <span class="o">=</span> <span class="n">custonIterator</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">iterator</span><span class="p">))</span>  <span class="c1"># 10</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">iterator</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>  <span class="c1"># 0</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">iterator</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>  <span class="c1"># 1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '10',
          '0',
          '1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we can iterate with the object of our class with <code>for</code> loops e.g.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iterator</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">" "</span><span class="p">)</span>  <span class="c1"># 0 1 2 3 4 5 6 7 8 9</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0 1 2 3 4 5 6 7 8 9 ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.4.-Calling-objects-as-functions">7.4. Calling objects as functions<a class="anchor-link" href="#7.4.-Calling-objects-as-functions"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We may be interested in calling an object of a function as a class, this can be achieved by adding the <code>__call__</code> function to the class</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">potencia</span><span class="p">:</span>',
          '    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">base</span><span class="p">):</span>',
          '        <span class="bp">self</span><span class="o">.</span><span class="n">base</span> <span class="o">=</span> <span class="n">base</span>',
          '    ',
          '    <span class="k">def</span> <span class="fm">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">potencia</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">base</span> <span class="o">**</span> <span class="n">potencia</span>',
          '    ',
          '<span class="n">potencia_cuadrado</span> <span class="o">=</span> <span class="n">potencia</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">potencia_cuadrado</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>  <span class="c1"># 8</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '8',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.5.-Private-attributes-and-functions">7.5. Private attributes and functions<a class="anchor-link" href="#7.5.-Private-attributes-and-functions"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>When we create a class, we can make some attributes or functions private and not accessible from outside the class, for this we must add <code>__</code> before the attribute to class</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Privados</span><span class="p">:</span>',
          '    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '        <span class="bp">self</span><span class="o">.</span><span class="n">publico</span> <span class="o">=</span> <span class="s2">"Soy p√∫blico"</span>',
          '        <span class="bp">self</span><span class="o">.</span><span class="n">__privado</span> <span class="o">=</span> <span class="s2">"Soy privado"</span>',
          '    ',
          '    <span class="k">def</span> <span class="nf">getPrivado</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__privado</span>',
          '    ',
          '    <span class="k">def</span> <span class="nf">setPrivado</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">valor</span><span class="p">):</span>',
          '        <span class="bp">self</span><span class="o">.</span><span class="n">__privado</span> <span class="o">=</span> <span class="n">valor</span>',
          '    ',
          '    <span class="k">def</span> <span class="nf">__funcion_privada</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="s2">"Soy una funci√≥n privada"</span>',
          '    ',
          '    <span class="k">def</span> <span class="nf">funcion_publica</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__funcion_privada</span><span class="p">()</span>',
          '',
          '<span class="n">privados</span> <span class="o">=</span> <span class="n">Privados</span><span class="p">()</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Acceso al atributo publico: "</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>',
          '<span class="k">try</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">privados</span><span class="o">.</span><span class="n">publico</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">No se puede acceder al atributo privado"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Acceso al atributo privado: "</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>',
          '<span class="k">try</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">privados</span><span class="o">.</span><span class="n">__privado</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">No se puede acceder al atributo privado"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Acceso al atributo privado mediante el accesor: "</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>',
          '<span class="k">try</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">privados</span><span class="o">.</span><span class="n">getPrivado</span><span class="p">()</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">No se puede acceder al atributo privado mediante el accesor"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Llamada a la funci√≥n privada: "</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>',
          '<span class="k">try</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">privados</span><span class="o">.</span><span class="n">__funcion_privada</span><span class="p">()</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">No se puede llamar a la funci√≥n privada"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Llamada a la funci√≥n p√∫blica: "</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>',
          '<span class="k">try</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">privados</span><span class="o">.</span><span class="n">funcion_publica</span><span class="p">()</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">No se puede llamar a la funci√≥n p√∫blica"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Acceso al atributo publico: Soy p√∫blico',
          'Acceso al atributo privado: 	No se puede acceder al atributo privado',
          'Acceso al atributo privado mediante el accesor: Soy privado',
          'Llamada a la funci√≥n privada: 	No se puede llamar a la funci√≥n privada',
          'Llamada a la funci√≥n p√∫blica: Soy una funci√≥n privada',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="8.-Iterators">8. Iterators<a class="anchor-link" href="#8.-Iterators"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>An iterator is an object that contains a countable number of values.</p>
      <p>An iterator is an object that can be iterated over, which means that it can traverse all values.</p>
      <p>Technically, in Python, an iterator is an object that implements the iterator protocol, which consists of the <code>__iter__()</code> and <code>__next__()</code> methods.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Lists, tuples, dictionaries and sets are all iterable objects. They are iterable containers from which you can get an iterator.</p>
      <p>All these objects have a <code>iter()</code> method that is used to obtain an iterator:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"manzana"</span><span class="p">,</span> <span class="s2">"pl√°tano"</span><span class="p">,</span> <span class="s2">"cereza"</span><span class="p">)</span>',
          '<span class="n">iterable</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'manzana',
          'pl√°tano',
          'cereza',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"pl√°tano"</span>',
          '<span class="n">iterable</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'p l √° t a n o ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The <code>for</code> loop actually creates an iterator object and executes the <code>next()</code> method for each loop.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"manzana"</span><span class="p">,</span> <span class="s2">"pl√°tano"</span><span class="p">,</span> <span class="s2">"cereza"</span><span class="p">)</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">tupla</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'manzana',
          'pl√°tano',
          'cereza',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"pl√°tano"</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'p l √° t a n o ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.1.-Create-an-iterator-object">8.1. Create an iterator object<a class="anchor-link" href="#8.1.-Create-an-iterator-object"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To create an object/class as an iterator, the <code>__iter__()</code> and <code>__next__()</code> methods must be implemented.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Numeros</span><span class="p">:</span>',
          '  <span class="k">def</span> <span class="fm">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>',
          '    <span class="k">return</span> <span class="bp">self</span>',
          '',
          '  <span class="k">def</span> <span class="fm">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">a</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">+=</span> <span class="mi">1</span>',
          '    <span class="k">return</span> <span class="n">x</span>',
          '',
          '<span class="n">objeto_iterador</span> <span class="o">=</span> <span class="n">Numeros</span><span class="p">()</span>',
          '<span class="n">iterador</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">objeto_iterador</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterador</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterador</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterador</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterador</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterador</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1 2 3 4 5 ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The above example would continue forever if you had enough calls to <code>next()</code>, or if it were used in a <code>for</code> loop.</p>
      <p>To prevent the iteration from continuing forever, we can use the <code>StopIteration</code> statement.</p>
      <p>In the <code>__next__()</code> method, we can add a termination condition to generate an error if the iteration is performed a specified number of times:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Numeros</span><span class="p">:</span>',
          '  <span class="k">def</span> <span class="fm">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>',
          '    <span class="k">return</span> <span class="bp">self</span>',
          '',
          '  <span class="k">def</span> <span class="fm">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">&lt;=</span> <span class="mi">20</span><span class="p">:</span>',
          '      <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">a</span>',
          '      <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">+=</span> <span class="mi">1</span>',
          '      <span class="k">return</span> <span class="n">x</span>',
          '    <span class="k">else</span><span class="p">:</span>',
          '      <span class="k">raise</span> <span class="ne">StopIteration</span>',
          '',
          '<span class="n">objeto_iterador</span> <span class="o">=</span> <span class="n">Numeros</span><span class="p">()</span>',
          '<span class="n">iterador</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">objeto_iterador</span><span class="p">)</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">iterador</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.2.-Iterate-obtaining-the-index-and-value">8.2. Iterate obtaining the index and value<a class="anchor-link" href="#8.2.-Iterate-obtaining-the-index-and-value"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can iterate through an iterable object obtaining in each iteration its index and its value by means of the <code>enumerate()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"MaximoFN"</span>',
          '',
          '<span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">valor</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"En la posici√≥n </span><span class="si">{</span><span class="n">index</span><span class="si">}</span><span class="s2">, est√° el caracter </span><span class="si">{</span><span class="n">valor</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'En la posici√≥n 0, est√° el caracter M',
          'En la posici√≥n 1, est√° el caracter a',
          'En la posici√≥n 2, est√° el caracter x',
          'En la posici√≥n 3, est√° el caracter i',
          'En la posici√≥n 4, est√° el caracter m',
          'En la posici√≥n 5, est√° el caracter o',
          'En la posici√≥n 6, est√° el caracter F',
          'En la posici√≥n 7, est√° el caracter N',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.3.-Iterate-through-two-iterable-objects-at-the-same-time.">8.3. Iterate through two iterable objects at the same time.<a class="anchor-link" href="#8.3.-Iterate-through-two-iterable-objects-at-the-same-time."><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we have two iterable objects, whose length is the same, we can iterate through both at the same time using the <code>zip()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s1">\'MaximoFN__\'</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s1">\'PythonPost\'</span>',
          '',
          '<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">string1</span><span class="p">)</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">string2</span><span class="p">):</span>',
          '  <span class="k">for</span> <span class="n">valor1</span><span class="p">,</span> <span class="n">valor2</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">string1</span><span class="p">,</span> <span class="n">string2</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"En el primer string hay </span><span class="si">{</span><span class="n">valor1</span><span class="si">}</span><span class="s2">, en el segundo string hay </span><span class="si">{</span><span class="n">valor2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'En el primer string hay M, en el segundo string hay P',
          'En el primer string hay a, en el segundo string hay y',
          'En el primer string hay x, en el segundo string hay t',
          'En el primer string hay i, en el segundo string hay h',
          'En el primer string hay m, en el segundo string hay o',
          'En el primer string hay o, en el segundo string hay n',
          'En el primer string hay F, en el segundo string hay P',
          'En el primer string hay N, en el segundo string hay o',
          'En el primer string hay _, en el segundo string hay s',
          'En el primer string hay _, en el segundo string hay t',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="9.-Scope-of-variables">9. Scope of variables<a class="anchor-link" href="#9.-Scope-of-variables"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A variable is only available within the region in which it is created. This is called <em>scope</em>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.1.-Local-Scope">9.1. Local Scope<a class="anchor-link" href="#9.1.-Local-Scope"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A variable created within a function belongs to the local scope of that function and can only be used within that function.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '',
          '<span class="n">funcion</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '300',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The variable <code>x</code> is not available outside the function, but it is available for any function inside the function.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
          '  <span class="k">def</span> <span class="nf">funcion_interna</span><span class="p">():</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '  <span class="n">funcion_interna</span><span class="p">()</span>',
          '',
          '<span class="n">funcion</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '300',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.2.-Global-Scope">9.2. Global Scope<a class="anchor-link" href="#9.2.-Global-Scope"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A variable created in the main body of Python code is a global variable and belongs to the global scope.</p>
      <p>Global variables are available from any scope, global and local.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'√Åmbito local: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '',
          '<span class="n">funcion</span><span class="p">()</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'√Åmbito global: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '√Åmbito local: 300',
          '√Åmbito global: 300',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If two variables are created, one global and one local, both with the same name, Python will create them as two distinct variables</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="n">x</span> <span class="o">=</span> <span class="mi">200</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Variable local: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '',
          '<span class="n">funcion</span><span class="p">()</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Variable global: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Variable local: 200',
          'Variable global: 300',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If you need to create a global variable, but it is declared in the local scope, you can use the <code>global</code> keyword.</p>
      <p>The <code>global</code> keyword makes the variable global.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="k">global</span> <span class="n">x</span>',
          '  <span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
          '',
          '<span class="n">funcion</span><span class="p">()</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Variable global: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Variable global: 300',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In addition, the use of the <code>global</code> keyword makes a change to a global variable within a function.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="k">global</span> <span class="n">x</span>',
          '  <span class="n">x</span> <span class="o">=</span> <span class="mi">200</span>',
          '',
          '<span class="n">funcion</span><span class="p">()</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Variable global: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Variable global: 200',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="10.-Modules">10. Modules<a class="anchor-link" href="#10.-Modules"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A module is a file containing a set of functions that you want to include in your application.</p>
      <p>To create a module, simply save the code you want in a file with the file extension <code>.py</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Tip: In Jupyter notebooks (Colab is an online Jupyter notebook) if you type the <code>!</code> character before a command you can execute console commands</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First we are going to see in which directory we are, for that we use the <code>pwd</code> command (<em>print working directory</em>)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>pwd',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '/home/wallabot/Documentos/web/portafolio/posts',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We will create a folder to create our modules with the command <code>mkdir</code> (make directory)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>introduccion_python',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Next let's see what files are in our folder. We will do this using the <code>ls</code> (<em>list</em>) command.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>introduccion_python',
      '<span></span><span class="o">!</span>ls<span class="w"> </span>introduccion_python',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>We see that it is empty, we create a new <code>.py</code> file in which we are going to create our module</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>mkdir<span class="w"> </span>introduccion_python',
          '</span><span class="o">!</span>ls<span class="w"> </span>introduccion_python',
          '</span><span class="o">%%writefile</span> introduccion_python/modulo1.py',
          '',
          '<span class="k">def</span> <span class="nf">funcion_del_modulo</span><span class="p">(</span><span class="n">nombre</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Hola, "</span> <span class="o">+</span> <span class="n">nombre</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing introduccion_python/modulo1.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We go back to see what files are in our folder</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ls<span class="w"> </span>introduccion_python',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'modulo1.py  __pycache__',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that a <code>modulo1.py</code> file has been created. We can now use it</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To use an external module you must use the word <code>import</code>. To use the functions of the module you must put first the name of the module, a <code>.</code> and then the name of the function that you want to use</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">introduccion_python.modulo1</span>',
          '',
          '<span class="n">introduccion_python</span><span class="o">.</span><span class="n">modulo1</span><span class="o">.</span><span class="n">funcion_del_modulo</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola, MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want the module to have a specific name in our code, we can use the word <code>as</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">introduccion_python.modulo1</span> <span class="k">as</span> <span class="nn">mod1</span>',
          '',
          '<span class="n">mod1</span><span class="o">.</span><span class="n">funcion_del_modulo</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola, MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If the module has several functions, but we only want to import one we can by using the words <code>from</code> and <code>import</code>. The form would be</p>
      <pre><code>from &lt;module&gt; import &lt;function&gt;</code></pre>
      <p>In this case it is not necessary to indicate the name of the module when calling the function</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> introduccion_python/modulo2.py',
          '',
          '<span class="k">def</span> <span class="nf">funcion1_del_modulo</span><span class="p">(</span><span class="n">nombre</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Hola, "</span> <span class="o">+</span> <span class="n">nombre</span> <span class="o">+</span> <span class="s2">", funcion 1"</span><span class="p">)</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion2_del_modulo</span><span class="p">(</span><span class="n">nombre</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Hola, "</span> <span class="o">+</span> <span class="n">nombre</span> <span class="o">+</span> <span class="s2">", funcion 2"</span><span class="p">)</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion3_del_modulo</span><span class="p">(</span><span class="n">nombre</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Hola, "</span> <span class="o">+</span> <span class="n">nombre</span> <span class="o">+</span> <span class="s2">", funcion 3"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing introduccion_python/modulo2.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">introduccion_python.modulo2</span> <span class="kn">import</span> <span class="n">funcion2_del_modulo</span>',
          '',
          '<span class="n">funcion2_del_modulo</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola, MaximoFN, funcion 2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can use not only modules created by us, but also modules already installed (<code>built-in modules</code>).</p>
      <p>For example, we can use the <code>platform</code> module</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">platform</span>',
          '',
          '<span class="n">x</span> <span class="o">=</span> <span class="n">platform</span><span class="o">.</span><span class="n">system</span><span class="p">()</span>',
          '<span class="n">x</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'Linux\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="10.1.-Entry-points:-files-as-modules-and-not-as-scripts">10.1. Entry points: files as modules and not as scripts<a class="anchor-link" href="#10.1.-Entry-points:-files-as-modules-and-not-as-scripts"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We are now going to create a file called <code>modulo3.py</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> introduccion_python/modulo3.py',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Hola desde modulo3"</span><span class="p">)</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion_del_modulo</span><span class="p">():</span>',
          '  <span class="k">return</span> <span class="s2">"Hola desde la funci√≥n del modulo3"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting introduccion_python/modulo3.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we now import <code>module3.py</code> to use the <code>module_function</code> function let us see what happens</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">introduccion_python.modulo3</span> <span class="k">as</span> <span class="nn">mod3</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">mod3</span><span class="o">.</span><span class="n">funcion_del_modulo</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola desde modulo3',
          'Hola desde la funci√≥n del modulo3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that the <code>print</code> of <code>modulo3.py</code> has been executed, but it is not what we wanted, this is because when the file <code>modulo3.py</code> is called, python executes it as a script.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>But what if we want to run <code>introduction_python/main.py</code> as a script?</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>python<span class="w"> </span>introduccion_python/modulo3.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola desde modulo3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that only the <code>print</code> is executed, but not the <code>module_function</code> function. If we want to have the duality of functionality of the <code>module3.py</code> file, that is, we can import it from another module without running it as a script and run it alone and execute the function we want, we use an <code>entry point</code>. That is, use the condition <code>if __name__ == '__main__':</code> and then indicate what we want to be executed. Let's see it with an example, I am going to rewrite the file <code>modulo3.py</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> introduccion_python/modulo3.py',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Hola desde modulo3"</span><span class="p">)</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion_del_modulo</span><span class="p">():</span>',
          '  <span class="k">return</span> <span class="s2">"Hola desde la funci√≥n del modulo3"</span>',
          '',
          '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">"__main__"</span><span class="p">:</span>',
          '  <span class="n">funcion_del_modulo</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting introduccion_python/modulo3.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If I now call <code>main.py</code> from another module, the <code>print</code> will no longer be executed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">introduccion_python.modulo3</span> <span class="k">as</span> <span class="nn">mod3</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">mod3</span><span class="o">.</span><span class="n">funcion_del_modulo</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola desde la funci√≥n del modulo3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>And if I run it as a standalone script, the <code>module_function</code> function will be executed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>python<span class="w"> </span>introduccion_python/modulo3.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola desde modulo3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="11.-Packages">11. Packages<a class="anchor-link" href="#11.-Packages"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In python we can create our own packages by creating a folder with the package name</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>mi_paquete_de_python',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>We now create two files inside</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>mi_paquete_de_python',
      '<span></span><span class="o">!</span>touch<span class="w"> </span>mi_paquete_de_python/modulo1.py<span class="w"> </span>mi_paquete_de_python/modulo2.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>And we write on them</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>mkdir<span class="w"> </span>mi_paquete_de_python',
          '</span><span class="o">!</span>touch<span class="w"> </span>mi_paquete_de_python/modulo1.py<span class="w"> </span>mi_paquete_de_python/modulo2.py',
          '</span><span class="o">%%writefile</span> mi_paquete_de_python/modulo1.py',
          '',
          '<span class="k">def</span> <span class="nf">funcion1</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Hola desde la funci√≥n 1 del m√≥dulo 1"</span><span class="p">)</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion2</span><span class="p">():</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"Hola desde la funci√≥n 2 del m√≥dulo 1"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting mi_paquete_de_python/modulo1.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> mi_paquete_de_python/modulo2.py',
          '',
          '<span class="k">def</span> <span class="nf">funcion1</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Hola desde la funci√≥n 1 del m√≥dulo 2"</span><span class="p">)</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion2</span><span class="p">():</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"Hola desde la funci√≥n 2 del m√≥dulo 2"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting mi_paquete_de_python/modulo2.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we can call the functions of our package</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">mi_paquete_de_python</span> <span class="kn">import</span> <span class="n">modulo1</span> <span class="k">as</span> <span class="n">mod1</span>',
          '<span class="kn">from</span> <span class="nn">mi_paquete_de_python</span> <span class="kn">import</span> <span class="n">modulo2</span> <span class="k">as</span> <span class="n">mod2</span>',
          '',
          '<span class="n">mod1</span><span class="o">.</span><span class="n">funcion1</span><span class="p">()</span>',
          '<span class="n">mod1</span><span class="o">.</span><span class="n">funcion2</span><span class="p">()</span>',
          '<span class="n">mod2</span><span class="o">.</span><span class="n">funcion1</span><span class="p">()</span>',
          '<span class="n">mod2</span><span class="o">.</span><span class="n">funcion2</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola desde la funci√≥n 1 del m√≥dulo 1',
          'Hola desde la funci√≥n 2 del m√≥dulo 1',
          'Hola desde la funci√≥n 1 del m√≥dulo 2',
          'Hola desde la funci√≥n 2 del m√≥dulo 2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>But what if our package has dozens of files with functions that we want to use, we would have to import all the files one by one. To avoid this, you can create a <code>__init__.py</code> file inside the package where all this file import is done.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>touch<span class="w"> </span>mi_paquete_de_python/__init__.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>touch<span class="w"> </span>mi_paquete_de_python/__init__.py',
          '</span><span class="o">%%writefile</span> mi_paquete_de_python/__init__.py',
          '',
          '<span class="kn">import</span> <span class="nn">modulo1</span>',
          '<span class="kn">import</span> <span class="nn">modulo2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting mi_paquete_de_python/__init__.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we can just import our package, which has already imported all the modules internally</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">mi_paquete_de_python</span> <span class="k">as</span> <span class="nn">mi_paquete</span>',
          '',
          '<span class="n">mi_paquete</span><span class="o">.</span><span class="n">modulo1</span><span class="o">.</span><span class="n">funcion1</span><span class="p">()</span>',
          '<span class="n">mi_paquete</span><span class="o">.</span><span class="n">modulo1</span><span class="o">.</span><span class="n">funcion2</span><span class="p">()</span>',
          '<span class="n">mi_paquete</span><span class="o">.</span><span class="n">modulo2</span><span class="o">.</span><span class="n">funcion1</span><span class="p">()</span>',
          '<span class="n">mi_paquete</span><span class="o">.</span><span class="n">modulo2</span><span class="o">.</span><span class="n">funcion2</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola desde la funci√≥n 1 del m√≥dulo 1',
          'Hola desde la funci√≥n 2 del m√≥dulo 1',
          'Hola desde la funci√≥n 1 del m√≥dulo 2',
          'Hola desde la funci√≥n 2 del m√≥dulo 2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In this way we only have to do an <code>import</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="12.-Try...-Except">12. Try... Except<a class="anchor-link" href="#12.-Try...-Except"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>When an error occurs, or an exception as it is actually called, Python will normally stop and generate an error message.</p>
      <p>These exceptions can be handled using the <code>try</code> and <code>except</code> statements.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">try</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">variable_no_declarada</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Ha ocurrido una excepci√≥n"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Ha ocurrido una excepci√≥n',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Since the <code>try</code> block generates an error, then the <code>except</code> block will be executed.</p>
      <p>Without the <code>try</code> block, the program would crash and generate an error.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>You can define as many exception blocks as you want, for example, if you want to execute a special code block for a special error type</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">try</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">variable_no_declarada</span><span class="p">)</span>',
          '<span class="k">except</span> <span class="ne">NameError</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"La variable </span><span class="se">\\\'</span><span class="s2">variable_no_declarada</span><span class="se">\\\'</span><span class="s2"> no est√° definida"</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Algo inesperado ha ocurrido"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'La variable \'variable_no_declarada\' no est√° definida',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The word <code>else</code> can be used to indicate the case where an error has not occurred.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">try</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span>',
          '<span class="k">except</span> <span class="ne">NameError</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Ha ocurrido una excepci√≥n"</span><span class="p">)</span>',
          '<span class="k">else</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'Todo OK\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
          'Todo OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>with the word <code>finally</code> a code will be executed at the end whether an exception occurred or not.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">try</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">variable_no_declarada</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Ha ocurrido una excepci√≥n"</span><span class="p">)</span>',
          '<span class="k">finally</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"\'try except\' finallizado"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Ha ocurrido una excepci√≥n',
          '\'try except\' finallizado',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>This can be useful for closing objects and cleaning resources.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Clase</span><span class="p">:</span>',
          '  <span class="n">variable</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '',
          '<span class="n">objeto</span> <span class="o">=</span> <span class="n">Clase</span><span class="p">()</span>',
          '',
          '<span class="k">try</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">Clase</span><span class="o">.</span><span class="n">mi_variable</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Ha ocurrido una excepci√≥n"</span><span class="p">)</span>',
          '<span class="k">finally</span><span class="p">:</span>',
          '  <span class="k">del</span> <span class="n">objeto</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Ha ocurrido una excepci√≥n',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="12.1.-Creating-an-exception">12.1. Creating an exception<a class="anchor-link" href="#12.1.-Creating-an-exception"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As a Python developer, you can choose to throw an exception if a condition occurs.</p>
      <p>To throw (or generate) an exception, you must use the <code>raise</code> keyword</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">division</span><span class="p">(</span><span class="n">numerador</span><span class="p">,</span> <span class="n">denominador</span><span class="p">):</span>',
          '  <span class="k">if</span> <span class="n">denominador</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>',
          '    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s2">"El denominador no puede ser 0"</span><span class="p">)</span>',
          '  ',
          '  <span class="k">return</span> <span class="n">numerador</span><span class="o">/</span><span class="n">denominador</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">division</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-red-fg">---------------------------------------------------------------------------</span>',
          '<span class="ansi-red-fg">Exception</span>                                 Traceback (most recent call last)',
          '<span class="ansi-green-fg">&lt;ipython-input-16-33fb6066fa78&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      5</span>   <span class="ansi-green-fg">return</span> numerador<span class="ansi-blue-fg">/</span>denominador',
          '<span class="ansi-green-intense-fg ansi-bold">      6</span> ',
          '<span class="ansi-green-fg">----&gt; 7</span><span class="ansi-red-fg"> </span>print<span class="ansi-blue-fg">(</span>division<span class="ansi-blue-fg">(</span><span class="ansi-cyan-fg">10</span><span class="ansi-blue-fg">,</span> <span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span>',
          '<span class="ansi-green-fg">&lt;ipython-input-16-33fb6066fa78&gt;</span> in <span class="ansi-cyan-fg">division</span><span class="ansi-blue-fg">(numerador, denominador)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      1</span> <span class="ansi-green-fg">def</span> division<span class="ansi-blue-fg">(</span>numerador<span class="ansi-blue-fg">,</span> denominador<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      2</span>   <span class="ansi-green-fg">if</span> denominador <span class="ansi-blue-fg">==</span> <span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">:</span>',
          '<span class="ansi-green-fg">----&gt; 3</span><span class="ansi-red-fg">     </span><span class="ansi-green-fg">raise</span> Exception<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">"El denominador no puede ser 0"</span><span class="ansi-blue-fg">)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      4</span> ',
          '<span class="ansi-green-intense-fg ansi-bold">      5</span>   <span class="ansi-green-fg">return</span> numerador<span class="ansi-blue-fg">/</span>denominador',
          '<span class="ansi-red-fg">Exception</span>: El denominador no puede ser 0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>You can define what type of error to generate and the text that will be printed to the user.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">division</span><span class="p">(</span><span class="n">numerador</span><span class="p">,</span> <span class="n">denominador</span><span class="p">):</span>',
          '  <span class="k">if</span> <span class="n">denominador</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>',
          '    <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s2">"El denominador no puede ser 0"</span><span class="p">)</span>',
          '  ',
          '  <span class="k">return</span> <span class="n">numerador</span><span class="o">/</span><span class="n">denominador</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">division</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-red-fg">---------------------------------------------------------------------------</span>',
          '<span class="ansi-red-fg">TypeError</span>                                 Traceback (most recent call last)',
          '<span class="ansi-green-fg">&lt;ipython-input-17-26bfa63ae44c&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      5</span>   <span class="ansi-green-fg">return</span> numerador<span class="ansi-blue-fg">/</span>denominador',
          '<span class="ansi-green-intense-fg ansi-bold">      6</span> ',
          '<span class="ansi-green-fg">----&gt; 7</span><span class="ansi-red-fg"> </span>print<span class="ansi-blue-fg">(</span>division<span class="ansi-blue-fg">(</span><span class="ansi-cyan-fg">10</span><span class="ansi-blue-fg">,</span> <span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span>',
          '<span class="ansi-green-fg">&lt;ipython-input-17-26bfa63ae44c&gt;</span> in <span class="ansi-cyan-fg">division</span><span class="ansi-blue-fg">(numerador, denominador)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      1</span> <span class="ansi-green-fg">def</span> division<span class="ansi-blue-fg">(</span>numerador<span class="ansi-blue-fg">,</span> denominador<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      2</span>   <span class="ansi-green-fg">if</span> denominador <span class="ansi-blue-fg">==</span> <span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">:</span>',
          '<span class="ansi-green-fg">----&gt; 3</span><span class="ansi-red-fg">     </span><span class="ansi-green-fg">raise</span> TypeError<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">"El denominador no puede ser 0"</span><span class="ansi-blue-fg">)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      4</span> ',
          '<span class="ansi-green-intense-fg ansi-bold">      5</span>   <span class="ansi-green-fg">return</span> numerador<span class="ansi-blue-fg">/</span>denominador',
          '<span class="ansi-red-fg">TypeError</span>: El denominador no puede ser 0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="13.-Keywords-or-reserved-words">13. Keywords or reserved words<a class="anchor-link" href="#13.-Keywords-or-reserved-words"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>During this post in several occasions Python reserved words or <code>keyword</code>s have appeared, these are a series of words reserved by Python.</p>
      <p>The following is a list of the <code>keyword</code>s</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">keyword</span>',
          '',
          '<span class="n">keyword</span><span class="o">.</span><span class="n">kwlist</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'False\',',
          ' \'None\',',
          ' \'True\',',
          ' \'and\',',
          ' \'as\',',
          ' \'assert\',',
          ' \'async\',',
          ' \'await\',',
          ' \'break\',',
          ' \'class\',',
          ' \'continue\',',
          ' \'def\',',
          ' \'del\',',
          ' \'elif\',',
          ' \'else\',',
          ' \'except\',',
          ' \'finally\',',
          ' \'for\',',
          ' \'from\',',
          ' \'global\',',
          ' \'if\',',
          ' \'import\',',
          ' \'in\',',
          ' \'is\',',
          ' \'lambda\',',
          ' \'nonlocal\',',
          ' \'not\',',
          ' \'or\',',
          ' \'pass\',',
          ' \'raise\',',
          ' \'return\',',
          ' \'try\',',
          ' \'while\',',
          ' \'with\',',
          ' \'yield\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="14.-The-Zen-of-Python">14. The Zen of Python<a class="anchor-link" href="#14.-The-Zen-of-Python"><img decoding="async" class="link-img" alt="link-svg" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>By importing the <code>this</code> module we can read the <code>zen</code> of Python, that is, its philosophy or principles.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">this</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'The Zen of Python, by Tim Peters',
          'Beautiful is better than ugly.',
          'Explicit is better than implicit.',
          'Simple is better than complex.',
          'Complex is better than complicated.',
          'Flat is better than nested.',
          'Sparse is better than dense.',
          'Readability counts.',
          'Special cases aren\'t special enough to break the rules.',
          'Although practicality beats purity.',
          'Errors should never pass silently.',
          'Unless explicitly silenced.',
          'In the face of ambiguity, refuse the temptation to guess.',
          'There should be one-- and preferably only one --obvious way to do it.',
          'Although that way may not be obvious at first unless you\'re Dutch.',
          'Now is better than never.',
          'Although never is often better than *right* now.',
          'If the implementation is hard to explain, it\'s a bad idea.',
          'If the implementation is easy to explain, it may be a good idea.',
          'Namespaces are one honking great idea -- let\'s do more of those!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      

    </div>

  </section>

</PostLayout>
