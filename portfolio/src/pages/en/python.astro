---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Complete Python Guide 2025: Tutorial from Zero to Advanced';
const end_url = 'python';
const description = 'Complete Python Guide 2025: Tutorial from Zero to Advanced';
const keywords = 'python tutorial, learn python, python guide, python from scratch, python data types, python functions, python classes, python programming, python spanish, python complete tutorial';
const languaje = 'EN';
const image_path = 'https://images.maximofn.com/icon-python.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=800
    image_height=336
    image_extension=webp
    article_date=2021-02-11+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#1. Summary"><h2>1. Summary</h2></a>
      <a class="anchor-link" href="#2. Data types in Python"><h2>2. Data types in Python</h2></a>
      <a class="anchor-link" href="#2.1. Strings"><h3>2.1. Strings</h3></a>
      <a class="anchor-link" href="#2.2. Numbers"><h3>2.2. Numbers</h3></a>
      <a class="anchor-link" href="#2.2.1. Integers"><h4>2.2.1. Integers</h4></a>
      <a class="anchor-link" href="#2.2.2. Float"><h4>2.2.2. Float</h4></a>
      <a class="anchor-link" href="#2.2.3. Complex"><h4>2.2.3. Complex</h4></a>
      <a class="anchor-link" href="#2.2.4. Conversion"><h4>2.2.4. Conversion</h4></a>
      <a class="anchor-link" href="#2.3. Sequences"><h3>2.3. Sequences</h3></a>
      <a class="anchor-link" href="#2.3.1. Lists"><h4>2.3.1. Lists</h4></a>
      <a class="anchor-link" href="#2.3.1.1. Editing lists"><h5>2.3.1.1. Editing lists</h5></a>
      <a class="anchor-link" href="#2.3.1.2. List comprehension"><h5>2.3.1.2. List comprehension</h5></a>
      <a class="anchor-link" href="#2.3.1.3. Sorting lists"><h5>2.3.1.3. Sorting lists</h5></a>
      <a class="anchor-link" href="#2.3.1.4. Copying lists"><h5>2.3.1.4. Copying lists</h5></a>
      <a class="anchor-link" href="#2.3.1.5. Concatenating lists"><h5>2.3.1.5. Concatenating lists</h5></a>
      <a class="anchor-link" href="#2.3.2 Tuples"><h4>2.3.2 Tuples</h4></a>
      <a class="anchor-link" href="#2.3.2.1. Modifying tuples"><h5>2.3.2.1. Modifying tuples</h5></a>
      <a class="anchor-link" href="#2.3.22. Unpack tuples"><h5>2.3.22. Unpack tuples</h5></a>
      <a class="anchor-link" href="#2.3.23. Concatenating tuples"><h5>2.3.23. Concatenating tuples</h5></a>
      <a class="anchor-link" href="#2.3.24. Tuple Methods"><h5>2.3.24. Tuple Methods</h5></a>
      <a class="anchor-link" href="#2.3.3. Range"><h4>2.3.3. Range</h4></a>
      <a class="anchor-link" href="#2.4. Dictionaries"><h3>2.4. Dictionaries</h3></a>
      <a class="anchor-link" href="#2.4.1. Accessing Items"><h4>2.4.1. Accessing Items</h4></a>
      <a class="anchor-link" href="#2.4.2. Modify the items"><h4>2.4.2. Modify the items</h4></a>
      <a class="anchor-link" href="#2.4.3. Adding Items"><h4>2.4.3. Adding Items</h4></a>
      <a class="anchor-link" href="#2.4.4. Remove items"><h4>2.4.4. Remove items</h4></a>
      <a class="anchor-link" href="#2.4.5. Copying dictionaries"><h4>2.4.5. Copying dictionaries</h4></a>
      <a class="anchor-link" href="#2.4.6. Anidated Dictionaries"><h4>2.4.6. Anidated Dictionaries</h4></a>
      <a class="anchor-link" href="#2.4.7. Dictionary Methods"><h4>2.4.7. Dictionary Methods</h4></a>
      <a class="anchor-link" href="#2.4.8. Dictionary comprehension"><h4>2.4.8. Dictionary comprehension</h4></a>
      <a class="anchor-link" href="#2.5. Sets"><h3>2.5. Sets</h3></a>
      <a class="anchor-link" href="#2.5.1. Set"><h4>2.5.1. Set</h4></a>
      <a class="anchor-link" href="#2.5.1.1. Add items"><h5>2.5.1.1. Add items</h5></a>
      <a class="anchor-link" href="#2.5.1.2. Remove items"><h5>2.5.1.2. Remove items</h5></a>
      <a class="anchor-link" href="#2.5.1.3. Unir items"><h5>2.5.1.3. Unir Ã­tems</h5></a>
      <a class="anchor-link" href="#2.5.1.4. Methods of sets"><h5>2.5.1.4. Methods of sets</h5></a>
      <a class="anchor-link" href="#2.5.2. FrozenSet"><h4>2.5.2. FrozenSet</h4></a>
      <a class="anchor-link" href="#2.6. Booleans"><h3>2.6. Booleans</h3></a>
      <a class="anchor-link" href="#2.6.1. Other Data Types True and False"><h4>2.6.1. Other Data Types True and False</h4></a>
      <a class="anchor-link" href="#2.7. Binaries"><h3>2.7. Binaries</h3></a>
      <a class="anchor-link" href="#2.7.1. Bytes"><h4>2.7.1. Bytes</h4></a>
      <a class="anchor-link" href="#2.7.2. Bytearray"><h4>2.7.2. Bytearray</h4></a>
      <a class="anchor-link" href="#2.7.3. MemoryView"><h4>2.7.3. MemoryView</h4></a>
      <a class="anchor-link" href="#3. Operators"><h2>3. Operators</h2></a>
      <a class="anchor-link" href="#3.1. Arithmetic Operators"><h3>3.1. Arithmetic Operators</h3></a>
      <a class="anchor-link" href="#3.2. Comparison Operators"><h3>3.2. Comparison Operators</h3></a>
      <a class="anchor-link" href="#3.3. Logical Operators"><h3>3.3. Logical Operators</h3></a>
      <a class="anchor-link" href="#3.4. Identity Operators"><h3>3.4. Identity Operators</h3></a>
      <a class="anchor-link" href="#3.5. Membership Operators"><h3>3.5. Membership Operators</h3></a>
      <a class="anchor-link" href="#3.6. Bitwise Operators"><h3>3.6. Bitwise Operators</h3></a>
      <a class="anchor-link" href="#3.7. Assignment Operators"><h3>3.7. Assignment Operators</h3></a>
      <a class="anchor-link" href="#4. Flow Control"><h2>4. Flow Control</h2></a>
      <a class="anchor-link" href="#4.1. If"><h3>4.1. If</h3></a>
      <a class="anchor-link" href="#4.2. While"><h3>4.2. While</h3></a>
      <a class="anchor-link" href="#4.3. For"><h3>4.3. For</h3></a>
      <a class="anchor-link" href="#5. Functions"><h2>5. Functions</h2></a>
      <a class="anchor-link" href="#5.1. Built-in functions"><h3>5.1. Built-in functions</h3></a>
      <a class="anchor-link" href="#5.2. Function Documentation"><h3>5.2. Function Documentation</h3></a>
      <a class="anchor-link" href="#5.3. Decorators"><h3>5.3. Decorators</h3></a>
      <a class="anchor-link" href="#5.4. *args and **kwargs"><h3>5.4. <code>*args</code> and <code>**kwargs</code></h3></a>
      <a class="anchor-link" href="#2.5.1. *args"><h4>2.5.1. <code>*args</code></h4></a>
      <a class="anchor-link" href="#2.5.2. **kwargs"><h4>2.5.2. <code>**kwargs</code></h4></a>
      <a class="anchor-link" href="#6. Additional Functions"><h2>6. Additional Functions</h2></a>
      <a class="anchor-link" href="#6.1. Lambda functions"><h3>6.1. Lambda functions</h3></a>
      <a class="anchor-link" href="#6.2. map Function"><h3>6.2. <code>map</code> Function</h3></a>
      <a class="anchor-link" href="#6.3. filter Function"><h3>6.3. <code>filter</code> Function</h3></a>
      <a class="anchor-link" href="#6.4. reduce Function"><h3>6.4. <code>reduce</code> Function</h3></a>
      <a class="anchor-link" href="#6.5. zip Function"><h3>6.5. <code>zip</code> Function</h3></a>
      <a class="anchor-link" href="#65. Generators"><h3>65. Generators</h3></a>
      <a class="anchor-link" href="#666. High order functions"><h3>666. High order functions</h3></a>
      <a class="anchor-link" href="#7. Classes and Objects"><h2>7. Classes and Objects</h2></a>
      <a class="anchor-link" href="#7.1. Inheritance"><h3>7.1. Inheritance</h3></a>
      <a class="anchor-link" href="#7.2. Operator Overloading"><h3>7.2. Operator Overloading</h3></a>
      <a class="anchor-link" href="#7.3. Custom Iterators"><h3>7.3. Custom Iterators</h3></a>
      <a class="anchor-link" href="#7.4. Calling Objects as Functions"><h3>7.4. Calling Objects as Functions</h3></a>
      <a class="anchor-link" href="#7.5. Private Attributes and Functions"><h3>7.5. Private Attributes and Functions</h3></a>
      <a class="anchor-link" href="#8. Iterators"><h2>8. Iterators</h2></a>
      <a class="anchor-link" href="#8.1. Create an iterator object"><h3>8.1. Create an iterator object</h3></a>
      <a class="anchor-link" href="#8.2. Iterating getting the index and value"><h3>8.2. Iterating getting the index and value</h3></a>
      <a class="anchor-link" href="#8.3. Iterating simultaneously over two iterable objects"><h3>8.3. Iterating simultaneously over two iterable objects</h3></a>
      <a class="anchor-link" href="#9. Variable Scope"><h2>9. Variable Scope</h2></a>
      <a class="anchor-link" href="#9.1. Local Scope"><h3>9.1. Local Scope</h3></a>
      <a class="anchor-link" href="#9.2. Global Scope"><h3>9.2. Global Scope</h3></a>
      <a class="anchor-link" href="#10. Modules"><h2>10. Modules</h2></a>
      <a class="anchor-link" href="#10.1. Entry points: files as modules and not as scripts"><h3>10.1. Entry points: files as modules and not as scripts</h3></a>
      <a class="anchor-link" href="#11. Packages"><h2>11. Packages</h2></a>
      <a class="anchor-link" href="#12. Try... except"><h2>12. Try... except</h2></a>
      <a class="anchor-link" href="#12.1. Create an exception"><h3>12.1. Create an exception</h3></a>
      <a class="anchor-link" href="#13. Keywords or reserved words"><h2>13. Keywords or reserved words</h2></a>
      <a class="anchor-link" href="#14. The ZEN of Python"><h2>14. The ZEN of Python</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Disclaimer: This post has been translated to English using a machine translation model. Please, let me know if you find any mistakes.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="1. Summary">1. Summary<a class="anchor-link" href="#1. Summary"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 92" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's make a brief introduction to Python, explaining the data types we have, operators, the use of functions and classes. Additionally, we will see how to use iterable objects, how to use modules, etc.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/icon-python.webp" alt="python">
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="2. Data types in Python">2. Data types in Python<a class="anchor-link" href="#2. Data types in Python"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 93" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>There are 7 data types in Python</p>
      <ol>
        <li>Text type: <code>str</code></li>
        <li>Numerical: <code>int</code>, <code>float</code>, <code>complex</code></li>
        <li>Sequences: <code>list</code>, <code>tuple</code>, <code>range</code></li>
        <li>Mapping: <code>dict</code></li>
        <li>Sets: <code>set</code>, <code>frozenset</code></li>
        <li>Booleans: <code>bool</code></li>
        <li>Binaries: <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code></li>
      </ol>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can get the data type using the <code>type()</code> function.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">type</span><span class="p">(</span><span class="mf">5.</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'float',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Python is a dynamically typed language, which means you can have a variable of one type and then assign it another type.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>',
      '<span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'int',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="s1">&#39;MaximoFN&#39;</span>',
      '<span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'str',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Python types variables for you, but if you want to type them yourself, you can do so.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mf">5.1</span><span class="p">)</span>',
      '<span class="nb">type</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="n">b</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(int, 5)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Although <code>b</code> has been initialized as <code>5.1</code>, that is, it should be of type <code>float</code>, when we type it as <code>int</code>, we see that it is of type <code>int</code> and its value is <code>5</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.1. Strings">2.1. Strings<a class="anchor-link" href="#2.1. Strings"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 94" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>strings</code> are sequences of characters, these can be defined with double quotes <code>&quot;</code> or single quotes <code>&#x27;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">&quot;MaximoFN&quot;</span>',
      '<span class="n">string</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x27;MaximoFN&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">&#39;MaximoFN&#39;</span>',
      '<span class="n">string</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x27;MaximoFN&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>To write a very long <code>string</code> and not have a line that takes up too much space, it can be introduced on multiple lines</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">&quot;&quot;&quot;Este es un ejemplo de</span>',
      '<span class="s2">como estoy introduciendo un string</span>',
      '<span class="s2">en varias lineas&quot;&quot;&quot;</span>',
      '<span class="n">string</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x27;Este es un ejemplo de\ncomo estoy introduciendo un string\nen varias lineas&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;Este es un ejemplo de</span>',
      '<span class="s1">como estoy introduciendo un string</span>',
      '<span class="s1">en varias lineas&#39;&#39;&#39;</span>',
      '<span class="n">string</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x27;Este es un ejemplo de\ncomo estoy introduciendo un string\nen varias lineas&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>However, we see that in the middle it has inserted the character indicates a line break. If we use the <code>print()</code> function, we will see that it no longer appears.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Este es un ejemplo de',
          'como estoy introduciendo un string',
          'en varias lineas',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we have said, strings are sequences of characters, so we can navigate and iterate through them.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>',
      '<span class="w">  </span><span class="c1"># Se indica a la funciÃ³n print que cuando imprima no termine con un salto de </span>',
      '<span class="w">  </span><span class="c1"># linea para escribir todo en la misma linea</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Este es un',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can get the length of our string using the <code>len()</code> function.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '73',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Check if there is a specific string within ours</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="s1">&#39;ejemplo&#39;</span> <span class="ow">in</span> <span class="n">string</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Strings have certain useful attributes, such as converting everything to uppercase.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">upper</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'ESTE ES UN EJEMPLO DE',
          'COMO ESTOY INTRODUCIENDO UN STRING',
          'EN VARIAS LINEAS',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>all in lowercase</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'este es un ejemplo de',
          'como estoy introduciendo un string',
          'en varias lineas',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Replace characters</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;o&#39;</span><span class="p">,</span> <span class="s1">&#39;@&#39;</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Este es un ejempl@ de',
          'c@m@ est@y intr@duciend@ un string',
          'en varias lineas',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Get all the words</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">split</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;Este&#x27;, &#x27;es&#x27;, &#x27;un&#x27;, &#x27;ejemplo&#x27;, &#x27;de&#x27;, &#x27;como&#x27;, &#x27;estoy&#x27;, &#x27;introduciendo&#x27;, &#x27;un&#x27;, &#x27;string&#x27;, &#x27;en&#x27;, &#x27;varias&#x27;, &#x27;lineas&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>You can see all the string methods in this <a href="https://docs.python.org/3.9/library/stdtypes.html#string-methods" target="_blank" rel="nofollow noreferrer">link</a></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Another useful thing that can be done with strings is concatenating them.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s1">&#39;Maximo&#39;</span>',
      '<span class="n">string2</span> <span class="o">=</span> <span class="s1">&#39;FN&#39;</span>',
      '<span class="n">string1</span> <span class="o">+</span> <span class="n">string2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x27;MaximoFN&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We previously explained that the character <code>\n</code> corresponds to a line break. This special character is part of a series of special characters called <code>Escape Characters</code>. Let's look at some others.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we declare a string with double quotes and want to add a double quote inside the string, we use the escape character <code>\&quot;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Este es el blog de </span><span class="se">\&quot;</span><span class="s2">MaximoFN</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Este es el blog de &quot;MaximoFN&quot;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The same with the single quote, we add <code>\&#x27;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Este es el blog de </span><span class="se">\&#39;</span><span class="s1">MaximoFN</span><span class="se">\&#39;</span><span class="s1">&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Este es el blog de &#x27;MaximoFN&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we have the problem of whether we want to add the <code>\</code> character since, as we have seen, it is an <code>escape character</code>, so we solve it by putting a double backslash <code>\</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Este es el blog de </span><span class="se">\\\\</span><span class="s1">MaximoFN</span><span class="se">\\\\</span><span class="s1">&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Este es el blog de \\MaximoFN\\',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We have already seen the newline escape character <code>\n</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Este es el blog de </span><span class="se">\\</span><span class="s1">nMaximoFN&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Este es el blog de',
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want to write from the beginning of the line, we add \r</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Esto no se imprimirÃ¡ </span><span class="se">\\</span><span class="s1">rEste es el blog de MaximoFN&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Este es el blog de MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want to add a large space (indent) we use \t</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Este es el blog de </span><span class="se">\\</span><span class="s1">tMaximoFN&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Este es el blog de 	MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can delete a character with <code>\b</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Este es el blog de </span><span class="se">\\</span><span class="s1">bMaximoFN&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Este es el blog deMaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can add the <a href="http://www.asciitable.com/" target="_blank" rel="nofollow noreferrer">ASCII</a> code in octal using <code>\ooo</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\\</span><span class="s1">115</span><span class="se">\\</span><span class="s1">141</span><span class="se">\\</span><span class="s1">170</span><span class="se">\\</span><span class="s1">151</span><span class="se">\\</span><span class="s1">155</span><span class="se">\\</span><span class="s1">157</span><span class="se">\\</span><span class="s1">106</span><span class="se">\\</span><span class="s1">116&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or add the <a href="http://www.asciitable.com/" target="_blank" rel="nofollow noreferrer">ASCII</a> code in hexadecimal using <code>\xhh</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\\</span><span class="s1">x4d</span><span class="se">\\</span><span class="s1">x61</span><span class="se">\\</span><span class="s1">x78</span><span class="se">\\</span><span class="s1">x69</span><span class="se">\\</span><span class="s1">x6d</span><span class="se">\\</span><span class="s1">x6f</span><span class="se">\\</span><span class="s1">x46</span><span class="se">\\</span><span class="s1">x4e&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Lastly, we can convert another type of data into a string</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mi">5</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">type</span> <span class="p">(</span><span class="n">n</span><span class="p">))</span>',
      '<span class="n">string</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;class &#x27;int&#x27;&amp;gt;',
          '&amp;lt;class &#x27;str&#x27;&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.2. Numbers">2.2. Numbers<a class="anchor-link" href="#2.2. Numbers"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 95" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.2.1. Integers">2.2.1. Integers<a class="anchor-link" href="#2.2.1. Integers"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 96" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Integer numbers</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mi">5</span>',
      '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(5, int)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.2.2. Float">2.2.2. Float<a class="anchor-link" href="#2.2.2. Float"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 97" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Floating-point numbers</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mf">5.1</span>',
      '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(5.1, float)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.2.3. Complex">2.2.3. Complex<a class="anchor-link" href="#2.2.3. Complex"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 98" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Complex numbers</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">5</span><span class="n">j</span>',
      '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '((3+5j), complex)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.2.4. Conversion">2.2.4. Conversion<a class="anchor-link" href="#2.2.4. Conversion"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 99" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Numbers can be converted between types</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mi">5</span>',
      '<span class="n">n</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
      '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(5.0, float)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mf">5.1</span>',
      '<span class="n">n</span> <span class="o">=</span> <span class="nb">complex</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
      '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '((5.1+0j), complex)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mf">5.1</span>',
      '<span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
      '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(5, int)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A complex number cannot be converted to type <code>int</code> or type <code>float</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.3. Sequences">2.3. Sequences<a class="anchor-link" href="#2.3. Sequences"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 100" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.3.1. Lists">2.3.1. Lists<a class="anchor-link" href="#2.3.1. Lists"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 101" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Lists store multiple items in a variable. They are declared using the <code>[]</code> symbols, with items separated by commas.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;item0&#39;</span><span class="p">,</span> <span class="s1">&#39;item1&#39;</span><span class="p">,</span> <span class="s1">&#39;item2&#39;</span><span class="p">,</span> <span class="s1">&#39;item3&#39;</span><span class="p">,</span> <span class="s1">&#39;item4&#39;</span><span class="p">,</span> <span class="s1">&#39;item5&#39;</span><span class="p">]</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;item0&#x27;, &#x27;item1&#x27;, &#x27;item2&#x27;, &#x27;item3&#x27;, &#x27;item4&#x27;, &#x27;item5&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can get the length of a list using the <code>len()</code> function.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">lista</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Lists can have items of different types</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;item0&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="mf">5.3</span><span class="p">,</span> <span class="s2">&quot;item4&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mf">6.6</span><span class="p">]</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;item0&#x27;, 1, True, 5.3, &#x27;item4&#x27;, 5, 6.6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In Python, counting starts from position 0, that is, if we want to get the first element of the list</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x27;item0&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>But one of the powerful things about Python is that if we want to access the last position we can use negative indices</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '6.6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If instead of the last position in the list we want the penultimate one</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '5',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we only want a range of values, for example, from the second to the fifth item, we access them via <code>[2:5]</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[True, 5.3, &#x27;item4&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If the first number in the range is omitted, it means we want from the first item in the list to the indicated item, that is, if we want from the first item to the fifth, we use <code>[:5]</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;item0&#x27;, 1, True, 5.3, &#x27;item4&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If the last number in the range is omitted, it means we want from the indicated item to the last. That is, if we want from the third item to the last, we use <code>[3:]</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span><span class="p">[</span><span class="mi">3</span><span class="p">:]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[5.3, &#x27;item4&#x27;, 5, 6.6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can also choose the range of items with negative numbers, that is, if we want from the third-to-last to the second-to-last we use <code>[-3:-1]</code>. This is useful when you have lists whose length is unknown, but you know you want a range of values from the end, for example, because the list was created with measurements that are being taken and you want to know the last averages.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;item4&#x27;, 5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>It can be checked if an item is in the list</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="s1">&#39;item4&#39;</span> <span class="ow">in</span> <span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.1.1. Editing lists">2.3.1.1. Editing lists<a class="anchor-link" href="#2.3.1.1. Editing lists"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 102" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Lists in Python are dynamic, meaning they can be modified. For example, you can modify the third item.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;item0&#x27;, 1, False, 5.3, &#x27;item4&#x27;, 5, 6.6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A range of values can also be modified.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mf">1.1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;item0&#x27;, 1.1, True, 3, &#x27;item4&#x27;, 5, 6.6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Values can be added to the end of the list using the <code>append()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;item7&#39;</span><span class="p">)</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;item0&#x27;, 1.1, True, 3, &#x27;item4&#x27;, 5, 6.6, &#x27;item7&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or we can insert a value at a specific position using the <code>insert()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;insert&#39;</span><span class="p">)</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;item0&#x27;, 1.1, &#x27;insert&#x27;, True, 3, &#x27;item4&#x27;, 5, 6.6, &#x27;item7&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Lists can be joined using the <code>extend()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista2</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;item8&#39;</span><span class="p">,</span> <span class="s1">&#39;item9&#39;</span><span class="p">]</span>',
      '<span class="n">lista</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">lista2</span><span class="p">)</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;item0&#x27;, 1.1, &#x27;insert&#x27;, True, 3, &#x27;item4&#x27;, 5, 6.6, &#x27;item7&#x27;, &#x27;item8&#x27;, &#x27;item9&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>It is not necessary to extend the list using another list; it can be done using another iterable data type in Python (<code>tuples</code>, <code>sets</code>, <code>dictionaries</code>, etc).</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;item10&#39;</span><span class="p">,</span> <span class="s1">&#39;item11&#39;</span><span class="p">)</span>',
      '<span class="n">lista</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;item0&#x27;,',
          '1.1,',
          '&#x27;insert&#x27;,',
          'True,',
          '3,',
          '&#x27;item4&#x27;,',
          '5,',
          '6.6,',
          '&#x27;item7&#x27;,',
          '&#x27;item8&#x27;,',
          '&#x27;item9&#x27;,',
          '&#x27;item10&#x27;,',
          '&#x27;item11&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can remove a specific position using the <code>pop()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;item0&#x27;,',
          '1.1,',
          'True,',
          '3,',
          '&#x27;item4&#x27;,',
          '5,',
          '6.6,',
          '&#x27;item7&#x27;,',
          '&#x27;item8&#x27;,',
          '&#x27;item9&#x27;,',
          '&#x27;item10&#x27;,',
          '&#x27;item11&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If the index is not specified, the last item is removed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;item0&#x27;, 1.1, True, 3, &#x27;item4&#x27;, 5, 6.6, &#x27;item7&#x27;, &#x27;item8&#x27;, &#x27;item9&#x27;, &#x27;item10&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or an item can be removed knowing its value using the <code>remove()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;item7&#39;</span><span class="p">)</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;item0&#x27;, 1.1, True, 3, &#x27;item4&#x27;, 5, 6.6, &#x27;item8&#x27;, &#x27;item9&#x27;, &#x27;item10&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>With the <code>del()</code> function, you can also delete an item from the specified position.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">del</span> <span class="n">lista</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;item0&#x27;, 1.1, True, &#x27;item4&#x27;, 5, 6.6, &#x27;item8&#x27;, &#x27;item9&#x27;, &#x27;item10&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If the index is not specified, the entire list is deleted.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>With the <code>clear()</code> method, I empty the list.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The number of items with a specific value can be obtained using the <code>count()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>',
      '<span class="n">lista</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>You can also get the first index of an item with a specific value using the <code>index()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>',
      '<span class="n">lista</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.1.2. List comprehension">2.3.1.2. List comprehension<a class="anchor-link" href="#2.3.1.2. List comprehension"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 103" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can operate through the list</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;apple&quot;</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="p">,</span> <span class="s2">&quot;cherry&quot;</span><span class="p">,</span> <span class="s2">&quot;kiwi&quot;</span><span class="p">,</span> <span class="s2">&quot;mango&quot;</span><span class="p">]</span>',
      '<span class="n">newlist</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Iteramos por todos los items de la lista</span>',
      '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fruits</span><span class="p">:</span>',
      '<span class="w">  </span><span class="c1"># Si el item contiene el caracter &quot;a&quot; lo aÃ±adimos a newlist</span>',
      '<span class="w">  </span><span class="k">if</span> <span class="s2">&quot;a&quot;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">newlist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">newlist</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;mango&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Some of the powerful features of Python are <code>list comprehensions</code>, which allow you to do everything in one line and make the code more compact.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;apple&quot;</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="p">,</span> <span class="s2">&quot;cherry&quot;</span><span class="p">,</span> <span class="s2">&quot;kiwi&quot;</span><span class="p">,</span> <span class="s2">&quot;mango&quot;</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="n">newlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fruits</span> <span class="k">if</span> <span class="s2">&quot;a&quot;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="n">newlist</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;mango&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The syntax is as follows:</p>
      <div class='highlight'><pre><code class="language-text">newlist = [expression for item in iterable if condition == True]</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>It can be used to perform operations on the original list</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">newlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fruits</span> <span class="k">if</span> <span class="s2">&quot;a&quot;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>',
      '<span class="n">newlist</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;APPLE&#x27;, &#x27;BANANA&#x27;, &#x27;MANGO&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.1.3. Sorting lists">2.3.1.3. Sorting lists<a class="anchor-link" href="#2.3.1.3. Sorting lists"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 104" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To order lists we use the <code>sort()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
      '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[3, 4, 5, 5, 6, 8, 9]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>It also sorts them alphabetically</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;orange&quot;</span><span class="p">,</span> <span class="s2">&quot;mango&quot;</span><span class="p">,</span> <span class="s2">&quot;kiwi&quot;</span><span class="p">,</span> <span class="s2">&quot;pineapple&quot;</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="p">]</span>',
      '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;banana&#x27;, &#x27;kiwi&#x27;, &#x27;mango&#x27;, &#x27;orange&#x27;, &#x27;pineapple&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>When sorting alphabetically, distinguish between uppercase and lowercase.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;orange&quot;</span><span class="p">,</span> <span class="s2">&quot;mango&quot;</span><span class="p">,</span> <span class="s2">&quot;kiwi&quot;</span><span class="p">,</span> <span class="s2">&quot;Pineapple&quot;</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="p">]</span>',
      '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;Pineapple&#x27;, &#x27;banana&#x27;, &#x27;kiwi&#x27;, &#x27;mango&#x27;, &#x27;orange&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>They can be sorted in descending order using the attribute <code>reverse = True</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
      '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">reverse</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[9, 8, 6, 5, 5, 4, 3]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>They can be ordered in the way we want using the <code>key</code> attribute.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">myfunc</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>',
      '<span class="w">  </span><span class="c1"># devuelve el valor absoluto de n - 50</span>',
      '<span class="w">  </span><span class="k">return</span> <span class="nb">abs</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">23</span><span class="p">]</span>',
      '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span> <span class="o">=</span> <span class="n">myfunc</span><span class="p">)</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[50, 65, 23, 82, 100]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>This can be used, for example, so that when sorting, it does not distinguish between uppercase and lowercase.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;orange&quot;</span><span class="p">,</span> <span class="s2">&quot;mango&quot;</span><span class="p">,</span> <span class="s2">&quot;kiwi&quot;</span><span class="p">,</span> <span class="s2">&quot;Pineapple&quot;</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="p">]</span>',
      '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span> <span class="o">=</span> <span class="nb">str</span><span class="o">.</span><span class="n">lower</span><span class="p">)</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;banana&#x27;, &#x27;kiwi&#x27;, &#x27;mango&#x27;, &#x27;orange&#x27;, &#x27;Pineapple&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The list can be reversed using the <code>reverse</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
      '<span class="n">lista</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[6, 5, 9, 4, 3, 8, 5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.1.4. Copying lists">2.3.1.4. Copying lists<a class="anchor-link" href="#2.3.1.4. Copying lists"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 105" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Lists cannot be copied using <code>list1 = list2</code>, because if <code>list1</code> is modified, <code>list2</code> is also modified.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
      '<span class="n">lista2</span> <span class="o">=</span> <span class="n">lista1</span>',
      '<span class="n">lista1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>',
      '<span class="n">lista2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[True, 8, 3, 4, 9, 5, 6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>So, you have to use the <code>copy()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
      '<span class="n">lista2</span> <span class="o">=</span> <span class="n">lista1</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>',
      '<span class="n">lista1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>',
      '<span class="n">lista2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[5, 8, 3, 4, 9, 5, 6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or you have to use the list constructor <code>list()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
      '<span class="n">lista2</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">lista1</span><span class="p">)</span>',
      '<span class="n">lista1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>',
      '<span class="n">lista2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[5, 8, 3, 4, 9, 5, 6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.1.5. Concatenating lists">2.3.1.5. Concatenating lists<a class="anchor-link" href="#2.3.1.5. Concatenating lists"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 106" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Lists can be concatenated using the <code>+</code> operator.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
      '<span class="n">lista2</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">]</span>',
      '<span class="n">lista</span> <span class="o">=</span> <span class="n">lista1</span> <span class="o">+</span> <span class="n">lista2</span>',
      '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[5, 8, 3, 4, 9, 5, 6, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or using the <code>extend</code> method</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
      '<span class="n">lista2</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">]</span>',
      '<span class="n">lista1</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">lista2</span><span class="p">)</span>',
      '<span class="n">lista1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[5, 8, 3, 4, 9, 5, 6, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another way to concatenate is to repeat the tuple X times using the <code>*</code> operator</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">]</span>',
      '<span class="n">lista2</span> <span class="o">=</span> <span class="n">lista1</span> <span class="o">*</span> <span class="mi">3</span>',
      '<span class="n">lista2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.3.2 Tuples">2.3.2 Tuples<a class="anchor-link" href="#2.3.2 Tuples"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 107" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Tuples are similar to lists, they store multiple items in a variable, can contain items of different types, but they cannot be modified or reordered. They are defined using <code>()</code>, with items separated by commas.</p>
      <p>Since they cannot be modified, tuples execute a bit faster than lists, so if you don't need to modify the data, it's better to use tuples instead of lists.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;item0&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">,</span> <span class="s1">&#39;item4&#39;</span><span class="p">,</span> <span class="kc">True</span><span class="p">)</span>',
      '<span class="n">tupla</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(&#x27;item0&#x27;, 1, True, 3.3, &#x27;item4&#x27;, True)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Its length can be obtained using the <code>len()</code> function.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">len</span> <span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>To create tuples with a single element, it is necessary to add a comma</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;item0&#39;</span><span class="p">,)</span>',
      '<span class="n">tupla</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '((&#x27;item0&#x27;,), tuple)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>To access an element of the tuple, proceed in the same way as with lists.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;item0&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">,</span> <span class="s1">&#39;item4&#39;</span><span class="p">,</span> <span class="kc">True</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">tupla</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">tupla</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">tupla</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">])</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">tupla</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'item0',
          'True',
          '(True, 3.3)',
          '(True, 3.3)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can check if there is an item in the tuple</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="s1">&#39;item4&#39;</span> <span class="ow">in</span> <span class="n">tupla</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.2.1. Modifying tuples">2.3.2.1. Modifying tuples<a class="anchor-link" href="#2.3.2.1. Modifying tuples"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 108" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Although tuples are not mutable, they can be modified by converting them to lists, modifying the list, and then converting it back to a tuple.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
      '<span class="n">lista</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;ITEM4&#39;</span>',
      '<span class="n">tupla</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">lista</span><span class="p">)</span>',
      '<span class="n">tupla</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(&#x27;item0&#x27;, 1, True, 3.3, &#x27;ITEM4&#x27;, True)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>By converting it to a list, we can make all the modifications seen in lists.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>What can be done is to delete the complete tuple</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">del</span> <span class="n">tupla</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="s1">&#39;tupla&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="nb">locals</span><span class="p">():</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;tupla eliminada&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'tupla eliminada',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.22. Unpack tuples">2.3.22. Unpack tuples<a class="anchor-link" href="#2.3.22. Unpack tuples"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 109" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>When we create tuples, we are actually packaging data</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;item0&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">,</span> <span class="s1">&#39;item4&#39;</span><span class="p">,</span> <span class="kc">True</span><span class="p">)</span>',
      '<span class="n">tupla</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(&#x27;item0&#x27;, 1, True, 3.3, &#x27;item4&#x27;, True)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>but we can unpack them</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="n">item3</span><span class="p">,</span> <span class="n">item4</span><span class="p">,</span> <span class="n">item5</span> <span class="o">=</span> <span class="n">tupla</span>',
      '<span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="n">item3</span><span class="p">,</span> <span class="n">item4</span><span class="p">,</span> <span class="n">item5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(&#x27;item0&#x27;, 1, True, 3.3, &#x27;item4&#x27;, True)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want to extract fewer elements than the length of the tuple, we add a <code>*</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="o">*</span><span class="n">item3</span> <span class="o">=</span> <span class="n">tupla</span>',
      '<span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="n">item3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(&#x27;item0&#x27;, 1, True, [3.3, &#x27;item4&#x27;, True])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The asterisk <code>*</code> can be placed elsewhere if, for example, what we want is the last item.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="o">*</span><span class="n">item2</span><span class="p">,</span> <span class="n">item5</span> <span class="o">=</span> <span class="n">tupla</span>',
      '<span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="n">item5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(&#x27;item0&#x27;, 1, [True, 3.3, &#x27;item4&#x27;], True)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.23. Concatenating tuples">2.3.23. Concatenating tuples<a class="anchor-link" href="#2.3.23. Concatenating tuples"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 110" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Tuples can be concatenated using the <code>+</code> operator</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tupla1</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span> <span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">)</span>',
      '<span class="n">tupla2</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">tupla3</span> <span class="o">=</span> <span class="n">tupla1</span> <span class="o">+</span> <span class="n">tupla2</span>',
      '<span class="n">tupla3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 1, 2, 3)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another way to concatenate is to repeat the tuple X times using the <code>*</code> operator</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tupla1</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span> <span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">tupla2</span> <span class="o">=</span> <span class="n">tupla1</span> <span class="o">*</span> <span class="mi">3</span>',
      '<span class="n">tupla2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.24. Tuple Methods">2.3.24. Tuple Methods<a class="anchor-link" href="#2.3.24. Tuple Methods"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 111" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Tuples have two methods, the first is the <code>count()</code> method which returns the number of times an item appears within the tuple.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>',
      '<span class="n">tupla</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another method is <code>index()</code> which returns the first position of an item within the tuple.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>',
      '<span class="n">tupla</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.3.3. Range">2.3.3. Range<a class="anchor-link" href="#2.3.3. Range"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 112" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>With <code>range()</code> we can create a sequence of numbers, starting from 0 (by default), it increments by 1 (by default) and stops before a specified number.</p>
      <div class='highlight'><pre><code class="language-text">range(start, stop, step)</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>For example, if we want a sequence from 0 to 5 (not including 5)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1"> &#39;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '0 1 2 3 4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If for example we don't want it to start at 0</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1"> &#39;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2 3 4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1"> &#39;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '-2 -1 0 1 2 3 4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Lastly, if we don't want it to increment by 1, for example, if we want a sequence of even numbers.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1"> &#39;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '0 2 4 6 8',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.4. Dictionaries">2.4. Dictionaries<a class="anchor-link" href="#2.4. Dictionaries"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 113" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Dictionaries are used to store data in <code>key:value</code> pairs. They are mutable, unordered, and do not allow duplicates. They are defined using the <code>&#123;&#125;</code> symbols. They support items of different data types.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;colors&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;red&quot;</span><span class="p">,</span> <span class="s2">&quot;white&quot;</span><span class="p">,</span> <span class="s2">&quot;blue&quot;</span><span class="p">]</span>',
      '<span class="p">}</span>',
      '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;brand&#x27;: &#x27;Ford&#x27;,',
          '&#x27;model&#x27;: &#x27;Mustang&#x27;,',
          '&#x27;year&#x27;: 1964,',
          '&#x27;colors&#x27;: [&#x27;red&#x27;, &#x27;white&#x27;, &#x27;blue&#x27;]&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As has been said, duplicates are not allowed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">2000</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;colors&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;red&quot;</span><span class="p">,</span> <span class="s2">&quot;white&quot;</span><span class="p">,</span> <span class="s2">&quot;blue&quot;</span><span class="p">]</span>',
      '<span class="p">}</span>',
      '<span class="n">diccionario</span><span class="p">[</span><span class="s2">&quot;year&quot;</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2000',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Its length can be obtained using the <code>len()</code> function.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As can be seen, the length is 4 and not 5, since <code>year</code> is counted only once.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.1. Accessing Items">2.4.1. Accessing Items<a class="anchor-link" href="#2.4.1. Accessing Items"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 114" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To access an element, we can do so through its <code>key</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span><span class="p">[</span><span class="s2">&quot;model&quot;</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x27;Mustang&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>It can also be accessed using the <code>get</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;model&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x27;Mustang&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>To know all the <code>key</code>s of dictionaries, you can use the <code>keys()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dict_keys([&#x27;brand&#x27;, &#x27;model&#x27;, &#x27;year&#x27;, &#x27;colors&#x27;])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A variable can be used to point to the <code>key</code>s of the dictionary, so that calling it once is necessary</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se declara una vez la variable que apunta a las keys</span>',
      '<span class="n">x</span> <span class="o">=</span> <span class="n">diccionario</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se aÃ±ade una nueva key</span>',
      '<span class="n">diccionario</span><span class="p">[</span><span class="s2">&quot;color&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;white&quot;</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se consulta la variable que apunta a las key</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dict_keys([&#x27;brand&#x27;, &#x27;model&#x27;, &#x27;year&#x27;])',
          'dict_keys([&#x27;brand&#x27;, &#x27;model&#x27;, &#x27;year&#x27;, &#x27;color&#x27;])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>To get the values from the dictionary, you can use the <code>values()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span><span class="o">.</span><span class="n">values</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dict_values([&#x27;Ford&#x27;, &#x27;Mustang&#x27;, 1964, &#x27;white&#x27;])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A variable can be used to point to the <code>values</code> of the dictionary, so that calling it once is necessary.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se declara una vez la variable que apunta a los values</span>',
      '<span class="n">x</span> <span class="o">=</span> <span class="n">diccionario</span><span class="o">.</span><span class="n">values</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se modifica un value</span>',
      '<span class="n">diccionario</span><span class="p">[</span><span class="s2">&quot;year&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2020</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se consulta la variable que apunta a los values</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dict_values([&#x27;Ford&#x27;, &#x27;Mustang&#x27;, 1964])',
          'dict_values([&#x27;Ford&#x27;, &#x27;Mustang&#x27;, 2020])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If what you want are the entire <code>item</code>s, that is, <code>key</code>s and <code>value</code>s, you should use the <code>items()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dict_items([(&#x27;brand&#x27;, &#x27;Ford&#x27;), (&#x27;model&#x27;, &#x27;Mustang&#x27;), (&#x27;year&#x27;, 2020)])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A variable can be used to point to the <code>item</code>s in the dictionary, so that calling it once is necessary.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se declara una vez la variable que apunta a los items</span>',
      '<span class="n">x</span> <span class="o">=</span> <span class="n">diccionario</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se modifica un value</span>',
      '<span class="n">diccionario</span><span class="p">[</span><span class="s2">&quot;year&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2020</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se consulta la variable que apunta a los items</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dict_items([(&#x27;brand&#x27;, &#x27;Ford&#x27;), (&#x27;model&#x27;, &#x27;Mustang&#x27;), (&#x27;year&#x27;, 1964)])',
          'dict_items([(&#x27;brand&#x27;, &#x27;Ford&#x27;), (&#x27;model&#x27;, &#x27;Mustang&#x27;), (&#x27;year&#x27;, 2020)])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>It can be checked if a <code>key</code> exists in the dictionary</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="s2">&quot;model&quot;</span> <span class="ow">in</span> <span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.2. Modify the items">2.4.2. Modify the items<a class="anchor-link" href="#2.4.2. Modify the items"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 115" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>An <code>item</code> can be modified by accessing it directly.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se modifica un item</span>',
      '<span class="n">diccionario</span><span class="p">[</span><span class="s2">&quot;year&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2020</span>',
      '<span class="w"> </span>',
      '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;brand&#x27;: &#x27;Ford&#x27;, &#x27;model&#x27;: &#x27;Mustang&#x27;, &#x27;year&#x27;: 2020&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or it can be modified using the <code>update()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se modifica un item</span>',
      '<span class="n">diccionario</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">2020</span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;brand&#x27;: &#x27;Ford&#x27;, &#x27;model&#x27;: &#x27;Mustang&#x27;, &#x27;year&#x27;: 2020&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.3. Adding Items">2.4.3. Adding Items<a class="anchor-link" href="#2.4.3. Adding Items"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 116" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>An <code>item</code> can be added in this way:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se modifica un item</span>',
      '<span class="n">diccionario</span><span class="p">[</span><span class="s2">&quot;colour&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;blue&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;brand&#x27;: &#x27;Ford&#x27;, &#x27;model&#x27;: &#x27;Mustang&#x27;, &#x27;year&#x27;: 1964, &#x27;colour&#x27;: &#x27;blue&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or it can be added using the <code>update()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se modifica un item</span>',
      '<span class="n">diccionario</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s2">&quot;colour&quot;</span><span class="p">:</span> <span class="s2">&quot;blue&quot;</span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;brand&#x27;: &#x27;Ford&#x27;, &#x27;model&#x27;: &#x27;Mustang&#x27;, &#x27;year&#x27;: 1964, &#x27;colour&#x27;: &#x27;blue&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.4. Remove items">2.4.4. Remove items<a class="anchor-link" href="#2.4.4. Remove items"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 117" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>An <code>item</code> with a specific <code>key</code> can be removed using the <code>pop()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se elimina un item</span>',
      '<span class="n">diccionario</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s2">&quot;model&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;brand&#x27;: &#x27;Ford&#x27;, &#x27;year&#x27;: 1964&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or you can delete an <code>item</code> with a specific <code>key</code> using <code>del</code> by specifying the <code>key</code> name between the <code>[]</code> symbols.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se elimina un item</span>',
      '<span class="k">del</span> <span class="n">diccionario</span><span class="p">[</span><span class="s2">&quot;model&quot;</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;brand&#x27;: &#x27;Ford&#x27;, &#x27;year&#x27;: 1964&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The dictionary will raise an error if <code>del</code> is used and the <code>key</code> of an <code>item</code> is not specified.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se elimina un item</span>',
      '<span class="k">del</span> <span class="n">diccionario</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="s1">&#39;diccionario&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="nb">locals</span><span class="p">():</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;diccionario eliminado&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'diccionario eliminado',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If what is desired is to remove the last <code>item</code> introduced, the <code>popitem()</code> method can be used.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se elimina el Ãºltimo item introducido</span>',
      '<span class="n">diccionario</span><span class="o">.</span><span class="n">popitem</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;brand&#x27;: &#x27;Ford&#x27;, &#x27;model&#x27;: &#x27;Mustang&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If you want to clear the dictionary, you can use the <code>clear()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span>',
      '<span class="p">}</span>',
      '<span class="n">diccionario</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>',
      '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.5. Copying dictionaries">2.4.5. Copying dictionaries<a class="anchor-link" href="#2.4.5. Copying dictionaries"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 118" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Dictionaries cannot be copied using <code>dictionary1 = dictionary2</code>, because if you modify <code>dictionary1</code>, <code>dictionary2</code> will also be modified.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario1</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span>',
      '<span class="p">}</span>',
      '<span class="n">diccionario2</span> <span class="o">=</span> <span class="n">diccionario1</span>',
      '<span class="n">diccionario1</span><span class="p">[</span><span class="s2">&quot;year&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2000</span>',
      '<span class="n">diccionario2</span><span class="p">[</span><span class="s2">&quot;year&quot;</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2000',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>So, you have to use the <code>copy()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario1</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span>',
      '<span class="p">}</span>',
      '<span class="n">diccionario2</span> <span class="o">=</span> <span class="n">diccionario1</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>',
      '<span class="n">diccionario1</span><span class="p">[</span><span class="s2">&quot;year&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2000</span>',
      '<span class="n">diccionario2</span><span class="p">[</span><span class="s2">&quot;year&quot;</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '1964',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or you have to use the dictionary constructor <code>dict()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario1</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span>',
      '<span class="p">}</span>',
      '<span class="n">diccionario2</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">diccionario1</span><span class="p">)</span>',
      '<span class="n">diccionario1</span><span class="p">[</span><span class="s2">&quot;year&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2000</span>',
      '<span class="n">diccionario2</span><span class="p">[</span><span class="s2">&quot;year&quot;</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '1964',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.6. Anidated Dictionaries">2.4.6. Anidated Dictionaries<a class="anchor-link" href="#2.4.6. Anidated Dictionaries"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 119" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Dictionaries can have <code>items</code> of any data type, even other dictionaries. These types of dictionaries are called <code>nested</code> dictionaries.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario_nested</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;child1&quot;</span> <span class="p">:</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="s2">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Emil&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="s2">&quot;year&quot;</span> <span class="p">:</span> <span class="mi">2004</span>',
      '<span class="w">  </span><span class="p">},</span>',
      '<span class="w">  </span><span class="s2">&quot;child2&quot;</span> <span class="p">:</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="s2">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Tobias&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="s2">&quot;year&quot;</span> <span class="p">:</span> <span class="mi">2007</span>',
      '<span class="w">  </span><span class="p">},</span>',
      '<span class="w">  </span><span class="s2">&quot;child3&quot;</span> <span class="p">:</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="s2">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Linus&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="s2">&quot;year&quot;</span> <span class="p">:</span> <span class="mi">2011</span>',
      '<span class="w">  </span><span class="p">}</span>',
      '<span class="p">}</span>',
      '<span class="n">diccionario_nested</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;child1&#x27;: &#x7B;&#x27;name&#x27;: &#x27;Emil&#x27;, &#x27;year&#x27;: 2004&#x7D;,',
          '&#x27;child2&#x27;: &#x7B;&#x27;name&#x27;: &#x27;Tobias&#x27;, &#x27;year&#x27;: 2007&#x7D;,',
          '&#x27;child3&#x27;: &#x7B;&#x27;name&#x27;: &#x27;Linus&#x27;, &#x27;year&#x27;: 2011&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">child1</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Emil&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;year&quot;</span> <span class="p">:</span> <span class="mi">2004</span>',
      '<span class="p">}</span>',
      '<span class="n">child2</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Tobias&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;year&quot;</span> <span class="p">:</span> <span class="mi">2007</span>',
      '<span class="p">}</span>',
      '<span class="n">child3</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Linus&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;year&quot;</span> <span class="p">:</span> <span class="mi">2011</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">diccionario_nested</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;child1&quot;</span> <span class="p">:</span> <span class="n">child1</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;child2&quot;</span> <span class="p">:</span> <span class="n">child2</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;child3&quot;</span> <span class="p">:</span> <span class="n">child3</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">diccionario_nested</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;child1&#x27;: &#x7B;&#x27;name&#x27;: &#x27;Emil&#x27;, &#x27;year&#x27;: 2004&#x7D;,',
          '&#x27;child2&#x27;: &#x7B;&#x27;name&#x27;: &#x27;Tobias&#x27;, &#x27;year&#x27;: 2007&#x7D;,',
          '&#x27;child3&#x27;: &#x7B;&#x27;name&#x27;: &#x27;Linus&#x27;, &#x27;year&#x27;: 2011&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.7. Dictionary Methods">2.4.7. Dictionary Methods<a class="anchor-link" href="#2.4.7. Dictionary Methods"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 120" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>These are the <a href="https://www.w3schools.com/python/python_dictionaries_methods.asp" target="_blank" rel="nofollow noreferrer">methods</a> that can be used on dictionaries.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.8. Dictionary comprehension">2.4.8. Dictionary comprehension<a class="anchor-link" href="#2.4.8. Dictionary comprehension"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 121" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>igual que podemos hacer <code>list comprehensions</code> mediante la sintaxis</p>
      <div class='highlight'><pre><code class="language-python">list comprehension = [expression for item in iterable if condition == True]</code></pre></div>
      <p>We can create <code>dictionary comprehensions</code> using the following syntax</p>
      <div class='highlight'><pre><code class="language-python">dictionary comprehension = &#123;key_expression: value_expression for item in iterable if condition == True&#125;</code></pre></div>
      <p>Let's start with an example</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dictionary_comprehension</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span><span class="p">}</span>',
      '<span class="n">dictionary_comprehension</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;4: 16, 6: 36&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.5. Sets">2.5. Sets<a class="anchor-link" href="#2.5. Sets"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 122" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.5.1. Set">2.5.1. Set<a class="anchor-link" href="#2.5.1. Set"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 123" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>Sets</code> are used in Python to store a collection of items in a single variable. They can store items of different types. They are unordered and do not have an index.</p>
      <p>They differ from lists in that they have neither order nor index.</p>
      <p>They are declared using the symbols <code>&#123;&#125;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Since <code>set</code> is a reserved word in Python, we create a <code>set</code> with the name <code>set_</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">set_</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;item0&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">5.3</span><span class="p">,</span> <span class="s2">&quot;item4&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mf">6.6</span><span class="p">}</span>',
      '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;1, 5, 5.3, 6.6, &#x27;item0&#x27;, &#x27;item4&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Items cannot be duplicated, if a duplicate item is found, only one is kept.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">set_</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;item0&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">5.3</span><span class="p">,</span> <span class="s2">&quot;item4&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mf">6.6</span><span class="p">,</span> <span class="s1">&#39;item0&#39;</span><span class="p">}</span>',
      '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;1, 5, 5.3, 6.6, &#x27;item0&#x27;, &#x27;item4&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The length of the <code>set</code> can be obtained using the <code>len()</code> function.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">set_</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As can be seen, the length of the set is 6 and not 7, since it remains with only one <code>&#x27;item0&#x27;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>It can be checked if an item is in the set</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="s1">&#39;item4&#39;</span> <span class="ow">in</span> <span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.5.1.1. Add items">2.5.1.1. Add items<a class="anchor-link" href="#2.5.1.1. Add items"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 124" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>An element can be added to a set using the <code>add()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">set_</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mf">8.8</span><span class="p">)</span>',
      '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;1, 5, 5.3, 6.6, 8.8, &#x27;item0&#x27;, &#x27;item4&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another set can be added using the <code>update()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;item5&quot;</span><span class="p">,</span> <span class="s2">&quot;item6&quot;</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>',
      '<span class="n">set_</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
      '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;1, 5, 5.3, 6.6, 7, 8.8, &#x27;item0&#x27;, &#x27;item4&#x27;, &#x27;item5&#x27;, &#x27;item6&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Items can also be added from iterable data types in Python.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;item9&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mf">11.2</span><span class="p">]</span>',
      '<span class="n">set_</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">lista</span><span class="p">)</span>',
      '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;1, 10, 11.2, 5, 5.3, 6.6, 7, 8.8, &#x27;item0&#x27;, &#x27;item4&#x27;, &#x27;item5&#x27;, &#x27;item6&#x27;, &#x27;item9&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.5.1.2. Remove items">2.5.1.2. Remove items<a class="anchor-link" href="#2.5.1.2. Remove items"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 125" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>An item can be removed using the <code>remove()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">set_</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;item9&#39;</span><span class="p">)</span>',
      '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;1, 10, 11.2, 5, 5.3, 6.6, 7, 8.8, &#x27;item0&#x27;, &#x27;item4&#x27;, &#x27;item5&#x27;, &#x27;item6&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Or using the <code>discard()</code> method</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">set_</span><span class="o">.</span><span class="n">discard</span><span class="p">(</span><span class="s1">&#39;item6&#39;</span><span class="p">)</span>',
      '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;1, 10, 11.2, 5, 5.3, 6.6, 7, 8.8, &#x27;item0&#x27;, &#x27;item4&#x27;, &#x27;item5&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The <code>pop()</code> method can remove the last item, but since <code>set</code>s are unordered, there's no way to know which is the last item. The <code>pop()</code> method returns the removed item.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;set antes de pop(): </span><span class="si">{</span><span class="n">set_</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="n">eliminado</span> <span class="o">=</span> <span class="n">set_</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Se ha eliminado </span><span class="si">{</span><span class="n">eliminado</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'set antes de pop(): &#x7B;1, 5, 5.3, 6.6, 8.8, 7, 10, 11.2, &#x27;item5&#x27;, &#x27;item0&#x27;, &#x27;item4&#x27;&#x7D;',
          'Se ha eliminado 1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The <code>clear()</code> method can be used to empty the set.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">set_</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>',
      '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'set()',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Lastly, with <code>del</code> you can delete the set</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">del</span> <span class="n">set_</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="s1">&#39;set_&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="nb">locals</span><span class="p">():</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;set eliminado&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'set eliminado',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.5.1.3. Unir items">2.5.1.3. Unir Ã­tems<a class="anchor-link" href="#2.5.1.3. Unir items"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 126" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>a way to unite sets is through the <code>union()</code> method</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span> <span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">}</span>',
      '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>',
      '<span class="n">set3</span> <span class="o">=</span> <span class="n">set1</span><span class="o">.</span><span class="n">union</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
      '<span class="n">set3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;1, 2, 3, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another way is through the <code>update()</code> method, but this way adds a set to another, it doesn't create a new one.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span> <span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">}</span>',
      '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>',
      '<span class="n">set1</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
      '<span class="n">set1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;1, 2, 3, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>These methods of union remove the duplicates, but if we want to get the duplicated elements in two sets we can use the <code>intersection()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;apple&quot;</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="p">,</span> <span class="s2">&quot;cherry&quot;</span><span class="p">}</span>',
      '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;google&quot;</span><span class="p">,</span> <span class="s2">&quot;microsoft&quot;</span><span class="p">,</span> <span class="s2">&quot;apple&quot;</span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">set3</span> <span class="o">=</span> <span class="n">set1</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
      '<span class="n">set3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;apple&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want to get the duplicate elements in two sets, but without creating a new set, we can use the <code>intersection_update()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;apple&quot;</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="p">,</span> <span class="s2">&quot;cherry&quot;</span><span class="p">}</span>',
      '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;google&quot;</span><span class="p">,</span> <span class="s2">&quot;microsoft&quot;</span><span class="p">,</span> <span class="s2">&quot;apple&quot;</span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">set1</span><span class="o">.</span><span class="n">intersection_update</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
      '<span class="n">set1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;apple&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now, if we want to get rid of the duplicates, we can use the <code>symmetric_difference()</code> method.</p>
      <p>The difference between this and the union of two sets is that in the union, all items are included, but duplicates are only taken once. Now we keep only those that are not duplicated.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;apple&quot;</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="p">,</span> <span class="s2">&quot;cherry&quot;</span><span class="p">}</span>',
      '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;google&quot;</span><span class="p">,</span> <span class="s2">&quot;microsoft&quot;</span><span class="p">,</span> <span class="s2">&quot;apple&quot;</span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">set3</span> <span class="o">=</span> <span class="n">set1</span><span class="o">.</span><span class="n">symmetric_difference</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
      '<span class="n">set3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;banana&#x27;, &#x27;cherry&#x27;, &#x27;google&#x27;, &#x27;microsoft&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want to remove the duplicates without creating a new set, we use the <code>symmetric_difference_update()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;apple&quot;</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="p">,</span> <span class="s2">&quot;cherry&quot;</span><span class="p">}</span>',
      '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;google&quot;</span><span class="p">,</span> <span class="s2">&quot;microsoft&quot;</span><span class="p">,</span> <span class="s2">&quot;apple&quot;</span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">set1</span><span class="o">.</span><span class="n">symmetric_difference_update</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
      '<span class="n">set1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;banana&#x27;, &#x27;cherry&#x27;, &#x27;google&#x27;, &#x27;microsoft&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.5.1.4. Methods of sets">2.5.1.4. Methods of sets<a class="anchor-link" href="#2.5.1.4. Methods of sets"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 127" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>These are the <a href="https://www.w3schools.com/python/python_sets_methods.asp" target="_blank" rel="nofollow noreferrer">methods</a> that can be used with sets.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.5.2. FrozenSet">2.5.2. FrozenSet<a class="anchor-link" href="#2.5.2. FrozenSet"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 128" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>frozenset</code>s are like <code>set</code>s but with the safety that they are immutable, just as <code>tuple</code>s are like <code>list</code>s but immutable. Therefore, we cannot add or remove items.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.6. Booleans">2.6. Booleans<a class="anchor-link" href="#2.6. Booleans"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 129" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>There are only two booleans in Python: <code>True</code> and <code>False</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The function <code>bool()</code> can evaluate if anything is <code>True</code> or <code>False</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">))</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="mi">15</span><span class="p">))</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.6.1. Other Data Types True and False">2.6.1. Other Data Types True and False<a class="anchor-link" href="#2.6.1. Other Data Types True and False"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 130" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The following data are <code>True</code>:</p>
      <ul>
        <li>Any string that is not empty</li>
        <li>Any number except 0</li>
        <li>Any list, tuple, dictionary, or set that is not empty</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="s2">&quot;Hola&quot;</span><span class="p">))</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">lista</span><span class="p">))</span>',
      '<span class="w"> </span>',
      '<span class="n">lista</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">lista</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">tupla</span><span class="p">))</span>',
      '<span class="w"> </span>',
      '<span class="n">tupla</span> <span class="o">=</span> <span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">tupla</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;brand&quot;</span><span class="p">:</span> <span class="s2">&quot;Ford&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;Mustang&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;year&quot;</span><span class="p">:</span> <span class="mi">1964</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;colors&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;red&quot;</span><span class="p">,</span> <span class="s2">&quot;white&quot;</span><span class="p">,</span> <span class="s2">&quot;blue&quot;</span><span class="p">]</span>',
      '<span class="p">}</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">diccionario</span><span class="p">))</span>',
      '<span class="w"> </span>',
      '<span class="n">diccionario</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">diccionario</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">set_</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;item0&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">5.3</span><span class="p">,</span> <span class="s2">&quot;item4&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mf">6.6</span><span class="p">}</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">set_</span><span class="p">))</span>',
      '<span class="w"> </span>',
      '<span class="n">set_</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">set_</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.7. Binaries">2.7. Binaries<a class="anchor-link" href="#2.7. Binaries"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 131" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.7.1. Bytes">2.7.1. Bytes<a class="anchor-link" href="#2.7.1. Bytes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 132" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>bytes</code> type is an immutable sequence of bytes. It only accepts ASCII characters. Bytes can also be represented using integers whose values must satisfy <code>0 &#x3C;= x &#x3C; 256</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To create a byte type, we must introduce the character <code>b</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">byte</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&quot;MaximoFN&quot;</span>',
      '<span class="n">byte</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'b&#x27;MaximoFN&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>It can also be created using its constructor <code>bytes()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">byte</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>',
      '<span class="n">byte</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">byte</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>',
      '<span class="n">byte</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'b&#x27;\x00\x01\x02\x03\x04\x05\x06\x07\x08\t&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Bytes can be concatenated using the <code>+</code> operator.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">byte1</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;DeepMax&#39;</span>',
      '<span class="n">byte2</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;FN&#39;</span>',
      '<span class="n">byte3</span> <span class="o">=</span> <span class="n">byte1</span> <span class="o">+</span> <span class="n">byte2</span>',
      '<span class="n">byte3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'b&#x27;DeepMaxFN&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Repetition with the <code>*</code> operator</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">byte1</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;MaximoFN &#39;</span>',
      '<span class="n">byte2</span> <span class="o">=</span> <span class="n">byte1</span> <span class="o">*</span> <span class="mi">3</span>',
      '<span class="n">byte2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'b&#x27;MaximoFN MaximoFN MaximoFN &#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can check if a character is within the string</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="sa">b</span><span class="s1">&#39;D&#39;</span> <span class="ow">in</span> <span class="n">byte1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>These are the [methods](httpsplataforma.josedomingo.org/pledin/cursos/python3/curso/u30/#methods-of-bytes-and-bytearray) that can be used with <code>bytes</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.7.2. Bytearray">2.7.2. Bytearray<a class="anchor-link" href="#2.7.2. Bytearray"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 133" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>bytearray</code>s are the same as <code>bytes</code> except that they are mutable.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">byte_array</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;MaximoFN&#39;</span><span class="p">)</span>',
      '<span class="n">byte_array</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'bytearray(b&#x27;MaximoFN&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.7.3. MemoryView">2.7.3. MemoryView<a class="anchor-link" href="#2.7.3. MemoryView"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 134" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>memoryview</code> objects allow Python code to access the internal data of an object that supports the buffer protocol without making copies.</p>
      <p>The <code>memoryview()</code> function allows direct read and write access to the byte-oriented data of an object without the need to copy it first. This can result in significant performance gains when working with large objects, as it does not create a copy when slicing.</p>
      <p>buffer protocol, it can create another access object to modify large data without copying it. This makes the program use less memory and increase execution speed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">byte_array</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="s1">&#39;XYZ&#39;</span><span class="p">,</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Antes de acceder a la memoria: </span><span class="si">{</span><span class="n">byte_array</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">mem_view</span> <span class="o">=</span> <span class="nb">memoryview</span><span class="p">(</span><span class="n">byte_array</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">mem_view</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span> <span class="mi">74</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;DespuÃ©s de acceder a la memoria: </span><span class="si">{</span><span class="n">byte_array</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Antes de acceder a la memoria: bytearray(b&#x27;XYZ&#x27;)',
          'DespuÃ©s de acceder a la memoria: bytearray(b&#x27;XYJ&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="3. Operators">3. Operators<a class="anchor-link" href="#3. Operators"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 135" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.1. Arithmetic Operators">3.1. Arithmetic Operators<a class="anchor-link" href="#3.1. Arithmetic Operators"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 136" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operator sum <code>+</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="mi">3</span> <span class="o">+</span> <span class="mi">5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '8',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator minus -</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="mi">3</span> <span class="o">-</span> <span class="mi">5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '-2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Multiplication operator <code>*</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="mi">3</span> <span class="o">*</span> <span class="mi">5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '15',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Division operator <code>/</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="mi">3</span> <span class="o">/</span> <span class="mi">5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '0.6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Modulo operator <code>%</code>. Returns the remainder of a division.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="mi">25</span> <span class="o">%</span> <span class="mi">2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Exponent operator <code>**</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="mi">5</span> <span class="o">**</span> <span class="mi">2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '25',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Integer division operator <code>//</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="mi">25</span> <span class="o">//</span> <span class="mi">2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '12',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.2. Comparison Operators">3.2. Comparison Operators<a class="anchor-link" href="#3.2. Comparison Operators"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 137" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operator is equal <code>==</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator is different <code>!=</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="mi">1</span> <span class="o">!=</span> <span class="mi">2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator is greater than <code>&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="mi">3</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator is less than <code>&#x3C;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="mi">2</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator is greater than or equal to <code>&#x3E;=</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="mi">3</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator is less than or equal to <code>&#x3C;=</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="mi">3</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.3. Logical Operators">3.3. Logical Operators<a class="anchor-link" href="#3.3. Logical Operators"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 138" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>and</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kc">True</span> <span class="ow">and</span> <span class="kc">True</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>or</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kc">True</span> <span class="ow">or</span> <span class="kc">False</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>not</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="ow">not</span> <span class="kc">False</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.4. Identity Operators">3.4. Identity Operators<a class="anchor-link" href="#3.4. Identity Operators"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 139" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>is</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="mf">5.3</span> <span class="ow">is</span> <span class="mf">5.3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>is not</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="mf">5.3</span> <span class="ow">is</span> <span class="ow">not</span> <span class="mi">5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.5. Membership Operators">3.5. Membership Operators<a class="anchor-link" href="#3.5. Membership Operators"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 140" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>in</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;apple&quot;</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="s2">&quot;banana&quot;</span> <span class="ow">in</span> <span class="n">x</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>not in</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;apple&quot;</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="s2">&quot;orange&quot;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">x</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.6. Bitwise Operators">3.6. Bitwise Operators<a class="anchor-link" href="#3.6. Bitwise Operators"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 141" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operator AND <code>&amp;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
      '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
      '<span class="w"> </span>',
      '<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">b</span><span class="p">;</span>        <span class="c1"># 12 = 0000 1100</span>',
      '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '12',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator OR <code>|</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
      '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
      '<span class="w"> </span>',
      '<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">|</span> <span class="n">b</span><span class="p">;</span>        <span class="c1"># 61 = 0011 1101</span>',
      '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '61',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>XOR operator <code>^</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
      '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
      '<span class="w"> </span>',
      '<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="p">;</span>        <span class="c1"># 49 = 0011 0001</span>',
      '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '49',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator NOT <code>~</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
      '<span class="w"> </span>',
      '<span class="n">c</span> <span class="o">=</span> <span class="o">~</span><span class="n">a</span><span class="p">;</span>           <span class="c1"># -61 = 1100 0011</span>',
      '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '-61',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Left shift operator <code>&#x3C;&#x3C;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
      '<span class="w"> </span>',
      '<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span><span class="p">;</span>       <span class="c1"># 240 = 1111 0000</span>',
      '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '240',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Right shift operator <code>&#x3E;&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
      '<span class="w"> </span>',
      '<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span><span class="p">;</span>       <span class="c1"># 15 = 0000 1111</span>',
      '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '15',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.7. Assignment Operators">3.7. Assignment Operators<a class="anchor-link" href="#3.7. Assignment Operators"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 142" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operator `=</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>',
      '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '5',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>+=</code>. <code>x += y</code> is equivalent to <code>x = x + y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">+=</span> <span class="mi">5</span>',
      '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '10',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>-=</code>. <code>x -= y</code> is equivalentTo<code>x = x - y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">-=</span> <span class="mi">5</span>',
      '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '5',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>*=</code>. <code>x *= y</code> is equivalent to <code>x = x * y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">*=</span> <span class="mi">3</span>',
      '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '15',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>/=</code>. <code>x /= y</code> is equivalentTo<code>x = x / y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">/=</span> <span class="mi">3</span>',
      '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '5.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>%=</code>. <code>x %= y</code> is equivalentTo<code>x = x % y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">25</span>',
      '<span class="n">a</span> <span class="o">%=</span> <span class="mi">2</span>',
      '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>//=</code>. <code>x //= y</code> is equivalent to <code>x = x // y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">25</span>',
      '<span class="n">a</span> <span class="o">//=</span> <span class="mi">2</span>',
      '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '12',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>**=</code>. <code>x **=y</code> is equivalent to <code>x = x ** y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>',
      '<span class="n">a</span> <span class="o">**=</span> <span class="mi">2</span>',
      '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '25',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>&amp;=</code>. <code>x &amp;= y</code> is equivalent to <code>x = x &amp; y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
      '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
      '<span class="w"> </span>',
      '<span class="n">a</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">=</span> <span class="n">b</span><span class="p">;</span>           <span class="c1"># 12 = 0000 1100</span>',
      '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '12',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>|=</code>. <code>x |= y</code> is equivalent to <code>x = x | y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
      '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
      '<span class="w"> </span>',
      '<span class="n">a</span> <span class="o">|=</span> <span class="n">b</span><span class="p">;</span>           <span class="c1"># 61 = 0011 1101</span>',
      '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '61',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>^=</code>. <code>x ^= y</code> is equivalent to <code>x = x ^ y</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
      '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
      '<span class="w"> </span>',
      '<span class="n">a</span> <span class="o">^=</span> <span class="n">b</span><span class="p">;</span>           <span class="c1"># 49 = 0011 0001</span>',
      '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '49',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>&#x3E;&#x3E;=</code>. <code>x &#x3E;&#x3E;= y</code> is equivalent to <code>x = x &#x3E;&#x3E; y</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
      '<span class="w"> </span>',
      '<span class="n">a</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">2</span><span class="p">;</span>          <span class="c1"># 240 = 1111 0000</span>',
      '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '240',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operator <code>&#x3C;&#x3C;=</code>. <code>x &#x3C;&#x3C;= y</code> is equivalent to <code>x = x &#x3C;&#x3C; y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
      '<span class="w"> </span>',
      '<span class="n">a</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">2</span><span class="p">;</span>          <span class="c1"># 15 = 0000 1111</span>',
      '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '15',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="4. Flow Control">4. Flow Control<a class="anchor-link" href="#4. Flow Control"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 143" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To be able to use the flow control tools, it is necessary to add a colon <code>:</code> and on a new line write the code with indentation.</p>
      <p>Unlike other languages, Python requires indentation (white space at the beginning of a line) to define the code inside a control structure.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.1. If">4.1. If<a class="anchor-link" href="#4.1. If"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 144" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>With <code>if</code> we can create conditionals</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">&#39;MaximoFN&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">8</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;MaximoFN tiene 8 caracteres&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want to createMoreThanOneConditionWeCanUse<code>elif</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">&#39;MaximoFN&#39;</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">8</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;MaximoFN tiene menos de 8 caracteres&#39;</span><span class="p">)</span>',
      '<span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="s1">&#39;MaximoFN&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">8</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;MaximoFN tiene 8 caracteres&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If what we want is to execute something in case ofNoConditionsMatch, we can use <code>else</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">&#39;MaximoFN&#39;</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">8</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;MaximoFN tiene menos de 8 caracteres&#39;</span><span class="p">)</span>',
      '<span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="s1">&#39;MaximoFN&#39;</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">8</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;MaximoFN tiene mÃ¡s de 8 caracteres&#39;</span><span class="p">)</span>',
      '<span class="k">else</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;MaximoFN tiene 8 caracteres&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want to write everything in oneLine</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">&#39;MaximoFN&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">8</span><span class="p">:</span> <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;MaximoFN tiene 8 caracteres&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Equal, if we want to write everything in one line, ButWithSeveral conditions</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;MaximoFN tiene menos de 8 caracteres&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">&#39;MaximoFN&#39;</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">8</span> <span class="k">else</span> <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;MaximoFN tiene mÃ¡s de 8 caracteres&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">&#39;MaximoFN&#39;</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">8</span> <span class="k">else</span> <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;MaximoFN tiene 8 caracteres&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If, for example, we want to create the structure of the <code>if</code> without specifying the conditions at the moment, we can use <code>pass</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">&#39;MaximoFN&#39;</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">8</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;MaximoFN tiene menos de 8 caracteres&#39;</span><span class="p">)</span>',
      '<span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="s1">&#39;MaximoFN&#39;</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">8</span><span class="p">:</span>',
      '<span class="w">  </span><span class="k">pass</span>',
      '<span class="k">else</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;MaximoFN tiene 8 caracteres&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.2. While">4.2. While<a class="anchor-link" href="#4.2. While"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 145" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>while</code> loop executes as long as the condition is <code>True</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="n">string</span> <span class="o">=</span> <span class="s1">&#39;MaximoFN&#39;</span>',
      '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">i</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
      '<span class="w">  </span><span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want the loop to stop under some condition, we use <code>break</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="n">string</span> <span class="o">=</span> <span class="s1">&#39;MaximoFN&#39;</span>',
      '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">i</span><span class="p">:</span>',
      '<span class="w">  </span><span class="k">if</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;F&#39;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="k">break</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
      '<span class="w">  </span><span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Maximo',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want one of the iterations not to executeForSomeReason, we use <code>continue</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="n">string</span> <span class="o">=</span> <span class="s1">&#39;Maximo FN&#39;</span>',
      '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">i</span><span class="p">:</span>',
      '<span class="w">  </span><span class="k">if</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">    </span><span class="k">continue</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
      '<span class="w">  </span><span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The <code>else</code> block can be executed if the condition of the <code>while</code> loop is not <code>True</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="n">string</span> <span class="o">=</span> <span class="s1">&#39;MaximoFN&#39;</span>',
      '<span class="w"> </span>',
      '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">i</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
      '<span class="w">  </span><span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="k">else</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Se ha terminado el while&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
          'Se ha terminado el while',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.3. For">4.3. For<a class="anchor-link" href="#4.3. For"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 146" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>for</code> loop is used to execute code while iterating over an iterable. This iterable can be any Python iterable (<code>string</code>, <code>list</code>, <code>tuple</code>, <code>range</code>, <code>dictionary</code>, <code>set</code>).</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">&#39;MaximoFN&#39;</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;M&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span><span class="p">,</span> <span class="s1">&#39;F&#39;</span><span class="p">,</span> <span class="s1">&#39;N&#39;</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">lista</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;M&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span><span class="p">,</span> <span class="s1">&#39;F&#39;</span><span class="p">,</span> <span class="s1">&#39;N&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">tupla</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">&#39;MaximoFN&#39;</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">  </span><span class="s2">&quot;letra1&quot;</span><span class="p">:</span> <span class="s2">&quot;M&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;letra2&quot;</span><span class="p">:</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;letra3&quot;</span><span class="p">:</span> <span class="s2">&quot;x&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;letra4&quot;</span><span class="p">:</span> <span class="s2">&quot;i&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;letra5&quot;</span><span class="p">:</span> <span class="s2">&quot;m&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;letra6&quot;</span><span class="p">:</span> <span class="s2">&quot;o&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;letra7&quot;</span><span class="p">:</span> <span class="s2">&quot;F&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="s2">&quot;letra8&quot;</span><span class="p">:</span> <span class="s2">&quot;N&quot;</span><span class="p">,</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">diccionario</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Sets can also be iterated, but since they are unordered, there is no control over the order of execution.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">set_</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;M&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span><span class="p">,</span> <span class="s1">&#39;F&#39;</span><span class="p">,</span> <span class="s1">&#39;N&#39;</span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">set_</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'NximoaMF',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want the loop to stop under some condition, we use <code>break</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">&#39;MaximoFN&#39;</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
      '<span class="w">  </span><span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="s1">&#39;F&#39;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="k">break</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Maximo',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want one of the iterations not to executeForSomeReason, we use <code>continue</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">&#39;Maximo FN&#39;</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
      '<span class="w">  </span><span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="k">continue</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The <code>else</code> block can be executed if the condition of the <code>while</code> loop is not <code>True</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">&#39;MaximoFN&#39;</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
      '<span class="k">else</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Se ha terminado el for&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
          'Se ha terminado el for',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If forExample we want to create the structure of the <code>for</code> loop, at this point, to be able to fill it in later, we can use <code>pass</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">&#39;MaximoFN&#39;</span>',
      '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
      '<span class="w">  </span><span class="k">pass</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Interior del for no codificado&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Interior del for no codificado',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="5. Functions">5. Functions<a class="anchor-link" href="#5. Functions"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 147" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A function is a portion of code that can be executed multiple times as needed. It can take arguments and can return data as a result.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To define a function, you start with the reserved word <code>def</code>, followed by the functionName, parentheses <code>()</code>, a colon <code>:</code>, and then continue on a new indented line with the function code.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">():</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;MaximoFN&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>To call the function, it is only necessary to write its name.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">funcion</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Functions canTakeAnyArgumentsPassedAsParametersAndSeparatedByCommas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">(</span><span class="n">string1</span><span class="p">,</span> <span class="n">string2</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">string1</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="n">string2</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">funcion</span><span class="p">(</span><span class="s2">&quot;Hola&quot;</span><span class="p">,</span> <span class="s2">&quot;MaximoFN&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hola MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>When calling the function, you must pass it the same number of arguments that were declared; otherwise, you would get an error.</p>
      <p>If we don't know the arguments that the functionWillReceive <code>*args</code>, it means that a <code>*</code> is used before the arguments to indicate that the number ofArguments is variable.</p>
      <p>When doing this, you passIt a <code>tuple</code> (which is immutable)WithTheArguments</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">(</span><span class="o">*</span><span class="n">argumentos</span><span class="p">):</span>',
      '<span class="w">  </span><span class="n">numero_argumentos</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">argumentos</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">  </span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">numero_argumentos</span><span class="p">):</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="n">argumentos</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">funcion</span><span class="p">(</span><span class="s2">&quot;funcion&quot;</span><span class="p">,</span> <span class="s2">&quot;con&quot;</span><span class="p">,</span> <span class="s2">&quot;varios&quot;</span><span class="p">,</span> <span class="s2">&quot;argumentos&quot;</span><span class="p">,</span> <span class="s2">&quot;sin&quot;</span><span class="p">,</span> <span class="s2">&quot;especificar&quot;</span><span class="p">,</span> <span class="s2">&quot;cuantos&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'funcion con varios argumentos sin especificar cuantos',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In case you don't know the order of the arguments of a function, you can specify the argument you want to pass by indicating its name.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">(</span><span class="n">argumento1</span><span class="p">,</span> <span class="n">argumento2</span><span class="p">,</span> <span class="n">argumento3</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">argumento1</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span><span class="o">+</span> <span class="n">argumento2</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="n">argumento3</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">funcion</span><span class="p">(</span><span class="n">argumento3</span> <span class="o">=</span> <span class="s2">&quot;MaximoFN&quot;</span><span class="p">,</span> <span class="n">argumento1</span> <span class="o">=</span> <span class="s2">&quot;Blog&quot;</span><span class="p">,</span> <span class="n">argumento2</span> <span class="o">=</span> <span class="s2">&quot;de&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Blog de MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In case you want to pass the arguments with their names, butEnCaseOf does notKnow howManyArguments there are to pass, you canUse <code>**kwargs</code>. In this case, a dictionary with the arguments will be passed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">(</span><span class="o">**</span><span class="n">kargumentos</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Autor del blog: &quot;</span> <span class="o">+</span> <span class="n">kargumentos</span><span class="p">[</span><span class="s2">&quot;autor&quot;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">funcion</span><span class="p">(</span><span class="n">blog</span> <span class="o">=</span> <span class="s2">&quot;Blog&quot;</span><span class="p">,</span> <span class="n">pertenencia</span> <span class="o">=</span> <span class="s2">&quot;de&quot;</span><span class="p">,</span> <span class="n">autor</span> <span class="o">=</span> <span class="s2">&quot;MaximoFN&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Autor del blog: MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want some argument to have a default value between the parameters of the function. This way, if the default value is not passed to the function, the argument in the function will have the default value.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">(</span><span class="n">argumento1</span><span class="p">,</span> <span class="n">argumento2</span><span class="p">,</span> <span class="n">argumento3</span> <span class="o">=</span> <span class="s2">&quot;MaximoFN&quot;</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">argumento1</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span><span class="o">+</span> <span class="n">argumento2</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="n">argumento3</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">funcion</span><span class="p">(</span><span class="s2">&quot;Blog&quot;</span><span class="p">,</span> <span class="s2">&quot;de&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Blog de MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Any type of data can be passed as an argument. For example, if a <code>list</code> is passed as an argument, within the function, that argument will be treated as a <code>list</code>.</p>
      <div class='highlight'><pre><code class="language-markdown">Se puede pasar cualquier tipo de dato como argumento. Por ejemplo, si se pasa una `lista` como argumento, dentro de la funciÃ³n, dicho argumento serÃ¡ tratado como una `lista`.</code></pre></div>
      <p>Becomes:</p>
      <div class='highlight'><pre><code class="language-markdown">Any type of data can be passed as an argument. For example, if a `list` is passed as an argument, within the function, that argument will be treated as a `list`.</code></pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">(</span><span class="n">argumento</span><span class="p">):</span>',
      '<span class="w">  </span><span class="n">longitud_lista</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">argumento</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">  </span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">longitud_lista</span><span class="p">):</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="n">argumento</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">funcion</span><span class="p">([</span><span class="s2">&quot;Blog&quot;</span><span class="p">,</span> <span class="s2">&quot;de&quot;</span><span class="p">,</span> <span class="s2">&quot;MaximoFN&quot;</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Blog de MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Functions can return data, this is done using the reserved word <code>return</code>.</p>
      <div class='highlight'><pre><code class="language-markdown">Las funciones pueden devolver datos, esto se hace mediante la palabra reservada `return`</code></pre></div>
      <div class='highlight'><pre><code class="language-markdown">Functions can return data, this is done using the reserved word `return`.</code></pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">(</span><span class="n">argumento</span><span class="p">):</span>',
      '<span class="w">  </span><span class="n">longitud_lista</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">argumento</span><span class="p">)</span>',
      '<span class="w">  </span><span class="n">string</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">  </span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">longitud_lista</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">string</span> <span class="o">=</span> <span class="n">string</span> <span class="o">+</span> <span class="n">argumento</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span>',
      '<span class="w"> </span>',
      '<span class="w">  </span><span class="k">return</span> <span class="n">string</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">funcion</span><span class="p">([</span><span class="s2">&quot;Blog&quot;</span><span class="p">,</span> <span class="s2">&quot;de&quot;</span><span class="p">,</span> <span class="s2">&quot;MaximoFN&quot;</span><span class="p">]))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Blog de MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Can return more than one data</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">(</span><span class="n">argumento</span><span class="p">):</span>',
      '<span class="w">  </span><span class="n">longitud_lista</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">argumento</span><span class="p">)</span>',
      '<span class="w">  </span><span class="n">string0</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w">  </span><span class="n">string1</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
      '<span class="w">  </span><span class="n">string2</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="w">  </span><span class="k">return</span> <span class="n">string0</span><span class="p">,</span> <span class="n">string1</span><span class="p">,</span> <span class="n">string2</span>',
      '<span class="w"> </span>',
      '<span class="n">dato0</span><span class="p">,</span> <span class="n">dato1</span><span class="p">,</span> <span class="n">dato2</span> <span class="o">=</span> <span class="n">funcion</span><span class="p">([</span><span class="s2">&quot;Blog&quot;</span><span class="p">,</span> <span class="s2">&quot;de&quot;</span><span class="p">,</span> <span class="s2">&quot;MaximoFN&quot;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">dato0</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="n">dato1</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="n">dato2</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Blog de MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If one of the returned data is not of interest, we can skip it using <code>_</code>.</p>
      <div class='highlight'><pre><code class="language-python">a, _, c = some_function()</code></pre></div>
      <p>This is a common practice in Python to ignore certain values that are returned but not needed.</p>
      <p>---</p>
      <p>If one of the returned data is not of interest, we can skip it using <code>_</code>.</p>
      <div class='highlight'><pre><code class="language-python">a, _, c = some_function()</code></pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">(</span><span class="n">argumento</span><span class="p">):</span>',
      '<span class="w">  </span><span class="n">longitud_lista</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">argumento</span><span class="p">)</span>',
      '<span class="w">  </span><span class="n">string0</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w">  </span><span class="n">string1</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
      '<span class="w">  </span><span class="n">string2</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="w">  </span><span class="k">return</span> <span class="n">string0</span><span class="p">,</span> <span class="n">string1</span><span class="p">,</span> <span class="n">string2</span>',
      '<span class="w"> </span>',
      '<span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">dato_de_interes</span> <span class="o">=</span> <span class="n">funcion</span><span class="p">([</span><span class="s2">&quot;Blog&quot;</span><span class="p">,</span> <span class="s2">&quot;de&quot;</span><span class="p">,</span> <span class="s2">&quot;MaximoFN&quot;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">dato_de_interes</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If, for example, we want to create the structure of the function but do not want to, for the moment, code the interior, we can use <code>pass</code>.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python">def my_function():<br>&#x20;&#x20;pass</code></pre></div>
            </section>
      <p>---</p>
      <p>Si queremos indicar que la funciÃ³n aÃºn no estÃ¡ completa, podemos usar un comentario o <code>TODO</code>:</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python">def my_function():<br>&#x20;&#x20;# TODO: Implementar la lÃ³gica de la funciÃ³n<br>&#x20;&#x20;pass</code></pre></div>
            </section>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">():</span>',
      '<span class="w">  </span><span class="k">pass</span>',
      '<span class="w"> </span>',
      '<span class="n">funcion</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>A function can call itself, this is called recursion or function recursivity.</p>
      <div class='highlight'><pre><code class="language-markdown">A function can call itself, this is called recursion or function recursivity.</code></pre></div>
      <p>Este mÃ©todo es Ãºtil para resolver problemas que se pueden descomponer en subproblemas mÃ¡s pequeÃ±os y similares al problema original.</p>
      <div class='highlight'><pre><code class="language-markdown">This method is useful for solving problems that can be broken down into smaller, similar subproblems.</code></pre></div>
      <p>Si necesitas mÃ¡s ejemplos o tienes dudas, no dudes en pregar.</p>
      <div class='highlight'><pre><code class="language-markdown">If you need more examples or have doubts, don&#39;t hesitate to ask.</code></pre></div>
      <p>For example, we can use this property to calculate the factorial of a number.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">factorial</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>',
      '<span class="w">  </span><span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="mi">1</span>',
      '<span class="w">  </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">factorial</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '120',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.1. Built-in functions">5.1. Built-in functions<a class="anchor-link" href="#5.1. Built-in functions"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 148" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>There is a series of predefined functions in Python that can be used, such as the <code>abs()</code> function, which returns the absolute value.</p>
      <div class='highlight'><pre><code class="language-markdown">There is a series of predefined functions in Python that can be used, such as the `abs()` function, which returns the absolute value.</code></pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">abs</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '5',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The following is a list of these functions</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">builtins</span>',
      '<span class="w"> </span>',
      '<span class="nb">dir</span><span class="p">(</span><span class="n">builtins</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;ArithmeticError&#x27;,',
          '&#x27;AssertionError&#x27;,',
          '&#x27;AttributeError&#x27;,',
          '&#x27;BaseException&#x27;,',
          '&#x27;BlockingIOError&#x27;,',
          '&#x27;BrokenPipeError&#x27;,',
          '&#x27;BufferError&#x27;,',
          '&#x27;BytesWarning&#x27;,',
          '&#x27;ChildProcessError&#x27;,',
          '&#x27;ConnectionAbortedError&#x27;,',
          '&#x27;ConnectionError&#x27;,',
          '&#x27;ConnectionRefusedError&#x27;,',
          '&#x27;ConnectionResetError&#x27;,',
          '&#x27;DeprecationWarning&#x27;,',
          '&#x27;EOFError&#x27;,',
          '&#x27;Ellipsis&#x27;,',
          '&#x27;EnvironmentError&#x27;,',
          '&#x27;Exception&#x27;,',
          '&#x27;False&#x27;,',
          '&#x27;FileExistsError&#x27;,',
          '&#x27;FileNotFoundError&#x27;,',
          '&#x27;FloatingPointError&#x27;,',
          '&#x27;FutureWarning&#x27;,',
          '&#x27;GeneratorExit&#x27;,',
          '&#x27;IOError&#x27;,',
          '&#x27;ImportError&#x27;,',
          '&#x27;ImportWarning&#x27;,',
          '&#x27;IndentationError&#x27;,',
          '&#x27;IndexError&#x27;,',
          '&#x27;InterruptedError&#x27;,',
          '&#x27;IsADirectoryError&#x27;,',
          '&#x27;KeyError&#x27;,',
          '&#x27;KeyboardInterrupt&#x27;,',
          '&#x27;LookupError&#x27;,',
          '&#x27;MemoryError&#x27;,',
          '&#x27;ModuleNotFoundError&#x27;,',
          '&#x27;NameError&#x27;,',
          '&#x27;None&#x27;,',
          '&#x27;NotADirectoryError&#x27;,',
          '&#x27;NotImplemented&#x27;,',
          '&#x27;NotImplementedError&#x27;,',
          '&#x27;OSError&#x27;,',
          '&#x27;OverflowError&#x27;,',
          '&#x27;PendingDeprecationWarning&#x27;,',
          '&#x27;PermissionError&#x27;,',
          '&#x27;ProcessLookupError&#x27;,',
          '&#x27;RecursionError&#x27;,',
          '&#x27;ReferenceError&#x27;,',
          '&#x27;ResourceWarning&#x27;,',
          '&#x27;RuntimeError&#x27;,',
          '&#x27;RuntimeWarning&#x27;,',
          '&#x27;StopAsyncIteration&#x27;,',
          '&#x27;StopIteration&#x27;,',
          '&#x27;SyntaxError&#x27;,',
          '&#x27;SyntaxWarning&#x27;,',
          '&#x27;SystemError&#x27;,',
          '&#x27;SystemExit&#x27;,',
          '&#x27;TabError&#x27;,',
          '&#x27;TimeoutError&#x27;,',
          '&#x27;True&#x27;,',
          '&#x27;TypeError&#x27;,',
          '&#x27;UnboundLocalError&#x27;,',
          '&#x27;UnicodeDecodeError&#x27;,',
          '&#x27;UnicodeEncodeError&#x27;,',
          '&#x27;UnicodeError&#x27;,',
          '&#x27;UnicodeTranslateError&#x27;,',
          '&#x27;UnicodeWarning&#x27;,',
          '&#x27;UserWarning&#x27;,',
          '&#x27;ValueError&#x27;,',
          '&#x27;Warning&#x27;,',
          '&#x27;ZeroDivisionError&#x27;,',
          '&#x27;__IPYTHON__&#x27;,',
          '&#x27;__build_class__&#x27;,',
          '&#x27;__debug__&#x27;,',
          '&#x27;__doc__&#x27;,',
          '&#x27;__import__&#x27;,',
          '&#x27;__loader__&#x27;,',
          '&#x27;__name__&#x27;,',
          '&#x27;__package__&#x27;,',
          '&#x27;__spec__&#x27;,',
          '&#x27;abs&#x27;,',
          '&#x27;all&#x27;,',
          '&#x27;any&#x27;,',
          '&#x27;ascii&#x27;,',
          '&#x27;bin&#x27;,',
          '&#x27;bool&#x27;,',
          '&#x27;breakpoint&#x27;,',
          '&#x27;bytearray&#x27;,',
          '&#x27;bytes&#x27;,',
          '&#x27;callable&#x27;,',
          '&#x27;chr&#x27;,',
          '&#x27;classmethod&#x27;,',
          '&#x27;compile&#x27;,',
          '&#x27;complex&#x27;,',
          '&#x27;copyright&#x27;,',
          '&#x27;credits&#x27;,',
          '&#x27;delattr&#x27;,',
          '&#x27;dict&#x27;,',
          '&#x27;dir&#x27;,',
          '&#x27;display&#x27;,',
          '&#x27;divmod&#x27;,',
          '&#x27;enumerate&#x27;,',
          '&#x27;eval&#x27;,',
          '&#x27;exec&#x27;,',
          '&#x27;filter&#x27;,',
          '&#x27;float&#x27;,',
          '&#x27;format&#x27;,',
          '&#x27;frozenset&#x27;,',
          '&#x27;get_ipython&#x27;,',
          '&#x27;getattr&#x27;,',
          '&#x27;globals&#x27;,',
          '&#x27;hasattr&#x27;,',
          '&#x27;hash&#x27;,',
          '&#x27;help&#x27;,',
          '&#x27;hex&#x27;,',
          '&#x27;id&#x27;,',
          '&#x27;input&#x27;,',
          '&#x27;int&#x27;,',
          '&#x27;isinstance&#x27;,',
          '&#x27;issubclass&#x27;,',
          '&#x27;iter&#x27;,',
          '&#x27;len&#x27;,',
          '&#x27;license&#x27;,',
          '&#x27;list&#x27;,',
          '&#x27;locals&#x27;,',
          '&#x27;map&#x27;,',
          '&#x27;max&#x27;,',
          '&#x27;memoryview&#x27;,',
          '&#x27;min&#x27;,',
          '&#x27;next&#x27;,',
          '&#x27;object&#x27;,',
          '&#x27;oct&#x27;,',
          '&#x27;open&#x27;,',
          '&#x27;ord&#x27;,',
          '&#x27;pow&#x27;,',
          '&#x27;print&#x27;,',
          '&#x27;property&#x27;,',
          '&#x27;range&#x27;,',
          '&#x27;repr&#x27;,',
          '&#x27;reversed&#x27;,',
          '&#x27;round&#x27;,',
          '&#x27;set&#x27;,',
          '&#x27;setattr&#x27;,',
          '&#x27;slice&#x27;,',
          '&#x27;sorted&#x27;,',
          '&#x27;staticmethod&#x27;,',
          '&#x27;str&#x27;,',
          '&#x27;sum&#x27;,',
          '&#x27;super&#x27;,',
          '&#x27;tuple&#x27;,',
          '&#x27;type&#x27;,',
          '&#x27;vars&#x27;,',
          '&#x27;zip&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.2. Function Documentation">5.2. Function Documentation<a class="anchor-link" href="#5.2. Function Documentation"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 149" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can add an explanation of a function we create by including a comment at the beginning of the function, so when we call the <code>built-in function</code> <code>help()</code>, it will display that explanation.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">():</span>',
      '<span class="w">  </span><span class="s2">&quot;Esta es la explicaciÃ³n de la funciÃ³n&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">  </span><span class="kc">None</span>',
      '<span class="w"> </span>',
      '<span class="n">help</span><span class="p">(</span><span class="n">funcion</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Help on function funcion in module __main__:',
          'funcion()',
          '&#x20;&#x20;&#x20;&#x20;Esta es la explicaciÃ³n de la funciÃ³n',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another option to see the function explanation is to use the function's <code>__doc__</code>__doc__` is a built-in attribute that contains the docstring of the function. You can access it like this:</p>
      <div class='highlight'><pre><code class="language-python">print(my_function.__doc__)</code></pre></div>
      <ul>
        <li>Pros:</li>
        <ul>
          <li>It's a direct and easy way to access the docstring.</li>
        </ul>
        <li>Cons:</li>
        <ul>
          <li>It is less readable and less commonly used than the <code>help()</code> function.</li>
        </ul>
      </ul>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python">def my_function():<br>&#x20;&#x20;"""<br>&#x20;&#x20;This is a sample function to demonstrate the use of `__doc__`.<br>&#x20;&#x20;"""<br>&#x20;&#x20;pass<br><br>print(my_function.__doc__)</code></pre></div>
            </section>
      <p>This will output the docstring of <code>my_function</code>.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python">"""<br>This is a sample function to demonstrate the use of `__doc__`.<br>"""</code></pre></div>
            </section>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">funcion</span><span class="o">.</span><span class="vm">__doc__</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x27;Esta es la explicaciÃ³n de la funciÃ³n&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.3. Decorators">5.3. Decorators<a class="anchor-link" href="#5.3. Decorators"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 150" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Decorators are a Python feature that allows adding new features to a function.</p>
      <div class='highlight'><pre><code class="language-markdown"># Example of a decorator
      def my_decorator(func):
          def wrapper():
              print("Something is happening before the function is called.")
              func()
              print("Something is happening after the function is called.")
          return wrapper
      
      @my_decorator
      def say_hello():
          print("Hello!")
      
      say_hello()</code></pre></div>
      <p>---</p>
      <p>**Note**: This is a basic example of how decorators work in Python. They can be used to modify or enhance the behavior of functions or methods without permanently modifying the original code.</p>
      <p>---</p>
      <p>If you want to learn more about decorators, you can check the official Python documentation or other resources online.</p>
      <p>A decorator function is created that takes another function as a parameter. Then the decorator function adds the new feature to the function it receives.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python">def my_decorator(func):<br>&#x20;&#x20;def wrapper():<br>&#x20;&#x20;&#x20;&#x20;print("Something is happening before the function is called.")<br>&#x20;&#x20;&#x20;&#x20;func()<br>&#x20;&#x20;&#x20;&#x20;print("Something is happening after the function is called.")<br>&#x20;&#x20;return wrapper<br><br>@my_decorator<br>def say_hello():<br>&#x20;&#x20;print("Hello!")<br><br>say_hello()</code></pre></div>
            </section>
      <p>Este es un ejemplo de cÃ³mo se ve un decorador bÃ¡sico en Python. La funciÃ³n <code>my_decorator</code> toma <code>func</code> como parÃ¡metro y crea una funciÃ³n <code>wrapper</code> que agrega funcionalidades antes y despuÃ©s de llamar a <code>func</code>.</p>
      <p>Cuando se llama a <code>say_hello()</code>, en realidad se estÃ¡ llamando a <code>wrapper()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">decorador</span><span class="p">(</span><span class="n">parametro_funcion</span><span class="p">):</span>',
      '<span class="w">  </span><span class="sd">&quot;&quot;&quot;Agrega barritas arriba y abajo de la funcion&quot;&quot;&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="nf">envoltorio</span><span class="p">():</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;Aplica las barritas al texto&quot;&quot;&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;==================&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">parametro_funcion</span><span class="p">()</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;==================&quot;</span><span class="p">)</span>',
      '<span class="w">      </span>',
      '<span class="w">  </span><span class="k">return</span> <span class="n">envoltorio</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">():</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;MaximoFN&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">funcion_envoltorio</span> <span class="o">=</span> <span class="n">decorador</span><span class="p">(</span><span class="n">funcion</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;FunciÃ³n sin decoradores: &#39;</span><span class="p">)</span>',
      '<span class="n">funcion</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">FunciÃ³n con decoradores: &#39;</span><span class="p">)</span>',
      '<span class="n">funcion_envoltorio</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'FunciÃ³n sin decoradores:',
          'MaximoFN',
          'FunciÃ³n con decoradores:',
          '==================',
          'MaximoFN',
          '==================',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>But another more powerful way to use decorators is by using <code>@</code> and the decorator's name before the function.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python">@decorator<br>def function():<br>&#x20;&#x20;pass</code></pre></div>
            </section>
      <p>Este es un ejemplo de cÃ³mo se ve en el cÃ³digo.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python">@decorator<br>def example_function():<br>&#x20;&#x20;print("Esta funciÃ³n estÃ¡ decorada.")</code></pre></div>
            </section>
      <p>Este mÃ©todo es mÃ¡s limpio y legible, especialmente cuando se usan mÃºltiples decoradores.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python">@decorator1<br>@decorator2<br>def another_example_function():<br>&#x20;&#x20;print("Esta funciÃ³n tiene dos decoradores.")</code></pre></div>
            </section>
      <p>Esto facilita la lectura y el mantenimiento del cÃ³digo, ya que los decoradores se aplican de abajo hacia arriba.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python">@decorator1<br>@decorator2<br>def yet_another_example_function():<br>&#x20;&#x20;print("Esta funciÃ³n tiene dos decoradores en orden inverso.")</code></pre></div>
            </section>
      <p>Es importante notar que el orden en el que se aplican los decoradores puede afectar el comportamiento de la funciÃ³n decorada.</p>
      <p>That is, first the decorator is defined and then a function is called with the defined decorator.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python">def my_decorator(func):<br>&#x20;&#x20;def wrapper():<br>&#x20;&#x20;&#x20;&#x20;print("Something is happening before the function is called.")<br>&#x20;&#x20;&#x20;&#x20;func()<br>&#x20;&#x20;&#x20;&#x20;print("Something is happening after the function is called.")<br>&#x20;&#x20;return wrapper<br><br>@my_decorator<br>def say_hello():<br>&#x20;&#x20;print("Hello!")<br><br>say_hello()</code></pre></div>
            </section>
      <ul>
        <li>This will output:</li>
      </ul>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-text">Something is happening before the function is called.<br>Hello!<br>Something is happening after the function is called.</code></pre></div>
            </section>
      <p>---</p>
      <p>Es decir, primero se define el decorador y a continuaciÃ³n se llama a una funciÃ³n con el decorador definido.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">decorador2</span><span class="p">(</span><span class="n">parametro_funcion2</span><span class="p">):</span>',
      '<span class="w">  </span><span class="sd">&quot;&quot;&quot;Agrega barritas arriba y abajo de la funcion&quot;&quot;&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="nf">envoltorio2</span><span class="p">():</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;Aplica las barritas al texto&quot;&quot;&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;==================&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">parametro_funcion2</span><span class="p">()</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;==================&quot;</span><span class="p">)</span>',
      '<span class="w">      </span>',
      '<span class="w">  </span><span class="k">return</span> <span class="n">envoltorio2</span>',
      '<span class="w"> </span>',
      '<span class="nd">@decorador2</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">funcion2</span><span class="p">():</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;MaximoFN&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;FunciÃ³n con decoradores: &#39;</span><span class="p">)</span>',
      '<span class="n">funcion2</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'FunciÃ³n con decoradores:',
          '==================',
          'MaximoFN',
          '==================',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.4. *args and **kwargs">5.4. <code>*args</code> and <code>**kwargs</code><a class="anchor-link" href="#5.4. *args and **kwargs"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 151" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>*args</code> and <code>**kwargs</code> are optional arguments that can be used when defining a function in Python. The syntax is as follows:</p>
      <div class='highlight'><pre><code class="language-Python">def my_function(arg1, arg2, *args, **kwargs):
          # function code here</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.5.1. *args">2.5.1. <code>*args</code><a class="anchor-link" href="#2.5.1. *args"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 152" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>*args</code> is used to pass a variable number of arguments to a function. By using <code>*args</code>, you can pass a variable number of arguments to the function without having to specify the exact number of arguments the function needs. The arguments are received in the function as a tuple.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">saludo</span><span class="p">(</span><span class="n">saludo</span><span class="p">,</span> <span class="o">*</span><span class="n">nombres</span><span class="p">):</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">nombre</span> <span class="ow">in</span> <span class="n">nombres</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">saludo</span><span class="si">}</span><span class="s2">, </span><span class="si">{</span><span class="n">nombre</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">saludo</span><span class="p">(</span><span class="s2">&quot;Hola&quot;</span><span class="p">,</span> <span class="s2">&quot;Alicia&quot;</span><span class="p">,</span> <span class="s2">&quot;Roberto&quot;</span><span class="p">,</span> <span class="s2">&quot;Carlos&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hola, Alicia',
          'Hola, Roberto',
          'Hola, Carlos',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.5.2. **kwargs">2.5.2. <code>**kwargs</code><a class="anchor-link" href="#2.5.2. **kwargs"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 153" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>**kwargs</code> is used in the same way, but to send a variable number of keyword arguments to a function. When using <code>**kwargs</code>, you can send a variable number of arguments to the function and specify the value of each argument using its name. The arguments are received in the function as a dictionary.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">saludo</span><span class="p">(</span><span class="n">saludo</span><span class="p">,</span> <span class="o">**</span><span class="n">personas</span><span class="p">):</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">personas</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">saludo</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s2">, tu edad es </span><span class="si">{</span><span class="n">value</span><span class="si">}</span><span class="s2"> aÃ±os&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">saludo</span><span class="p">(</span><span class="s2">&quot;Hola&quot;</span><span class="p">,</span> <span class="n">Juan</span><span class="o">=</span><span class="mi">22</span><span class="p">,</span> <span class="n">Maria</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">Pedro</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hola Juan, tu edad es 22 aÃ±os',
          'Hola Maria, tu edad es 32 aÃ±os',
          'Hola Pedro, tu edad es 25 aÃ±os',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="6. Additional Functions">6. Additional Functions<a class="anchor-link" href="#6. Additional Functions"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 154" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.1. Lambda functions">6.1. Lambda functions<a class="anchor-link" href="#6.1. Lambda functions"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 155" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A *lambda* function is a small anonymous function.</p>
      <div class='highlight'><pre><code class="language-markdown">una funciÃ³n *lambda* es una pequeÃ±a funciÃ³n anÃ³nima.</code></pre></div>
      <div class='highlight'><pre><code class="language-markdown">A *lambda* function is a small anonymous function.</code></pre></div>
      <p>Este mÃ©todo es Ãºtil para funciones cortas y simples que no necesitan un nombre propio.</p>
      <p>A *lambda* function can take any number of arguments, but can only have one expression.</p>
      <div class='highlight'><pre><code class="language-markdown">A *lambda* function can take any number of arguments, but can only have one expression.</code></pre></div>
      <p>This command is already in English, so no translation is needed. However, if you need the entire text in English, here it is:</p>
      <div class='highlight'><pre><code class="language-markdown">A *lambda* function can take any number of arguments, but can only have one expression.</code></pre></div>
      <p>Lambda functions are defined as follows:</p>
      <div class='highlight'><pre><code class="language-text">lambda arguments : expression</code></pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">x</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span> <span class="p">:</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">10</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '15',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">x</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="p">:</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '13',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The power of *lambda* is best demonstrated when you use them as an anonymous function inside another function.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python">def my_function(n):<br>&#x20;&#x20;return lambda a, b: (a + b) * n<br><br>doubler = my_function(2)<br>print(doubler(1, 2))  # Output: 6</code></pre></div>
            </section>
      <p>En este ejemplo, <code>my_function</code> devuelve una funciÃ³n lambda que toma dos argumentos <code>a</code> y <code>b</code>, y multiplica su suma por <code>n</code>.</p>
      <ol>
        <li><strong>Uso en funciones de orden superior</strong>:</li>
      </ol>
      <p>Las funciones lambda son muy Ãºtiles cuando se utilizan con funciones de orden superior como `map()`, `filter()`, y `reduce()`.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python"># Uso con map()<br>numbers = [1, 2, 3, 4, 5]<br>squared = list(map(lambda x: x**2, numbers))<br>print(squared)  # Output: [1, 4, 9, 16, 25]<br><br># Uso con filter()<br>even_numbers = list(filter(lambda x: x % 2 == 0, numbers))<br>print(even_numbers)  # Output: [2, 4]<br><br># Uso con reduce()<br>from functools import reduce<br>product = reduce(lambda x, y: x * y, numbers)<br>print(product)  # Output: 120</code></pre></div>
            </section>
      <p>En estos ejemplos, las funciones lambda se utilizan para definir operaciones breves y concisas que se aplican a cada elemento de una lista o para reducir una lista a un solo valor.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">myfunc</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>',
      '<span class="w">  </span><span class="k">return</span> <span class="k">lambda</span> <span class="n">a</span> <span class="p">:</span> <span class="n">a</span> <span class="o">*</span> <span class="n">n</span>',
      '<span class="w"> </span>',
      '<span class="n">mydoubler</span> <span class="o">=</span> <span class="n">myfunc</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>',
      '<span class="n">mytripler</span> <span class="o">=</span> <span class="n">myfunc</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;mydoubler: </span><span class="si">{</span><span class="n">mydoubler</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;mytripler: </span><span class="si">{</span><span class="n">mytripler</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'mydoubler: 22',
          'mytripler: 33',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.2. map Function">6.2. <code>map</code> Function<a class="anchor-link" href="#6.2. map Function"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 156" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>map</code> function allows applying a function to each element of an iterable structure.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python"># Example usage of map<br>numbers = [1, 2, 3, 4]<br>squared = map(lambda x: x**2, numbers)<br>print(list(squared))  # Output: [1, 4, 9, 16]</code></pre></div>
            </section>
      <p>La funciÃ³n <code>map</code> toma dos argumentos: la funciÃ³n que se aplicarÃ¡ y el iterable sobre el cual se aplicarÃ¡ la funciÃ³n. El resultado es un objeto iterable que puede convertirse en una lista u otra estructura de datos.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python"># Another example<br>words = ["hello", "world", "python"]<br>uppercased = map(str.upper, words)<br>print(list(uppercased))  # Output: [&#39;HELLO&#39;, &#39;WORLD&#39;, &#39;PYTHON&#39;]</code></pre></div>
            </section>
      <p>Esta funciÃ³n es muy Ãºtil para transformar datos de manera concisa y eficiente.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">funcion_mas_1</span><span class="p">(</span><span class="n">valor</span><span class="p">):</span>',
      '<span class="w">  </span><span class="k">return</span> <span class="n">valor</span> <span class="o">+</span> <span class="mi">1</span>',
      '<span class="w"> </span>',
      '<span class="n">lista_modificada</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">funcion_mas_1</span><span class="p">,</span> <span class="n">lista</span><span class="p">))</span>',
      '<span class="n">lista_modificada</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[2, 3, 4]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>This is equivalent to using <code>list comprehension</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista_modificada</span> <span class="o">=</span> <span class="p">[</span><span class="n">funcion_mas_1</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">lista</span><span class="p">]</span>',
      '<span class="n">lista_modificada</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[2, 3, 4]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.3. filter Function">6.3. <code>filter</code> Function<a class="anchor-link" href="#6.3. filter Function"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 157" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>filter</code> function allows selecting the elements from an iterable structure that meet a condition.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-python"># Example usage of filter<br>numbers = [1, 2, 3, 4, 5]<br>even_numbers = filter(lambda x: x % 2 == 0, numbers)<br>print(list(even_numbers))  # Output: [2, 4]</code></pre></div>
            </section>
      <p>---</p>
      <p>La funciÃ³n <code>filter</code> es Ãºtil para filtrar elementos en una lista o cualquier otra estructura iterable basada en una condiciÃ³nThe <code>filter</code> function is useful for filtering elements in a list or any other iterable structure based on a condition.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">esPar</span><span class="p">(</span><span class="n">valor</span><span class="p">):</span>',
      '<span class="w">  </span><span class="k">return</span> <span class="n">valor</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>',
      '<span class="w"> </span>',
      '<span class="n">lista_filtrada</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="n">esPar</span><span class="p">,</span> <span class="n">lista</span><span class="p">))</span>',
      '<span class="n">lista_filtrada</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[2, 4, 6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>This is equivalent to using <code>list comprehension</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista_filtrada</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">lista</span> <span class="k">if</span> <span class="n">esPar</span><span class="p">(</span><span class="n">x</span><span class="p">)]</span>',
      '<span class="n">lista_filtrada</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[2, 4, 6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.4. reduce Function">6.4. <code>reduce</code> Function<a class="anchor-link" href="#6.4. reduce Function"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 158" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>reduce</code> function allows performing accumulative tasks on iterable structures.</p>
      <div class='highlight'><pre><code class="language-markdown">La funciÃ³n `reduce` permite realizar tareas acumulativas sobre estructuras iterables.</code></pre></div>
      <p>Becomes:</p>
      <div class='highlight'><pre><code class="language-markdown">The `reduce` function allows performing accumulative tasks on iterable structures.</code></pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">functools</span><span class="w"> </span><span class="kn">import</span> <span class="n">reduce</span>',
      '<span class="w"> </span>',
      '<span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">33</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">acumular</span><span class="p">(</span><span class="n">valor</span><span class="p">,</span> <span class="n">acumulador</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;valor = </span><span class="si">{</span><span class="n">valor</span><span class="si">}</span><span class="s1">, acumulador = </span><span class="si">{</span><span class="n">acumulador</span><span class="si">}</span><span class="s1">, acumulacion = </span><span class="si">{</span><span class="n">valor</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">acumulador</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="w">  </span><span class="k">return</span> <span class="n">valor</span> <span class="o">+</span> <span class="n">acumulador</span>',
      '<span class="w"> </span>',
      '<span class="n">acumulacion</span> <span class="o">=</span> <span class="n">reduce</span><span class="p">(</span><span class="n">acumular</span><span class="p">,</span> <span class="n">lista</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">acumulacion = </span><span class="si">{</span><span class="n">acumulacion</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'valor = 1, acumulador = 22, acumulacion = 23',
          'valor = 23, acumulador = 33, acumulacion = 56',
          'acumulacion = 56',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.5. zip Function">6.5. <code>zip</code> Function<a class="anchor-link" href="#6.5. zip Function"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 159" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>With the <code>zip</code> function, you can combine multiple iterable structures into one, meaning it allows you to group several elements from the structures *A<sub>x</sub>* into a single structure *B*. The structure *B* is composed of tuples of the elements from the structures *A<sub>x</sub>*.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">nombres</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;Manolo&quot;</span><span class="p">,</span> <span class="s2">&quot;Andres&quot;</span><span class="p">,</span> <span class="s2">&quot;Fernando&quot;</span><span class="p">]</span>',
      '<span class="n">altura</span> <span class="o">=</span> <span class="p">[</span><span class="mi">181</span><span class="p">,</span> <span class="mi">178</span><span class="p">,</span> <span class="mi">180</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="n">my_zip</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">nombres</span><span class="p">,</span> <span class="n">altura</span><span class="p">))</span>',
      '<span class="n">my_zip</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[(&#x27;Manolo&#x27;, 181), (&#x27;Andres&#x27;, 178), (&#x27;Fernando&#x27;, 180)]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="65. Generators">65. Generators<a class="anchor-link" href="#65. Generators"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 160" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suppose we want to iterate over a sequence of numbers, but in a special way that no loop provides. This can be solved with generators. To do this, the generator function should not return the value with <code>return</code>, but with <code>yield</code> so that it knows it needs to continue iterating.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">iterador_custom</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span> <span class="p">(</span><span class="n">N</span><span class="p">):</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">yield</span> <span class="n">i</span>',
      '<span class="w"> </span>',
      '<span class="n">generador</span> <span class="o">=</span> <span class="n">iterador_custom</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>',
      '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">generador</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '0',
          '3',
          '6',
          '9',
          '12',
          '15',
          '18',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We just created an iterator for numbers that are multiples of 3</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="666. High order functions">666. High order functions<a class="anchor-link" href="#666. High order functions"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 161" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can create functions that receive other functions as parameters, so the function that receives another function as a parameter is called a higher-order function (high order function). Let's see an example.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">increment</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">hof</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">hof</span><span class="p">(</span><span class="n">increment</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '8',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="7. Classes and Objects">7. Classes and Objects<a class="anchor-link" href="#7. Classes and Objects"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 162" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Python is an object-oriented programming language. Almost everything in Python is an object, with its attributes and methods.</p>
      <p>A class is like an object constructor or a "blueprint" for creating objects.</p>
      <p>To create a class, the reserved word <code>class</code> is used.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">Clase</span><span class="p">:</span>',
      '<span class="w">  </span><span class="n">variable</span> <span class="o">=</span> <span class="s1">&#39;MaximoFN&#39;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Once the class has been created, an object of that class can be created.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">objeto</span> <span class="o">=</span> <span class="n">Clase</span><span class="p">()</span>',
      '<span class="n">Clase</span><span class="o">.</span><span class="n">variable</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x27;MaximoFN&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Normally, classes have an initialization function that runs when an object of the class is created. This function is called *dunder init* and is written as <code>__init__()</code>. The *dunder init* function must always be passed the variable <code>self</code>, which refers to the class itself, and then any additional variables you want to pass.</p>
      <p>This function is usually used to initialize the variables of the classes, or to execute the code that is needed when an object of the class is created.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">Persona</span><span class="p">:</span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">edad</span><span class="p">):</span>',
      '<span class="w">    </span><span class="bp">self</span><span class="o">.</span><span class="n">nombre</span> <span class="o">=</span> <span class="n">nombre</span>',
      '<span class="w">    </span><span class="bp">self</span><span class="o">.</span><span class="n">edad</span> <span class="o">=</span> <span class="n">edad</span>',
      '<span class="w"> </span>',
      '<span class="n">objeto_persona</span> <span class="o">=</span> <span class="n">Persona</span><span class="p">(</span><span class="s2">&quot;Miguel&quot;</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">objeto_persona</span><span class="o">.</span><span class="n">nombre</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">objeto_persona</span><span class="o">.</span><span class="n">edad</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Miguel',
          '36',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In addition to the initial *dunder init* function, more functions can be created. These functions are called *methods* of the class. These *methods* always need to be passed the <code>self</code> variable.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">Persona</span><span class="p">:</span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">edad</span><span class="p">):</span>',
      '<span class="w">    </span><span class="bp">self</span><span class="o">.</span><span class="n">nombre</span> <span class="o">=</span> <span class="n">nombre</span>',
      '<span class="w">    </span><span class="bp">self</span><span class="o">.</span><span class="n">edad</span> <span class="o">=</span> <span class="n">edad</span>',
      '<span class="w"> </span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="nf">saludar</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Hola mi nombre es </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">nombre</span><span class="si">}</span><span class="s1"> y tengo </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">edad</span><span class="si">}</span><span class="s1"> aÃ±os&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">objeto_persona</span> <span class="o">=</span> <span class="n">Persona</span><span class="p">(</span><span class="s2">&quot;Miguel&quot;</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">objeto_persona</span><span class="o">.</span><span class="n">saludar</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hola mi nombre es Miguel y tengo 36 aÃ±os',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The variable <code>self</code> does not have to be called <code>self</code>, it can have any name, but within each class it must always be the same. But by convention, <code>self</code> is usually used.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">Persona</span><span class="p">:</span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="n">yo_mismo</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">edad</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">yo_mismo</span><span class="o">.</span><span class="n">nombre</span> <span class="o">=</span> <span class="n">nombre</span>',
      '<span class="w">    </span><span class="n">yo_mismo</span><span class="o">.</span><span class="n">edad</span> <span class="o">=</span> <span class="n">edad</span>',
      '<span class="w"> </span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="nf">saludar</span><span class="p">(</span><span class="n">yo_mismo</span><span class="p">):</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Hola mi nombre es </span><span class="si">{</span><span class="n">yo_mismo</span><span class="o">.</span><span class="n">nombre</span><span class="si">}</span><span class="s1"> y tengo </span><span class="si">{</span><span class="n">yo_mismo</span><span class="o">.</span><span class="n">edad</span><span class="si">}</span><span class="s1"> aÃ±os&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">objeto_persona</span> <span class="o">=</span> <span class="n">Persona</span><span class="p">(</span><span class="s2">&quot;Miguel&quot;</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">objeto_persona</span><span class="o">.</span><span class="n">saludar</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hola mi nombre es Miguel y tengo 36 aÃ±os',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Variables of objects can be modified.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">objeto_persona</span><span class="o">.</span><span class="n">nombre</span> <span class="o">=</span> <span class="s1">&#39;Marta&#39;</span>',
      '<span class="n">objeto_persona</span><span class="o">.</span><span class="n">saludar</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hola mi nombre es Marta y tengo 36 aÃ±os',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Even removing them</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">del</span> <span class="n">objeto_persona</span><span class="o">.</span><span class="n">nombre</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>The entire object can also be deleted.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">del</span> <span class="n">objeto_persona</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>If, for example, we want to create the structure of the class but do not want to, for now, code the interior, we can use <code>pass</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">Persona</span><span class="p">:</span>',
      '<span class="w">  </span><span class="k">pass</span>',
      '<span class="w"> </span>',
      '<span class="n">objeto_persona</span> <span class="o">=</span> <span class="n">Persona</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.1. Inheritance">7.1. Inheritance<a class="anchor-link" href="#7.1. Inheritance"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 163" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Inheritance allows us to define a class that inherits all the methods and properties from another class.</p>
      <p>The **parent class** is the class from which inheritance occurs, also called the **base class**.</p>
      <p>The **child class** is the class that inherits from another class, also called the **derived class**.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We create a parent class</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">Persona</span><span class="p">:</span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">):</span>',
      '<span class="w">    </span><span class="bp">self</span><span class="o">.</span><span class="n">nombre</span> <span class="o">=</span> <span class="n">nombre</span>',
      '<span class="w">    </span><span class="bp">self</span><span class="o">.</span><span class="n">apellido</span> <span class="o">=</span> <span class="n">apellido</span>',
      '<span class="w"> </span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="nf">imprimir_nombre</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Me llamo </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">nombre</span><span class="si">}</span><span class="s1"> </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">apellido</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">objeto_padre</span> <span class="o">=</span> <span class="n">Persona</span><span class="p">(</span><span class="s2">&quot;Laura&quot;</span><span class="p">,</span> <span class="s2">&quot;Perez&quot;</span><span class="p">)</span>',
      '<span class="n">objeto_padre</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Me llamo Laura Perez',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>To create the child class, you need to indicate between parentheses, when declaring the class, which class it inherits from.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">Estudiante</span><span class="p">(</span><span class="n">Persona</span><span class="p">):</span>',
      '<span class="w">  </span><span class="k">pass</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>And when creating the object of the child class, the parameters that the parent class needs are passed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">objeto_hijo</span> <span class="o">=</span> <span class="n">Estudiante</span><span class="p">(</span><span class="s2">&quot;Mariano&quot;</span><span class="p">,</span> <span class="s2">&quot;Sanz&quot;</span><span class="p">)</span>',
      '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Me llamo Mariano Sanz',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>So far, the child class has inherited the functions from the parent class, but we can modify them by overriding them. For example, by overriding the *dunder init* function.</p>
      <p>If the *dunder init* function is rewritten, if we want to call the *dunder init* function of the parent class, we need to call it.</p>
      <p>There are two ways to do this, one is through the name of the parent class. In this case, you have to pass it the <code>self</code> variable.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">Estudiante</span><span class="p">(</span><span class="n">Persona</span><span class="p">):</span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">Persona</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">objeto_hijo</span> <span class="o">=</span> <span class="n">Estudiante</span><span class="p">(</span><span class="s2">&quot;Mariano&quot;</span><span class="p">,</span> <span class="s2">&quot;Sanz&quot;</span><span class="p">)</span>',
      '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Me llamo Mariano Sanz',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Another way is through <code>super()</code>, in this case you don't need to pass the <code>self</code> variable.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">Estudiante</span><span class="p">(</span><span class="n">Persona</span><span class="p">):</span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">):</span>',
      '<span class="w">    </span><span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">objeto_hijo</span> <span class="o">=</span> <span class="n">Estudiante</span><span class="p">(</span><span class="s2">&quot;Mariano&quot;</span><span class="p">,</span> <span class="s2">&quot;Sanz&quot;</span><span class="p">)</span>',
      '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Me llamo Mariano Sanz',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>By modifying the functions, new code can be added.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">Estudiante</span><span class="p">(</span><span class="n">Persona</span><span class="p">):</span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">,</span> <span class="n">curso</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">Persona</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">)</span>',
      '<span class="w">    </span><span class="bp">self</span><span class="o">.</span><span class="n">curso</span> <span class="o">=</span> <span class="n">curso</span>',
      '<span class="w"> </span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="nf">imprimir_nombre</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">Persona</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Estoy en el curso nÃºmero </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">curso</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">objeto_hijo</span> <span class="o">=</span> <span class="n">Estudiante</span><span class="p">(</span><span class="s2">&quot;Mariano&quot;</span><span class="p">,</span> <span class="s2">&quot;Sanz&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>',
      '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Me llamo Mariano Sanz',
          'Estoy en el curso nÃºmero 4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Lastly, new methods can be added.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">Estudiante</span><span class="p">(</span><span class="n">Persona</span><span class="p">):</span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">,</span> <span class="n">curso</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">Persona</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">)</span>',
      '<span class="w">    </span><span class="bp">self</span><span class="o">.</span><span class="n">curso</span> <span class="o">=</span> <span class="n">curso</span>',
      '<span class="w"> </span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="nf">imprimir_nombre</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">Persona</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Estoy en el curso nÃºmero </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">curso</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="nf">imprimir_estudiante</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Soy un estudiante del curso nÃºmero </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">curso</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">objeto_hijo</span> <span class="o">=</span> <span class="n">Estudiante</span><span class="p">(</span><span class="s2">&quot;Mariano&quot;</span><span class="p">,</span> <span class="s2">&quot;Sanz&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>',
      '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
      '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_estudiante</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Me llamo Mariano Sanz',
          'Estoy en el curso nÃºmero 4',
          'Soy un estudiante del curso nÃºmero 4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.2. Operator Overloading">7.2. Operator Overloading<a class="anchor-link" href="#7.2. Operator Overloading"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 164" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can define basic operations, such as addition, between multiple objects of a class. For example, if we have a class that represents a vector, we can define addition and multiplication between objects of that class.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">Vector</span><span class="p">:</span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__add__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="n">Vector</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">other</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">other</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__mul__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="n">Vector</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">other</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">other</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;Vector (</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="si">}</span><span class="s2">, </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">y</span><span class="si">}</span><span class="s2">)&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">v1</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>',
      '<span class="n">v2</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">v1</span> <span class="o">+</span> <span class="n">v2</span><span class="p">)</span>  <span class="c1"># Vector (4, 6)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">v1</span> <span class="o">*</span> <span class="n">v2</span><span class="p">)</span>  <span class="c1"># Vector (3, 8)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Vector (4, 6)',
          'Vector (3, 8)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>All possible operator overloads are:</p>
      <ul>
        <li><code>__add__(self, other)</code>: overloads the addition operator (<code>+</code>).</li>
        <li><code>__sub__(self, other)</code>: overloads the subtraction operator (<code>-</code>).</li>
        <li><code>__mul__(self, other)</code>: overloads the multiplication operator (<code>*</code>).</li>
        <li><code>__truediv__(self, other)</code>: overloads the division operator (<code>/</code>).</li>
        <li><code>__floordiv__(self, other)</code>: overloads the floor division operator (<code>//</code>).</li>
        <li><code>__mod__(self, other)</code>: overloads the modulo operator (<code>%</code>).</li>
        <li><code>__divmod__(self, other)</code>: overloads the <code>divmod()</code> function.</li>
        <li><code>__pow__(self, other)</code>: overloads the power operator (<code>**</code>).</li>
        <li><code>__lshift__(self, other)</code>: overloads the left shift operator (<code><<</code>).</li>
        <li><code>__rshift__(self, other)</code>: overloads the right shift operator (<code>>></code>).</li>
        <li><code>__and__(self, other)</code>: overloads the and operator (<code>&</code>).</li>
        <li><code>__or__(self, other)</code>: overloads the or operator (<code>|</code>).</li>
        <li><code>__xor__(self, other)</code>: overloads the xor operator (<code>^</code>).</li>
        <li><code>__lt__(self, other)</code>: overloads the less than comparison operator (<code><</code>).</li>
        <li><code>__le__(self, other)</code>: overloads the less than or equal to comparison operator (<code><=</code>).</li>
        <li><code>__eq__(self, other)</code>: overloads the equality comparison operator (<code>==</code>).</li>
        <li><code>__ne__(self, other)</code>: overloads the not equal to comparison operator (<code>!=</code>).</li>
        <li><code>__gt__(self, other)</code>: overloads the greater than comparison operator (<code>></code>).</li>
        <li><code>__ge__(self, other)</code>: overloads the greater than or equal to comparison operator (<code>>=</code>).</li>
        <li><code>__neg__(self)</code>: overloads the negation operator (<code>-</code>).</li>
        <li><code>__pos__(self)</code>: overloads the unary positive operator (<code>+</code>).</li>
        <li><code>__abs__(self)</code>: overloads the <code>abs()</code> function.</li>
        <li><code>__invert__(self)</code>: overloads the inversion operator (<code>~</code>).</li>
        <li><code>__complex__(self)</code>: overloads the <code>complex()</code> function.</li>
        <li><code>__int__(self)</code>: overloads the <code>int()</code> function.</li>
        <li><code>__float__(self)</code>: overloads the <code>float()</code> function.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.3. Custom Iterators">7.3. Custom Iterators<a class="anchor-link" href="#7.3. Custom Iterators"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 165" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we have seen in section <a href="https://www.maximofn.com/python/#2.-Tipos-de-datos-de-Python">2 (Python Data Types)</a>, there are some data types that can be iterated over. But we can create our own iterable class, as long as it has the functions <code>__len__</code> and <code>__getitem__</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">custonIterator</span><span class="p">:</span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="n">iterator</span> <span class="o">=</span> <span class="n">custonIterator</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">iterator</span><span class="p">))</span>  <span class="c1"># 10</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">iterator</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>  <span class="c1"># 0</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">iterator</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>  <span class="c1"># 1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '10',
          '0',
          '1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we can iterate over the object of our class with <code>for</code> loops, for example</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iterator</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">&quot; &quot;</span><span class="p">)</span>  <span class="c1"># 0 1 2 3 4 5 6 7 8 9</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '0 1 2 3 4 5 6 7 8 9',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.4. Calling Objects as Functions">7.4. Calling Objects as Functions<a class="anchor-link" href="#7.4. Calling Objects as Functions"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 166" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We might want to call an object of a function as if it were a class. This can be achieved by adding the <code>__call__</code> function to the class.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">potencia</span><span class="p">:</span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">base</span><span class="p">):</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">base</span> <span class="o">=</span> <span class="n">base</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">potencia</span><span class="p">):</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">base</span> <span class="o">**</span> <span class="n">potencia</span>',
      '<span class="w">    </span>',
      '<span class="n">potencia_cuadrado</span> <span class="o">=</span> <span class="n">potencia</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">potencia_cuadrado</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>  <span class="c1"># 8</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '8',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.5. Private Attributes and Functions">7.5. Private Attributes and Functions<a class="anchor-link" href="#7.5. Private Attributes and Functions"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 167" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>When we create a class, we can make some attributes or functions private so they cannot be accessed from outside the class. To do this, you need to add <code>__</code> before the attribute or method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">Privados</span><span class="p">:</span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">publico</span> <span class="o">=</span> <span class="s2">&quot;Soy pÃºblico&quot;</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">__privado</span> <span class="o">=</span> <span class="s2">&quot;Soy privado&quot;</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">getPrivado</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__privado</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">setPrivado</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">valor</span><span class="p">):</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">__privado</span> <span class="o">=</span> <span class="n">valor</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">__funcion_privada</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="s2">&quot;Soy una funciÃ³n privada&quot;</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">funcion_publica</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__funcion_privada</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="n">privados</span> <span class="o">=</span> <span class="n">Privados</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Acceso al atributo publico: &quot;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">)</span>',
      '<span class="k">try</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">privados</span><span class="o">.</span><span class="n">publico</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="k">except</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">No se puede acceder al atributo privado&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Acceso al atributo privado: &quot;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">)</span>',
      '<span class="k">try</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">privados</span><span class="o">.</span><span class="n">__privado</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="k">except</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">No se puede acceder al atributo privado&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Acceso al atributo privado mediante el accesor: &quot;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">)</span>',
      '<span class="k">try</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">privados</span><span class="o">.</span><span class="n">getPrivado</span><span class="p">()</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="k">except</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">No se puede acceder al atributo privado mediante el accesor&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Llamada a la funciÃ³n privada: &quot;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">)</span>',
      '<span class="k">try</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">privados</span><span class="o">.</span><span class="n">__funcion_privada</span><span class="p">()</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="k">except</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">No se puede llamar a la funciÃ³n privada&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Llamada a la funciÃ³n pÃºblica: &quot;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">)</span>',
      '<span class="k">try</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">privados</span><span class="o">.</span><span class="n">funcion_publica</span><span class="p">()</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="k">except</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">No se puede llamar a la funciÃ³n pÃºblica&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Acceso al atributo publico: Soy pÃºblico',
          'Acceso al atributo privado: 	No se puede acceder al atributo privado',
          'Acceso al atributo privado mediante el accesor: Soy privado',
          'Llamada a la funciÃ³n privada: 	No se puede llamar a la funciÃ³n privada',
          'Llamada a la funciÃ³n pÃºblica: Soy una funciÃ³n privada',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="8. Iterators">8. Iterators<a class="anchor-link" href="#8. Iterators"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 168" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>An iterator is an object that contains a countable number of values.</p>
      <p>An iterator is an object over which you can iterate, meaning you can traverse all the elements.</p>
      <p>Technically, in Python, an iterator is an object that implements the iterator protocol, which consists of the methods __iter__() and __next__().</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>Lists</code>, <code>tuples</code>, <code>dictionaries</code>, and <code>sets</code> are all iterable objects. They are iterable containers from which you can get an iterator.</p>
      <p>All these objects have an <code>iter()</code> method that is used to get an iterator:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;manzana&quot;</span><span class="p">,</span> <span class="s2">&quot;plÃ¡tano&quot;</span><span class="p">,</span> <span class="s2">&quot;cereza&quot;</span><span class="p">)</span>',
      '<span class="n">iterable</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">))</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">))</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'manzana',
          'plÃ¡tano',
          'cereza',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">&quot;plÃ¡tano&quot;</span>',
      '<span class="n">iterable</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'p l Ã¡ t a n o',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The <code>for</code> loop actually creates an iterator object and calls the <code>next()</code> method on each iteration.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;manzana&quot;</span><span class="p">,</span> <span class="s2">&quot;plÃ¡tano&quot;</span><span class="p">,</span> <span class="s2">&quot;cereza&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">tupla</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'manzana',
          'plÃ¡tano',
          'cereza',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">&quot;plÃ¡tano&quot;</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'p l Ã¡ t a n o',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.1. Create an iterator object">8.1. Create an iterator object<a class="anchor-link" href="#8.1. Create an iterator object"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 169" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To create an object/class as an iterator, you need to implement the methods <code>__iter__()</code> and <code>__next__()</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">Numeros</span><span class="p">:</span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="fm">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">    </span><span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="bp">self</span>',
      '<span class="w"> </span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="fm">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">a</span>',
      '<span class="w">    </span><span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">x</span>',
      '<span class="w"> </span>',
      '<span class="n">objeto_iterador</span> <span class="o">=</span> <span class="n">Numeros</span><span class="p">()</span>',
      '<span class="n">iterador</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">objeto_iterador</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterador</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterador</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterador</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterador</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterador</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '1 2 3 4 5',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The previous example would continue indefinitely if it had enough calls to <code>next()</code>, or if it were used in a <code>for</code> loop.</p>
      <p>To prevent the iteration from continuing forever, we can use the <code>StopIteration</code> statement.</p>
      <p>In the <code>__next__()</code> method, we can add a termination condition to raise an error if the iteration is performed a specific number of times:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">Numeros</span><span class="p">:</span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="fm">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">    </span><span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="bp">self</span>',
      '<span class="w"> </span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="fm">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">20</span><span class="p">:</span>',
      '<span class="w">      </span><span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">a</span>',
      '<span class="w">      </span><span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">      </span><span class="k">return</span> <span class="n">x</span>',
      '<span class="w">    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">      </span><span class="k">raise</span> <span class="ne">StopIteration</span>',
      '<span class="w"> </span>',
      '<span class="n">objeto_iterador</span> <span class="o">=</span> <span class="n">Numeros</span><span class="p">()</span>',
      '<span class="n">iterador</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">objeto_iterador</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">iterador</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.2. Iterating getting the index and value">8.2. Iterating getting the index and value<a class="anchor-link" href="#8.2. Iterating getting the index and value"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 170" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can iterate over an iterable object, obtaining its index and value in each iteration using the <code>enumerate()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">&quot;MaximoFN&quot;</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">valor</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;En la posiciÃ³n </span><span class="si">{</span><span class="n">index</span><span class="si">}</span><span class="s2">, estÃ¡ el caracter </span><span class="si">{</span><span class="n">valor</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la posiciÃ³n 0, estÃ¡ el caracter M',
          'En la posiciÃ³n 1, estÃ¡ el caracter a',
          'En la posiciÃ³n 2, estÃ¡ el caracter x',
          'En la posiciÃ³n 3, estÃ¡ el caracter i',
          'En la posiciÃ³n 4, estÃ¡ el caracter m',
          'En la posiciÃ³n 5, estÃ¡ el caracter o',
          'En la posiciÃ³n 6, estÃ¡ el caracter F',
          'En la posiciÃ³n 7, estÃ¡ el caracter N',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.3. Iterating simultaneously over two iterable objects">8.3. Iterating simultaneously over two iterable objects<a class="anchor-link" href="#8.3. Iterating simultaneously over two iterable objects"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 171" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we have two iterable objects of the same length, we can iterate over both at the same time using the <code>zip()</code> method.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s1">&#39;MaximoFN__&#39;</span>',
      '<span class="n">string2</span> <span class="o">=</span> <span class="s1">&#39;PythonPost&#39;</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">string1</span><span class="p">)</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">string2</span><span class="p">):</span>',
      '<span class="w">  </span><span class="k">for</span> <span class="n">valor1</span><span class="p">,</span> <span class="n">valor2</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">string1</span><span class="p">,</span> <span class="n">string2</span><span class="p">):</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;En el primer string hay </span><span class="si">{</span><span class="n">valor1</span><span class="si">}</span><span class="s2">, en el segundo string hay </span><span class="si">{</span><span class="n">valor2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En el primer string hay M, en el segundo string hay P',
          'En el primer string hay a, en el segundo string hay y',
          'En el primer string hay x, en el segundo string hay t',
          'En el primer string hay i, en el segundo string hay h',
          'En el primer string hay m, en el segundo string hay o',
          'En el primer string hay o, en el segundo string hay n',
          'En el primer string hay F, en el segundo string hay P',
          'En el primer string hay N, en el segundo string hay o',
          'En el primer string hay _, en el segundo string hay s',
          'En el primer string hay _, en el segundo string hay t',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="9. Variable Scope">9. Variable Scope<a class="anchor-link" href="#9. Variable Scope"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 172" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A variable is only available within the region where it is created. This is called *scope*.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.1. Local Scope">9.1. Local Scope<a class="anchor-link" href="#9.1. Local Scope"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 173" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A variable created within a function belongs to the local scope of that function and can only be used within that function.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">():</span>',
      '<span class="w">  </span><span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">funcion</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '300',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The variable <code>x</code> is not available outside the function, but it is available to any function within it.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">():</span>',
      '<span class="w">  </span><span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
      '<span class="w">  </span><span class="k">def</span><span class="w"> </span><span class="nf">funcion_interna</span><span class="p">():</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
      '<span class="w">  </span><span class="n">funcion_interna</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="n">funcion</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '300',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.2. Global Scope">9.2. Global Scope<a class="anchor-link" href="#9.2. Global Scope"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 174" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A variable created in the main body of the Python code is a global variable and belongs to the global scope.</p>
      <p>Global variables are available from any scope, global and local.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">():</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Ãmbito local: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">funcion</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Ãmbito global: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Ãmbito local: 300',
          'Ãmbito global: 300',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If two variables are created, one global and one local, both with the same name, Python will create them as two distinct variables.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">():</span>',
      '<span class="w">  </span><span class="n">x</span> <span class="o">=</span> <span class="mi">200</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Variable local: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">funcion</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Variable global: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Variable local: 200',
          'Variable global: 300',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If a global variable needs to be created, but it is declared in the local scope, the <code>global</code> keyword can be used.</p>
      <p>The keyword <code>global</code> makes the variable global.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">():</span>',
      '<span class="w">  </span><span class="k">global</span> <span class="n">x</span>',
      '<span class="w">  </span><span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
      '<span class="w"> </span>',
      '<span class="n">funcion</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Variable global: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Variable global: 300',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In addition, the use of the <code>global</code> keyword allows making a change to a global variable within a function.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">():</span>',
      '<span class="w">  </span><span class="k">global</span> <span class="n">x</span>',
      '<span class="w">  </span><span class="n">x</span> <span class="o">=</span> <span class="mi">200</span>',
      '<span class="w"> </span>',
      '<span class="n">funcion</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Variable global: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Variable global: 200',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="10. Modules">10. Modules<a class="anchor-link" href="#10. Modules"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 175" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A module is a file that contains a set of functions that you want to include in your application.</p>
      <p>To create a module, simply save the code you want in a file with the file extension <code>.py</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Tip: In Jupyter notebooks (Colab is an online Jupyter notebook) if we write the character <code>!</code> before a command we can execute terminal commands</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First, let's see which directory we are in. For that, we use the <code>pwd</code> command (*print working directory*).</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">pwd</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '/home/wallabot/Documentos/web/portafolio/posts',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's create a folder to create our modules with the <code>mkdir</code> (make directory) command.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">introduccion_python</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's see what files are in our folder. We will do this using the <code>ls</code> (*list*) command.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ls</span> <span class="n">introduccion_python</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that it is empty, so we create a new <code>.py</code> file in which we are going to create our module.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">introduccion_python</span><span class="o">/</span><span class="n">modulo1</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">funcion_del_modulo</span><span class="p">(</span><span class="n">nombre</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Hola, &quot;</span> <span class="o">+</span> <span class="n">nombre</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Writing introduccion_python/modulo1.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We check again what files are in our folder</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ls</span> <span class="n">introduccion_python</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'modulo1.py  __pycache__',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that a file <code>modulo1.py</code> has been created. We can now use it.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To use an external module, you have to use the <code>import</code> keyword. To use the functions of the module, you have to put first the name of the module, a <code>.</code> and then the name of the function you want to use.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">introduccion_python.modulo1</span>',
      '<span class="w"> </span>',
      '<span class="n">introduccion_python</span><span class="o">.</span><span class="n">modulo1</span><span class="o">.</span><span class="n">funcion_del_modulo</span><span class="p">(</span><span class="s1">&#39;MaximoFN&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hola, MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we want our module to have a specific name within our code, we can use the word <code>as</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">introduccion_python.modulo1</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nn">mod1</span>',
      '<span class="w"> </span>',
      '<span class="n">mod1</span><span class="o">.</span><span class="n">funcion_del_modulo</span><span class="p">(</span><span class="s1">&#39;MaximoFN&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hola, MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If the module has several functions, but we only want to import one, we can do this using the <code>from</code> and <code>import</code> keywords. The form would be</p>
      <div class='highlight'><pre><code class="language-text">from &lt;module&gt; import &lt;function&gt;</code></pre></div>
      <p>In this case, there is no need to specify the module name when calling the function.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">introduccion_python</span><span class="o">/</span><span class="n">modulo2</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">funcion1_del_modulo</span><span class="p">(</span><span class="n">nombre</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Hola, &quot;</span> <span class="o">+</span> <span class="n">nombre</span> <span class="o">+</span> <span class="s2">&quot;, funcion 1&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">funcion2_del_modulo</span><span class="p">(</span><span class="n">nombre</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Hola, &quot;</span> <span class="o">+</span> <span class="n">nombre</span> <span class="o">+</span> <span class="s2">&quot;, funcion 2&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">funcion3_del_modulo</span><span class="p">(</span><span class="n">nombre</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Hola, &quot;</span> <span class="o">+</span> <span class="n">nombre</span> <span class="o">+</span> <span class="s2">&quot;, funcion 3&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Writing introduccion_python/modulo2.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">introduccion_python.modulo2</span><span class="w"> </span><span class="kn">import</span> <span class="n">funcion2_del_modulo</span>',
      '<span class="w"> </span>',
      '<span class="n">funcion2_del_modulo</span><span class="p">(</span><span class="s1">&#39;MaximoFN&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hola, MaximoFN, funcion 2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can not only use modules created by us, but also installed modules (<code>built-in modules</code>).</p>
      <p>For example, we can use the <code>platform</code> module</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">platform</span>',
      '<span class="w"> </span>',
      '<span class="n">x</span> <span class="o">=</span> <span class="n">platform</span><span class="o">.</span><span class="n">system</span><span class="p">()</span>',
      '<span class="n">x</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x27;Linux&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="10.1. Entry points: files as modules and not as scripts">10.1. Entry points: files as modules and not as scripts<a class="anchor-link" href="#10.1. Entry points: files as modules and not as scripts"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 176" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Now let's create a file called <code>modulo3.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">introduccion_python</span><span class="o">/</span><span class="n">modulo3</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Hola desde modulo3&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">funcion_del_modulo</span><span class="p">():</span>',
      '<span class="w">  </span><span class="k">return</span> <span class="s2">&quot;Hola desde la funciÃ³n del modulo3&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting introduccion_python/modulo3.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we now import <code>modulo3.py</code> to use the <code>funcion_del_modulo</code> function, let's see what happens.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">introduccion_python.modulo3</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nn">mod3</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">mod3</span><span class="o">.</span><span class="n">funcion_del_modulo</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hola desde modulo3',
          'Hola desde la funciÃ³n del modulo3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that the <code>print</code> from <code>modulo3.py</code> has been executed, but that's not what we wanted. This is because when the file is named <code>modulo3.py</code>, Python runs it as a script.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>But what if we want to run <code>introduccion_python/main.py</code> as a script?</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">python</span> <span class="n">introduccion_python</span><span class="o">/</span><span class="n">modulo3</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hola desde modulo3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that only the <code>print</code> is executed, but not the function <code>funcion_del_modulo</code>. If we want the duality of functionality of the file <code>modulo3.py</code>, that is, to be able to import it from another module without it executing as a script and to run it standalone and execute the function we want, we use an <code>entry point</code>. That is, using the condition <code>if __name__ == &#x27;__main__&#x27;:</code> and then specifying what we want to execute. Let's see this with an example, I will rewrite the <code>modulo3.py</code> file.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">introduccion_python</span><span class="o">/</span><span class="n">modulo3</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Hola desde modulo3&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">funcion_del_modulo</span><span class="p">():</span>',
      '<span class="w">  </span><span class="k">return</span> <span class="s2">&quot;Hola desde la funciÃ³n del modulo3&quot;</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">  </span><span class="n">funcion_del_modulo</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting introduccion_python/modulo3.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If I now call <code>main.py</code> from another module, the <code>print</code> will no longer be executed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">introduccion_python.modulo3</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nn">mod3</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">mod3</span><span class="o">.</span><span class="n">funcion_del_modulo</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hola desde la funciÃ³n del modulo3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>And if I run it as a standalone script, the function <code>funcion_del_modulo</code> will be executed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">python</span> <span class="n">introduccion_python</span><span class="o">/</span><span class="n">modulo3</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hola desde modulo3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="11. Packages">11. Packages<a class="anchor-link" href="#11. Packages"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 177" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In Python we can create our own packages. To do this, we create a folder with the package name.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">mi_paquete_de_python</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We now create two files inside</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">touch</span> <span class="n">mi_paquete_de_python</span><span class="o">/</span><span class="n">modulo1</span><span class="o">.</span><span class="n">py</span> <span class="n">mi_paquete_de_python</span><span class="o">/</span><span class="n">modulo2</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>And we write in them</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">mi_paquete_de_python</span><span class="o">/</span><span class="n">modulo1</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">funcion1</span><span class="p">():</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Hola desde la funciÃ³n 1 del mÃ³dulo 1&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">funcion2</span><span class="p">():</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Hola desde la funciÃ³n 2 del mÃ³dulo 1&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting mi_paquete_de_python/modulo1.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">mi_paquete_de_python</span><span class="o">/</span><span class="n">modulo2</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">funcion1</span><span class="p">():</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Hola desde la funciÃ³n 1 del mÃ³dulo 2&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">funcion2</span><span class="p">():</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Hola desde la funciÃ³n 2 del mÃ³dulo 2&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting mi_paquete_de_python/modulo2.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we can call the functions from our package</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">mi_paquete_de_python</span><span class="w"> </span><span class="kn">import</span> <span class="n">modulo1</span> <span class="k">as</span> <span class="n">mod1</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">mi_paquete_de_python</span><span class="w"> </span><span class="kn">import</span> <span class="n">modulo2</span> <span class="k">as</span> <span class="n">mod2</span>',
      '<span class="w"> </span>',
      '<span class="n">mod1</span><span class="o">.</span><span class="n">funcion1</span><span class="p">()</span>',
      '<span class="n">mod1</span><span class="o">.</span><span class="n">funcion2</span><span class="p">()</span>',
      '<span class="n">mod2</span><span class="o">.</span><span class="n">funcion1</span><span class="p">()</span>',
      '<span class="n">mod2</span><span class="o">.</span><span class="n">funcion2</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hola desde la funciÃ³n 1 del mÃ³dulo 1',
          'Hola desde la funciÃ³n 2 del mÃ³dulo 1',
          'Hola desde la funciÃ³n 1 del mÃ³dulo 2',
          'Hola desde la funciÃ³n 2 del mÃ³dulo 2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>But what if our package has dozens of files with functions that we want to use, would we have to import all the files one by one? To avoid this, we can create an <code>__init__.py</code> file within the package where all these file imports can be handled.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">touch</span> <span class="n">mi_paquete_de_python</span><span class="o">/</span><span class="fm">__init__</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">mi_paquete_de_python</span><span class="o">/</span><span class="fm">__init__</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">modulo1</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">modulo2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting mi_paquete_de_python/__init__.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we can only import our package, which internally has already imported all the modules</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">mi_paquete_de_python</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nn">mi_paquete</span>',
      '<span class="w"> </span>',
      '<span class="n">mi_paquete</span><span class="o">.</span><span class="n">modulo1</span><span class="o">.</span><span class="n">funcion1</span><span class="p">()</span>',
      '<span class="n">mi_paquete</span><span class="o">.</span><span class="n">modulo1</span><span class="o">.</span><span class="n">funcion2</span><span class="p">()</span>',
      '<span class="n">mi_paquete</span><span class="o">.</span><span class="n">modulo2</span><span class="o">.</span><span class="n">funcion1</span><span class="p">()</span>',
      '<span class="n">mi_paquete</span><span class="o">.</span><span class="n">modulo2</span><span class="o">.</span><span class="n">funcion2</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hola desde la funciÃ³n 1 del mÃ³dulo 1',
          'Hola desde la funciÃ³n 2 del mÃ³dulo 1',
          'Hola desde la funciÃ³n 1 del mÃ³dulo 2',
          'Hola desde la funciÃ³n 2 del mÃ³dulo 2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>This way we only have to do an <code>import</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="12. Try... except">12. Try... except<a class="anchor-link" href="#12. Try... except"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 178" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>When an error, or an exception as it is actually called, occurs, Python will normally catch it and generate an error message.</p>
      <p>These exceptions can be handled using the <code>try</code> and <code>except</code> statements.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">variable_no_declarada</span><span class="p">)</span>',
      '<span class="k">except</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Ha ocurrido una excepciÃ³n&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Ha ocurrido una excepciÃ³n',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Since the <code>try</code> block raises an error, the <code>except</code> block will be executed.</p>
      <p>Without the <code>try</code> block, the program would freeze and generate an error.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As many exception blocks as desired can be defined, for example, if a special block of code is to be executed for a special type of error.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">variable_no_declarada</span><span class="p">)</span>',
      '<span class="k">except</span> <span class="ne">NameError</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;La variable </span><span class="se">\&#39;</span><span class="s2">variable_no_declarada</span><span class="se">\&#39;</span><span class="s2"> no estÃ¡ definida&quot;</span><span class="p">)</span>',
      '<span class="k">except</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Algo inesperado ha ocurrido&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'La variable &#x27;variable_no_declarada&#x27; no estÃ¡ definida',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>The word <code>else</code> can be used to indicate the case where no error has occurred.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;MaximoFN&#39;</span><span class="p">)</span>',
      '<span class="k">except</span> <span class="ne">NameError</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Ha ocurrido una excepciÃ³n&quot;</span><span class="p">)</span>',
      '<span class="k">else</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Todo OK&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
          'Todo OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>with the <code>finally</code> keyword, the code will be executed at the end whether an exception occurred or not</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">variable_no_declarada</span><span class="p">)</span>',
      '<span class="k">except</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Ha ocurrido una excepciÃ³n&quot;</span><span class="p">)</span>',
      '<span class="k">finally</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;&#39;try except&#39; finallizado&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Ha ocurrido una excepciÃ³n',
          '&#x27;try except&#x27; finallizado',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>This can be useful for closing objects and cleaning up resources</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span><span class="w"> </span><span class="nc">Clase</span><span class="p">:</span>',
      '<span class="w">  </span><span class="n">variable</span> <span class="o">=</span> <span class="s1">&#39;MaximoFN&#39;</span>',
      '<span class="w"> </span>',
      '<span class="n">objeto</span> <span class="o">=</span> <span class="n">Clase</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">try</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">Clase</span><span class="o">.</span><span class="n">mi_variable</span><span class="p">)</span>',
      '<span class="k">except</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Ha ocurrido una excepciÃ³n&quot;</span><span class="p">)</span>',
      '<span class="k">finally</span><span class="p">:</span>',
      '<span class="w">  </span><span class="k">del</span> <span class="n">objeto</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Ha ocurrido una excepciÃ³n',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="12.1. Create an exception">12.1. Create an exception<a class="anchor-link" href="#12.1. Create an exception"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 179" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As a Python developer, you can choose to raise an exception if a condition occurs.</p>
      <p>To raise (or generate) an exception, you need to use the keyword <code>raise</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">division</span><span class="p">(</span><span class="n">numerador</span><span class="p">,</span> <span class="n">denominador</span><span class="p">):</span>',
      '<span class="w">  </span><span class="k">if</span> <span class="n">denominador</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">    </span><span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s2">&quot;El denominador no puede ser 0&quot;</span><span class="p">)</span>',
      '<span class="w">  </span>',
      '<span class="w">  </span><span class="k">return</span> <span class="n">numerador</span><span class="o">/</span><span class="n">denominador</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">division</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '---------------------------------------------------------------------------Exception                                 Traceback (most recent call last)&amp;lt;ipython-input-16-33fb6066fa78&amp;gt; in &amp;lt;module&amp;gt;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;5   return numerador/denominador',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;6',
          '----&amp;gt; 7 print(division(10, 0))',
          '&amp;lt;ipython-input-16-33fb6066fa78&amp;gt; in division(numerador, denominador)',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1 def division(numerador, denominador):',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;2   if denominador == 0:',
          '----&amp;gt; 3     raise Exception(&quot;El denominador no puede ser 0&quot;)',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;4',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;5   return numerador/denominador',
          'Exception: El denominador no puede ser 0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>You can define what type of error to generate and the text that will be displayed to the user.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">division</span><span class="p">(</span><span class="n">numerador</span><span class="p">,</span> <span class="n">denominador</span><span class="p">):</span>',
      '<span class="w">  </span><span class="k">if</span> <span class="n">denominador</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">    </span><span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s2">&quot;El denominador no puede ser 0&quot;</span><span class="p">)</span>',
      '<span class="w">  </span>',
      '<span class="w">  </span><span class="k">return</span> <span class="n">numerador</span><span class="o">/</span><span class="n">denominador</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">division</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&amp;lt;ipython-input-17-26bfa63ae44c&amp;gt; in &amp;lt;module&amp;gt;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;5   return numerador/denominador',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;6',
          '----&amp;gt; 7 print(division(10, 0))',
          '&amp;lt;ipython-input-17-26bfa63ae44c&amp;gt; in division(numerador, denominador)',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1 def division(numerador, denominador):',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;2   if denominador == 0:',
          '----&amp;gt; 3     raise TypeError(&quot;El denominador no puede ser 0&quot;)',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;4',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;5   return numerador/denominador',
          'TypeError: El denominador no puede ser 0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="13. Keywords or reserved words">13. Keywords or reserved words<a class="anchor-link" href="#13. Keywords or reserved words"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 180" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Throughout this post, several occasions have featured Python reserved words or <code>keywords</code>, these are a series of words reserved by Python</p>
      <p>Below is a list of the <code>keywords</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">keyword</span>',
      '<span class="w"> </span>',
      '<span class="n">keyword</span><span class="o">.</span><span class="n">kwlist</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[&#x27;False&#x27;,',
          '&#x27;None&#x27;,',
          '&#x27;True&#x27;,',
          '&#x27;and&#x27;,',
          '&#x27;as&#x27;,',
          '&#x27;assert&#x27;,',
          '&#x27;async&#x27;,',
          '&#x27;await&#x27;,',
          '&#x27;break&#x27;,',
          '&#x27;class&#x27;,',
          '&#x27;continue&#x27;,',
          '&#x27;def&#x27;,',
          '&#x27;del&#x27;,',
          '&#x27;elif&#x27;,',
          '&#x27;else&#x27;,',
          '&#x27;except&#x27;,',
          '&#x27;finally&#x27;,',
          '&#x27;for&#x27;,',
          '&#x27;from&#x27;,',
          '&#x27;global&#x27;,',
          '&#x27;if&#x27;,',
          '&#x27;import&#x27;,',
          '&#x27;in&#x27;,',
          '&#x27;is&#x27;,',
          '&#x27;lambda&#x27;,',
          '&#x27;nonlocal&#x27;,',
          '&#x27;not&#x27;,',
          '&#x27;or&#x27;,',
          '&#x27;pass&#x27;,',
          '&#x27;raise&#x27;,',
          '&#x27;return&#x27;,',
          '&#x27;try&#x27;,',
          '&#x27;while&#x27;,',
          '&#x27;with&#x27;,',
          '&#x27;yield&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="14. The ZEN of Python">14. The ZEN of Python<a class="anchor-link" href="#14. The ZEN of Python"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 181" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>By importing the <code>this</code> module we can read the <code>zen</code> of Python, that is, its philosophy or principles.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">this</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'The Zen of Python, by Tim Peters',
          'Beautiful is better than ugly.',
          'Explicit is better than implicit.',
          'Simple is better than complex.',
          'Complex is better than complicated.',
          'Flat is better than nested.',
          'Sparse is better than dense.',
          'Readability counts.',
          'Special cases aren&#x27;t special enough to break the rules.',
          'Although practicality beats purity.',
          'Errors should never pass silently.',
          'Unless explicitly silenced.',
          'In the face of ambiguity, refuse the temptation to guess.',
          'There should be one-- and preferably only one --obvious way to do it.',
          'Although that way may not be obvious at first unless you&#x27;re Dutch.',
          'Now is better than never.',
          'Although never is often better than *right* now.',
          'If the implementation is hard to explain, it&#x27;s a bad idea.',
          'If the implementation is easy to explain, it may be a good idea.',
          'Namespaces are one honking great idea -- let&#x27;s do more of those!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>





































    </div>

  </section>

</PostLayout>
