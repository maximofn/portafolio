---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Resumable MCP: How to Build Servers and Clients with Automatic Checkpoints';
const end_url = 'resumable-mcp';
const description = 'Learn to build resumable MCP servers and clients with automatic checkpoint capabilities. Complete tutorial on implementing task interruption handling, state persistence, and recovery for long-running processes in Model Control Protocol. Includes practical code with FastMCP, persistent session management, and real-world examples for processes that can be interrupted and resumed from where they left off.';
const keywords = 'resumable MCP, MCP server, MCP client, checkpoints, FastMCP, Model Control Protocol, long-running tasks, automatic recovery, persistent state, interruptions, task resumption, data processing, Python asyncio, uvicorn, MCP sessions';
const languaje = 'EN';
const image_path = 'https://images.maximofn.com/MCP_resumable.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1472
    image_height=1104
    image_extension=webp
    article_date=2025-08-23+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Resumable MCP server"><h2>Resumable MCP server</h2></a>
      <a class="anchor-link" href="#Implement resumable MCP server"><h3>Implement resumable MCP server</h3></a>
      <a class="anchor-link" href="#Create virtual environment"><h4>Create virtual environment</h4></a>
      <a class="anchor-link" href="#Server code"><h4>Server code</h4></a>
      <a class="anchor-link" href="#Checkpoint manager"><h5>Checkpoint manager</h5></a>
      <a class="anchor-link" href="#Server"><h5>Server</h5></a>
      <a class="anchor-link" href="#Resumable MCP client"><h2>Resumable MCP client</h2></a>
      <a class="anchor-link" href="#Implement resumable MCP client"><h3>Implement resumable MCP client</h3></a>
      <a class="anchor-link" href="#Create the virtual environment for the customer"><h4>Create the virtual environment for the customer</h4></a>
      <a class="anchor-link" href="#Client code"><h4>Client code</h4></a>
      <a class="anchor-link" href="#Execution"><h2>Execution</h2></a>
      <a class="anchor-link" href="#First execution - process interrupted"><h2>First execution - process interrupted</h2></a>
      <a class="anchor-link" href="#Second execution - process resumed"><h2>Second execution - process resumed</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In the previous post <a href="https://www.maximofn.com/streamable-mcp">streamable MCP</a>, we saw how to make the MCP server send information about the process being performed so that the client can display that information to the user.</p>
      <p>This is useful when the process performed by the MCP server is long.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>But what happens if this process is interrupted? Because the server crashes, the connection is lost, etc. We would have to ask the MCP server to restart the process.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>So, to prevent that from happening, we will explain how to create an MCP server and client that can continue with the process that is being carried out. That way, if it crashes for any reason, the process can be resumed from where it left off.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Resumable MCP server">Resumable MCP server<a class="anchor-link" href="#Resumable MCP server"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 15" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>This server is very similar to the one we made in the post <a href="https://www.maximofn.com/streamable-mcp">streamable MCP</a>, except that we also created checkpoints so that a process can be resumed if it is interrupted.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>So let's see how to implement it.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Implement resumable MCP server">Implement resumable MCP server<a class="anchor-link" href="#Implement resumable MCP server"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 16" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Create virtual environment">Create virtual environment<a class="anchor-link" href="#Create virtual environment"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 17" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First, we create the folder where we are going to develop it.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">MCP_resumable_server</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We create the environment with <code>uv</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_server</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">init</span> <span class="o">.</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Initialized project `mcp-resumable-server` at `/Users/macm1/Documents/web/portafolio/posts/MCP_resumable_server`',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We started it</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_server</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">venv</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Using CPython 3.12.8',
          'Creating virtual environment at: .venv',
          'Activate with: source .venv/bin/activate',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We install the necessary libraries</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_server</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">add</span> <span class="n">fastmcp</span> <span class="n">uvicorn</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Resolved 64 packages in 548ms',
          '⠙ Preparing packages... (0/1)                                                   ⠋ Preparing packages... (0/0)',
          '⠙ Preparing packages... (0/1)--------------     0 B/71.28 KiB',
          '⠙ Preparing packages... (0/1)-------------- 16.00 KiB/71.28 KiB',
          '⠙ Preparing packages... (0/1)-------------- 32.00 KiB/71.28 KiB',
          '⠙ Preparing packages... (0/1)---------- 48.00 KiB/71.28 KiB',
          '⠙ Preparing packages... (0/1)---------- 64.00 KiB/71.28 KiB',
          'Prepared 1 package in 134ms',
          'Installed 61 packages in 152ms',
          '+ annotated-types==0.7.0',
          '+ anyio==4.10.0',
          '+ attrs==25.3.0',
          '+ authlib==1.6.2',
          '+ certifi==2025.8.3',
          '+ cffi==1.17.1',
          '+ charset-normalizer==3.4.3',
          '+ click==8.2.1',
          '+ cryptography==45.0.6',
          '+ cyclopts==3.22.5',
          '+ dnspython==2.7.0',
          '+ docstring-parser==0.17.0',
          '+ docutils==0.22',
          '+ email-validator==2.2.0',
          '+ exceptiongroup==1.3.0',
          '+ fastmcp==2.11.3',
          '+ h11==0.16.0',
          '+ httpcore==1.0.9',
          '+ httpx==0.28.1',
          '+ httpx-sse==0.4.1',
          '+ idna==3.10',
          '+ isodate==0.7.2',
          '+ jsonschema==4.25.1',
          '+ jsonschema-path==0.3.4',
          '+ jsonschema-specifications==2025.4.1',
          '+ lazy-object-proxy==1.12.0',
          '+ markdown-it-py==4.0.0',
          '+ markupsafe==3.0.2',
          '+ mcp==1.13.1',
          '+ mdurl==0.1.2',
          '+ more-itertools==10.7.0',
          '+ openapi-core==0.19.5',
          '+ openapi-pydantic==0.5.1',
          '+ openapi-schema-validator==0.6.3',
          '+ openapi-spec-validator==0.7.2',
          '+ parse==1.20.2',
          '+ pathable==0.4.4',
          '+ pycparser==2.22',
          '+ pydantic==2.11.7',
          '+ pydantic-core==2.33.2',
          '+ pydantic-settings==2.10.1',
          '+ pygments==2.19.2',
          '+ pyperclip==1.9.0',
          '+ python-dotenv==1.1.1',
          '+ python-multipart==0.0.20',
          '+ pyyaml==6.0.2',
          '+ referencing==0.36.2',
          '+ requests==2.32.5',
          '+ rfc3339-validator==0.1.4',
          '+ rich==14.1.0',
          '+ rich-rst==1.3.1',
          '+ rpds-py==0.27.0',
          '+ six==1.17.0',
          '+ sniffio==1.3.1',
          '+ sse-starlette==3.0.2',
          '+ starlette==0.47.3',
          '+ typing-extensions==4.14.1',
          '+ typing-inspection==0.4.1',
          '+ urllib3==2.5.0',
          '+ uvicorn==0.35.0',
          '+ werkzeug==3.1.1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Server code">Server code<a class="anchor-link" href="#Server code"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 18" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Now we write the necessary code for the resumable MCP server.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h5 id="Checkpoint manager">Checkpoint manager<a class="anchor-link" href="#Checkpoint manager"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 19" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we mentioned, the main difference with the server from the previous post <a href="https://www.maximofn.com/streamable-mcp">streamable MCP</a> is that in this one we are going to save the status at checkpoints so that we can resume the process if it is interrupted. So let's create the checkpoint manager.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">MCP_resumable_server</span><span class="o">/</span><span class="n">checkpoint_manager</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="c1">#!/usr/bin/env python3</span>',
      '<span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">Checkpoint and resumability system for MCP streaming tasks.</span>',
      '<span class="sd">Allows saving the state of long tasks and resuming them from where they were interrupted.</span>',
      '<span class="sd">&quot;&quot;&quot;</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">json</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">pickle</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">hashlib</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">datetime</span><span class="w"> </span><span class="kn">import</span> <span class="n">datetime</span><span class="p">,</span> <span class="n">timezone</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">pathlib</span><span class="w"> </span><span class="kn">import</span> <span class="n">Path</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">typing</span><span class="w"> </span><span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">dataclasses</span><span class="w"> </span><span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">asdict</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">enum</span><span class="w"> </span><span class="kn">import</span> <span class="n">Enum</span>',
      '<span class="w"> </span>',
      '<span class="k">class</span><span class="w"> </span><span class="nc">TaskStatus</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;Task states.&quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="n">PENDING</span> <span class="o">=</span> <span class="s2">&quot;pending&quot;</span>',
      '<span class="w">    </span><span class="n">RUNNING</span> <span class="o">=</span> <span class="s2">&quot;running&quot;</span>',
      '<span class="w">    </span><span class="n">PAUSED</span> <span class="o">=</span> <span class="s2">&quot;paused&quot;</span>',
      '<span class="w">    </span><span class="n">COMPLETED</span> <span class="o">=</span> <span class="s2">&quot;completed&quot;</span>',
      '<span class="w">    </span><span class="n">FAILED</span> <span class="o">=</span> <span class="s2">&quot;failed&quot;</span>',
      '<span class="w">    </span><span class="n">CANCELLED</span> <span class="o">=</span> <span class="s2">&quot;cancelled&quot;</span>',
      '<span class="w"> </span>',
      '<span class="nd">@dataclass</span>',
      '<span class="k">class</span><span class="w"> </span><span class="nc">TaskCheckpoint</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;Represents a checkpoint of a task.&quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="n">task_id</span><span class="p">:</span> <span class="nb">str</span>',
      '<span class="w">    </span><span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span>',
      '<span class="w">    </span><span class="n">task_name</span><span class="p">:</span> <span class="nb">str</span>',
      '<span class="w">    </span><span class="n">parameters</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span>',
      '<span class="w">    </span><span class="n">current_step</span><span class="p">:</span> <span class="nb">int</span>',
      '<span class="w">    </span><span class="n">total_steps</span><span class="p">:</span> <span class="nb">int</span>',
      '<span class="w">    </span><span class="n">status</span><span class="p">:</span> <span class="n">TaskStatus</span>',
      '<span class="w">    </span><span class="n">created_at</span><span class="p">:</span> <span class="n">datetime</span>',
      '<span class="w">    </span><span class="n">updated_at</span><span class="p">:</span> <span class="n">datetime</span>',
      '<span class="w">    </span><span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span>  <span class="c1"># Estado específico de la tarea</span>',
      '<span class="w">    </span><span class="n">error_message</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">to_dict</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Convert to serializable dictionary.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="n">data</span> <span class="o">=</span> <span class="n">asdict</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;status&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;status&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value</span>',
      '<span class="w">        </span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;created_at&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;created_at&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">isoformat</span><span class="p">()</span>',
      '<span class="w">        </span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;updated_at&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;updated_at&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">isoformat</span><span class="p">()</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="n">data</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="nd">@classmethod</span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">from_dict</span><span class="p">(</span><span class="bp">cls</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;TaskCheckpoint&#39;</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Create from dictionary.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;status&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">TaskStatus</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;status&#39;</span><span class="p">])</span>',
      '<span class="w">        </span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;created_at&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">fromisoformat</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;created_at&#39;</span><span class="p">])</span>',
      '<span class="w">        </span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;updated_at&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">fromisoformat</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;updated_at&#39;</span><span class="p">])</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="bp">cls</span><span class="p">(</span><span class="o">**</span><span class="n">data</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">class</span><span class="w"> </span><span class="nc">CheckpointManager</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;Checkpoint manager for streaming tasks.&quot;&quot;&quot;</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">storage_dir</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s2">&quot;checkpoints&quot;</span><span class="p">):</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">storage_dir</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="n">storage_dir</span><span class="p">)</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">storage_dir</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">checkpoints_file</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">storage_dir</span> <span class="o">/</span> <span class="s2">&quot;checkpoints.json&quot;</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">data_dir</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">storage_dir</span> <span class="o">/</span> <span class="s2">&quot;data&quot;</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">data_dir</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">_checkpoints</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">TaskCheckpoint</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">_load_checkpoints</span><span class="p">()</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">_load_checkpoints</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Load checkpoints from disk.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">checkpoints_file</span><span class="o">.</span><span class="n">exists</span><span class="p">():</span>',
      '<span class="w">            </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                </span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">checkpoints_file</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="bp">self</span><span class="o">.</span><span class="n">_checkpoints</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                        </span><span class="n">task_id</span><span class="p">:</span> <span class="n">TaskCheckpoint</span><span class="o">.</span><span class="n">from_dict</span><span class="p">(</span><span class="n">checkpoint_data</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">for</span> <span class="n">task_id</span><span class="p">,</span> <span class="n">checkpoint_data</span> <span class="ow">in</span> <span class="n">data</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error loading checkpoints: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="bp">self</span><span class="o">.</span><span class="n">_checkpoints</span> <span class="o">=</span> <span class="p">{}</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">_save_checkpoints</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Save checkpoints to disk.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">data</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="n">task_id</span><span class="p">:</span> <span class="n">checkpoint</span><span class="o">.</span><span class="n">to_dict</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">task_id</span><span class="p">,</span> <span class="n">checkpoint</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_checkpoints</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">checkpoints_file</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error saving checkpoints: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">generate_task_id</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">task_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">parameters</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Generate unique ID for a task.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="c1"># Create hash based on session, task and parameters</span>',
      '<span class="w">        </span><span class="n">data</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">session_id</span><span class="si">}</span><span class="s2">-</span><span class="si">{</span><span class="n">task_name</span><span class="si">}</span><span class="s2">-</span><span class="si">{</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">parameters</span><span class="p">,</span><span class="w"> </span><span class="n">sort_keys</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()[:</span><span class="mi">16</span><span class="p">]</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">create_checkpoint</span><span class="p">(</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">task_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">parameters</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span>',
      '<span class="w">        </span><span class="n">total_steps</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">initial_data</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">    </span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Create new checkpoint.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="n">task_id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">generate_task_id</span><span class="p">(</span><span class="n">session_id</span><span class="p">,</span> <span class="n">task_name</span><span class="p">,</span> <span class="n">parameters</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="n">checkpoint</span> <span class="o">=</span> <span class="n">TaskCheckpoint</span><span class="p">(</span>',
      '<span class="w">            </span><span class="n">task_id</span><span class="o">=</span><span class="n">task_id</span><span class="p">,</span>',
      '<span class="w">            </span><span class="n">session_id</span><span class="o">=</span><span class="n">session_id</span><span class="p">,</span>',
      '<span class="w">            </span><span class="n">task_name</span><span class="o">=</span><span class="n">task_name</span><span class="p">,</span>',
      '<span class="w">            </span><span class="n">parameters</span><span class="o">=</span><span class="n">parameters</span><span class="p">,</span>',
      '<span class="w">            </span><span class="n">current_step</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>',
      '<span class="w">            </span><span class="n">total_steps</span><span class="o">=</span><span class="n">total_steps</span><span class="p">,</span>',
      '<span class="w">            </span><span class="n">status</span><span class="o">=</span><span class="n">TaskStatus</span><span class="o">.</span><span class="n">PENDING</span><span class="p">,</span>',
      '<span class="w">            </span><span class="n">created_at</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">(</span><span class="n">timezone</span><span class="o">.</span><span class="n">utc</span><span class="p">),</span>',
      '<span class="w">            </span><span class="n">updated_at</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">(</span><span class="n">timezone</span><span class="o">.</span><span class="n">utc</span><span class="p">),</span>',
      '<span class="w">            </span><span class="n">data</span><span class="o">=</span><span class="n">initial_data</span> <span class="ow">or</span> <span class="p">{}</span>',
      '<span class="w">        </span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">_checkpoints</span><span class="p">[</span><span class="n">task_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">checkpoint</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">_save_checkpoints</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">return</span> <span class="n">task_id</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">update_checkpoint</span><span class="p">(</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">task_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">current_step</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">status</span><span class="p">:</span> <span class="n">TaskStatus</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">data</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="kc">None</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">error_message</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">    </span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">bool</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Update existing checkpoint.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">task_id</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_checkpoints</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">False</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="n">checkpoint</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_checkpoints</span><span class="p">[</span><span class="n">task_id</span><span class="p">]</span>',
      '<span class="w">        </span><span class="n">checkpoint</span><span class="o">.</span><span class="n">current_step</span> <span class="o">=</span> <span class="n">current_step</span>',
      '<span class="w">        </span><span class="n">checkpoint</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">status</span>',
      '<span class="w">        </span><span class="n">checkpoint</span><span class="o">.</span><span class="n">updated_at</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">(</span><span class="n">timezone</span><span class="o">.</span><span class="n">utc</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">data</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">checkpoint</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">error_message</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">checkpoint</span><span class="o">.</span><span class="n">error_message</span> <span class="o">=</span> <span class="n">error_message</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">_save_checkpoints</span><span class="p">()</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="kc">True</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">get_checkpoint</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">task_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TaskCheckpoint</span><span class="p">]:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Get checkpoint by ID.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_checkpoints</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">task_id</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">find_resumable_task</span><span class="p">(</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">task_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">parameters</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span>',
      '<span class="w">    </span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TaskCheckpoint</span><span class="p">]:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Find resumable task with the same parameters.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="n">task_id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">generate_task_id</span><span class="p">(</span><span class="n">session_id</span><span class="p">,</span> <span class="n">task_name</span><span class="p">,</span> <span class="n">parameters</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">checkpoint</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_checkpoints</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">task_id</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">checkpoint</span> <span class="ow">and</span> <span class="n">checkpoint</span><span class="o">.</span><span class="n">status</span> <span class="ow">in</span> <span class="p">[</span><span class="n">TaskStatus</span><span class="o">.</span><span class="n">PAUSED</span><span class="p">,</span> <span class="n">TaskStatus</span><span class="o">.</span><span class="n">RUNNING</span><span class="p">]:</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="n">checkpoint</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">return</span> <span class="kc">None</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">get_session_checkpoints</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">List</span><span class="p">[</span><span class="n">TaskCheckpoint</span><span class="p">]:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Get all checkpoints of a session.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="p">[</span>',
      '<span class="w">            </span><span class="n">checkpoint</span> <span class="k">for</span> <span class="n">checkpoint</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_checkpoints</span><span class="o">.</span><span class="n">values</span><span class="p">()</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">checkpoint</span><span class="o">.</span><span class="n">session_id</span> <span class="o">==</span> <span class="n">session_id</span>',
      '<span class="w">        </span><span class="p">]</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">save_task_data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">task_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">bool</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Save specific task data.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">data_file</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">data_dir</span> <span class="o">/</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2">.pkl&quot;</span>',
      '<span class="w">            </span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">data_file</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">True</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error saving task data </span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">False</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">load_task_data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">task_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Any</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Load specific task data.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">data_file</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">data_dir</span> <span class="o">/</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2">.pkl&quot;</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">data_file</span><span class="o">.</span><span class="n">exists</span><span class="p">():</span>',
      '<span class="w">                </span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">data_file</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">return</span> <span class="n">pickle</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">None</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error loading task data </span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">None</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">delete_checkpoint</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">task_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">bool</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Delete checkpoint and associated data.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Delete checkpoint</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">task_id</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_checkpoints</span><span class="p">:</span>',
      '<span class="w">                </span><span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">_checkpoints</span><span class="p">[</span><span class="n">task_id</span><span class="p">]</span>',
      '<span class="w">                </span><span class="bp">self</span><span class="o">.</span><span class="n">_save_checkpoints</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Delete data</span>',
      '<span class="w">            </span><span class="n">data_file</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">data_dir</span> <span class="o">/</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2">.pkl&quot;</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">data_file</span><span class="o">.</span><span class="n">exists</span><span class="p">():</span>',
      '<span class="w">                </span><span class="n">data_file</span><span class="o">.</span><span class="n">unlink</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">True</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error deleting checkpoint </span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">False</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">cleanup_old_checkpoints</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">max_age_days</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">7</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">int</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Clean up old checkpoints.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="n">cutoff_date</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">(</span><span class="n">timezone</span><span class="o">.</span><span class="n">utc</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span>',
      '<span class="w">            </span><span class="n">day</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">(</span><span class="n">timezone</span><span class="o">.</span><span class="n">utc</span><span class="p">)</span><span class="o">.</span><span class="n">day</span> <span class="o">-</span> <span class="n">max_age_days</span>',
      '<span class="w">        </span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="n">to_delete</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">        </span><span class="k">for</span> <span class="n">task_id</span><span class="p">,</span> <span class="n">checkpoint</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_checkpoints</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="p">(</span><span class="n">checkpoint</span><span class="o">.</span><span class="n">status</span> <span class="ow">in</span> <span class="p">[</span><span class="n">TaskStatus</span><span class="o">.</span><span class="n">COMPLETED</span><span class="p">,</span> <span class="n">TaskStatus</span><span class="o">.</span><span class="n">FAILED</span><span class="p">,</span> <span class="n">TaskStatus</span><span class="o">.</span><span class="n">CANCELLED</span><span class="p">]</span>',
      '<span class="w">                </span><span class="ow">and</span> <span class="n">checkpoint</span><span class="o">.</span><span class="n">updated_at</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">cutoff_date</span><span class="p">):</span>',
      '<span class="w">                </span><span class="n">to_delete</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">task_id</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">for</span> <span class="n">task_id</span> <span class="ow">in</span> <span class="n">to_delete</span><span class="p">:</span>',
      '<span class="w">            </span><span class="bp">self</span><span class="o">.</span><span class="n">delete_checkpoint</span><span class="p">(</span><span class="n">task_id</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">to_delete</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">get_stats</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Get checkpoint statistics.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="n">stats</span> <span class="o">=</span> <span class="p">{</span><span class="n">status</span><span class="o">.</span><span class="n">value</span><span class="p">:</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">status</span> <span class="ow">in</span> <span class="n">TaskStatus</span><span class="p">}</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">for</span> <span class="n">checkpoint</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_checkpoints</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>',
      '<span class="w">            </span><span class="n">stats</span><span class="p">[</span><span class="n">checkpoint</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">value</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">return</span> <span class="n">stats</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Singleton global for checkpoint manager</span>',
      '<span class="n">checkpoint_manager</span> <span class="o">=</span> <span class="n">CheckpointManager</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Writing MCP_resumable_server/checkpoint_manager.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="Server">Server<a class="anchor-link" href="#Server"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 20" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Now let's create the server code.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">MCP_resumable_server</span><span class="o">/</span><span class="n">server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="c1">#!/usr/bin/env python3</span>',
      '<span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">Server MCP with resumability and checkpoints.</span>',
      '<span class="sd">Demo how to implement tasks that can be paused and resumed.</span>',
      '<span class="sd">&quot;&quot;&quot;</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">asyncio</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">uvicorn</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">random</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">typing</span><span class="w"> </span><span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Any</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span><span class="p">,</span> <span class="n">Context</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp.server.http</span><span class="w"> </span><span class="kn">import</span> <span class="n">create_streamable_http_app</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">checkpoint_manager</span><span class="w"> </span><span class="kn">import</span> <span class="n">checkpoint_manager</span><span class="p">,</span> <span class="n">TaskStatus</span><span class="p">,</span> <span class="n">TaskCheckpoint</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create instance of the MCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;Resumable Server&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;MCP server with resumability and checkpoints for long tasks&quot;</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">resumable_data_processing</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">dataset_name</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s2">&quot;default_dataset&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">total_records</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">batch_size</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">client_id</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="kc">None</span><span class="p">,</span>  <span class="c1"># Add persistent client_id</span>',
      '<span class="w">    </span><span class="n">context</span><span class="p">:</span> <span class="n">Context</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Resumable data processing with automatic checkpoints.</span>',
      '<span class="sd">    </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        dataset_name: Name of the dataset to process</span>',
      '<span class="sd">        total_records: Total records to process</span>',
      '<span class="sd">        batch_size: Size of the batch per iteration</span>',
      '<span class="sd">        client_id: Persistent client id for resumability</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="n">context</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="s2">&quot;Requires context for resumability&quot;</span><span class="p">}</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Use persistent client id if available, otherwise use session_id</span>',
      '<span class="w">    </span><span class="n">persistent_id</span> <span class="o">=</span> <span class="n">client_id</span> <span class="k">if</span> <span class="n">client_id</span> <span class="k">else</span> <span class="n">context</span><span class="o">.</span><span class="n">session_id</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="n">persistent_id</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="s2">&quot;Requires client_id or session_id for resumability&quot;</span><span class="p">}</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="n">task_name</span> <span class="o">=</span> <span class="s2">&quot;resumable_data_processing&quot;</span>',
      '<span class="w">    </span><span class="n">parameters</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;dataset_name&quot;</span><span class="p">:</span> <span class="n">dataset_name</span><span class="p">,</span>',
      '<span class="w">        </span><span class="s2">&quot;total_records&quot;</span><span class="p">:</span> <span class="n">total_records</span><span class="p">,</span>',
      '<span class="w">        </span><span class="s2">&quot;batch_size&quot;</span><span class="p">:</span> <span class="n">batch_size</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Search for existing task to resume - include interrupted tasks</span>',
      '<span class="w">    </span><span class="n">task_id</span> <span class="o">=</span> <span class="n">checkpoint_manager</span><span class="o">.</span><span class="n">generate_task_id</span><span class="p">(</span><span class="n">persistent_id</span><span class="p">,</span> <span class="n">task_name</span><span class="p">,</span> <span class="n">parameters</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">existing_checkpoint</span> <span class="o">=</span> <span class="n">checkpoint_manager</span><span class="o">.</span><span class="n">get_checkpoint</span><span class="p">(</span><span class="n">task_id</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">if</span> <span class="n">existing_checkpoint</span> <span class="ow">and</span> <span class="n">existing_checkpoint</span><span class="o">.</span><span class="n">current_step</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Resume from checkpoint</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">context</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔄 Resuming processing from record </span><span class="si">{</span><span class="n">existing_checkpoint</span><span class="o">.</span><span class="n">current_step</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">start_record</span> <span class="o">=</span> <span class="n">existing_checkpoint</span><span class="o">.</span><span class="n">current_step</span>',
      '<span class="w">        </span><span class="n">processed_data</span> <span class="o">=</span> <span class="n">checkpoint_manager</span><span class="o">.</span><span class="n">load_task_data</span><span class="p">(</span><span class="n">task_id</span><span class="p">)</span> <span class="ow">or</span> <span class="p">[]</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Mark as running</span>',
      '<span class="w">        </span><span class="n">checkpoint_manager</span><span class="o">.</span><span class="n">update_checkpoint</span><span class="p">(</span>',
      '<span class="w">            </span><span class="n">task_id</span><span class="p">,</span> <span class="n">start_record</span><span class="p">,</span> <span class="n">TaskStatus</span><span class="o">.</span><span class="n">RUNNING</span>',
      '<span class="w">        </span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># New task</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">context</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🆕 Starting new processing of </span><span class="si">{</span><span class="n">total_records</span><span class="si">}</span><span class="s2"> records&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="ow">not</span> <span class="n">existing_checkpoint</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">task_id</span> <span class="o">=</span> <span class="n">checkpoint_manager</span><span class="o">.</span><span class="n">create_checkpoint</span><span class="p">(</span>',
      '<span class="w">                </span><span class="n">persistent_id</span><span class="p">,</span> <span class="n">task_name</span><span class="p">,</span> <span class="n">parameters</span><span class="p">,</span> <span class="n">total_records</span>',
      '<span class="w">            </span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">start_record</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="w">        </span><span class="n">processed_data</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Mark as running</span>',
      '<span class="w">        </span><span class="n">checkpoint_manager</span><span class="o">.</span><span class="n">update_checkpoint</span><span class="p">(</span>',
      '<span class="w">            </span><span class="n">task_id</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">TaskStatus</span><span class="o">.</span><span class="n">RUNNING</span>',
      '<span class="w">        </span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Process in batches</span>',
      '<span class="w">        </span><span class="k">for</span> <span class="n">record_num</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">start_record</span><span class="p">,</span> <span class="n">total_records</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>',
      '<span class="w">            </span><span class="n">batch_end</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">record_num</span> <span class="o">+</span> <span class="n">batch_size</span><span class="p">,</span> <span class="n">total_records</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Simulate batch processing</span>',
      '<span class="w">            </span><span class="k">await</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># Simulate work</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Process batch</span>',
      '<span class="w">            </span><span class="n">batch_results</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">record_num</span><span class="p">,</span> <span class="n">batch_end</span><span class="p">):</span>',
      '<span class="w">                </span><span class="c1"># Simulate record processing</span>',
      '<span class="w">                </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                    </span><span class="s2">&quot;record_id&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">dataset_name</span><span class="si">}</span><span class="s2">_</span><span class="si">{</span><span class="n">i</span><span class="si">:</span><span class="s2">06d</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;processed_at&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;step_</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;value&quot;</span><span class="p">:</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>',
      '<span class="w">                </span><span class="p">}</span>',
      '<span class="w">                </span><span class="n">batch_results</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">processed_data</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">batch_results</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Save checkpoint for each batch</span>',
      '<span class="w">            </span><span class="n">checkpoint_manager</span><span class="o">.</span><span class="n">update_checkpoint</span><span class="p">(</span>',
      '<span class="w">                </span><span class="n">task_id</span><span class="p">,</span>',
      '<span class="w">                </span><span class="n">batch_end</span><span class="p">,</span>',
      '<span class="w">                </span><span class="n">TaskStatus</span><span class="o">.</span><span class="n">RUNNING</span><span class="p">,</span>',
      '<span class="w">                </span><span class="p">{</span><span class="s2">&quot;last_batch&quot;</span><span class="p">:</span> <span class="n">batch_results</span><span class="p">}</span>',
      '<span class="w">            </span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Save processed data</span>',
      '<span class="w">            </span><span class="n">checkpoint_manager</span><span class="o">.</span><span class="n">save_task_data</span><span class="p">(</span><span class="n">task_id</span><span class="p">,</span> <span class="n">processed_data</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Report progress</span>',
      '<span class="w">            </span><span class="k">await</span> <span class="n">context</span><span class="o">.</span><span class="n">report_progress</span><span class="p">(</span>',
      '<span class="w">                </span><span class="n">progress</span><span class="o">=</span><span class="n">batch_end</span><span class="p">,</span>',
      '<span class="w">                </span><span class="n">total</span><span class="o">=</span><span class="n">total_records</span><span class="p">,</span>',
      '<span class="w">                </span><span class="n">message</span><span class="o">=</span><span class="sa">f</span><span class="s2">&quot;Processed </span><span class="si">{</span><span class="n">batch_end</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">total_records</span><span class="si">}</span><span class="s2"> records&quot;</span>',
      '<span class="w">            </span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">await</span> <span class="n">context</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Batch </span><span class="si">{</span><span class="n">record_num</span><span class="si">}</span><span class="s2">-</span><span class="si">{</span><span class="n">batch_end</span><span class="o">-</span><span class="mi">1</span><span class="si">}</span><span class="s2"> completed&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Mark as completed</span>',
      '<span class="w">        </span><span class="n">checkpoint_manager</span><span class="o">.</span><span class="n">update_checkpoint</span><span class="p">(</span>',
      '<span class="w">            </span><span class="n">task_id</span><span class="p">,</span> <span class="n">total_records</span><span class="p">,</span> <span class="n">TaskStatus</span><span class="o">.</span><span class="n">COMPLETED</span>',
      '<span class="w">        </span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">context</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;✅ Processing completed: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">processed_data</span><span class="p">)</span><span class="si">}</span><span class="s2"> records&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">return</span> <span class="p">{</span>',
      '<span class="w">            </span><span class="s2">&quot;task_id&quot;</span><span class="p">:</span> <span class="n">task_id</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;dataset_name&quot;</span><span class="p">:</span> <span class="n">dataset_name</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;total_processed&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">processed_data</span><span class="p">),</span>',
      '<span class="w">            </span><span class="s2">&quot;records&quot;</span><span class="p">:</span> <span class="n">processed_data</span><span class="p">[:</span><span class="mi">5</span><span class="p">],</span>  <span class="c1"># Show first 5</span>',
      '<span class="w">            </span><span class="s2">&quot;status&quot;</span><span class="p">:</span> <span class="s2">&quot;completed&quot;</span>',
      '<span class="w">        </span><span class="p">}</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Mark as failed</span>',
      '<span class="w">        </span><span class="n">checkpoint_manager</span><span class="o">.</span><span class="n">update_checkpoint</span><span class="p">(</span>',
      '<span class="w">            </span><span class="n">task_id</span><span class="p">,</span> <span class="n">record_num</span><span class="p">,</span> <span class="n">TaskStatus</span><span class="o">.</span><span class="n">FAILED</span><span class="p">,</span> <span class="n">error_message</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>',
      '<span class="w">        </span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">context</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error in processing: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="k">raise</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">pause_task</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">task_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">context</span><span class="p">:</span> <span class="n">Context</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Pause a task in execution.</span>',
      '<span class="sd">    </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        task_id: ID of the task to pause</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="n">checkpoint</span> <span class="o">=</span> <span class="n">checkpoint_manager</span><span class="o">.</span><span class="n">get_checkpoint</span><span class="p">(</span><span class="n">task_id</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="n">checkpoint</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;Task </span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2"> not found&quot;</span><span class="p">}</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">if</span> <span class="n">checkpoint</span><span class="o">.</span><span class="n">status</span> <span class="o">!=</span> <span class="n">TaskStatus</span><span class="o">.</span><span class="n">RUNNING</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;Task </span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2"> is not running&quot;</span><span class="p">}</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="n">success</span> <span class="o">=</span> <span class="n">checkpoint_manager</span><span class="o">.</span><span class="n">update_checkpoint</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">task_id</span><span class="p">,</span> <span class="n">checkpoint</span><span class="o">.</span><span class="n">current_step</span><span class="p">,</span> <span class="n">TaskStatus</span><span class="o">.</span><span class="n">PAUSED</span>',
      '<span class="w">    </span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">if</span> <span class="n">success</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">context</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">await</span> <span class="n">context</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;⏸️ Task </span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2"> paused&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;Task </span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2"> paused correctly&quot;</span><span class="p">}</span>',
      '<span class="w">    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;Could not pause task </span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_session_tasks</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">client_id</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="kc">None</span><span class="p">,</span>  <span class="c1"># Add persistent client_id</span>',
      '<span class="w">    </span><span class="n">context</span><span class="p">:</span> <span class="n">Context</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    List all tasks of the current session or the specified client.</span>',
      '<span class="sd">    </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        client_id: Persistent client id (optional)</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="n">context</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="s2">&quot;Requires context&quot;</span><span class="p">}</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Use persistent client id if available, otherwise use session_id</span>',
      '<span class="w">    </span><span class="n">persistent_id</span> <span class="o">=</span> <span class="n">client_id</span> <span class="k">if</span> <span class="n">client_id</span> <span class="k">else</span> <span class="n">context</span><span class="o">.</span><span class="n">session_id</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="n">persistent_id</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="s2">&quot;Requires client_id or session_id&quot;</span><span class="p">}</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="n">checkpoints</span> <span class="o">=</span> <span class="n">checkpoint_manager</span><span class="o">.</span><span class="n">get_session_checkpoints</span><span class="p">(</span><span class="n">persistent_id</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="n">tasks</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">checkpoint</span> <span class="ow">in</span> <span class="n">checkpoints</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">task_info</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">            </span><span class="s2">&quot;task_id&quot;</span><span class="p">:</span> <span class="n">checkpoint</span><span class="o">.</span><span class="n">task_id</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;task_name&quot;</span><span class="p">:</span> <span class="n">checkpoint</span><span class="o">.</span><span class="n">task_name</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;status&quot;</span><span class="p">:</span> <span class="n">checkpoint</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">value</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;progress&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">checkpoint</span><span class="o">.</span><span class="n">current_step</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">checkpoint</span><span class="o">.</span><span class="n">total_steps</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;progress_percent&quot;</span><span class="p">:</span> <span class="nb">round</span><span class="p">((</span><span class="n">checkpoint</span><span class="o">.</span><span class="n">current_step</span> <span class="o">/</span> <span class="n">checkpoint</span><span class="o">.</span><span class="n">total_steps</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">checkpoint</span><span class="o">.</span><span class="n">total_steps</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="n">checkpoint</span><span class="o">.</span><span class="n">created_at</span><span class="o">.</span><span class="n">isoformat</span><span class="p">(),</span>',
      '<span class="w">            </span><span class="s2">&quot;updated_at&quot;</span><span class="p">:</span> <span class="n">checkpoint</span><span class="o">.</span><span class="n">updated_at</span><span class="o">.</span><span class="n">isoformat</span><span class="p">()</span>',
      '<span class="w">        </span><span class="p">}</span>',
      '<span class="w">        </span><span class="n">tasks</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">task_info</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">return</span> <span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;session_id&quot;</span><span class="p">:</span> <span class="n">context</span><span class="o">.</span><span class="n">session_id</span><span class="p">,</span>',
      '<span class="w">        </span><span class="s2">&quot;persistent_id&quot;</span><span class="p">:</span> <span class="n">persistent_id</span><span class="p">,</span>',
      '<span class="w">        </span><span class="s2">&quot;total_tasks&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">tasks</span><span class="p">),</span>',
      '<span class="w">        </span><span class="s2">&quot;tasks&quot;</span><span class="p">:</span> <span class="n">tasks</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">get_checkpoint_stats</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="n">Context</span> <span class="o">=</span> <span class="kc">None</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Get global checkpoint statistics.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="n">stats</span> <span class="o">=</span> <span class="n">checkpoint_manager</span><span class="o">.</span><span class="n">get_stats</span><span class="p">()</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">return</span> <span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;checkpoint_stats&quot;</span><span class="p">:</span> <span class="n">stats</span><span class="p">,</span>',
      '<span class="w">        </span><span class="s2">&quot;total_checkpoints&quot;</span><span class="p">:</span> <span class="nb">sum</span><span class="p">(</span><span class="n">stats</span><span class="o">.</span><span class="n">values</span><span class="p">())</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">get_session_info</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="n">Context</span> <span class="o">=</span> <span class="kc">None</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Get information about the current session.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="n">context</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="s2">&quot;No context available&quot;</span><span class="p">}</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">return</span> <span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;session_id&quot;</span><span class="p">:</span> <span class="n">context</span><span class="o">.</span><span class="n">session_id</span><span class="p">,</span>',
      '<span class="w">        </span><span class="s2">&quot;request_id&quot;</span><span class="p">:</span> <span class="n">context</span><span class="o">.</span><span class="n">request_id</span><span class="p">,</span>',
      '<span class="w">        </span><span class="s2">&quot;client_id&quot;</span><span class="p">:</span> <span class="n">context</span><span class="o">.</span><span class="n">client_id</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">run_resumable_server</span><span class="p">(</span><span class="n">host</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="n">port</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8001</span><span class="p">):</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;Run server with resumability capabilities.&quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🚀 Starting MCP server with resumability at </span><span class="si">{</span><span class="n">host</span><span class="si">}</span><span class="s2">:</span><span class="si">{</span><span class="n">port</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Create application</span>',
      '<span class="w">    </span><span class="n">app</span> <span class="o">=</span> <span class="n">create_streamable_http_app</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">server</span><span class="o">=</span><span class="n">mcp</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">streamable_http_path</span><span class="o">=</span><span class="s2">&quot;/mcp/&quot;</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">stateless_http</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>  <span class="c1"># IMPORTANT: stateful for sessions</span>',
      '<span class="w">        </span><span class="n">debug</span><span class="o">=</span><span class="kc">True</span>',
      '<span class="w">    </span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="n">config</span> <span class="o">=</span> <span class="n">uvicorn</span><span class="o">.</span><span class="n">Config</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">app</span><span class="o">=</span><span class="n">app</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">host</span><span class="o">=</span><span class="n">host</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">port</span><span class="o">=</span><span class="n">port</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">log_level</span><span class="o">=</span><span class="s2">&quot;info&quot;</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">access_log</span><span class="o">=</span><span class="kc">False</span>',
      '<span class="w">    </span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="n">server</span> <span class="o">=</span> <span class="n">uvicorn</span><span class="o">.</span><span class="n">Server</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;✅ Resumable server ready at http://</span><span class="si">{</span><span class="n">host</span><span class="si">}</span><span class="s2">:</span><span class="si">{</span><span class="n">port</span><span class="si">}</span><span class="s2">/mcp/&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🔧 Tools with resumability:&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;  - resumable_data_processing: Processing with checkpoints&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="c1"># print(&quot;  - large_file_download: Download resumable&quot;)</span>',
      '<span class="w">    </span><span class="c1"># print(&quot;  - machine_learning_training: ML training resumable&quot;)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;  - pause_task: Pause tasks&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;  - list_session_tasks: List session tasks&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;  - get_checkpoint_stats: Checkpoint statistics&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;  - get_session_info: Current session information&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">await</span> <span class="n">server</span><span class="o">.</span><span class="n">serve</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">asyncio</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">run_resumable_server</span><span class="p">())</span>',
      '<span class="w">    </span><span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">⏹️  Server stopped by user&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error running server: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Writing MCP_resumable_server/server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Resumable MCP client">Resumable MCP client<a class="anchor-link" href="#Resumable MCP client"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 21" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Here we will also have a client very similar to the one in the previous post <a href="https://www.maximofn.com/streamable-mcp">streamable MCP</a>, but we will add a json with the information of the sessions created. So that if a session is interrupted in the middle of a process, it can be continued from where it left off.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Implement resumable MCP client">Implement resumable MCP client<a class="anchor-link" href="#Implement resumable MCP client"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 22" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Create the virtual environment for the customer">Create the virtual environment for the customer<a class="anchor-link" href="#Create the virtual environment for the customer"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 23" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First, we create the folder where we are going to develop it.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">MCP_resumable_client</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We create the environment with <code>uv</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_client</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">init</span> <span class="o">.</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Initialized project `mcp-resumable-client` at `/Users/macm1/Documents/web/portafolio/posts/MCP_resumable_client`',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We started it</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_client</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">venv</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Using CPython 3.12.8',
          'Creating virtual environment at: .venv',
          'Activate with: source .venv/bin/activate',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We install the necessary libraries</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_client</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">add</span> <span class="n">fastmcp</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Resolved 64 packages in 314ms',
          'Installed 61 packages in 145ms                                   ░░░░░░░░░░░░░░░░░░░░ [0/0] Installing wheels...',
          '+ annotated-types==0.7.0',
          '+ anyio==4.10.0',
          '+ attrs==25.3.0',
          '+ authlib==1.6.2',
          '+ certifi==2025.8.3',
          '+ cffi==1.17.1',
          '+ charset-normalizer==3.4.3',
          '+ click==8.2.1',
          '+ cryptography==45.0.6',
          '+ cyclopts==3.22.5',
          '+ dnspython==2.7.0',
          '+ docstring-parser==0.17.0',
          '+ docutils==0.22',
          '+ email-validator==2.2.0',
          '+ exceptiongroup==1.3.0',
          '+ fastmcp==2.11.3',
          '+ h11==0.16.0',
          '+ httpcore==1.0.9',
          '+ httpx==0.28.1',
          '+ httpx-sse==0.4.1',
          '+ idna==3.10',
          '+ isodate==0.7.2',
          '+ jsonschema==4.25.1',
          '+ jsonschema-path==0.3.4',
          '+ jsonschema-specifications==2025.4.1',
          '+ lazy-object-proxy==1.12.0',
          '+ markdown-it-py==4.0.0',
          '+ markupsafe==3.0.2',
          '+ mcp==1.13.1',
          '+ mdurl==0.1.2',
          '+ more-itertools==10.7.0',
          '+ openapi-core==0.19.5',
          '+ openapi-pydantic==0.5.1',
          '+ openapi-schema-validator==0.6.3',
          '+ openapi-spec-validator==0.7.2',
          '+ parse==1.20.2',
          '+ pathable==0.4.4',
          '+ pycparser==2.22',
          '+ pydantic==2.11.7',
          '+ pydantic-core==2.33.2',
          '+ pydantic-settings==2.10.1',
          '+ pygments==2.19.2',
          '+ pyperclip==1.9.0',
          '+ python-dotenv==1.1.1',
          '+ python-multipart==0.0.20',
          '+ pyyaml==6.0.2',
          '+ referencing==0.36.2',
          '+ requests==2.32.5',
          '+ rfc3339-validator==0.1.4',
          '+ rich==14.1.0',
          '+ rich-rst==1.3.1',
          '+ rpds-py==0.27.0',
          '+ six==1.17.0',
          '+ sniffio==1.3.1',
          '+ sse-starlette==3.0.2',
          '+ starlette==0.47.3',
          '+ typing-extensions==4.14.1',
          '+ typing-inspection==0.4.1',
          '+ urllib3==2.5.0',
          '+ uvicorn==0.35.0',
          '+ werkzeug==3.1.1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Client code">Client code<a class="anchor-link" href="#Client code"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 24" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Now let's create the MCP client. It will be very similar to the one in the previous post (this is the last time I'll say this, I promise) <a href="https://www.maximofn.com/streamable-mcp">streamable MCP</a>, except that we will also save the sessions in a <code>json</code> file so that we can recover any that were left incomplete in a server process.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">MCP_resumable_client</span><span class="o">/</span><span class="n">client</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="c1">#!/usr/bin/env python3</span>',
      '<span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">Client MCP with resumability and session persistence capabilities.</span>',
      '<span class="sd">Demonstrates how to connect to a resumable server and handle interruptions.</span>',
      '<span class="sd">&quot;&quot;&quot;</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">asyncio</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">json</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">time</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">uuid</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">typing</span><span class="w"> </span><span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Callable</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">dataclasses</span><span class="w"> </span><span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">datetime</span><span class="w"> </span><span class="kn">import</span> <span class="n">datetime</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">pathlib</span><span class="w"> </span><span class="kn">import</span> <span class="n">Path</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">Client</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp.client.transports</span><span class="w"> </span><span class="kn">import</span> <span class="n">StreamableHttpTransport</span>',
      '<span class="w"> </span>',
      '<span class="nd">@dataclass</span>',
      '<span class="k">class</span><span class="w"> </span><span class="nc">TaskProgress</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;Represents the progress of a task.&quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="n">task_id</span><span class="p">:</span> <span class="nb">str</span>',
      '<span class="w">    </span><span class="n">task_name</span><span class="p">:</span> <span class="nb">str</span>',
      '<span class="w">    </span><span class="n">current_step</span><span class="p">:</span> <span class="nb">int</span>',
      '<span class="w">    </span><span class="n">total_steps</span><span class="p">:</span> <span class="nb">int</span>',
      '<span class="w">    </span><span class="n">last_message</span><span class="p">:</span> <span class="nb">str</span>',
      '<span class="w">    </span><span class="n">started_at</span><span class="p">:</span> <span class="n">datetime</span> <span class="o">=</span> <span class="n">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">last_update</span><span class="p">:</span> <span class="n">datetime</span> <span class="o">=</span> <span class="n">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="nd">@property</span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">progress_percent</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">float</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Calculate progress percentage.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">total_steps</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="mf">0.0</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">current_step</span> <span class="o">/</span> <span class="bp">self</span><span class="o">.</span><span class="n">total_steps</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>',
      '<span class="w"> </span>',
      '<span class="nd">@dataclass</span>',
      '<span class="k">class</span><span class="w"> </span><span class="nc">SessionState</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;Session state of the client.&quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="n">client_id</span><span class="p">:</span> <span class="nb">str</span>  <span class="c1"># Persistent client ID</span>',
      '<span class="w">    </span><span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span>  <span class="c1"># Session ID of the server (can change)</span>',
      '<span class="w">    </span><span class="n">server_url</span><span class="p">:</span> <span class="nb">str</span>',
      '<span class="w">    </span><span class="n">active_tasks</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">TaskProgress</span><span class="p">]</span>',
      '<span class="w">    </span><span class="n">completed_tasks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>',
      '<span class="w">    </span><span class="n">created_at</span><span class="p">:</span> <span class="n">datetime</span> <span class="o">=</span> <span class="n">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">class</span><span class="w"> </span><span class="nc">ResumableProgressHandler</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;Handles progress with resumability capabilities.&quot;&quot;&quot;</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">task_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">session_state</span><span class="p">:</span> <span class="n">SessionState</span><span class="p">):</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">task_name</span> <span class="o">=</span> <span class="n">task_name</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span> <span class="o">=</span> <span class="n">session_state</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">last_progress</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">task_progress</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TaskProgress</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">progress</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">total</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">message</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Callback for progress updates.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="c1"># Create or update task progress</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">task_progress</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Try to find task_id from the message</span>',
      '<span class="w">            </span><span class="n">task_id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_extract_task_id</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">task_id</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">task_id</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;task_</span><span class="si">{</span><span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">())</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="bp">self</span><span class="o">.</span><span class="n">task_progress</span> <span class="o">=</span> <span class="n">TaskProgress</span><span class="p">(</span>',
      '<span class="w">                </span><span class="n">task_id</span><span class="o">=</span><span class="n">task_id</span><span class="p">,</span>',
      '<span class="w">                </span><span class="n">task_name</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">task_name</span><span class="p">,</span>',
      '<span class="w">                </span><span class="n">current_step</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">progress</span><span class="p">),</span>',
      '<span class="w">                </span><span class="n">total_steps</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">total</span><span class="p">),</span>',
      '<span class="w">                </span><span class="n">last_message</span><span class="o">=</span><span class="n">message</span>',
      '<span class="w">            </span><span class="p">)</span>',
      '<span class="w">            </span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">active_tasks</span><span class="p">[</span><span class="n">task_id</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">task_progress</span>',
      '<span class="w">        </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">            </span><span class="bp">self</span><span class="o">.</span><span class="n">task_progress</span><span class="o">.</span><span class="n">current_step</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">progress</span><span class="p">)</span>',
      '<span class="w">            </span><span class="bp">self</span><span class="o">.</span><span class="n">task_progress</span><span class="o">.</span><span class="n">total_steps</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>',
      '<span class="w">            </span><span class="bp">self</span><span class="o">.</span><span class="n">task_progress</span><span class="o">.</span><span class="n">last_message</span> <span class="o">=</span> <span class="n">message</span>',
      '<span class="w">            </span><span class="bp">self</span><span class="o">.</span><span class="n">task_progress</span><span class="o">.</span><span class="n">last_update</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Display progress visually</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">_display_progress</span><span class="p">(</span><span class="n">progress</span><span class="p">,</span> <span class="n">total</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Save session state</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">_save_session_state</span><span class="p">()</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">_extract_task_id</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Try to extract task_id from the message.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="c1"># Search for patterns like &quot;task_id: abc123&quot; in the message</span>',
      '<span class="w">        </span><span class="kn">import</span><span class="w"> </span><span class="nn">re</span>',
      '<span class="w">        </span><span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;task[_\s]*id[:\s]*([a-f0-9]</span><span class="si">{16}</span><span class="s1">)&#39;</span><span class="p">,</span> <span class="n">message</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">match</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">_display_progress</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">progress</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">total</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">message</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Display progress visually.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="n">percentage</span> <span class="o">=</span> <span class="p">(</span><span class="n">progress</span> <span class="o">/</span> <span class="n">total</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span> <span class="k">if</span> <span class="n">total</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span>',
      '<span class="w">        </span><span class="n">bar_length</span> <span class="o">=</span> <span class="mi">30</span>',
      '<span class="w">        </span><span class="n">filled_length</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">bar_length</span> <span class="o">*</span> <span class="n">percentage</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">bar</span> <span class="o">=</span> <span class="s1">&#39;█&#39;</span> <span class="o">*</span> <span class="n">filled_length</span> <span class="o">+</span> <span class="s1">&#39;░&#39;</span> <span class="o">*</span> <span class="p">(</span><span class="n">bar_length</span> <span class="o">-</span> <span class="n">filled_length</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="n">elapsed</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">start_time</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\r</span><span class="s2">📊 </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">task_name</span><span class="si">}</span><span class="s2">: |</span><span class="si">{</span><span class="n">bar</span><span class="si">}</span><span class="s2">| </span><span class="si">{</span><span class="n">percentage</span><span class="si">:</span><span class="s2">.1f</span><span class="si">}</span><span class="s2">% &quot;</span>',
      '<span class="w">              </span><span class="sa">f</span><span class="s2">&quot;(</span><span class="si">{</span><span class="n">progress</span><span class="si">:</span><span class="s2">.0f</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">total</span><span class="si">:</span><span class="s2">.0f</span><span class="si">}</span><span class="s2">) - </span><span class="si">{</span><span class="n">message</span><span class="si">}</span><span class="s2"> [</span><span class="si">{</span><span class="n">elapsed</span><span class="si">:</span><span class="s2">.1f</span><span class="si">}</span><span class="s2">s]&quot;</span><span class="p">,</span>',
      '<span class="w">              </span><span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">flush</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">progress</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">total</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">()</span>  <span class="c1"># New line when completed</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">task_progress</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Move to completed</span>',
      '<span class="w">                </span><span class="n">task_id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">task_progress</span><span class="o">.</span><span class="n">task_id</span>',
      '<span class="w">                </span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">completed_tasks</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">task_id</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">task_id</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">active_tasks</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">active_tasks</span><span class="p">[</span><span class="n">task_id</span><span class="p">]</span>',
      '<span class="w">                </span><span class="bp">self</span><span class="o">.</span><span class="n">_save_session_state</span><span class="p">()</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">_save_session_state</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Save session state.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="c1"># In a real case, this would be saved to disk</span>',
      '<span class="w">        </span><span class="k">pass</span>',
      '<span class="w"> </span>',
      '<span class="k">class</span><span class="w"> </span><span class="nc">MCPResumableClient</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;Client MCP with resumability capabilities.&quot;&quot;&quot;</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">server_url</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s2">&quot;http://localhost:8001/mcp/&quot;</span><span class="p">):</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">server_url</span> <span class="o">=</span> <span class="n">server_url</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">transport</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">SessionState</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">state_file</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s2">&quot;session_state.json&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="fm">__aenter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Initialize connection and load state.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="c1"># Load previous state if it exists</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">_load_session_state</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">transport</span> <span class="o">=</span> <span class="n">StreamableHttpTransport</span><span class="p">(</span>',
      '<span class="w">            </span><span class="n">url</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">server_url</span><span class="p">,</span>',
      '<span class="w">            </span><span class="n">sse_read_timeout</span><span class="o">=</span><span class="mf">120.0</span>  <span class="c1"># Timeout for resumable tasks</span>',
      '<span class="w">        </span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="n">Client</span><span class="p">(</span><span class="n">transport</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">transport</span><span class="p">)</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="fm">__aenter__</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Create new session state if it doesn&#39;t exist</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Generate unique persistent client ID</span>',
      '<span class="w">            </span><span class="n">client_id</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">())[:</span><span class="mi">16</span><span class="p">]</span>  <span class="c1"># Use only the first 16 characters</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Get real session_id from the server</span>',
      '<span class="w">            </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">session_info_result</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">call_tool</span><span class="p">(</span><span class="s2">&quot;get_session_info&quot;</span><span class="p">,</span> <span class="p">{})</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Extract content from CallToolResult</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">session_info_result</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">session_info_result</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">session_info_text</span> <span class="o">=</span> <span class="n">session_info_result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                    </span><span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">session_info_text</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">                        </span><span class="n">session_info</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">session_info_text</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="n">session_info</span> <span class="o">=</span> <span class="n">session_info_text</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">session_info</span> <span class="o">=</span> <span class="p">{}</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">real_session_id</span> <span class="o">=</span> <span class="n">session_info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;session_id&quot;</span><span class="p">,</span> <span class="sa">f</span><span class="s2">&quot;session_</span><span class="si">{</span><span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">())</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🏗️  Creating new session&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔗 Session ID of the server: </span><span class="si">{</span><span class="n">real_session_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🆔 Persistent Client ID: </span><span class="si">{</span><span class="n">client_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;⚠️  Could not get session_id from the server: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="n">real_session_id</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;session_</span><span class="si">{</span><span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">())</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span> <span class="o">=</span> <span class="n">SessionState</span><span class="p">(</span>',
      '<span class="w">                </span><span class="n">client_id</span><span class="o">=</span><span class="n">client_id</span><span class="p">,</span>',
      '<span class="w">                </span><span class="n">session_id</span><span class="o">=</span><span class="n">real_session_id</span><span class="p">,</span>',
      '<span class="w">                </span><span class="n">server_url</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">server_url</span><span class="p">,</span>',
      '<span class="w">                </span><span class="n">active_tasks</span><span class="o">=</span><span class="p">{},</span>',
      '<span class="w">                </span><span class="n">completed_tasks</span><span class="o">=</span><span class="p">[]</span>',
      '<span class="w">            </span><span class="p">)</span>',
      '<span class="w">            </span><span class="bp">self</span><span class="o">.</span><span class="n">_save_session_state</span><span class="p">()</span>',
      '<span class="w">        </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Reuse existing client_id</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🆔 Reusing Persistent Client ID: </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">client_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Verify if the session_id matches the server</span>',
      '<span class="w">            </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">session_info_result</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">call_tool</span><span class="p">(</span><span class="s2">&quot;get_session_info&quot;</span><span class="p">,</span> <span class="p">{})</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Extract content from CallToolResult</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">session_info_result</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">session_info_result</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">session_info_text</span> <span class="o">=</span> <span class="n">session_info_result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                    </span><span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">session_info_text</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">                        </span><span class="n">session_info</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">session_info_text</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="n">session_info</span> <span class="o">=</span> <span class="n">session_info_text</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">session_info</span> <span class="o">=</span> <span class="p">{}</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">server_session_id</span> <span class="o">=</span> <span class="n">session_info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;session_id&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">server_session_id</span> <span class="ow">and</span> <span class="n">server_session_id</span> <span class="o">!=</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">session_id</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;⚠️  Session ID of the server changed: </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">session_id</span><span class="si">}</span><span class="s2"> → </span><span class="si">{</span><span class="n">server_session_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">session_id</span> <span class="o">=</span> <span class="n">server_session_id</span>',
      '<span class="w">                    </span><span class="bp">self</span><span class="o">.</span><span class="n">_save_session_state</span><span class="p">()</span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;⚠️  Could not verify session_id: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">return</span> <span class="bp">self</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="fm">__aexit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_val</span><span class="p">,</span> <span class="n">exc_tb</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Close connection and save state.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="fm">__aexit__</span><span class="p">(</span><span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_val</span><span class="p">,</span> <span class="n">exc_tb</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">_save_session_state</span><span class="p">()</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">_load_session_state</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Load session state from disk.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">state_file</span><span class="o">.</span><span class="n">exists</span><span class="p">():</span>',
      '<span class="w">            </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                </span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">state_file</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Reconstruct objects</span>',
      '<span class="w">                </span><span class="n">active_tasks</span> <span class="o">=</span> <span class="p">{}</span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">task_id</span><span class="p">,</span> <span class="n">task_data</span> <span class="ow">in</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;active_tasks&#39;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>',
      '<span class="w">                    </span><span class="n">task_data</span><span class="p">[</span><span class="s1">&#39;started_at&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">fromisoformat</span><span class="p">(</span><span class="n">task_data</span><span class="p">[</span><span class="s1">&#39;started_at&#39;</span><span class="p">])</span>',
      '<span class="w">                    </span><span class="n">task_data</span><span class="p">[</span><span class="s1">&#39;last_update&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">fromisoformat</span><span class="p">(</span><span class="n">task_data</span><span class="p">[</span><span class="s1">&#39;last_update&#39;</span><span class="p">])</span>',
      '<span class="w">                    </span><span class="n">active_tasks</span><span class="p">[</span><span class="n">task_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">TaskProgress</span><span class="p">(</span><span class="o">**</span><span class="n">task_data</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span> <span class="o">=</span> <span class="n">SessionState</span><span class="p">(</span>',
      '<span class="w">                    </span><span class="n">client_id</span><span class="o">=</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;client_id&#39;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">())[:</span><span class="mi">16</span><span class="p">]),</span>  <span class="c1"># Generate if not exists</span>',
      '<span class="w">                    </span><span class="n">session_id</span><span class="o">=</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;session_id&#39;</span><span class="p">],</span>',
      '<span class="w">                    </span><span class="n">server_url</span><span class="o">=</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;server_url&#39;</span><span class="p">],</span>',
      '<span class="w">                    </span><span class="n">active_tasks</span><span class="o">=</span><span class="n">active_tasks</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">completed_tasks</span><span class="o">=</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;completed_tasks&#39;</span><span class="p">,</span> <span class="p">[]),</span>',
      '<span class="w">                    </span><span class="n">created_at</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">fromisoformat</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;created_at&#39;</span><span class="p">])</span>',
      '<span class="w">                </span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📂 Session state loaded: </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">session_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;⚠️  Error loading session state: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;💬 No session state found, starting new session&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">_save_session_state</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Save session state to disk.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">return</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Convert to serializable format</span>',
      '<span class="w">            </span><span class="n">active_tasks</span> <span class="o">=</span> <span class="p">{}</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">task_id</span><span class="p">,</span> <span class="n">task_progress</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">active_tasks</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>',
      '<span class="w">                </span><span class="n">active_tasks</span><span class="p">[</span><span class="n">task_id</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                    </span><span class="s1">&#39;task_id&#39;</span><span class="p">:</span> <span class="n">task_progress</span><span class="o">.</span><span class="n">task_id</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s1">&#39;task_name&#39;</span><span class="p">:</span> <span class="n">task_progress</span><span class="o">.</span><span class="n">task_name</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s1">&#39;current_step&#39;</span><span class="p">:</span> <span class="n">task_progress</span><span class="o">.</span><span class="n">current_step</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s1">&#39;total_steps&#39;</span><span class="p">:</span> <span class="n">task_progress</span><span class="o">.</span><span class="n">total_steps</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s1">&#39;last_message&#39;</span><span class="p">:</span> <span class="n">task_progress</span><span class="o">.</span><span class="n">last_message</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s1">&#39;started_at&#39;</span><span class="p">:</span> <span class="n">task_progress</span><span class="o">.</span><span class="n">started_at</span><span class="o">.</span><span class="n">isoformat</span><span class="p">(),</span>',
      '<span class="w">                    </span><span class="s1">&#39;last_update&#39;</span><span class="p">:</span> <span class="n">task_progress</span><span class="o">.</span><span class="n">last_update</span><span class="o">.</span><span class="n">isoformat</span><span class="p">()</span>',
      '<span class="w">                </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">data</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s1">&#39;client_id&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">client_id</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s1">&#39;session_id&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">session_id</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s1">&#39;server_url&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">server_url</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s1">&#39;active_tasks&#39;</span><span class="p">:</span> <span class="n">active_tasks</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s1">&#39;completed_tasks&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">completed_tasks</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s1">&#39;created_at&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">created_at</span><span class="o">.</span><span class="n">isoformat</span><span class="p">()</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">state_file</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;⚠️  Error saving session state: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">test_connection</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">bool</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Test connection to the server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">ping</span><span class="p">()</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;✅ Connection established with the resumable server&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">True</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Connection error: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">False</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">call_resumable_tool</span><span class="p">(</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">tool_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">parameters</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span>',
      '<span class="w">        </span><span class="n">allow_resume</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="kc">True</span>',
      '<span class="w">    </span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Call tool with resumability capabilities.&quot;&quot;&quot;</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="n">progress_handler</span> <span class="o">=</span> <span class="n">ResumableProgressHandler</span><span class="p">(</span><span class="n">tool_name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Add client_id to the parameters if allow_resume is enabled</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">allow_resume</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">parameters</span> <span class="o">=</span> <span class="p">{</span><span class="o">**</span><span class="n">parameters</span><span class="p">,</span> <span class="s1">&#39;client_id&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">client_id</span><span class="p">}</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🚀 Executing </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2"> (resumption: </span><span class="si">{</span><span class="s1">&#39;✅&#39;</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="n">allow_resume</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="s1">&#39;❌&#39;</span><span class="si">}</span><span class="s2">)&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">call_tool</span><span class="p">(</span>',
      '<span class="w">                </span><span class="n">tool_name</span><span class="p">,</span>',
      '<span class="w">                </span><span class="n">parameters</span><span class="p">,</span>',
      '<span class="w">                </span><span class="n">progress_handler</span><span class="o">=</span><span class="n">progress_handler</span>',
      '<span class="w">            </span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">duration</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_time</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;✅ </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2"> completed in </span><span class="si">{</span><span class="n">duration</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2">s&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Extract content from CallToolResult</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">                    </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="k">except</span> <span class="n">json</span><span class="o">.</span><span class="n">JSONDecodeError</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;text&quot;</span><span class="p">:</span> <span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span><span class="p">}</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="s2">&quot;No content in result&quot;</span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">⏸️  </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2"> interrupted by the user&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="c1"># In a real implementation, here we would pause the task</span>',
      '<span class="w">            </span><span class="k">raise</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">duration</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_time</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2"> failed after </span><span class="si">{</span><span class="n">duration</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2">s: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">raise</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_session_tasks</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List session tasks.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">parameters</span> <span class="o">=</span> <span class="p">{}</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">parameters</span><span class="p">[</span><span class="s1">&#39;client_id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">client_id</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">call_tool</span><span class="p">(</span><span class="s2">&quot;list_session_tasks&quot;</span><span class="p">,</span> <span class="n">parameters</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Extract content from CallToolResult</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">                    </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="k">except</span> <span class="n">json</span><span class="o">.</span><span class="n">JSONDecodeError</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;text&quot;</span><span class="p">:</span> <span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span><span class="p">}</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="s2">&quot;No content in result&quot;</span><span class="p">}</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing session tasks: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)}</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">pause_task</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">task_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Pause a specific task.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">call_tool</span><span class="p">(</span><span class="s2">&quot;pause_task&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;task_id&quot;</span><span class="p">:</span> <span class="n">task_id</span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Extract content from CallToolResult</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">                    </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="k">except</span> <span class="n">json</span><span class="o">.</span><span class="n">JSONDecodeError</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;text&quot;</span><span class="p">:</span> <span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span><span class="p">}</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="s2">&quot;No content in result&quot;</span><span class="p">}</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error pausing task </span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)}</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">get_checkpoint_stats</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Get checkpoint statistics.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">call_tool</span><span class="p">(</span><span class="s2">&quot;get_checkpoint_stats&quot;</span><span class="p">,</span> <span class="p">{})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Extract content from CallToolResult</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">                    </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="k">except</span> <span class="n">json</span><span class="o">.</span><span class="n">JSONDecodeError</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;text&quot;</span><span class="p">:</span> <span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span><span class="p">}</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="s2">&quot;No content in result&quot;</span><span class="p">}</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error getting checkpoint statistics: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)}</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="nf">show_session_summary</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Show session summary.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;❌ No session state available&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="s2">&quot;=&quot;</span><span class="o">*</span><span class="mi">60</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📋 SESSION SUMMARY&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span><span class="o">*</span><span class="mi">60</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🆔 Client ID (persistent): </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">client_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📌 Session ID (server): </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">session_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔗 Server: </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">server_url</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📅 Created: </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">created_at</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-</span><span class="si">%d</span><span class="s1"> %H:%M:%S&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🔄 Active Tasks: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">active_tasks</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="k">for</span> <span class="n">task_id</span><span class="p">,</span> <span class="n">task</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">active_tasks</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>',
      '<span class="w">            </span><span class="n">progress</span> <span class="o">=</span> <span class="n">task</span><span class="o">.</span><span class="n">progress_percent</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;  • </span><span class="si">{</span><span class="n">task</span><span class="o">.</span><span class="n">task_name</span><span class="si">}</span><span class="s2"> (</span><span class="si">{</span><span class="n">task_id</span><span class="p">[:</span><span class="mi">8</span><span class="p">]</span><span class="si">}</span><span class="s2">...): </span><span class="si">{</span><span class="n">progress</span><span class="si">:</span><span class="s2">.1f</span><span class="si">}</span><span class="s2">%&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;    └─ </span><span class="si">{</span><span class="n">task</span><span class="o">.</span><span class="n">last_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">✅ Completed Tasks: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">completed_tasks</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="k">for</span> <span class="n">task_id</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">session_state</span><span class="o">.</span><span class="n">completed_tasks</span><span class="p">[</span><span class="o">-</span><span class="mi">5</span><span class="p">:]:</span>  <span class="c1"># Last 5</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;  • </span><span class="si">{</span><span class="n">task_id</span><span class="p">[:</span><span class="mi">8</span><span class="p">]</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">demo_resumable_data_processing</span><span class="p">(</span><span class="n">client</span><span class="p">:</span> <span class="n">MCPResumableClient</span><span class="p">):</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;Demo of resumable data processing.&quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="s2">&quot;=&quot;</span><span class="o">*</span><span class="mi">60</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📊 DEMO: Resumable Data Processing&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span><span class="o">*</span><span class="mi">60</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">call_resumable_tool</span><span class="p">(</span>',
      '<span class="w">        </span><span class="s2">&quot;resumable_data_processing&quot;</span><span class="p">,</span>',
      '<span class="w">        </span><span class="p">{</span>',
      '<span class="w">            </span><span class="s2">&quot;dataset_name&quot;</span><span class="p">:</span> <span class="s2">&quot;customer_data&quot;</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;total_records&quot;</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s2">&quot;batch_size&quot;</span><span class="p">:</span> <span class="mi">5</span>',
      '<span class="w">        </span><span class="p">}</span>',
      '<span class="w">    </span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">if</span> <span class="s2">&quot;error&quot;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📊 Result: </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;total_processed&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="si">}</span><span class="s2"> records processed&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🆔 Task ID: </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;task_id&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">interactive_demo</span><span class="p">(</span><span class="n">client</span><span class="p">:</span> <span class="n">MCPResumableClient</span><span class="p">):</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;Interactive demo with options.&quot;&quot;&quot;</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="s2">&quot;=&quot;</span><span class="o">*</span><span class="mi">60</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🎮 INTERACTIVE DEMO - Resumable Client&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span><span class="o">*</span><span class="mi">60</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;1. Resumable data processing&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;2. List session tasks&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;3. Checkpoint statistics&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;4. Session summary&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;0. Exit&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;-&quot;</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">choice</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s2">&quot;Select an option (0-4): &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">choice</span> <span class="o">==</span> <span class="s2">&quot;0&quot;</span><span class="p">:</span>',
      '<span class="w">                </span><span class="k">break</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">choice</span> <span class="o">==</span> <span class="s2">&quot;1&quot;</span><span class="p">:</span>',
      '<span class="w">                </span><span class="k">await</span> <span class="n">demo_resumable_data_processing</span><span class="p">(</span><span class="n">client</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">choice</span> <span class="o">==</span> <span class="s2">&quot;2&quot;</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">tasks</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_session_tasks</span><span class="p">()</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📋 Session tasks: </span><span class="si">{</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">tasks</span><span class="p">,</span><span class="w"> </span><span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">choice</span> <span class="o">==</span> <span class="s2">&quot;3&quot;</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">stats</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get_checkpoint_stats</span><span class="p">()</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📊 Checkpoint statistics: </span><span class="si">{</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">stats</span><span class="p">,</span><span class="w"> </span><span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">choice</span> <span class="o">==</span> <span class="s2">&quot;4&quot;</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">client</span><span class="o">.</span><span class="n">show_session_summary</span><span class="p">()</span>',
      '<span class="w">            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;❌ Invalid option&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">⏸️  Demo interrupted&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">break</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">run_resumable_demo</span><span class="p">():</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;Run resumable demo.&quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🌟 Resumable Client MCP - Demo&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span><span class="o">*</span><span class="mi">60</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">async</span> <span class="k">with</span> <span class="n">MCPResumableClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Test connection</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">test_connection</span><span class="p">():</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;❌ Could not connect to the resumable server.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;   Make sure the server is running on port 8001&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Show session state</span>',
      '<span class="w">            </span><span class="n">client</span><span class="o">.</span><span class="n">show_session_summary</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Run interactive demo</span>',
      '<span class="w">            </span><span class="k">await</span> <span class="n">interactive_demo</span><span class="p">(</span><span class="n">client</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🎉 Demo completed&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">    </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error in the demo: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">asyncio</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">run_resumable_demo</span><span class="p">())</span>',
      '<span class="w">    </span><span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">⏹️  Demo interrupted by the user&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error running demo: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting MCP_resumable_client/client.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Execution">Execution<a class="anchor-link" href="#Execution"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 25" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's start the server, launch the client, request a task from the server, stop the client and server to simulate a lost connection, and then restart the server and client to resume the task where we left off.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="First execution - process interrupted">First execution - process interrupted<a class="anchor-link" href="#First execution - process interrupted"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 26" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Before executing anything, let's look at the contents of the server and client folders.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's see what's in the server folder.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_server</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">-</span><span class="n">lha</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'total 336',
          'drwxr-xr-x@  11 macm1  staff   352B Aug 25 10:26 .',
          'drwxr-xr-x  112 macm1  staff   3.5K Aug 25 09:56 ..',
          '-rw-r--r--@   1 macm1  staff     5B Aug 25 09:37 .python-version',
          'drwxr-xr-x@   8 macm1  staff   256B Aug 25 09:38 .venv',
          '-rw-r--r--@   1 macm1  staff     0B Aug 25 09:37 README.md',
          'drwxr-xr-x@   3 macm1  staff    96B Aug 25 09:42 __pycache__',
          '-rw-r--r--@   1 macm1  staff   8.4K Aug 25 09:40 checkpoint_manager.py',
          '-rw-r--r--@   1 macm1  staff    98B Aug 25 09:37 main.py',
          '-rw-r--r--@   1 macm1  staff   213B Aug 25 09:38 pyproject.toml',
          '-rw-r--r--@   1 macm1  staff   9.2K Aug 25 09:42 server.py',
          '-rw-r--r--@   1 macm1  staff   128K Aug 25 09:38 uv.lock',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We have the files <code>.python-version</code>, <code>.venv</code>, <code>README.md</code>, <code>__pycache__</code>, <code>main.py</code>, <code>pyproject.toml</code>, and <code>uv.lock</code>, which are the files created by <code>uv</code> when creating the virtual environment. And we have the files <code>checkpoint_manager.py</code> and <code>server.py</code>, which are the files we created for the resumable MCP server.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Now let's see what files are in the client folder.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_client</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">-</span><span class="n">lha</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'total 336',
          'drwxr-xr-x@   9 macm1  staff   288B Aug 25 10:26 .',
          'drwxr-xr-x  112 macm1  staff   3.5K Aug 25 09:56 ..',
          '-rw-r--r--@   1 macm1  staff     5B Aug 25 09:56 .python-version',
          'drwxr-xr-x@   8 macm1  staff   256B Aug 25 09:57 .venv',
          '-rw-r--r--@   1 macm1  staff     0B Aug 25 09:56 README.md',
          '-rw-r--r--@   1 macm1  staff    20K Aug 25 10:24 client.py',
          '-rw-r--r--@   1 macm1  staff    98B Aug 25 09:56 main.py',
          '-rw-r--r--@   1 macm1  staff   190B Aug 25 09:57 pyproject.toml',
          '-rw-r--r--@   1 macm1  staff   128K Aug 25 09:57 uv.lock',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As before, we have the files <code>.python-version</code>, <code>.venv</code>, <code>README.md</code>, <code>main.py</code>, <code>pyproject.toml</code>, and <code>uv.lock</code>, which are the files created by <code>uv</code> when creating the virtual environment. And we have the file <code>client.py</code>, which is the file we created for the resumable MCP client.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Once we have seen this, we start the server.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_server</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">run</span> <span class="n">server</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🚀 Starting MCP server with resumability at 127.0.0.1:8001',
          '✅ Resumable server ready at http://127.0.0.1:8001/mcp/',
          '🔧 Tools with resumability:',
          '&#x20;&#x20;- resumable_data_processing: Processing with checkpoints',
          '&#x20;&#x20;- pause_task: Pause tasks',
          '&#x20;&#x20;- list_session_tasks: List session tasks',
          '&#x20;&#x20;- get_checkpoint_stats: Checkpoint statistics',
          '&#x20;&#x20;- get_session_info: Current session information',
          'INFO:     Started server process [47049]',
          'INFO:     Waiting for application startup.',
          'INFO:     Application startup complete.',
          'INFO:     Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we run the client, select option 1 (Resumable data processing), and stop it halfway through.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_client</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">run</span> <span class="n">client</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🌟 Resumable Client MCP - Demo',
          '============================================================',
          '💬 No session state found, starting new session',
          '🏗️  Creating new session',
          '🔗 Session ID of the server: 6bf64139282e41e0a2233ec92647bf02',
          '🆔 Persistent Client ID: f0af843a-9b0e-42',
          '✅ Connection established with the resumable server',
          '============================================================',
          '📋 SESSION SUMMARY',
          '============================================================',
          '🆔 Client ID (persistent): f0af843a-9b0e-42',
          '📌 Session ID (server): 6bf64139282e41e0a2233ec92647bf02',
          '🔗 Server: http://localhost:8001/mcp/',
          '📅 Created: 2025-08-25 10:34:53',
          '🔄 Active Tasks: 0',
          '✅ Completed Tasks: 0',
          '============================================================',
          '🎮 INTERACTIVE DEMO - Resumable Client',
          '============================================================',
          '1. Resumable data processing',
          '2. List session tasks',
          '3. Checkpoint statistics',
          '4. Session summary',
          '0. Exit',
          '------------------------------------------------------------',
          'Select an option (0-4): 1',
          '============================================================',
          '📊 DEMO: Resumable Data Processing',
          '============================================================',
          '🚀 Executing resumable_data_processing (resumption: ✅)',
          '[08/25/25 10:35:19] INFO     Server log: logging.py:40',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;🆕 Starting new processing of 50 records',
          '📊 resumable_data_processing: |███░░░░░░░░░░░░░░░░░░░░░░░░░░░| 10.0% (5/50) - Processed 5/50 records [1.0s]',
          '📊 resumable_data_processing: |██████░░░░░░░░░░░░░░░░░░░░░░░░| 20.0% (10/50) - Processed 10/50 records [2.0s]',
          '📊 resumable_data_processing: |█████████░░░░░░░░░░░░░░░░░░░░░| 30.0% (15/50) - Processed 15/50 records [3.0s]',
          '^C',
          '⏹️  Demo interrupted by the user',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We also stopped the server.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Now that we have stopped the server and client, let's take another look at what's in each folder.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First, let's see what's in the server folder.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_server</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">-</span><span class="n">lha</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'total 336',
          'drwxr-xr-x@  12 macm1  staff   384B Aug 25 10:33 .',
          'drwxr-xr-x  112 macm1  staff   3.5K Aug 25 09:56 ..',
          '-rw-r--r--@   1 macm1  staff     5B Aug 25 09:37 .python-version',
          'drwxr-xr-x@   8 macm1  staff   256B Aug 25 09:38 .venv',
          '-rw-r--r--@   1 macm1  staff     0B Aug 25 09:37 README.md',
          'drwxr-xr-x@   3 macm1  staff    96B Aug 25 09:42 __pycache__',
          '-rw-r--r--@   1 macm1  staff   8.4K Aug 25 09:40 checkpoint_manager.py',
          'drwxr-xr-x@   4 macm1  staff   128B Aug 25 10:35 checkpoints',
          '-rw-r--r--@   1 macm1  staff    98B Aug 25 09:37 main.py',
          '-rw-r--r--@   1 macm1  staff   213B Aug 25 09:38 pyproject.toml',
          '-rw-r--r--@   1 macm1  staff   9.2K Aug 25 09:42 server.py',
          '-rw-r--r--@   1 macm1  staff   128K Aug 25 09:38 uv.lock',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can see that in addition to everything that was there before, there is now also a folder called <code>checkpoints</code> that contains the checkpoints for the tasks that have been executed.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_server</span><span class="o">/</span><span class="n">checkpoints</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">-</span><span class="n">lha</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'total 8',
          'drwxr-xr-x@  4 macm1  staff   128B Aug 25 10:35 .',
          'drwxr-xr-x@ 12 macm1  staff   384B Aug 25 10:33 ..',
          '-rw-r--r--@  1 macm1  staff   1.1K Aug 25 10:35 checkpoints.json',
          'drwxr-xr-x@  3 macm1  staff    96B Aug 25 10:35 data',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>If we look at the contents of the <code>json</code>, we can see</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-json">&#x20;&#x20;"current_step": 15,<br>&#x20;&#x20;"total_steps": 50,</code></pre></div>
            </section>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_server</span><span class="o">/</span><span class="n">checkpoints</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">cat</span> <span class="n">checkpoints</span><span class="o">.</span><span class="n">json</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;',
          '&#x20;&#x20;&quot;9d7bc504c50e0bce&quot;: &#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&quot;task_id&quot;: &quot;9d7bc504c50e0bce&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&quot;session_id&quot;: &quot;864eec3a-be1b-43&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&quot;task_name&quot;: &quot;resumable_data_processing&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&quot;parameters&quot;: &#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;dataset_name&quot;: &quot;customer_data&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;total_records&quot;: 50,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;batch_size&quot;: 5',
          '&#x20;&#x20;&#x20;&#x20;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x20;&quot;current_step&quot;: 15,',
          '&#x20;&#x20;&#x20;&#x20;&quot;total_steps&quot;: 50,',
          '&#x20;&#x20;&#x20;&#x20;&quot;status&quot;: &quot;failed&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&quot;created_at&quot;: &quot;2025-08-25T08:35:19.349142+00:00&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&quot;updated_at&quot;: &quot;2025-08-25T08:35:23.366672+00:00&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&quot;data&quot;: &#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;last_batch&quot;: [',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;record_id&quot;: &quot;customer_data_000015&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;processed_at&quot;: &quot;step_15&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;value&quot;: 88',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;record_id&quot;: &quot;customer_data_000016&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;processed_at&quot;: &quot;step_16&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;value&quot;: 17',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;record_id&quot;: &quot;customer_data_000017&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;processed_at&quot;: &quot;step_17&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;value&quot;: 596',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;record_id&quot;: &quot;customer_data_000018&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;processed_at&quot;: &quot;step_18&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;value&quot;: 693',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;record_id&quot;: &quot;customer_data_000019&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;processed_at&quot;: &quot;step_19&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;value&quot;: 34',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x7D;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;]',
          '&#x20;&#x20;&#x20;&#x20;&#x7D;,',
          '&#x20;&#x20;&#x20;&#x20;&quot;error_message&quot;: &quot;&quot;',
          '&#x20;&#x20;&#x7D;',
          '&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In other words, we are stuck on step 15 of 50, which, if you look at the customer's exit, is where we interrupted the process.</p>
      <div class='highlight'><pre><code class="language-markdown">📊 resumable_data_processing: |███░░░░░░░░░░░░░░░░░░░░░░░░░░░| 10.0% (5/50) - Processed 5/50 records [1.0s]
      📊 resumable_data_processing: |██████░░░░░░░░░░░░░░░░░░░░░░░░| 20.0% (10/50) - Processed 10/50 records [2.0s]
      📊 resumable_data_processing: |█████████░░░░░░░░░░░░░░░░░░░░░| 30.0% (15/50) - Processed 15/50 records [3.0s]
      ^C</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Now we see the contents of the client folder, we can see that there is now a file called <code>session_state.json</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_client</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">-</span><span class="n">lha</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'total 344',
          'drwxr-xr-x@  10 macm1  staff   320B Aug 25 10:35 .',
          'drwxr-xr-x  112 macm1  staff   3.5K Aug 25 09:56 ..',
          '-rw-r--r--@   1 macm1  staff     5B Aug 25 09:56 .python-version',
          'drwxr-xr-x@   8 macm1  staff   256B Aug 25 09:57 .venv',
          '-rw-r--r--@   1 macm1  staff     0B Aug 25 09:56 README.md',
          '-rw-r--r--@   1 macm1  staff    20K Aug 25 10:24 client.py',
          '-rw-r--r--@   1 macm1  staff    98B Aug 25 09:56 main.py',
          '-rw-r--r--@   1 macm1  staff   190B Aug 25 09:57 pyproject.toml',
          '-rw-r--r--@   1 macm1  staff   546B Aug 25 10:35 session_state.json',
          '-rw-r--r--@   1 macm1  staff   128K Aug 25 09:57 uv.lock',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's see what's inside.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_client</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">cat</span> <span class="n">session_state</span><span class="o">.</span><span class="n">json</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;',
          '&#x20;&#x20;&quot;client_id&quot;: &quot;864eec3a-be1b-43&quot;,',
          '&#x20;&#x20;&quot;session_id&quot;: &quot;d34ff655d6464fb4ae5eeb64c62989b0&quot;,',
          '&#x20;&#x20;&quot;server_url&quot;: &quot;http://localhost:8001/mcp/&quot;,',
          '&#x20;&#x20;&quot;active_tasks&quot;: &#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&quot;task_1756110920&quot;: &#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;task_id&quot;: &quot;task_1756110920&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;task_name&quot;: &quot;resumable_data_processing&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;current_step&quot;: 15,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;total_steps&quot;: 50,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;last_message&quot;: &quot;Processed 15/50 records&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;started_at&quot;: &quot;2025-08-25T10:35:20.353521&quot;,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&quot;last_update&quot;: &quot;2025-08-25T10:35:22.364507&quot;',
          '&#x20;&#x20;&#x20;&#x20;&#x7D;',
          '&#x20;&#x20;&#x7D;,',
          '&#x20;&#x20;&quot;completed_tasks&quot;: [],',
          '&#x20;&#x20;&quot;created_at&quot;: &quot;2025-08-25T10:35:16.230926&quot;',
          '&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As in the server's <code>json</code>, we see</p>
      <div class='highlight'><pre><code class="language-markdown">      "current_step": 15,
            "total_steps": 50,</code></pre></div>
      <p>It has also been noted that we have remained at step 15 of 50, but the most important thing is</p>
      <div class='highlight'><pre><code class="language-markdown">      "task_id": "task_1756110920",</code></pre></div>
      <p>Where we store the task ID so we can ask the server to resume it.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Second execution - process resumed">Second execution - process resumed<a class="anchor-link" href="#Second execution - process resumed"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 27" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If we now restart the server</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_server</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">run</span> <span class="n">server</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🚀 Starting MCP server with resumability at 127.0.0.1:8001',
          '✅ Resumable server ready at http://127.0.0.1:8001/mcp/',
          '🔧 Tools with resumability:',
          '&#x20;&#x20;- resumable_data_processing: Processing with checkpoints',
          '&#x20;&#x20;- pause_task: Pause tasks',
          '&#x20;&#x20;- list_session_tasks: List session tasks',
          '&#x20;&#x20;- get_checkpoint_stats: Checkpoint statistics',
          '&#x20;&#x20;- get_session_info: Current session information',
          'INFO:     Started server process [52338]',
          'INFO:     Waiting for application startup.',
          'INFO:     Application startup complete.',
          'INFO:     Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>And we run the client again</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_client</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">run</span> <span class="n">client</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🌟 Resumable Client MCP - Demo',
          '============================================================',
          '📂 Session state loaded: d34ff655d6464fb4ae5eeb64c62989b0',
          '🆔 Reusing Persistent Client ID: 864eec3a-be1b-43',
          '⚠️  Session ID of the server changed: d34ff655d6464fb4ae5eeb64c62989b0 → 004bc91edde144898938136d0d2b5041',
          '✅ Connection established with the resumable server',
          '============================================================',
          '📋 SESSION SUMMARY',
          '============================================================',
          '🆔 Client ID (persistent): 864eec3a-be1b-43',
          '📌 Session ID (server): 004bc91edde144898938136d0d2b5041',
          '🔗 Server: http://localhost:8001/mcp/',
          '📅 Created: 2025-08-25 10:35:16',
          '🔄 Active Tasks: 1',
          '&#x20;&#x20;• resumable_data_processing (task_175...): 30.0%',
          '&#x20;&#x20;&#x20;&#x20;└─ Processed 15/50 records',
          '✅ Completed Tasks: 0',
          '============================================================',
          '🎮 INTERACTIVE DEMO - Resumable Client',
          '============================================================',
          '1. Resumable data processing',
          '2. List session tasks',
          '3. Checkpoint statistics',
          '4. Session summary',
          '0. Exit',
          '------------------------------------------------------------',
          'Select an option (0-4):',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We can see that it says</p>
      <div class='highlight'><pre><code class="language-markdown">🔄 Active Tasks: 1
        • resumable_data_processing (task_175...): 30.0%
          └─ Processed 15/50 records</code></pre></div>
      <p>You have been able to recover the information that we left at step 15 of 50 of the task with ID <code>1756110920</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Now select option 1 again and you will see that it continues from step 15.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">MCP_resumable_client</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">run</span> <span class="n">client</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🌟 Resumable Client MCP - Demo',
          '============================================================',
          '📂 Session state loaded: 004bc91edde144898938136d0d2b5041',
          '🆔 Reusing Persistent Client ID: 864eec3a-be1b-43',
          '⚠️  Session ID of the server changed: 004bc91edde144898938136d0d2b5041 → 4b93c36446504a3d92467d39a8cba589',
          '✅ Connection established with the resumable server',
          '============================================================',
          '📋 SESSION SUMMARY',
          '============================================================',
          '🆔 Client ID (persistent): 864eec3a-be1b-43',
          '📌 Session ID (server): 4b93c36446504a3d92467d39a8cba589',
          '🔗 Server: http://localhost:8001/mcp/',
          '📅 Created: 2025-08-25 10:35:16',
          '🔄 Active Tasks: 1',
          '&#x20;&#x20;• resumable_data_processing (task_175...): 30.0%',
          '&#x20;&#x20;&#x20;&#x20;└─ Processed 15/50 records',
          '✅ Completed Tasks: 0',
          '============================================================',
          '🎮 INTERACTIVE DEMO - Resumable Client',
          '============================================================',
          '1. Resumable data processing',
          '2. List session tasks',
          '3. Checkpoint statistics',
          '4. Session summary',
          '0. Exit',
          '------------------------------------------------------------',
          'Select an option (0-4): 1',
          '============================================================',
          '📊 DEMO: Resumable Data Processing',
          '============================================================',
          '🚀 Executing resumable_data_processing (resumption: ✅)',
          '[08/25/25 10:57:31] INFO     Server log: 🔄 Resuming         logging.py:40',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;processing from record 15',
          '📊 resumable_data_processing: |████████████░░░░░░░░░░░░░░░░░░| 40.0% (20/50) - Processed 20/50 records [1.0s]',
          '📊 resumable_data_processing: |███████████████░░░░░░░░░░░░░░░| 50.0% (25/50) - Processed 25/50 records [2.0s]',
          '📊 resumable_data_processing: |██████████████████░░░░░░░░░░░░| 60.0% (30/50) - Processed 30/50 records [3.0s]',
          '📊 resumable_data_processing: |█████████████████████░░░░░░░░░| 70.0% (35/50) - Processed 35/50 records [4.0s]',
          '📊 resumable_data_processing: |████████████████████████░░░░░░| 80.0% (40/50) - Processed 40/50 records [5.0s]',
          '📊 resumable_data_processing: |███████████████████████████░░░| 90.0% (45/50) - Processed 45/50 records [6.0s]',
          '📊 resumable_data_processing: |██████████████████████████████| 100.0% (50/50) - Processed 50/50 records [7.0s]',
          '[08/25/25 10:57:38] INFO     Server log: ✅ Processing       logging.py:40',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;completed: 55 records',
          '✅ resumable_data_processing completed in 7.05s',
          '📊 Result: 55 records processed',
          '🆔 Task ID: 88e68f3bdf65cd22',
          '============================================================',
          '🎮 INTERACTIVE DEMO - Resumable Client',
          '============================================================',
          '1. Resumable data processing',
          '2. List session tasks',
          '3. Checkpoint statistics',
          '4. Session summary',
          '0. Exit',
          '------------------------------------------------------------',
          'Select an option (0-4): 0',
          '🎉 Demo completed',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that it says “processing from record 15,” meaning that it has started where it left off.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>This way, we can now have MCP servers and clients that process long tasks and can be resumed in case of interruption.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>This is also very useful when the task is very long, so that the client does not have to be running and waiting all the time. Instead, we can have the client request the task from the server and periodically request the status of the task.</p>
      </section>







    </div>

  </section>

</PostLayout>
