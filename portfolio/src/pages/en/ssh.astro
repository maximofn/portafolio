---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'SSH';
const end_url = 'ssh';
const description = 'Connecting securely is essential in today\'s digital world. Discover how SSH allows you to establish encrypted communications between your machine and remote servers. From basic concepts to advanced tips, dive into this comprehensive tutorial and master the craft of SSH. üîê üíº #SSHSecure';
const keywords = 'ssh, secure, connection, remote, server, terminal, linux, tutorial, guide';
const languaje = 'EN';
const image_path = 'https://images.maximofn.com/SSH.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1366
    image_height=768
    image_extension=webp
    article_date=2023-03-18+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Historical Introduction"><h2>Historical Introduction</h2></a>
      <a class="anchor-link" href="#SSH Encryption"><h2>SSH Encryption</h2></a>
      <a class="anchor-link" href="#Requirements SSH"><h2>Requirements <code>SSH</code></h2></a>
      <a class="anchor-link" href="#Service SSH"><h3>Service <code>SSH</code></h3></a>
      <a class="anchor-link" href="#SSH Client"><h3>SSH Client</h3></a>
      <a class="anchor-link" href="#Connection via SSH"><h2>Connection via <code>SSH</code></h2></a>
      <a class="anchor-link" href="#Connection without password requirement"><h2>Connection without password requirement</h2></a>
      <a class="anchor-link" href="#Using the remote terminal via SSH"><h2>Using the remote terminal via <code>SSH</code></h2></a>
      <a class="anchor-link" href="#Proxy SSH"><h2>Proxy <code>SSH</code></h2></a>
      <a class="anchor-link" href="#Remote graphical interface via SSH"><h2>Remote graphical interface via <code>SSH</code></h2></a>
      <a class="anchor-link" href="#SSH Tunnel"><h2>SSH Tunnel</h2></a>
      <a class="anchor-link" href="#Reverse connection"><h2>Reverse connection</h2></a>
      <a class="anchor-link" href="#Jump"><h2>Jump</h2></a>
      <a class="anchor-link" href="#User's SSH configuration file"><h2>User's <code>SSH</code> configuration file</h2></a>
      <a class="anchor-link" href="#Devices with Aliases"><h3>Devices with Aliases</h3></a>
      <a class="anchor-link" href="#Proxy"><h3>Proxy</h3></a>
      <a class="anchor-link" href="#SSH Tunnel"><h3>SSH Tunnel</h3></a>
      <a class="anchor-link" href="#Reverse Connection"><h3>Reverse Connection</h3></a>
      <a class="anchor-link" href="#Jump"><h3>Jump</h3></a>
      <a class="anchor-link" href="#System SSH configuration file"><h2>System <code>SSH</code> configuration file</h2></a>
      <a class="anchor-link" href="#Copying files over SSH"><h2>Copying files over <code>SSH</code></h2></a>
      <a class="anchor-link" href="#File Synchronization via SSH"><h2>File Synchronization via <code>SSH</code></h2></a>
      <a class="anchor-link" href="#Mounting Remote Folders Locally"><h2>Mounting Remote Folders Locally</h2></a>
      <a class="anchor-link" href="#Debugging the SSH Connection"><h2>Debugging the <code>SSH</code> Connection</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Disclaimer: This post has been translated to English using a machine translation model. Please, let me know if you find any mistakes.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Historical Introduction">Historical Introduction<a class="anchor-link" href="#Historical Introduction"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 26" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In the early days of the internet, the <code>telnet</code> protocol was created to enable communication between multiple computers, but it had the problem of not being encrypted, which meant that anyone who intercepted the communication could read it without any issues. That's why <code>SSH</code> (Secure Shell) was created.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="SSH Encryption">SSH Encryption<a class="anchor-link" href="#SSH Encryption"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 27" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>SSH</code> encryption system works through the public key and private key system, so that if communication is encrypted with one of the keys, it can only be decrypted by the other key.</p>
      <p>Why is there a public key and a private key? The public key is the one you give to everyone, and the private key is the one that only you should possess.</p>
      <p>So, if you want to communicate with another team via <code>SSH</code>, you first give them your public key, then you encrypt the message with your private key, and the message can only be decrypted with the public key that you have given to the other team.</p>
      <p>The same happens in reverse, if the other team wants to send you a message, they encrypt it with your public key and it can only be decrypted with the private key that only you possess.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Requirements SSH">Requirements <code>SSH</code><a class="anchor-link" href="#Requirements SSH"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 28" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Service SSH">Service <code>SSH</code><a class="anchor-link" href="#Service SSH"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 29" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To be able to use <code>SSH</code> you need to have an <code>SSH</code> service. In <code>Linux</code> it usually comes pre-installed, but if it's not the case, you can install it via</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">apt</span> <span class="n">install</span> <span class="n">openssh</span><span class="o">-</span><span class="n">server</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>During the installation process, it will ask for your location to adjust the time zone.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We then start the service</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">systemctl</span> <span class="n">enable</span> <span class="n">ssh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="SSH Client">SSH Client<a class="anchor-link" href="#SSH Client"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 30" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Once you have the service, you need a client. Although in <code>Linux</code> it usually comes installed, if not, you can install it using</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">apt</span> <span class="n">install</span> <span class="n">openssh</span><span class="o">-</span><span class="n">client</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Connection via SSH">Connection via <code>SSH</code><a class="anchor-link" href="#Connection via SSH"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 31" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To connect via <code>SSH</code> you need to enter the command <code>ssh &#x3C;user&#x3E;@&#x3C;ip&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="n">root</span><span class="o">@</span><span class="mf">172.17.0.1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'The authenticity of host &#x27;172.17.0.1 (172.17.0.1)&#x27; can&#x27;t be established.',
          'ECDSA key fingerprint is SHA256:M+qsqSC4HiYztm1ij8iDkh9KHJz+pxrTm9GTZIf2N9k.',
          'Are you sure you want to continue connecting (yes/no/[fingerprint])?',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As you can see, the first time it asks you if you want to save the <code>fingerprint</code>, this is so that if the next time you connect to the same machine (the same public key) the <code>fingerprint</code> has changed, you should be careful because there might be something dangerous, like someone impersonating that machine.</p>
      <p>If we trust, we enter <code>yes</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="n">root</span><span class="o">@</span><span class="mf">172.17.0.1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'The authenticity of host &#x27;172.17.0.1 (172.17.0.1)&#x27; can&#x27;t be established.',
          'ECDSA key fingerprint is SHA256:M+qsqSC4HiYztm1ij8iDkh9KHJz+pxrTm9GTZIf2N9k.',
          'Are you sure you want to continue connecting (yes/no/[fingerprint])? yes',
          'Warning: Permanently added &#x27;172.17.0.1&#x27; (ECDSA) to the list of known hosts.',
          'root@172.17.0.1&#x27;s password:',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Next, the machine we are connecting to asks for the password. We enter it, and we will be inside the machine.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="n">root</span><span class="o">@</span><span class="mf">172.17.0.1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'The authenticity of host &#x27;172.17.0.1 (172.17.0.1)&#x27; can&#x27;t be established.',
          'ECDSA key fingerprint is SHA256:M+qsqSC4HiYztm1ij8iDkh9KHJz+pxrTm9GTZIf2N9k.',
          'Are you sure you want to continue connecting (yes/no/[fingerprint])? yes',
          'Warning: Permanently added &#x27;172.17.0.1&#x27; (ECDSA) to the list of known hosts.',
          'root@172.17.0.1&#x27;s password:',
          'Welcome to Ubuntu 20.04.5 LTS (GNU/Linux 5.15.0-58-generic x86_64)',
          '* Documentation:  https://help.ubuntu.com',
          '* Management:     https://landscape.canonical.com',
          '* Support:        https://ubuntu.com/advantage',
          '1 device has a firmware upgrade available.',
          'Run `fwupdmgr get-upgrades` for more information.',
          '* Introducing Expanded Security Maintenance for Applications.',
          '&#x20;&#x20;&#x20;Receive updates to over 25,000 software packages with your',
          '&#x20;&#x20;&#x20;Ubuntu Pro subscription. Free for personal use.',
          '&#x20;&#x20;&#x20;&#x20;&#x20;https://ubuntu.com/pro',
          'Se pueden aplicar 0 actualizaciones de forma inmediata.',
          'Your Hardware Enablement Stack (HWE) is supported until April 2025.',
          'Last login: Thu Dec  1 16:32:23 2022 from 127.0.0.1',
          'root@172.17.0.1:~$',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Connection without password requirement">Connection without password requirement<a class="anchor-link" href="#Connection without password requirement"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 32" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we have seen, when we connect, it asks for the password of the target machine, but if it is a machine that we are going to connect to frequently, we can set it up so that it does not ask for the password every time we want to connect.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To do this, first we generate an <code>ssh</code> key using <code>ssh-keygen</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span><span class="o">-</span><span class="n">keygen</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Generating public/private rsa key pair.',
          'Enter file in which to save the key (/root/.ssh/id_rsa):',
          'Enter passphrase (empty for no passphrase):',
          'Enter same passphrase again:',
          'Your identification has been saved in /root/.ssh/id_rsa',
          'Your public key has been saved in /root/.ssh/id_rsa.pub',
          'The key fingerprint is:',
          'SHA256:4HxRXkVkcK5kNXNyzakfQ6t8a24wRGCUYz4s5KL5ZEc root@e108f6f395b3',
          'The key&#x27;s randomart image is:',
          '+---[RSA 3072]----+',
          '|          o+==@.=|',
          '|         +.= * Oo|',
          '|      . + = = + .|',
          '|     o o E * + + |',
          '|      = S . = o o|',
          '|     o + .   = o |',
          '|      + .     + .|',
          '|       .       + |',
          '|              +. |',
          '+----[SHA256]-----+',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, it first asks us where we want to save the key; if we don't enter anything, it saves it in the default path. And then it prompts for a phrase to generate the key, **if you write a phrase, you must always remember it**. Additionally, if you write a phrase, it will ask you for it every time you try to access the key, so each time we want to access the machine via <code>SSH</code>, it won't ask for the machine's password, but it will ask for this phrase. Therefore, you choose whether to not enter a phrase so that it never asks you, or to enter one and always input it.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Next, we ask the remote machine to save our key using <code>ssh-copy-id &#x3C;user&#x3E;@&#x3C;id&#x3E;:</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span><span class="o">-</span><span class="n">copy</span><span class="o">-</span><span class="nb">id</span> <span class="n">root</span><span class="o">@</span><span class="mf">172.17.0.1</span><span class="p">:</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/id_rsa.pub&quot;',
          '/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed',
          '/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys',
          'root@172.17.0.1&#x27;s password:',
          'Number of key(s) added: 1',
          'Now try logging into the machine, with:   &quot;ssh &#x27;root@172.17.0.1&#x27;&quot;',
          'and check to make sure that only the key(s) you wanted were added.',
          'root@103b6040196a:/# ssh root@172.17.0.1',
          'Welcome to Ubuntu 20.04.5 LTS (GNU/Linux 5.15.0-58-generic x86_64)',
          '* Documentation:  https://help.ubuntu.com',
          '* Management:     https://landscape.canonical.com',
          '* Support:        https://ubuntu.com/advantage',
          '4 devices have a firmware upgrade available.',
          'Run `fwupdmgr get-upgrades` for more information.',
          '58 updates can be applied immediately.',
          '41 of these updates are standard security updates.',
          'To see these additional updates run: apt list --upgradable',
          'New release &#x27;22.04.1 LTS&#x27; available.',
          'Run &#x27;do-release-upgrade&#x27; to upgrade to it.',
          'Your Hardware Enablement Stack (HWE) is supported until April 2025.',
          'Last login: Thu Feb  2 08:05:48 2023 from 172.17.0.2',
          '(base) root@172.17.0.1:~$',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Using the remote terminal via SSH">Using the remote terminal via <code>SSH</code><a class="anchor-link" href="#Using the remote terminal via SSH"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 33" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Maybe we don't need to log into the remote machine because we only need to run a single command, so we can use its terminal remotely by adding the <code>-t</code> flag to the <code>SSH</code> command, that is, through <code>ssh -t &#x3C;user&#x3E;@&#x3C;id&#x3E; &#x3C;command&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="o">-</span><span class="n">t</span> <span class="n">root</span><span class="o">@</span><span class="mf">172.17.0.1</span> <span class="n">ping</span> <span class="o">-</span><span class="n">c</span> <span class="mi">4</span> <span class="n">google</span><span class="o">.</span><span class="n">com</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'PING google.com (172.217.168.174) 56(84) bytes of data.',
          '64 bytes from mad07s10-in-f14.1e100.net (172.217.168.174): icmp_seq=1 ttl=111 time=2.94 ms',
          '64 bytes from mad07s10-in-f14.1e100.net (172.217.168.174): icmp_seq=2 ttl=111 time=2.55 ms',
          '64 bytes from mad07s10-in-f14.1e100.net (172.217.168.174): icmp_seq=3 ttl=111 time=2.78 ms',
          '64 bytes from mad07s10-in-f14.1e100.net (172.217.168.174): icmp_seq=4 ttl=111 time=2.69 ms',
          '--- google.com ping statistics ---',
          '4 packets transmitted, 4 received, 0% packet loss, time 3005ms',
          'rtt min/avg/max/mdev = 2.550/2.739/2.940/0.142 ms',
          'Connection to 172.17.0.1 closed.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As can be seen, the command is executed on the remote machine and when it finishes, the last line tells us that the connection is closed.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Proxy SSH">Proxy <code>SSH</code><a class="anchor-link" href="#Proxy SSH"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 34" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If you are browsing from an insecure location, or a place that has a proxy that doesn't allow access to certain ports, you can browse through the proxy of another machine using <code>SSH</code>. This can be done by adding the <code>-D</code> flag and the port through which you want to make the connection to the remote proxy. Since the port for <code>tcp/ip</code> is <code>9999</code>, the command could look like <code>ssh -D 9999 &#x3C;user&#x3E;@&#x3C;id&#x3E;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To make this look better, before running it I get my public IP</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">curl</span> <span class="n">ifconfig</span><span class="o">.</span><span class="n">me</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '188.127.184.59',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now I'm using the proxy of a web server that I have set up</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="o">-</span><span class="n">D</span> <span class="mi">9999</span> <span class="n">root</span><span class="o">@</span><span class="mf">194.62.99.222</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          '* Documentation:  https://help.ubuntu.com',
          '* Management:     https://landscape.canonical.com',
          '* Support:        https://ubuntu.com/advantage',
          '&#x20;&#x20;System information as of Wed Feb 22 06:08:51 AM UTC 2023',
          '&#x20;&#x20;System load:           0.02978515625',
          '&#x20;&#x20;Usage of /:            11.7% of 24.53GB',
          '&#x20;&#x20;Memory usage:          33%',
          '&#x20;&#x20;Swap usage:            0%',
          '&#x20;&#x20;Processes:             89',
          '&#x20;&#x20;Users logged in:       0',
          '&#x20;&#x20;IPv4 address for eth0: 194.62.99.222',
          '&#x20;&#x20;IPv4 address for eth1: 10.7.0.168',
          '&#x20;&#x20;IPv6 address for eth2: 2a04:3542:8000:1000:d48a:cbff:fefb:5b1',
          '0 updates can be applied immediately.',
          'The list of available updates is more than a week old.',
          'To check for new updates run: sudo apt update',
          'Last login: Wed Feb 22 06:02:35 2023 from 188.127.184.59',
          'root@server1:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Change the proxy configuration of my computer</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/proxy_ssh.webp" alt="proxy ssh">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Now I'm going to check my public IP again, but using the recently configured proxy</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">curl</span> <span class="o">-</span><span class="n">x</span> <span class="n">socks5h</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">9999</span> <span class="n">ifconfig</span><span class="o">.</span><span class="n">me</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '194.62.99.222',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that we obtain the public IP of the server</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Remote graphical interface via SSH">Remote graphical interface via <code>SSH</code><a class="anchor-link" href="#Remote graphical interface via SSH"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 35" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In Linux, the graphical interface is a server, so we can take advantage of this and run programs with graphical interfaces that are on a remote machine via <code>SSH</code>. To do this, you need to use the <code>-X</code> flag. The command would be <code>ssh -X &#x3C;user&#x3E;@&#x3C;id&#x3E;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First I log into my server and install <code>xeyes</code> using <code>sudo apt install x11-apps</code> and then I run it remotely from my computer.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="o">-</span><span class="n">X</span> <span class="n">root</span><span class="o">@</span><span class="mf">194.62.99.222</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          'Last login: Wed Feb 22 06:39:52 2023 from 188.127.184.59',
          '/usr/bin/xauth:  file /root/.Xauthority does not exist',
          'root@server1:~sudo apt install x11-apps',
          'root@server1:~#xeyes',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now on my computer the <code>xeyes</code> window is opening but it's not running on my computer.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/xeyes.webp" alt="xeyes">
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="SSH Tunnel">SSH Tunnel<a class="anchor-link" href="#SSH Tunnel"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 36" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As I mentioned, I have set up a server to which I have SSH access.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="n">root</span><span class="o">@</span><span class="mf">194.62.99.222</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          'Last login: Wed Feb 22 06:40:58 2023 from 188.127.184.59',
          'root@server1:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>And I also set up a second server from which I have access from <code>server1</code>, but I don't have access from my computer.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Next, I try to access the <code>server2</code> from my computer and we see that I cannot.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="n">root</span><span class="o">@</span><span class="mf">194.62.99.235</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'ssh: connect to host 194.62.99.235 port 22: Connection timed out',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>And then I try to access <code>server2</code> from <code>server1</code> and we see that I can.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">root</span><span class="nd">@server1</span><span class="p">:</span><span class="o">~</span><span class="c1"># ssh root@10.7.2.228</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          'Last login: Wed Feb 22 06:59:01 2023 from 10.7.0.168',
          'root@server2:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>So what we create is a tunnel from my computer to the <code>server2</code> through the <code>server1</code>, for this we use the <code>-L</code> flag. To create the tunnel, you need to specify the port on your computer where you will create the tunnel, followed by the destination <code>IP</code> of the tunnel, the port through which the tunnel will go, and finally the device that will create the tunnel. It would look like this</p>
      <div class='highlight'><pre><code class="language-bash">ssh -L &amp;ltHOST PORT&amp;gt:&amp;ltDEST IP&amp;gt:&amp;ltTUNNEL PORT&amp;gt &amp;ltTUNNEL CREATOR USER&amp;gt@&amp;ltTUNNEL CREATOR IP&amp;gt</code></pre></div>
      <p>Let's look at my example, I have <code>server1</code> with a public <code>IP</code> that we can call <code>ip_pub1</code> and to which I have access via <code>SSH</code> and a private <code>IP</code> that we can call <code>ip_priv1</code> which is within the same network as <code>server2</code>. And I have <code>server2</code> with a public <code>IP</code> that we can call <code>ip_pub2</code> to which I do not have <code>SSH</code> access and a private <code>IP</code> that we can call <code>ip_priv2</code> within the same network as <code>server1</code>.</p>
      <p>First I create the tunnel</p>
      <div class='highlight'><pre><code class="language-bash">ssh -L host_port:ip_priv2:22 root@ip_pub1</code></pre></div>
      <p>I have created a tunnel to the private <code>IP</code> of <code>server2</code> through the public <code>IP</code> of <code>server1</code></p>
      <p>Lastly, to connect to <code>server2</code>, I do it through the <code>localhost</code> and the host port that I have declared in the tunnel.</p>
      <div class='highlight'><pre><code class="language-bash">ssh -p 2020 root@localhost</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's see it in reality, the <code>IP</code>s of my servers are</p>
      <ul>
        <li><code>server1</code>:</li>
        <li><code>Public IP</code>: <code>194.62.99.222</code></li>
        <li><code>IP</code> private: <code>10.7.0.168</code></li>
        <li><code>server2</code>:* <code>Public IP</code>: <code>194.62.99.235</code></li>
        <li><code>Private IP</code>: <code>10.7.2.228</code></li>
      </ul>
      <p>First I create the tunnel</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="o">-</span><span class="n">L</span> <span class="mi">2020</span><span class="p">:</span><span class="mf">10.7.2.228</span><span class="p">:</span><span class="mi">22</span> <span class="n">root</span><span class="o">@</span><span class="mf">194.62.99.222</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          '* Documentation:  https://help.ubuntu.com',
          '* Management:     https://landscape.canonical.com',
          '* Support:        https://ubuntu.com/advantage',
          '&#x20;&#x20;System information as of Wed Feb 22 11:13:39 AM UTC 2023',
          '&#x20;&#x20;System load:           0.0',
          '&#x20;&#x20;Usage of /:            13.3% of 24.53GB',
          '&#x20;&#x20;Memory usage:          36%',
          '&#x20;&#x20;Swap usage:            0%',
          '&#x20;&#x20;Processes:             91',
          '&#x20;&#x20;Users logged in:       1',
          '&#x20;&#x20;IPv4 address for eth0: 194.62.99.222',
          '&#x20;&#x20;IPv4 address for eth1: 10.7.0.168',
          '&#x20;&#x20;IPv6 address for eth2: 2a04:3542:8000:1000:d48a:cbff:fefb:5b1',
          '101 updates can be applied immediately.',
          '60 of these updates are standard security updates.',
          'To see these additional updates run: apt list --upgradable',
          'Last login: Wed Feb 22 09:29:52 2023 from 188.127.184.59',
          ']0;root@server1: ~root@server1:~# ^C',
          ']0;root@server1: ~root@server1:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>With the tunnel created, I can now connect to <code>server2</code> from my computer.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="o">-</span><span class="n">p</span> <span class="mi">2020</span> <span class="n">root</span><span class="nd">@localhost</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          '* Documentation:  https://help.ubuntu.com',
          '* Management:     https://landscape.canonical.com',
          '* Support:        https://ubuntu.com/advantage',
          '&#x20;&#x20;System information as of Wed Feb 22 11:14:15 AM UTC 2023',
          '&#x20;&#x20;System load:           0.0',
          '&#x20;&#x20;Usage of /:            13.3% of 24.53GB',
          '&#x20;&#x20;Memory usage:          33%',
          '&#x20;&#x20;Swap usage:            0%',
          '&#x20;&#x20;Processes:             90',
          '&#x20;&#x20;Users logged in:       0',
          '&#x20;&#x20;IPv4 address for eth0: 194.62.99.235',
          '&#x20;&#x20;IPv4 address for eth1: 10.7.2.228',
          '&#x20;&#x20;IPv6 address for eth2: 2a04:3542:8000:1000:d48a:cbff:fefb:7f47',
          '* Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s',
          '&#x20;&#x20;&#x20;just raised the bar for easy, resilient and secure K8s cluster deployment.',
          '&#x20;&#x20;&#x20;https://ubuntu.com/engage/secure-kubernetes-at-the-edge',
          '101 updates can be applied immediately.',
          '60 of these updates are standard security updates.',
          'To see these additional updates run: apt list --upgradable',
          'Last login: Wed Feb 22 11:14:16 2023 from 10.7.0.168',
          ']0;root@server2: ~root@server2:~# ^C',
          ']0;root@server2: ~root@server2:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Reverse connection">Reverse connection<a class="anchor-link" href="#Reverse connection"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 37" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's assume I want to connect to <code>server2</code>, but now I can't establish a tunnel from <code>server1</code> for whatever reason. What we can do is create a reverse connection from another server.</p>
      <p>Suppose I have a third server, called <code>server3</code>, which can be accessed via <code>SSH</code> from anywhere, meaning both I from my computer and the <code>server2</code> have access. Therefore, if we can physically access the <code>server2</code>, we can establish a reverse connection from the <code>server2</code> to the <code>server3</code>.</p>
      <div class='highlight'><pre><code class="language-text">ssh -R &amp;ltserver3port&amp;gt:localhost:22 root@&amp;ltIPserver3&amp;gt</code></pre></div>
      <p>With this, what I have done is enable a connection from <code>server3</code> to <code>server2</code> (which was not possible before), through the <code>localhost</code> and port <code>server3port</code> of <code>server3</code></p>
      <p>Now from my computer I can connect to the <code>server3</code> and from the <code>server3</code> I can connect to the <code>server2</code> through</p>
      <div class='highlight'><pre><code class="language-bash">ssh -p &amp;ltserver3port&amp;gt root@localhost</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's see it with the data from my servers</p>
      <ul>
        <li><code>server2</code>:</li>
        <li><code>Public IP</code>: <code>194.62.99.235</code>* <code>server3</code>:</li>
        <li><code>Public IP</code>: <code>194.62.96.236</code></li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First I make the reverse connection from <code>server2</code> to <code>server3</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">root</span><span class="nd">@server2</span><span class="p">:</span><span class="o">~</span><span class="c1"># ssh -R 2020:localhost:22 root@194.62.96.236</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          'Last login: Wed Feb 22 15:25:58 2023 from 188.127.184.59',
          'root@server3:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now I connect to the <code>server3</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="n">root</span><span class="o">@</span><span class="mf">194.62.96.236</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          'Last login: Wed Feb 22 15:12:19 2023 from 188.127.184.59',
          'root@server3:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>And now that I'm on the <code>server3</code>, I connect to the <code>server2</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">root</span><span class="nd">@server3</span><span class="p">:</span><span class="o">~</span><span class="c1"># ssh -p 2020 root@localhost</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          'Last login: Wed Feb 22 15:12:07 2023 from 188.127.184.59',
          'root@server2:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Achieved! Through my computer I cannot connect directly to the <code>server2</code>, but by connecting to the <code>server3</code> I was able to access the <code>server2</code> thanks to the reverse connection I had made from the <code>server2</code> to the <code>server3</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Jump">Jump<a class="anchor-link" href="#Jump"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 38" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Finally, another way to access <code>server2</code> is by first entering <code>server1</code> and then, from <code>server1</code>, accessing <code>server2</code>. However, this can be a bit cumbersome because you first need to make an <code>SSH</code> connection to <code>server1</code> and then another one to <code>server2</code>. So, to do it all in one step, we can use the <code>-J</code> (<code>jump</code>) flag, which would look like <code>ssh -J server1 server2</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Summary, first we would do <code>ssh root@194.62.99.222</code> and then <code>ssh root@10.7.2.228</code> (since inside <code>server1</code> we connect to <code>server2</code> via the private <code>IP</code>).</p>
      <p>So we could do it all in one go with <code>ssh -J root@194.62.99.222 root@10.7.2.228</code></p>
      <p>Let's give it a try</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="o">-</span><span class="n">J</span> <span class="n">root</span><span class="o">@</span><span class="mf">194.62.99.222</span> <span class="n">root</span><span class="o">@</span><span class="mf">10.7.2.228</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          'Last login: Fri Feb 24 06:46:11 2023 from 10.7.0.168',
          'root@server2:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We have been able to make the jumps!</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="User's SSH configuration file">User's <code>SSH</code> configuration file<a class="anchor-link" href="#User's SSH configuration file"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 39" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Devices with Aliases">Devices with Aliases<a class="anchor-link" href="#Devices with Aliases"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 40" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In every computer there is a configuration file for <code>SSH</code> which usually resides in the user's folder.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cat</span> <span class="o">~/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">config</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '# Read more about SSH config files: https://linux.die.net/man/5/ssh_config',
          'Host 192.168.1.138',
          '&#x20;&#x20;&#x20;&#x20;HostName 192.168.1.138',
          '&#x20;&#x20;&#x20;&#x20;User maximo.fernandez',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In this file, I have stored the user credentials and IP of some devices that I usually connect to so I don‚Äôt have to fill everything out myself. Let‚Äôs take a look at it with the servers I have.</p>
      <p>My server <code>server1</code> has the user <code>root</code> and the IP <code>194.62.99.222</code>, so I add it to the list.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">echo</span> <span class="s2">&quot;Host server1</span><span class="se">\n</span><span class="s2">    HostName 194.62.99.222</span><span class="se">\n</span><span class="s2">    User root&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">~/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">config</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's take another look at the configuration file.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cat</span> <span class="o">~/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">config</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '# Read more about SSH config files: https://linux.die.net/man/5/ssh_config',
          'Host 192.168.1.138',
          '&#x20;&#x20;&#x20;&#x20;HostName 192.168.1.138',
          '&#x20;&#x20;&#x20;&#x20;User maximo.fernandez',
          'Host server1',
          '&#x20;&#x20;&#x20;&#x20;HostName 194.62.99.222',
          '&#x20;&#x20;&#x20;&#x20;User root',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now that we have added it to connect to <code>server1</code>, we only need to do <code>ssh server1</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="n">server1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          'Last login: Fri Feb 24 05:18:59 2023 from 188.127.184.59',
          'root@server1:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Proxy">Proxy<a class="anchor-link" href="#Proxy"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 41" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we have seen, by adding the flag <code>-D &#x3C;port&#x3E;</code> we could change the proxy. To save this in the configuration file, we just need to add the line <code>DynamicForward &#x3C;port&#x3E;</code> to the host we are saving.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Repeating the previous example where we used <code>server1</code> as a <code>TCP/IP</code> port (<code>9999</code>) proxy, the configuration file would look like this</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-text">Host proxyServer1<br>HostName 194.62.99.222<br>User root<br>DynamicForward 9999</code></pre></div>
            </section>
      <p>We add it</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">echo</span> <span class="s2">&quot;Host proxyServer1</span><span class="se">\n</span><span class="s2">    HostName 194.62.99.222</span><span class="se">\n</span><span class="s2">    User root</span><span class="se">\n</span><span class="s2">    DynamicForward 9999&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">~/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">config</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's see how the configuration file looks like</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cat</span> <span class="o">~/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">config</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '# Read more about SSH config files: https://linux.die.net/man/5/ssh_config',
          'Host 192.168.1.138',
          '&#x20;&#x20;&#x20;&#x20;HostName 192.168.1.138',
          '&#x20;&#x20;&#x20;&#x20;User maximo.fernandez',
          'Host server1',
          '&#x20;&#x20;&#x20;&#x20;HostName 194.62.99.222',
          '&#x20;&#x20;&#x20;&#x20;User root',
          'Host proxyServer1',
          '&#x20;&#x20;&#x20;&#x20;HostName 194.62.99.222',
          '&#x20;&#x20;&#x20;&#x20;User root',
          '&#x20;&#x20;&#x20;&#x20;DynamicForward 9999',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>I get my <code>IP</code> address</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">curl</span> <span class="n">ifconfig</span><span class="o">.</span><span class="n">me</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '188.127.184.59',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>I connect to the proxy server</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="n">proxyServer1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          'Last login: Fri Feb 24 05:42:32 2023 from 188.127.184.59',
          'root@server1:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Change the proxy configuration of my computer</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/proxy_ssh.webp" alt="proxy ssh">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>I check my public <code>IP</code> again, but using the recently configured proxy</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">curl</span> <span class="o">-</span><span class="n">x</span> <span class="n">socks5h</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">9999</span> <span class="n">ifconfig</span><span class="o">.</span><span class="n">me</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '194.62.99.222',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that we obtain the public IP of the server</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="SSH Tunnel">SSH Tunnel<a class="anchor-link" href="#SSH Tunnel"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 42" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If I want to create a tunnel to <code>server2</code> through <code>server1</code> as before, we used to do <code>ssh &#x3C;HOST PORT&#x3E;:&#x3C;DEST IP&#x3E;:&#x3C;TUNNEL PORT&#x3E; &#x3C;TUNNEL CREATOR USER&#x3E;@&#x3C;TUNNEL CREATOR IP&#x3E;</code>, now we have to add the line</p>
      <div class='highlight'><pre><code class="language-bash">LocalForward &amp;ltlocalhost&amp;gt:&amp;ltHOST PORT&amp;gt &amp;ltDEST IP&amp;gt:&amp;ltTUNNEL PORT&amp;gt</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>That is, the configuration file would be</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-text">Host tunnelToServer2<br>HostName 194.62.99.222<br>User root<br>LocalForward 127.0.0.1:2020 10.7.2.228:22</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>But that doesn't quite make sense, let's look at it with something concrete.</p>
      <ul>
        <li><code>server1</code>:</li>
        <li><code>Public IP</code>: <code>194.62.99.222</code></li>
        <li><code>IP</code> private: <code>10.7.0.168</code></li>
        <li><code>server2</code>:</li>
        <li><code>Public IP</code>: <code>194.62.99.235</code></li>
        <li><code>IP</code> private: <code>10.7.2.228</code></li>
      </ul>
      <p>Before, the command was</p>
      <div class='highlight'><pre><code class="language-bash">ssh -L 2020:10.7.2.228:22 root@194.62.99.222</code></pre></div>
      <p>So the configuration file should look like this:</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-text">Host tunnelToServer2<br>HostName 194.62.99.222<br>User root<br>LocalForward 127.0.0.1:2020 10.7.2.228:22</code></pre></div>
            </section>
      <p>Let's see if it works</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We add the new configuration</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">echo</span> <span class="s2">&quot;Host tunelToServer2</span><span class="se">\n</span><span class="s2">    HostName 194.62.99.222</span><span class="se">\n</span><span class="s2">    User root</span><span class="se">\n</span><span class="s2">    LocalForward 127.0.0.1:2020 10.7.2.228:22&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">~/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">config</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's see how the configuration file looks like</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cat</span> <span class="o">~/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">config</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '# Read more about SSH config files: https://linux.die.net/man/5/ssh_config',
          'Host 192.168.1.138',
          '&#x20;&#x20;&#x20;&#x20;HostName 192.168.1.138',
          '&#x20;&#x20;&#x20;&#x20;User maximo.fernandez',
          'Host server1',
          '&#x20;&#x20;&#x20;&#x20;HostName 194.62.99.222',
          '&#x20;&#x20;&#x20;&#x20;User root',
          'Host proxyServer1',
          '&#x20;&#x20;&#x20;&#x20;HostName 194.62.99.222',
          '&#x20;&#x20;&#x20;&#x20;User root',
          '&#x20;&#x20;&#x20;&#x20;DynamicForward 9999',
          'Host tunelToServer2',
          '&#x20;&#x20;&#x20;&#x20;HostName 194.62.99.222',
          '&#x20;&#x20;&#x20;&#x20;User root',
          '&#x20;&#x20;&#x20;&#x20;LocalForward 127.0.0.1:2020 10.7.2.228:22',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We create the tunnel</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="n">tunelToServer2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          'Last login: Fri Feb 24 06:02:20 2023 from 188.127.184.59',
          'root@server1:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we try to connect to the <code>server2</code> from my computer.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="o">-</span><span class="n">p</span> <span class="mi">2020</span> <span class="n">root</span><span class="nd">@localhost</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          'Last login: Fri Feb 24 06:02:36 2023 from 10.7.0.168',
          'root@server2:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Got it! But we can make everything a bit cleaner, we can add this last connection to the configuration file.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">echo</span> <span class="s2">&quot;Host server2ByTunel</span><span class="se">\n</span><span class="s2">    HostName localhost</span><span class="se">\n</span><span class="s2">    User root</span><span class="se">\n</span><span class="s2">    Port 2020&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">~/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">config</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's see how the configuration file looks like</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cat</span> <span class="o">~/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">config</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '# Read more about SSH config files: https://linux.die.net/man/5/ssh_config',
          'Host 192.168.1.138',
          '&#x20;&#x20;&#x20;&#x20;HostName 192.168.1.138',
          '&#x20;&#x20;&#x20;&#x20;User maximo.fernandez',
          'Host server1',
          '&#x20;&#x20;&#x20;&#x20;HostName 194.62.99.222',
          '&#x20;&#x20;&#x20;&#x20;User root',
          'Host proxyServer1',
          '&#x20;&#x20;&#x20;&#x20;HostName 194.62.99.222',
          '&#x20;&#x20;&#x20;&#x20;User root',
          '&#x20;&#x20;&#x20;&#x20;DynamicForward 9999',
          'Host tunelToServer2',
          '&#x20;&#x20;&#x20;&#x20;HostName 194.62.99.222',
          '&#x20;&#x20;&#x20;&#x20;User root',
          '&#x20;&#x20;&#x20;&#x20;LocalForward 127.0.0.1:2020 10.7.2.228:22',
          'Host server2ByTunel',
          '&#x20;&#x20;&#x20;&#x20;HostName localhost',
          '&#x20;&#x20;&#x20;&#x20;User root',
          '&#x20;&#x20;&#x20;&#x20;Port 2020',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we connect back to <code>server2</code> from my computer, through the tunnel, but with the last configuration we just saved.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="n">server2ByTunel</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          'Last login: Fri Feb 24 06:13:33 2023 from 10.7.0.168',
          'root@server2:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In summary, with everything we have done, we can create the tunnel to <code>server2</code> with the command <code>ssh tunelToServer2</code> and then connect to <code>server2</code> with the command <code>ssh server2ByTunel</code></p>
      <p>Amazing!</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Reverse Connection">Reverse Connection<a class="anchor-link" href="#Reverse Connection"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 43" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We remember that our problem now was that we couldn't connect to <code>server2</code> through the tunnel of <code>server1</code>. So, by creating a reverse connection from <code>server2</code> (we have someone on <code>server2</code> who can make that reverse connection, or we set it up ourselves before leaving) to a <code>server3</code>, I can connect from my computer to <code>server3</code> and then connect to <code>server2</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First, we need to make the reverse connection from <code>server2</code> to <code>server3</code>. We could do this with a command.</p>
      <div class='highlight'><pre><code class="language-bash">ssh -R &amp;ltserver3port&amp;gt:localhost:22 root@&amp;ltIPserver3&amp;gt</code></pre></div>
      <p>Or save the connection in the configuration file by adding</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-text">Host reverseToServer3<br>HostName &amp;ltIPserver3&amp;gt<br>User root<br>RemoteForward &amp;ltserver3port&amp;gt localhost:22</code></pre></div>
            </section>
      <p>And make the inverse connection through</p>
      <div class='highlight'><pre><code class="language-bash">ssh reverseToServer3</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's look at it with concrete data.</p>
      <ul>
        <li><code>server2</code>:</li>
        <li><code>Public IP</code>: <code>194.62.99.235</code></li>
        <li><code>server3</code>:</li>
        <li><code>Public IP</code>: <code>194.62.96.236</code></li>
      </ul>
      <p>To make the reverse connection, you would have to use the command</p>
      <div class='highlight'><pre><code class="language-bash">ssh -R 2020:localhost:22 root@194.62.96.236</code></pre></div>
      <p>or save the following configuration</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">Host reverseToServer3<br>HostName 194.62.96.236User root<br>RemoteForward 2020 localhost:22</code></pre></div>
            </section>
      <p>And connect through</p>
      <div class='highlight'><pre><code class="language-bash">ssh reverseToServer3</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>So I save the configuration on server 2 and make the connection</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">root</span><span class="nd">@server2</span><span class="p">:</span><span class="o">~</span><span class="c1"># echo &quot;Host reverseToServer3\n    HostName 194.62.96.236\n    User root\n    RemoteForward 2020 localhost:22&quot; &amp;gt;&amp;gt; ~/.ssh/config</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's check if it has been saved properly</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">root</span><span class="nd">@server2</span><span class="p">:</span><span class="o">~</span><span class="c1"># cat .ssh/config</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Host reverseToServer3',
          '&#x20;&#x20;&#x20;&#x20;HostName 194.62.96.236',
          '&#x20;&#x20;&#x20;&#x20;User root',
          '&#x20;&#x20;&#x20;&#x20;RemoteForward 2020 localhost:22',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>I make the reverse connection</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">root</span><span class="nd">@server2</span><span class="p">:</span><span class="o">~</span><span class="c1"># ssh reverseToServer3 </span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          'Last login: Wed Feb 22 15:26:18 2023 from 194.62.99.235',
          'root@server3:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Jump">Jump<a class="anchor-link" href="#Jump"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 44" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we said, we made jumps using the <code>-J</code> flag, so with the command <code>ssh -J root@194.62.99.222 root@10.7.2.228</code> we could connect to <code>server2</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To configure the configuration file, there are two options</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The first is that since we already have <code>server1</code> saved in the configuration file, we only need to add <code>server2</code>.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">Host server2<br>HostName 10.7.2.228<br>User root</code></pre></div>
            </section>
      <p>And then we could connect via</p>
      <div class='highlight'><pre><code class="language-bash">ssh -J server1 server2</code></pre></div>
      <p>Let's test it out</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">echo</span> <span class="s2">&quot;Host server2</span><span class="se">\n</span><span class="s2">    HostName 10.7.2.228</span><span class="se">\n</span><span class="s2">    User root</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">~/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">config</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see the configuration file</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cat</span> <span class="o">~/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">config</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '# Read more about SSH config files: https://linux.die.net/man/5/ssh_config',
          'Host 192.168.1.138',
          '&#x20;&#x20;&#x20;&#x20;HostName 192.168.1.138',
          '&#x20;&#x20;&#x20;&#x20;User maximo.fernandez',
          'Host server1',
          '&#x20;&#x20;&#x20;&#x20;HostName 194.62.99.222',
          '&#x20;&#x20;&#x20;&#x20;User root',
          'Host proxyServer1',
          '&#x20;&#x20;&#x20;&#x20;HostName 194.62.99.222',
          '&#x20;&#x20;&#x20;&#x20;User root',
          '&#x20;&#x20;&#x20;&#x20;DynamicForward 9999',
          'Host tunelToServer2',
          '&#x20;&#x20;&#x20;&#x20;HostName 194.62.99.222',
          '&#x20;&#x20;&#x20;&#x20;User root',
          '&#x20;&#x20;&#x20;&#x20;LocalForward 127.0.0.1:2020 10.7.2.228:22',
          'Host server2ByTunel',
          '&#x20;&#x20;&#x20;&#x20;HostName localhost',
          '&#x20;&#x20;&#x20;&#x20;User root',
          '&#x20;&#x20;&#x20;&#x20;Port 2020',
          'Host server2',
          '&#x20;&#x20;&#x20;&#x20;HostName 10.7.2.228',
          '&#x20;&#x20;&#x20;&#x20;User root',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we connect through the jumps</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="o">-</span><span class="n">J</span> <span class="n">server1</span> <span class="n">server2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          'Last login: Fri Feb 24 12:05:16 2023 from 10.7.0.168',
          'root@server2:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>This has been the first option: to save each server and set the jumps; but a second option is to save all the jumps in a single configuration, which would look like this</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">Host server2jumping<br>HostName 10.7.2.228<br>User root<br>ProxyJump root@194.62.99.222</code></pre></div>
            </section>
      <p>And it would only be left to connect via</p>
      <div class='highlight'><pre><code class="language-text">ssh server2jumping</code></pre></div>
      <p>Let's give it a try</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">echo</span> <span class="s2">&quot;Host server2jumping</span><span class="se">\n</span><span class="s2">    HostName 10.7.2.228</span><span class="se">\n</span><span class="s2">    User root</span><span class="se">\n</span><span class="s2">    ProxyJump root@194.62.99.222&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">~/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">config</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's take a look at the configuration file</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cat</span> <span class="o">~/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">config</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '# Read more about SSH config files: https://linux.die.net/man/5/ssh_config',
          'Host 192.168.1.138',
          '&#x20;&#x20;&#x20;&#x20;HostName 192.168.1.138',
          '&#x20;&#x20;&#x20;&#x20;User maximo.fernandez',
          'Host server1',
          '&#x20;&#x20;&#x20;&#x20;HostName 194.62.99.222',
          '&#x20;&#x20;&#x20;&#x20;User root',
          'Host proxyServer1',
          '&#x20;&#x20;&#x20;&#x20;HostName 194.62.99.222',
          '&#x20;&#x20;&#x20;&#x20;User root',
          '&#x20;&#x20;&#x20;&#x20;DynamicForward 9999',
          'Host tunelToServer2',
          '&#x20;&#x20;&#x20;&#x20;HostName 194.62.99.222',
          '&#x20;&#x20;&#x20;&#x20;User root',
          '&#x20;&#x20;&#x20;&#x20;LocalForward 127.0.0.1:2020 10.7.2.228:22',
          'Host server2ByTunel',
          '&#x20;&#x20;&#x20;&#x20;HostName localhost',
          '&#x20;&#x20;&#x20;&#x20;User root',
          '&#x20;&#x20;&#x20;&#x20;Port 2020',
          'Host server2',
          '&#x20;&#x20;&#x20;&#x20;HostName 10.7.2.228',
          '&#x20;&#x20;&#x20;&#x20;User root',
          'Host server2jumping',
          '&#x20;&#x20;&#x20;&#x20;HostName 10.7.2.228',
          '&#x20;&#x20;&#x20;&#x20;User root',
          '&#x20;&#x20;&#x20;&#x20;ProxyJump root@194.62.99.222',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we try to connect</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="n">server2jumping</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          'Last login: Fri Feb 24 12:06:22 2023 from 10.7.0.168',
          'root@server2:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="System SSH configuration file">System <code>SSH</code> configuration file<a class="anchor-link" href="#System SSH configuration file"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 45" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We previously looked at the user's <code>SSH</code> configuration file, where we store settings for machines we want to connect to via <code>SSH</code>. However, there is another <code>SSH</code> configuration file, but in this case it is for the system, located at <code>/etc/ssh/ssh_config</code>. Let's take a look at it.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cat</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">ssh</span><span class="o">/</span><span class="n">sshd_config</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '#	$OpenBSD: sshd_config,v 1.103 2018/04/09 20:41:22 tj Exp $',
          '# This is the sshd server system-wide configuration file.  See',
          '# sshd_config(5) for more information.',
          '# This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin',
          '# The strategy used for options in the default sshd_config shipped with',
          '# OpenSSH is to specify options with their default value where',
          '# possible, but leave them commented.  Uncommented options override the',
          '# default value.',
          'Include /etc/ssh/sshd_config.d/*.conf',
          '#Port 22',
          '#AddressFamily any',
          '#ListenAddress 0.0.0.0',
          '#ListenAddress ::',
          '#HostKey /etc/ssh/ssh_host_rsa_key',
          '#HostKey /etc/ssh/ssh_host_ecdsa_key',
          '#HostKey /etc/ssh/ssh_host_ed25519_key',
          '# Ciphers and keying',
          '#RekeyLimit default none',
          '# Logging',
          '#SyslogFacility AUTH',
          '#LogLevel INFO',
          '# Authentication:',
          '#LoginGraceTime 2m',
          '#PermitRootLogin prohibit-password',
          '#StrictModes yes',
          '#MaxAuthTries 6',
          '#MaxSessions 10',
          '#PubkeyAuthentication yes',
          '# Expect .ssh/authorized_keys2 to be disregarded by default in future.',
          '#AuthorizedKeysFile	.ssh/authorized_keys .ssh/authorized_keys2',
          '#AuthorizedPrincipalsFile none',
          '#AuthorizedKeysCommand none',
          '#AuthorizedKeysCommandUser nobody',
          '# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts',
          '#HostbasedAuthentication no',
          '# Change to yes if you don&#x27;t trust ~/.ssh/known_hosts for',
          '# HostbasedAuthentication',
          '#IgnoreUserKnownHosts no',
          '# Don&#x27;t read the user&#x27;s ~/.rhosts and ~/.shosts files',
          '#IgnoreRhosts yes',
          '# To disable tunneled clear text passwords, change to no here!',
          '#PasswordAuthentication yes',
          '#PermitEmptyPasswords no',
          '# Change to yes to enable challenge-response passwords (beware issues with',
          '# some PAM modules and threads)',
          'ChallengeResponseAuthentication no',
          '# Kerberos options',
          '#KerberosAuthentication no',
          '#KerberosOrLocalPasswd yes',
          '#KerberosTicketCleanup yes',
          '#KerberosGetAFSToken no',
          '# GSSAPI options',
          '#GSSAPIAuthentication no',
          '#GSSAPICleanupCredentials yes',
          '#GSSAPIStrictAcceptorCheck yes',
          '#GSSAPIKeyExchange no',
          '# Set this to &#x27;yes&#x27; to enable PAM authentication, account processing,',
          '# and session processing. If this is enabled, PAM authentication will',
          '# be allowed through the ChallengeResponseAuthentication and',
          '# PasswordAuthentication.  Depending on your PAM configuration,',
          '# PAM authentication via ChallengeResponseAuthentication may bypass',
          '# the setting of &quot;PermitRootLogin without-password&quot;.',
          '# If you just want the PAM account and session checks to run without',
          '# PAM authentication, then enable this but set PasswordAuthentication',
          '# and ChallengeResponseAuthentication to &#x27;no&#x27;.',
          'UsePAM yes',
          '#AllowAgentForwarding yes',
          '#AllowTcpForwarding yes',
          '#GatewayPorts no',
          'X11Forwarding yes',
          '#X11DisplayOffset 10',
          '#X11UseLocalhost yes',
          '#PermitTTY yes',
          'PrintMotd no',
          '#PrintLastLog yes',
          '#TCPKeepAlive yes',
          '#PermitUserEnvironment no',
          '#Compression delayed',
          '#ClientAliveInterval 0',
          '#ClientAliveCountMax 3',
          '#UseDNS no',
          '#PidFile /var/run/sshd.pid',
          '#MaxStartups 10:30:100',
          '#PermitTunnel no',
          '#ChrootDirectory none',
          '#VersionAddendum none',
          '# no default banner path',
          '#Banner none',
          '# Allow client to pass locale environment variables',
          'AcceptEnv LANG LC_*',
          '# override default of no subsystems',
          'Subsystem	sftp	/usr/lib/openssh/sftp-server',
          '# Example of overriding settings on a per-user basis',
          '#Match User anoncvs',
          '#	X11Forwarding no',
          '#	AllowTcpForwarding no',
          '#	PermitTTY no',
          '#	ForceCommand cvs server',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>With this file, we can change the configuration of how <code>SSH</code> works on our computer. For example, we can see a commented line that says</p>
      <div class='highlight'><pre><code class="language-bash">#Port 22</code></pre></div>
      <p>If we uncomment it and change the <code>SSH</code> port number, SSH will no longer use port 22, which is its default port, and will instead use the port number specified there.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Copying files over SSH">Copying files over <code>SSH</code><a class="anchor-link" href="#Copying files over SSH"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 46" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can copy files via <code>SSH</code> using the <code>scp</code> (secure copy) command. For this, the syntax is</p>
      <div class='highlight'><pre><code class="language-bash">scp &amp;ltpath local file&amp;gt &amp;ltuser&amp;gt@&amp;ltIP&amp;gt:&amp;ltpath to save&amp;gt</code></pre></div>
      <p>o</p>
      <div class='highlight'><pre><code class="language-bash">scp &amp;ltuser&amp;gt@&amp;ltip&amp;gt:&amp;ltpath to remote file&amp;gt &amp;ltpath to save&amp;gt</code></pre></div>
      <p>The first way copies a file from our computer to another, and the second way copies a file from another to ours.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>For example, let's do a <code>ls</code> of <code>server1</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="o">-</span><span class="n">t</span> <span class="n">server1</span> <span class="s2">&quot;ls&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'snap',
          'Connection to 194.62.99.222 closed.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's see now what we have locally that we can pass on</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2021-02-11-Introduccion-a-Python.ipynb         html_files',
          '2021-04-23-Calculo-matricial-con-Numpy.ipynb   html.ipynb',
          '2021-06-15-Manejo-de-datos-con-Pandas.ipynb    introduccion_python',
          '2022-09-12-Introduccion-a-la-terminal.ipynb    mi_paquete_de_python',
          '2023-01-22-Docker.ipynb		        movies.csv',
          '2023-02-01-Bash-scripting.ipynb	        movies.dat',
          '2023-02-04-Blip-2.ipynb		        notebooks_translated',
          '2023-XX-XX-SSH.ipynb			        __pycache__',
          'california_housing_train.csv		        scripts_bash',
          'command-line-cheat-sheet.pdf		        ssh.ipynb',
          'CSS.ipynb				        test.ipynb',
          '&#x27;Expresiones regulares.ipynb&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's send the <code>html.ipynb</code> file to the server since it takes up little space.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">scp</span> <span class="n">html</span><span class="o">.</span><span class="n">ipynb</span> <span class="n">server1</span><span class="p">:</span><span class="o">/</span><span class="n">root</span><span class="o">/</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'html.ipynb                                    100%   14KB 229.0KB/s   00:00',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's check what's inside <code>server1</code> again.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="o">-</span><span class="n">t</span> <span class="n">server1</span> <span class="s2">&quot;ls&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'html.ipynb  snap',
          'Connection to 194.62.99.222 closed.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>It has been copied</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="File Synchronization via SSH">File Synchronization via <code>SSH</code><a class="anchor-link" href="#File Synchronization via SSH"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 47" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The downside of the <code>scp</code> command is that if something happens during the copy process and the file doesn't finish copying, when you try again, you have to start from scratch. This is especially a problem with very large files.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To solve this, you can use <code>rsync</code>, the syntax is</p>
      <div class='highlight'><pre><code class="language-bash">rsync --partial --progress --rsh=ssh &lt;local file path&gt; &lt;user&gt;@&lt;IP&gt;:&lt;path to save&gt;</code></pre></div>
      <p>o</p>
      <div class='highlight'><pre><code class="language-bash">rsync --partial --progress --rsh=ssh &lt;user&gt;@&lt;ip&gt;:&lt;path to remote file&gt; &lt;path to save&gt;</code></pre></div>
      <p>Just like before, the first method copies a file from our computer to another and the second from another to ours. The <code>--partial</code> flag is to indicate that partially copied files should be saved, meaning that if the copy stops before it finishes, what has been copied will remain. The <code>--progress</code> flag is to indicate that it should show the progress of the copy. The <code>--rsh=ssh</code> flag is to indicate that file transfer should be done via <code>SSH</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We pass a file</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">rsync</span> <span class="o">--</span><span class="n">partial</span> <span class="o">--</span><span class="n">progress</span> <span class="o">-</span><span class="n">rsh</span><span class="o">=</span><span class="n">ssh</span> <span class="mi">2021</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">15</span><span class="o">-</span><span class="n">Manejo</span><span class="o">-</span><span class="n">de</span><span class="o">-</span><span class="n">datos</span><span class="o">-</span><span class="n">con</span><span class="o">-</span><span class="n">Pandas</span><span class="o">.</span><span class="n">ipynb</span>  <span class="n">server1</span><span class="p">:</span><span class="o">/</span><span class="n">root</span><span class="o">/</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'sending incremental file list',
          '2021-06-15-Manejo-de-datos-con-Pandas.ipynb',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;608.34K 100%  197.78MB/s    0:00:00 (xfr#1, to-chk=0/1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>And we see if it has been copied</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="o">-</span><span class="n">t</span> <span class="n">server1</span> <span class="s2">&quot;ls&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2021-06-15-Manejo-de-datos-con-Pandas.ipynb  html.ipynb  snap',
          'Connection to 194.62.99.222 closed.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Mounting Remote Folders Locally">Mounting Remote Folders Locally<a class="anchor-link" href="#Mounting Remote Folders Locally"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 48" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In the case that we want to have a folder from another machine as if it were on our computer, we need to use <code>sshfs</code></p>
      <p>First, it is necessary to install it via</p>
      <div class='highlight'><pre><code class="language-bash">sudo apt install sshfs</code></pre></div>
      <p>And once it's installed, it's used with the syntax</p>
      <div class='highlight'><pre><code class="language-bash">sshfs &amp;ltuser&amp;gt@&amp;ltip&amp;gt:&amp;ltremote path&amp;gt &amp;ltlocal path to mount&amp;gt</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We are going to mount the <code>/root</code> folder of <code>server1</code>, but first we need to create a folder where we will mount it.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">server1folder</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that, within the folder we have mounted, there is nothing</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ls</span> <span class="n">server1folder</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we mount the server folder</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!!</span><span class="n">sshfs</span> <span class="n">server1</span><span class="p">:</span><span class="o">/</span><span class="n">root</span><span class="o">/</span> <span class="n">server1folder</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's check what's inside again</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ls</span> <span class="n">server1folder</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2021-06-15-Manejo-de-datos-con-Pandas.ipynb  html.ipynb  snap',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>When we no longer want to have the folder mounted, we can unmount it using <code>fusermount -u server1folder</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!!</span><span class="n">fusermount</span> <span class="o">-</span><span class="n">u</span> <span class="n">server1folder</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>We look inside again to see if there is nothing.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ls</span> <span class="n">server1folder</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Debugging the SSH Connection">Debugging the <code>SSH</code> Connection<a class="anchor-link" href="#Debugging the SSH Connection"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 49" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can debug the <code>SSH</code> connection by adding from <code>-v</code> to <code>-vvvv</code> to the connection; the more <code>v</code>s we add, the higher the level of information.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ssh</span> <span class="o">-</span><span class="n">v</span> <span class="n">server1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'OpenSSH_8.2p1 Ubuntu-4ubuntu0.5, OpenSSL 1.1.1f  31 Mar 2020',
          'debug1: Reading configuration data /home/wallabot/.ssh/config',
          'debug1: /home/wallabot/.ssh/config line 6: Applying options for server1',
          'debug1: Reading configuration data /etc/ssh/ssh_config',
          'debug1: /etc/ssh/ssh_config line 19: include /etc/ssh/ssh_config.d/*.conf matched no files',
          'debug1: /etc/ssh/ssh_config line 21: Applying options for *',
          'debug1: Connecting to 194.62.99.222 [194.62.99.222] port 22.',
          'debug1: Connection established.',
          'debug1: identity file /home/wallabot/.ssh/id_rsa type 0',
          'debug1: identity file /home/wallabot/.ssh/id_rsa-cert type -1',
          'debug1: identity file /home/wallabot/.ssh/id_dsa type -1',
          'debug1: identity file /home/wallabot/.ssh/id_dsa-cert type -1',
          'debug1: identity file /home/wallabot/.ssh/id_ecdsa type -1',
          'debug1: identity file /home/wallabot/.ssh/id_ecdsa-cert type -1',
          'debug1: identity file /home/wallabot/.ssh/id_ecdsa_sk type -1',
          'debug1: identity file /home/wallabot/.ssh/id_ecdsa_sk-cert type -1',
          'debug1: identity file /home/wallabot/.ssh/id_ed25519 type -1',
          'debug1: identity file /home/wallabot/.ssh/id_ed25519-cert type -1',
          'debug1: identity file /home/wallabot/.ssh/id_ed25519_sk type -1',
          'debug1: identity file /home/wallabot/.ssh/id_ed25519_sk-cert type -1',
          'debug1: identity file /home/wallabot/.ssh/id_xmss type -1',
          'debug1: identity file /home/wallabot/.ssh/id_xmss-cert type -1',
          'debug1: Local version string SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5',
          'debug1: Remote protocol version 2.0, remote software version OpenSSH_8.9p1 Ubuntu-3',
          'debug1: match: OpenSSH_8.9p1 Ubuntu-3 pat OpenSSH* compat 0x04000000',
          'debug1: Authenticating to 194.62.99.222:22 as &#x27;root&#x27;',
          'debug1: SSH2_MSG_KEXINIT sent',
          'debug1: SSH2_MSG_KEXINIT received',
          'debug1: kex: algorithm: curve25519-sha256',
          'debug1: kex: host key algorithm: ecdsa-sha2-nistp256',
          'debug1: kex: server-&amp;gt;client cipher: chacha20-poly1305@openssh.com MAC: &amp;lt;implicit&amp;gt; compression: none',
          'debug1: kex: client-&amp;gt;server cipher: chacha20-poly1305@openssh.com MAC: &amp;lt;implicit&amp;gt; compression: none',
          'debug1: expecting SSH2_MSG_KEX_ECDH_REPLY',
          'debug1: Server host key: ecdsa-sha2-nistp256 SHA256:jwpQt2a69LQcuvvYPPKL32bBwTi1Je/ZmUdr4zEiD1Y',
          'debug1: Host &#x27;194.62.99.222&#x27; is known and matches the ECDSA host key.',
          'debug1: Found key in /home/wallabot/.ssh/known_hosts:14',
          'debug1: rekey out after 134217728 blocks',
          'debug1: SSH2_MSG_NEWKEYS sent',
          'debug1: expecting SSH2_MSG_NEWKEYS',
          'debug1: SSH2_MSG_NEWKEYS received',
          'debug1: rekey in after 134217728 blocks',
          'debug1: Will attempt key: /home/wallabot/.ssh/id_rsa RSA SHA256:ID3HcrbyPBGjFx/qeiJK50eqihLGrpDVu02oRSyKGh4 agent',
          'debug1: Will attempt key: wallabot@wallabot RSA SHA256:Qlq6hXbToInW+efEK666BFT26EeUSpBhzcqxTLrDBpQ agent',
          'debug1: Will attempt key: /home/wallabot/.ssh/id_dsa',
          'debug1: Will attempt key: /home/wallabot/.ssh/id_ecdsa',
          'debug1: Will attempt key: /home/wallabot/.ssh/id_ecdsa_sk',
          'debug1: Will attempt key: /home/wallabot/.ssh/id_ed25519',
          'debug1: Will attempt key: /home/wallabot/.ssh/id_ed25519_sk',
          'debug1: Will attempt key: /home/wallabot/.ssh/id_xmss',
          'debug1: SSH2_MSG_EXT_INFO received',
          'debug1: kex_input_ext_info: server-sig-algs=&amp;lt;ssh-ed25519,sk-ssh-ed25519@openssh.com,ssh-rsa,rsa-sha2-256,rsa-sha2-512,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,sk-ecdsa-sha2-nistp256@openssh.com,webauthn-sk-ecdsa-sha2-nistp256@openssh.com&amp;gt;',
          'debug1: kex_input_ext_info: publickey-hostbound@openssh.com (unrecognised)',
          'debug1: SSH2_MSG_SERVICE_ACCEPT received',
          'debug1: Authentications that can continue: publickey',
          'debug1: Next authentication method: publickey',
          'debug1: Offering public key: /home/wallabot/.ssh/id_rsa RSA SHA256:ID3HcrbyPBGjFx/qeiJK50eqihLGrpDVu02oRSyKGh4 agent',
          'debug1: Authentications that can continue: publickey',
          'debug1: Offering public key: wallabot@wallabot RSA SHA256:Qlq6hXbToInW+efEK666BFT26EeUSpBhzcqxTLrDBpQ agent',
          'debug1: Server accepts key: wallabot@wallabot RSA SHA256:Qlq6hXbToInW+efEK666BFT26EeUSpBhzcqxTLrDBpQ agent',
          'debug1: Authentication succeeded (publickey).',
          'Authenticated to 194.62.99.222 ([194.62.99.222]:22).',
          'debug1: channel 0: new [client-session]',
          'debug1: Requesting no-more-sessions@openssh.com',
          'debug1: Entering interactive session.',
          'debug1: pledge: network',
          'debug1: client_input_global_request: rtype hostkeys-00@openssh.com want_reply 0',
          'debug1: Remote: /root/.ssh/authorized_keys:1: key options: agent-forwarding port-forwarding pty user-rc x11-forwarding',
          'debug1: Remote: /root/.ssh/authorized_keys:1: key options: agent-forwarding port-forwarding pty user-rc x11-forwarding',
          'debug1: Sending environment.',
          'debug1: Sending env LANG = es_ES.UTF-8',
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          '* Documentation:  https://help.ubuntu.com',
          '* Management:     https://landscape.canonical.com',
          '* Support:        https://ubuntu.com/advantage',
          '&#x20;&#x20;System information as of Fri Feb 24 01:25:10 PM UTC 2023',
          '&#x20;&#x20;System load:           0.0',
          '&#x20;&#x20;Usage of /:            15.2% of 24.53GB',
          '&#x20;&#x20;Memory usage:          34%',
          '&#x20;&#x20;Swap usage:            0%',
          '&#x20;&#x20;Processes:             89',
          '&#x20;&#x20;Users logged in:       0',
          '&#x20;&#x20;IPv4 address for eth0: 194.62.99.222',
          '&#x20;&#x20;IPv4 address for eth1: 10.7.0.168',
          '&#x20;&#x20;IPv6 address for eth2: 2a04:3542:8000:1000:d48a:cbff:fefb:5b1',
          '* Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s',
          '&#x20;&#x20;&#x20;just raised the bar for easy, resilient and secure K8s cluster deployment.',
          '&#x20;&#x20;&#x20;https://ubuntu.com/engage/secure-kubernetes-at-the-edge',
          '43 updates can be applied immediately.',
          'To see these additional updates run: apt list --upgradable',
          'Last login: Fri Feb 24 13:10:05 2023 from 188.127.184.59',
          ']0;root@server1: ~root@server1:~# ^C',
          ']0;root@server1: ~root@server1:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>





















































































































    </div>

  </section>

</PostLayout>
