---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'SSH';
const end_url = 'ssh';
const description = 'Connecting securely is essential in today\'s digital world. Discover how SSH allows you to establish encrypted communications between your machine and remote servers. From basic concepts to advanced tips, dive into this comprehensive tutorial and master the craft of SSH. üîê üíº #SSHSecure';
const keywords = 'ssh, secure, connection, remote, server, terminal, linux, tutorial, guide';
const languaje = 'EN';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/SSH.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1366
    image_height=768
    image_extension=webp
    article_date=2023-03-18+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Historical-introduction"><h2>Historical introduction</h2></a>
      <a class="anchor-link" href="#SSH-encryption"><h2><code>SSH</code> encryption</h2></a>
      <a class="anchor-link" href="#SSH-requirements"><h2><code>SSH</code> requirements</h2></a>
      <a class="anchor-link" href="#Service-SSH"><h3>Service <code>SSH</code></h3></a>
      <a class="anchor-link" href="#SSH-Client"><h3><code>SSH</code> Client</h3></a>
      <a class="anchor-link" href="#SSH-connection"><h2><code>SSH</code> connection</h2></a>
      <a class="anchor-link" href="#Connection-without-password"><h2>Connection without password</h2></a>
      <a class="anchor-link" href="#Using-the-remote-terminal-via-%60SSH"><h2>Using the remote terminal via `SSH</h2></a>
      <a class="anchor-link" href="#Proxy-SSH"><h2>Proxy <code>SSH</code></h2></a>
      <a class="anchor-link" href="#Remote-graphical-interface-via-%60SSH"><h2>Remote graphical interface via `SSH</h2></a>
      <a class="anchor-link" href="#Tunnel-SSH"><h2>Tunnel <code>SSH</code></h2></a>
      <a class="anchor-link" href="#Reverse-connection"><h2>Reverse connection</h2></a>
      <a class="anchor-link" href="#Jump"><h2>Jump</h2></a>
      <a class="anchor-link" href="#User-SSH-configuration-file"><h2>User <code>SSH</code> configuration file</h2></a>
      <a class="anchor-link" href="#Devices-with-Aliases"><h3>Devices with Aliases</h3></a>
      <a class="anchor-link" href="#Proxy"><h3>Proxy</h3></a>
      <a class="anchor-link" href="#SSH-Tunnel"><h3>SSH Tunnel</h3></a>
      <a class="anchor-link" href="#Reverse-connection"><h3>Reverse connection</h3></a>
      <a class="anchor-link" href="#Jump"><h3>Jump</h3></a>
      <a class="anchor-link" href="#System-SSH-configuration-file"><h2>System <code>SSH</code> configuration file</h2></a>
      <a class="anchor-link" href="#File-copying-by-SSH"><h2>File copying by <code>SSH</code></h2></a>
      <a class="anchor-link" href="#Synchronization-of-files-by-SSH."><h2>Synchronization of files by <code>SSH</code>.</h2></a>
      <a class="anchor-link" href="#Mount-remote-folders-on-local"><h2>Mount remote folders on local</h2></a>
      <a class="anchor-link" href="#Debugging-SSH-connection"><h2>Debugging <code>SSH</code> connection</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="SSH">SSH<a class="anchor-link" href="#SSH"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 25" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Historical-introduction">Historical introduction<a class="anchor-link" href="#Historical-introduction"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 26" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>This notebook has been automatically translated to make it accessible to more people, please let me know if you see any typos.</p>
      <p>In the early days of the Internet, the <code>telnet</code> protocol was created to communicate with several computers, but it had the problem that it was not encrypted, so anyone who got in the way could read the communication without any problem, that is why <code>SSH</code> (Secure Shell) was created.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="SSH-encryption"><code>SSH</code> encryption<a class="anchor-link" href="#SSH-encryption"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 27" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The <code>SSH</code> encryption system works by means of the public key and private key system, so that if the communication is encrypted with one of the two keys, it can only be decrypted by the other key.</p>
      <p>And why is there a public key and a private key? The public key is the one you give to everyone and the private key is the one that only you have to possess.</p>
      <p>So if you want to communicate with another computer by <code>SSH</code>, first you give them your public key, then you encrypt the message with your private key and they can only decrypt the message with the public key you have given to the other computer.</p>
      <p>The same happens the other way around, if the other computer wants to send you a message, it encrypts it with your public key and can only be decrypted with the private key that only you have.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="SSH-requirements"><code>SSH</code> requirements<a class="anchor-link" href="#SSH-requirements"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 28" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Service-SSH">Service <code>SSH</code><a class="anchor-link" href="#Service-SSH"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 29" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In order to use <code>SSH</code> you need to have a <code>SSH</code> service. On <code>Linux</code> it is usually already installed, but if it is not you can install it using</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>apt<span class="w"> </span>install<span class="w"> </span>openssh-server',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>During the installation process you will be prompted for your location to set the time zone.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We then lift the service</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>apt<span class="w"> </span>install<span class="w"> </span>openssh-server',
      '<span></span><span class="o">!</span>systemctl<span class="w"> </span><span class="nb">enable</span><span class="w"> </span>ssh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h3 id="SSH-Client"><code>SSH</code> Client<a class="anchor-link" href="#SSH-Client"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 30" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Once you have the service you need a client, although in <code>Linux</code> it usually comes installed, but if it doesn`t you can install it via</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>apt<span class="w"> </span>install<span class="w"> </span>openssh-server',
      '<span></span><span class="o">!</span>systemctl<span class="w"> </span><span class="nb">enable</span><span class="w"> </span>ssh',
      '<span></span><span class="o">!</span>apt<span class="w"> </span>install<span class="w"> </span>openssh-client',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h2 id="SSH-connection"><code>SSH</code> connection<a class="anchor-link" href="#SSH-connection"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 31" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To connect via <code>SSH</code> you need to enter the command <code>ssh &lt;user&gt;@&lt;ip&gt;</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>apt<span class="w"> </span>install<span class="w"> </span>openssh-server',
          '</span><span class="o">!</span>systemctl<span class="w"> </span><span class="nb">enable</span><span class="w"> </span>ssh',
          '</span><span class="o">!</span>apt<span class="w"> </span>install<span class="w"> </span>openssh-client',
          '</span><span class="o">!</span>ssh<span class="w"> </span>root@172.17.0.1',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'The authenticity of host \'172.17.0.1 (172.17.0.1)\' can\'t be established.',
          'ECDSA key fingerprint is SHA256:M+qsqSC4HiYztm1ij8iDkh9KHJz+pxrTm9GTZIf2N9k.',
          'Are you sure you want to continue connecting (yes/no/[fingerprint])?',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As you can see, the first time it asks you if you want to save the <code>fingerprint</code>, this is so that if the next time you connect to the same machine (to the same public key) if the <code>fingerprint</code> has changed you must be careful because there can be something dangerous, like that they make to go through that machine.</p>
      <p>If we rely on it, we enter <code>yes</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>root@172.17.0.1',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'The authenticity of host \'172.17.0.1 (172.17.0.1)\' can\'t be established.',
          'ECDSA key fingerprint is SHA256:M+qsqSC4HiYztm1ij8iDkh9KHJz+pxrTm9GTZIf2N9k.',
          'Are you sure you want to continue connecting (yes/no/[fingerprint])? yes',
          'Warning: Permanently added \'172.17.0.1\' (ECDSA) to the list of known hosts.',
          'root@172.17.0.1\'s password:',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Next, the machine to which we connect asks us for the password, we enter it and we will be inside the machine.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>root@172.17.0.1',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'The authenticity of host \'172.17.0.1 (172.17.0.1)\' can\'t be established.',
          'ECDSA key fingerprint is SHA256:M+qsqSC4HiYztm1ij8iDkh9KHJz+pxrTm9GTZIf2N9k.',
          'Are you sure you want to continue connecting (yes/no/[fingerprint])? yes',
          'Warning: Permanently added \'172.17.0.1\' (ECDSA) to the list of known hosts.',
          'root@172.17.0.1\'s password: ',
          'Welcome to Ubuntu 20.04.5 LTS (GNU/Linux 5.15.0-58-generic x86_64)',
          ' * Documentation:  https://help.ubuntu.com',
          ' * Management:     https://landscape.canonical.com',
          ' * Support:        https://ubuntu.com/advantage',
          '1 device has a firmware upgrade available.',
          'Run `fwupdmgr get-upgrades` for more information.',
          ' * Introducing Expanded Security Maintenance for Applications.',
          '   Receive updates to over 25,000 software packages with your',
          '   Ubuntu Pro subscription. Free for personal use.',
          '     https://ubuntu.com/pro',
          'Se pueden aplicar 0 actualizaciones de forma inmediata.',
          'Your Hardware Enablement Stack (HWE) is supported until April 2025.',
          'Last login: Thu Dec  1 16:32:23 2022 from 127.0.0.1',
          'root@172.17.0.1:~$',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Connection-without-password">Connection without password<a class="anchor-link" href="#Connection-without-password"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 32" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we have seen when we connect we are asked for the password of the destination machine, but if it is a machine to which we are going to connect a lot we can do that it does not ask us for the password every time we want to connect.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>For them, we first generate a <code>ssh</code> key using <code>ssh-keygen</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh-keygen',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Generating public/private rsa key pair.',
          'Enter file in which to save the key (/root/.ssh/id_rsa): ',
          'Enter passphrase (empty for no passphrase): ',
          'Enter same passphrase again: ',
          'Your identification has been saved in /root/.ssh/id_rsa',
          'Your public key has been saved in /root/.ssh/id_rsa.pub',
          'The key fingerprint is:',
          'SHA256:4HxRXkVkcK5kNXNyzakfQ6t8a24wRGCUYz4s5KL5ZEc root@e108f6f395b3',
          'The key\'s randomart image is:',
          '+---[RSA 3072]----+',
          '|          o+==@.=|',
          '|         +.= * Oo|',
          '|      . + = = + .|',
          '|     o o E * + + |',
          '|      = S . = o o|',
          '|     o + .   = o |',
          '|      + .     + .|',
          '|       .       + |',
          '|              +. |',
          '+----[SHA256]-----+',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, first it asks us where we want to save the key, if we do not enter anything it saves it in the default path. And then a phrase to generate the key, <strong>if you write a phrase you must always remember it</strong>. Also if you write a phrase, it will ask for it every time you try to access the key, so every time we want to access the machine through <code>SSH</code>, it will not ask for the password of the machine, but it will ask for this phrase. So you choose if you do not enter a phrase so that it never asks for it, or if you do enter it and you will always enter it.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We then ask the remote machine to save our key using <code>ssh-copy-id &lt;user&gt;@&lt;id&gt;:</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh-copy-id<span class="w"> </span>root@172.17.0.1:',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/root/.ssh/id_rsa.pub"',
          '/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed',
          '/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys',
          'root@172.17.0.1\'s password: ',
          'Number of key(s) added: 1',
          'Now try logging into the machine, with:   "ssh \'root@172.17.0.1\'"',
          'and check to make sure that only the key(s) you wanted were added.',
          'root@103b6040196a:/# ssh root@172.17.0.1',
          'Welcome to Ubuntu 20.04.5 LTS (GNU/Linux 5.15.0-58-generic x86_64)',
          ' * Documentation:  https://help.ubuntu.com',
          ' * Management:     https://landscape.canonical.com',
          ' * Support:        https://ubuntu.com/advantage',
          '4 devices have a firmware upgrade available.',
          'Run `fwupdmgr get-upgrades` for more information.',
          '58 updates can be applied immediately.',
          '41 of these updates are standard security updates.',
          'To see these additional updates run: apt list --upgradable',
          'New release \'22.04.1 LTS\' available.',
          'Run \'do-release-upgrade\' to upgrade to it.',
          'Your Hardware Enablement Stack (HWE) is supported until April 2025.',
          'Last login: Thu Feb  2 08:05:48 2023 from 172.17.0.2',
          '(base) root@172.17.0.1:~$',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Using-the-remote-terminal-via-%60SSH">Using the remote terminal via `SSH<a class="anchor-link" href="#Using-the-remote-terminal-via-%60SSH"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 33" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Maybe we don't need to get into the remote machine because we only need to execute a single command, so we can remotely use its terminal by adding the <code>-t</code> flag to the <code>SSH</code> command, i.e. by <code>ssh -t &lt;user&gt;@&lt;id&gt; &lt;command&gt;</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>-t<span class="w"> </span>root@172.17.0.1<span class="w"> </span>ping<span class="w"> </span>-c<span class="w"> </span><span class="m">4</span><span class="w"> </span>google.com',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'PING google.com (172.217.168.174) 56(84) bytes of data.',
          '64 bytes from mad07s10-in-f14.1e100.net (172.217.168.174): icmp_seq=1 ttl=111 time=2.94 ms',
          '64 bytes from mad07s10-in-f14.1e100.net (172.217.168.174): icmp_seq=2 ttl=111 time=2.55 ms',
          '64 bytes from mad07s10-in-f14.1e100.net (172.217.168.174): icmp_seq=3 ttl=111 time=2.78 ms',
          '64 bytes from mad07s10-in-f14.1e100.net (172.217.168.174): icmp_seq=4 ttl=111 time=2.69 ms',
          '--- google.com ping statistics ---',
          '4 packets transmitted, 4 received, 0% packet loss, time 3005ms',
          'rtt min/avg/max/mdev = 2.550/2.739/2.940/0.142 ms',
          'Connection to 172.17.0.1 closed.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As you can see the command is performed on the remote machine and when it finishes, the last line tells us that the connection is closed.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Proxy-SSH">Proxy <code>SSH</code><a class="anchor-link" href="#Proxy-SSH"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 34" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If you are browsing in a not very secure place, or in a place that has a proxy that does not let you access some ports, you can browse through the proxy of another machine using <code>SSH</code>, this can be done by adding the <code>-D</code> flag and the port you want to connect to the remote proxy, as the port for the <code>tcp/ip</code> is <code>9999</code> the command could look like <code>ssh -D 9999 &lt;user&gt;@&lt;id&gt;</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To make this look better, before running it I get my rogue IP</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>curl<span class="w"> </span>ifconfig.me',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '188.127.184.59',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>I now use the proxy of a web server that I have set up</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>-D<span class="w"> </span><span class="m">9999</span><span class="w"> </span>root@194.62.99.222',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          ' * Documentation:  https://help.ubuntu.com',
          ' * Management:     https://landscape.canonical.com',
          ' * Support:        https://ubuntu.com/advantage',
          '  System information as of Wed Feb 22 06:08:51 AM UTC 2023',
          '  System load:           0.02978515625',
          '  Usage of /:            11.7% of 24.53GB',
          '  Memory usage:          33%',
          '  Swap usage:            0%',
          '  Processes:             89',
          '  Users logged in:       0',
          '  IPv4 address for eth0: 194.62.99.222',
          '  IPv4 address for eth1: 10.7.0.168',
          '  IPv6 address for eth2: 2a04:3542:8000:1000:d48a:cbff:fefb:5b1',
          '0 updates can be applied immediately.',
          'The list of available updates is more than a week old.',
          'To check for new updates run: sudo apt update',
          'Last login: Wed Feb 22 06:02:35 2023 from 188.127.184.59',
          'root@server1:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Change my computer's proxy settings</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="proxy ssh" src="https://maximofn.com/wp-content/uploads/2023/02/proxy_ssh.png" width="977" height="818"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Now I look at my public IP again, but taking the newly configured proxy</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>curl<span class="w"> </span>-x<span class="w"> </span>socks5h://localhost:9999<span class="w"> </span>ifconfig.me',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '194.62.99.222',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that we get the public IP of the server</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Remote-graphical-interface-via-%60SSH">Remote graphical interface via `SSH<a class="anchor-link" href="#Remote-graphical-interface-via-%60SSH"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 35" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In linux the g≈ïafica interface is a server, so we can take advantage of it and we can run programs with graphical interfaces that are on a remote machine by <code>SSH</code>, for this we must use the <code>-X</code> flag. The command would be <code>ssh -X &lt;user&gt;@&lt;id&gt;</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First I login to my server and install <code>xeyes</code> using <code>sudo apt install x11-apps</code> and then run it remotely from my computer.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>-X<span class="w"> </span>root@194.62.99.222',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          'Last login: Wed Feb 22 06:39:52 2023 from 188.127.184.59',
          '/usr/bin/xauth:  file /root/.Xauthority does not exist',
          'root@server1:~sudo apt install x11-apps',
          'root@server1:~#xeyes',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now on my computer the <code>xeyes</code> window opens but it is not running on my computer.</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="xeyes" src="https://maximofn.com/wp-content/uploads/2023/02/xeyes.png" width="158" height="151"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Tunnel-SSH">Tunnel <code>SSH</code><a class="anchor-link" href="#Tunnel-SSH"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 36" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As I said, I have set up a server to which I have ssh access.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>root@194.62.99.222',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          'Last login: Wed Feb 22 06:40:58 2023 from 188.127.184.59',
          'root@server1:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>And I also set up a second server from which I have access from <code>server1</code>, but I have no access from my computer.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Next, I try to access <code>server2</code> from my computer and I can't access it</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>root@194.62.99.235',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'ssh: connect to host 194.62.99.235 port 22: Connection timed out',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>And then I try to access <code>server2</code> from <code>server1</code> and I can see that I can</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>root@server1:~#<span class="w"> </span>ssh<span class="w"> </span>root@10.7.2.228',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          'Last login: Wed Feb 22 06:59:01 2023 from 10.7.0.168',
          'root@server2:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>So what we create is a tunnel from my computer to <code>server2</code> through <code>server1</code>, for this we use the <code>-L</code> flag. To create the tunnel you have to indicate the port of your computer where you are going to create the tunnel, then the <code>IP</code> of destination of the tunnel, the port through which the tunnel will go and finally the device that will create the tunnel. It would look like this</p>
      <div class="highlight"><pre><span></span>ssh<span class="w"> </span>-L<span class="w"> </span><span class="p">&amp;</span>ltHOST<span class="w"> </span>PORT<span class="p">&amp;</span>gt:<span class="p">&amp;</span>ltDEST<span class="w"> </span>IP<span class="p">&amp;</span>gt:<span class="p">&amp;</span>ltTUNNEL<span class="w"> </span>PORT<span class="p">&amp;</span>gt<span class="w"> </span><span class="p">&amp;</span>ltTUNNEL<span class="w"> </span>CREATOR<span class="w"> </span>USER<span class="p">&amp;</span>gt@<span class="p">&amp;</span>ltTUNNEL<span class="w"> </span>CREATOR<span class="w"> </span>IP<span class="p">&amp;</span>gt
      </pre></div>
      <p>Let's see it with my example, I have <code>server1</code> with a public <code>IP</code> that we can call <code>ip_pub1</code> and to which I have access by <code>SSH</code> and a private <code>IP</code> that we can call <code>ip_priv1</code> that is inside the same network as <code>server2</code>. And I have <code>server2</code> with a public <code>IP</code> that we can call <code>ip_pub2</code> that I don't have access to via <code>SSH</code> and a private <code>IP</code> that we can call <code>ip_priv2</code> that is inside the same network as <code>server1</code>.</p>
      <p>First I create the tunnel</p>
      <div class="highlight"><pre><span></span>ssh<span class="w"> </span>-L<span class="w"> </span>host_port:ip_priv2:22<span class="w"> </span>root@ip_pub1
      </pre></div>
      <p>I have created a tunnel to the private <code>IP</code> of <code>server2</code> through the public <code>IP</code> of <code>server1</code>.</p>
      <p>Finally, to connect to <code>server2</code> I do it through the <code>localhost</code> and the host port that I have declared in the tunnel</p>
      <div class="highlight"><pre><span></span>ssh<span class="w"> </span>-p<span class="w"> </span><span class="m">2020</span><span class="w"> </span>root@localhost
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let<code>s see it in reality, the</code>IP`s of my servers are</p>
      <ul>
      <li><code>server1</code>:<ul>
      <li>public <code>IP</code>: <code>194.62.99.222</code>.</li>
      <li>private <code>IP</code>: <code>10.7.0.168</code>.</li>
      </ul>
      </li>
      <li><code>server2</code>:<ul>
      <li>public <code>IP</code>: <code>194.62.99.235</code>.</li>
      <li>Private <code>IP</code>: <code>10.7.2.228</code>.</li>
      </ul>
      </li>
      </ul>
      <p>First I create the tunnel</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>-L<span class="w"> </span><span class="m">2020</span>:10.7.2.228:22<span class="w"> </span>root@194.62.99.222',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          ' * Documentation:  https://help.ubuntu.com',
          ' * Management:     https://landscape.canonical.com',
          ' * Support:        https://ubuntu.com/advantage',
          '  System information as of Wed Feb 22 11:13:39 AM UTC 2023',
          '  System load:           0.0',
          '  Usage of /:            13.3% of 24.53GB',
          '  Memory usage:          36%',
          '  Swap usage:            0%',
          '  Processes:             91',
          '  Users logged in:       1',
          '  IPv4 address for eth0: 194.62.99.222',
          '  IPv4 address for eth1: 10.7.0.168',
          '  IPv6 address for eth2: 2a04:3542:8000:1000:d48a:cbff:fefb:5b1',
          '101 updates can be applied immediately.',
          '60 of these updates are standard security updates.',
          'To see these additional updates run: apt list --upgradable',
          'Last login: Wed Feb 22 09:29:52 2023 from 188.127.184.59',
          ']0;root@server1: ~<span class="ansi-green-intense-fg ansi-bold">root@server1</span>:<span class="ansi-blue-intense-fg ansi-bold">~</span># ^C',
          ']0;root@server1: ~<span class="ansi-green-intense-fg ansi-bold">root@server1</span>:<span class="ansi-blue-intense-fg ansi-bold">~</span># ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>With the tunnel created I can now connect to <code>server2</code> from my computer.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>-p<span class="w"> </span><span class="m">2020</span><span class="w"> </span>root@localhost',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          ' * Documentation:  https://help.ubuntu.com',
          ' * Management:     https://landscape.canonical.com',
          ' * Support:        https://ubuntu.com/advantage',
          '  System information as of Wed Feb 22 11:14:15 AM UTC 2023',
          '  System load:           0.0',
          '  Usage of /:            13.3% of 24.53GB',
          '  Memory usage:          33%',
          '  Swap usage:            0%',
          '  Processes:             90',
          '  Users logged in:       0',
          '  IPv4 address for eth0: 194.62.99.235',
          '  IPv4 address for eth1: 10.7.2.228',
          '  IPv6 address for eth2: 2a04:3542:8000:1000:d48a:cbff:fefb:7f47',
          ' * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s',
          '   just raised the bar for easy, resilient and secure K8s cluster deployment.',
          '   https://ubuntu.com/engage/secure-kubernetes-at-the-edge',
          '101 updates can be applied immediately.',
          '60 of these updates are standard security updates.',
          'To see these additional updates run: apt list --upgradable',
          'Last login: Wed Feb 22 11:14:16 2023 from 10.7.0.168',
          ']0;root@server2: ~<span class="ansi-green-intense-fg ansi-bold">root@server2</span>:<span class="ansi-blue-intense-fg ansi-bold">~</span># ^C',
          ']0;root@server2: ~<span class="ansi-green-intense-fg ansi-bold">root@server2</span>:<span class="ansi-blue-intense-fg ansi-bold">~</span># ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Reverse-connection">Reverse connection<a class="anchor-link" href="#Reverse-connection"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 37" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's suppose again that I want to connect to <code>server2</code>, but now I cannot, for whatever reason, tunnel from <code>server1</code>. What we can do is to create a reverse connection from another server.</p>
      <p>Suppose I have a third server, called <code>server3</code>, which can be accessed by <code>SSH</code> from either side, i.e. both me from my computer and <code>server2</code> have access. So if we can physically access to <code>server2</code> we can make a reverse connection from <code>server2</code> to <code>server3</code>.</p>
      <pre><code>ssh -R &amp;ltserver3port&amp;gt:localhost:22 root@&amp;ltIPserver3&amp;gt</code></pre>
      <p>With this, what I have done is to enable a connection from <code>server3</code> to <code>server2</code> (which was not possible before), through <code>localhost</code> and port <code>server3port</code> of <code>server3</code>.</p>
      <p>Now from my computer I can connect to <code>server3</code> and from <code>server3</code> we can connect to <code>server2</code> via</p>
      <div class="highlight"><pre><span></span>ssh<span class="w"> </span>-p<span class="w"> </span><span class="p">&amp;</span>ltserver3port<span class="p">&amp;</span>gt<span class="w"> </span>root@localhost
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Let's see it with the data from my servers</p>
      <ul>
      <li><code>server2</code>:<ul>
      <li>public <code>IP</code>: <code>194.62.99.235</code>.</li>
      </ul>
      </li>
      <li><code>server3</code>:<ul>
      <li>public <code>IP</code>: <code>194.62.96.236</code>.</li>
      </ul>
      </li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First I make the reverse connection from <code>server2</code> to <code>server3</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>root@server2:~#<span class="w"> </span>ssh<span class="w"> </span>-R<span class="w"> </span><span class="m">2020</span>:localhost:22<span class="w"> </span>root@194.62.96.236',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          'Last login: Wed Feb 22 15:25:58 2023 from 188.127.184.59',
          'root@server3:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now I connect to <code>server3</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>root@194.62.96.236',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          'Last login: Wed Feb 22 15:12:19 2023 from 188.127.184.59',
          'root@server3:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>And now that I am on <code>server3</code> I connect to <code>server2</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>root@server3:~#<span class="w"> </span>ssh<span class="w"> </span>-p<span class="w"> </span><span class="m">2020</span><span class="w"> </span>root@localhost',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          'Last login: Wed Feb 22 15:12:07 2023 from 188.127.184.59',
          'root@server2:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Success! Through my computer I cannot connect directly to <code>server2</code>, but when connecting to <code>server3</code> I have been able to access <code>server2</code> thanks to the reverse connection I had made from <code>server2</code> to <code>server3</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Jump">Jump<a class="anchor-link" href="#Jump"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 38" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Finally, another way to enter <code>server2</code> is to enter <code>server1</code> and then from <code>server1</code> enter <code>server2</code>. But this is a bit cumbersome, because first you have to make a <code>SSH</code> connection to <code>server1</code> and then another to <code>server2</code>, so to do it all in one go you can use the <code>-J</code> (<code>jump</code>) flag, i.e. <code>ssh -J server1 server2</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Resumem, first we would do <code>ssh root@194.62.99.222</code> and then <code>ssh root@10.7.2.228</code> (since inside <code>server1</code> we connect to <code>server2</code> through the private <code>IP</code>).</p>
      <p>So we could do everything in one go by doing <code>ssh -J root@194.62.99.222 root@10.7.2.228</code></p>
      <p>Let's try</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>-J<span class="w"> </span>root@194.62.99.222<span class="w"> </span>root@10.7.2.228',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          'Last login: Fri Feb 24 06:46:11 2023 from 10.7.0.168',
          'root@server2:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We were able to make the jumps!</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="User-SSH-configuration-file">User <code>SSH</code> configuration file<a class="anchor-link" href="#User-SSH-configuration-file"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 39" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Devices-with-Aliases">Devices with Aliases<a class="anchor-link" href="#Devices-with-Aliases"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 40" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>On every computer there is a configuration file for the <code>SSH</code> which is usually located in the user's folder.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>cat<span class="w"> </span>~/.ssh/config',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '# Read more about SSH config files: https://linux.die.net/man/5/ssh_config',
          'Host 192.168.1.138',
          '    HostName 192.168.1.138',
          '    User maximo.fernandez',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In this file I have saved the user and ip of some devices that I usually connect to so I don't have to fill in everything myself. Let's see it with the servers I have</p>
      <p>My server <code>server1</code> has the user <code>root</code> and the IP <code>194.62.99.222</code>, so I add it to the list</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"Host server1\n    HostName 194.62.99.222\n    User root"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>~/.ssh/config',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Let's see how the configuration file looks like again</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"Host server1\n    HostName 194.62.99.222\n    User root"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>~/.ssh/config',
          '</span><span class="o">!</span>cat<span class="w"> </span>~/.ssh/config',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '# Read more about SSH config files: https://linux.die.net/man/5/ssh_config',
          'Host 192.168.1.138',
          '    HostName 192.168.1.138',
          '    User maximo.fernandez',
          'Host server1',
          '    HostName 194.62.99.222',
          '    User root',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now that we have added it to connect to <code>server1</code> we only need to do <code>ssh server1</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>server1<span class="w"> </span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          'Last login: Fri Feb 24 05:18:59 2023 from 188.127.184.59',
          'root@server1:~# ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Proxy">Proxy<a class="anchor-link" href="#Proxy"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 41" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we already saw, adding the flag <code>-D &amp;ltport&amp;gt</code> we could change the proxy. To leave this saved in the configuration file we only have to add the line <code>DynamicForward &amp;ltport&amp;gt</code> to the host that we are saving</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Repeating the previous example in which we use <code>server1</code> as a proxy for port <code>tcp/ip</code> (<code>9999</code>), the configuration file would look like this</p>
      <pre><code>Host proxyServer1
          HostName 194.62.99.222
          User root
          DynamicForward 9999</code></pre>
      <p>We add</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"Host proxyServer1\n    HostName 194.62.99.222\n    User root\n    DynamicForward 9999"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>~/.ssh/config',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Let's see how the configuration file looks like</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"Host proxyServer1\n    HostName 194.62.99.222\n    User root\n    DynamicForward 9999"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>~/.ssh/config',
          '</span><span class="o">!</span>cat<span class="w"> </span>~/.ssh/config',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '# Read more about SSH config files: https://linux.die.net/man/5/ssh_config',
          'Host 192.168.1.138',
          '    HostName 192.168.1.138',
          '    User maximo.fernandez',
          'Host server1',
          '    HostName 194.62.99.222',
          '    User root',
          'Host proxyServer1',
          '    HostName 194.62.99.222',
          '    User root',
          '    DynamicForward 9999',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>I get my public <code>IP</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>curl<span class="w"> </span>ifconfig.me',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '188.127.184.59',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>I connect to the proxy server</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>proxyServer1<span class="w"> </span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          'Last login: Fri Feb 24 05:42:32 2023 from 188.127.184.59',
          'root@server1:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Change my computer's proxy settings</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="proxy ssh" src="https://maximofn.com/wp-content/uploads/2023/02/proxy_ssh.png" width="977" height="818"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>I see my public <code>IP</code> again, but taking the newly configured proxy</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>curl<span class="w"> </span>-x<span class="w"> </span>socks5h://localhost:9999<span class="w"> </span>ifconfig.me',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '194.62.99.222',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We see that we get the public IP of the server</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="SSH-Tunnel">SSH Tunnel<a class="anchor-link" href="#SSH-Tunnel"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 42" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If as before I want to create a tunnel to <code>server2</code> through <code>server1</code>, before we had to do <code>ssh &amp;ltHOST PORT&amp;gt:&amp;ltDEST IP&amp;gt:&amp;ltTUNNEL PORT&amp;gt &amp;ltTUNNEL CREATOR USER&amp;gt@&amp;ltTUNNEL CREATOR IP&amp;gt</code>, now we have to add the line</p>
      <div class="highlight"><pre><span></span>LocalForward<span class="w"> </span><span class="p">&amp;</span>ltlocalhost<span class="p">&amp;</span>gt:<span class="p">&amp;</span>ltHOST<span class="w"> </span>PORT<span class="p">&amp;</span>gt<span class="w"> </span><span class="p">&amp;</span>ltDEST<span class="w"> </span>IP<span class="p">&amp;</span>gt:<span class="p">&amp;</span>ltTUNNEL<span class="w"> </span>PORT<span class="p">&amp;</span>gt
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>That is, the configuration file would look like this</p>
      <pre><code>Host tunelToServer2
          HostName 194.62.99.222
          User root
          LocalForward 127.0.0.1.1:2020 10.7.2.228:22</code></pre>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>But as it is not very well understood, let's see it with something concrete.</p>
      <ul>
      <li><code>server1</code>:<ul>
      <li>public <code>IP</code>: <code>194.62.99.222</code>.</li>
      <li>Private <code>IP</code>: <code>10.7.0.168</code>.</li>
      </ul>
      </li>
      <li><code>server2</code>:<ul>
      <li>public <code>IP</code>: <code>194.62.99.235</code>.</li>
      <li>Private <code>IP</code>: <code>10.7.2.228</code>.</li>
      </ul>
      </li>
      </ul>
      <p>Previously the command was</p>
      <div class="highlight"><pre><span></span>ssh<span class="w"> </span>-L<span class="w"> </span><span class="m">2020</span>:10.7.2.228:22<span class="w"> </span>root@194.62.99.222
      </pre></div>
      <p>So the configuration file has to look like this</p>
      <pre><code>Host tunelToServer2
          HostName 194.62.99.222
          User root
          LocalForward 127.0.0.1.1:2020 10.7.2.228:22</code></pre>
      <p>Let's see if it works</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Add the new configuration</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"Host tunelToServer2\n    HostName 194.62.99.222\n    User root\n    LocalForward 127.0.0.1:2020 10.7.2.228:22"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>~/.ssh/config',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Let's see what the configuration file looks like</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"Host tunelToServer2\n    HostName 194.62.99.222\n    User root\n    LocalForward 127.0.0.1:2020 10.7.2.228:22"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>~/.ssh/config',
          '</span><span class="o">!</span>cat<span class="w"> </span>~/.ssh/config',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '# Read more about SSH config files: https://linux.die.net/man/5/ssh_config',
          'Host 192.168.1.138',
          '    HostName 192.168.1.138',
          '    User maximo.fernandez',
          'Host server1',
          '    HostName 194.62.99.222',
          '    User root',
          'Host proxyServer1',
          '    HostName 194.62.99.222',
          '    User root',
          '    DynamicForward 9999',
          'Host tunelToServer2',
          '    HostName 194.62.99.222',
          '    User root',
          '    LocalForward 127.0.0.1:2020 10.7.2.228:22',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We create the tunnel</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>tunelToServer2<span class="w"> </span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          'Last login: Fri Feb 24 06:02:20 2023 from 188.127.184.59',
          'root@server1:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we try to connect to <code>server2</code> from my computer</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>-p<span class="w"> </span><span class="m">2020</span><span class="w"> </span>root@localhost',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          'Last login: Fri Feb 24 06:02:36 2023 from 10.7.0.168',
          'root@server2:~# ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Successful! But we can make everything a bit cleaner, we can add this last connection to the configuration file</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"Host server2ByTunel\n    HostName localhost\n    User root\n    Port 2020"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>~/.ssh/config',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Let's see how the configuration file looks like</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"Host server2ByTunel\n    HostName localhost\n    User root\n    Port 2020"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>~/.ssh/config',
          '</span><span class="o">!</span>cat<span class="w"> </span>~/.ssh/config',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '# Read more about SSH config files: https://linux.die.net/man/5/ssh_config',
          'Host 192.168.1.138',
          '    HostName 192.168.1.138',
          '    User maximo.fernandez',
          'Host server1',
          '    HostName 194.62.99.222',
          '    User root',
          'Host proxyServer1',
          '    HostName 194.62.99.222',
          '    User root',
          '    DynamicForward 9999',
          'Host tunelToServer2',
          '    HostName 194.62.99.222',
          '    User root',
          '    LocalForward 127.0.0.1:2020 10.7.2.228:22',
          'Host server2ByTunel',
          '    HostName localhost',
          '    User root',
          '    Port 2020',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we connect again to <code>server2</code> from my computer, through the tunnel, but with the last configuration we just saved.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>server2ByTunel<span class="w"> </span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          'Last login: Fri Feb 24 06:13:33 2023 from 10.7.0.168',
          'root@server2:~# ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>In summary, with all that we have done, we can create the tunnel to <code>server2</code> with the command <code>ssh tunnelToServer2</code> and then connect to <code>server2</code> with the command <code>ssh server2ByTunel</code>.</p>
      <p>Impressive!</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Reverse-connection">Reverse connection<a class="anchor-link" href="#Reverse-connection"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 43" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We remember that now our problem was that we could not connect to <code>server2</code> through the <code>server1</code> tunnel. So by creating a reverse connection from <code>server2</code> (we have someone on <code>server2</code> who can make that reverse connection, or we left it done ourselves before we left) to a <code>server3</code>, from my computer I can connect to <code>server3</code> and then connect to <code>server2</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>First we have to make the reverse connection from <code>server2</code> to <code>server3</code>. This could be done by using a command</p>
      <div class="highlight"><pre><span></span>ssh<span class="w"> </span>-R<span class="w"> </span><span class="p">&amp;</span>ltserver3port<span class="p">&amp;</span>gt:localhost:22<span class="w"> </span>root@<span class="p">&amp;</span>ltIPserver3<span class="p">&amp;</span>gt
      </pre></div>
      <p>Or save the connection in the configuration file by adding</p>
      <pre><code>Host reverseToServer3
          HostName &amp;ltIPserver3&amp;gt
          User root
          RemoteForward &amp;ltserver3port&amp;gt localhost:22</code></pre>
      <p>And make the reverse connection by</p>
      <div class="highlight"><pre><span></span>ssh<span class="w"> </span>reverseToServer3
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As it is not well understood, let's look at it with concrete data</p>
      <ul>
      <li><code>server2</code>:<ul>
      <li>public <code>IP</code>: <code>194.62.99.235</code>.</li>
      </ul>
      </li>
      <li><code>server3</code>:<ul>
      <li>public <code>IP</code>: <code>194.62.96.236</code>.</li>
      </ul>
      </li>
      </ul>
      <p>To make the reverse connection you would have to use the command</p>
      <div class="highlight"><pre><span></span>ssh<span class="w"> </span>-R<span class="w"> </span><span class="m">2020</span>:localhost:22<span class="w"> </span>root@194.62.96.236
      </pre></div>
      <p>Or save the following configuration</p>
      <div class="highlight"><pre><span></span>Host<span class="w"> </span>reverseToServer3
      <span class="w">    </span>HostName<span class="w"> </span><span class="m">194</span>.62.96.236
      <span class="w">    </span>User<span class="w"> </span>root
      <span class="w">    </span>RemoteForward<span class="w"> </span><span class="m">2020</span><span class="w"> </span>localhost:22
      </pre></div>
      <p>And connect via</p>
      <div class="highlight"><pre><span></span>ssh<span class="w"> </span>reverseToServer3
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>So I save the configuration on server 2 and make the connection</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>root@server2:~#<span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"Host reverseToServer3\n    HostName 194.62.96.236\n    User root\n    RemoteForward 2020 localhost:22"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>~/.ssh/config',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Let's see how well it has been stored</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>root@server2:~#<span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"Host reverseToServer3\n    HostName 194.62.96.236\n    User root\n    RemoteForward 2020 localhost:22"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>~/.ssh/config',
          '</span><span class="o">!</span>root@server2:~#<span class="w"> </span>cat<span class="w"> </span>.ssh/config',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Host reverseToServer3',
          '    HostName 194.62.96.236',
          '    User root',
          '    RemoteForward 2020 localhost:22',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>I make the reverse connection</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>root@server2:~#<span class="w"> </span>ssh<span class="w"> </span>reverseToServer3<span class="w"> </span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-53-generic x86_64)',
          'Last login: Wed Feb 22 15:26:18 2023 from 194.62.99.235',
          'root@server3:~# ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Jump">Jump<a class="anchor-link" href="#Jump"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 44" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As we have said we made jumps through the <code>-J</code> flag, so that with the command <code>ssh -J root@194.62.99.222 root@10.7.2.228</code> we could connect to <code>server2</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>There are two options for configuring the configuration file</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The first is that since we already have the <code>server1</code> saved in the configuration file, we only add <code>server2</code> to the configuration file.</p>
      <div class="highlight"><pre><span></span>Host<span class="w"> </span>server2
      <span class="w">    </span>HostName<span class="w"> </span><span class="m">10</span>.7.2.228
      <span class="w">    </span>User<span class="w"> </span>root
      </pre></div>
      <p>And then we could connect via</p>
      <div class="highlight"><pre><span></span>ssh<span class="w"> </span>-J<span class="w"> </span>server1<span class="w"> </span>server2
      </pre></div>
      <p>Let's try it</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"Host server2\n    HostName 10.7.2.228\n    User root\n"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>~/.ssh/config',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>We see the configuration file</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"Host server2\n    HostName 10.7.2.228\n    User root\n"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>~/.ssh/config',
          '</span><span class="o">!</span>cat<span class="w"> </span>~/.ssh/config',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '# Read more about SSH config files: https://linux.die.net/man/5/ssh_config',
          'Host 192.168.1.138',
          '    HostName 192.168.1.138',
          '    User maximo.fernandez',
          'Host server1',
          '    HostName 194.62.99.222',
          '    User root',
          'Host proxyServer1',
          '    HostName 194.62.99.222',
          '    User root',
          '    DynamicForward 9999',
          'Host tunelToServer2',
          '    HostName 194.62.99.222',
          '    User root',
          '    LocalForward 127.0.0.1:2020 10.7.2.228:22',
          'Host server2ByTunel',
          '    HostName localhost',
          '    User root',
          '    Port 2020',
          'Host server2',
          '    HostName 10.7.2.228',
          '    User root',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we connect using the jumps</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>-J<span class="w"> </span>server1<span class="w"> </span>server2',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          'Last login: Fri Feb 24 12:05:16 2023 from 10.7.0.168',
          'root@server2:~#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>This has been the first option, save each server and set the hops, but a second option is to save all the hops in a single configuration, which would look like this</p>
      <div class="highlight"><pre><span></span>Host<span class="w"> </span>server2jumping
      <span class="w">    </span>HostName<span class="w"> </span><span class="m">10</span>.7.2.228
      <span class="w">    </span>User<span class="w"> </span>root
      <span class="w">    </span>ProxyJump<span class="w"> </span>root@194.62.99.222
      </pre></div>
      <p>And all that would be needed is to connect via</p>
      <pre><code>ssh server2jumping</code></pre>
      <p>Let's try</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"Host server2jumping\n    HostName 10.7.2.228\n    User root\n    ProxyJump root@194.62.99.222"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>~/.ssh/config',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Let's look at the configuration file</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"Host server2jumping\n    HostName 10.7.2.228\n    User root\n    ProxyJump root@194.62.99.222"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>~/.ssh/config',
          '</span><span class="o">!</span>cat<span class="w"> </span>~/.ssh/config',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '# Read more about SSH config files: https://linux.die.net/man/5/ssh_config',
          'Host 192.168.1.138',
          '    HostName 192.168.1.138',
          '    User maximo.fernandez',
          'Host server1',
          '    HostName 194.62.99.222',
          '    User root',
          'Host proxyServer1',
          '    HostName 194.62.99.222',
          '    User root',
          '    DynamicForward 9999',
          'Host tunelToServer2',
          '    HostName 194.62.99.222',
          '    User root',
          '    LocalForward 127.0.0.1:2020 10.7.2.228:22',
          'Host server2ByTunel',
          '    HostName localhost',
          '    User root',
          '    Port 2020',
          'Host server2',
          '    HostName 10.7.2.228',
          '    User root',
          'Host server2jumping',
          '    HostName 10.7.2.228',
          '    User root',
          '    ProxyJump root@194.62.99.222',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now we try to connect</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>server2jumping',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          'Last login: Fri Feb 24 12:06:22 2023 from 10.7.0.168',
          'root@server2:~# ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="System-SSH-configuration-file">System <code>SSH</code> configuration file<a class="anchor-link" href="#System-SSH-configuration-file"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 45" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Earlier we saw the <code>SSH</code> configuration file of the user, where we saved configurations of machines where we wanted to connect via <code>SSH</code>, but there is another <code>SSH</code> configuration file but in this case of the system, which is located in <code>/etc/ssh/ssh_config</code>, let's see it</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>cat<span class="w"> </span>/etc/ssh/sshd_config',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '#	$OpenBSD: sshd_config,v 1.103 2018/04/09 20:41:22 tj Exp $',
          '# This is the sshd server system-wide configuration file.  See',
          '# sshd_config(5) for more information.',
          '# This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin',
          '# The strategy used for options in the default sshd_config shipped with',
          '# OpenSSH is to specify options with their default value where',
          '# possible, but leave them commented.  Uncommented options override the',
          '# default value.',
          'Include /etc/ssh/sshd_config.d/*.conf',
          '#Port 22',
          '#AddressFamily any',
          '#ListenAddress 0.0.0.0',
          '#ListenAddress ::',
          '#HostKey /etc/ssh/ssh_host_rsa_key',
          '#HostKey /etc/ssh/ssh_host_ecdsa_key',
          '#HostKey /etc/ssh/ssh_host_ed25519_key',
          '# Ciphers and keying',
          '#RekeyLimit default none',
          '# Logging',
          '#SyslogFacility AUTH',
          '#LogLevel INFO',
          '# Authentication:',
          '#LoginGraceTime 2m',
          '#PermitRootLogin prohibit-password',
          '#StrictModes yes',
          '#MaxAuthTries 6',
          '#MaxSessions 10',
          '#PubkeyAuthentication yes',
          '# Expect .ssh/authorized_keys2 to be disregarded by default in future.',
          '#AuthorizedKeysFile	.ssh/authorized_keys .ssh/authorized_keys2',
          '#AuthorizedPrincipalsFile none',
          '#AuthorizedKeysCommand none',
          '#AuthorizedKeysCommandUser nobody',
          '# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts',
          '#HostbasedAuthentication no',
          '# Change to yes if you don\'t trust ~/.ssh/known_hosts for',
          '# HostbasedAuthentication',
          '#IgnoreUserKnownHosts no',
          '# Don\'t read the user\'s ~/.rhosts and ~/.shosts files',
          '#IgnoreRhosts yes',
          '# To disable tunneled clear text passwords, change to no here!',
          '#PasswordAuthentication yes',
          '#PermitEmptyPasswords no',
          '# Change to yes to enable challenge-response passwords (beware issues with',
          '# some PAM modules and threads)',
          'ChallengeResponseAuthentication no',
          '# Kerberos options',
          '#KerberosAuthentication no',
          '#KerberosOrLocalPasswd yes',
          '#KerberosTicketCleanup yes',
          '#KerberosGetAFSToken no',
          '# GSSAPI options',
          '#GSSAPIAuthentication no',
          '#GSSAPICleanupCredentials yes',
          '#GSSAPIStrictAcceptorCheck yes',
          '#GSSAPIKeyExchange no',
          '# Set this to \'yes\' to enable PAM authentication, account processing,',
          '# and session processing. If this is enabled, PAM authentication will',
          '# be allowed through the ChallengeResponseAuthentication and',
          '# PasswordAuthentication.  Depending on your PAM configuration,',
          '# PAM authentication via ChallengeResponseAuthentication may bypass',
          '# the setting of "PermitRootLogin without-password".',
          '# If you just want the PAM account and session checks to run without',
          '# PAM authentication, then enable this but set PasswordAuthentication',
          '# and ChallengeResponseAuthentication to \'no\'.',
          'UsePAM yes',
          '#AllowAgentForwarding yes',
          '#AllowTcpForwarding yes',
          '#GatewayPorts no',
          'X11Forwarding yes',
          '#X11DisplayOffset 10',
          '#X11UseLocalhost yes',
          '#PermitTTY yes',
          'PrintMotd no',
          '#PrintLastLog yes',
          '#TCPKeepAlive yes',
          '#PermitUserEnvironment no',
          '#Compression delayed',
          '#ClientAliveInterval 0',
          '#ClientAliveCountMax 3',
          '#UseDNS no',
          '#PidFile /var/run/sshd.pid',
          '#MaxStartups 10:30:100',
          '#PermitTunnel no',
          '#ChrootDirectory none',
          '#VersionAddendum none',
          '# no default banner path',
          '#Banner none',
          '# Allow client to pass locale environment variables',
          'AcceptEnv LANG LC_*',
          '# override default of no subsystems',
          'Subsystem	sftp	/usr/lib/openssh/sftp-server',
          '# Example of overriding settings on a per-user basis',
          '#Match User anoncvs',
          '#	X11Forwarding no',
          '#	AllowTcpForwarding no',
          '#	PermitTTY no',
          '#	ForceCommand cvs server',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>With this file we can change the configuration of how <code>SSH</code> works on our computer. For example we can see a commented line that says</p>
      <div class="highlight"><pre><span></span><span class="c1">#Port 22</span>
      </pre></div>
      <p>If we uncomment it and change the <code>SSH</code> number, it will no longer go to port 22, which is its default port, and will go to the port number specified there.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="File-copying-by-SSH">File copying by <code>SSH</code><a class="anchor-link" href="#File-copying-by-SSH"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 46" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can copy files by <code>SSH</code> using the <code>scp</code> (secure copy) command, the syntax is as follows</p>
      <div class="highlight"><pre><span></span>scp<span class="w"> </span><span class="p">&amp;</span>ltpath<span class="w"> </span><span class="nb">local</span><span class="w"> </span>file<span class="p">&amp;</span>gt<span class="w"> </span><span class="p">&amp;</span>ltuser<span class="p">&amp;</span>gt@<span class="p">&amp;</span>ltIP<span class="p">&amp;</span>gt:<span class="p">&amp;</span>ltpath<span class="w"> </span>to<span class="w"> </span>save<span class="p">&amp;</span>gt
      </pre></div>
      <p>o</p>
      <div class="highlight"><pre><span></span>scp<span class="w"> </span><span class="p">&amp;</span>ltuser<span class="p">&amp;</span>gt@<span class="o">&amp;&amp;</span>ltip<span class="p">&amp;</span>gt:<span class="p">&amp;</span>ltpath<span class="w"> </span>to<span class="w"> </span>remote<span class="w"> </span>file<span class="p">&amp;</span>gt<span class="w"> </span><span class="p">&amp;</span>ltpath<span class="w"> </span>to<span class="w"> </span>save<span class="p">&amp;</span>gt
      </pre></div>
      <p>The first way is to copy a file from our computer to another computer and the second way from another computer to ours.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>For example let's do an <code>ls</code> of <code>server1</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>-t<span class="w"> </span>server1<span class="w"> </span><span class="s2">"ls"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'snap',
          'Connection to 194.62.99.222 closed.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Now let's see what we have in stock that we can pass on to you.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          ' 2021-02-11-Introduccion-a-Python.ipynb         html_files',
          ' 2021-04-23-Calculo-matricial-con-Numpy.ipynb   html.ipynb',
          ' 2021-06-15-Manejo-de-datos-con-Pandas.ipynb    introduccion_python',
          ' 2022-09-12-Introduccion-a-la-terminal.ipynb    mi_paquete_de_python',
          ' 2023-01-22-Docker.ipynb		        movies.csv',
          ' 2023-02-01-Bash-scripting.ipynb	        movies.dat',
          ' 2023-02-04-Blip-2.ipynb		        notebooks_translated',
          ' 2023-XX-XX-SSH.ipynb			        __pycache__',
          ' california_housing_train.csv		        scripts_bash',
          ' command-line-cheat-sheet.pdf		        ssh.ipynb',
          ' CSS.ipynb				        test.ipynb',
          '\'Expresiones regulares.ipynb\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We are going to send the <code>html.ipynb</code> file to the server since it occupies little space.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>scp<span class="w"> </span>html.ipynb<span class="w"> </span>server1:/root/',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'html.ipynb                                    100%   14KB 229.0KB/s   00:00    ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Let's go back to see what is inside <code>server1</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>-t<span class="w"> </span>server1<span class="w"> </span><span class="s2">"ls"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'html.ipynb  snap',
          'Connection to 194.62.99.222 closed.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Copied</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Synchronization-of-files-by-SSH.">Synchronization of files by <code>SSH</code>.<a class="anchor-link" href="#Synchronization-of-files-by-SSH."><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 47" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>The bad thing about the <code>scp</code> command is that if something happens in the middle of the copy and the file is not copied, when you try again you have to start from scratch, this is especially a problem with very large files.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>To solve this problem you can use <code>rsync</code>, the syntax is</p>
      <div class="highlight"><pre><span></span>rsync<span class="w"> </span>--partial<span class="w"> </span>--progress<span class="w"> </span>--rsh<span class="o">=</span>ssh<span class="w"> </span>&lt;path<span class="w"> </span><span class="nb">local</span><span class="w"> </span>file&gt;<span class="w"> </span>&lt;user&gt;@&lt;IP&gt;:&lt;path<span class="w"> </span>to<span class="w"> </span>save&gt;
      </pre></div>
      <p>o</p>
      <div class="highlight"><pre><span></span>rsync<span class="w"> </span>--partial<span class="w"> </span>--progress<span class="w"> </span>--rsh<span class="o">=</span>ssh<span class="w"> </span>&lt;user&gt;@&lt;ip&gt;:&lt;path<span class="w"> </span>to<span class="w"> </span>remote<span class="w"> </span>file&gt;<span class="w"> </span>&lt;path<span class="w"> </span>to<span class="w"> </span>save&gt;
      </pre></div>
      <p>As before, in the first way a file is copied from our computer to another one and in the second way from another one to ours. The <code>--partial</code> flag is to indicate that partially copied files are saved, that is to say, if the copy is stopped before it finishes, that what has been copied is kept. The <code>--progress</code> flag is to indicate to show the progress of the copy. The <code>--rsh=ssh</code> flag is to indicate that the file transfer is done over <code>SSH</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We pass a file</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>rsync<span class="w"> </span>--partial<span class="w"> </span>--progress<span class="w"> </span>-rsh<span class="o">=</span>ssh<span class="w"> </span><span class="m">2021</span>-06-15-Manejo-de-datos-con-Pandas.ipynb<span class="w">  </span>server1:/root/',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'sending incremental file list',
          '2021-06-15-Manejo-de-datos-con-Pandas.ipynb',
          '        608.34K 100%  197.78MB/s    0:00:00 (xfr#1, to-chk=0/1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>And we see if it has been copied</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ssh<span class="w"> </span>-t<span class="w"> </span>server1<span class="w"> </span><span class="s2">"ls"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2021-06-15-Manejo-de-datos-con-Pandas.ipynb  html.ipynb  snap',
          'Connection to 194.62.99.222 closed.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Mount-remote-folders-on-local">Mount remote folders on local<a class="anchor-link" href="#Mount-remote-folders-on-local"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 48" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>In case we want to have a folder from another machine as if it were on our computer we have to uasr <code>sshfs</code>.</p>
      <p>First it is necessary to install it by means of</p>
      <div class="highlight"><pre><span></span>sudo<span class="w"> </span>apt<span class="w"> </span>install<span class="w"> </span>sshfs
      </pre></div>
      <p>And once it is installed, it is used with the syntax</p>
      <div class="highlight"><pre><span></span>sshfs<span class="w"> </span><span class="p">&amp;</span>ltuser<span class="o">&amp;&amp;</span>gt@<span class="o">&amp;&amp;</span>ltip<span class="p">&amp;</span>gt:<span class="p">&amp;</span>ltremote<span class="w"> </span>path<span class="p">&amp;</span>gt<span class="w"> </span><span class="p">&amp;</span>ltlocal<span class="w"> </span>path<span class="w"> </span>to<span class="w"> </span>mount<span class="p">&amp;</span>gt
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We are going to mount the <code>/root</code> folder of <code>server1</code>, but for this we will first create a folder in which we are going to mount it</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>server1folder',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>We can see that there is nothing inside the folder we have created</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>server1folder',
      '<span></span><span class="o">!</span>ls<span class="w"> </span>server1folder',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Now we mount the server folder</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>server1folder',
      '<span></span><span class="o">!</span>ls<span class="w"> </span>server1folder',
      '<span></span><span class="o">!!</span>sshfs<span class="w"> </span>server1:/root/<span class="w"> </span>server1folder',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Back to see what's inside</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>mkdir<span class="w"> </span>server1folder',
          '</span><span class="o">!</span>ls<span class="w"> </span>server1folder',
          '</span><span class="o">!!</span>sshfs<span class="w"> </span>server1:/root/<span class="w"> </span>server1folder',
          '</span><span class="o">!</span>ls<span class="w"> </span>server1folder',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2021-06-15-Manejo-de-datos-con-Pandas.ipynb  html.ipynb  snap',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>When we no longer want to have the folder mounted we can unmount it by <code>fusermount -u server1folder</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!!</span>fusermount<span class="w"> </span>-u<span class="w"> </span>server1folder',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>We look again at what is inside to see that there is nothing.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!!</span>fusermount<span class="w"> </span>-u<span class="w"> </span>server1folder',
      '<span></span><span class="o">!</span>ls<span class="w"> </span>server1folder',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h2 id="Debugging-SSH-connection">Debugging <code>SSH</code> connection<a class="anchor-link" href="#Debugging-SSH-connection"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 49" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>We can debug the <code>SSH</code> connection by adding from <code>-v</code>, up to <code>-vvvv</code> to the connection, the more <code>v</code>s we add the higher level of information.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!!</span>fusermount<span class="w"> </span>-u<span class="w"> </span>server1folder',
          '</span><span class="o">!</span>ls<span class="w"> </span>server1folder',
          '</span><span class="o">!</span>ssh<span class="w"> </span>-v<span class="w"> </span>server1',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'OpenSSH_8.2p1 Ubuntu-4ubuntu0.5, OpenSSL 1.1.1f  31 Mar 2020',
          'debug1: Reading configuration data /home/wallabot/.ssh/config',
          'debug1: /home/wallabot/.ssh/config line 6: Applying options for server1',
          'debug1: Reading configuration data /etc/ssh/ssh_config',
          'debug1: /etc/ssh/ssh_config line 19: include /etc/ssh/ssh_config.d/*.conf matched no files',
          'debug1: /etc/ssh/ssh_config line 21: Applying options for *',
          'debug1: Connecting to 194.62.99.222 [194.62.99.222] port 22.',
          'debug1: Connection established.',
          'debug1: identity file /home/wallabot/.ssh/id_rsa type 0',
          'debug1: identity file /home/wallabot/.ssh/id_rsa-cert type -1',
          'debug1: identity file /home/wallabot/.ssh/id_dsa type -1',
          'debug1: identity file /home/wallabot/.ssh/id_dsa-cert type -1',
          'debug1: identity file /home/wallabot/.ssh/id_ecdsa type -1',
          'debug1: identity file /home/wallabot/.ssh/id_ecdsa-cert type -1',
          'debug1: identity file /home/wallabot/.ssh/id_ecdsa_sk type -1',
          'debug1: identity file /home/wallabot/.ssh/id_ecdsa_sk-cert type -1',
          'debug1: identity file /home/wallabot/.ssh/id_ed25519 type -1',
          'debug1: identity file /home/wallabot/.ssh/id_ed25519-cert type -1',
          'debug1: identity file /home/wallabot/.ssh/id_ed25519_sk type -1',
          'debug1: identity file /home/wallabot/.ssh/id_ed25519_sk-cert type -1',
          'debug1: identity file /home/wallabot/.ssh/id_xmss type -1',
          'debug1: identity file /home/wallabot/.ssh/id_xmss-cert type -1',
          'debug1: Local version string SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5',
          'debug1: Remote protocol version 2.0, remote software version OpenSSH_8.9p1 Ubuntu-3',
          'debug1: match: OpenSSH_8.9p1 Ubuntu-3 pat OpenSSH* compat 0x04000000',
          'debug1: Authenticating to 194.62.99.222:22 as \'root\'',
          'debug1: SSH2_MSG_KEXINIT sent',
          'debug1: SSH2_MSG_KEXINIT received',
          'debug1: kex: algorithm: curve25519-sha256',
          'debug1: kex: host key algorithm: ecdsa-sha2-nistp256',
          'debug1: kex: server-&gt;client cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none',
          'debug1: kex: client-&gt;server cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none',
          'debug1: expecting SSH2_MSG_KEX_ECDH_REPLY',
          'debug1: Server host key: ecdsa-sha2-nistp256 SHA256:jwpQt2a69LQcuvvYPPKL32bBwTi1Je/ZmUdr4zEiD1Y',
          'debug1: Host \'194.62.99.222\' is known and matches the ECDSA host key.',
          'debug1: Found key in /home/wallabot/.ssh/known_hosts:14',
          'debug1: rekey out after 134217728 blocks',
          'debug1: SSH2_MSG_NEWKEYS sent',
          'debug1: expecting SSH2_MSG_NEWKEYS',
          'debug1: SSH2_MSG_NEWKEYS received',
          'debug1: rekey in after 134217728 blocks',
          'debug1: Will attempt key: /home/wallabot/.ssh/id_rsa RSA SHA256:ID3HcrbyPBGjFx/qeiJK50eqihLGrpDVu02oRSyKGh4 agent',
          'debug1: Will attempt key: wallabot@wallabot RSA SHA256:Qlq6hXbToInW+efEK666BFT26EeUSpBhzcqxTLrDBpQ agent',
          'debug1: Will attempt key: /home/wallabot/.ssh/id_dsa ',
          'debug1: Will attempt key: /home/wallabot/.ssh/id_ecdsa ',
          'debug1: Will attempt key: /home/wallabot/.ssh/id_ecdsa_sk ',
          'debug1: Will attempt key: /home/wallabot/.ssh/id_ed25519 ',
          'debug1: Will attempt key: /home/wallabot/.ssh/id_ed25519_sk ',
          'debug1: Will attempt key: /home/wallabot/.ssh/id_xmss ',
          'debug1: SSH2_MSG_EXT_INFO received',
          'debug1: kex_input_ext_info: server-sig-algs=&lt;ssh-ed25519,sk-ssh-ed25519@openssh.com,ssh-rsa,rsa-sha2-256,rsa-sha2-512,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,sk-ecdsa-sha2-nistp256@openssh.com,webauthn-sk-ecdsa-sha2-nistp256@openssh.com&gt;',
          'debug1: kex_input_ext_info: publickey-hostbound@openssh.com (unrecognised)',
          'debug1: SSH2_MSG_SERVICE_ACCEPT received',
          'debug1: Authentications that can continue: publickey',
          'debug1: Next authentication method: publickey',
          'debug1: Offering public key: /home/wallabot/.ssh/id_rsa RSA SHA256:ID3HcrbyPBGjFx/qeiJK50eqihLGrpDVu02oRSyKGh4 agent',
          'debug1: Authentications that can continue: publickey',
          'debug1: Offering public key: wallabot@wallabot RSA SHA256:Qlq6hXbToInW+efEK666BFT26EeUSpBhzcqxTLrDBpQ agent',
          'debug1: Server accepts key: wallabot@wallabot RSA SHA256:Qlq6hXbToInW+efEK666BFT26EeUSpBhzcqxTLrDBpQ agent',
          'debug1: Authentication succeeded (publickey).',
          'Authenticated to 194.62.99.222 ([194.62.99.222]:22).',
          'debug1: channel 0: new [client-session]',
          'debug1: Requesting no-more-sessions@openssh.com',
          'debug1: Entering interactive session.',
          'debug1: pledge: network',
          'debug1: client_input_global_request: rtype hostkeys-00@openssh.com want_reply 0',
          'debug1: Remote: /root/.ssh/authorized_keys:1: key options: agent-forwarding port-forwarding pty user-rc x11-forwarding',
          'debug1: Remote: /root/.ssh/authorized_keys:1: key options: agent-forwarding port-forwarding pty user-rc x11-forwarding',
          'debug1: Sending environment.',
          'debug1: Sending env LANG = es_ES.UTF-8',
          'Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-60-generic x86_64)',
          ' * Documentation:  https://help.ubuntu.com',
          ' * Management:     https://landscape.canonical.com',
          ' * Support:        https://ubuntu.com/advantage',
          '  System information as of Fri Feb 24 01:25:10 PM UTC 2023',
          '  System load:           0.0',
          '  Usage of /:            15.2% of 24.53GB',
          '  Memory usage:          34%',
          '  Swap usage:            0%',
          '  Processes:             89',
          '  Users logged in:       0',
          '  IPv4 address for eth0: 194.62.99.222',
          '  IPv4 address for eth1: 10.7.0.168',
          '  IPv6 address for eth2: 2a04:3542:8000:1000:d48a:cbff:fefb:5b1',
          ' * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s',
          '   just raised the bar for easy, resilient and secure K8s cluster deployment.',
          '   https://ubuntu.com/engage/secure-kubernetes-at-the-edge',
          '43 updates can be applied immediately.',
          'To see these additional updates run: apt list --upgradable',
          'Last login: Fri Feb 24 13:10:05 2023 from 188.127.184.59',
          ']0;root@server1: ~<span class="ansi-green-intense-fg ansi-bold">root@server1</span>:<span class="ansi-blue-intense-fg ansi-bold">~</span># ^C',
          ']0;root@server1: ~<span class="ansi-green-intense-fg ansi-bold">root@server1</span>:<span class="ansi-blue-intense-fg ansi-bold">~</span># ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      






    </div>

  </section>

</PostLayout>
