---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Single-element tuples in Python';
const end_url = 'tips/single-element-tuples';
const description = 'Tip to create single-element tuples in Python';
const keywords = 'tuples, python, single-element';
const languaje = 'EN';
const image_path = 'https://images.maximofn.com/single-element-tuples.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1280
    image_height=720
    image_extension=webp
    article_date=2024-09-09+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Single-Element-Tuples">Single Element Tuples<a class="anchor-link" href="#Single-Element-Tuples"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 1" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Disclaimer: This post has been translated to English using a machine translation model. Please, let me know if you find any mistakes.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>If in Python we want to create a list with a single element, we simply write the element between square brackets, for example:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
          '<span class="nb">type</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'list',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>However, with tuples we cannot write an element within parentheses</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
          '<span class="nb">type</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'int',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we can see, Python interprets it as an integer, not as a tuple. To solve this, a comma is added after the element, for example:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,)</span>',
          '<span class="nb">type</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'tuple',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>What is this for? When we have a function that returns several parameters, what it is actually returning is a tuple. So, it may happen that we have a code that calls a function, checks the length of the returned tuple, and processes each element of the tuple. Let's look at an example</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">return_tuple</span><span class="p">():</span>',
          '    <span class="k">return</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span>',
          '',
          '<span class="k">def</span> <span class="nf">process_tuple</span><span class="p">():</span>',
          '    <span class="nb">tuple</span> <span class="o">=</span> <span class="n">return_tuple</span><span class="p">()</span>',
          '    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">tuple</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>',
          '',
          '<span class="n">process_tuple</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1',
          '2',
          '3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>But, what happens in this example if the function doesn't return a tuple? We would get an error</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">return_int</span><span class="p">():</span>',
          '    <span class="k">return</span> <span class="mi">1</span>',
          '',
          '<span class="k">def</span> <span class="nf">process_tuple</span><span class="p">():</span>',
          '    <span class="nb">tuple</span> <span class="o">=</span> <span class="n">return_int</span><span class="p">()</span>',
          '    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">tuple</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>',
          '',
          '<span class="n">process_tuple</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-red-fg">---------------------------------------------------------------------------</span>',
          '<span class="ansi-red-fg">TypeError</span>                                 Traceback (most recent call last)',
          'Cell <span class="ansi-green-fg">In[5], line 9</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      6</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">for</span> i <span class="ansi-bold" style="color: rgb(175,0,255)">in</span> <span style="color: rgb(0,135,0)">tuple</span>:',
          '<span class="ansi-green-intense-fg ansi-bold">      7</span>         <span style="color: rgb(0,135,0)">print</span>(i)',
          '<span class="ansi-green-fg">----&gt; 9</span> process_tuple()',
          'Cell <span class="ansi-green-fg">In[5], line 6</span>, in <span class="ansi-cyan-fg">process_tuple</span><span class="ansi-blue-fg">()</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      4</span> <span class="ansi-bold" style="color: rgb(0,135,0)">def</span> <span style="color: rgb(0,0,255)">process_tuple</span>():',
          '<span class="ansi-green-intense-fg ansi-bold">      5</span>     <span style="color: rgb(0,135,0)">tuple</span> <span style="color: rgb(98,98,98)">=</span> return_int()',
          '<span class="ansi-green-fg">----&gt; 6</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">for</span> i <span class="ansi-bold" style="color: rgb(175,0,255)">in</span> <span style="color: rgb(0,135,0)">tuple</span>:',
          '<span class="ansi-green-intense-fg ansi-bold">      7</span>         <span style="color: rgb(0,135,0)">print</span>(i)',
          '<span class="ansi-red-fg">TypeError</span>: \'int\' object is not iterable',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>We get an error because Python tries to iterate through what the function returns, but since it returns an integer it can't iterate through it. We have two ways to solve this, one is that the processing function checks if a tuple has been returned and in that case processes it, another is that the function that returns values always returns a tuple, even if it is a single element.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">return_int</span><span class="p">():</span>',
          '    <span class="k">return</span> <span class="mi">1</span><span class="p">,</span>',
          '',
          '<span class="k">def</span> <span class="nf">process_tuple</span><span class="p">():</span>',
          '    <span class="nb">tuple</span> <span class="o">=</span> <span class="n">return_int</span><span class="p">()</span>',
          '    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">tuple</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>',
          '',
          '<span class="n">process_tuple</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As we see, in the <code>return_int</code> function a <code>,</code> has been placed at the end of the <code>return</code>, so it is returning a tuple with a single element, which is why the <code>process_tuple</code> function will not give an error.</p>
      </section>
      






    </div>

  </section>

</PostLayout>
