---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Florence-2';
const end_url = 'florence-2';
const description = '¬°Atenci√≥n todos! üö® ¬°Tenemos un nuevo rey en la ciudad! üëë Florence-2, el modelo multimodal que est√° revolucionando el juego de la inteligencia artificial. ü§Ø Con solo 200M de par√°metros en su versi√≥n base (o 700M en su versi√≥n large, para los que quieren con todo üí•), este modelo est√° arrasando en los benchmarks, superando a los modelos con 10 y 100 veces m√°s par√°metros. ü§Ø ¬°Es como si tuvieras una navaja suiza en tu toolkit de AI! üó°Ô∏è Modifica el prompt y listo, Florence-2 se adapta a cualquier tarea que necesites. üîß En resumen, Florence-2 es el nuevo modelo SOTA (State-Of-The-Art) en los MLLM (Multimodal Language Models) y no te puedes perder. üöÄ ¬°Vamos a ver qu√© otras sorpresas tiene guardadas esta bestia! ü§î';
const keywords = 'florence 2, florence-2, microsoft, multimodal, slm, mllm, smlm';
const languaje = 'ES';
const image_path = 'https://images.maximofn.com/Florence-2_thumnail.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1920
    image_height=1440
    image_extension=webp
    article_date=2024-06-23+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Paper"><h2>Paper</h2></a>
      <a class="anchor-link" href="#Resumen del paper"><h2>Resumen del paper</h2></a>
      <a class="anchor-link" href="#Arquitectura"><h2>Arquitectura</h2></a>
      <a class="anchor-link" href="#Codificador de vision"><h3>Codificador de visi√≥n</h3></a>
      <a class="anchor-link" href="#Codificador-decodificador multimodal"><h3>Codificador-decodificador multimodal</h3></a>
      <a class="anchor-link" href="#Objetivo de optimizacion"><h3>Objetivo de optimizaci√≥n</h3></a>
      <a class="anchor-link" href="#Dataset"><h2>Dataset</h2></a>
      <a class="anchor-link" href="#Recopilacion de las imagenes"><h3>Recopilaci√≥n de las im√°genes</h3></a>
      <a class="anchor-link" href="#Etiquetado de las imagenes"><h3>Etiquetado de las im√°genes</h3></a>
      <a class="anchor-link" href="#Entrenamiento"><h2>Entrenamiento</h2></a>
      <a class="anchor-link" href="#Resultados"><h2>Resultados</h2></a>
      <a class="anchor-link" href="#Evaluacion zero-shot"><h3>Evaluaci√≥n zero-shot</h3></a>
      <a class="anchor-link" href="#Modelo generalista con datos supervisados publicos"><h3>Modelo generalista con datos supervisados p√∫blicos</h3></a>
      <a class="anchor-link" href="#Modelos disponibles"><h2>Modelos disponibles</h2></a>
      <a class="anchor-link" href="#Tareas definidas por el prompt"><h2>Tareas definidas por el prompt</h2></a>
      <a class="anchor-link" href="#Uso de Florence-2 large"><h2>Uso de Florence-2 large</h2></a>
      <a class="anchor-link" href="#Tareas sin prompt adicionales"><h3>Tareas sin prompt adicionales</h3></a>
      <a class="anchor-link" href="#Caption"><h4>Caption</h4></a>
      <a class="anchor-link" href="#Region proposal"><h4>Region proposal</h4></a>
      <a class="anchor-link" href="#Object detection"><h4>Object detection</h4></a>
      <a class="anchor-link" href="#Dense region caption"><h4>Dense region caption</h4></a>
      <a class="anchor-link" href="#Tareas con prompt adicionales"><h3>Tareas con prompt adicionales</h3></a>
      <a class="anchor-link" href="#Phrase Grounding"><h4>Phrase Grounding</h4></a>
      <a class="anchor-link" href="#Referring expression segmentation"><h4>Referring expression segmentation</h4></a>
      <a class="anchor-link" href="#Region to segmentation"><h4>Region to segmentation</h4></a>
      <a class="anchor-link" href="#Open vocabulary detection"><h4>Open vocabulary detection</h4></a>
      <a class="anchor-link" href="#Region to category"><h4>Region to category</h4></a>
      <a class="anchor-link" href="#Region to description"><h4>Region to description</h4></a>
      <a class="anchor-link" href="#Tareas OCR"><h3>Tareas OCR</h3></a>
      <a class="anchor-link" href="#OCR"><h4>OCR</h4></a>
      <a class="anchor-link" href="#OCR with region"><h4>OCR with region</h4></a>
      <a class="anchor-link" href="#Uso de Florence-2 large fine tuning"><h2>Uso de Florence-2 large fine tuning</h2></a>
      <a class="anchor-link" href="#Tareas sin prompt adicionales"><h3>Tareas sin prompt adicionales</h3></a>
      <a class="anchor-link" href="#Caption"><h4>Caption</h4></a>
      <a class="anchor-link" href="#Region proposal"><h4>Region proposal</h4></a>
      <a class="anchor-link" href="#Object detection"><h4>Object detection</h4></a>
      <a class="anchor-link" href="#Dense region caption"><h4>Dense region caption</h4></a>
      <a class="anchor-link" href="#Tareas con prompt adicionales"><h3>Tareas con prompt adicionales</h3></a>
      <a class="anchor-link" href="#Phrase Grounding"><h4>Phrase Grounding</h4></a>
      <a class="anchor-link" href="#Referring expression segmentation"><h4>Referring expression segmentation</h4></a>
      <a class="anchor-link" href="#Region to segmentation"><h4>Region to segmentation</h4></a>
      <a class="anchor-link" href="#Open vocabulary detection"><h4>Open vocabulary detection</h4></a>
      <a class="anchor-link" href="#Region to category"><h4>Region to category</h4></a>
      <a class="anchor-link" href="#Region to description"><h4>Region to description</h4></a>
      <a class="anchor-link" href="#Tareas OCR"><h3>Tareas OCR</h3></a>
      <a class="anchor-link" href="#OCR"><h4>OCR</h4></a>
      <a class="anchor-link" href="#OCR with region"><h4>OCR with region</h4></a>
      <a class="anchor-link" href="#Uso de Florence-2 base"><h2>Uso de Florence-2 base</h2></a>
      <a class="anchor-link" href="#Tareas sin prompt adicionales"><h3>Tareas sin prompt adicionales</h3></a>
      <a class="anchor-link" href="#Caption"><h4>Caption</h4></a>
      <a class="anchor-link" href="#Region proposal"><h4>Region proposal</h4></a>
      <a class="anchor-link" href="#Object detection"><h4>Object detection</h4></a>
      <a class="anchor-link" href="#Dense region caption"><h4>Dense region caption</h4></a>
      <a class="anchor-link" href="#Tareas con prompt adicionales"><h3>Tareas con prompt adicionales</h3></a>
      <a class="anchor-link" href="#Phrase Grounding"><h4>Phrase Grounding</h4></a>
      <a class="anchor-link" href="#Referring expression segmentation"><h4>Referring expression segmentation</h4></a>
      <a class="anchor-link" href="#Region to segmentation"><h4>Region to segmentation</h4></a>
      <a class="anchor-link" href="#Open vocabulary detection"><h4>Open vocabulary detection</h4></a>
      <a class="anchor-link" href="#Region to category"><h4>Region to category</h4></a>
      <a class="anchor-link" href="#Region to description"><h4>Region to description</h4></a>
      <a class="anchor-link" href="#Tareas OCR"><h3>Tareas OCR</h3></a>
      <a class="anchor-link" href="#OCR"><h4>OCR</h4></a>
      <a class="anchor-link" href="#OCR with region"><h4>OCR with region</h4></a>
      <a class="anchor-link" href="#Uso de Florence-2 base fine tuning"><h2>Uso de Florence-2 base fine tuning</h2></a>
      <a class="anchor-link" href="#Tareas sin prompt adicionales"><h3>Tareas sin prompt adicionales</h3></a>
      <a class="anchor-link" href="#Caption"><h4>Caption</h4></a>
      <a class="anchor-link" href="#Region proposal"><h4>Region proposal</h4></a>
      <a class="anchor-link" href="#Object detection"><h4>Object detection</h4></a>
      <a class="anchor-link" href="#Dense region caption"><h4>Dense region caption</h4></a>
      <a class="anchor-link" href="#Tareas con prompt adicionales"><h3>Tareas con prompt adicionales</h3></a>
      <a class="anchor-link" href="#Phrase Grounding"><h4>Phrase Grounding</h4></a>
      <a class="anchor-link" href="#Referring expression segmentation"><h4>Referring expression segmentation</h4></a>
      <a class="anchor-link" href="#Region to segmentation"><h4>Region to segmentation</h4></a>
      <a class="anchor-link" href="#Open vocabulary detection"><h4>Open vocabulary detection</h4></a>
      <a class="anchor-link" href="#Region to category"><h4>Region to category</h4></a>
      <a class="anchor-link" href="#Region to description"><h4>Region to description</h4></a>
      <a class="anchor-link" href="#Tareas OCR"><h3>Tareas OCR</h3></a>
      <a class="anchor-link" href="#OCR"><h4>OCR</h4></a>
      <a class="anchor-link" href="#OCR with region"><h4>OCR with region</h4></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Paper">Paper<a class="anchor-link" href="#Paper"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 1" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><a href="https://arxiv.org/abs/2311.06242" target="_blank" rel="nofollow noreferrer">Florence-2: Advancing a Unified Representation for a Variety of Vision Tasks</a> es el paper de Florence-2.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Resumen del paper">Resumen del paper<a class="anchor-link" href="#Resumen del paper"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 2" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Florence-2 es un modelo fundacional de visi√≥n con una representaci√≥n unificada, se basa en prompts, para una variedad de tareas de visi√≥n y visi√≥n-lenguaje.</p>
      <p>Los modelos grandes de visi√≥n existentes son buenos en el aprendizaje por transferencia, pero tienen dificultades para realizar una diversidad de tareas con instrucciones simples. Florence-2 fue dise√±ado para tomar prompts de texto como instrucciones de tareas y generar resultados en forma de texto, detecci√≥n de objetos, grounding (relacionar palabras o frases de un lenguaje natural con regiones espec√≠ficas de una imagen) o segmentaci√≥n</p>
      <p>Para poder entrenar el modelo, crearon el dataset FLD-5B, que tiene 5,4 mil millones de anotaciones visuales completas en 126 millones de im√°genes. Este dataset fue entrenado por dos m√≥dulos de procesamiento eficientes.</p>
      <p>El primer m√≥dulo utiliza modelos especializados para anotar im√°genes de forma colaborativa y aut√≥noma, en vez de el m√©todo de anotaci√≥n √∫nica y manual. M√∫ltiples modelos trabajan juntos para llegar a un consenso, que recuerda al concepto de la sabidur√≠a de las multitudes, asegurando una comprensi√≥n de la imagen m√°s confiable e imparcial.</p>
      <p>El segundo m√≥dulo refina y filtra iterativamente estas anotaciones automatizadas utilizando modelos fundamentales bien entrenados.</p>
      <p>El modelo es capaz de realizar una variedad de tareas, como la detecci√≥n de objetos, el subtitulado y el grounding, todo dentro de un √∫nico modelo. La activaci√≥n de la tarea se logra a trav√©s de prompts de texto</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para desarrollar un modelo b√°sico de visi√≥n vers√°til. Para ello el m√©todo de entrenamiento del modelo incorpora tres objetivos de aprendizaje distintos, cada uno de los cuales aborda un nivel diferente de granularidad y comprensi√≥n sem√°ntica:</p>
      <ul>
        <li><strong>Las tareas de comprensi√≥n a nivel de imagen</strong> capturan la sem√°ntica de alto nivel y fomentan una comprensi√≥n integral de las im√°genes a trav√©s de descripciones ling√º√≠sticas. Permiten que el modelo comprenda el contexto general de una imagen y capte las relaciones sem√°nticas y los matices contextuales en el dominio del lenguaje. Las tareas ejemplares incluyen la clasificaci√≥n de im√°genes, el subtitulado y la respuesta a preguntas visuales.</li>
        <li><strong>Las tareas de reconocimiento a nivel de regi√≥n/p√≠xel</strong> facilitan la localizaci√≥n detallada de objetos y entidades dentro de las im√°genes, capturando las relaciones entre los objetos y su contexto espacial. Las tareas incluyen la detecci√≥n de objetos, la segmentaci√≥n y la comprensi√≥n de expresiones de referencia.</li>
        <li><strong>Las tareas de alineaci√≥n visual-sem√°ntica de grano fino</strong> requieren una comprensi√≥n de grano fino tanto del texto como de la imagen. Implica localizar las regiones de la imagen que corresponden a las frases de texto, como objetos, atributos o relaciones. Estas tareas desaf√≠an la capacidad de capturar los detalles locales de las entidades visuales y sus contextos sem√°nticos, as√≠ como las interacciones entre los elementos textuales y visuales.</li>
      </ul>
      <p>Al combinar estos tres objetivos de aprendizaje en un marco de aprendizaje multitarea, el modelo aprende a manejar diferentes niveles de detalle y comprensi√≥n sem√°ntica.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Arquitectura">Arquitectura<a class="anchor-link" href="#Arquitectura"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 3" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El modelo emplea una arquitectura de secuencia a secuencia (seq2seq), que integra un codificador de imagen y un codificador-decodificador multimodal</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/Florence-2_architecture-2.webp" alt="Florence-2 architecture">
      <p>Como al modelo le van a entrar im√°genes y prompts, tiene un codificador de imagen para obtener los embeddings de la imagen, por otro lado se pasan los prompts por un tokenizador y embedding de texto y localizaci√≥n. Se concatenan los embeddings de la imagen y del prompt y se pasa por un transformer para obtener los tokens del texto de salida y la localizaci√≥n en la imagen. Finalmente se pasa por un decodificador de texto y localizaci√≥n para obtener los resultados.</p>
      <p>Al codificador-decodificador (transformer) del texto m√°s las posiciones le denominan codificador-decodificador multimodal.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al extender el vocabulario del tokenizador para incluir tokens de ubicaci√≥n, se permite que el modelo procese informaci√≥n espec√≠fica de la regi√≥n del objeto en un formato de aprendizaje unificado, es decir, mediante un √∫nico modelo. Esto elimina la necesidad de dise√±ar cabezas espec√≠ficas para diferentes tareas y permite un enfoque m√°s centrado en los datos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Crearon 2 modelos, Florence-2 Base y Florence-2 Large. Florence-2 Base tiene 232B de par√°metros y Florence-2 Large tiene 771B de par√°metros. Cada uno tiene estos tama√±os</p>
      <table>
        <thead>
          <tr>
            <th>Model</th>
            <th>Image Encoder (DaViT)</th>
            <th>Image Encoder (DaViT)</th>
            <th>Image Encoder (DaViT)</th>
            <th>Image Encoder (DaViT)</th>
            <th>Encoder-Decoder (Transformer)</th>
            <th>Encoder-Decoder (Transformer)</th>
            <th>Encoder-Decoder (Transformer)</th>
            <th>Encoder-Decoder (Transformer)</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td></td>
            <td>dimensions</td>
            <td>blocks</td>
            <td>heads/groups</td>
            <td>#params</td>
            <td>encoder layers</td>
            <td>decoder layers</td>
            <td>dimensions</td>
            <td>#params</td>
          </tr>
          <tr>
            <td>Florence-2-B</td>
            <td>[128, 256, 512, 1024]</td>
            <td>[1, 1, 9, 1]</td>
            <td>[4, 8, 16, 32]</td>
            <td>90M</td>
            <td>6</td>
            <td>6</td>
            <td>768</td>
            <td>140M</td>
          </tr>
          <tr>
            <td>Florence-2-L</td>
            <td>[256, 512, 1024, 2048]</td>
            <td>[1, 1, 9, 1]</td>
            <td>[8, 16, 32, 64]</td>
            <td>360M</td>
            <td>12</td>
            <td>12</td>
            <td>1024</td>
            <td>410M</td>
          </tr>
        </tbody>
      </table>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Codificador de vision">Codificador de visi√≥n<a class="anchor-link" href="#Codificador de vision"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 4" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Usaron DaViT como codificador de visi√≥n. Procesa una imagen de entrada a embeddings visuales aplanados (N<sub>v</sub>√óD<sub>v</sub>), donde N<sub>v</sub> y D<sub>v</sub> representan el n√∫mero de embeddings y la dimensi√≥n de los embeddings visuales, respectivamente.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Codificador-decodificador multimodal">Codificador-decodificador multimodal<a class="anchor-link" href="#Codificador-decodificador multimodal"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 5" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Utilizaron una arquitectura transformador est√°ndar para procesar los embeddings visuales y de lenguaje</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Objetivo de optimizacion">Objetivo de optimizaci√≥n<a class="anchor-link" href="#Objetivo de optimizacion"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 6" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Dada una entrada x (combinaci√≥n de la imagen y el prompt), y el objetivo y, usaron el modelado de lenguaje est√°ndar con p√©rdida de entrop√≠a cruzada para todas las tareas</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Dataset">Dataset<a class="anchor-link" href="#Dataset"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 7" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Crearon el conjunto de datos FLD-5B que incluye 126 millones de im√°genes, 500 millones de anotaciones de texto y 1.3 mil millones de anotaciones de texto-regi√≥n, y 3.6 mil millones de anotaciones de texto-frase-regi√≥n en diferentes tareas</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Recopilacion de las imagenes">Recopilaci√≥n de las im√°genes<a class="anchor-link" href="#Recopilacion de las imagenes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 8" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para recopilar las im√°genes usaron im√°genes de los datasets ImageNet-22k, Object 365, Open Images, Conceptual Captions y LAION</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Etiquetado de las imagenes">Etiquetado de las im√°genes<a class="anchor-link" href="#Etiquetado de las imagenes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 9" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El objetivo principal es generar anotaciones que puedan valer para el aprendizaje multitarea de manera efectiva. Para ello crearon tres categor√≠as de anotaciones: texto, pares de texto-regi√≥n y tripletas de texto-frase-regi√≥n.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/Florence-2_Image_annotations.webp" alt="Florence-2 Image annotations">
      <p>El flujo de trabajo de anotaci√≥n de datos consta de tres fases: (1) anotaci√≥n inicial empleando modelos especializados, (2) filtrado de datos para corregir errores y eliminar anotaciones irrelevantes, y (3) un proceso iterativo para el refinamiento de datos.</p>
      <ul>
        <li><strong>Anotaci√≥n inicial con modelos especializados</strong>. Usaron etiquetas sint√©ticas obtenidas de modelos especializados. Estos modelos especializados son una combinaci√≥n de modelos fuera de l√≠nea entrenados en una variedad de conjuntos de datos disponibles p√∫blicamente y servicios en l√≠nea alojados en plataformas en la nube. Est√°n espec√≠ficamente dise√±ados para sobresalir en la anotaci√≥n de sus respectivos tipos de anotaci√≥n. Ciertos conjuntos de datos de im√°genes contienen anotaciones parciales. Por ejemplo, Object 365 ya incluye cuadros delimitadores anotados por humanos y las categor√≠as correspondientes como anotaciones de texto-regi√≥n. En esos casos, fusionaron las anotaciones preexistentes con las etiquetas sint√©ticas generadas por los modelos especializados.</li>
      </ul>
      <ul>
        <li><strong>Filtrado y mejora de datos</strong>. Las anotaciones iniciales obtenidas de los modelos especializados, son susceptibles al ruido y la imprecisi√≥n. Por lo que implementaron un proceso de filtrado. Se centra principalmente en dos tipos de datos en las anotaciones: datos de texto y de regi√≥n. En lo que respecta a las anotaciones textuales, desarrollaron una herramienta de an√°lisis basada en SpaCy para extraer objetos, atributos y acciones. Filtraron textos que contienen objetos excesivos, ya que tienden a introducir ruido y pueden no reflejar con precisi√≥n el contenido real en las im√°genes. Adem√°s, evaluaron la complejidad de las acciones y los objetos midiendo su grado de nodo en el √°rbol de an√°lisis de dependencias. Conservaron textos con una cierta complejidad m√≠nima para garantizar la riqueza de los conceptos visuales en las im√°genes. En relaci√≥n con las anotaciones de regi√≥n, eliminaron los cuadros ruidosos por debajo de un umbral de puntuaci√≥n de confianza. Tambi√©n emplearon la supresi√≥n no m√°xima para reducir los cuadros delimitadores redundantes o superpuestos.</li>
      </ul>
      <ul>
        <li><strong>Refinamiento iterativo de datos</strong>. Utilizando las anotaciones iniciales filtradas, entrenaron un modelo multitarea que procesa secuencias de datos.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Entrenamiento">Entrenamiento<a class="anchor-link" href="#Entrenamiento"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 10" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <ul>
        <li>Para el entrenamiento usaron <a href="https://www.fast.ai/posts/2018-07-02-adam-weight-decay.html" target="_blank" rel="nofollow noreferrer">AdamW</a> como optimizador, que es una variante de Adam que incluye la regularizaci√≥n L2 en los pesos.</li>
        <li>Utilizaron un decaimiento en la tasa de aprendizaje del <a href="https://www.linkedin.com/pulse/learning-rate-cosine-decay-warmup-hold-period-karel-becerra-fppye/" target="_blank" rel="nofollow noreferrer">coseno</a>. El valor m√°ximo de la tasa de aprendizaje se estableci√≥ en 1e-4 y un warmup lineal de 5000 steps.</li>
        <li>Usaron [Deep-Speed] y precisi√≥n mixta para acelerar el entrenamiento.</li>
        <li>Usaron un tama√±o de lote (batch size) de 2048 para Florence-2 Base y 3072 para Florence-2 Large.</li>
        <li>Hicieron un primer entrenamiento con im√°genes de tama√±o 184x184 con todas las im√°genes del dataset y luego un ajuste de resoluci√≥n con im√°genes de 768x768 con 500 millones de im√°genes para el modelo base y 100 millones de im√°genes para el modelo large.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Resultados">Resultados<a class="anchor-link" href="#Resultados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 11" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Evaluacion zero-shot">Evaluaci√≥n zero-shot<a class="anchor-link" href="#Evaluacion zero-shot"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 12" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para tareas zero-shot obtuvieron estos resultados</p>
      <table>
        <thead>
          <tr>
            <th>Method</th>
            <th>#params</th>
            <th style="text-align: center;">COCO Cap.</th>
            <th style="text-align: center;">COCO Cap.</th>
            <th style="text-align: center;">NoCaps</th>
            <th style="text-align: center;">TextCaps</th>
            <th style="text-align: center;">COCO Det.</th>
            <th style="text-align: center;">Flickr30k</th>
            <th style="text-align: center;">Refcoco</th>
            <th style="text-align: center;">Refcoco+</th>
            <th style="text-align: center;">Refcocog</th>
            <th style="text-align: center;">Refcoco RES</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td></td>
            <td></td>
            <td style="text-align: center;">test</td>
            <td style="text-align: center;">val</td>
            <td style="text-align: center;">val</td>
            <td style="text-align: center;">val</td>
            <td style="text-align: center;">val2017</td>
            <td style="text-align: center;">test</td>
            <td style="text-align: center;">test-A</td>
            <td style="text-align: center;">test-B</td>
            <td style="text-align: center;">val</td>
            <td style="text-align: center;">test-A</td>
          </tr>
          <tr>
            <td></td>
            <td></td>
            <td style="text-align: center;">CIDEr</td>
            <td style="text-align: center;">CIDEr</td>
            <td style="text-align: center;">CIDEr</td>
            <td style="text-align: center;">CIDEr</td>
            <td style="text-align: center;">mAP</td>
            <td style="text-align: center;">R@1</td>
            <td style="text-align: center;">Accuracy</td>
            <td style="text-align: center;">Accuracy</td>
            <td style="text-align: center;">Accuracy</td>
            <td style="text-align: center;">mIoU</td>
          </tr>
          <tr>
            <td>Flamingo [2]</td>
            <td>80B</td>
            <td style="text-align: center;">84.3</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
          </tr>
          <tr>
            <td>Kosmos-2 [60]</td>
            <td>1.6B</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">78.7</td>
            <td style="text-align: center;">52.3</td>
            <td style="text-align: center;">57.4</td>
            <td style="text-align: center;">47.3</td>
            <td style="text-align: center;">45.5</td>
          </tr>
          <tr>
            <td>Florence-2-B</td>
            <td>0.23B</td>
            <td style="text-align: center;">133.0</td>
            <td style="text-align: center;">118.7</td>
            <td style="text-align: center;">70.1</td>
            <td style="text-align: center;">34.7</td>
            <td style="text-align: center;">34.7</td>
            <td style="text-align: center;">83.6</td>
            <td style="text-align: center;">53.9</td>
            <td style="text-align: center;">58.4</td>
            <td style="text-align: center;">49.7</td>
            <td style="text-align: center;">51.5</td>
          </tr>
          <tr>
            <td>Florence-2-L</td>
            <td>0.77B</td>
            <td style="text-align: center;">135.6</td>
            <td style="text-align: center;">120.8</td>
            <td style="text-align: center;">72.8</td>
            <td style="text-align: center;">37.5</td>
            <td style="text-align: center;">37.5</td>
            <td style="text-align: center;">84.4</td>
            <td style="text-align: center;">56.3</td>
            <td style="text-align: center;">61.6</td>
            <td style="text-align: center;">51.4</td>
            <td style="text-align: center;">53.6</td>
          </tr>
        </tbody>
      </table>
      <p>Como se puede ver Florence-2, tanto el base, como el largue supera a modelos de uno y dos ordenes de magnitud m√°s grandes.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Modelo generalista con datos supervisados publicos">Modelo generalista con datos supervisados p√∫blicos<a class="anchor-link" href="#Modelo generalista con datos supervisados publicos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 13" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ajustaron los modelos Florence-2 a√±adiendo una colecci√≥n de conjuntos de datos p√∫blicos que cubren tareas a nivel de imagen, regi√≥n y p√≠xel. Los resultados se pueden ver en las siguientes tablas.</p>
      <p>Rendimiento en tareas de subtitulado y VQA:</p>
      <table>
        <thead>
          <tr>
            <th>Method</th>
            <th>#params</th>
            <th style="text-align: center;">COCO Caption</th>
            <th style="text-align: center;">NoCaps</th>
            <th style="text-align: center;">TextCaps</th>
            <th style="text-align: center;">VQAv2</th>
            <th style="text-align: center;">TextVQA</th>
            <th style="text-align: center;">VizWiz VQA</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td></td>
            <td></td>
            <td style="text-align: center;">Karpathy test</td>
            <td style="text-align: center;">val</td>
            <td style="text-align: center;">val</td>
            <td style="text-align: center;">test-dev</td>
            <td style="text-align: center;">test-dev</td>
            <td style="text-align: center;">test-dev</td>
          </tr>
          <tr>
            <td></td>
            <td></td>
            <td style="text-align: center;">CIDEr</td>
            <td style="text-align: center;">CIDEr</td>
            <td style="text-align: center;">CIDEr</td>
            <td style="text-align: center;">Acc</td>
            <td style="text-align: center;">Acc</td>
            <td style="text-align: center;">Acc</td>
          </tr>
          <tr>
            <td>**Specialist Models**</td>
            <td></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
          </tr>
          <tr>
            <td>CoCa [92]</td>
            <td>2.1B</td>
            <td style="text-align: center;">143.6</td>
            <td style="text-align: center;">122.4</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">82.3</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
          </tr>
          <tr>
            <td>BLIP-2 [44]</td>
            <td>7.8B</td>
            <td style="text-align: center;">144.5</td>
            <td style="text-align: center;">121.6</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">82.2</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
          </tr>
          <tr>
            <td>GIT2 [78]</td>
            <td>5.1B</td>
            <td style="text-align: center;">145</td>
            <td style="text-align: center;">126.9</td>
            <td style="text-align: center;">148.6</td>
            <td style="text-align: center;">81.7</td>
            <td style="text-align: center;">67.3</td>
            <td style="text-align: center;">71.0</td>
          </tr>
          <tr>
            <td>Flamingo [2]</td>
            <td>80B</td>
            <td style="text-align: center;">138.1</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">82.0</td>
            <td style="text-align: center;">54.1</td>
            <td style="text-align: center;">65.7</td>
          </tr>
          <tr>
            <td>PaLI [15]</td>
            <td>17B</td>
            <td style="text-align: center;">149.1</td>
            <td style="text-align: center;">**127.0**</td>
            <td style="text-align: center;">160.0</td>
            <td style="text-align: center;">84.3</td>
            <td style="text-align: center;">58.8 / 73.1‚ñ≥</td>
            <td style="text-align: center;">71.6 / 74.4‚ñ≥</td>
          </tr>
          <tr>
            <td>PaLI-X [12]</td>
            <td>55B</td>
            <td style="text-align: center;">**149.2**</td>
            <td style="text-align: center;">126.3</td>
            <td style="text-align: center;">**147 / 163.7**</td>
            <td style="text-align: center;">**86.0**</td>
            <td style="text-align: center;">**71.4 / 80.8‚ñ≥**</td>
            <td style="text-align: center;">**70.9 / 74.6‚ñ≥**</td>
          </tr>
          <tr>
            <td>**Generalist Models**</td>
            <td></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
          </tr>
          <tr>
            <td>Unified-IO [55]</td>
            <td>2.9B</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">100</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">77.9</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">57.4</td>
          </tr>
          <tr>
            <td>Florence-2-B</td>
            <td>0.23B</td>
            <td style="text-align: center;">140.0</td>
            <td style="text-align: center;">116.7</td>
            <td style="text-align: center;">143.9</td>
            <td style="text-align: center;">79.7</td>
            <td style="text-align: center;">63.6</td>
            <td style="text-align: center;">63.6</td>
          </tr>
          <tr>
            <td>Florence-2-L</td>
            <td>0.77B</td>
            <td style="text-align: center;">143.3</td>
            <td style="text-align: center;">124.9</td>
            <td style="text-align: center;">151.1</td>
            <td style="text-align: center;">81.7</td>
            <td style="text-align: center;">73.5</td>
            <td style="text-align: center;">72.6</td>
          </tr>
        </tbody>
      </table>
      <p>‚ñ≥ Indica que se us√≥ OCR externo como entrada</p>
      <p>Rendimiento en tareas a nivel de regi√≥n y p√≠xel:</p>
      <table>
        <thead>
          <tr>
            <th>Method</th>
            <th>#params</th>
            <th style="text-align: center;">COCO Det.</th>
            <th style="text-align: center;">Flickr30k</th>
            <th style="text-align: center;">Refcoco</th>
            <th style="text-align: center;">Refcoco+</th>
            <th style="text-align: center;">Refcocog</th>
            <th style="text-align: center;">Refcoco RES</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td></td>
            <td></td>
            <td style="text-align: center;">val2017</td>
            <td style="text-align: center;">test</td>
            <td style="text-align: center;">test-A</td>
            <td style="text-align: center;">test-B</td>
            <td style="text-align: center;">val</td>
            <td style="text-align: center;">test-A</td>
          </tr>
          <tr>
            <td></td>
            <td></td>
            <td style="text-align: center;">mAP</td>
            <td style="text-align: center;">R@1</td>
            <td style="text-align: center;">Accuracy</td>
            <td style="text-align: center;">Accuracy</td>
            <td style="text-align: center;">Accuracy</td>
            <td style="text-align: center;">mIoU</td>
          </tr>
          <tr>
            <td>**Specialist Models**</td>
            <td></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
          </tr>
          <tr>
            <td>SeqTR [99]</td>
            <td>-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">83.7</td>
            <td style="text-align: center;">86.5</td>
            <td style="text-align: center;">81.2</td>
            <td style="text-align: center;">71.5</td>
          </tr>
          <tr>
            <td>PolyFormer [49]</td>
            <td>-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">90.4</td>
            <td style="text-align: center;">92.9</td>
            <td style="text-align: center;">87.2</td>
            <td style="text-align: center;">85.0</td>
          </tr>
          <tr>
            <td>UNINEXT [84]</td>
            <td>0.74B</td>
            <td style="text-align: center;">**60.6**</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">92.6</td>
            <td style="text-align: center;">94.3</td>
            <td style="text-align: center;">91.5</td>
            <td style="text-align: center;">85.2</td>
          </tr>
          <tr>
            <td>Ferret [90]</td>
            <td>13B</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">89.5</td>
            <td style="text-align: center;">92.4</td>
            <td style="text-align: center;">84.4</td>
            <td style="text-align: center;">82.8</td>
          </tr>
          <tr>
            <td>**Generalist Models**</td>
            <td></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
          </tr>
          <tr>
            <td>UniTAB [88]</td>
            <td>-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">**88.6**</td>
            <td style="text-align: center;">91.1</td>
            <td style="text-align: center;">83.8</td>
            <td style="text-align: center;">81.0</td>
            <td style="text-align: center;">85.4</td>
          </tr>
          <tr>
            <td>Florence-2-B</td>
            <td>0.23B</td>
            <td style="text-align: center;">41.4</td>
            <td style="text-align: center;">84.0</td>
            <td style="text-align: center;">92.6</td>
            <td style="text-align: center;">94.8</td>
            <td style="text-align: center;">91.5</td>
            <td style="text-align: center;">86.8</td>
          </tr>
          <tr>
            <td>Florence-2-L</td>
            <td>0.77B</td>
            <td style="text-align: center;">43.4</td>
            <td style="text-align: center;">85.2</td>
            <td style="text-align: center;">**93.4**</td>
            <td style="text-align: center;">**95.3**</td>
            <td style="text-align: center;">**92.0**</td>
            <td style="text-align: center;">**88.3**</td>
          </tr>
        </tbody>
      </table>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Resultados de la detecci√≥n de objetos COCO y segmentaci√≥n de instancias</p>
      <table>
        <thead>
          <tr>
            <th>Backbone</th>
            <th style="text-align: center;">Pretrain</th>
            <th style="text-align: center;">Mask R-CNN</th>
            <th style="text-align: center;">Mask R-CNN</th>
            <th style="text-align: center;">DINO</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;">APb</td>
            <td style="text-align: center;">APm</td>
            <td style="text-align: center;">AP</td>
          </tr>
          <tr>
            <td>ViT-B</td>
            <td style="text-align: center;">MAE, IN-1k</td>
            <td style="text-align: center;">51.6</td>
            <td style="text-align: center;">45.9</td>
            <td style="text-align: center;">55.0</td>
          </tr>
          <tr>
            <td>Swin-B</td>
            <td style="text-align: center;">Sup IN-1k</td>
            <td style="text-align: center;">50.2</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">53.4</td>
          </tr>
          <tr>
            <td>Swin-B</td>
            <td style="text-align: center;">SimMIM [83]</td>
            <td style="text-align: center;">52.3</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
          </tr>
          <tr>
            <td>FocalAtt-B</td>
            <td style="text-align: center;">Sup IN-1k</td>
            <td style="text-align: center;">49.0</td>
            <td style="text-align: center;">43.7</td>
            <td style="text-align: center;">-</td>
          </tr>
          <tr>
            <td>FocalNet-B</td>
            <td style="text-align: center;">Sup IN-1k</td>
            <td style="text-align: center;">49.8</td>
            <td style="text-align: center;">44.1</td>
            <td style="text-align: center;">54.4</td>
          </tr>
          <tr>
            <td>ConvNeXt v1-B</td>
            <td style="text-align: center;">Sup IN-1k</td>
            <td style="text-align: center;">50.3</td>
            <td style="text-align: center;">44.9</td>
            <td style="text-align: center;">52.6</td>
          </tr>
          <tr>
            <td>ConvNeXt v2-B</td>
            <td style="text-align: center;">Sup IN-1k</td>
            <td style="text-align: center;">51.0</td>
            <td style="text-align: center;">45.6</td>
            <td style="text-align: center;">-</td>
          </tr>
          <tr>
            <td>ConvNeXt v2-B</td>
            <td style="text-align: center;">FCMAE</td>
            <td style="text-align: center;">52.9</td>
            <td style="text-align: center;">46.6</td>
            <td style="text-align: center;">-</td>
          </tr>
          <tr>
            <td>DaViT-B</td>
            <td style="text-align: center;">Florence-2</td>
            <td style="text-align: center;">**53.6**</td>
            <td style="text-align: center;">**46.4**</td>
            <td style="text-align: center;">**59.2**</td>
          </tr>
        </tbody>
      </table>
      <p>Detecci√≥n de objetos COCO utilizando Mask R-CNN y DINO</p>
      <table>
        <thead>
          <tr>
            <th>Pretrain</th>
            <th>Frozen stages</th>
            <th>Mask R-CNN</th>
            <th>Mask R-CNN</th>
            <th>DINO</th>
            <th>UperNet</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td></td>
            <td></td>
            <td>APb</td>
            <td>APm</td>
            <td>AP</td>
            <td>mloU</td>
          </tr>
          <tr>
            <td>Sup IN1k</td>
            <td>n/a</td>
            <td>46.7</td>
            <td>42.0</td>
            <td>53.7</td>
            <td>49</td>
          </tr>
          <tr>
            <td>UniCL [87]</td>
            <td>n/a</td>
            <td>50.4</td>
            <td>45.0</td>
            <td>57.3</td>
            <td>53.6</td>
          </tr>
          <tr>
            <td>Florence-2</td>
            <td>n/a</td>
            <td>**53.6**</td>
            <td>**46.4**</td>
            <td>**59.2**</td>
            <td>**54.9**</td>
          </tr>
          <tr>
            <td>Florence-2</td>
            <td>[1]</td>
            <td>**53.6**</td>
            <td>46.3</td>
            <td>**59.2**</td>
            <td>54.1</td>
          </tr>
          <tr>
            <td>Florence-2</td>
            <td>[1, 2]</td>
            <td>53.3</td>
            <td>46.1</td>
            <td>59.0</td>
            <td>54.4</td>
          </tr>
          <tr>
            <td>Florence-2</td>
            <td>[1, 2, 3]</td>
            <td>49.5</td>
            <td>42.9</td>
            <td>56.7</td>
            <td>49.6</td>
          </tr>
          <tr>
            <td>Florence-2</td>
            <td>[1, 2, 3, 4]</td>
            <td>48.3</td>
            <td>44.5</td>
            <td>56.1</td>
            <td>45.9</td>
          </tr>
        </tbody>
      </table>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Resultados de segmentaci√≥n sem√°ntica ADE20K</p>
      <table>
        <thead>
          <tr>
            <th>Backbone</th>
            <th>Pretrain</th>
            <th>mIoU</th>
            <th>ms-mIoU</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>ViT-B [24]</td>
            <td>Sup IN-1k</td>
            <td>47.4</td>
            <td>-</td>
          </tr>
          <tr>
            <td>ViT-B [24]</td>
            <td>MAE IN-1k</td>
            <td>48.1</td>
            <td>-</td>
          </tr>
          <tr>
            <td>ViT-B [4]</td>
            <td>BEiT</td>
            <td>53.6</td>
            <td>54.1</td>
          </tr>
          <tr>
            <td>ViT-B [59]</td>
            <td>BEiTv2 IN-1k</td>
            <td>53.1</td>
            <td>-</td>
          </tr>
          <tr>
            <td>ViT-B [59]</td>
            <td>BEiTv2 IN-22k</td>
            <td>53.5</td>
            <td>-</td>
          </tr>
          <tr>
            <td>Swin-B [51]</td>
            <td>Sup IN-1k</td>
            <td>48.1</td>
            <td>49.7</td>
          </tr>
          <tr>
            <td>Swin-B [51]</td>
            <td>Sup IN-22k</td>
            <td>-</td>
            <td>51.8</td>
          </tr>
          <tr>
            <td>Swin-B [51]</td>
            <td>SimMIM [83]</td>
            <td>-</td>
            <td>52.8</td>
          </tr>
          <tr>
            <td>FocalAtt-B [86]</td>
            <td>Sup IN-1k</td>
            <td>49.0</td>
            <td>50.5</td>
          </tr>
          <tr>
            <td>FocalNet-B [85]</td>
            <td>Sup IN-1k</td>
            <td>50.5</td>
            <td>51.4</td>
          </tr>
          <tr>
            <td>ConvNeXt v1-B [52]</td>
            <td>Sup IN-1k</td>
            <td>-</td>
            <td>49.9</td>
          </tr>
          <tr>
            <td>ConvNeXt v2-B [81]</td>
            <td>Sup IN-1k</td>
            <td>-</td>
            <td>50.5</td>
          </tr>
          <tr>
            <td>ConvNeXt v2-B [81]</td>
            <td>FCMAE</td>
            <td>-</td>
            <td>52.1</td>
          </tr>
          <tr>
            <td>DaViT-B [20]</td>
            <td>Florence-2</td>
            <td>**54.9**</td>
            <td>**55.5**</td>
          </tr>
        </tbody>
      </table>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se puede ver c√≥mo Florence-2 no es el mejor en algunas de las tareas, aunque en algunas s√≠, pero est√° a la altura de los mejores modelos de cada tarea, teniendo uno o dos √≥rdenes de magnitud menos de par√°metros que los otros modelos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Modelos disponibles">Modelos disponibles<a class="anchor-link" href="#Modelos disponibles"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 14" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En la <a href="https://huggingface.co/collections/microsoft/florence-6669f44df0d87d9c3bfb76de" target="_blank" rel="nofollow noreferrer">colecci√≥n</a> de modelos de Florence-2 de Microsoft en Hugging Face se pueden encontrar los modelos <a href="https://huggingface.co/microsoft/Florence-2-large">Florence-2-large</a>, <a href="https://huggingface.co/microsoft/Florence-2-base">Florence-2-base</a>, <a href="https://huggingface.co/microsoft/Florence-2-large-ft">Florence-2-large-ft</a> y <a href="https://huggingface.co/microsoft/Florence-2-base-ft">Florence-2-base-ft</a>.</p>
      <p>Ya hemos visto la diferencia entre large y base, large es un modelo de 771B de par√°metros y base de 232B de par√°metros. Los modelos con <code>-ft</code> son los modelos que han sido fine tuneados en algunas tareas.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Tareas definidas por el prompt">Tareas definidas por el prompt<a class="anchor-link" href="#Tareas definidas por el prompt"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 15" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como hemos visto Florence-2 es un modelo al que le entra una imagen y un prompt, por lo que mediante el prompt el modelo har√° una tarea u otra. A continuaci√≥n se muestran los prompts que se pueden usar para cada tarea</p>
      <table>
        <thead>
          <tr>
            <th>Task</th>
            <th>Annotation Type</th>
            <th>Prompt Input</th>
            <th>Output</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Caption</td>
            <td>Text</td>
            <td>Image, text</td>
            <td>Text</td>
          </tr>
          <tr>
            <td>Detailed caption</td>
            <td>Text</td>
            <td>Image, text</td>
            <td>Text</td>
          </tr>
          <tr>
            <td>More detailed caption</td>
            <td>Text</td>
            <td>Image, text</td>
            <td>Text</td>
          </tr>
          <tr>
            <td>Region proposal</td>
            <td>Region</td>
            <td>Image, text</td>
            <td>Region</td>
          </tr>
          <tr>
            <td>Object detection</td>
            <td>Region-Text</td>
            <td>Image, text</td>
            <td>Text, region</td>
          </tr>
          <tr>
            <td>Dense region caption</td>
            <td>Region-Text</td>
            <td>Image, text</td>
            <td>Text, region</td>
          </tr>
          <tr>
            <td>Phrase grounding</td>
            <td>Text-Phrase-Region</td>
            <td>Image, text</td>
            <td>Text, region</td>
          </tr>
          <tr>
            <td>Referring expression segmentation</td>
            <td>Region-Text</td>
            <td>Image, text</td>
            <td>Text, region</td>
          </tr>
          <tr>
            <td>Region to segmentation</td>
            <td>Region-Text</td>
            <td>Image, text</td>
            <td>Text, region</td>
          </tr>
          <tr>
            <td>Open vocabulary detection</td>
            <td>Region-Text</td>
            <td>Image, text</td>
            <td>Text, region</td>
          </tr>
          <tr>
            <td>Region to category</td>
            <td>Region-Text</td>
            <td>Image, text, region</td>
            <td>Text</td>
          </tr>
          <tr>
            <td>Region to description</td>
            <td>Region-Text</td>
            <td>Image, text, region</td>
            <td>Text</td>
          </tr>
          <tr>
            <td>OCR</td>
            <td>Text</td>
            <td>Image, text</td>
            <td>Text</td>
          </tr>
          <tr>
            <td>OCR with region</td>
            <td>Region-Text</td>
            <td>Image, text</td>
            <td>Text, region</td>
          </tr>
        </tbody>
      </table>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Uso de Florence-2 large">Uso de Florence-2 large<a class="anchor-link" href="#Uso de Florence-2 large"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 16" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primero importamos las librer√≠as</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">transformers</span><span class="w"> </span><span class="kn">import</span> <span class="n">AutoProcessor</span><span class="p">,</span> <span class="n">AutoModelForCausalLM</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">PIL</span><span class="w"> </span><span class="kn">import</span> <span class="n">Image</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">requests</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">copy</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">time</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Creamos el modelo y el procesador</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">model_id</span> <span class="o">=</span> <span class="s1">&#39;microsoft/Florence-2-large&#39;</span>',
      '<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s1">&#39;cuda&#39;</span><span class="p">)</span>',
      '<span class="n">processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Creamos una funci√≥n para construir el prompt</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">create_prompt</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="n">text_input</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span>',
      '<span class="w">    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span> <span class="o">+</span> <span class="n">text_input</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">prompt</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora una funci√≥n para generar la salida</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>',
      '<span class="w">    </span><span class="c1"># Create prompt</span>',
      '<span class="w">    </span><span class="n">prompt</span> <span class="o">=</span> <span class="n">create_prompt</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Get inputs</span>',
      '<span class="w">    </span><span class="n">inputs</span> <span class="o">=</span> <span class="n">processor</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span> <span class="n">images</span><span class="o">=</span><span class="n">image</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">&quot;pt&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s1">&#39;cuda&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Get outputs</span>',
      '<span class="w">    </span><span class="n">generated_ids</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span>',
      '<span class="w">      </span><span class="n">input_ids</span><span class="o">=</span><span class="n">inputs</span><span class="p">[</span><span class="s2">&quot;input_ids&quot;</span><span class="p">],</span>',
      '<span class="w">      </span><span class="n">pixel_values</span><span class="o">=</span><span class="n">inputs</span><span class="p">[</span><span class="s2">&quot;pixel_values&quot;</span><span class="p">],</span>',
      '<span class="w">      </span><span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span>',
      '<span class="w">      </span><span class="n">early_stopping</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
      '<span class="w">      </span><span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
      '<span class="w">      </span><span class="n">num_beams</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>',
      '<span class="w">    </span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Decode the generated IDs</span>',
      '<span class="w">    </span><span class="n">generated_text</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">batch_decode</span><span class="p">(</span><span class="n">generated_ids</span><span class="p">,</span> <span class="n">skip_special_tokens</span><span class="o">=</span><span class="kc">False</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Post-process the generated text</span>',
      '<span class="w">    </span><span class="n">parsed_answer</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">post_process_generation</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">generated_text</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">task</span><span class="o">=</span><span class="n">task_prompt</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">image_size</span><span class="o">=</span><span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>',
      '<span class="w">    </span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">parsed_answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtenemos una imagen sobre la que vamos a probar el modelo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers/tasks/car.jpg?download=true&quot;</span>',
      '<span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span>',
      '<span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tareas sin prompt adicionales">Tareas sin prompt adicionales<a class="anchor-link" href="#Tareas sin prompt adicionales"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 17" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Caption">Caption<a class="anchor-link" href="#Caption"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 18" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 284.60 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;CAPTION&amp;gt;&#x27;: &#x27;A green car parked in front of a yellow building.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;DETAILED_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 491.69 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DETAILED_CAPTION&amp;gt;&#x27;: &#x27;The image shows a blue Volkswagen Beetle parked in front of a yellow building with two brown doors, surrounded by trees and a clear blue sky.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 1011.38 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#x27;: &#x27;The image shows a vintage Volkswagen Beetle car parked on a cobblestone street in front of a yellow building with two wooden doors. The car is painted in a bright turquoise color and has a sleek, streamlined design. It has two doors on either side of the car, one on top of the other, and a small window on the front. The building appears to be old and dilapidated, with peeling paint and crumbling walls. The sky is blue and there are trees in the background.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Region proposal">Region proposal<a class="anchor-link" href="#Region proposal"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 19" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Es una detecci√≥n de objetos, pero en este caso no devuelve las clases de los objetos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vamos a obtener bounding boxes, primero vamos a crear una funci√≥n para pintarlas sobre la imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">matplotlib.pyplot</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nn">plt</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">matplotlib.patches</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nn">patches</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>',
      '<span class="w">   </span><span class="c1"># Create a figure and axes  </span>',
      '<span class="w">    </span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>',
      '<span class="w">      </span>',
      '<span class="w">    </span><span class="c1"># Display the image  </span>',
      '<span class="w">    </span><span class="n">ax</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>',
      '<span class="w">      </span>',
      '<span class="w">    </span><span class="c1"># Plot each bounding box  </span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">bbox</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;bboxes&#39;</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;labels&#39;</span><span class="p">]):</span>',
      '<span class="w">        </span><span class="c1"># Unpack the bounding box coordinates  </span>',
      '<span class="w">        </span><span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">y2</span> <span class="o">=</span> <span class="n">bbox</span>',
      '<span class="w">        </span><span class="c1"># Create a Rectangle patch  </span>',
      '<span class="w">        </span><span class="n">rect</span> <span class="o">=</span> <span class="n">patches</span><span class="o">.</span><span class="n">Rectangle</span><span class="p">((</span><span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">),</span> <span class="n">x2</span><span class="o">-</span><span class="n">x1</span><span class="p">,</span> <span class="n">y2</span><span class="o">-</span><span class="n">y1</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">facecolor</span><span class="o">=</span><span class="s1">&#39;none&#39;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># Add the rectangle to the Axes  </span>',
      '<span class="w">        </span><span class="n">ax</span><span class="o">.</span><span class="n">add_patch</span><span class="p">(</span><span class="n">rect</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># Annotate the label  </span>',
      '<span class="w">        </span><span class="n">plt</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;white&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">bbox</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">facecolor</span><span class="o">=</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">))</span>',
      '<span class="w">      </span>',
      '<span class="w">    </span><span class="c1"># Remove the axis ticks and labels  </span>',
      '<span class="w">    </span><span class="n">ax</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s1">&#39;off&#39;</span><span class="p">)</span>',
      '<span class="w">      </span>',
      '<span class="w">    </span><span class="c1"># Show the plot  </span>',
      '<span class="w">    </span><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_PROPOSAL&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 439.41 ms',
          '&#x7B;&#x27;&amp;lt;REGION_PROPOSAL&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[33.599998474121094, 159.59999084472656, 596.7999877929688, 371.7599792480469], [454.0799865722656, 96.23999786376953, 580.7999877929688, 261.8399963378906], [449.5999755859375, 276.239990234375, 554.5599975585938, 370.3199768066406], [91.19999694824219, 280.0799865722656, 198.0800018310547, 370.3199768066406], [224.3199920654297, 85.19999694824219, 333.7599792480469, 164.39999389648438], [274.239990234375, 178.8000030517578, 392.0, 228.239990234375], [165.44000244140625, 178.8000030517578, 264.6399841308594, 230.63999938964844]], &#x27;labels&#x27;: [&#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Object detection">Object detection<a class="anchor-link" href="#Object detection"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 20" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En este caso s√≠ devuelve las clases de los objetos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OD&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 385.74 ms',
          '&#x7B;&#x27;&amp;lt;OD&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[33.599998474121094, 159.59999084472656, 596.7999877929688, 371.7599792480469], [454.0799865722656, 96.23999786376953, 580.7999877929688, 261.8399963378906], [224.95999145507812, 86.15999603271484, 333.7599792480469, 164.39999389648438], [449.5999755859375, 276.239990234375, 554.5599975585938, 370.3199768066406], [91.19999694824219, 280.0799865722656, 198.0800018310547, 370.3199768066406]], &#x27;labels&#x27;: [&#x27;car&#x27;, &#x27;door&#x27;, &#x27;door&#x27;, &#x27;wheel&#x27;, &#x27;wheel&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Dense region caption">Dense region caption<a class="anchor-link" href="#Dense region caption"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 21" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;DENSE_REGION_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 434.88 ms',
          '&#x7B;&#x27;&amp;lt;DENSE_REGION_CAPTION&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[33.599998474121094, 159.59999084472656, 596.7999877929688, 371.7599792480469], [454.0799865722656, 96.72000122070312, 580.1599731445312, 261.8399963378906], [449.5999755859375, 276.239990234375, 554.5599975585938, 370.79998779296875], [91.83999633789062, 280.0799865722656, 198.0800018310547, 370.79998779296875], [224.95999145507812, 86.15999603271484, 333.7599792480469, 164.39999389648438]], &#x27;labels&#x27;: [&#x27;turquoise Volkswagen Beetle&#x27;, &#x27;wooden double doors with metal handles&#x27;, &#x27;wheel&#x27;, &#x27;wheel&#x27;, &#x27;door&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tareas con prompt adicionales">Tareas con prompt adicionales<a class="anchor-link" href="#Tareas con prompt adicionales"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 22" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Phrase Grounding">Phrase Grounding<a class="anchor-link" href="#Phrase Grounding"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 23" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;CAPTION_TO_PHRASE_GROUNDING&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;A green car parked in front of a yellow building.&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 327.24 ms',
          '&#x7B;&#x27;&amp;lt;CAPTION_TO_PHRASE_GROUNDING&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.23999786376953, 159.1199951171875, 582.0800170898438, 374.6399841308594], [1.5999999046325684, 4.079999923706055, 639.0399780273438, 305.03997802734375]], &#x27;labels&#x27;: [&#x27;A green car&#x27;, &#x27;a yellow building&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Referring expression segmentation">Referring expression segmentation<a class="anchor-link" href="#Referring expression segmentation"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 24" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vamos a obtener m√°scaras de segmentaci√≥n, vamos a crear una funci√≥n para pintarlas sobre la imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">PIL</span><span class="w"> </span><span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">ImageDraw</span><span class="p">,</span> <span class="n">ImageFont</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">random</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">numpy</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nn">np</span>',
      '<span class="w"> </span>',
      '<span class="n">colormap</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span><span class="s1">&#39;orange&#39;</span><span class="p">,</span><span class="s1">&#39;green&#39;</span><span class="p">,</span><span class="s1">&#39;purple&#39;</span><span class="p">,</span><span class="s1">&#39;brown&#39;</span><span class="p">,</span><span class="s1">&#39;pink&#39;</span><span class="p">,</span><span class="s1">&#39;gray&#39;</span><span class="p">,</span><span class="s1">&#39;olive&#39;</span><span class="p">,</span><span class="s1">&#39;cyan&#39;</span><span class="p">,</span><span class="s1">&#39;red&#39;</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s1">&#39;lime&#39;</span><span class="p">,</span><span class="s1">&#39;indigo&#39;</span><span class="p">,</span><span class="s1">&#39;violet&#39;</span><span class="p">,</span><span class="s1">&#39;aqua&#39;</span><span class="p">,</span><span class="s1">&#39;magenta&#39;</span><span class="p">,</span><span class="s1">&#39;coral&#39;</span><span class="p">,</span><span class="s1">&#39;gold&#39;</span><span class="p">,</span><span class="s1">&#39;tan&#39;</span><span class="p">,</span><span class="s1">&#39;skyblue&#39;</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">draw_polygons</span><span class="p">(</span><span class="n">input_image</span><span class="p">,</span> <span class="n">prediction</span><span class="p">,</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;  </span>',
      '<span class="sd">    Draws segmentation masks with polygons on an image.  </span>',
      '<span class="sd">  </span>',
      '<span class="sd">    Parameters:  </span>',
      '<span class="sd">    - input_image: Path to the image file.  </span>',
      '<span class="sd">    - prediction: Dictionary containing &#39;polygons&#39; and &#39;labels&#39; keys.  </span>',
      '<span class="sd">                  &#39;polygons&#39; is a list of lists, each containing vertices of a polygon.  </span>',
      '<span class="sd">                  &#39;labels&#39; is a list of labels corresponding to each polygon.  </span>',
      '<span class="sd">    - fill_mask: Boolean indicating whether to fill the polygons with color.  </span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Copy the input image to draw on</span>',
      '<span class="w">    </span><span class="n">image</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">input_image</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Load the image  </span>',
      '<span class="w">    </span><span class="n">draw</span> <span class="o">=</span> <span class="n">ImageDraw</span><span class="o">.</span><span class="n">Draw</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>',
      '<span class="w">   </span>',
      '<span class="w">    </span><span class="c1"># Set up scale factor if needed (use 1 if not scaling)  </span>',
      '<span class="w">    </span><span class="n">scale</span> <span class="o">=</span> <span class="mi">1</span>',
      '<span class="w">      </span>',
      '<span class="w">    </span><span class="c1"># Iterate over polygons and labels  </span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">polygons</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">prediction</span><span class="p">[</span><span class="s1">&#39;polygons&#39;</span><span class="p">],</span> <span class="n">prediction</span><span class="p">[</span><span class="s1">&#39;labels&#39;</span><span class="p">]):</span>',
      '<span class="w">        </span><span class="n">color</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">colormap</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">fill_color</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">colormap</span><span class="p">)</span> <span class="k">if</span> <span class="n">fill_mask</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">          </span>',
      '<span class="w">        </span><span class="k">for</span> <span class="n">_polygon</span> <span class="ow">in</span> <span class="n">polygons</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">_polygon</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">_polygon</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">_polygon</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">3</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Invalid polygon:&#39;</span><span class="p">,</span> <span class="n">_polygon</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">continue</span>',
      '<span class="w">              </span>',
      '<span class="w">            </span><span class="n">_polygon</span> <span class="o">=</span> <span class="p">(</span><span class="n">_polygon</span> <span class="o">*</span> <span class="n">scale</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>',
      '<span class="w">              </span>',
      '<span class="w">            </span><span class="c1"># Draw the polygon  </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">fill_mask</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">draw</span><span class="o">.</span><span class="n">polygon</span><span class="p">(</span><span class="n">_polygon</span><span class="p">,</span> <span class="n">outline</span><span class="o">=</span><span class="n">color</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">fill_color</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">draw</span><span class="o">.</span><span class="n">polygon</span><span class="p">(</span><span class="n">_polygon</span><span class="p">,</span> <span class="n">outline</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>',
      '<span class="w">              </span>',
      '<span class="w">            </span><span class="c1"># Draw the label text  </span>',
      '<span class="w">            </span><span class="n">draw</span><span class="o">.</span><span class="n">text</span><span class="p">((</span><span class="n">_polygon</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">8</span><span class="p">,</span> <span class="n">_polygon</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span><span class="p">),</span> <span class="n">label</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>',
      '<span class="w">  </span>',
      '<span class="w">    </span><span class="c1"># Save or display the image  </span>',
      '<span class="w">    </span><span class="c1">#image.show()  # Display the image  </span>',
      '<span class="w">    </span><span class="n">display</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REFERRING_EXPRESSION_SEGMENTATION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;a green car&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_polygons</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">],</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 4854.74 ms',
          '&#x7B;&#x27;&amp;lt;REFERRING_EXPRESSION_SEGMENTATION&amp;gt;&#x27;: &#x7B;&#x27;polygons&#x27;: [[[180.8000030517578, 180.72000122070312, 182.72000122070312, 180.72000122070312, 187.83999633789062, 177.83999633789062, 189.75999450683594, 177.83999633789062, 192.95999145507812, 175.9199981689453, 194.87998962402344, 175.9199981689453, 198.0800018310547, 174.0, 200.63999938964844, 173.0399932861328, 203.83999633789062, 172.0800018310547, 207.0399932861328, 170.63999938964844, 209.59999084472656, 169.67999267578125, 214.0800018310547, 168.72000122070312, 217.9199981689453, 167.75999450683594, 221.75999450683594, 166.8000030517578, 226.239990234375, 165.83999633789062, 230.72000122070312, 164.87998962402344, 237.1199951171875, 163.9199981689453, 244.1599884033203, 162.95999145507812, 253.1199951171875, 162.0, 265.2799987792969, 161.0399932861328, 312.6399841308594, 161.0399932861328, 328.6399841308594, 162.0, 337.6000061035156, 162.95999145507812, 344.6399841308594, 163.9199981689453, 349.7599792480469, 164.87998962402344, 353.6000061035156, 165.83999633789062, 358.0799865722656, 166.8000030517578, 361.91998291015625, 167.75999450683594, 365.7599792480469, 168.72000122070312, 369.6000061035156, 169.67999267578125, 372.79998779296875, 170.63999938964844, 374.7200012207031, 172.0800018310547, 377.91998291015625, 174.95999145507812, 379.8399963378906, 177.83999633789062, 381.7599792480469, 180.72000122070312, 383.67999267578125, 183.59999084472656, 385.6000061035156, 186.95999145507812, 387.5199890136719, 189.83999633789062, 388.79998779296875, 192.72000122070312, 390.7200012207031, 194.63999938964844, 392.0, 197.51998901367188, 393.91998291015625, 200.87998962402344, 395.8399963378906, 203.75999450683594, 397.7599792480469, 206.63999938964844, 399.67999267578125, 209.51998901367188, 402.8800048828125, 212.87998962402344, 404.79998779296875, 212.87998962402344, 406.7200012207031, 213.83999633789062, 408.6399841308594, 215.75999450683594, 408.6399841308594, 217.67999267578125, 410.55999755859375, 219.59999084472656, 412.47998046875, 220.55999755859375, 431.03997802734375, 220.55999755859375, 431.67999267578125, 221.51998901367188, 443.8399963378906, 222.47999572753906, 457.91998291015625, 222.47999572753906, 466.8799743652344, 223.44000244140625, 473.91998291015625, 224.87998962402344, 479.67999267578125, 225.83999633789062, 486.0799865722656, 226.79998779296875, 491.1999816894531, 227.75999450683594, 495.03997802734375, 228.72000122070312, 498.8799743652344, 229.67999267578125, 502.0799865722656, 230.63999938964844, 505.2799987792969, 231.59999084472656, 507.8399963378906, 232.55999755859375, 511.03997802734375, 233.51998901367188, 514.239990234375, 234.47999572753906, 516.7999877929688, 235.4399871826172, 520.0, 237.36000061035156, 521.9199829101562, 237.36000061035156, 534.0800170898438, 243.59999084472656, 537.2799682617188, 245.51998901367188, 541.1199951171875, 249.36000061035156, 544.9599609375, 251.75999450683594, 548.1599731445312, 252.72000122070312, 551.3599853515625, 253.67999267578125, 553.2799682617188, 253.67999267578125, 556.47998046875, 255.59999084472656, 558.3999633789062, 255.59999084472656, 567.3599853515625, 260.3999938964844, 569.2799682617188, 260.3999938964844, 571.2000122070312, 261.3599853515625, 573.1199951171875, 263.2799987792969, 574.3999633789062, 265.67999267578125, 574.3999633789062, 267.6000061035156, 573.1199951171875, 268.55999755859375, 572.47998046875, 271.44000244140625, 572.47998046875, 281.5199890136719, 573.1199951171875, 286.32000732421875, 574.3999633789062, 287.2799987792969, 575.0399780273438, 290.6399841308594, 576.3200073242188, 293.5199890136719, 576.3200073242188, 309.3599853515625, 576.3200073242188, 312.239990234375, 576.3200073242188, 314.1600036621094, 577.5999755859375, 315.1199951171875, 578.239990234375, 318.47998046875, 578.239990234375, 320.3999938964844, 576.3200073242188, 321.3599853515625, 571.2000122070312, 322.32000732421875, 564.1599731445312, 323.2799987792969, 555.2000122070312, 323.2799987792969, 553.2799682617188, 325.1999816894531, 553.2799682617188, 333.3599853515625, 552.0, 337.1999816894531, 551.3599853515625, 340.0799865722656, 550.0800170898438, 343.44000244140625, 548.1599731445312, 345.3599853515625, 546.8800048828125, 348.239990234375, 544.9599609375, 351.1199951171875, 543.0399780273438, 354.47998046875, 534.0800170898438, 363.1199951171875, 530.8800048828125, 365.03997802734375, 525.1199951171875, 368.3999938964844, 521.9199829101562, 369.3599853515625, 518.0800170898438, 370.3199768066406, 496.9599914550781, 370.3199768066406, 491.1999816894531, 369.3599853515625, 488.0, 368.3999938964844, 484.79998779296875, 367.44000244140625, 480.9599914550781, 365.03997802734375, 477.7599792480469, 363.1199951171875, 475.1999816894531, 361.1999816894531, 464.9599914550781, 351.1199951171875, 463.03997802734375, 348.239990234375, 461.1199951171875, 345.3599853515625, 459.8399963378906, 343.44000244140625, 459.8399963378906, 341.03997802734375, 457.91998291015625, 338.1600036621094, 457.91998291015625, 336.239990234375, 456.6399841308594, 334.32000732421875, 454.7200012207031, 332.3999938964844, 452.79998779296875, 333.3599853515625, 448.9599914550781, 337.1999816894531, 447.03997802734375, 338.1600036621094, 426.55999755859375, 337.1999816894531, 424.0, 337.1999816894531, 422.7200012207031, 338.1600036621094, 419.5199890136719, 339.1199951171875, 411.8399963378906, 339.1199951171875, 410.55999755859375, 338.1600036621094, 379.8399963378906, 337.1999816894531, 376.0, 337.1999816894531, 374.7200012207031, 338.1600036621094, 365.7599792480469, 337.1999816894531, 361.91998291015625, 337.1999816894531, 360.6399841308594, 338.1600036621094, 351.67999267578125, 337.1999816894531, 347.8399963378906, 337.1999816894531, 346.55999755859375, 338.1600036621094, 340.79998779296875, 337.1999816894531, 337.6000061035156, 337.1999816894531, 336.9599914550781, 338.1600036621094, 328.6399841308594, 337.1999816894531, 323.5199890136719, 337.1999816894531, 322.8800048828125, 338.1600036621094, 314.55999755859375, 337.1999816894531, 310.7200012207031, 337.1999816894531, 309.44000244140625, 338.1600036621094, 301.7599792480469, 337.1999816894531, 298.55999755859375, 337.1999816894531, 297.91998291015625, 338.1600036621094, 289.6000061035156, 337.1999816894531, 287.67999267578125, 337.1999816894531, 286.3999938964844, 338.1600036621094, 279.3599853515625, 337.1999816894531, 275.5199890136719, 337.1999816894531, 274.239990234375, 338.1600036621094, 267.1999816894531, 337.1999816894531, 265.2799987792969, 337.1999816894531, 264.6399841308594, 338.1600036621094, 256.32000732421875, 337.1999816894531, 254.39999389648438, 337.1999816894531, 253.1199951171875, 338.1600036621094, 246.0800018310547, 337.1999816894531, 244.1599884033203, 337.1999816894531, 243.51998901367188, 338.1600036621094, 235.1999969482422, 337.1999816894531, 232.0, 337.1999816894531, 231.36000061035156, 338.1600036621094, 223.0399932861328, 337.1999816894531, 217.9199981689453, 337.1999816894531, 217.27999877929688, 338.1600036621094, 214.0800018310547, 339.1199951171875, 205.1199951171875, 339.1199951171875, 201.9199981689453, 338.1600036621094, 200.0, 337.1999816894531, 198.0800018310547, 335.2799987792969, 196.1599884033203, 334.32000732421875, 194.239990234375, 334.32000732421875, 191.67999267578125, 336.239990234375, 191.0399932861328, 338.1600036621094, 191.0399932861328, 340.0799865722656, 189.1199951171875, 343.44000244140625, 189.1199951171875, 345.3599853515625, 187.83999633789062, 347.2799987792969, 185.9199981689453, 349.1999816894531, 184.63999938964844, 352.0799865722656, 182.72000122070312, 355.44000244140625, 180.8000030517578, 358.3199768066406, 176.95999145507812, 362.1600036621094, 173.75999450683594, 364.0799865722656, 170.55999755859375, 366.0, 168.63999938964844, 367.44000244140625, 166.0800018310547, 368.3999938964844, 162.87998962402344, 369.3599853515625, 159.67999267578125, 370.3199768066406, 152.63999938964844, 371.2799987792969, 131.52000427246094, 371.2799987792969, 127.68000030517578, 370.3199768066406, 124.47999572753906, 369.3599853515625, 118.7199935913086, 366.0, 115.5199966430664, 364.0799865722656, 111.68000030517578, 361.1999816894531, 106.55999755859375, 356.3999938964844, 104.63999938964844, 353.03997802734375, 103.36000061035156, 350.1600036621094, 101.43999481201172, 348.239990234375, 100.79999542236328, 346.32000732421875, 99.5199966430664, 343.44000244140625, 99.5199966430664, 340.0799865722656, 98.23999786376953, 337.1999816894531, 96.31999969482422, 335.2799987792969, 94.4000015258789, 334.32000732421875, 87.36000061035156, 334.32000732421875, 81.5999984741211, 335.2799987792969, 80.31999969482422, 336.239990234375, 74.55999755859375, 337.1999816894531, 66.23999786376953, 337.1999816894531, 64.31999969482422, 335.2799987792969, 53.439998626708984, 335.2799987792969, 50.23999786376953, 334.32000732421875, 48.31999969482422, 333.3599853515625, 47.03999710083008, 331.44000244140625, 47.03999710083008, 329.03997802734375, 48.31999969482422, 327.1199951171875, 50.23999786376953, 325.1999816894531, 50.23999786376953, 323.2799987792969, 43.20000076293945, 322.32000732421875, 40.0, 321.3599853515625, 38.07999801635742, 320.3999938964844, 37.439998626708984, 318.47998046875, 36.15999984741211, 312.239990234375, 36.15999984741211, 307.44000244140625, 38.07999801635742, 305.5199890136719, 40.0, 304.55999755859375, 43.20000076293945, 303.6000061035156, 46.39999771118164, 302.6399841308594, 53.439998626708984, 301.67999267578125, 66.23999786376953, 301.67999267578125, 68.15999603271484, 299.2799987792969, 69.43999481201172, 297.3599853515625, 69.43999481201172, 293.5199890136719, 68.15999603271484, 292.55999755859375, 67.5199966430664, 287.2799987792969, 67.5199966430664, 277.67999267578125, 68.15999603271484, 274.32000732421875, 69.43999481201172, 272.3999938964844, 73.27999877929688, 268.55999755859375, 75.19999694824219, 267.6000061035156, 78.4000015258789, 266.6399841308594, 80.31999969482422, 266.6399841308594, 82.23999786376953, 264.7200012207031, 81.5999984741211, 260.3999938964844, 81.5999984741211, 258.47998046875, 83.5199966430664, 257.5199890136719, 87.36000061035156, 257.5199890136719, 89.27999877929688, 256.55999755859375, 96.31999969482422, 249.36000061035156, 96.31999969482422, 248.39999389648438, 106.55999755859375, 237.36000061035156, 110.39999389648438, 233.51998901367188, 112.31999969482422, 231.59999084472656, 120.63999938964844, 223.44000244140625, 123.83999633789062, 221.51998901367188, 126.39999389648438, 220.55999755859375, 129.59999084472656, 218.63999938964844, 132.8000030517578, 216.72000122070312, 136.63999938964844, 213.83999633789062, 141.75999450683594, 209.51998901367188, 148.8000030517578, 202.8000030517578, 153.9199981689453, 198.95999145507812, 154.55999755859375, 198.95999145507812, 157.75999450683594, 196.55999755859375, 161.59999084472656, 193.67999267578125, 168.63999938964844, 186.95999145507812, 171.83999633789062, 186.0, 173.75999450683594, 183.59999084472656, 178.87998962402344, 181.67999267578125, 180.8000030517578, 179.75999450683594]]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Region to segmentation">Region to segmentation<a class="anchor-link" href="#Region to segmentation"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 25" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_SEGMENTATION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_702&amp;gt;&amp;lt;loc_575&amp;gt;&amp;lt;loc_866&amp;gt;&amp;lt;loc_772&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_polygons</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">],</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 1246.26 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_SEGMENTATION&amp;gt;&#x27;: &#x7B;&#x27;polygons&#x27;: [[[468.79998779296875, 288.239990234375, 472.6399841308594, 285.3599853515625, 475.8399963378906, 283.44000244140625, 477.7599792480469, 282.47998046875, 479.67999267578125, 282.47998046875, 482.8799743652344, 280.55999755859375, 485.44000244140625, 279.6000061035156, 488.6399841308594, 278.6399841308594, 491.8399963378906, 277.67999267578125, 497.5999755859375, 276.7200012207031, 511.67999267578125, 276.7200012207031, 514.8800048828125, 277.67999267578125, 518.0800170898438, 278.6399841308594, 520.6400146484375, 280.55999755859375, 522.5599975585938, 280.55999755859375, 524.47998046875, 282.47998046875, 527.6799926757812, 283.44000244140625, 530.8800048828125, 285.3599853515625, 534.0800170898438, 287.2799987792969, 543.0399780273438, 296.3999938964844, 544.9599609375, 299.2799987792969, 546.8800048828125, 302.1600036621094, 548.7999877929688, 306.47998046875, 548.7999877929688, 308.3999938964844, 550.719970703125, 311.2799987792969, 552.0, 314.1600036621094, 552.6400146484375, 318.47998046875, 552.6400146484375, 333.3599853515625, 552.0, 337.1999816894531, 550.719970703125, 340.0799865722656, 550.0800170898438, 343.44000244140625, 548.7999877929688, 345.3599853515625, 546.8800048828125, 347.2799987792969, 545.5999755859375, 350.1600036621094, 543.6799926757812, 353.03997802734375, 541.760009765625, 356.3999938964844, 536.0, 362.1600036621094, 532.7999877929688, 364.0799865722656, 529.5999755859375, 366.0, 527.6799926757812, 366.9599914550781, 525.760009765625, 366.9599914550781, 522.5599975585938, 369.3599853515625, 518.0800170898438, 370.3199768066406, 495.67999267578125, 370.3199768066406, 489.91998291015625, 369.3599853515625, 486.7200012207031, 368.3999938964844, 483.5199890136719, 366.9599914550781, 479.67999267578125, 365.03997802734375, 476.47998046875, 363.1199951171875, 473.91998291015625, 361.1999816894531, 465.5999755859375, 353.03997802734375, 462.3999938964844, 349.1999816894531, 460.47998046875, 346.32000732421875, 458.55999755859375, 342.47998046875, 457.91998291015625, 339.1199951171875, 456.6399841308594, 336.239990234375, 455.3599853515625, 333.3599853515625, 454.7200012207031, 329.5199890136719, 454.7200012207031, 315.1199951171875, 455.3599853515625, 310.32000732421875, 456.6399841308594, 306.47998046875, 457.91998291015625, 303.1199951171875, 459.8399963378906, 300.239990234375, 459.8399963378906, 298.32000732421875, 460.47998046875, 296.3999938964844, 462.3999938964844, 293.5199890136719, 465.5999755859375, 289.1999816894531]]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Open vocabulary detection">Open vocabulary detection<a class="anchor-link" href="#Open vocabulary detection"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 26" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vamos a obtener diccionarios con bounding boxes, junto con sus etiquetas, vamos a crear una funci√≥n para formatear los datos y poder reutilizar la funci√≥n de pintar bounding boxes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">convert_to_od_format</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;  </span>',
      '<span class="sd">    Converts a dictionary with &#39;bboxes&#39; and &#39;bboxes_labels&#39; into a dictionary with separate &#39;bboxes&#39; and &#39;labels&#39; keys.  </span>',
      '<span class="sd">  </span>',
      '<span class="sd">    Parameters:  </span>',
      '<span class="sd">    - data: The input dictionary with &#39;bboxes&#39;, &#39;bboxes_labels&#39;, &#39;polygons&#39;, and &#39;polygons_labels&#39; keys.  </span>',
      '<span class="sd">  </span>',
      '<span class="sd">    Returns:  </span>',
      '<span class="sd">    - A dictionary with &#39;bboxes&#39; and &#39;labels&#39; keys formatted for object detection results.  </span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Extract bounding boxes and labels  </span>',
      '<span class="w">    </span><span class="n">bboxes</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;bboxes&#39;</span><span class="p">,</span> <span class="p">[])</span>',
      '<span class="w">    </span><span class="n">labels</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;bboxes_labels&#39;</span><span class="p">,</span> <span class="p">[])</span>',
      '<span class="w">      </span>',
      '<span class="w">    </span><span class="c1"># Construct the output format  </span>',
      '<span class="w">    </span><span class="n">od_results</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">        </span><span class="s1">&#39;bboxes&#39;</span><span class="p">:</span> <span class="n">bboxes</span><span class="p">,</span>',
      '<span class="w">        </span><span class="s1">&#39;labels&#39;</span><span class="p">:</span> <span class="n">labels</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w">      </span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">od_results</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OPEN_VOCABULARY_DETECTION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;a green car&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">bbox_results</span>  <span class="o">=</span> <span class="n">convert_to_od_format</span><span class="p">(</span><span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">bbox_results</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 256.23 ms',
          '&#x7B;&#x27;&amp;lt;OPEN_VOCABULARY_DETECTION&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.23999786376953, 158.63999938964844, 582.0800170898438, 374.1600036621094]], &#x27;bboxes_labels&#x27;: [&#x27;a green car&#x27;], &#x27;polygons&#x27;: [], &#x27;polygons_labels&#x27;: []&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Region to category">Region to category<a class="anchor-link" href="#Region to category"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 27" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_CATEGORY&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 231.91 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_CATEGORY&amp;gt;&#x27;: &#x27;car&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Region to description">Region to description<a class="anchor-link" href="#Region to description"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 28" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_DESCRIPTION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 269.62 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_DESCRIPTION&amp;gt;&#x27;: &#x27;turquoise Volkswagen Beetle&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tareas OCR">Tareas OCR<a class="anchor-link" href="#Tareas OCR"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 29" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Usamos una nueva imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://ecx.images-amazon.com/images/I/51UUzBDAMsL.jpg?download=true&quot;</span>',
      '<span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s1">&#39;RGB&#39;</span><span class="p">)</span>',
      '<span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=RGB size=403x500&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="OCR">OCR<a class="anchor-link" href="#OCR"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 30" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OCR&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 424.52 ms',
          '&#x7B;&#x27;&amp;lt;OCR&amp;gt;&#x27;: &#x27;CUDAFOR ENGINEERSAn Introduction to High-PerformanceParallel ComputingDUANE STORTIMETE YURTOGLU&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="OCR with region">OCR with region<a class="anchor-link" href="#OCR with region"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 31" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vamos a obtener el texto del OCR y sus regiones, vamos a crear una funci√≥n para pintarlos sobre la imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">draw_ocr_bboxes</span><span class="p">(</span><span class="n">input_image</span><span class="p">,</span> <span class="n">prediction</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">image</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">input_image</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">scale</span> <span class="o">=</span> <span class="mi">1</span>',
      '<span class="w">    </span><span class="n">draw</span> <span class="o">=</span> <span class="n">ImageDraw</span><span class="o">.</span><span class="n">Draw</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">bboxes</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">prediction</span><span class="p">[</span><span class="s1">&#39;quad_boxes&#39;</span><span class="p">],</span> <span class="n">prediction</span><span class="p">[</span><span class="s1">&#39;labels&#39;</span><span class="p">]</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">box</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">bboxes</span><span class="p">,</span> <span class="n">labels</span><span class="p">):</span>',
      '<span class="w">        </span><span class="n">color</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">colormap</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">new_box</span> <span class="o">=</span> <span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">box</span><span class="p">)</span> <span class="o">*</span> <span class="n">scale</span><span class="p">)</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>',
      '<span class="w">        </span><span class="n">draw</span><span class="o">.</span><span class="n">polygon</span><span class="p">(</span><span class="n">new_box</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">outline</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">draw</span><span class="o">.</span><span class="n">text</span><span class="p">((</span><span class="n">new_box</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="mi">8</span><span class="p">,</span> <span class="n">new_box</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">2</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;</span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">label</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="n">align</span><span class="o">=</span><span class="s2">&quot;right&quot;</span><span class="p">,</span>',
      '<span class="w">        </span>',
      '<span class="w">                    </span><span class="n">fill</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">display</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OCR_WITH_REGION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_ocr_bboxes</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 758.95 ms',
          '&#x7B;&#x27;&amp;lt;OCR_WITH_REGION&amp;gt;&#x27;: &#x7B;&#x27;quad_boxes&#x27;: [[167.0435028076172, 50.25, 375.7974853515625, 50.25, 375.7974853515625, 114.75, 167.0435028076172, 114.75], [144.8784942626953, 120.75, 375.7974853515625, 120.75, 375.7974853515625, 149.25, 144.8784942626953, 149.25], [115.86249542236328, 165.25, 376.6034851074219, 166.25, 376.6034851074219, 184.25, 115.86249542236328, 183.25], [239.9864959716797, 184.25, 376.6034851074219, 186.25, 376.6034851074219, 204.25, 239.9864959716797, 202.25], [266.1814880371094, 441.25, 376.6034851074219, 441.25, 376.6034851074219, 456.25, 266.1814880371094, 456.25], [252.0764923095703, 460.25, 376.6034851074219, 460.25, 376.6034851074219, 475.25, 252.0764923095703, 475.25]], &#x27;labels&#x27;: [&#x27;&amp;lt;/s&amp;gt;CUDA&#x27;, &#x27;FOR ENGINEERS&#x27;, &#x27;An Introduction to High-Performance&#x27;, &#x27;Parallel Computing&#x27;, &#x27;DUANE STORTI&#x27;, &#x27;METE YURTOGLU&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=RGB size=403x500&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Uso de Florence-2 large fine tuning">Uso de Florence-2 large fine tuning<a class="anchor-link" href="#Uso de Florence-2 large fine tuning"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 32" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos el modelo y el procesador</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">model_id</span> <span class="o">=</span> <span class="s1">&#39;microsoft/Florence-2-large-ft&#39;</span>',
      '<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s1">&#39;cuda&#39;</span><span class="p">)</span>',
      '<span class="n">processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Volvemos a obtener la imagen del coche</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers/tasks/car.jpg?download=true&quot;</span>',
      '<span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span>',
      '<span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tareas sin prompt adicionales">Tareas sin prompt adicionales<a class="anchor-link" href="#Tareas sin prompt adicionales"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 33" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Caption">Caption<a class="anchor-link" href="#Caption"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 34" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 292.35 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;CAPTION&amp;gt;&#x27;: &#x27;A green car parked in front of a yellow building.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;DETAILED_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 437.06 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DETAILED_CAPTION&amp;gt;&#x27;: &#x27;In this image we can see a car on the road. In the background there is a building with doors. At the top of the image there are trees.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 779.38 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#x27;: &#x27;A light blue Volkswagen Beetle is parked in front of a building. The building is yellow and has two brown doors on it. The door on the right is closed and the one on the left is closed. The car is parked on a paved sidewalk.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Region proposal">Region proposal<a class="anchor-link" href="#Region proposal"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 35" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Es una detecci√≥n de objetos, pero en este caso no devuelve las clases de los objetos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_PROPOSAL&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 255.08 ms',
          '&#x7B;&#x27;&amp;lt;REGION_PROPOSAL&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 161.0399932861328, 596.7999877929688, 370.79998779296875]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Object detection">Object detection<a class="anchor-link" href="#Object detection"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 36" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En este caso s√≠ devuelve las clases de los objetos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OD&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 245.54 ms',
          '&#x7B;&#x27;&amp;lt;OD&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 161.51998901367188, 596.7999877929688, 370.79998779296875]], &#x27;labels&#x27;: [&#x27;car&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Dense region caption">Dense region caption<a class="anchor-link" href="#Dense region caption"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 37" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;DENSE_REGION_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 282.75 ms',
          '&#x7B;&#x27;&amp;lt;DENSE_REGION_CAPTION&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 161.51998901367188, 596.7999877929688, 370.79998779296875]], &#x27;labels&#x27;: [&#x27;turquoise Volkswagen Beetle&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tareas con prompt adicionales">Tareas con prompt adicionales<a class="anchor-link" href="#Tareas con prompt adicionales"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 38" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Phrase Grounding">Phrase Grounding<a class="anchor-link" href="#Phrase Grounding"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 39" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;CAPTION_TO_PHRASE_GROUNDING&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;A green car parked in front of a yellow building.&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 305.79 ms',
          '&#x7B;&#x27;&amp;lt;CAPTION_TO_PHRASE_GROUNDING&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 159.59999084472656, 598.719970703125, 374.6399841308594], [1.5999999046325684, 4.079999923706055, 639.0399780273438, 304.0799865722656]], &#x27;labels&#x27;: [&#x27;A green car&#x27;, &#x27;a yellow building&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Referring expression segmentation">Referring expression segmentation<a class="anchor-link" href="#Referring expression segmentation"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 40" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REFERRING_EXPRESSION_SEGMENTATION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;a green car&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_polygons</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">],</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 745.87 ms',
          '&#x7B;&#x27;&amp;lt;REFERRING_EXPRESSION_SEGMENTATION&amp;gt;&#x27;: &#x7B;&#x27;polygons&#x27;: [[[178.239990234375, 184.0800018310547, 256.32000732421875, 161.51998901367188, 374.7200012207031, 170.63999938964844, 408.0, 220.0800018310547, 480.9599914550781, 225.36000061035156, 539.2000122070312, 247.9199981689453, 573.760009765625, 266.6399841308594, 575.6799926757812, 289.1999816894531, 598.0800170898438, 293.5199890136719, 596.1599731445312, 309.8399963378906, 576.9599609375, 309.8399963378906, 576.9599609375, 321.3599853515625, 554.5599975585938, 322.32000732421875, 547.5199584960938, 354.47998046875, 525.1199951171875, 369.8399963378906, 488.0, 369.8399963378906, 463.67999267578125, 354.47998046875, 453.44000244140625, 332.8800048828125, 446.3999938964844, 340.0799865722656, 205.1199951171875, 340.0799865722656, 196.1599884033203, 334.79998779296875, 182.0800018310547, 361.67999267578125, 148.8000030517578, 370.79998779296875, 121.27999877929688, 369.8399963378906, 98.87999725341797, 349.1999816894531, 93.75999450683594, 332.8800048828125, 64.31999969482422, 339.1199951171875, 41.91999816894531, 334.79998779296875, 48.959999084472656, 326.6399841308594, 36.79999923706055, 321.3599853515625, 34.880001068115234, 303.6000061035156, 66.23999786376953, 301.67999267578125, 68.15999603271484, 289.1999816894531, 68.15999603271484, 268.55999755859375, 81.5999984741211, 263.2799987792969, 116.15999603271484, 227.27999877929688]]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Region to segmentation">Region to segmentation<a class="anchor-link" href="#Region to segmentation"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 41" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_SEGMENTATION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_702&amp;gt;&amp;lt;loc_575&amp;gt;&amp;lt;loc_866&amp;gt;&amp;lt;loc_772&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_polygons</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">],</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 358.71 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_SEGMENTATION&amp;gt;&#x27;: &#x7B;&#x27;polygons&#x27;: [[[468.1600036621094, 292.0799865722656, 495.67999267578125, 276.239990234375, 523.2000122070312, 279.6000061035156, 546.8800048828125, 297.8399963378906, 555.8399658203125, 324.7200012207031, 548.7999877929688, 351.6000061035156, 529.5999755859375, 369.3599853515625, 493.7599792480469, 371.7599792480469, 468.1600036621094, 359.2799987792969, 449.5999755859375, 334.79998779296875]]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Open vocabulary detection">Open vocabulary detection<a class="anchor-link" href="#Open vocabulary detection"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 42" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OPEN_VOCABULARY_DETECTION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;a green car&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">bbox_results</span>  <span class="o">=</span> <span class="n">convert_to_od_format</span><span class="p">(</span><span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">bbox_results</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 245.96 ms',
          '&#x7B;&#x27;&amp;lt;OPEN_VOCABULARY_DETECTION&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 159.59999084472656, 598.719970703125, 374.6399841308594]], &#x27;bboxes_labels&#x27;: [&#x27;a green car&#x27;], &#x27;polygons&#x27;: [], &#x27;polygons_labels&#x27;: []&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Region to category">Region to category<a class="anchor-link" href="#Region to category"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 43" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_CATEGORY&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 246.42 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_CATEGORY&amp;gt;&#x27;: &#x27;car&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Region to description">Region to description<a class="anchor-link" href="#Region to description"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 44" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_DESCRIPTION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 280.67 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_DESCRIPTION&amp;gt;&#x27;: &#x27;turquoise Volkswagen Beetle&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tareas OCR">Tareas OCR<a class="anchor-link" href="#Tareas OCR"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 45" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Usamos una nueva imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://ecx.images-amazon.com/images/I/51UUzBDAMsL.jpg?download=true&quot;</span>',
      '<span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s1">&#39;RGB&#39;</span><span class="p">)</span>',
      '<span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=RGB size=403x500&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="OCR">OCR<a class="anchor-link" href="#OCR"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 46" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OCR&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 444.77 ms',
          '&#x7B;&#x27;&amp;lt;OCR&amp;gt;&#x27;: &#x27;CUDAFOR ENGINEERSAn Introduction to High-PerformanceParallel ComputingDUANE STORTIMETE YURTOGLU&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="OCR with region">OCR with region<a class="anchor-link" href="#OCR with region"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 47" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OCR_WITH_REGION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_ocr_bboxes</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 771.91 ms',
          '&#x7B;&#x27;&amp;lt;OCR_WITH_REGION&amp;gt;&#x27;: &#x7B;&#x27;quad_boxes&#x27;: [[167.0435028076172, 50.25, 375.7974853515625, 50.25, 375.7974853515625, 114.75, 167.0435028076172, 114.75], [144.47549438476562, 121.25, 375.7974853515625, 121.25, 375.7974853515625, 149.25, 144.47549438476562, 149.25], [115.86249542236328, 166.25, 376.6034851074219, 166.25, 376.6034851074219, 183.75, 115.86249542236328, 183.25], [239.9864959716797, 184.75, 376.6034851074219, 186.25, 376.6034851074219, 203.75, 239.9864959716797, 201.75], [265.77850341796875, 441.25, 376.6034851074219, 441.25, 376.6034851074219, 456.25, 265.77850341796875, 456.25], [251.67349243164062, 460.25, 376.6034851074219, 460.25, 376.6034851074219, 474.75, 251.67349243164062, 474.75]], &#x27;labels&#x27;: [&#x27;&amp;lt;/s&amp;gt;CUDA&#x27;, &#x27;FOR ENGINEERS&#x27;, &#x27;An Introduction to High-Performance&#x27;, &#x27;Parallel Computing&#x27;, &#x27;DUANE STORTI&#x27;, &#x27;METE YURTOGLU&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=RGB size=403x500&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Uso de Florence-2 base">Uso de Florence-2 base<a class="anchor-link" href="#Uso de Florence-2 base"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 48" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos el modelo y el procesador</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">model_id</span> <span class="o">=</span> <span class="s1">&#39;microsoft/Florence-2-base&#39;</span>',
      '<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s1">&#39;cuda&#39;</span><span class="p">)</span>',
      '<span class="n">processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Volvemos a obtener la imagen del coche</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers/tasks/car.jpg?download=true&quot;</span>',
      '<span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span>',
      '<span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tareas sin prompt adicionales">Tareas sin prompt adicionales<a class="anchor-link" href="#Tareas sin prompt adicionales"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 49" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Caption">Caption<a class="anchor-link" href="#Caption"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 50" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 158.48 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;CAPTION&amp;gt;&#x27;: &#x27;A green car parked in front of a yellow building.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;DETAILED_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 271.37 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DETAILED_CAPTION&amp;gt;&#x27;: &#x27;The image shows a green car parked in front of a yellow building with two brown doors. The car is on the road and the sky is visible in the background.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 476.14 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#x27;: &#x27;The image shows a vintage Volkswagen Beetle car parked on a cobblestone street in front of a yellow building with two wooden doors. The car is a light blue color with a white stripe running along the side. It has two large, round wheels with silver rims. The building appears to be old and dilapidated, with peeling paint and crumbling walls. The sky is blue and there are trees in the background.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Region proposal">Region proposal<a class="anchor-link" href="#Region proposal"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 51" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Es una detecci√≥n de objetos, pero en este caso no devuelve las clases de los objetos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_PROPOSAL&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 235.72 ms',
          '&#x7B;&#x27;&amp;lt;REGION_PROPOSAL&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.23999786376953, 160.0800018310547, 596.7999877929688, 372.239990234375], [453.44000244140625, 95.75999450683594, 581.4400024414062, 262.79998779296875], [450.239990234375, 276.7200012207031, 555.2000122070312, 370.79998779296875], [91.83999633789062, 280.55999755859375, 198.0800018310547, 370.79998779296875], [224.95999145507812, 86.63999938964844, 333.7599792480469, 164.87998962402344], [273.6000061035156, 178.8000030517578, 392.0, 228.72000122070312], [166.0800018310547, 179.27999877929688, 264.6399841308594, 230.63999938964844]], &#x27;labels&#x27;: [&#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Object detection">Object detection<a class="anchor-link" href="#Object detection"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 52" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En este caso s√≠ devuelve las clases de los objetos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OD&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 190.37 ms',
          '&#x7B;&#x27;&amp;lt;OD&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 160.0800018310547, 597.4400024414062, 372.239990234375], [454.7200012207031, 96.23999786376953, 581.4400024414062, 262.79998779296875], [452.1600036621094, 276.7200012207031, 555.2000122070312, 370.79998779296875], [93.75999450683594, 280.55999755859375, 198.72000122070312, 371.2799987792969]], &#x27;labels&#x27;: [&#x27;car&#x27;, &#x27;door&#x27;, &#x27;wheel&#x27;, &#x27;wheel&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Dense region caption">Dense region caption<a class="anchor-link" href="#Dense region caption"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 53" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;DENSE_REGION_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 242.62 ms',
          '&#x7B;&#x27;&amp;lt;DENSE_REGION_CAPTION&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 160.0800018310547, 597.4400024414062, 372.239990234375], [454.0799865722656, 95.75999450683594, 582.0800170898438, 262.79998779296875], [450.8800048828125, 276.7200012207031, 555.8399658203125, 370.79998779296875], [92.47999572753906, 280.55999755859375, 199.36000061035156, 370.79998779296875], [225.59999084472656, 87.1199951171875, 334.3999938964844, 164.39999389648438]], &#x27;labels&#x27;: [&#x27;turquoise Volkswagen Beetle&#x27;, &#x27;wooden door with metal handle and lock&#x27;, &#x27;wheel&#x27;, &#x27;wheel&#x27;, &#x27;door&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tareas con prompt adicionales">Tareas con prompt adicionales<a class="anchor-link" href="#Tareas con prompt adicionales"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 54" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Phrase Grounding">Phrase Grounding<a class="anchor-link" href="#Phrase Grounding"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 55" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;CAPTION_TO_PHRASE_GROUNDING&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;A green car parked in front of a yellow building.&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 183.85 ms',
          '&#x7B;&#x27;&amp;lt;CAPTION_TO_PHRASE_GROUNDING&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 159.1199951171875, 582.719970703125, 375.1199951171875], [0.3199999928474426, 0.23999999463558197, 639.0399780273438, 305.5199890136719]], &#x27;labels&#x27;: [&#x27;A green car&#x27;, &#x27;a yellow building&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Referring expression segmentation">Referring expression segmentation<a class="anchor-link" href="#Referring expression segmentation"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 56" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REFERRING_EXPRESSION_SEGMENTATION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;a green car&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_polygons</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">],</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 2531.89 ms',
          '&#x7B;&#x27;&amp;lt;REFERRING_EXPRESSION_SEGMENTATION&amp;gt;&#x27;: &#x7B;&#x27;polygons&#x27;: [[[178.87998962402344, 182.1599884033203, 180.8000030517578, 182.1599884033203, 185.9199981689453, 178.8000030517578, 187.83999633789062, 178.8000030517578, 191.0399932861328, 176.87998962402344, 192.95999145507812, 176.87998962402344, 196.1599884033203, 174.95999145507812, 198.72000122070312, 174.0, 201.9199981689453, 173.0399932861328, 205.1199951171875, 172.0800018310547, 207.67999267578125, 170.63999938964844, 212.1599884033203, 169.67999267578125, 216.0, 168.72000122070312, 219.83999633789062, 167.75999450683594, 223.67999267578125, 166.8000030517578, 228.1599884033203, 165.83999633789062, 233.9199981689453, 164.87998962402344, 240.95999145507812, 163.9199981689453, 249.9199981689453, 162.95999145507812, 262.0799865722656, 162.0, 313.2799987792969, 162.0, 329.2799987792969, 162.95999145507812, 338.239990234375, 163.9199981689453, 344.0, 164.87998962402344, 349.1199951171875, 165.83999633789062, 352.9599914550781, 166.8000030517578, 357.44000244140625, 167.75999450683594, 361.2799987792969, 168.72000122070312, 365.1199951171875, 169.67999267578125, 368.9599914550781, 170.63999938964844, 372.1600036621094, 172.0800018310547, 374.0799865722656, 173.0399932861328, 377.2799987792969, 175.9199981689453, 379.1999816894531, 178.8000030517578, 381.1199951171875, 182.1599884033203, 383.03997802734375, 185.0399932861328, 384.9599914550781, 187.9199981689453, 386.239990234375, 190.8000030517578, 388.1600036621094, 192.72000122070312, 389.44000244140625, 196.0800018310547, 391.3599853515625, 198.95999145507812, 393.2799987792969, 201.83999633789062, 395.1999816894531, 204.72000122070312, 397.1199951171875, 208.0800018310547, 400.3199768066406, 210.95999145507812, 404.1600036621094, 213.83999633789062, 407.3599853515625, 214.79998779296875, 409.2799987792969, 216.72000122070312, 409.2799987792969, 219.1199951171875, 411.1999816894531, 221.0399932861328, 428.47998046875, 221.0399932861328, 429.1199951171875, 222.0, 441.2799987792969, 222.95999145507812, 455.3599853515625, 222.95999145507812, 464.3199768066406, 223.9199981689453, 471.3599853515625, 224.87998962402344, 477.1199951171875, 225.83999633789062, 482.239990234375, 226.79998779296875, 487.3599853515625, 227.75999450683594, 491.1999816894531, 228.72000122070312, 495.03997802734375, 230.1599884033203, 498.239990234375, 231.1199951171875, 502.0799865722656, 232.0800018310547, 505.2799987792969, 233.0399932861328, 508.47998046875, 234.0, 511.03997802734375, 234.95999145507812, 514.239990234375, 236.87998962402344, 516.1599731445312, 236.87998962402344, 519.3599853515625, 238.79998779296875, 521.2799682617188, 238.79998779296875, 527.0399780273438, 242.1599884033203, 528.9599609375, 244.0800018310547, 532.1599731445312, 245.0399932861328, 535.3599853515625, 246.95999145507812, 537.9199829101562, 248.87998962402344, 541.1199951171875, 252.239990234375, 543.0399780273438, 253.1999969482422, 546.239990234375, 254.1599884033203, 549.4400024414062, 254.1599884033203, 552.0, 255.1199951171875, 555.2000122070312, 257.0400085449219, 557.1199951171875, 257.0400085449219, 559.0399780273438, 258.0, 560.9599609375, 259.91998291015625, 564.1599731445312, 260.8800048828125, 566.0800170898438, 260.8800048828125, 568.0, 261.8399963378906, 569.9199829101562, 263.7599792480469, 571.2000122070312, 266.1600036621094, 571.8399658203125, 269.0400085449219, 573.1199951171875, 272.8800048828125, 573.1199951171875, 283.91998291015625, 573.760009765625, 290.1600036621094, 575.0399780273438, 292.0799865722656, 576.9599609375, 294.0, 578.8800048828125, 294.0, 582.0800170898438, 294.0, 591.0399780273438, 294.0, 592.9599609375, 294.9599914550781, 594.8800048828125, 296.8800048828125, 596.1599731445312, 298.79998779296875, 596.1599731445312, 307.91998291015625, 594.8800048828125, 309.8399963378906, 592.9599609375, 310.79998779296875, 578.8800048828125, 310.79998779296875, 576.9599609375, 312.7200012207031, 576.9599609375, 319.91998291015625, 575.0399780273438, 321.8399963378906, 571.2000122070312, 322.79998779296875, 564.1599731445312, 323.7599792480469, 555.2000122070312, 323.7599792480469, 553.2799682617188, 325.67999267578125, 552.0, 328.55999755859375, 552.0, 335.7599792480469, 551.3599853515625, 339.6000061035156, 550.0800170898438, 342.9599914550781, 548.1599731445312, 346.79998779296875, 546.239990234375, 349.67999267578125, 544.3200073242188, 352.55999755859375, 541.1199951171875, 356.8800048828125, 534.0800170898438, 363.6000061035156, 530.239990234375, 366.47998046875, 526.3999633789062, 368.3999938964844, 523.2000122070312, 369.8399963378906, 520.0, 370.79998779296875, 496.9599914550781, 370.79998779296875, 491.1999816894531, 369.8399963378906, 487.3599853515625, 368.3999938964844, 484.1600036621094, 367.44000244140625, 480.3199768066406, 365.5199890136719, 477.1199951171875, 363.6000061035156, 473.2799987792969, 360.7200012207031, 466.239990234375, 353.5199890136719, 464.3199768066406, 350.6399841308594, 462.3999938964844, 347.7599792480469, 461.1199951171875, 345.8399963378906, 460.47998046875, 342.9599914550781, 459.1999816894531, 339.6000061035156, 458.55999755859375, 336.7200012207031, 457.2799987792969, 333.8399963378906, 457.2799987792969, 331.91998291015625, 455.3599853515625, 330.0, 453.44000244140625, 331.91998291015625, 453.44000244140625, 333.8399963378906, 452.1600036621094, 335.7599792480469, 450.239990234375, 337.67999267578125, 448.3199768066406, 338.6399841308594, 423.3599853515625, 338.6399841308594, 422.0799865722656, 339.6000061035156, 418.239990234375, 340.55999755859375, 414.3999938964844, 340.55999755859375, 412.47998046875, 342.9599914550781, 412.47998046875, 344.8800048828125, 411.1999816894531, 346.79998779296875, 409.2799987792969, 344.8800048828125, 409.2799987792969, 342.9599914550781, 407.3599853515625, 340.55999755859375, 405.44000244140625, 339.6000061035156, 205.75999450683594, 339.6000061035156, 205.1199951171875, 338.6399841308594, 201.9199981689453, 337.67999267578125, 198.72000122070312, 336.7200012207031, 196.1599884033203, 336.7200012207031, 194.239990234375, 338.6399841308594, 192.95999145507812, 340.55999755859375, 192.95999145507812, 342.9599914550781, 191.67999267578125, 344.8800048828125, 189.75999450683594, 347.7599792480469, 187.83999633789062, 350.6399841308594, 185.9199981689453, 353.5199890136719, 184.0, 356.8800048828125, 180.8000030517578, 360.7200012207031, 176.95999145507812, 364.55999755859375, 173.75999450683594, 366.47998046875, 169.9199981689453, 368.3999938964844, 166.72000122070312, 369.8399963378906, 162.87998962402344, 370.79998779296875, 155.83999633789062, 371.7599792480469, 130.87998962402344, 371.7599792480469, 127.04000091552734, 370.79998779296875, 123.83999633789062, 369.8399963378906, 120.0, 367.44000244140625, 116.79999542236328, 365.5199890136719, 113.5999984741211, 363.6000061035156, 105.91999816894531, 355.91998291015625, 104.0, 352.55999755859375, 102.07999420166016, 349.67999267578125, 100.79999542236328, 347.7599792480469, 100.15999603271484, 344.8800048828125, 98.87999725341797, 341.5199890136719, 98.87999725341797, 338.6399841308594, 98.23999786376953, 336.7200012207031, 96.31999969482422, 334.79998779296875, 93.1199951171875, 334.79998779296875, 91.83999633789062, 335.7599792480469, 86.08000183105469, 336.7200012207031, 75.83999633789062, 336.7200012207031, 75.19999694824219, 337.67999267578125, 70.08000183105469, 338.6399841308594, 66.87999725341797, 338.6399841308594, 64.95999908447266, 336.7200012207031, 63.03999710083008, 335.7599792480469, 52.15999984741211, 335.7599792480469, 48.959999084472656, 334.79998779296875, 47.03999710083008, 333.8399963378906, 45.119998931884766, 331.91998291015625, 45.119998931884766, 330.0, 47.03999710083008, 327.6000061035156, 47.03999710083008, 325.67999267578125, 45.119998931884766, 323.7599792480469, 43.20000076293945, 322.79998779296875, 40.0, 322.79998779296875, 38.07999801635742, 321.8399963378906, 36.15999984741211, 319.91998291015625, 34.880001068115234, 317.03997802734375, 34.880001068115234, 309.8399963378906, 36.15999984741211, 307.91998291015625, 38.07999801635742, 306.0, 40.0, 305.03997802734375, 43.84000015258789, 304.0799865722656, 63.03999710083008, 304.0799865722656, 64.95999908447266, 303.1199951171875, 66.87999725341797, 301.1999816894531, 68.15999603271484, 298.79998779296875, 68.79999542236328, 295.91998291015625, 68.79999542236328, 293.0400085449219, 68.15999603271484, 292.0799865722656, 66.87999725341797, 289.1999816894531, 66.87999725341797, 278.1600036621094, 68.15999603271484, 274.79998779296875, 68.79999542236328, 272.8800048828125, 72.0, 270.0, 73.91999816894531, 269.0400085449219, 77.1199951171875, 268.0799865722656, 80.95999908447266, 268.0799865722656, 82.87999725341797, 266.1600036621094, 80.95999908447266, 262.79998779296875, 80.95999908447266, 260.8800048828125, 82.87999725341797, 258.9599914550781, 84.79999542236328, 258.0, 88.0, 258.0, 89.91999816894531, 257.0400085449219, 91.83999633789062, 255.1199951171875, 91.83999633789062, 254.1599884033203, 95.04000091552734, 249.83999633789062, 105.91999816894531, 238.79998779296875, 107.83999633789062, 236.87998962402344, 109.75999450683594, 234.95999145507812, 118.7199935913086, 225.83999633789062, 121.91999816894531, 223.9199981689453, 123.83999633789062, 222.95999145507812, 125.75999450683594, 222.95999145507812, 127.68000030517578, 222.0, 130.87998962402344, 220.0800018310547, 134.72000122070312, 216.72000122070312, 139.83999633789062, 212.87998962402344, 144.95999145507812, 208.0800018310547, 150.0800018310547, 203.75999450683594, 153.9199981689453, 200.87998962402344, 157.75999450683594, 198.0, 159.0399932861328, 198.0, 162.87998962402344, 195.1199951171875, 168.0, 189.83999633789062, 171.83999633789062, 186.95999145507812, 175.0399932861328, 186.0, 176.95999145507812, 184.0800018310547]]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Region to segmentation">Region to segmentation<a class="anchor-link" href="#Region to segmentation"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 57" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_SEGMENTATION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_702&amp;gt;&amp;lt;loc_575&amp;gt;&amp;lt;loc_866&amp;gt;&amp;lt;loc_772&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_polygons</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">],</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 653.99 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_SEGMENTATION&amp;gt;&#x27;: &#x7B;&#x27;polygons&#x27;: [[[470.7200012207031, 288.239990234375, 473.91998291015625, 286.32000732421875, 477.1199951171875, 284.3999938964844, 479.03997802734375, 283.44000244140625, 480.9599914550781, 283.44000244140625, 484.1600036621094, 281.5199890136719, 486.7200012207031, 280.55999755859375, 489.91998291015625, 279.6000061035156, 493.7599792480469, 278.1600036621094, 500.79998779296875, 277.1999816894531, 511.03997802734375, 277.1999816894531, 514.8800048828125, 278.1600036621094, 518.0800170898438, 279.6000061035156, 520.6400146484375, 281.5199890136719, 522.5599975585938, 281.5199890136719, 524.47998046875, 283.44000244140625, 527.6799926757812, 284.3999938964844, 530.8800048828125, 286.32000732421875, 534.719970703125, 289.1999816894531, 543.0399780273438, 297.3599853515625, 544.9599609375, 300.239990234375, 546.8800048828125, 303.1199951171875, 548.7999877929688, 307.44000244140625, 550.0800170898438, 310.32000732421875, 550.719970703125, 313.1999816894531, 552.0, 317.03997802734375, 552.0, 334.32000732421875, 550.719970703125, 338.1600036621094, 550.0800170898438, 341.03997802734375, 548.7999877929688, 343.91998291015625, 546.8800048828125, 348.239990234375, 544.9599609375, 351.1199951171875, 543.0399780273438, 354.0, 532.7999877929688, 364.0799865722656, 529.5999755859375, 366.0, 527.6799926757812, 366.9599914550781, 524.47998046875, 367.91998291015625, 521.9199829101562, 368.8800048828125, 518.0800170898438, 369.8399963378906, 496.9599914550781, 369.8399963378906, 489.91998291015625, 368.8800048828125, 486.7200012207031, 367.91998291015625, 484.1600036621094, 366.9599914550781, 480.9599914550781, 366.0, 479.03997802734375, 365.03997802734375, 475.8399963378906, 363.1199951171875, 472.0, 360.239990234375, 466.8799743652344, 354.9599914550781, 463.67999267578125, 351.1199951171875, 461.7599792480469, 348.239990234375, 459.8399963378906, 343.91998291015625, 458.55999755859375, 341.03997802734375, 457.91998291015625, 338.1600036621094, 456.6399841308594, 335.2799987792969, 456.0, 330.9599914550781, 454.7200012207031, 326.1600036621094, 454.7200012207031, 318.9599914550781, 456.0, 313.1999816894531, 456.6399841308594, 309.3599853515625, 457.91998291015625, 306.47998046875, 458.55999755859375, 303.1199951171875, 461.7599792480469, 297.3599853515625, 463.67999267578125, 294.47998046875]]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Open vocabulary detection">Open vocabulary detection<a class="anchor-link" href="#Open vocabulary detection"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 58" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OPEN_VOCABULARY_DETECTION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;a green car&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">bbox_results</span>  <span class="o">=</span> <span class="n">convert_to_od_format</span><span class="p">(</span><span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">bbox_results</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 138.76 ms',
          '&#x7B;&#x27;&amp;lt;OPEN_VOCABULARY_DETECTION&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 158.63999938964844, 582.0800170898438, 374.1600036621094]], &#x27;bboxes_labels&#x27;: [&#x27;a green car&#x27;], &#x27;polygons&#x27;: [], &#x27;polygons_labels&#x27;: []&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Region to category">Region to category<a class="anchor-link" href="#Region to category"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 59" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_CATEGORY&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 130.24 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_CATEGORY&amp;gt;&#x27;: &#x27;car&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Region to description">Region to description<a class="anchor-link" href="#Region to description"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 60" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_DESCRIPTION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 149.88 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_DESCRIPTION&amp;gt;&#x27;: &#x27;mint green Volkswagen Beetle&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tareas OCR">Tareas OCR<a class="anchor-link" href="#Tareas OCR"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 61" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Usamos una nueva imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://ecx.images-amazon.com/images/I/51UUzBDAMsL.jpg?download=true&quot;</span>',
      '<span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s1">&#39;RGB&#39;</span><span class="p">)</span>',
      '<span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=RGB size=403x500&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="OCR">OCR<a class="anchor-link" href="#OCR"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 62" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OCR&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 231.77 ms',
          '&#x7B;&#x27;&amp;lt;OCR&amp;gt;&#x27;: &#x27;CUDAFOR ENGINEERSAn Introduction to High-PerformanceParallel ComputingDUANE STORTIMETE YURTOGLU&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="OCR with region">OCR with region<a class="anchor-link" href="#OCR with region"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 63" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OCR_WITH_REGION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_ocr_bboxes</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 425.63 ms',
          '&#x7B;&#x27;&amp;lt;OCR_WITH_REGION&amp;gt;&#x27;: &#x7B;&#x27;quad_boxes&#x27;: [[167.0435028076172, 50.25, 374.9914855957031, 50.25, 374.9914855957031, 114.25, 167.0435028076172, 114.25], [144.8784942626953, 120.75, 374.9914855957031, 120.75, 374.9914855957031, 148.75, 144.8784942626953, 148.75], [115.86249542236328, 165.25, 376.20050048828125, 165.25, 376.20050048828125, 183.75, 115.86249542236328, 182.75], [239.9864959716797, 184.75, 376.20050048828125, 185.75, 376.20050048828125, 202.75, 239.9864959716797, 201.75], [266.1814880371094, 440.75, 376.20050048828125, 440.75, 376.20050048828125, 455.75, 266.1814880371094, 455.75], [251.67349243164062, 459.75, 376.20050048828125, 459.75, 376.20050048828125, 474.25, 251.67349243164062, 474.25]], &#x27;labels&#x27;: [&#x27;&amp;lt;/s&amp;gt;CUDA&#x27;, &#x27;FOR ENGINEERS&#x27;, &#x27;An Introduction to High-Performance&#x27;, &#x27;Parallel Computing&#x27;, &#x27;DUANE STORTI&#x27;, &#x27;METE YURTOGLU&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=RGB size=403x500&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Uso de Florence-2 base fine tuning">Uso de Florence-2 base fine tuning<a class="anchor-link" href="#Uso de Florence-2 base fine tuning"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 64" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos el modelo y el procesador</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">model_id</span> <span class="o">=</span> <span class="s1">&#39;microsoft/Florence-2-base-ft&#39;</span>',
      '<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s1">&#39;cuda&#39;</span><span class="p">)</span>',
      '<span class="n">processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Volvemos a obtener la imagen del coche</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers/tasks/car.jpg?download=true&quot;</span>',
      '<span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span>',
      '<span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tareas sin prompt adicionales">Tareas sin prompt adicionales<a class="anchor-link" href="#Tareas sin prompt adicionales"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 65" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Caption">Caption<a class="anchor-link" href="#Caption"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 66" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 176.65 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;CAPTION&amp;gt;&#x27;: &#x27;A green car parked in front of a yellow building.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;DETAILED_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 246.26 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DETAILED_CAPTION&amp;gt;&#x27;: &#x27;In this image we can see a car on the road. In the background there is a wall with doors. At the top of the image there is sky.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 259.87 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#x27;: &#x27;There is a light green car parked in front of a yellow building. There are two brown doors on the building behind the car. There is a brick sidewalk under the car on the ground. &#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Region proposal">Region proposal<a class="anchor-link" href="#Region proposal"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 67" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Es una detecci√≥n de objetos, pero en este caso no devuelve las clases de los objetos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_PROPOSAL&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 120.69 ms',
          '&#x7B;&#x27;&amp;lt;REGION_PROPOSAL&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 160.55999755859375, 598.0800170898438, 371.2799987792969]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Object detection">Object detection<a class="anchor-link" href="#Object detection"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 68" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En este caso s√≠ devuelve las clases de los objetos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OD&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 199.46 ms',
          '&#x7B;&#x27;&amp;lt;OD&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 160.55999755859375, 598.0800170898438, 371.7599792480469], [454.7200012207031, 96.72000122070312, 581.4400024414062, 262.32000732421875], [453.44000244140625, 276.7200012207031, 554.5599975585938, 370.79998779296875], [93.1199951171875, 280.55999755859375, 197.44000244140625, 371.2799987792969]], &#x27;labels&#x27;: [&#x27;car&#x27;, &#x27;door&#x27;, &#x27;wheel&#x27;, &#x27;wheel&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Dense region caption">Dense region caption<a class="anchor-link" href="#Dense region caption"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 69" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;DENSE_REGION_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 210.33 ms',
          '&#x7B;&#x27;&amp;lt;DENSE_REGION_CAPTION&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[35.52000045776367, 160.55999755859375, 598.0800170898438, 371.2799987792969], [454.0799865722656, 276.7200012207031, 553.9199829101562, 370.79998779296875], [94.4000015258789, 280.55999755859375, 196.1599884033203, 371.2799987792969]], &#x27;labels&#x27;: [&#x27;turquoise volkswagen beetle&#x27;, &#x27;wheel&#x27;, &#x27;wheel&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tareas con prompt adicionales">Tareas con prompt adicionales<a class="anchor-link" href="#Tareas con prompt adicionales"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 70" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Phrase Grounding">Phrase Grounding<a class="anchor-link" href="#Phrase Grounding"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 71" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;CAPTION_TO_PHRASE_GROUNDING&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;A green car parked in front of a yellow building.&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 168.37 ms',
          '&#x7B;&#x27;&amp;lt;CAPTION_TO_PHRASE_GROUNDING&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 159.1199951171875, 598.0800170898438, 375.1199951171875], [0.3199999928474426, 0.23999999463558197, 639.0399780273438, 304.0799865722656]], &#x27;labels&#x27;: [&#x27;A green car&#x27;, &#x27;a yellow building&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Referring expression segmentation">Referring expression segmentation<a class="anchor-link" href="#Referring expression segmentation"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 72" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REFERRING_EXPRESSION_SEGMENTATION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;a green car&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_polygons</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">],</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 395.38 ms',
          '&#x7B;&#x27;&amp;lt;REFERRING_EXPRESSION_SEGMENTATION&amp;gt;&#x27;: &#x7B;&#x27;polygons&#x27;: [[[180.8000030517578, 179.27999877929688, 237.75999450683594, 163.44000244140625, 333.1199951171875, 162.47999572753906, 374.7200012207031, 172.55999755859375, 407.3599853515625, 219.59999084472656, 477.7599792480469, 223.9199981689453, 540.47998046875, 248.87998962402344, 576.3200073242188, 264.7200012207031, 576.3200073242188, 292.55999755859375, 598.719970703125, 292.55999755859375, 598.719970703125, 311.7599792480469, 577.5999755859375, 311.7599792480469, 577.5999755859375, 321.8399963378906, 553.9199829101562, 325.1999816894531, 546.239990234375, 355.44000244140625, 523.8399658203125, 371.2799987792969, 477.7599792480469, 367.91998291015625, 456.6399841308594, 342.0, 452.1600036621094, 338.6399841308594, 201.27999877929688, 338.6399841308594, 187.83999633789062, 358.79998779296875, 162.87998962402344, 371.2799987792969, 121.27999877929688, 371.2799987792969, 98.87999725341797, 348.7200012207031, 94.4000015258789, 331.91998291015625, 66.23999786376953, 338.6399841308594, 39.36000061035156, 331.91998291015625, 47.03999710083008, 325.1999816894531, 34.880001068115234, 321.8399963378906, 34.880001068115234, 305.03997802734375, 66.23999786376953, 299.2799987792969, 67.5199966430664, 269.0400085449219, 82.87999725341797, 269.0400085449219, 82.87999725341797, 258.9599914550781, 120.0, 222.95999145507812]]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Region to segmentation">Region to segmentation<a class="anchor-link" href="#Region to segmentation"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 73" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_SEGMENTATION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_702&amp;gt;&amp;lt;loc_575&amp;gt;&amp;lt;loc_866&amp;gt;&amp;lt;loc_772&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_polygons</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">],</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 279.46 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_SEGMENTATION&amp;gt;&#x27;: &#x7B;&#x27;polygons&#x27;: [[[464.3199768066406, 292.0799865722656, 482.239990234375, 280.55999755859375, 504.0, 276.239990234375, 521.9199829101562, 280.55999755859375, 539.8399658203125, 292.0799865722656, 551.3599853515625, 308.8800048828125, 555.8399658203125, 325.67999267578125, 551.3599853515625, 341.5199890136719, 546.8800048828125, 354.9599914550781, 537.9199829101562, 365.03997802734375, 521.9199829101562, 371.7599792480469, 499.5199890136719, 371.7599792480469, 483.5199890136719, 368.3999938964844, 470.0799865722656, 361.67999267578125, 461.1199951171875, 351.6000061035156, 456.6399841308594, 339.1199951171875, 449.5999755859375, 332.3999938964844, 454.0799865722656, 318.9599914550781, 456.6399841308594, 305.5199890136719]]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Open vocabulary detection">Open vocabulary detection<a class="anchor-link" href="#Open vocabulary detection"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 74" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OPEN_VOCABULARY_DETECTION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;a green car&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">bbox_results</span>  <span class="o">=</span> <span class="n">convert_to_od_format</span><span class="p">(</span><span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">bbox_results</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 134.53 ms',
          '&#x7B;&#x27;&amp;lt;OPEN_VOCABULARY_DETECTION&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 159.1199951171875, 597.4400024414062, 374.6399841308594]], &#x27;bboxes_labels&#x27;: [&#x27;a green car&#x27;], &#x27;polygons&#x27;: [], &#x27;polygons_labels&#x27;: []&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Region to category">Region to category<a class="anchor-link" href="#Region to category"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 75" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_CATEGORY&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 131.88 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_CATEGORY&amp;gt;&#x27;: &#x27;car&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Region to description">Region to description<a class="anchor-link" href="#Region to description"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 76" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_DESCRIPTION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 136.35 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_DESCRIPTION&amp;gt;&#x27;: &#x27;car&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tareas OCR">Tareas OCR<a class="anchor-link" href="#Tareas OCR"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 77" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Usamos una nueva imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://ecx.images-amazon.com/images/I/51UUzBDAMsL.jpg?download=true&quot;</span>',
      '<span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s1">&#39;RGB&#39;</span><span class="p">)</span>',
      '<span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=RGB size=403x500&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="OCR">OCR<a class="anchor-link" href="#OCR"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 78" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OCR&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 227.62 ms',
          '&#x7B;&#x27;&amp;lt;OCR&amp;gt;&#x27;: &#x27;CUDAFOR ENGINEERSAn Introduction to High-PerformanceParallel ComputingDUANE STORYIMETE YURTOGLU&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="OCR with region">OCR with region<a class="anchor-link" href="#OCR with region"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 79" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OCR_WITH_REGION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_ocr_bboxes</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 428.51 ms',
          '&#x7B;&#x27;&amp;lt;OCR_WITH_REGION&amp;gt;&#x27;: &#x7B;&#x27;quad_boxes&#x27;: [[167.44650268554688, 50.25, 374.9914855957031, 50.25, 374.9914855957031, 114.25, 167.44650268554688, 114.25], [144.8784942626953, 121.25, 374.9914855957031, 120.75, 374.9914855957031, 148.75, 144.8784942626953, 149.25], [115.4594955444336, 165.75, 376.6034851074219, 165.75, 376.6034851074219, 183.75, 115.4594955444336, 183.75], [239.9864959716797, 184.75, 376.6034851074219, 185.75, 376.6034851074219, 203.75, 239.9864959716797, 202.25], [266.1814880371094, 441.25, 376.20050048828125, 441.25, 376.20050048828125, 456.25, 266.1814880371094, 456.25], [251.67349243164062, 459.75, 376.20050048828125, 459.75, 376.20050048828125, 474.75, 251.67349243164062, 474.75]], &#x27;labels&#x27;: [&#x27;&amp;lt;/s&amp;gt;CUDA&#x27;, &#x27;FOR ENGINEERS&#x27;, &#x27;An Introduction to High-Performance&#x27;, &#x27;Parallel Computing&#x27;, &#x27;DUANE STORYI&#x27;, &#x27;METE YURTOGLU&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=RGB size=403x500&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>

















    </div>

  </section>

</PostLayout>
