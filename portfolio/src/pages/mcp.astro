---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'MCP: Guía Completa para Crear servidores y clientes MCP (Model Context Protocol) con FastMCP';
const end_url = 'mcp';
const description = 'Aprende qué es el Model Context Protocol (MCP), el estándar de código abierto de Anthropic que revoluciona la forma en que los modelos de IA interactúan con herramientas externas. En esta guía práctica y detallada, te llevo paso a paso en la creación de un servidor y un cliente MCP desde cero utilizando la librería fastmcp. Construirás un agente de IA "inteligente" con Claude Sonnet, capaz de interactuar con la API de GitHub para consultar issues e información de repositorios. Cubriremos desde los conceptos básicos hasta funcionalidades avanzadas como el filtrado de herramientas por tags, la composición de servidores, el uso de recursos estáticos y plantillas dinámicas (resource templates), la generación de prompts y la implementación de autenticación segura. ¡Descubre cómo MCP puede estandarizar y simplificar la integración de herramientas en tus aplicaciones de IA, de forma análoga a como el USB unificó los periféricos!';
const keywords = 'Model Context Protocol, MCP, FastMCP, Anthropic, Inteligencia Artificial, Agentes de IA, LLM, Uso de Herramientas (Tool Use), Function Calling, API de GitHub, Python, Tutorial, Guía Completa, Estándar Abierto, Claude 3.5 Sonnet, Autenticación de IA';
const languaje = 'ES';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/MCP_vs_APIs.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=960
    image_height=540
    image_extension=webp
    article_date=2025-07-13+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#¿Que es MCP?"><h2>¿Qué es MCP?</h2></a>
      <a class="anchor-link" href="#FastMCP"><h2>FastMCP</h2></a>
      <a class="anchor-link" href="#Crear entorno virtual"><h2>Crear entorno virtual</h2></a>
      <a class="anchor-link" href="#Servidor MCP"><h3>Servidor MCP</h3></a>
      <a class="anchor-link" href="#Cliente MCP"><h3>Cliente MCP</h3></a>
      <a class="anchor-link" href="#MCP basico"><h2>MCP básico</h2></a>
      <a class="anchor-link" href="#Libreria con funciones para leer de GitHub"><h2>Librería con funciones para leer de GitHub</h2></a>
      <a class="anchor-link" href="#Crear tool de MCP para obtener una lista de issues de un repositorio de GitHub"><h2>Crear <code>tool</code> de MCP para obtener una lista de issues de un repositorio de GitHub</h2></a>
      <a class="anchor-link" href="#Servidor MCP"><h3>Servidor MCP</h3></a>
      <a class="anchor-link" href="#Cliente MCP"><h3>Cliente MCP</h3></a>
      <a class="anchor-link" href="#Prueba de la tool"><h3>Prueba de la <code>tool</code></h3></a>
      <a class="anchor-link" href="#Crear el servidor MCP con mas informacion"><h2>Crear el servidor MCP con más información</h2></a>
      <a class="anchor-link" href="#Servidor MCP"><h3>Servidor MCP</h3></a>
      <a class="anchor-link" href="#Filtrar tools mediante tags"><h2>Filtrar <code>tool</code>s mediante tags</h2></a>
      <a class="anchor-link" href="#Servidor MCP"><h3>Servidor MCP</h3></a>
      <a class="anchor-link" href="#Prueba de los tags"><h3>Prueba de los tags</h3></a>
      <a class="anchor-link" href="#Cambio a private"><h3>Cambio a private</h3></a>
      <a class="anchor-link" href="#Prueba del tag private"><h3>Prueba del tag private</h3></a>
      <a class="anchor-link" href="#Vuelta a public"><h3>Vuelta a public</h3></a>
      <a class="anchor-link" href="#Excluir tools por tags"><h2>Excluir <code>tool</code>s por tags</h2></a>
      <a class="anchor-link" href="#Servidor MCP"><h3>Servidor MCP</h3></a>
      <a class="anchor-link" href="#Prueba de exclude_tags"><h3>Prueba de <code>exclude_tags</code></h3></a>
      <a class="anchor-link" href="#Composicion de servidores"><h2>Composición de servidores</h2></a>
      <a class="anchor-link" href="#Servidor MCP"><h3>Servidor MCP</h3></a>
      <a class="anchor-link" href="#Prueba de la composicion de servidores MCP"><h3>Prueba de la composición de servidores MCP</h3></a>
      <a class="anchor-link" href="#Capa de transporte"><h2>Capa de transporte</h2></a>
      <a class="anchor-link" href="#Servidor MCP"><h3>Servidor MCP</h3></a>
      <a class="anchor-link" href="#Cliente MCP"><h3>Cliente MCP</h3></a>
      <a class="anchor-link" href="#Prueba del MCP por http"><h3>Prueba del MCP por http</h3></a>
      <a class="anchor-link" href="#Vuelta del servidor a STDIO"><h3>Vuelta del servidor a <code>STDIO</code></h3></a>
      <a class="anchor-link" href="#Argumentos excluidos"><h2>Argumentos excluídos</h2></a>
      <a class="anchor-link" href="#Servidor MCP"><h3>Servidor MCP</h3></a>
      <a class="anchor-link" href="#Contexto"><h2>Contexto</h2></a>
      <a class="anchor-link" href="#Servidor MCP"><h3>Servidor MCP</h3></a>
      <a class="anchor-link" href="#Crear un resource"><h2>Crear un <code>resource</code></h2></a>
      <a class="anchor-link" href="#Servidor MCP"><h3>Servidor MCP</h3></a>
      <a class="anchor-link" href="#Cliente MCP"><h3>Cliente MCP</h3></a>
      <a class="anchor-link" href="#Prueba del resource"><h3>Prueba del <code>resource</code></h3></a>
      <a class="anchor-link" href="#Añadir contexto al resource"><h2>Añadir contexto al <code>resource</code></h2></a>
      <a class="anchor-link" href="#Servidor MCP"><h3>Servidor MCP</h3></a>
      <a class="anchor-link" href="#Prueba del servidor con contexto en el resource"><h3>Prueba del servidor con contexto en el <code>resource</code></h3></a>
      <a class="anchor-link" href="#Crear un resource template"><h2>Crear un <code>resource template</code></h2></a>
      <a class="anchor-link" href="#Servidor MCP"><h3>Servidor MCP</h3></a>
      <a class="anchor-link" href="#Client MCP"><h3>Client MCP</h3></a>
      <a class="anchor-link" href="#Prueba del resource template"><h3>Prueba del <code>resource template</code></h3></a>
      <a class="anchor-link" href="#Crear un prompt"><h2>Crear un <code>prompt</code></h2></a>
      <a class="anchor-link" href="#Servidor MCP"><h3>Servidor MCP</h3></a>
      <a class="anchor-link" href="#Cliente MCP"><h3>Cliente MCP</h3></a>
      <a class="anchor-link" href="#Prueba del prompt"><h3>Prueba del <code>prompt</code></h3></a>
      <a class="anchor-link" href="#Vuelta a HTTP"><h2>Vuelta a HTTP</h2></a>
      <a class="anchor-link" href="#Servidor MCP"><h3>Servidor MCP</h3></a>
      <a class="anchor-link" href="#Cliente MCP"><h3>Cliente MCP</h3></a>
      <a class="anchor-link" href="#Autenticacion"><h2>Autenticación</h2></a>
      <a class="anchor-link" href="#Servidor MCP"><h3>Servidor MCP</h3></a>
      <a class="anchor-link" href="#Cliente MCP"><h3>Cliente MCP</h3></a>
      <a class="anchor-link" href="#Prueba del MCP con autenticacion"><h3>Prueba del MCP con autenticación</h3></a>
      <a class="anchor-link" href="#Ping del cliente al servidor"><h2>Ping del cliente al servidor</h2></a>
      <a class="anchor-link" href="#Cliente MCP"><h3>Cliente MCP</h3></a>
      <a class="anchor-link" href="#Prueba del ping"><h3>Prueba del ping</h3></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="¿Que es MCP?">¿Qué es MCP?<a class="anchor-link" href="#¿Que es MCP?"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 1" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>MCP (Model Context Protocol) es un estándar open source desarrollado por Anthropic para permitir a los modelos de IA interactuar con herramientas externas mediante un estándar</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hasta el desarrollo del protocolo MCP, cuando queríamos que un LLM interactuara con herramientas, teníamos que crear código para poder interactuar con la herramienta, y mediante <code>function calling</code> enviarle la información al LLM.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/MCP_vs_APIs.webp" alt="MCP vs API">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Así que mediante MCP, un LLM puede interactuar con herramientas gracias a un estándar. De esta manera si una persona crea un servidor MCP, dicho servidor puede ser reutilizado por otros con un único cliente. Si en tu aplicación desarrollas un cliente, puedes descargarte un servidor MCP desarrollado por otro, y usarlo sin problema.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Comúnmente MCP se asemeja al estándar USB. Antes del USB, cada periférico tenía un tipo de conexión diferente, unos tenían puertos serie, otros paralelo. Diferentes formatos de conectores, etc.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/mcp-usb.webp" alt="USB MCP">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Con la llegada del USB, todos los periféricos se adaptaron a este estándar, por lo que con un solo conector USB en tu ordenador, puedes conectar casi cualquier periférico.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>MCP tiene 7 componentes principales:</p>
      <ul>
        <li><strong>Host</strong>: Aplicación LLM que tiene acceso a herramientas MCP.</li>
        <li><strong>Servidor MCP</strong>: Servidor que realiza la comunicación con la API o herramienta a la que queremos exponer al LLM</li>
        <li><strong>Cliente MCP</strong>: Cliente que se conecta al servidor MCP y realiza las peticiones</li>
        <li><strong>Tool</strong>: Función que se ejecuta en el servidor MCP y que puede ser invocada por el LLM</li>
        <li><strong>Resource</strong>: Recurso que se puede usar en el servidor MCP. Suelen dar al LLM acceso a recursos estáticos como archivos, bases de datos, etc.</li>
        <li><strong>Resource template</strong>: Template para crear recursos dinámicos. Mediante estas plantillas, el LLM puede crear dinámicamente el recurso al que quiere acceder</li>
        <li><strong>Prompt</strong>: Prompt que se usa para generar un prompt que será usado por el LLM para interactuar con el servidor MCP.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Un único host (aplicación) puede tener varios clientes. Cada cliente se conectará a un servidor MCP</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/mcp-system-architecture.webp" alt="mcp architecture">
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="FastMCP">FastMCP<a class="anchor-link" href="#FastMCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 2" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Aunque en la documentación de MCP recomiendan instalar <code>mcp[&quot;cli&quot;]</code>, hay una librería creada por encima llamada <code>fastmcp</code>, que ayuda mucho a la hora de crear servidores MCP, así que vamos a usarla</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Crear entorno virtual">Crear entorno virtual<a class="anchor-link" href="#Crear entorno virtual"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 3" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para crear un servidor y un cliente MCP, vamos a crear entornos virtuales con <code>uv</code> con las dependencias que vamos a necesitar</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Servidor MCP">Servidor MCP<a class="anchor-link" href="#Servidor MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 4" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primero creamos una carpeta para el servidor de MCP</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">gitHub_MCP_server</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Iniciamos el entorno <code>uv</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">gitHub_MCP_server</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">init</span> <span class="o">.</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Initialized project `github-mcp-server` at `/Users/macm1/Documents/web/portafolio/posts/gitHub_MCP_server`',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Lo activamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">gitHub_MCP_server</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">venv</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Using CPython 3.11.11',
          'Creating virtual environment at: .venv',
          'Activate with: source .venv/bin/activate',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>E instalamos las librerías necesarias</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">gitHub_MCP_server</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">add</span> <span class="n">anthropic</span> <span class="n">fastmcp</span> <span class="n">python</span><span class="o">-</span><span class="n">dotenv</span> <span class="n">requests</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Resolved 42 packages in 34ms',
          'Installed 40 packages in 71ms',
          '+ annotated-types==0.7.0',
          '+ anyio==4.9.0',
          '+ authlib==1.6.0',
          '+ certifi==2025.6.15',
          '+ cffi==1.17.1',
          '+ charset-normalizer==3.4.2',
          '+ click==8.2.1',
          '+ cryptography==45.0.4',
          '+ distro==1.9.0',
          '+ exceptiongroup==1.3.0',
          '+ fastmcp==2.9.0',
          '+ h11==0.16.0',
          '+ httpcore==1.0.9',
          '+ httpx==0.28.1',
          '+ httpx-sse==0.4.0',
          '+ idna==3.10',
          '+ jiter==0.10.0',
          '+ markdown-it-py==3.0.0',
          '+ mcp==1.9.4',
          '+ mdurl==0.1.2',
          '+ openapi-pydantic==0.5.1',
          '+ pycparser==2.22',
          '+ pydantic==2.11.7',
          '+ pydantic-core==2.33.2',
          '+ pydantic-settings==2.10.0',
          '+ pygments==2.19.2',
          '+ python-dotenv==1.1.1',
          '+ python-multipart==0.0.20',
          '+ requests==2.32.4',
          '+ rich==14.0.0',
          '+ shellingham==1.5.4',
          '+ sniffio==1.3.1',
          '+ sse-starlette==2.3.6',
          '+ starlette==0.47.1',
          '+ typer==0.16.0',
          '+ typing-extensions==4.14.0',
          '+ typing-inspection==0.4.1',
          '+ typing-inspection==0.4.1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Cliente MCP">Cliente MCP<a class="anchor-link" href="#Cliente MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 5" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora creamos una carpeta donde programaremos el cliente MCP</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">client_MCP</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Iniciamos el entorno uv</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">client_MCP</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">init</span> <span class="o">.</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Initialized project `client-mcp` at `/Users/macm1/Documents/web/portafolio/posts/client_MCP`',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Lo activamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">client_MCP</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">venv</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Using CPython 3.11.11',
          'Creating virtual environment at: .venv',
          'Activate with: source .venv/bin/activate',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y por último, instalamos las librerías necesarias para el cliente.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">client_MCP</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">add</span> <span class="n">anthropic</span> <span class="n">fastmcp</span> <span class="n">python</span><span class="o">-</span><span class="n">dotenv</span> <span class="n">requests</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Resolved 42 packages in 307ms',
          'Prepared 5 packages in 115ms',
          'Installed 40 packages in 117ms',
          '+ annotated-types==0.7.0',
          '+ anthropic==0.55.0',
          '+ anyio==4.9.0',
          '+ authlib==1.6.0',
          '+ certifi==2025.6.15',
          '+ cffi==1.17.1',
          '+ charset-normalizer==3.4.2',
          '+ click==8.2.1',
          '+ cryptography==45.0.4',
          '+ distro==1.9.0',
          '+ exceptiongroup==1.3.0',
          '+ fastmcp==2.9.0',
          '+ h11==0.16.0',
          '+ httpcore==1.0.9',
          '+ httpx==0.28.1',
          '+ httpx-sse==0.4.0',
          '+ idna==3.10',
          '+ jiter==0.10.0',
          '+ markdown-it-py==3.0.0',
          '+ mcp==1.9.4',
          '+ mdurl==0.1.2',
          '+ openapi-pydantic==0.5.1',
          '+ pycparser==2.22',
          '+ pydantic==2.11.7',
          '+ pydantic-core==2.33.2',
          '+ pydantic-settings==2.10.0',
          '+ pygments==2.19.2',
          '+ python-dotenv==1.1.1',
          '+ python-multipart==0.0.20',
          '+ requests==2.32.4',
          '+ rich==14.0.0',
          '+ shellingham==1.5.4',
          '+ sniffio==1.3.1',
          '+ sse-starlette==2.3.6',
          '+ starlette==0.47.1',
          '+ typer==0.16.0',
          '+ typing-extensions==4.14.0',
          '+ typing-inspection==0.4.1',
          '+ typing-inspection==0.4.1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a usar Sonnet 3.5 como modelo LLM, así que creamos un archivo <code>.env</code> en la carpeta del cliente con la API KEY de Claude que se puede obtener en la página <a href="https://console.anthropic.com/settings/keys" target="_blank" rel="nofollow noreferrer">keys</a> de la API de Claude</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">client_MCP</span><span class="o">/.</span><span class="n">env</span>',
      '<span class="w"> </span>',
      '<span class="n">ANTHROPIC_API_KEY</span><span class="o">=</span><span class="s2">&quot;ANTHROPIC_API_KEY&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Writing client_MCP/.env',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="MCP basico">MCP básico<a class="anchor-link" href="#MCP basico"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 6" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Escribimos el mínimo código que necesitamos para tener un servidor MCP</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">mcp.server.fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create an MCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">transport</span><span class="o">=</span><span class="s1">&#39;stdio&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github_server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver, tenemos que crear un objeto <code>FastMCP</code> y luego ejecutar el servidor con <code>mcp.run</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Libreria con funciones para leer de GitHub">Librería con funciones para leer de GitHub<a class="anchor-link" href="#Libreria con funciones para leer de GitHub"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 7" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vamos a crear un servidor MCP para poder usar utilidades de GitHub, vamos a crear un archivo con las funciones necesarias para construir los headers necesarios para poder usar la API de GitHub.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">os</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">dotenv</span><span class="w"> </span><span class="kn">import</span> <span class="n">load_dotenv</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Load the GitHub token from the .env file</span>',
      '<span class="n">load_dotenv</span><span class="p">()</span>',
      '<span class="n">GITHUB_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;GITHUB_TOKEN&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Check if the GitHub token is configured</span>',
      '<span class="k">if</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;WARNING: The GITHUB_TOKEN environment variable is not configured.&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Requests to the GitHub API may fail due to rate limits.&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Create a .env file in this directory with GITHUB_TOKEN=&#39;your_token_here&#39;&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&quot;GITHUB_TOKEN is not configured&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Helper function to create headers for GitHub API requests</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">create_github_headers</span><span class="p">():</span>',
      '<span class="w">    </span><span class="n">headers</span> <span class="o">=</span> <span class="p">{}</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">headers</span><span class="p">[</span><span class="s2">&quot;Authorization&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;Bearer </span><span class="si">{</span><span class="n">GITHUB_TOKEN</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">    </span><span class="c1"># GitHub recommends including a User-Agent</span>',
      '<span class="w">    </span><span class="n">headers</span><span class="p">[</span><span class="s2">&quot;User-Agent&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;MCP_GitHub_Server_Example&quot;</span>',
      '<span class="w">    </span><span class="n">headers</span><span class="p">[</span><span class="s2">&quot;Accept&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;application/vnd.github.v3+json&quot;</span> <span class="c1"># Good practice</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">headers</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para poder construir los headers, necesitamos un token de GitHub. Para ello, vamos a <a href="https://github.com/settings/personal-access-tokens" target="_blank" rel="nofollow noreferrer">personal-access-tokens</a> y creamos un nuevo token. Lo copiamos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora, creamos un <code>.env</code>, donde vamos a almacenar el token de GitHub.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/.</span><span class="n">env</span>',
      '<span class="w"> </span>',
      '<span class="n">GITHUB_TOKEN</span> <span class="o">=</span> <span class="s2">&quot;GITHUB_TOKEN&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/.env',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2>Crear <code>tool</code> de MCP para obtener una lista de issues de un repositorio de GitHub</h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Servidor MCP">Servidor MCP<a class="anchor-link" href="#Servidor MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 8" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Añadimos una función para poder listar los issues de un repositorio de GitHub. Para convertir dicha función en una <code>tool</code> de MCP, usamos el decorador <code>@mcp.tool()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">httpx</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">github</span><span class="w"> </span><span class="kn">import</span> <span class="n">GITHUB_TOKEN</span><span class="p">,</span> <span class="n">create_github_headers</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create a FastMCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">()</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to the first 10 issues to avoid long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=10&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;Sin título&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comentarios)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Mostrando los primeros 10 issues abiertos&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Mostrando todos los </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> issues abiertos&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Starting GitHub FastMCP server...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;DEBUG: Server name: </span><span class="si">{</span><span class="n">mcp</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Available tools: list_repository_issues&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github_server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Cliente MCP">Cliente MCP<a class="anchor-link" href="#Cliente MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 9" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora creamos un cliente MCP para poder usar la <code>tool</code> que hemos creado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">client_MCP</span><span class="o">/</span><span class="n">client</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">sys</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">asyncio</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">contextlib</span><span class="w"> </span><span class="kn">import</span> <span class="n">AsyncExitStack</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">anthropic</span><span class="w"> </span><span class="kn">import</span> <span class="n">Anthropic</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">dotenv</span><span class="w"> </span><span class="kn">import</span> <span class="n">load_dotenv</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">Client</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Load environment variables from .env file</span>',
      '<span class="n">load_dotenv</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">class</span><span class="w"> </span><span class="nc">FastMCPClient</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    FastMCP client that integrates with Claude to process user queries</span>',
      '<span class="sd">    and use tools exposed by a FastMCP server.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Initialize the FastMCP client with Anthropic and resource management.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">exit_stack</span> <span class="o">=</span> <span class="n">AsyncExitStack</span><span class="p">()</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span> <span class="o">=</span> <span class="n">Anthropic</span><span class="p">()</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">connect_to_server</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">server_script_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Connect to the specified FastMCP server.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            server_script_path: Path to the server script (Python)</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔗 Connecting to FastMCP server: </span><span class="si">{</span><span class="n">server_script_path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Determine the server type based on the extension</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="ow">not</span> <span class="n">server_script_path</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39;.py&#39;</span><span class="p">):</span>',
      '<span class="w">            </span><span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Unsupported server type. Use .py files. Received: </span><span class="si">{</span><span class="n">server_script_path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Create FastMCP client </span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="n">Client</span><span class="p">(</span><span class="n">server_script_path</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># Note: FastMCP Client automatically infers transport from .py files</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;✅ Client created successfully&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_available_tools</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List available tools in the FastMCP server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Get list of tools from the server using FastMCP context</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">tools</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_tools</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">tools</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🛠️  Available tools (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">tools</span><span class="p">)</span><span class="si">}</span><span class="s2">):&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">                    </span><span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📋 </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">tool</span><span class="o">.</span><span class="n">description</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Description: </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="c1"># Show parameters if available</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool</span><span class="p">,</span> <span class="s1">&#39;inputSchema&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="s1">&#39;properties&#39;</span> <span class="ow">in</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">params</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">[</span><span class="s1">&#39;properties&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>',
      '<span class="w">                                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Parameters: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No tools found in the server&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing tools: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">process_query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Process a user query, interacting with Claude and FastMCP tools.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            query: User query</span>',
      '<span class="sd">            </span>',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            str: Final processed response</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Use FastMCP context for all operations</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Get available tools</span>',
      '<span class="w">                </span><span class="n">tools_list</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_tools</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Prepare tools for Claude in correct format</span>',
      '<span class="w">                </span><span class="n">claude_tools</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools_list</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">claude_tool</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">description</span> <span class="ow">or</span> <span class="sa">f</span><span class="s2">&quot;Tool </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;input_schema&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span> <span class="ow">or</span> <span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span> <span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{}}</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                    </span><span class="n">claude_tools</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">claude_tool</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Create initial message for Claude</span>',
      '<span class="w">                </span><span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>',
      '<span class="w">                    </span><span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="n">query</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                </span><span class="p">]</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># First call to Claude</span>',
      '<span class="w">                </span><span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">                    </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;claude-3-5-sonnet-20241022&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">6000</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">tools</span><span class="o">=</span><span class="n">claude_tools</span> <span class="k">if</span> <span class="n">claude_tools</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">                </span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Process Claude&#39;s response</span>',
      '<span class="w">                </span><span class="n">response_text</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">content_block</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">if</span> <span class="n">content_block</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;text&quot;</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="n">response_text</span> <span class="o">+=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                        </span>',
      '<span class="w">                    </span><span class="k">elif</span> <span class="n">content_block</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;tool_use&quot;</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="c1"># Claude wants to use a tool</span>',
      '<span class="w">                        </span><span class="n">tool_name</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">name</span>',
      '<span class="w">                        </span><span class="n">tool_args</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">input</span>',
      '<span class="w">                        </span><span class="n">tool_call_id</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">id</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔧 Claude wants to use: </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📝 Arguments: </span><span class="si">{</span><span class="n">tool_args</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="c1"># Execute tool on the FastMCP server</span>',
      '<span class="w">                            </span><span class="n">tool_result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">call_tool</span><span class="p">(</span><span class="n">tool_name</span><span class="p">,</span> <span class="n">tool_args</span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;✅ Tool executed successfully&quot;</span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Add tool result to the conversation</span>',
      '<span class="w">                            </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span>',
      '<span class="w">                            </span><span class="p">})</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Format result for Claude</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="n">tool_result</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="c1"># Convert result to string format for Claude</span>',
      '<span class="w">                                </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="p">)</span>',
      '<span class="w">                                </span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                    </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                                    </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tool_result&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;tool_use_id&quot;</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;Tool result: </span><span class="si">{</span><span class="n">result_content</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                                    </span><span class="p">}]</span>',
      '<span class="w">                                </span><span class="p">})</span>',
      '<span class="w">                            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                    </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                                    </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tool_result&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;tool_use_id&quot;</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Tool executed without response content&quot;</span>',
      '<span class="w">                                    </span><span class="p">}]</span>',
      '<span class="w">                                </span><span class="p">})</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Second call to Claude with the tool result</span>',
      '<span class="w">                            </span><span class="n">final_response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">                                </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;claude-3-5-sonnet-20241022&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">6000</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">tools</span><span class="o">=</span><span class="n">claude_tools</span> <span class="k">if</span> <span class="n">claude_tools</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">                            </span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Extract text from the final response</span>',
      '<span class="w">                            </span><span class="k">for</span> <span class="n">final_content</span> <span class="ow">in</span> <span class="n">final_response</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">final_content</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;text&quot;</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">response_text</span> <span class="o">+=</span> <span class="n">final_content</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                                    </span>',
      '<span class="w">                        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="n">error_msg</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;❌ Error executing </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="n">error_msg</span><span class="p">)</span>',
      '<span class="w">                            </span><span class="n">response_text</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="si">{</span><span class="n">error_msg</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">return</span> <span class="n">response_text</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_msg</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;❌ Error processing query: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="n">error_msg</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="n">error_msg</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">chat_loop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Main chat loop with user interaction.</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤖 FastMCP client started. Write &#39;quit&#39;, &#39;q&#39;, &#39;exit&#39;, &#39;salir&#39; to exit.&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;💬 You can ask questions about GitHub repositories!&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📚 The client can use tools from the FastMCP server&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;-&quot;</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Request user input</span>',
      '<span class="w">                </span><span class="n">user_input</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">👤 You: &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">user_input</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;quit&#39;</span><span class="p">,</span> <span class="s1">&#39;q&#39;</span><span class="p">,</span> <span class="s1">&#39;exit&#39;</span><span class="p">,</span> <span class="s1">&#39;salir&#39;</span><span class="p">]:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;👋 Bye!&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="k">break</span>',
      '<span class="w">                    </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="ow">not</span> <span class="n">user_input</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">continue</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤔 Claude is thinking...&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Process query</span>',
      '<span class="w">                </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">process_query</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Show response</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤖 Claude: </span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">👋 Disconnecting...&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">break</span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">❌ Error in chat: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">continue</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">cleanup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Clean up resources and close connections.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🧹 Cleaning up resources...&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># FastMCP Client cleanup is handled automatically by context manager</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">exit_stack</span><span class="o">.</span><span class="n">aclose</span><span class="p">()</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;✅ Resources released&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">main</span><span class="p">():</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Main function that initializes and runs the FastMCP client.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Verify command line arguments</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;❌ Usage: python client.py &amp;lt;path_to_fastmcp_server&amp;gt;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Example: python client.py ../MCP_github/github_server.py&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="n">server_script_path</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Create and run client</span>',
      '<span class="w">    </span><span class="n">client</span> <span class="o">=</span> <span class="n">FastMCPClient</span><span class="p">()</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Connect to the server</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">connect_to_server</span><span class="p">(</span><span class="n">server_script_path</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># List available tools after connection</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_available_tools</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Start chat loop</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">chat_loop</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Fatal error: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">finally</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Ensure resources are cleaned up</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">cleanup</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="c1"># Entry point of the script</span>',
      '<span class="w">    </span><span class="n">asyncio</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting client_MCP/client.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Explicación del cliente MCP</p>
      <ul>
        <li>En <code>main</code> se comprueba que se ha pasado un argumento con el path del servidor MCP.</li>
        <li>Se crea un objeto de la clase <code>FastMCPClient</code> con el path del servidor MCP. Al crear el objeto se ejecuta el método <code>__init__</code> que crea la conexión con el LLM de Anthropic, que va a ser el LLM que va a poner el "cerebro"</li>
        <li>Se intenta conectar con el servidor MCP llamando al método <code>connect_to_server</code> para abrir una sesión con el servidor MCP.</li>
        <li>Se listan las <code>tool</code>s disponibles con el método <code>list_available_tools</code></li>
        <li>Si se ha podido conectar, se llama al método <code>chat_loop</code> que es un bucle infinito para chatear con el LLM que se acaba de crear en el cliente. Solo se para la ejecución cuando se introduce <code>quit</code>, <code>q</code>, <code>exit</code> o <code>salir</code> en el chat.</li>
        <li>Se procesa la entrada del usuario con el método <code>process_query</code> que obtiene la lista de <code>tool</code>s disponibles y hace una petición al LLM con el mensaje del usuario y la lista de <code>tool</code>s</li>
        <ul>
          <li>Si el LLM responde con texto, se devuelve el texto, que será impreso</li>
          <li>Si el LLM responde con <code>tool_use</code>, se obtiene el nombre de la <code>tool</code>, los argumentos y se crea una ID de ejecución. Se ejecuta la tool. Con el resultado de la tool, se crea un nuevo mensaje que se le manda al LLM para que lo procese y genere una respuesta, que será devuelta e impresa.</li>
        </ul>
        <li>Cuando se termine la conversación, se llamará al método <code>cleanup</code>, que cerrará lo que sea necesario cerrar.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3>Prueba de la <code>tool</code></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Nos vamos a la ruta del cliente y lo ejecutamos, dándole la ruta del servidor MCP.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">client_MCP</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">run</span> <span class="n">client</span><span class="o">.</span><span class="n">py</span> <span class="o">../</span><span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🔗 Connecting to FastMCP server: ../gitHub_MCP_server/github_server.py',
          '✅ Client created successfully',
          '[06/28/25 09:22:09] INFO     Starting MCP server &#x27;GitHubMCP&#x27; with transport &#x27;stdio&#x27;                          server.py:1246',
          '🛠️  Available tools (1):',
          '==================================================',
          '📋 list_repository_issues',
          '&#x20;&#x20;&#x20;Description: Lists open issues for a given GitHub repository.',
          'Args:',
          '&#x20;&#x20;&#x20;&#x20;owner: The owner of the repository (e.g., &#x27;modelcontextprotocol&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;repo_name: The name of the repository (e.g., &#x27;python-sdk&#x27;)',
          'Returns:',
          '&#x20;&#x20;&#x20;&#x20;list[dict]: A list of dictionaries, each containing information about an issue',
          '&#x20;&#x20;&#x20;Parameters: owner, repo_name',
          '🤖 FastMCP client started. Write &#x27;quit&#x27;, &#x27;q&#x27;, &#x27;exit&#x27;, &#x27;salir&#x27; to exit.',
          '💬 You can ask questions about GitHub repositories!',
          '📚 The client can use tools from the FastMCP server',
          '------------------------------------------------------------',
          '👤 You: Tell me de issues of repository transformers of huggingface',
          '🤔 Claude is thinking...',
          '🔧 Claude wants to use: list_repository_issues',
          '📝 Arguments: &#x7B;&#x27;owner&#x27;: &#x27;huggingface&#x27;, &#x27;repo_name&#x27;: &#x27;transformers&#x27;&#x7D;',
          '✅ Tool executed successfully',
          '🤖 Claude: I&#x27;ll help you list the issues from the Hugging Face transformers repository. Let me use the `list_repository_issues` function with the appropriate parameters.I&#x27;ll summarize the current open issues from the Hugging Face transformers repository. Here are the 10 most recent open issues:',
          '1. [#39097] Core issue about saving models with multiple shared tensor groups when dispatched',
          '2. [#39096] Pull request to fix position index in v4.52.4',
          '3. [#39095] Issue with Qwen2_5_VLVisionAttention flash attention missing &#x27;is_causal&#x27; attribute',
          '4. [#39094] Documentation improvement for PyTorch examples',
          '5. [#39093] Style change PR for lru_cache decorator',
          '6. [#39091] Compatibility issue with sentencepiece on Windows in Python 3.13',
          '7. [#39090] Pull request for fixing bugs in finetune and batch inference',
          '8. [#39089] Bug report for LlavaOnevisonConfig initialization in version 4.52.4',
          '9. [#39087] Documentation PR for Gemma 3n audio encoder',
          '10. [#39084] Pull request for refactoring gemma3n',
          'Note that this is showing the 10 most recent open issues, and there might be more issues in the repository. Each issue has a link where you can find more details about the specific problem or proposed changes.',
          'Would you like more specific information about any of these issues?',
          '👤 You: q',
          '👋 Bye!',
          '🧹 Cleaning up resources...',
          '✅ Resources released',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Al ejecutarlo vemos</p>
      <div class='highlight'><pre><code>🛠️  Available tools (1):
      ==================================================
      📋 list_repository_issues
         Description: Lists open issues for a given GitHub repository.
      
      Args:
          owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)
          repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)
      
      Returns:
          list[dict]: A list of dictionaries, each containing information about an issue
         Parameters: owner, repo_name</code></pre></div>
      <p>Lo que indica que el cliente MCP puede ver la <code>tool</code> que hemos creado en el servidor MCP.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Después podemos ver</p>
      <div class='highlight'><pre><code>👤 You: Tell me de issues of repository transformers of huggingface
      
      🤔 Claude is thinking...
      🔧 Calling tool: list_repository_issues
      📝 Arguments: {opening_brace}&#39;owner&#39;: &#39;huggingface&#39;, &#39;repo_name&#39;: &#39;transformers&#39;{closing_brace}
      ✅ Tool executed successfully</code></pre></div>
      <p>Le pedimos los issues del repositorio <code>transformers</code> de <code>huggingface</code>. Tras pensar un rato nos dice que va a usar la <code>tool</code> <code>list_repository_issues</code> con los argumentos <code>{opening_brace}&#x27;owner&#x27;: &#x27;huggingface&#x27;, &#x27;repo_name&#x27;: &#x27;transformers&#x27;{closing_brace}</code>.</p>
      <p>Por último, nos dice que la <code>tool</code> se ha ejecutado correctamente.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por último, con el resultado de ejecutar la <code>tool</code>, Claude lo procesa y nos crea una respuesta con la lista de issues.</p>
      <div class='highlight'><pre><code>🤖 Claude: I&#39;ll help you list the issues from the Hugging Face transformers repository. Let me use the `list_repository_issues` function with the appropriate parameters.I&#39;ll summarize the current open issues from the Hugging Face transformers repository. Here are the 10 most recent open issues:
      
      1. [#39097] Core issue about saving models with multiple shared tensor groups when dispatched
      2. [#39096] Pull request to fix position index in v4.52.4
      3. [#39095] Issue with Qwen2_5_VLVisionAttention flash attention missing &#39;is_causal&#39; attribute
      4. [#39094] Documentation improvement for PyTorch examples
      5. [#39093] Style change PR for lru_cache decorator
      6. [#39091] Compatibility issue with sentencepiece on Windows in Python 3.13
      7. [#39090] Pull request for fixing bugs in finetune and batch inference
      8. [#39089] Bug report for LlavaOnevisonConfig initialization in version 4.52.4
      9. [#39087] Documentation PR for Gemma 3n audio encoder
      10. [#39084] Pull request for refactoring gemma3n
      
      Note that this is showing the 10 most recent open issues, and there might be more issues in the repository. Each issue has a link where you can find more details about the specific problem or proposed changes.
      
      Would you like more specific information about any of these issues?</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Crear el servidor MCP con mas informacion">Crear el servidor MCP con más información<a class="anchor-link" href="#Crear el servidor MCP con mas informacion"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 10" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Servidor MCP">Servidor MCP<a class="anchor-link" href="#Servidor MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 11" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Antes hemos creado el servidor con <code>mcp = FastMCP()</code>, pero podemos aprovechar para darle un nombre y descripción al servidor con</p>
      <div class='highlight'><pre><code>mcp = FastMCP(
          name="GitHubMCP",
          instructions="""
          This server provides tools, resources and prompts to interact with the GitHub API.
          """
      )</code></pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">httpx</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">typing</span><span class="w"> </span><span class="kn">import</span> <span class="n">Optional</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">github</span><span class="w"> </span><span class="kn">import</span> <span class="n">GITHUB_TOKEN</span><span class="p">,</span> <span class="n">create_github_headers</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create FastMCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;&quot;&quot;</span>',
      '<span class="s2">    This server provides tools, resources and prompts to interact with the GitHub API.</span>',
      '<span class="s2">    &quot;&quot;&quot;</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">()</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="sd">        ctx: The MCP context for logging.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 10 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=10&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Starting FastMCP GitHub server...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;DEBUG: Server name: </span><span class="si">{</span><span class="n">mcp</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github_server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2>Filtrar <code>tool</code>s mediante tags</h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Servidor MCP">Servidor MCP<a class="anchor-link" href="#Servidor MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 12" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>MCP nos da la opción de poder exponer <code>tool</code>s mediante tags, lo cual puede ser útil para exponer solo <code>tool</code>s para depuración, para que solo las puedan usar determinados usuarios, etc.</p>
      <p>Para ello, cuando creamos el servidor MCP indicamos los tags que queremos incluir</p>
      <div class='highlight'><pre><code>mcp = FastMCP(
          name="GitHubMCP",
          instructions="This server provides tools, resources and prompts to interact with the GitHub API.",
          include_tags={"public"}
      )</code></pre></div>
      <p>Y luego, cuando creamos la <code>tool</code> podemos indicar los tags que queremos que tenga.</p>
      <div class='highlight'><pre><code>@mcp.tool(tags={opening_brace}"public", "production"{closing_brace})</code></pre></div>
      <p>Vamos a ver un ejemplo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">httpx</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">typing</span><span class="w"> </span><span class="kn">import</span> <span class="n">Optional</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">github</span><span class="w"> </span><span class="kn">import</span> <span class="n">GITHUB_TOKEN</span><span class="p">,</span> <span class="n">create_github_headers</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create FastMCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;This server provides tools, resources and prompts to interact with the GitHub API.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">include_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 10 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=10&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;development&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_more_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 100 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=100&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Starting FastMCP GitHub server...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;DEBUG: Server name: </span><span class="si">{</span><span class="n">mcp</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github_server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que hemos creado la función <code>list_repository_issues</code>, que lista solo 10 issues y que tiene los tags <code>public</code> y <code>production</code>. Y hemos creado la función <code>list_more_repository_issues</code>, que lista 100 issues de un repositorio y que tiene los tags <code>private</code> y <code>development</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Además hemos declarado el servidor mediante</p>
      <div class='highlight'><pre><code>mcp = FastMCP(
          name="GitHubMCP",
          instructions="This server provides tools, resources and prompts to interact with the GitHub API.",
          include_tags={"public"}
      )</code></pre></div>
      <p>Por lo que el cliente solo tendrá acceso a las <code>tool</code>s que tengan el tag <code>public</code>, es decir, a <code>list_repository_issues</code>. Solo va a poder ver una lista de 10 issues.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Prueba de los tags">Prueba de los tags<a class="anchor-link" href="#Prueba de los tags"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 13" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Volvemos a ejecutar el cliente MCP</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">client_MCP</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">run</span> <span class="n">client</span><span class="o">.</span><span class="n">py</span> <span class="o">../</span><span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🔗 Connecting to FastMCP server: ../gitHub_MCP_server/github_server.py',
          '✅ Client created successfully',
          '[06/28/25 09:44:55] INFO     Starting MCP server &#x27;GitHubMCP&#x27; with ]8;id=896921;file:///Users/macm1/Documents/web/portafolio/posts/client_MCP/.venv/lib/python3.11/site-packages/fastmcp/server/server.py\server.py]8;;\:]8;id=507812;file:///Users/macm1/Documents/web/portafolio/posts/client_MCP/.venv/lib/python3.11/site-packages/fastmcp/server/server.py#1246\\1246]8;;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;transport &#x27;stdio&#x27;',
          '🛠️  Available tools (1):',
          '==================================================',
          '📋 list_repository_issues',
          '&#x20;&#x20;&#x20;Description: Lists open issues for a given GitHub repository.',
          'Args:',
          '&#x20;&#x20;&#x20;&#x20;owner: The owner of the repository (e.g., &#x27;modelcontextprotocol&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;repo_name: The name of the repository (e.g., &#x27;python-sdk&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;ctx: The MCP context for logging.',
          'Returns:',
          '&#x20;&#x20;&#x20;&#x20;list[dict]: A list of dictionaries, each containing information about an issue',
          '&#x20;&#x20;&#x20;Parameters: owner, repo_name',
          '🤖 FastMCP client started. Write &#x27;quit&#x27;, &#x27;q&#x27;, &#x27;exit&#x27;, &#x27;salir&#x27; to exit.',
          '💬 You can ask questions about GitHub repositories!',
          '📚 The client can use tools from the FastMCP server',
          '------------------------------------------------------------',
          '👤 You:',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>No hace falta hacer una petición, ya que vemos lo siguiente:</p>
      <div class='highlight'><pre><code>🛠️  Available tools (1):
      ==================================================
      📋 list_repository_issues
         Description: Lists open issues for a given GitHub repository.
      
      Args:
          owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)
          repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)
          ctx: The MCP context for logging.
      
      Returns:
          list[dict]: A list of dictionaries, each containing information about an issue
         Parameters: owner, repo_name</code></pre></div>
      <p>Es decir, el cliente solo puede ver la <code>tool</code> <code>list_repository_issues</code> y no la <code>tool</code> <code>list_all_repository_issues</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Cambio a private">Cambio a private<a class="anchor-link" href="#Cambio a private"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 14" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Cambiamos <code>include_tags</code> a <code>private</code> para usar la <code>tool</code> <code>list_more_repository_issues</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">httpx</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">typing</span><span class="w"> </span><span class="kn">import</span> <span class="n">Optional</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">github</span><span class="w"> </span><span class="kn">import</span> <span class="n">GITHUB_TOKEN</span><span class="p">,</span> <span class="n">create_github_headers</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create FastMCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;This server provides tools, resources and prompts to interact with the GitHub API.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">include_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;private&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 10 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=10&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;development&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_more_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 100 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=100&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Starting FastMCP GitHub server...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;DEBUG: Server name: </span><span class="si">{</span><span class="n">mcp</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github_server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Prueba del tag private">Prueba del tag private<a class="anchor-link" href="#Prueba del tag private"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 15" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ejecutamos otra vez el cliente con el cambio hecho</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">client_MCP</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">run</span> <span class="n">client</span><span class="o">.</span><span class="n">py</span> <span class="o">../</span><span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🔗 Connecting to FastMCP server: ../gitHub_MCP_server/github_server.py',
          '✅ Client created successfully',
          '[06/28/25 09:51:48] INFO     Starting MCP server &#x27;GitHubMCP&#x27; with ]8;id=921531;file:///Users/macm1/Documents/web/portafolio/posts/client_MCP/.venv/lib/python3.11/site-packages/fastmcp/server/server.py\server.py]8;;\:]8;id=418078;file:///Users/macm1/Documents/web/portafolio/posts/client_MCP/.venv/lib/python3.11/site-packages/fastmcp/server/server.py#1246\\1246]8;;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;transport &#x27;stdio&#x27;',
          '🛠️  Available tools (1):',
          '==================================================',
          '📋 list_more_repository_issues',
          '&#x20;&#x20;&#x20;Description: Lists open issues for a given GitHub repository.',
          'Args:',
          '&#x20;&#x20;&#x20;&#x20;owner: The owner of the repository (e.g., &#x27;modelcontextprotocol&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;repo_name: The name of the repository (e.g., &#x27;python-sdk&#x27;)',
          'Returns:',
          '&#x20;&#x20;&#x20;&#x20;list[dict]: A list of dictionaries, each containing information about an issue',
          '&#x20;&#x20;&#x20;Parameters: owner, repo_name',
          '🤖 FastMCP client started. Write &#x27;quit&#x27;, &#x27;q&#x27;, &#x27;exit&#x27;, &#x27;salir&#x27; to exit.',
          '💬 You can ask questions about GitHub repositories!',
          '📚 The client can use tools from the FastMCP server',
          '------------------------------------------------------------',
          '👤 You:',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Al igual que antes, no hace falta hacer una petición, ya que nos muestra las <code>tool</code>s disponibles y vemos que tenemos <code>list_more_repository_issues</code>.</p>
      <div class='highlight'><pre><code>🛠️  Available tools (1):
      ==================================================
      📋 list_more_repository_issues
         Description: Lists open issues for a given GitHub repository.
      
      Args:
          owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)
          repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)
      
      Returns:
          list[dict]: A list of dictionaries, each containing information about an issue
         Parameters: owner, repo_name</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Vuelta a public">Vuelta a public<a class="anchor-link" href="#Vuelta a public"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 16" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Volvemos a poner <code>include_tags</code> a <code>public</code> para usar la <code>tool</code> <code>list_repository_issues</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">httpx</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">typing</span><span class="w"> </span><span class="kn">import</span> <span class="n">Optional</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">github</span><span class="w"> </span><span class="kn">import</span> <span class="n">GITHUB_TOKEN</span><span class="p">,</span> <span class="n">create_github_headers</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create FastMCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;This server provides tools, resources and prompts to interact with the GitHub API.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">include_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 10 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=10&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;development&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_more_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 100 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=100&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Starting FastMCP GitHub server...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;DEBUG: Server name: </span><span class="si">{</span><span class="n">mcp</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github_server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2>Excluir <code>tool</code>s por tags</h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al igual que antes hemos filtrado las <code>tool</code>s que se pueden usar por tags, también podemos excluir <code>tool</code>s por tags, para ello, a la hora de crear el servidor hay que añadir el parámetro <code>exclude_tags</code> con los tags que queremos excluir.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Servidor MCP">Servidor MCP<a class="anchor-link" href="#Servidor MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 17" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos una nueva <code>tool</code> y la excluimos mediante tags</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">httpx</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">typing</span><span class="w"> </span><span class="kn">import</span> <span class="n">Optional</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">github</span><span class="w"> </span><span class="kn">import</span> <span class="n">GITHUB_TOKEN</span><span class="p">,</span> <span class="n">create_github_headers</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create FastMCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;This server provides tools, resources and prompts to interact with the GitHub API.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">include_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;first_issue&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 10 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=10&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;development&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_more_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 100 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=100&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;first_issue&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">first_repository_issue</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Gets the first issue ever created in a GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list containing information about the first issue created</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Get the first issue by sorting by creation date in ascending order</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=all&amp;amp;sort=created&amp;amp;direction=asc&amp;amp;per_page=1&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching first issue from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">first_issue</span> <span class="o">=</span> <span class="n">issues_data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Create a detailed summary of the first issue</span>',
      '<span class="w">            </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">issue_info</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;state&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;state&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;created_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;updated_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;updated_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;body&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)[:</span><span class="mi">500</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">500</span> <span class="k">else</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found first issue: #</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> created on </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;created_at&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the very first issue created in this repository&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;first_issue&quot;</span><span class="p">:</span> <span class="n">issue_info</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Starting FastMCP GitHub server...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;DEBUG: Server name: </span><span class="si">{</span><span class="n">mcp</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Hemos creado la <code>tool</code> <code>first_repository_issue</code>, pero no la vamos a poder usar porque tiene los tags <code>public</code> y <code>first_issue</code>, pero a la hora de crear el servidor hemos puesto <code>exclude_tags={opening_brace}&quot;first_issue&quot;{closing_brace}</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3>Prueba de <code>exclude_tags</code></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ejecutamos el cliente MCP</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">client_MCP</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">run</span> <span class="n">client</span><span class="o">.</span><span class="n">py</span> <span class="o">../</span><span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🔗 Connecting to FastMCP server: ../gitHub_MCP_server/github_server.py',
          '✅ Client created successfully',
          '[06/28/25 10:00:36] INFO     Starting MCP server &#x27;GitHubMCP&#x27; with ]8;id=28274;file:///Users/macm1/Documents/web/portafolio/posts/client_MCP/.venv/lib/python3.11/site-packages/fastmcp/server/server.py\server.py]8;;\:]8;id=529867;file:///Users/macm1/Documents/web/portafolio/posts/client_MCP/.venv/lib/python3.11/site-packages/fastmcp/server/server.py#1246\\1246]8;;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;transport &#x27;stdio&#x27;',
          '🛠️  Available tools (1):',
          '==================================================',
          '📋 list_repository_issues',
          '&#x20;&#x20;&#x20;Description: Lists open issues for a given GitHub repository.',
          'Args:',
          '&#x20;&#x20;&#x20;&#x20;owner: The owner of the repository (e.g., &#x27;modelcontextprotocol&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;repo_name: The name of the repository (e.g., &#x27;python-sdk&#x27;)',
          'Returns:',
          '&#x20;&#x20;&#x20;&#x20;list[dict]: A list of dictionaries, each containing information about an issue',
          '&#x20;&#x20;&#x20;Parameters: owner, repo_name',
          '🤖 FastMCP client started. Write &#x27;quit&#x27;, &#x27;q&#x27;, &#x27;exit&#x27;, &#x27;salir&#x27; to exit.',
          '💬 You can ask questions about GitHub repositories!',
          '📚 The client can use tools from the FastMCP server',
          '------------------------------------------------------------',
          '👤 You:',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que no está disponible la <code>tool</code> <code>first_repository_issue</code></p>
      <div class='highlight'><pre><code>🛠️  Available tools (1):
      ==================================================
      📋 list_repository_issues
         Description: Lists open issues for a given GitHub repository.
      
      Args:
          owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)
          repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)
      
      Returns:
          list[dict]: A list of dictionaries, each containing information about an issue
         Parameters: owner, repo_name</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Composicion de servidores">Composición de servidores<a class="anchor-link" href="#Composicion de servidores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 18" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al igual que en programación se pueden heredar clases, o construir sobre funciones ya creadas, en MCP se pueden crear sub-servidores y crear una composición de ellos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Servidor MCP">Servidor MCP<a class="anchor-link" href="#Servidor MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 19" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear un subservidor MCP, con su propia <code>tool</code> <code>hello_world</code>. Después lo montamos en el servidor principal. Haciendo esto, vamos a poder usar la <code>tool</code> <code>hello_world</code> en el cliente que se conecte al servidor principal.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">httpx</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">typing</span><span class="w"> </span><span class="kn">import</span> <span class="n">Optional</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">github</span><span class="w"> </span><span class="kn">import</span> <span class="n">GITHUB_TOKEN</span><span class="p">,</span> <span class="n">create_github_headers</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create FastMCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;This server provides tools, resources and prompts to interact with the GitHub API.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">include_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;first_issue&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">sub_mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;SubMCP&quot;</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 10 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=10&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;development&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_more_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 100 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=100&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;first_issue&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">first_repository_issue</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Gets the first issue ever created in a GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list containing information about the first issue created</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Get the first issue by sorting by creation date in ascending order</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=all&amp;amp;sort=created&amp;amp;direction=asc&amp;amp;per_page=1&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching first issue from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">first_issue</span> <span class="o">=</span> <span class="n">issues_data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Create a detailed summary of the first issue</span>',
      '<span class="w">            </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">issue_info</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;state&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;state&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;created_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;updated_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;updated_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;body&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)[:</span><span class="mi">500</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">500</span> <span class="k">else</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found first issue: #</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> created on </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;created_at&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the very first issue created in this repository&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;first_issue&quot;</span><span class="p">:</span> <span class="n">issue_info</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@sub_mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">hello_world</span><span class="p">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns a simple greeting.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="s2">&quot;Hello, world!&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">mcp</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">&quot;sub_mcp&quot;</span><span class="p">,</span> <span class="n">sub_mcp</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Starting FastMCP GitHub server...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;DEBUG: Server name: </span><span class="si">{</span><span class="n">mcp</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github_server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Prueba de la composicion de servidores MCP">Prueba de la composición de servidores MCP<a class="anchor-link" href="#Prueba de la composicion de servidores MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 20" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ejecutamos el cliente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">client_MCP</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">run</span> <span class="n">client</span><span class="o">.</span><span class="n">py</span> <span class="o">../</span><span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🔗 Connecting to FastMCP server: ../gitHub_MCP_server/github_server.py',
          '✅ Client created successfully',
          '/Users/macm1/Documents/web/portafolio/posts/gitHub_MCP_server/github_server.py:240: DeprecationWarning: Mount prefixes are now optional and the first positional argument should be the server you want to mount.',
          '&#x20;&#x20;mcp.mount(&quot;sub_mcp&quot;, sub_mcp)',
          '[06/28/25 10:10:58] INFO     Starting MCP server &#x27;GitHubMCP&#x27; with transport &#x27;stdio&#x27;                          server.py:1246',
          '🛠️  Available tools (2):',
          '==================================================',
          '📋 sub_mcp_hello_world',
          '&#x20;&#x20;&#x20;Description: Returns a simple greeting.',
          '&#x20;&#x20;&#x20;Parameters:',
          '📋 list_repository_issues',
          '&#x20;&#x20;&#x20;Description: Lists open issues for a given GitHub repository.',
          'Args:',
          '&#x20;&#x20;&#x20;&#x20;owner: The owner of the repository (e.g., &#x27;modelcontextprotocol&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;repo_name: The name of the repository (e.g., &#x27;python-sdk&#x27;)',
          'Returns:',
          '&#x20;&#x20;&#x20;&#x20;list[dict]: A list of dictionaries, each containing information about an issue',
          '&#x20;&#x20;&#x20;Parameters: owner, repo_name',
          '🤖 FastMCP client started. Write &#x27;quit&#x27;, &#x27;q&#x27;, &#x27;exit&#x27;, &#x27;salir&#x27; to exit.',
          '💬 You can ask questions about GitHub repositories!',
          '📚 The client can use tools from the FastMCP server',
          '------------------------------------------------------------',
          '👤 You: Can you greeting me?',
          '🤔 Claude is thinking...',
          '🔧 Claude wants to use: sub_mcp_hello_world',
          '📝 Arguments: &#x7B;&#x7D;',
          '✅ Tool executed successfully',
          '🤖 Claude: I&#x27;ll help you send a greeting using the `sub_mcp_hello_world` function. This function returns a simple greeting.There&#x27;s your greeting! The function returned &quot;Hello, world!&quot;',
          '👤 You: q',
          '👋 Bye!',
          '🧹 Cleaning up resources...',
          '✅ Resources released',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que ha aparecido la nueva <code>tool</code> <code>sub_mcp_hello_world</code></p>
      <div class='highlight'><pre><code>🛠️  Available tools (2):
      ==================================================
      📋 sub_mcp_hello_world
         Description: Returns a simple greeting.
         Parameters: 
      
      📋 list_repository_issues
         Description: Lists open issues for a given GitHub repository.
      
      Args:
          owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)
          repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)
      
      Returns:
          list[dict]: A list of dictionaries, each containing information about an issue
         Parameters: owner, repo_name</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Y cuando le pedimos que nos salude la ejecuta</p>
      <div class='highlight'><pre><code>👤 You: Can you greeting me?
      
      🤔 Claude is thinking...
      🔧 Claude wants to use: sub_mcp_hello_world
      📝 Arguments: {}
      ✅ Tool executed successfully
      
      🤖 Claude: I&#39;ll help you send a greeting using the `sub_mcp_hello_world` function. This function returns a simple greeting.There&#39;s your greeting! The function returned "Hello, world!"</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Capa de transporte">Capa de transporte<a class="anchor-link" href="#Capa de transporte"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 21" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si al servidor MCP no le indicamos la capa de transporte, por defecto se usa <code>stdio</code>. Pero podemos indicárselo mediante el parámetro <code>transport</code> cuando lo ejecutamos</p>
      <div class='highlight'><pre><code>mcp.run(
          transport="stdio"
      )</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Sin embargo, si el cliente y el servidor no están en el mismo ordenador, podemos usar <code>http</code> como capa de transporte</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Servidor MCP">Servidor MCP<a class="anchor-link" href="#Servidor MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 22" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En el servidor, solo tenemos que indicar que queremos usar <code>http</code> como capa de transporte, el host y el puerto.</p>
      <div class='highlight'><pre><code>mcp.run(
          transport="streamable-http",
          host="0.0.0.0",
          port=8000,
      )</code></pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">httpx</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">typing</span><span class="w"> </span><span class="kn">import</span> <span class="n">Optional</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">github</span><span class="w"> </span><span class="kn">import</span> <span class="n">GITHUB_TOKEN</span><span class="p">,</span> <span class="n">create_github_headers</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create FastMCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;This server provides tools, resources and prompts to interact with the GitHub API.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">include_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;first_issue&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">sub_mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;SubMCP&quot;</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 10 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=10&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;development&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_more_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 100 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=100&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;first_issue&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">first_repository_issue</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Gets the first issue ever created in a GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list containing information about the first issue created</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Get the first issue by sorting by creation date in ascending order</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=all&amp;amp;sort=created&amp;amp;direction=asc&amp;amp;per_page=1&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching first issue from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">first_issue</span> <span class="o">=</span> <span class="n">issues_data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Create a detailed summary of the first issue</span>',
      '<span class="w">            </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">issue_info</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;state&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;state&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;created_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;updated_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;updated_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;body&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)[:</span><span class="mi">500</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">500</span> <span class="k">else</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found first issue: #</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> created on </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;created_at&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the very first issue created in this repository&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;first_issue&quot;</span><span class="p">:</span> <span class="n">issue_info</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@sub_mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">hello_world</span><span class="p">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns a simple greeting.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="s2">&quot;Hello, world!&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">mcp</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">&quot;sub_mcp&quot;</span><span class="p">,</span> <span class="n">sub_mcp</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Starting FastMCP GitHub server...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;DEBUG: Server name: </span><span class="si">{</span><span class="n">mcp</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server, run with uv run client.py http://localhost:8000/mcp</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">transport</span><span class="o">=</span><span class="s2">&quot;streamable-http&quot;</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">host</span><span class="o">=</span><span class="s2">&quot;0.0.0.0&quot;</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">port</span><span class="o">=</span><span class="mi">8000</span><span class="p">,</span>',
      '<span class="w">    </span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github_server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Cliente MCP">Cliente MCP<a class="anchor-link" href="#Cliente MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 23" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En el cliente, lo que hay que cambiar es que antes realizábamos la conexión, pasando el path del servidor (<code>async def connect_to_server(self, server_script_path: str)</code>), mientras que ahora lo hacemos pasándole la URL del servidor (<code>async def connect_to_server(self, server_url: str)</code>).</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">client_MCP</span><span class="o">/</span><span class="n">client</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">sys</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">asyncio</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">contextlib</span><span class="w"> </span><span class="kn">import</span> <span class="n">AsyncExitStack</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">anthropic</span><span class="w"> </span><span class="kn">import</span> <span class="n">Anthropic</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">dotenv</span><span class="w"> </span><span class="kn">import</span> <span class="n">load_dotenv</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">Client</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Load environment variables from .env file</span>',
      '<span class="n">load_dotenv</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">class</span><span class="w"> </span><span class="nc">FastMCPClient</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    FastMCP client that integrates with Claude to process user queries</span>',
      '<span class="sd">    and use tools exposed by a FastMCP server.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Initialize the FastMCP client with Anthropic and resource management.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">exit_stack</span> <span class="o">=</span> <span class="n">AsyncExitStack</span><span class="p">()</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span> <span class="o">=</span> <span class="n">Anthropic</span><span class="p">()</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">connect_to_server</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">server_url</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Connect to the specified FastMCP server via HTTP.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            server_url: URL of the HTTP server (e.g., &quot;http://localhost:8000&quot;)</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔗 Connecting to FastMCP HTTP server: </span><span class="si">{</span><span class="n">server_url</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Create FastMCP client for HTTP connection using SSE transport</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="n">Client</span><span class="p">(</span><span class="n">server_url</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># Note: FastMCP Client automatically detects HTTP URLs and uses SSE transport</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;✅ Client created successfully&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_available_tools</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List available tools in the FastMCP server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Get list of tools from the server using FastMCP context</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">tools</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_tools</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">tools</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🛠️  Available tools (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">tools</span><span class="p">)</span><span class="si">}</span><span class="s2">):&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">                    </span><span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📋 </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">tool</span><span class="o">.</span><span class="n">description</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Description: </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="c1"># Show parameters if available</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool</span><span class="p">,</span> <span class="s1">&#39;inputSchema&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="s1">&#39;properties&#39;</span> <span class="ow">in</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">params</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">[</span><span class="s1">&#39;properties&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>',
      '<span class="w">                                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Parameters: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No tools found in the server&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing tools: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">process_query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Process a user query, interacting with Claude and FastMCP tools.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            query: User query</span>',
      '<span class="sd">            </span>',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            str: Final processed response</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Use FastMCP context for all operations</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Get available tools</span>',
      '<span class="w">                </span><span class="n">tools_list</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_tools</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Prepare tools for Claude in correct format</span>',
      '<span class="w">                </span><span class="n">claude_tools</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools_list</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">claude_tool</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">description</span> <span class="ow">or</span> <span class="sa">f</span><span class="s2">&quot;Tool </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;input_schema&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span> <span class="ow">or</span> <span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span> <span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{}}</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                    </span><span class="n">claude_tools</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">claude_tool</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Create initial message for Claude</span>',
      '<span class="w">                </span><span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>',
      '<span class="w">                    </span><span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="n">query</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                </span><span class="p">]</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># First call to Claude</span>',
      '<span class="w">                </span><span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">                    </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;claude-3-5-sonnet-20241022&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">6000</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">tools</span><span class="o">=</span><span class="n">claude_tools</span> <span class="k">if</span> <span class="n">claude_tools</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">                </span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Process Claude&#39;s response</span>',
      '<span class="w">                </span><span class="n">response_text</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">content_block</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">if</span> <span class="n">content_block</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;text&quot;</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="n">response_text</span> <span class="o">+=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                        </span>',
      '<span class="w">                    </span><span class="k">elif</span> <span class="n">content_block</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;tool_use&quot;</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="c1"># Claude wants to use a tool</span>',
      '<span class="w">                        </span><span class="n">tool_name</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">name</span>',
      '<span class="w">                        </span><span class="n">tool_args</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">input</span>',
      '<span class="w">                        </span><span class="n">tool_call_id</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">id</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔧 Claude wants to use: </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📝 Arguments: </span><span class="si">{</span><span class="n">tool_args</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="c1"># Execute tool on the FastMCP server</span>',
      '<span class="w">                            </span><span class="n">tool_result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">call_tool</span><span class="p">(</span><span class="n">tool_name</span><span class="p">,</span> <span class="n">tool_args</span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;✅ Tool executed successfully&quot;</span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Add tool result to the conversation</span>',
      '<span class="w">                            </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span>',
      '<span class="w">                            </span><span class="p">})</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Format result for Claude</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="n">tool_result</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="c1"># Convert result to string format for Claude</span>',
      '<span class="w">                                </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="p">)</span>',
      '<span class="w">                                </span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                    </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                                    </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tool_result&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;tool_use_id&quot;</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;Tool result: </span><span class="si">{</span><span class="n">result_content</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                                    </span><span class="p">}]</span>',
      '<span class="w">                                </span><span class="p">})</span>',
      '<span class="w">                            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                    </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                                    </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tool_result&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;tool_use_id&quot;</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Tool executed without response content&quot;</span>',
      '<span class="w">                                    </span><span class="p">}]</span>',
      '<span class="w">                                </span><span class="p">})</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Second call to Claude with the tool result</span>',
      '<span class="w">                            </span><span class="n">final_response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">                                </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;claude-3-5-sonnet-20241022&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">6000</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">tools</span><span class="o">=</span><span class="n">claude_tools</span> <span class="k">if</span> <span class="n">claude_tools</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">                            </span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Extract text from the final response</span>',
      '<span class="w">                            </span><span class="k">for</span> <span class="n">final_content</span> <span class="ow">in</span> <span class="n">final_response</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">final_content</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;text&quot;</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">response_text</span> <span class="o">+=</span> <span class="n">final_content</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                                    </span>',
      '<span class="w">                        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="n">error_msg</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;❌ Error executing </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="n">error_msg</span><span class="p">)</span>',
      '<span class="w">                            </span><span class="n">response_text</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="si">{</span><span class="n">error_msg</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">return</span> <span class="n">response_text</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_msg</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;❌ Error processing query: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="n">error_msg</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="n">error_msg</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">chat_loop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Main chat loop with user interaction.</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤖 FastMCP HTTP client started. Write &#39;quit&#39;, &#39;q&#39;, &#39;exit&#39;, &#39;salir&#39; to exit.&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;💬 You can ask questions about GitHub repositories!&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📚 The client can use tools from the FastMCP HTTP server&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🌐 Connected via Server-Sent Events (SSE)&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;-&quot;</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Request user input</span>',
      '<span class="w">                </span><span class="n">user_input</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">👤 You: &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">user_input</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;quit&#39;</span><span class="p">,</span> <span class="s1">&#39;q&#39;</span><span class="p">,</span> <span class="s1">&#39;exit&#39;</span><span class="p">,</span> <span class="s1">&#39;salir&#39;</span><span class="p">]:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;👋 Bye!&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="k">break</span>',
      '<span class="w">                    </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="ow">not</span> <span class="n">user_input</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">continue</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤔 Claude is thinking...&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Process query</span>',
      '<span class="w">                </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">process_query</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Show response</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤖 Claude: </span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">👋 Disconnecting...&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">break</span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">❌ Error in chat: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">continue</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">cleanup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Clean up resources and close connections.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🧹 Cleaning up resources...&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># FastMCP Client cleanup is handled automatically by context manager</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">exit_stack</span><span class="o">.</span><span class="n">aclose</span><span class="p">()</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;✅ Resources released&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">main</span><span class="p">():</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Main function that initializes and runs the FastMCP client.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Verify command line arguments</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;❌ Usage: python client.py &amp;lt;http_server_url&amp;gt;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Example: python client.py http://localhost:8000&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Note: Now connects to HTTP server instead of executing script&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="n">server_url</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Validate URL format</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="n">server_url</span><span class="o">.</span><span class="n">startswith</span><span class="p">((</span><span class="s1">&#39;http://&#39;</span><span class="p">,</span> <span class="s1">&#39;https://&#39;</span><span class="p">)):</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;❌ Error: Server URL must start with http:// or https://&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Example: python client.py http://localhost:8000&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Create and run client</span>',
      '<span class="w">    </span><span class="n">client</span> <span class="o">=</span> <span class="n">FastMCPClient</span><span class="p">()</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Connect to the server</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">connect_to_server</span><span class="p">(</span><span class="n">server_url</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># List available tools after connection</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_available_tools</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Start chat loop</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">chat_loop</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Fatal error: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">finally</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Ensure resources are cleaned up</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">cleanup</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="c1"># Entry point of the script</span>',
      '<span class="w">    </span><span class="n">asyncio</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting client_MCP/client.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Prueba del MCP por http">Prueba del MCP por http<a class="anchor-link" href="#Prueba del MCP por http"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 24" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para probar, primero tenemos que ejecutar el cliente para que se levante la URL y el puerto</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">gitHub_MCP_server</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">run</span> <span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '/Users/macm1/Documents/web/portafolio/posts/gitHub_MCP_server/github_server.py:240: DeprecationWarning: Mount prefixes are now optional and the first positional argument should be the server you want to mount.',
          '&#x20;&#x20;mcp.mount(&quot;sub_mcp&quot;, sub_mcp)',
          'DEBUG: Starting FastMCP GitHub server...',
          'DEBUG: Server name: GitHubMCP',
          '[06/28/25 10:33:36] INFO     Starting MCP server &#x27;GitHubMCP&#x27; with ]8;id=281189;file:///Users/macm1/Documents/web/portafolio/posts/gitHub_MCP_server/.venv/lib/python3.11/site-packages/fastmcp/server/server.py\server.py]8;;\:]8;id=128713;file:///Users/macm1/Documents/web/portafolio/posts/gitHub_MCP_server/.venv/lib/python3.11/site-packages/fastmcp/server/server.py#1297\\1297]8;;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;transport &#x27;streamable-http&#x27; on',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;http://0.0.0.0:8000/mcp/',
          'INFO:     Started server process [89401]',
          'INFO:     Waiting for application startup.',
          'INFO:     Application startup complete.',
          'INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora ejecutamos el cliente, dándole la URL del servidor MCP.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">client_MCP</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">run</span> <span class="n">client</span><span class="o">.</span><span class="n">py</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">mcp</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🔗 Connecting to FastMCP HTTP server: http://localhost:8000/mcp',
          '✅ Client created successfully',
          '🛠️  Available tools (2):',
          '==================================================',
          '📋 sub_mcp_hello_world',
          '&#x20;&#x20;&#x20;Description: Returns a simple greeting.',
          '&#x20;&#x20;&#x20;Parameters:',
          '📋 list_repository_issues',
          '&#x20;&#x20;&#x20;Description: Lists open issues for a given GitHub repository.',
          'Args:',
          '&#x20;&#x20;&#x20;&#x20;owner: The owner of the repository (e.g., &#x27;modelcontextprotocol&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;repo_name: The name of the repository (e.g., &#x27;python-sdk&#x27;)',
          'Returns:',
          '&#x20;&#x20;&#x20;&#x20;list[dict]: A list of dictionaries, each containing information about an issue',
          '&#x20;&#x20;&#x20;Parameters: owner, repo_name',
          '🤖 FastMCP HTTP client started. Write &#x27;quit&#x27;, &#x27;q&#x27;, &#x27;exit&#x27;, &#x27;salir&#x27; to exit.',
          '💬 You can ask questions about GitHub repositories!',
          '📚 The client can use tools from the FastMCP HTTP server',
          '🌐 Connected via Server-Sent Events (SSE)',
          '------------------------------------------------------------',
          '👤 You:',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que se ha establecido la conexión sin problema.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3>Vuelta del servidor a <code>STDIO</code></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Volvemos a establecer <code>STDIO</code> como capa de transporte del servidor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">httpx</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">typing</span><span class="w"> </span><span class="kn">import</span> <span class="n">Optional</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">github</span><span class="w"> </span><span class="kn">import</span> <span class="n">GITHUB_TOKEN</span><span class="p">,</span> <span class="n">create_github_headers</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create FastMCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;This server provides tools, resources and prompts to interact with the GitHub API.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">include_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;first_issue&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">sub_mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;SubMCP&quot;</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 10 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=10&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;development&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_more_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 100 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=100&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;first_issue&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">first_repository_issue</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Gets the first issue ever created in a GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list containing information about the first issue created</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Get the first issue by sorting by creation date in ascending order</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=all&amp;amp;sort=created&amp;amp;direction=asc&amp;amp;per_page=1&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching first issue from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">first_issue</span> <span class="o">=</span> <span class="n">issues_data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Create a detailed summary of the first issue</span>',
      '<span class="w">            </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">issue_info</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;state&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;state&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;created_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;updated_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;updated_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;body&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)[:</span><span class="mi">500</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">500</span> <span class="k">else</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found first issue: #</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> created on </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;created_at&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the very first issue created in this repository&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;first_issue&quot;</span><span class="p">:</span> <span class="n">issue_info</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@sub_mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">hello_world</span><span class="p">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns a simple greeting.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="s2">&quot;Hello, world!&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">mcp</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">&quot;sub_mcp&quot;</span><span class="p">,</span> <span class="n">sub_mcp</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Starting FastMCP GitHub server...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;DEBUG: Server name: </span><span class="si">{</span><span class="n">mcp</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">transport</span><span class="o">=</span><span class="s2">&quot;stdio&quot;</span>',
      '<span class="w">    </span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github_server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Argumentos excluidos">Argumentos excluídos<a class="anchor-link" href="#Argumentos excluidos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 25" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Servidor MCP">Servidor MCP<a class="anchor-link" href="#Servidor MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 26" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Supongamos que queremos tener trazabilidad de la ID del usuario que ha hecho una petición, tendríamos que añadir un parámetro a la <code>tool</code> que se ejecute con dicha información. Pero esa información es irrelevante para el LLM, incluso por temas de seguridad, a lo mejor no queremos que dicha ID se pueda filtrar</p>
      <p>Por lo que para que no se le pase un parámetro al LLM, a la hora de definir una <code>tool</code> podemos indicar que se excluya un parámetro mediante <code>exclude_args</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">httpx</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">github</span><span class="w"> </span><span class="kn">import</span> <span class="n">GITHUB_TOKEN</span><span class="p">,</span> <span class="n">create_github_headers</span>',
      '<span class="w"> </span>',
      '<span class="n">USER_ID</span> <span class="o">=</span> <span class="mi">1234567890</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create FastMCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;This server provides tools, resources and prompts to interact with the GitHub API.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">include_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;first_issue&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">sub_mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;SubMCP&quot;</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_args</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;user_id&quot;</span><span class="p">],</span>   <span class="c1"># user_id has to be injected by server, not provided by LLM</span>',
      '<span class="p">)</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">user_id</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">USER_ID</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 10 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=10&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;requested_by_user_id&quot;</span><span class="p">:</span> <span class="n">user_id</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;development&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_more_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 100 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=100&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;first_issue&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">first_repository_issue</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Gets the first issue ever created in a GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list containing information about the first issue created</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Get the first issue by sorting by creation date in ascending order</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=all&amp;amp;sort=created&amp;amp;direction=asc&amp;amp;per_page=1&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching first issue from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">first_issue</span> <span class="o">=</span> <span class="n">issues_data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Create a detailed summary of the first issue</span>',
      '<span class="w">            </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">issue_info</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;state&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;state&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;created_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;updated_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;updated_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;body&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)[:</span><span class="mi">500</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">500</span> <span class="k">else</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found first issue: #</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> created on </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;created_at&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the very first issue created in this repository&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;first_issue&quot;</span><span class="p">:</span> <span class="n">issue_info</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@sub_mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">hello_world</span><span class="p">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns a simple greeting.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="s2">&quot;Hello, world!&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">mcp</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">&quot;sub_mcp&quot;</span><span class="p">,</span> <span class="n">sub_mcp</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Starting FastMCP GitHub server...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;DEBUG: Server name: </span><span class="si">{</span><span class="n">mcp</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">transport</span><span class="o">=</span><span class="s2">&quot;stdio&quot;</span>',
      '<span class="w">    </span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github_server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver, en la <code>tool</code> <code>list_repository_issues</code> hemos indicado que se excluya el parámetro <code>user_id</code>.</p>
      <div class='highlight'><pre><code>@mcp.tool(
          tags={"public", "production"},
          exclude_args=["user_id"],   # user_id has to be injected by server, not provided by LLM
      )
      async def list_repository_issues(owner: str, repo_name: str, user_id: int = USER_ID) -&gt; list[dict]:</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Aunque luego devolvemos <code>&quot;requested_by_user_id&quot;: user_id</code></p>
      <div class='highlight'><pre><code>result = {opening_brace}
          "total_found": len(issues_summary),
          "repository": f"{opening_brace}owner{closing_brace}/{opening_brace}repo_name{closing_brace}",
          "note": "Showing first 10 open issues" if len(issues_summary) == 10 else f"Showing all {opening_brace}len(issues_summary){closing_brace} open issues",
          "issues": issues_summary,
          "requested_by_user_id": user_id
      {closing_brace}</code></pre></div>
      <p>Es decir, le estamos pasando la ID al LLM en el resultado. Pero en este caso, es para que a la hora de ejecutar la <code>tool</code> veamos que se ha ejecutado con dicha ID.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Contexto">Contexto<a class="anchor-link" href="#Contexto"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 27" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos pasar información de contexto del servidor al cliente y viceversa.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Servidor MCP">Servidor MCP<a class="anchor-link" href="#Servidor MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 28" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a añadir contexto a nuestro servidor MCP.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">httpx</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span><span class="p">,</span> <span class="n">Context</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">github</span><span class="w"> </span><span class="kn">import</span> <span class="n">GITHUB_TOKEN</span><span class="p">,</span> <span class="n">create_github_headers</span>',
      '<span class="w"> </span>',
      '<span class="n">USER_ID</span> <span class="o">=</span> <span class="mi">1234567890</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create FastMCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;This server provides tools, resources and prompts to interact with the GitHub API.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">include_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;first_issue&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">sub_mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;SubMCP&quot;</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_args</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;user_id&quot;</span><span class="p">],</span>   <span class="c1"># user_id has to be injected by server, not provided by LLM</span>',
      '<span class="p">)</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">ctx</span><span class="p">:</span> <span class="n">Context</span><span class="p">,</span> <span class="n">user_id</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">USER_ID</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="sd">        ctx: The context of the request</span>',
      '<span class="sd">        user_id: The user ID (automatically injected by the server)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 10 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=10&quot;</span>',
      '<span class="w">    </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;requested_by_user_id&quot;</span><span class="p">:</span> <span class="n">user_id</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;development&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_more_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 100 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=100&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;first_issue&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">first_repository_issue</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Gets the first issue ever created in a GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list containing information about the first issue created</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Get the first issue by sorting by creation date in ascending order</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=all&amp;amp;sort=created&amp;amp;direction=asc&amp;amp;per_page=1&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching first issue from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">first_issue</span> <span class="o">=</span> <span class="n">issues_data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Create a detailed summary of the first issue</span>',
      '<span class="w">            </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">issue_info</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;state&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;state&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;created_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;updated_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;updated_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;body&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)[:</span><span class="mi">500</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">500</span> <span class="k">else</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found first issue: #</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> created on </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;created_at&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the very first issue created in this repository&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;first_issue&quot;</span><span class="p">:</span> <span class="n">issue_info</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@sub_mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">hello_world</span><span class="p">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns a simple greeting.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="s2">&quot;Hello, world!&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">mcp</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">&quot;sub_mcp&quot;</span><span class="p">,</span> <span class="n">sub_mcp</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Starting FastMCP GitHub server...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;DEBUG: Server name: </span><span class="si">{</span><span class="n">mcp</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">transport</span><span class="o">=</span><span class="s2">&quot;stdio&quot;</span>',
      '<span class="w">    </span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github_server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Hemos sustituído todos los <code>print</code>s por <code>ctx.info</code>. De esta manera, todas esas líneas de información ahora se pueden imprimir en el cliente si queremos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Más adelante lo vamos a usar</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2>Crear un <code>resource</code></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear un <code>resource</code> estático a nuestro MCP</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Servidor MCP">Servidor MCP<a class="anchor-link" href="#Servidor MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 29" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos convertir una función en nuestro servidor en un <code>resource</code> mediante el decorador <code>@mcp.resource(&#x3C;ENDPOINT&#x3E;)</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Un <code>resource</code> es un endpoint que nos da información. Mientras que una <code>tool</code> puede realizar cambios y/o acciones, un <code>resource</code> sólo nos da información.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a verlo con un ejemplo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">httpx</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span><span class="p">,</span> <span class="n">Context</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">github</span><span class="w"> </span><span class="kn">import</span> <span class="n">GITHUB_TOKEN</span><span class="p">,</span> <span class="n">create_github_headers</span>',
      '<span class="w"> </span>',
      '<span class="n">USER_ID</span> <span class="o">=</span> <span class="mi">1234567890</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create FastMCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;This server provides tools, resources and prompts to interact with the GitHub API.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">include_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;first_issue&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">sub_mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;SubMCP&quot;</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_args</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;user_id&quot;</span><span class="p">],</span>   <span class="c1"># user_id has to be injected by server, not provided by LLM</span>',
      '<span class="p">)</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">ctx</span><span class="p">:</span> <span class="n">Context</span><span class="p">,</span> <span class="n">user_id</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">USER_ID</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="sd">        ctx: The context of the request</span>',
      '<span class="sd">        user_id: The user ID (automatically injected by the server)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 10 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=10&quot;</span>',
      '<span class="w">    </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;requested_by_user_id&quot;</span><span class="p">:</span> <span class="n">user_id</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;development&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_more_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 100 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=100&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;first_issue&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">first_repository_issue</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Gets the first issue ever created in a GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list containing information about the first issue created</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Get the first issue by sorting by creation date in ascending order</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=all&amp;amp;sort=created&amp;amp;direction=asc&amp;amp;per_page=1&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching first issue from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">first_issue</span> <span class="o">=</span> <span class="n">issues_data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Create a detailed summary of the first issue</span>',
      '<span class="w">            </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">issue_info</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;state&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;state&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;created_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;updated_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;updated_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;body&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)[:</span><span class="mi">500</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">500</span> <span class="k">else</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found first issue: #</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> created on </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;created_at&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the very first issue created in this repository&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;first_issue&quot;</span><span class="p">:</span> <span class="n">issue_info</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s2">&quot;resource://server_info&quot;</span><span class="p">,</span> <span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">server_info</span><span class="p">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns information about the server.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="s2">&quot;This is the MCP GitHub server development for MaximoFN blog post&quot;</span>',
      '<span class="w"> </span>',
      '<span class="nd">@sub_mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">hello_world</span><span class="p">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns a simple greeting.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="s2">&quot;Hello, world!&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">mcp</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">&quot;sub_mcp&quot;</span><span class="p">,</span> <span class="n">sub_mcp</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Starting FastMCP GitHub server...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;DEBUG: Server name: </span><span class="si">{</span><span class="n">mcp</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">transport</span><span class="o">=</span><span class="s2">&quot;stdio&quot;</span>',
      '<span class="w">    </span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github_server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, hemos creado el <code>resource</code> <code>server_info</code> que nos devuelve una cadena de texto con la información del servidor</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Es importante ver que hemos declarado el endpoint <code>resource://server_info</code>, que es obligatorio cada vez que creamos <code>resource</code>s</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Además, le hemos puesto la tag <code>public</code>, ya que nuestro servidor MCP solo incluye las <code>tool</code>s o <code>resource</code>s que tengan la tag <code>public</code>.</p>
      <div class='highlight'><pre><code>mcp = FastMCP(
          name="GitHubMCP",
          instructions="This server provides tools, resources and prompts to interact with the GitHub API.",
          include_tags={"public"},
          exclude_tags={"first_issue"}
      )</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Cliente MCP">Cliente MCP<a class="anchor-link" href="#Cliente MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 30" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora tenemos que hacer que nuestro cliente pueda ver los <code>resource</code>s de nuestro servidor MCP.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">client_MCP</span><span class="o">/</span><span class="n">client</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">sys</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">asyncio</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">contextlib</span><span class="w"> </span><span class="kn">import</span> <span class="n">AsyncExitStack</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">anthropic</span><span class="w"> </span><span class="kn">import</span> <span class="n">Anthropic</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">dotenv</span><span class="w"> </span><span class="kn">import</span> <span class="n">load_dotenv</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">Client</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Load environment variables from .env file</span>',
      '<span class="n">load_dotenv</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">class</span><span class="w"> </span><span class="nc">FastMCPClient</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    FastMCP client that integrates with Claude to process user queries</span>',
      '<span class="sd">    and use tools and resources exposed by a FastMCP server.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Initialize the FastMCP client with Anthropic and resource management.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">exit_stack</span> <span class="o">=</span> <span class="n">AsyncExitStack</span><span class="p">()</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span> <span class="o">=</span> <span class="n">Anthropic</span><span class="p">()</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">connect_to_server</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">server_script_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Connect to the specified FastMCP server.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            server_script_path: Path to the server script (Python)</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔗 Connecting to FastMCP server: </span><span class="si">{</span><span class="n">server_script_path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Determine the server type based on the extension</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="ow">not</span> <span class="n">server_script_path</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39;.py&#39;</span><span class="p">):</span>',
      '<span class="w">            </span><span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Unsupported server type. Use .py files. Received: </span><span class="si">{</span><span class="n">server_script_path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Create FastMCP client </span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="n">Client</span><span class="p">(</span><span class="n">server_script_path</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># Note: FastMCP Client automatically infers transport from .py files</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;✅ Client created successfully&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_available_tools</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List available tools in the FastMCP server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Get list of tools from the server using FastMCP context</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">tools</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_tools</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">tools</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🛠️  Available tools (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">tools</span><span class="p">)</span><span class="si">}</span><span class="s2">):&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">                    </span><span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📋 </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">tool</span><span class="o">.</span><span class="n">description</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Description: </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="c1"># Show parameters if available</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool</span><span class="p">,</span> <span class="s1">&#39;inputSchema&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="s1">&#39;properties&#39;</span> <span class="ow">in</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">params</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">[</span><span class="s1">&#39;properties&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>',
      '<span class="w">                                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Parameters: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No tools found in the server&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing tools: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_available_resources</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List available resources in the FastMCP server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Get list of resources from the server using FastMCP context</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">resources</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_resources</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">resources</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">📚 Available resources (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">resources</span><span class="p">)</span><span class="si">}</span><span class="s2">):&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">                    </span><span class="k">for</span> <span class="n">resource</span> <span class="ow">in</span> <span class="n">resources</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📄 </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">uri</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">name</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Name: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">description</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Description: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">mimeType</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   MIME Type: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">mimeType</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No resources found in the server&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing resources: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">read_resource</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">resource_uri</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Read a specific resource from the server.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            resource_uri: URI of the resource to read</span>',
      '<span class="sd">            </span>',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            str: Resource content</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">read_resource</span><span class="p">(</span><span class="n">resource_uri</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="n">result</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error reading resource </span><span class="si">{</span><span class="n">resource_uri</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">None</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">process_query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Process a user query, interacting with Claude and FastMCP tools and resources.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            query: User query</span>',
      '<span class="sd">            </span>',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            str: Final processed response</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Use FastMCP context for all operations</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Get available tools and resources</span>',
      '<span class="w">                </span><span class="n">tools_list</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_tools</span><span class="p">()</span>',
      '<span class="w">                </span><span class="n">resources_list</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_resources</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Prepare tools for Claude in correct format</span>',
      '<span class="w">                </span><span class="n">claude_tools</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools_list</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">claude_tool</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">description</span> <span class="ow">or</span> <span class="sa">f</span><span class="s2">&quot;Tool </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;input_schema&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span> <span class="ow">or</span> <span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span> <span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{}}</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                    </span><span class="n">claude_tools</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">claude_tool</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Add a special tool for reading resources</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">resources_list</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="c1"># Convert URIs to strings to avoid AnyUrl object issues</span>',
      '<span class="w">                    </span><span class="n">resource_uris</span> <span class="o">=</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">uri</span><span class="p">)</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">resources_list</span><span class="p">]</span>',
      '<span class="w">                    </span><span class="n">claude_tools</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                        </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;read_mcp_resource&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Read a resource from the MCP server. Available resources: &quot;</span> <span class="o">+</span>',
      '<span class="w">                                     </span><span class="s2">&quot;, &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">resource_uris</span><span class="p">),</span>',
      '<span class="w">                        </span><span class="s2">&quot;input_schema&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                            </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span>',
      '<span class="w">                            </span><span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                </span><span class="s2">&quot;resource_uri&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                    </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>',
      '<span class="w">                                    </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;URI of the resource to read&quot;</span>',
      '<span class="w">                                </span><span class="p">}</span>',
      '<span class="w">                            </span><span class="p">},</span>',
      '<span class="w">                            </span><span class="s2">&quot;required&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;resource_uri&quot;</span><span class="p">]</span>',
      '<span class="w">                        </span><span class="p">}</span>',
      '<span class="w">                    </span><span class="p">})</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Create initial message for Claude</span>',
      '<span class="w">                </span><span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>',
      '<span class="w">                    </span><span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="n">query</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                </span><span class="p">]</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># First call to Claude</span>',
      '<span class="w">                </span><span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">                    </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;claude-3-5-sonnet-20241022&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">6000</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">tools</span><span class="o">=</span><span class="n">claude_tools</span> <span class="k">if</span> <span class="n">claude_tools</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">                </span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Process Claude&#39;s response</span>',
      '<span class="w">                </span><span class="n">response_text</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">content_block</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">if</span> <span class="n">content_block</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;text&quot;</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="n">response_text</span> <span class="o">+=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                        </span>',
      '<span class="w">                    </span><span class="k">elif</span> <span class="n">content_block</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;tool_use&quot;</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="c1"># Claude wants to use a tool</span>',
      '<span class="w">                        </span><span class="n">tool_name</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">name</span>',
      '<span class="w">                        </span><span class="n">tool_args</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">input</span>',
      '<span class="w">                        </span><span class="n">tool_call_id</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">id</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔧 Claude wants to use: </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📝 Arguments: </span><span class="si">{</span><span class="n">tool_args</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="n">tool_name</span> <span class="o">==</span> <span class="s2">&quot;read_mcp_resource&quot;</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="c1"># Handle resource reading</span>',
      '<span class="w">                                </span><span class="n">resource_uri</span> <span class="o">=</span> <span class="n">tool_args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;resource_uri&quot;</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">resource_uri</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">read_resource</span><span class="p">(</span><span class="n">resource_uri</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📖 Resource read successfully: </span><span class="si">{</span><span class="n">resource_uri</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                                    </span>',
      '<span class="w">                                    </span><span class="c1"># Better handling of resource result</span>',
      '<span class="w">                                    </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool_result</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">):</span>',
      '<span class="w">                                        </span><span class="c1"># If it&#39;s a resource response object, extract content</span>',
      '<span class="w">                                        </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">):</span>',
      '<span class="w">                                            </span><span class="n">result_content</span> <span class="o">=</span> <span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                                        </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                            </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                        </span><span class="c1"># If it&#39;s already a string or simple object</span>',
      '<span class="w">                                        </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="s2">&quot;Error: No resource URI provided&quot;</span>',
      '<span class="w">                                    </span><span class="n">result_content</span> <span class="o">=</span> <span class="n">tool_result</span>',
      '<span class="w">                            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="c1"># Execute regular tool on the FastMCP server</span>',
      '<span class="w">                                </span><span class="n">tool_result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">call_tool</span><span class="p">(</span><span class="n">tool_name</span><span class="p">,</span> <span class="n">tool_args</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;✅ Tool executed successfully&quot;</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Add tool result to the conversation</span>',
      '<span class="w">                            </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span>',
      '<span class="w">                            </span><span class="p">})</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Format result for Claude</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="n">tool_result</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                    </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                                    </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tool_result&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;tool_use_id&quot;</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;Tool result: </span><span class="si">{</span><span class="n">result_content</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                                    </span><span class="p">}]</span>',
      '<span class="w">                                </span><span class="p">})</span>',
      '<span class="w">                            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                    </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                                    </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tool_result&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;tool_use_id&quot;</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Tool executed without response content&quot;</span>',
      '<span class="w">                                    </span><span class="p">}]</span>',
      '<span class="w">                                </span><span class="p">})</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Second call to Claude with the tool result</span>',
      '<span class="w">                            </span><span class="n">final_response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">                                </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;claude-3-5-sonnet-20241022&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">6000</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">tools</span><span class="o">=</span><span class="n">claude_tools</span> <span class="k">if</span> <span class="n">claude_tools</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">                            </span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Extract text from the final response</span>',
      '<span class="w">                            </span><span class="k">for</span> <span class="n">final_content</span> <span class="ow">in</span> <span class="n">final_response</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">final_content</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;text&quot;</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">response_text</span> <span class="o">+=</span> <span class="n">final_content</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                                    </span>',
      '<span class="w">                        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="n">error_msg</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;❌ Error executing </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="n">error_msg</span><span class="p">)</span>',
      '<span class="w">                            </span><span class="n">response_text</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="si">{</span><span class="n">error_msg</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">return</span> <span class="n">response_text</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_msg</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;❌ Error processing query: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="n">error_msg</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="n">error_msg</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">chat_loop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Main chat loop with user interaction.</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤖 FastMCP client started. Write &#39;quit&#39;, &#39;q&#39;, &#39;exit&#39;, &#39;salir&#39; to exit.&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;💬 You can ask questions about GitHub repositories!&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📚 The client can use tools and resources from the FastMCP server&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;-&quot;</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Request user input</span>',
      '<span class="w">                </span><span class="n">user_input</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">👤 You: &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">user_input</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;quit&#39;</span><span class="p">,</span> <span class="s1">&#39;q&#39;</span><span class="p">,</span> <span class="s1">&#39;exit&#39;</span><span class="p">,</span> <span class="s1">&#39;salir&#39;</span><span class="p">]:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;👋 Bye!&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="k">break</span>',
      '<span class="w">                    </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="ow">not</span> <span class="n">user_input</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">continue</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤔 Claude is thinking...&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Process query</span>',
      '<span class="w">                </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">process_query</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Show response</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤖 Claude: </span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">👋 Disconnecting...&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">break</span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">❌ Error in chat: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">continue</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">cleanup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Clean up resources and close connections.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🧹 Cleaning up resources...&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># FastMCP Client cleanup is handled automatically by context manager</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">exit_stack</span><span class="o">.</span><span class="n">aclose</span><span class="p">()</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;✅ Resources released&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">main</span><span class="p">():</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Main function that initializes and runs the FastMCP client.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Verify command line arguments</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;❌ Usage: python client.py &amp;lt;path_to_fastmcp_server&amp;gt;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Example: python client.py ../MCP_github/github_server.py&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="n">server_script_path</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Create and run client</span>',
      '<span class="w">    </span><span class="n">client</span> <span class="o">=</span> <span class="n">FastMCPClient</span><span class="p">()</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Connect to the server</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">connect_to_server</span><span class="p">(</span><span class="n">server_script_path</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># List available tools and resources after connection</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_available_tools</span><span class="p">()</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_available_resources</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Start chat loop</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">chat_loop</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Fatal error: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">finally</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Ensure resources are cleaned up</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">cleanup</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="c1"># Entry point of the script</span>',
      '<span class="w">    </span><span class="n">asyncio</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting client_MCP/client.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Hemos creado los métodos <code>list_available_resources</code> y <code>read_resource</code> para poder leer los recursos que tenemos en el servidor MCP.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3>Prueba del <code>resource</code></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ejecutamos el cliente para poder probar el <code>resource</code> que hemos creado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">client_MCP</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">python</span> <span class="n">client</span><span class="o">.</span><span class="n">py</span> <span class="o">../</span><span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🔗 Connecting to FastMCP server: ../gitHub_MCP_server/github_server.py',
          '✅ Client created successfully',
          '/Users/macm1/Documents/web/portafolio/posts/gitHub_MCP_server/github_server.py:255: DeprecationWarning: Mount prefixes are now optional and the first positional argument should be the server you want to mount.',
          '&#x20;&#x20;mcp.mount(&quot;sub_mcp&quot;, sub_mcp)',
          '[06/28/25 11:09:01] INFO     Starting MCP server &#x27;GitHubMCP&#x27; with transport &#x27;stdio&#x27;                          server.py:1246',
          '🛠️  Available tools (2):',
          '==================================================',
          '📋 sub_mcp_hello_world',
          '&#x20;&#x20;&#x20;Description: Returns a simple greeting.',
          '&#x20;&#x20;&#x20;Parameters:',
          '📋 list_repository_issues',
          '&#x20;&#x20;&#x20;Description: Lists open issues for a given GitHub repository.',
          'Args:',
          '&#x20;&#x20;&#x20;&#x20;owner: The owner of the repository (e.g., &#x27;modelcontextprotocol&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;repo_name: The name of the repository (e.g., &#x27;python-sdk&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;ctx: The context of the request',
          '&#x20;&#x20;&#x20;&#x20;user_id: The user ID (automatically injected by the server)',
          'Returns:',
          '&#x20;&#x20;&#x20;&#x20;list[dict]: A list of dictionaries, each containing information about an issue',
          '&#x20;&#x20;&#x20;Parameters: owner, repo_name',
          '📚 Available resources (1):',
          '==================================================',
          '📄 resource://server_info',
          '&#x20;&#x20;&#x20;Name: server_info',
          '&#x20;&#x20;&#x20;Description: Returns information about the server.',
          '&#x20;&#x20;&#x20;MIME Type: text/plain',
          '🤖 FastMCP client started. Write &#x27;quit&#x27;, &#x27;q&#x27;, &#x27;exit&#x27;, &#x27;salir&#x27; to exit.',
          '💬 You can ask questions about GitHub repositories!',
          '📚 The client can use tools and resources from the FastMCP server',
          '------------------------------------------------------------',
          '👤 You: Tell me the server info',
          '🤔 Claude is thinking...',
          '🔧 Claude wants to use: read_mcp_resource',
          '📝 Arguments: &#x7B;&#x27;resource_uri&#x27;: &#x27;resource://server_info&#x27;&#x7D;',
          '📖 Resource read successfully: resource://server_info',
          '🤖 Claude: I&#x27;ll help you read the server information using the `read_mcp_resource` function with the specific resource URI for server info.The server information indicates that this is the MCP GitHub server development environment for MaximoFN blog post.',
          '👤 You: q',
          '👋 Bye!',
          '🧹 Cleaning up resources...',
          '✅ Resources released',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que nos da una lista de <code>resource</code>s</p>
      <div class='highlight'><pre><code>📚 Available resources (1):
      ==================================================
      📄 resource://server_info
         Name: server_info
         Description: Returns information about the server.
         MIME Type: text/plain</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Y que cuando le pedimos la información del servidor usa el <code>resource</code> <code>server_info</code> que acabamos de crear.</p>
      <div class='highlight'><pre><code>👤 You: Tell me de server info
      
      🤔 Claude is thinking...
      🔧 Claude wants to use: read_mcp_resource
      📝 Arguments: {opening_brace}&#39;resource_uri&#39;: &#39;resource://server_info&#39;{closing_brace}
      📖 Resource read successfully: resource://server_info
      
      🤖 Claude: I&#39;ll help you read the server information using the `read_mcp_resource` function with the specific resource URI for server info.The server information indicates that this is the MCP GitHub server development environment for MaximoFN blog post.</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2>Añadir contexto al <code>resource</code></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al igual que hicimos con las <code>tool</code>s, podemos añadir contexto a los <code>resource</code>s.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Servidor MCP">Servidor MCP<a class="anchor-link" href="#Servidor MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 31" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">httpx</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span><span class="p">,</span> <span class="n">Context</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">github</span><span class="w"> </span><span class="kn">import</span> <span class="n">GITHUB_TOKEN</span><span class="p">,</span> <span class="n">create_github_headers</span>',
      '<span class="w"> </span>',
      '<span class="n">USER_ID</span> <span class="o">=</span> <span class="mi">1234567890</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create FastMCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;This server provides tools, resources and prompts to interact with the GitHub API.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">include_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;first_issue&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">sub_mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;SubMCP&quot;</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_args</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;user_id&quot;</span><span class="p">],</span>   <span class="c1"># user_id has to be injected by server, not provided by LLM</span>',
      '<span class="p">)</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">ctx</span><span class="p">:</span> <span class="n">Context</span><span class="p">,</span> <span class="n">user_id</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">USER_ID</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="sd">        ctx: The context of the request</span>',
      '<span class="sd">        user_id: The user ID (automatically injected by the server)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 10 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=10&quot;</span>',
      '<span class="w">    </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;requested_by_user_id&quot;</span><span class="p">:</span> <span class="n">user_id</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;development&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_more_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 100 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=100&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;first_issue&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">first_repository_issue</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Gets the first issue ever created in a GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list containing information about the first issue created</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Get the first issue by sorting by creation date in ascending order</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=all&amp;amp;sort=created&amp;amp;direction=asc&amp;amp;per_page=1&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching first issue from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">first_issue</span> <span class="o">=</span> <span class="n">issues_data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Create a detailed summary of the first issue</span>',
      '<span class="w">            </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">issue_info</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;state&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;state&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;created_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;updated_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;updated_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;body&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)[:</span><span class="mi">500</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">500</span> <span class="k">else</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found first issue: #</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> created on </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;created_at&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the very first issue created in this repository&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;first_issue&quot;</span><span class="p">:</span> <span class="n">issue_info</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s2">&quot;resource://server_info&quot;</span><span class="p">,</span> <span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">server_info</span><span class="p">(</span><span class="n">ctx</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns information about the server.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;info&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the MCP GitHub server development for MaximoFN blog post&quot;</span><span class="p">,</span>',
      '<span class="w">        </span><span class="s2">&quot;requested_id&quot;</span><span class="p">:</span> <span class="n">ctx</span><span class="o">.</span><span class="n">request_id</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="nd">@sub_mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">hello_world</span><span class="p">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns a simple greeting.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="s2">&quot;Hello, world!&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">mcp</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">&quot;sub_mcp&quot;</span><span class="p">,</span> <span class="n">sub_mcp</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Starting FastMCP GitHub server...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;DEBUG: Server name: </span><span class="si">{</span><span class="n">mcp</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">transport</span><span class="o">=</span><span class="s2">&quot;stdio&quot;</span>',
      '<span class="w">    </span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github_server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Hemos añadido contexto al <code>resource</code> <code>server_info</code> para que nos devuelva la ID de la petición.</p>
      <div class='highlight'><pre><code>return {opening_brace}
          "info": "This is the MCP GitHub server development for MaximoFN blog post",
          "requested_id": ctx.request_id
      }</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3>Prueba del servidor con contexto en el <code>resource</code></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ejecutamos el cliente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">client_MCP</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">python</span> <span class="n">client</span><span class="o">.</span><span class="n">py</span> <span class="o">../</span><span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🔗 Connecting to FastMCP server: ../gitHub_MCP_server/github_server.py',
          '✅ Client created successfully',
          '/Users/macm1/Documents/web/portafolio/posts/gitHub_MCP_server/github_server.py:258: DeprecationWarning: Mount prefixes are now optional and the first positional argument should be the server you want to mount.',
          '&#x20;&#x20;mcp.mount(&quot;sub_mcp&quot;, sub_mcp)',
          '[06/28/25 11:17:41] INFO     Starting MCP server &#x27;GitHubMCP&#x27; with transport &#x27;stdio&#x27;                          server.py:1246',
          '🛠️  Available tools (2):',
          '==================================================',
          '📋 sub_mcp_hello_world',
          '&#x20;&#x20;&#x20;Description: Returns a simple greeting.',
          '&#x20;&#x20;&#x20;Parameters:',
          '📋 list_repository_issues',
          '&#x20;&#x20;&#x20;Description: Lists open issues for a given GitHub repository.',
          'Args:',
          '&#x20;&#x20;&#x20;&#x20;owner: The owner of the repository (e.g., &#x27;modelcontextprotocol&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;repo_name: The name of the repository (e.g., &#x27;python-sdk&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;ctx: The context of the request',
          '&#x20;&#x20;&#x20;&#x20;user_id: The user ID (automatically injected by the server)',
          'Returns:',
          '&#x20;&#x20;&#x20;&#x20;list[dict]: A list of dictionaries, each containing information about an issue',
          '&#x20;&#x20;&#x20;Parameters: owner, repo_name',
          '📚 Available resources (1):',
          '==================================================',
          '📄 resource://server_info',
          '&#x20;&#x20;&#x20;Name: server_info',
          '&#x20;&#x20;&#x20;Description: Returns information about the server.',
          '&#x20;&#x20;&#x20;MIME Type: text/plain',
          '🤖 FastMCP client started. Write &#x27;quit&#x27;, &#x27;q&#x27;, &#x27;exit&#x27;, &#x27;salir&#x27; to exit.',
          '💬 You can ask questions about GitHub repositories!',
          '📚 The client can use tools and resources from the FastMCP server',
          '------------------------------------------------------------',
          '👤 You: Tell me the server info',
          '🤔 Claude is thinking...',
          '🔧 Claude wants to use: read_mcp_resource',
          '📝 Arguments: &#x7B;&#x27;resource_uri&#x27;: &#x27;resource://server_info&#x27;&#x7D;',
          '📖 Resource read successfully: resource://server_info',
          '🤖 Claude: I&#x27;ll help you read the server information using the `read_mcp_resource` function. The server information is available at the resource URI &quot;resource://server_info&quot;.According to the server information:',
          '- This is the MCP GitHub server development for MaximoFN blog post',
          '- The requested ID is &quot;7&quot;',
          '👤 You: q',
          '👋 Bye!',
          '🧹 Cleaning up resources...',
          '✅ Resources released',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos nos ha dado la información del servidor y el ID de la petición.</p>
      <div class='highlight'><pre><code>👤 You: Tell me the server info
      
      🤔 Claude is thinking...
      🔧 Claude wants to use: read_mcp_resource
      📝 Arguments: {opening_brace}&#39;resource_uri&#39;: &#39;resource://server_info&#39;{closing_brace}
      📖 Resource read successfully: resource://server_info
      
      🤖 Claude: I&#39;ll help you read the server information using the `read_mcp_resource` function. The server information is available at the resource URI "resource://server_info".According to the server information:
      - This is the MCP GitHub server development for MaximoFN blog post
      - The requested ID is "7"</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2>Crear un <code>resource template</code></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Antes hemos creado un <code>resource</code> que es un recurso estático, pero a lo mejor queremos obtener información, pero no siempre la misma, queremos que el LLM pueda decidir qué información quiere o necesitamos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para ello tenemos los <code>resource template</code>s, que nos dan información igual que un <code>resource</code>, pero de manera dinámica. En el momento de la petición se crea el <code>resource</code> y se devuelve.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Servidor MCP">Servidor MCP<a class="anchor-link" href="#Servidor MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 32" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Crear un <code>resource template</code> se hace de la misma manera que crear un <code>resource</code>, es decir mediante <code>@mcp.resource(&#x3C;ENDPOINT)</code>, solo que ahora el endpoint es una plantilla que se rellena en el momento de la petición.</p>
      <p>Vamos a verlo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">httpx</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span><span class="p">,</span> <span class="n">Context</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">github</span><span class="w"> </span><span class="kn">import</span> <span class="n">GITHUB_TOKEN</span><span class="p">,</span> <span class="n">create_github_headers</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">datetime</span>',
      '<span class="w"> </span>',
      '<span class="n">USER_ID</span> <span class="o">=</span> <span class="mi">1234567890</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create FastMCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;This server provides tools, resources and prompts to interact with the GitHub API.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">include_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;first_issue&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">sub_mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;SubMCP&quot;</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_args</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;user_id&quot;</span><span class="p">],</span>   <span class="c1"># user_id has to be injected by server, not provided by LLM</span>',
      '<span class="p">)</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">ctx</span><span class="p">:</span> <span class="n">Context</span><span class="p">,</span> <span class="n">user_id</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">USER_ID</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="sd">        ctx: The context of the request</span>',
      '<span class="sd">        user_id: The user ID (automatically injected by the server)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 10 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=10&quot;</span>',
      '<span class="w">    </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;requested_by_user_id&quot;</span><span class="p">:</span> <span class="n">user_id</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;development&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_more_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 100 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=100&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;first_issue&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">first_repository_issue</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Gets the first issue ever created in a GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list containing information about the first issue created</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Get the first issue by sorting by creation date in ascending order</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=all&amp;amp;sort=created&amp;amp;direction=asc&amp;amp;per_page=1&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching first issue from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">first_issue</span> <span class="o">=</span> <span class="n">issues_data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Create a detailed summary of the first issue</span>',
      '<span class="w">            </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">issue_info</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;state&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;state&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;created_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;updated_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;updated_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;body&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)[:</span><span class="mi">500</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">500</span> <span class="k">else</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found first issue: #</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> created on </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;created_at&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the very first issue created in this repository&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;first_issue&quot;</span><span class="p">:</span> <span class="n">issue_info</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s2">&quot;resource://server_info&quot;</span><span class="p">,</span> <span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">server_info</span><span class="p">(</span><span class="n">ctx</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns information about the server.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;info&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the MCP GitHub server development for MaximoFN blog post&quot;</span><span class="p">,</span>',
      '<span class="w">        </span><span class="s2">&quot;requested_id&quot;</span><span class="p">:</span> <span class="n">ctx</span><span class="o">.</span><span class="n">request_id</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s2">&quot;github://repo/</span><span class="si">{owner}</span><span class="s2">/</span><span class="si">{repo_name}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">repository_info</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">ctx</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">dict</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns detailed information about a GitHub repository.</span>',
      '<span class="sd">    </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="sd">        ctx: The context of the request</span>',
      '<span class="sd">    </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        dict: Repository information including name, description, stats, etc.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">    </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching repository information from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">repo_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Extract relevant repository information</span>',
      '<span class="w">            </span><span class="n">repo_info</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;full_name&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;full_name&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;description&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;owner&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                    </span><span class="s2">&quot;login&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;owner&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;owner&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;type&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="p">},</span>',
      '<span class="w">                </span><span class="s2">&quot;html_url&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;clone_url&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;clone_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;ssh_url&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;ssh_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;language&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;language&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;size&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;size&quot;</span><span class="p">),</span>  <span class="c1"># Size in KB</span>',
      '<span class="w">                </span><span class="s2">&quot;stargazers_count&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;stargazers_count&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;watchers_count&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;watchers_count&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;forks_count&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;forks_count&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;open_issues_count&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;open_issues_count&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;default_branch&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;default_branch&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;created_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;updated_at&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;updated_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;pushed_at&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;pushed_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;is_private&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;private&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;is_fork&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;fork&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;is_archived&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;archived&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;has_issues&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;has_issues&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;has_projects&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;has_projects&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;has_wiki&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;has_wiki&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;license&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;license&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;license&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="kc">None</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;topics&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;topics&quot;</span><span class="p">,</span> <span class="p">[])</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Successfully retrieved information for repository </span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="n">repo_info</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;Repository </span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2"> not found or is private.&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">    </span>',
      '<span class="w"> </span>',
      '<span class="nd">@sub_mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">hello_world</span><span class="p">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns a simple greeting.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="s2">&quot;Hello, world!&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">mcp</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">&quot;sub_mcp&quot;</span><span class="p">,</span> <span class="n">sub_mcp</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Starting FastMCP GitHub server...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;DEBUG: Server name: </span><span class="si">{</span><span class="n">mcp</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">transport</span><span class="o">=</span><span class="s2">&quot;stdio&quot;</span>',
      '<span class="w">    </span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github_server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Hemos creado el <code>resource template</code> <code>repository_info</code>, que nos da la información de un repositorio que va a determinar el LLM. Se crea la plantilla y en tiempo de ejecución se rellena con los parámetros que se le pasan.</p>
      <div class='highlight'><pre><code>@mcp.resource("github://repo/{opening_brace}owner{closing_brace}/{opening_brace}repo_name{closing_brace}", tags={opening_brace}"public"{closing_brace})
      async def repository_info(owner: str, repo_name: str, ctx: Context) -&gt; dict:</code></pre></div>
      <p>Tanto el repositorio, como el dueño del repositorio, tienen que ser parámetros de la función.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Client MCP">Client MCP<a class="anchor-link" href="#Client MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 33" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hacemos un pequeño cambio en el cliente para que el LLM entienda que hay recursos estáticos y dinámicos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">client_MCP</span><span class="o">/</span><span class="n">client</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">sys</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">asyncio</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">contextlib</span><span class="w"> </span><span class="kn">import</span> <span class="n">AsyncExitStack</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">anthropic</span><span class="w"> </span><span class="kn">import</span> <span class="n">Anthropic</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">dotenv</span><span class="w"> </span><span class="kn">import</span> <span class="n">load_dotenv</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">Client</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Load environment variables from .env file</span>',
      '<span class="n">load_dotenv</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">class</span><span class="w"> </span><span class="nc">FastMCPClient</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    FastMCP client that integrates with Claude to process user queries</span>',
      '<span class="sd">    and use tools and resources exposed by a FastMCP server.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Initialize the FastMCP client with Anthropic and resource management.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">exit_stack</span> <span class="o">=</span> <span class="n">AsyncExitStack</span><span class="p">()</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span> <span class="o">=</span> <span class="n">Anthropic</span><span class="p">()</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">connect_to_server</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">server_script_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Connect to the specified FastMCP server.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            server_script_path: Path to the server script (Python)</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔗 Connecting to FastMCP server: </span><span class="si">{</span><span class="n">server_script_path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Determine the server type based on the extension</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="ow">not</span> <span class="n">server_script_path</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39;.py&#39;</span><span class="p">):</span>',
      '<span class="w">            </span><span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Unsupported server type. Use .py files. Received: </span><span class="si">{</span><span class="n">server_script_path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Create FastMCP client </span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="n">Client</span><span class="p">(</span><span class="n">server_script_path</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># Note: FastMCP Client automatically infers transport from .py files</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;✅ Client created successfully&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_available_tools</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List available tools in the FastMCP server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Get list of tools from the server using FastMCP context</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">tools</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_tools</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">tools</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🛠️  Available tools (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">tools</span><span class="p">)</span><span class="si">}</span><span class="s2">):&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">                    </span><span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📋 </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">tool</span><span class="o">.</span><span class="n">description</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Description: </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="c1"># Show parameters if available</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool</span><span class="p">,</span> <span class="s1">&#39;inputSchema&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="s1">&#39;properties&#39;</span> <span class="ow">in</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">params</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">[</span><span class="s1">&#39;properties&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>',
      '<span class="w">                                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Parameters: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No tools found in the server&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing tools: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_available_resources</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List available resources in the FastMCP server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Get list of resources from the server using FastMCP context</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">resources</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_resources</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">resources</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">📚 Available resources (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">resources</span><span class="p">)</span><span class="si">}</span><span class="s2">):&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">                    </span><span class="k">for</span> <span class="n">resource</span> <span class="ow">in</span> <span class="n">resources</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📄 </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">uri</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">name</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Name: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">description</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Description: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">mimeType</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   MIME Type: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">mimeType</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No resources found in the server&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing resources: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">read_resource</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">resource_uri</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Read a specific resource from the server.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            resource_uri: URI of the resource to read</span>',
      '<span class="sd">            </span>',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            str: Resource content</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">read_resource</span><span class="p">(</span><span class="n">resource_uri</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="n">result</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error reading resource </span><span class="si">{</span><span class="n">resource_uri</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">None</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">process_query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Process a user query, interacting with Claude and FastMCP tools and resources.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            query: User query</span>',
      '<span class="sd">            </span>',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            str: Final processed response</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Use FastMCP context for all operations</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Get available tools and resources</span>',
      '<span class="w">                </span><span class="n">tools_list</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_tools</span><span class="p">()</span>',
      '<span class="w">                </span><span class="n">resources_list</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_resources</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Prepare tools for Claude in correct format</span>',
      '<span class="w">                </span><span class="n">claude_tools</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools_list</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">claude_tool</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">description</span> <span class="ow">or</span> <span class="sa">f</span><span class="s2">&quot;Tool </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;input_schema&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span> <span class="ow">or</span> <span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span> <span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{}}</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                    </span><span class="n">claude_tools</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">claude_tool</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Add a special tool for reading resources (including template resources)</span>',
      '<span class="w">                </span><span class="n">resource_description</span> <span class="o">=</span> <span class="s2">&quot;Read a resource from the MCP server. &quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">resources_list</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="c1"># Convert URIs to strings to avoid AnyUrl object issues</span>',
      '<span class="w">                    </span><span class="n">resource_uris</span> <span class="o">=</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">uri</span><span class="p">)</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">resources_list</span><span class="p">]</span>',
      '<span class="w">                    </span><span class="n">resource_description</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot;Available static resources: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">resource_uris</span><span class="p">)</span><span class="si">}</span><span class="s2">. &quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">resource_description</span> <span class="o">+=</span> <span class="s2">&quot;Also supports template resources like github://repo/owner/repo_name for GitHub repository information.&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">claude_tools</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;read_mcp_resource&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">resource_description</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;input_schema&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                            </span><span class="s2">&quot;resource_uri&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;URI of the resource to read. Can be static (like resource://server_info) or template-based (like github://repo/facebook/react)&quot;</span>',
      '<span class="w">                            </span><span class="p">}</span>',
      '<span class="w">                        </span><span class="p">},</span>',
      '<span class="w">                        </span><span class="s2">&quot;required&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;resource_uri&quot;</span><span class="p">]</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Create initial message for Claude</span>',
      '<span class="w">                </span><span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>',
      '<span class="w">                    </span><span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="n">query</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                </span><span class="p">]</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># First call to Claude</span>',
      '<span class="w">                </span><span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">                    </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;claude-3-5-sonnet-20241022&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">6000</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">tools</span><span class="o">=</span><span class="n">claude_tools</span> <span class="k">if</span> <span class="n">claude_tools</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">                </span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Process Claude&#39;s response</span>',
      '<span class="w">                </span><span class="n">response_text</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">content_block</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">if</span> <span class="n">content_block</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;text&quot;</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="n">response_text</span> <span class="o">+=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                        </span>',
      '<span class="w">                    </span><span class="k">elif</span> <span class="n">content_block</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;tool_use&quot;</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="c1"># Claude wants to use a tool</span>',
      '<span class="w">                        </span><span class="n">tool_name</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">name</span>',
      '<span class="w">                        </span><span class="n">tool_args</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">input</span>',
      '<span class="w">                        </span><span class="n">tool_call_id</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">id</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔧 Claude wants to use: </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📝 Arguments: </span><span class="si">{</span><span class="n">tool_args</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="n">tool_name</span> <span class="o">==</span> <span class="s2">&quot;read_mcp_resource&quot;</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="c1"># Handle resource reading</span>',
      '<span class="w">                                </span><span class="n">resource_uri</span> <span class="o">=</span> <span class="n">tool_args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;resource_uri&quot;</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">resource_uri</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">read_resource</span><span class="p">(</span><span class="n">resource_uri</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📖 Resource read successfully: </span><span class="si">{</span><span class="n">resource_uri</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                                    </span>',
      '<span class="w">                                    </span><span class="c1"># Better handling of resource result</span>',
      '<span class="w">                                    </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool_result</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">):</span>',
      '<span class="w">                                        </span><span class="c1"># If it&#39;s a resource response object, extract content</span>',
      '<span class="w">                                        </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">):</span>',
      '<span class="w">                                            </span><span class="n">result_content</span> <span class="o">=</span> <span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                                        </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                            </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                        </span><span class="c1"># If it&#39;s already a string or simple object</span>',
      '<span class="w">                                        </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="s2">&quot;Error: No resource URI provided&quot;</span>',
      '<span class="w">                                    </span><span class="n">result_content</span> <span class="o">=</span> <span class="n">tool_result</span>',
      '<span class="w">                            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="c1"># Execute regular tool on the FastMCP server</span>',
      '<span class="w">                                </span><span class="n">tool_result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">call_tool</span><span class="p">(</span><span class="n">tool_name</span><span class="p">,</span> <span class="n">tool_args</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;✅ Tool executed successfully&quot;</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Add tool result to the conversation</span>',
      '<span class="w">                            </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span>',
      '<span class="w">                            </span><span class="p">})</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Format result for Claude</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="n">tool_result</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                    </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                                    </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tool_result&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;tool_use_id&quot;</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;Tool result: </span><span class="si">{</span><span class="n">result_content</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                                    </span><span class="p">}]</span>',
      '<span class="w">                                </span><span class="p">})</span>',
      '<span class="w">                            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                    </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                                    </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tool_result&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;tool_use_id&quot;</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Tool executed without response content&quot;</span>',
      '<span class="w">                                    </span><span class="p">}]</span>',
      '<span class="w">                                </span><span class="p">})</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Second call to Claude with the tool result</span>',
      '<span class="w">                            </span><span class="n">final_response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">                                </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;claude-3-5-sonnet-20241022&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">6000</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">tools</span><span class="o">=</span><span class="n">claude_tools</span> <span class="k">if</span> <span class="n">claude_tools</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">                            </span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Extract text from the final response</span>',
      '<span class="w">                            </span><span class="k">for</span> <span class="n">final_content</span> <span class="ow">in</span> <span class="n">final_response</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">final_content</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;text&quot;</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">response_text</span> <span class="o">+=</span> <span class="n">final_content</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                                    </span>',
      '<span class="w">                        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="n">error_msg</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;❌ Error executing </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="n">error_msg</span><span class="p">)</span>',
      '<span class="w">                            </span><span class="n">response_text</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="si">{</span><span class="n">error_msg</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">return</span> <span class="n">response_text</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_msg</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;❌ Error processing query: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="n">error_msg</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="n">error_msg</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">chat_loop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Main chat loop with user interaction.</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤖 FastMCP client started. Write &#39;quit&#39;, &#39;q&#39;, &#39;exit&#39;, &#39;salir&#39; to exit.&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;💬 You can ask questions about GitHub repositories!&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📚 The client can use tools and resources from the FastMCP server&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;-&quot;</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Request user input</span>',
      '<span class="w">                </span><span class="n">user_input</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">👤 You: &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">user_input</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;quit&#39;</span><span class="p">,</span> <span class="s1">&#39;q&#39;</span><span class="p">,</span> <span class="s1">&#39;exit&#39;</span><span class="p">,</span> <span class="s1">&#39;salir&#39;</span><span class="p">]:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;👋 Bye!&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="k">break</span>',
      '<span class="w">                    </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="ow">not</span> <span class="n">user_input</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">continue</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤔 Claude is thinking...&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Process query</span>',
      '<span class="w">                </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">process_query</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Show response</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤖 Claude: </span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">👋 Disconnecting...&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">break</span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">❌ Error in chat: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">continue</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">cleanup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Clean up resources and close connections.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🧹 Cleaning up resources...&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># FastMCP Client cleanup is handled automatically by context manager</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">exit_stack</span><span class="o">.</span><span class="n">aclose</span><span class="p">()</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;✅ Resources released&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">main</span><span class="p">():</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Main function that initializes and runs the FastMCP client.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Verify command line arguments</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;❌ Usage: python client.py &amp;lt;path_to_fastmcp_server&amp;gt;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Example: python client.py ../MCP_github/github_server.py&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="n">server_script_path</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Create and run client</span>',
      '<span class="w">    </span><span class="n">client</span> <span class="o">=</span> <span class="n">FastMCPClient</span><span class="p">()</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Connect to the server</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">connect_to_server</span><span class="p">(</span><span class="n">server_script_path</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># List available tools and resources after connection</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_available_tools</span><span class="p">()</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_available_resources</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Start chat loop</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">chat_loop</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Fatal error: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">finally</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Ensure resources are cleaned up</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">cleanup</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="c1"># Entry point of the script</span>',
      '<span class="w">    </span><span class="n">asyncio</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting client_MCP/client.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos le decimos <code>&quot;description&quot;: &quot;URI of the resource to read. Can be static (like resource://server_info) or template-based (like github://repo/facebook/react)&quot;</code></p>
      <div class='highlight'><pre><code>claude_tools.append({opening_brace}
          "name": "read_mcp_resource",
          "description": "Read a resource from the MCP server. Available resources: " + 
                          ", ".join(resource_uris),
          "input_schema": {opening_brace}
              "type": "object",
              "properties": {opening_brace}
                  "resource_uri": {opening_brace}
                      "type": "string",
                      "description": "URI of the resource to read"
                  {closing_brace}
              {closing_brace},
              "required": ["resource_uri"]
          {closing_brace}
      {closing_brace})</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3>Prueba del <code>resource template</code></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ejecutamos el cliente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">client_MCP</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">python</span> <span class="n">client</span><span class="o">.</span><span class="n">py</span> <span class="o">../</span><span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🔗 Connecting to FastMCP server: ../gitHub_MCP_server/github_server.py',
          '✅ Client created successfully',
          '🛠️  Available tools (2):',
          '==================================================',
          '📋 sub_mcp_hello_world',
          '&#x20;&#x20;&#x20;Description: Returns a simple greeting.',
          '&#x20;&#x20;&#x20;Parameters:',
          '📋 list_repository_issues',
          '&#x20;&#x20;&#x20;Description: Lists open issues for a given GitHub repository.',
          'Args:',
          '&#x20;&#x20;&#x20;&#x20;owner: The owner of the repository (e.g., &#x27;modelcontextprotocol&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;repo_name: The name of the repository (e.g., &#x27;python-sdk&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;ctx: The context of the request',
          '&#x20;&#x20;&#x20;&#x20;user_id: The user ID (automatically injected by the server)',
          'Returns:',
          '&#x20;&#x20;&#x20;&#x20;list[dict]: A list of dictionaries, each containing information about an issue',
          '&#x20;&#x20;&#x20;Parameters: owner, repo_name',
          '📚 Available resources (1):',
          '==================================================',
          '📄 resource://server_info',
          '&#x20;&#x20;&#x20;Name: server_info',
          '&#x20;&#x20;&#x20;Description: Returns information about the server.',
          '&#x20;&#x20;&#x20;MIME Type: text/plain',
          '🤖 FastMCP client started. Write &#x27;quit&#x27;, &#x27;q&#x27;, &#x27;exit&#x27;, &#x27;salir&#x27; to exit.',
          '💬 You can ask questions about GitHub repositories!',
          '📚 The client can use tools and resources from the FastMCP server',
          '------------------------------------------------------------',
          '👤 You: Can you read the resource github://repo/facebook/react for detailed information about the repository?',
          '🤔 Claude is thinking...',
          '🔧 Claude wants to use: read_mcp_resource',
          '📝 Arguments: &#x7B;&#x27;resource_uri&#x27;: &#x27;github://repo/facebook/react&#x27;&#x7D;',
          '📖 Resource read successfully: github://repo/facebook/react',
          '🤖 Claude: I&#x27;ll help you read the GitHub repository information for Facebook&#x27;s React using the `read_mcp_resource` function.Based on the repository information retrieved, here are the key details about the Facebook React repository:',
          '1. Description: The library for web and native user interfaces',
          '2. Owner: Facebook (Organization)',
          '3. Language: JavaScript',
          '4. Repository Statistics:',
          '&#x20;&#x20;&#x20;- Stars: 236,803',
          '&#x20;&#x20;&#x20;- Forks: 48,815',
          '&#x20;&#x20;&#x20;- Open Issues: 999',
          '&#x20;&#x20;&#x20;- Watchers: 236,803',
          '5. Important Dates:',
          '&#x20;&#x20;&#x20;- Created: May 24, 2013',
          '&#x20;&#x20;&#x20;- Last Updated: June 28, 2025',
          '&#x20;&#x20;&#x20;- Last Push: June 27, 2025',
          '6. Repository Features:',
          '&#x20;&#x20;&#x20;- Public repository (not private)',
          '&#x20;&#x20;&#x20;- Not a fork',
          '&#x20;&#x20;&#x20;- Not archived',
          '&#x20;&#x20;&#x20;- Has issues enabled',
          '&#x20;&#x20;&#x20;- Projects disabled',
          '&#x20;&#x20;&#x20;- Wiki disabled',
          '7. License: MIT License',
          '8. Topics/Tags:',
          '&#x20;&#x20;&#x20;- declarative',
          '&#x20;&#x20;&#x20;- frontend',
          '&#x20;&#x20;&#x20;- javascript',
          '&#x20;&#x20;&#x20;- library',
          '&#x20;&#x20;&#x20;- react',
          '&#x20;&#x20;&#x20;- ui',
          'The repository can be accessed via:',
          '- HTTPS: https://github.com/facebook/react',
          '- SSH: git@github.com:facebook/react.git',
          'This is one of the most popular repositories on GitHub, as evidenced by its high number of stars and forks, and it remains actively maintained with regular updates.',
          '👤 You: q',
          '👋 Bye!',
          '🧹 Cleaning up resources...',
          '✅ Resources released',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Le pedimos la información de un repositorio, usa el <code>resource template</code> <code>repository_info</code> y nos da la información del repositorio.</p>
      <div class='highlight'><pre><code>👤 You: Can you read the resource github://repo/facebook/react for detailed information about the repository?    
      
      🤔 Claude is thinking...
      🔧 Claude wants to use: read_mcp_resource
      📝 Arguments: {opening_brace}&#39;resource_uri&#39;: &#39;github://repo/facebook/react&#39;{closing_brace}
      📖 Resource read successfully: github://repo/facebook/react
      
      🤖 Claude: I&#39;ll help you read the GitHub repository information for Facebook&#39;s React using the `read_mcp_resource` function.Based on the repository information retrieved, here are the key details about the Facebook React repository:
      
      1. Description: The library for web and native user interfaces
      2. Owner: Facebook (Organization)
      3. Language: JavaScript
      4. Repository Statistics:
         - Stars: 236,803
         - Forks: 48,815
         - Open Issues: 999
         - Watchers: 236,803
      
      5. Important Dates:
         - Created: May 24, 2013
         - Last Updated: June 28, 2025
         - Last Push: June 27, 2025
      
      6. Repository Features:
         - Public repository (not private)
         - Not a fork
         - Not archived
         - Has issues enabled
         - Projects disabled
         - Wiki disabled
      
      7. License: MIT License
      
      8. Topics/Tags:
         - declarative
         - frontend
         - javascript
         - library
         - react
         - ui
      
      The repository can be accessed via:
      - HTTPS: https://github.com/facebook/react
      - SSH: git@github.com:facebook/react.git
      
      This is one of the most popular repositories on GitHub, as evidenced by its high number of stars and forks, and it remains actively maintained with regular updates.</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2>Crear un <code>prompt</code></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Otra de las herramientas que nos ofrece MCP es pedirle al LLM que nos cree un <code>prompt</code> para usarlo en una petición.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Servidor MCP">Servidor MCP<a class="anchor-link" href="#Servidor MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 34" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos un <code>prompt</code> en nuestro servidor, para ello usamos el decorador <code>@mcp.prompt</code> y le pasamos el nombre del prompt, la descripción y la etiqueta <code>public</code>, porque habíamos definido nuestro servidor haciendo que solo incluya las <code>tool</code>s, los <code>resource</code>s y los <code>prompt</code>s con la etiqueta <code>public</code>.</p>
      <div class='highlight'><pre><code>@mcp.prompt(
          name="generate_issues_prompt",
          description="Generates a structured prompt for asking about GitHub repository issues. Use this when users want to formulate questions about repository issues, or need help creating prompts for issue analysis.",
          tags={"public"}
      )</code></pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">httpx</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span><span class="p">,</span> <span class="n">Context</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">github</span><span class="w"> </span><span class="kn">import</span> <span class="n">GITHUB_TOKEN</span><span class="p">,</span> <span class="n">create_github_headers</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">datetime</span>',
      '<span class="w"> </span>',
      '<span class="n">USER_ID</span> <span class="o">=</span> <span class="mi">1234567890</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create FastMCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;This server provides tools, resources and prompts to interact with the GitHub API.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">include_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;first_issue&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">sub_mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;SubMCP&quot;</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_args</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;user_id&quot;</span><span class="p">],</span>   <span class="c1"># user_id has to be injected by server, not provided by LLM</span>',
      '<span class="p">)</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">ctx</span><span class="p">:</span> <span class="n">Context</span><span class="p">,</span> <span class="n">user_id</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">USER_ID</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="sd">        ctx: The context of the request</span>',
      '<span class="sd">        user_id: The user ID (automatically injected by the server)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 10 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=10&quot;</span>',
      '<span class="w">    </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;requested_by_user_id&quot;</span><span class="p">:</span> <span class="n">user_id</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;development&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_more_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 100 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=100&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;first_issue&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">first_repository_issue</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Gets the first issue ever created in a GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list containing information about the first issue created</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Get the first issue by sorting by creation date in ascending order</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=all&amp;amp;sort=created&amp;amp;direction=asc&amp;amp;per_page=1&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching first issue from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">first_issue</span> <span class="o">=</span> <span class="n">issues_data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Create a detailed summary of the first issue</span>',
      '<span class="w">            </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">issue_info</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;state&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;state&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;created_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;updated_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;updated_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;body&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)[:</span><span class="mi">500</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">500</span> <span class="k">else</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found first issue: #</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> created on </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;created_at&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the very first issue created in this repository&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;first_issue&quot;</span><span class="p">:</span> <span class="n">issue_info</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s2">&quot;resource://server_info&quot;</span><span class="p">,</span> <span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">server_info</span><span class="p">(</span><span class="n">ctx</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns information about the server.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;info&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the MCP GitHub server development for MaximoFN blog post&quot;</span><span class="p">,</span>',
      '<span class="w">        </span><span class="s2">&quot;requested_id&quot;</span><span class="p">:</span> <span class="n">ctx</span><span class="o">.</span><span class="n">request_id</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Use: ¿Puedes leer el resource github://repo/facebook/react para obtener información detallada del repositorio?</span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s2">&quot;github://repo/</span><span class="si">{owner}</span><span class="s2">/</span><span class="si">{repo_name}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">repository_info</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">ctx</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">dict</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns detailed information about a GitHub repository.</span>',
      '<span class="sd">    </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="sd">        ctx: The context of the request</span>',
      '<span class="sd">    </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        dict: Repository information including name, description, stats, etc.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">    </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching repository information from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">repo_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="c1"># Extract relevant repository information</span>',
      '<span class="w">            </span><span class="n">repo_info</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;full_name&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;full_name&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;description&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;owner&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                    </span><span class="s2">&quot;login&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;owner&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;owner&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;type&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="p">},</span>',
      '<span class="w">                </span><span class="s2">&quot;html_url&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;clone_url&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;clone_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;ssh_url&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;ssh_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;language&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;language&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;size&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;size&quot;</span><span class="p">),</span>  <span class="c1"># Size in KB</span>',
      '<span class="w">                </span><span class="s2">&quot;stargazers_count&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;stargazers_count&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;watchers_count&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;watchers_count&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;forks_count&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;forks_count&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;open_issues_count&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;open_issues_count&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;default_branch&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;default_branch&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;created_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;updated_at&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;updated_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;pushed_at&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;pushed_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;is_private&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;private&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;is_fork&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;fork&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;is_archived&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;archived&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;has_issues&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;has_issues&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;has_projects&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;has_projects&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;has_wiki&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;has_wiki&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;license&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;license&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;license&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="kc">None</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;topics&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;topics&quot;</span><span class="p">,</span> <span class="p">[])</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Successfully retrieved information for repository </span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="n">repo_info</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;Repository </span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2"> not found or is private.&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w">            </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">    </span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">prompt</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;generate_issues_prompt&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">description</span><span class="o">=</span><span class="s2">&quot;Generates a structured prompt for asking about GitHub repository issues. Use this when users want to formulate questions about repository issues, or need help creating prompts for issue analysis.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">generate_issues_prompt</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Generates a structured prompt for asking about GitHub repository issues.</span>',
      '<span class="sd">    </span>',
      '<span class="sd">    This prompt template helps users formulate clear questions about repository issues</span>',
      '<span class="sd">    and can be used as a starting point for issue analysis or research.</span>',
      '<span class="sd">    </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: Repository owner (e.g., &#39;huggingface&#39;, &#39;microsoft&#39;)</span>',
      '<span class="sd">        repo_name: Repository name (e.g., &#39;transformers&#39;, &#39;vscode&#39;)</span>',
      '<span class="sd">    </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        A formatted prompt asking about repository issues</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;&quot;&quot;Please provide information about the open issues in the repository </span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">. </span>',
      '<span class="w"> </span>',
      '<span class="s2">I&#39;m interested in:</span>',
      '<span class="s2">- Current open issues and their status</span>',
      '<span class="s2">- Recent issue trends and patterns</span>',
      '<span class="s2">- Common issue categories or topics</span>',
      '<span class="s2">- Any critical or high-priority issues</span>',
      '<span class="w"> </span>',
      '<span class="s2">Repository: </span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;&quot;&quot;</span>',
      '<span class="w"> </span>',
      '<span class="nd">@sub_mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">hello_world</span><span class="p">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns a simple greeting.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="s2">&quot;Hello, world!&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">mcp</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">&quot;sub_mcp&quot;</span><span class="p">,</span> <span class="n">sub_mcp</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Starting FastMCP GitHub server...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;DEBUG: Server name: </span><span class="si">{</span><span class="n">mcp</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">transport</span><span class="o">=</span><span class="s2">&quot;stdio&quot;</span>',
      '<span class="w">    </span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github_server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Cliente MCP">Cliente MCP<a class="anchor-link" href="#Cliente MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 35" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Modificamos nuestro cliente para poder usar el <code>prompt</code> que hemos creado en nuestro servidor.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">client_MCP</span><span class="o">/</span><span class="n">client</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">sys</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">asyncio</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">contextlib</span><span class="w"> </span><span class="kn">import</span> <span class="n">AsyncExitStack</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">anthropic</span><span class="w"> </span><span class="kn">import</span> <span class="n">Anthropic</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">dotenv</span><span class="w"> </span><span class="kn">import</span> <span class="n">load_dotenv</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">Client</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Load environment variables from .env file</span>',
      '<span class="n">load_dotenv</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">class</span><span class="w"> </span><span class="nc">FastMCPClient</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    FastMCP client that integrates with Claude to process user queries</span>',
      '<span class="sd">    and use tools and resources exposed by a FastMCP server.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Initialize the FastMCP client with Anthropic and resource management.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">exit_stack</span> <span class="o">=</span> <span class="n">AsyncExitStack</span><span class="p">()</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span> <span class="o">=</span> <span class="n">Anthropic</span><span class="p">()</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">connect_to_server</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">server_script_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Connect to the specified FastMCP server.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            server_script_path: Path to the server script (Python)</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔗 Connecting to FastMCP server: </span><span class="si">{</span><span class="n">server_script_path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Determine the server type based on the extension</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="ow">not</span> <span class="n">server_script_path</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39;.py&#39;</span><span class="p">):</span>',
      '<span class="w">            </span><span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Unsupported server type. Use .py files. Received: </span><span class="si">{</span><span class="n">server_script_path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Create FastMCP client </span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="n">Client</span><span class="p">(</span><span class="n">server_script_path</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># Note: FastMCP Client automatically infers transport from .py files</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;✅ Client created successfully&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_available_tools</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List available tools in the FastMCP server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Get list of tools from the server using FastMCP context</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">tools</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_tools</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">tools</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🛠️  Available tools (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">tools</span><span class="p">)</span><span class="si">}</span><span class="s2">):&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">                    </span><span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📋 </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">tool</span><span class="o">.</span><span class="n">description</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Description: </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="c1"># Show parameters if available</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool</span><span class="p">,</span> <span class="s1">&#39;inputSchema&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="s1">&#39;properties&#39;</span> <span class="ow">in</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">params</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">[</span><span class="s1">&#39;properties&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>',
      '<span class="w">                                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Parameters: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No tools found in the server&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing tools: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_available_resources</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List available resources in the FastMCP server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Get list of resources from the server using FastMCP context</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">resources</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_resources</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">resources</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">📚 Available resources (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">resources</span><span class="p">)</span><span class="si">}</span><span class="s2">):&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">                    </span><span class="k">for</span> <span class="n">resource</span> <span class="ow">in</span> <span class="n">resources</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📄 </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">uri</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">name</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Name: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">description</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Description: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">mimeType</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   MIME Type: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">mimeType</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No resources found in the server&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing resources: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_available_prompts</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List available prompts in the FastMCP server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Get list of prompts from the server using FastMCP context</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">prompts</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_prompts</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">prompts</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">💭 Available prompts (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">prompts</span><span class="p">)</span><span class="si">}</span><span class="s2">):&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">                    </span><span class="k">for</span> <span class="n">prompt</span> <span class="ow">in</span> <span class="n">prompts</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🎯 </span><span class="si">{</span><span class="n">prompt</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">prompt</span><span class="o">.</span><span class="n">description</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Description: </span><span class="si">{</span><span class="n">prompt</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="c1"># Show parameters if available</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">prompt</span><span class="p">,</span> <span class="s1">&#39;arguments&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">prompt</span><span class="o">.</span><span class="n">arguments</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="n">params</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">                            </span><span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">prompt</span><span class="o">.</span><span class="n">arguments</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">param_info</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">arg</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">arg</span><span class="o">.</span><span class="n">description</span><span class="w"> </span><span class="ow">or</span><span class="w"> </span><span class="s1">&#39;No description&#39;</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">arg</span><span class="o">.</span><span class="n">required</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">param_info</span> <span class="o">+=</span> <span class="s2">&quot; (required)&quot;</span>',
      '<span class="w">                                </span><span class="n">params</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">param_info</span><span class="p">)</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Parameters: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No prompts found in the server&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing prompts: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">read_resource</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">resource_uri</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Read a specific resource from the server.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            resource_uri: URI of the resource to read</span>',
      '<span class="sd">            </span>',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            str: Resource content</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">read_resource</span><span class="p">(</span><span class="n">resource_uri</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="n">result</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error reading resource </span><span class="si">{</span><span class="n">resource_uri</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">None</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">get_prompt</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">prompt_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">prompt_args</span><span class="p">:</span> <span class="nb">dict</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Get/call a specific prompt from the server.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            prompt_name: Name of the prompt to call</span>',
      '<span class="sd">            prompt_args: Arguments for the prompt (if any)</span>',
      '<span class="sd">            </span>',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            str: Generated prompt content</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">prompt_args</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get_prompt</span><span class="p">(</span><span class="n">prompt_name</span><span class="p">,</span> <span class="n">prompt_args</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get_prompt</span><span class="p">(</span><span class="n">prompt_name</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Extract the prompt text from the response</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="s1">&#39;messages&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">result</span><span class="o">.</span><span class="n">messages</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="c1"># FastMCP returns prompts as message objects</span>',
      '<span class="w">                    </span><span class="k">return</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">msg</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">text</span> <span class="k">for</span> <span class="n">msg</span> <span class="ow">in</span> <span class="n">result</span><span class="o">.</span><span class="n">messages</span> <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">content</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">)])</span>',
      '<span class="w">                </span><span class="k">elif</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">):</span>',
      '<span class="w">                    </span><span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error getting prompt </span><span class="si">{</span><span class="n">prompt_name</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">None</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">process_query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Process a user query, interacting with Claude and FastMCP tools and resources.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            query: User query</span>',
      '<span class="sd">            </span>',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            str: Final processed response</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Use FastMCP context for all operations</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Get available tools, resources, and prompts</span>',
      '<span class="w">                </span><span class="n">tools_list</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_tools</span><span class="p">()</span>',
      '<span class="w">                </span><span class="n">resources_list</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_resources</span><span class="p">()</span>',
      '<span class="w">                </span><span class="n">prompts_list</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_prompts</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Prepare tools for Claude in correct format</span>',
      '<span class="w">                </span><span class="n">claude_tools</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools_list</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">claude_tool</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">description</span> <span class="ow">or</span> <span class="sa">f</span><span class="s2">&quot;Tool </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;input_schema&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span> <span class="ow">or</span> <span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span> <span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{}}</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                    </span><span class="n">claude_tools</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">claude_tool</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Add a special tool for reading resources (including template resources)</span>',
      '<span class="w">                </span><span class="n">resource_description</span> <span class="o">=</span> <span class="s2">&quot;Read a resource from the MCP server. &quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">resources_list</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="c1"># Convert URIs to strings to avoid AnyUrl object issues</span>',
      '<span class="w">                    </span><span class="n">resource_uris</span> <span class="o">=</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">uri</span><span class="p">)</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">resources_list</span><span class="p">]</span>',
      '<span class="w">                    </span><span class="n">resource_description</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot;Available static resources: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">resource_uris</span><span class="p">)</span><span class="si">}</span><span class="s2">. &quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">resource_description</span> <span class="o">+=</span> <span class="s2">&quot;Also supports template resources like github://repo/owner/repo_name for GitHub repository information.&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">claude_tools</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;read_mcp_resource&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">resource_description</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;input_schema&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                            </span><span class="s2">&quot;resource_uri&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;URI of the resource to read. Can be static (like resource://server_info) or template-based (like github://repo/facebook/react)&quot;</span>',
      '<span class="w">                            </span><span class="p">}</span>',
      '<span class="w">                        </span><span class="p">},</span>',
      '<span class="w">                        </span><span class="s2">&quot;required&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;resource_uri&quot;</span><span class="p">]</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Add a special tool for using prompts</span>',
      '<span class="w">                </span><span class="n">prompt_description</span> <span class="o">=</span> <span class="s2">&quot;Generate specialized prompts from the MCP server. Use this when users want to:</span><span class="se">\n</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="s2">&quot;- Create well-structured questions about repositories</span><span class="se">\n</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="s2">&quot;- Get help formulating prompts for specific tasks</span><span class="se">\n</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="s2">&quot;- Generate template questions for analysis</span><span class="se">\n</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">prompts_list</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">prompt_names</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span><span class="o">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">prompts_list</span><span class="p">]</span>',
      '<span class="w">                    </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Available prompts: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">prompt_names</span><span class="p">)</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>',
      '<span class="w">                    </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="s2">&quot;- generate_issues_prompt: Creates structured questions about GitHub repository issues&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">IMPORTANT: Use prompts when users explicitly ask for help creating questions or prompts, or when they want to formulate better questions about repositories.&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">claude_tools</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;use_mcp_prompt&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">prompt_description</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;input_schema&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                            </span><span class="s2">&quot;prompt_name&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Name of the prompt to use. Available: &#39;generate_issues_prompt&#39;&quot;</span>',
      '<span class="w">                            </span><span class="p">},</span>',
      '<span class="w">                            </span><span class="s2">&quot;prompt_args&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Arguments for the prompt. For generate_issues_prompt: {opening_brace}&#39;owner&#39;: &#39;repo-owner&#39;, &#39;repo_name&#39;: &#39;repo-name&#39;{closing_brace}&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                    </span><span class="s2">&quot;owner&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Repository owner (e.g., &#39;huggingface&#39;, &#39;microsoft&#39;)&quot;</span>',
      '<span class="w">                                    </span><span class="p">},</span>',
      '<span class="w">                                    </span><span class="s2">&quot;repo_name&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Repository name (e.g., &#39;transformers&#39;, &#39;vscode&#39;)&quot;</span>',
      '<span class="w">                                    </span><span class="p">}</span>',
      '<span class="w">                                </span><span class="p">}</span>',
      '<span class="w">                            </span><span class="p">}</span>',
      '<span class="w">                        </span><span class="p">},</span>',
      '<span class="w">                        </span><span class="s2">&quot;required&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;prompt_name&quot;</span><span class="p">]</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Create initial message for Claude</span>',
      '<span class="w">                </span><span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>',
      '<span class="w">                    </span><span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="n">query</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                </span><span class="p">]</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># First call to Claude</span>',
      '<span class="w">                </span><span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">                    </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;claude-3-5-sonnet-20241022&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">6000</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">tools</span><span class="o">=</span><span class="n">claude_tools</span> <span class="k">if</span> <span class="n">claude_tools</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">                </span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Process Claude&#39;s response</span>',
      '<span class="w">                </span><span class="n">response_text</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">content_block</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">if</span> <span class="n">content_block</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;text&quot;</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="n">response_text</span> <span class="o">+=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                        </span>',
      '<span class="w">                    </span><span class="k">elif</span> <span class="n">content_block</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;tool_use&quot;</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="c1"># Claude wants to use a tool</span>',
      '<span class="w">                        </span><span class="n">tool_name</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">name</span>',
      '<span class="w">                        </span><span class="n">tool_args</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">input</span>',
      '<span class="w">                        </span><span class="n">tool_call_id</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">id</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔧 Claude wants to use: </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📝 Arguments: </span><span class="si">{</span><span class="n">tool_args</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="n">tool_name</span> <span class="o">==</span> <span class="s2">&quot;read_mcp_resource&quot;</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="c1"># Handle resource reading</span>',
      '<span class="w">                                </span><span class="n">resource_uri</span> <span class="o">=</span> <span class="n">tool_args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;resource_uri&quot;</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">resource_uri</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">read_resource</span><span class="p">(</span><span class="n">resource_uri</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📖 Resource read successfully: </span><span class="si">{</span><span class="n">resource_uri</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                                    </span>',
      '<span class="w">                                    </span><span class="c1"># Better handling of resource result</span>',
      '<span class="w">                                    </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool_result</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">):</span>',
      '<span class="w">                                        </span><span class="c1"># If it&#39;s a resource response object, extract content</span>',
      '<span class="w">                                        </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">):</span>',
      '<span class="w">                                            </span><span class="n">result_content</span> <span class="o">=</span> <span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                                        </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                            </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                        </span><span class="c1"># If it&#39;s already a string or simple object</span>',
      '<span class="w">                                        </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="s2">&quot;Error: No resource URI provided&quot;</span>',
      '<span class="w">                                    </span><span class="n">result_content</span> <span class="o">=</span> <span class="n">tool_result</span>',
      '<span class="w">                                    </span>',
      '<span class="w">                            </span><span class="k">elif</span> <span class="n">tool_name</span> <span class="o">==</span> <span class="s2">&quot;use_mcp_prompt&quot;</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="c1"># Handle prompt usage</span>',
      '<span class="w">                                </span><span class="n">prompt_name</span> <span class="o">=</span> <span class="n">tool_args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;prompt_name&quot;</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="n">prompt_args</span> <span class="o">=</span> <span class="n">tool_args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;prompt_args&quot;</span><span class="p">,</span> <span class="p">{})</span>',
      '<span class="w">                                </span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">prompt_name</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_prompt</span><span class="p">(</span><span class="n">prompt_name</span><span class="p">,</span> <span class="n">prompt_args</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;💭 Prompt &#39;</span><span class="si">{</span><span class="n">prompt_name</span><span class="si">}</span><span class="s2">&#39; generated successfully&quot;</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="p">)</span> <span class="k">if</span> <span class="n">tool_result</span> <span class="k">else</span> <span class="s2">&quot;Error generating prompt&quot;</span>',
      '<span class="w">                                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="s2">&quot;Error: No prompt name provided&quot;</span>',
      '<span class="w">                                    </span><span class="n">result_content</span> <span class="o">=</span> <span class="n">tool_result</span>',
      '<span class="w">                                    </span>',
      '<span class="w">                            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="c1"># Execute regular tool on the FastMCP server</span>',
      '<span class="w">                                </span><span class="n">tool_result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">call_tool</span><span class="p">(</span><span class="n">tool_name</span><span class="p">,</span> <span class="n">tool_args</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;✅ Tool executed successfully&quot;</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Add tool result to the conversation</span>',
      '<span class="w">                            </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span>',
      '<span class="w">                            </span><span class="p">})</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Format result for Claude</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="n">tool_result</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                    </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                                    </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tool_result&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;tool_use_id&quot;</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;Tool result: </span><span class="si">{</span><span class="n">result_content</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                                    </span><span class="p">}]</span>',
      '<span class="w">                                </span><span class="p">})</span>',
      '<span class="w">                            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                    </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                                    </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tool_result&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;tool_use_id&quot;</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Tool executed without response content&quot;</span>',
      '<span class="w">                                    </span><span class="p">}]</span>',
      '<span class="w">                                </span><span class="p">})</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Second call to Claude with the tool result</span>',
      '<span class="w">                            </span><span class="n">final_response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">                                </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;claude-3-5-sonnet-20241022&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">6000</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">tools</span><span class="o">=</span><span class="n">claude_tools</span> <span class="k">if</span> <span class="n">claude_tools</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">                            </span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Extract text from the final response</span>',
      '<span class="w">                            </span><span class="k">for</span> <span class="n">final_content</span> <span class="ow">in</span> <span class="n">final_response</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">final_content</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;text&quot;</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">response_text</span> <span class="o">+=</span> <span class="n">final_content</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                                    </span>',
      '<span class="w">                        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="n">error_msg</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;❌ Error executing </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="n">error_msg</span><span class="p">)</span>',
      '<span class="w">                            </span><span class="n">response_text</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="si">{</span><span class="n">error_msg</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">return</span> <span class="n">response_text</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_msg</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;❌ Error processing query: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="n">error_msg</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="n">error_msg</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">chat_loop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Main chat loop with user interaction.</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤖 FastMCP client started. Write &#39;quit&#39;, &#39;q&#39;, &#39;exit&#39;, &#39;salir&#39; to exit.&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;💬 You can ask questions about GitHub repositories!&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📚 The client can use tools, resources, and prompts from the FastMCP server&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;💭 PROMPT Examples:&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;   • &#39;Generate a prompt for asking about issues in facebook/react&#39;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;   • &#39;Help me create a good question about microsoft/vscode issues&#39;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;   • &#39;I need a structured prompt for analyzing tensorflow/tensorflow&#39;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🔧 DIRECT Examples:&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;   • &#39;Show me the issues in huggingface/transformers&#39;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;   • &#39;Get repository info for github://repo/google/chrome&#39;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;-&quot;</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Request user input</span>',
      '<span class="w">                </span><span class="n">user_input</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">👤 You: &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">user_input</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;quit&#39;</span><span class="p">,</span> <span class="s1">&#39;q&#39;</span><span class="p">,</span> <span class="s1">&#39;exit&#39;</span><span class="p">,</span> <span class="s1">&#39;salir&#39;</span><span class="p">]:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;👋 Bye!&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="k">break</span>',
      '<span class="w">                    </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="ow">not</span> <span class="n">user_input</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">continue</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤔 Claude is thinking...&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Process query</span>',
      '<span class="w">                </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">process_query</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Show response</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤖 Claude: </span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">👋 Disconnecting...&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">break</span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">❌ Error in chat: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">continue</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">cleanup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Clean up resources and close connections.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🧹 Cleaning up resources...&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># FastMCP Client cleanup is handled automatically by context manager</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">exit_stack</span><span class="o">.</span><span class="n">aclose</span><span class="p">()</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;✅ Resources released&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">main</span><span class="p">():</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Main function that initializes and runs the FastMCP client.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Verify command line arguments</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;❌ Usage: python client.py &amp;lt;path_to_fastmcp_server&amp;gt;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Example: python client.py ../MCP_github/github_server.py&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="n">server_script_path</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Create and run client</span>',
      '<span class="w">    </span><span class="n">client</span> <span class="o">=</span> <span class="n">FastMCPClient</span><span class="p">()</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Connect to the server</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">connect_to_server</span><span class="p">(</span><span class="n">server_script_path</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># List available tools, resources, and prompts after connection</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_available_tools</span><span class="p">()</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_available_resources</span><span class="p">()</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_available_prompts</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Start chat loop</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">chat_loop</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Fatal error: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">finally</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Ensure resources are cleaned up</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">cleanup</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="c1"># Entry point of the script</span>',
      '<span class="w">    </span><span class="n">asyncio</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting client_MCP/client.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Hemos creado las funciones <code>list_available_prompts</code> y <code>get_prompt</code> para listar los <code>prompt</code>s disponibles y obtener un <code>prompt</code> específico.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3>Prueba del <code>prompt</code></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ejecutamos el cliente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">client_MCP</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">python</span> <span class="n">client</span><span class="o">.</span><span class="n">py</span> <span class="o">../</span><span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🔗 Connecting to FastMCP server: ../gitHub_MCP_server/github_server.py',
          '✅ Client created successfully',
          '🛠️  Available tools (2):',
          '==================================================',
          '📋 sub_mcp_hello_world',
          '&#x20;&#x20;&#x20;Description: Returns a simple greeting.',
          '&#x20;&#x20;&#x20;Parameters:',
          '📋 list_repository_issues',
          '&#x20;&#x20;&#x20;Description: Lists open issues for a given GitHub repository.',
          'Args:',
          '&#x20;&#x20;&#x20;&#x20;owner: The owner of the repository (e.g., &#x27;modelcontextprotocol&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;repo_name: The name of the repository (e.g., &#x27;python-sdk&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;ctx: The context of the request',
          '&#x20;&#x20;&#x20;&#x20;user_id: The user ID (automatically injected by the server)',
          'Returns:',
          '&#x20;&#x20;&#x20;&#x20;list[dict]: A list of dictionaries, each containing information about an issue',
          '&#x20;&#x20;&#x20;Parameters: owner, repo_name',
          '📚 Available resources (1):',
          '==================================================',
          '📄 resource://server_info',
          '&#x20;&#x20;&#x20;Name: server_info',
          '&#x20;&#x20;&#x20;Description: Returns information about the server.',
          '&#x20;&#x20;&#x20;MIME Type: text/plain',
          '💭 Available prompts (1):',
          '==================================================',
          '🎯 generate_issues_prompt',
          '&#x20;&#x20;&#x20;Description: Generates a structured prompt for asking about GitHub repository issues. Use this when users want to formulate questions about repository issues, or need help creating prompts for issue analysis.',
          '&#x20;&#x20;&#x20;Parameters: owner: No description (required), repo_name: No description (required)',
          '🤖 FastMCP client started. Write &#x27;quit&#x27;, &#x27;q&#x27;, &#x27;exit&#x27;, &#x27;salir&#x27; to exit.',
          '💬 You can ask questions about GitHub repositories!',
          '📚 The client can use tools, resources, and prompts from the FastMCP server',
          '💭 PROMPT Examples:',
          '&#x20;&#x20;&#x20;• &#x27;Generate a prompt for asking about issues in facebook/react&#x27;',
          '&#x20;&#x20;&#x20;• &#x27;Help me create a good question about microsoft/vscode issues&#x27;',
          '&#x20;&#x20;&#x20;• &#x27;I need a structured prompt for analyzing tensorflow/tensorflow&#x27;',
          '🔧 DIRECT Examples:',
          '&#x20;&#x20;&#x20;• &#x27;Show me the issues in huggingface/transformers&#x27;',
          '&#x20;&#x20;&#x20;• &#x27;Get repository info for github://repo/google/chrome&#x27;',
          '------------------------------------------------------------',
          '👤 You: Can you create a prompt to view issues from the huggingface transformers repository?',
          '🤔 Claude is thinking...',
          '🔧 Claude wants to use: use_mcp_prompt',
          '📝 Arguments: &#x7B;&#x27;prompt_name&#x27;: &#x27;generate_issues_prompt&#x27;, &#x27;prompt_args&#x27;: &#x7B;&#x27;owner&#x27;: &#x27;huggingface&#x27;, &#x27;repo_name&#x27;: &#x27;transformers&#x27;&#x7D;&#x7D;',
          '💭 Prompt &#x27;generate_issues_prompt&#x27; generated successfully',
          '🤖 Claude: I&#x27;ll help you generate a structured prompt for viewing issues from the Hugging Face Transformers repository using the `use_mcp_prompt` function with the `generate_issues_prompt` prompt type. I have all the required information from your request:',
          '- owner: `huggingface&#x27;',
          '- repo_name: &#x27;transformers&#x27;',
          'I&#x27;ve generated a structured prompt that you can use to analyze issues in the Hugging Face Transformers repository. This prompt is designed to help you get comprehensive information about the repository&#x27;s issues, including their current status, trends, categories, and priorities.',
          'Would you like me to actually fetch the current issues from the repository using this prompt? If so, I can use the `list_repository_issues` function to get that information for you.',
          '👤 You: q',
          '👋 Bye!',
          '🧹 Cleaning up resources...',
          '✅ Resources released',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que nos da una lista de los <code>prompt</code>s disponibles.</p>
      <div class='highlight'><pre><code>💭 Available prompts (1):
      ==================================================
      🎯 generate_issues_prompt
         Description: Generates a structured prompt for asking about GitHub repository issues. Use this when users want to formulate questions about repository issues, or need help creating prompts for issue analysis.
         Parameters: owner: No description (required), repo_name: No description (required)
      
      
      🤖 FastMCP client started. Write &#39;quit&#39;, &#39;q&#39;, &#39;exit&#39;, &#39;salir&#39; to exit.
      💬 You can ask questions about GitHub repositories!
      📚 The client can use tools, resources, and prompts from the FastMCP server
      
      💭 PROMPT Examples:
         • &#39;Generate a prompt for asking about issues in facebook/react&#39;
         • &#39;Help me create a good question about microsoft/vscode issues&#39;
         • &#39;I need a structured prompt for analyzing tensorflow/tensorflow&#39;
      
      🔧 DIRECT Examples:
         • &#39;Show me the issues in huggingface/transformers&#39;
         • &#39;Get repository info for github://repo/google/chrome&#39;</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Y que cuando le pedimos un <code>prompt</code> nos da el <code>prompt</code> generado.</p>
      <div class='highlight'><pre><code>👤 You: Can you create a prompt to view issues from the huggingface transformers repository?
      
      🤔 Claude is thinking...
      🔧 Claude wants to use: use_mcp_prompt
      📝 Arguments: {opening_brace}&#39;prompt_name&#39;: &#39;generate_issues_prompt&#39;, &#39;prompt_args&#39;: {opening_brace}&#39;owner&#39;: &#39;huggingface&#39;, &#39;repo_name&#39;: &#39;transformers&#39;{closing_brace}}
      💭 Prompt &#39;generate_issues_prompt&#39; generated successfully
      
      🤖 Claude: I&#39;ll help you generate a structured prompt for viewing issues from the Hugging Face Transformers repository using the `use_mcp_prompt` function with the `generate_issues_prompt` prompt type. I have all the required information from your request:
      - owner: "huggingface"
      - repo_name: "transformers"I&#39;ve generated a structured prompt that you can use to analyze issues in the Hugging Face Transformers repository. This prompt is designed to help you get comprehensive information about the repository&#39;s issues, including their current status, trends, categories, and priorities.
      
      Would you like me to actually fetch the current issues from the repository using this prompt? If so, I can use the `list_repository_issues` function to get that information for you.</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Vuelta a HTTP">Vuelta a HTTP<a class="anchor-link" href="#Vuelta a HTTP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 36" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Volvemos a configurar <code>http</code> como capa de transporte para las dos últimas cosas que vamos a ver</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Servidor MCP">Servidor MCP<a class="anchor-link" href="#Servidor MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 37" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">httpx</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span><span class="p">,</span> <span class="n">Context</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">github</span><span class="w"> </span><span class="kn">import</span> <span class="n">GITHUB_TOKEN</span><span class="p">,</span> <span class="n">create_github_headers</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">datetime</span>',
      '<span class="w"> </span>',
      '<span class="n">USER_ID</span> <span class="o">=</span> <span class="mi">1234567890</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create FastMCP server</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;This server provides tools, resources and prompts to interact with the GitHub API.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">include_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;first_issue&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">sub_mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;SubMCP&quot;</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_args</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;user_id&quot;</span><span class="p">],</span>   <span class="c1"># user_id has to be injected by server, not provided by LLM</span>',
      '<span class="p">)</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">ctx</span><span class="p">:</span> <span class="n">Context</span><span class="p">,</span> <span class="n">user_id</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">USER_ID</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="sd">        ctx: The context of the request</span>',
      '<span class="sd">        user_id: The user ID (automatically injected by the server)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 10 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=10&quot;</span>',
      '<span class="w">    </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;requested_by_user_id&quot;</span><span class="p">:</span> <span class="n">user_id</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;development&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_more_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 100 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=100&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;first_issue&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">first_repository_issue</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Gets the first issue ever created in a GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list containing information about the first issue created</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Get the first issue by sorting by creation date in ascending order</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=all&amp;amp;sort=created&amp;amp;direction=asc&amp;amp;per_page=1&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching first issue from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">first_issue</span> <span class="o">=</span> <span class="n">issues_data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="c1"># Create a detailed summary of the first issue</span>',
      '<span class="w">            </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issue_info</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;state&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;state&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;created_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;updated_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;updated_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;body&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)[:</span><span class="mi">500</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">500</span> <span class="k">else</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found first issue: #</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> created on </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;created_at&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the very first issue created in this repository&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;first_issue&quot;</span><span class="p">:</span> <span class="n">issue_info</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s2">&quot;resource://server_info&quot;</span><span class="p">,</span> <span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">server_info</span><span class="p">(</span><span class="n">ctx</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns information about the server.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;info&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the MCP GitHub server development for MaximoFN blog post&quot;</span><span class="p">,</span>',
      '<span class="w">        </span><span class="s2">&quot;requested_id&quot;</span><span class="p">:</span> <span class="n">ctx</span><span class="o">.</span><span class="n">request_id</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Use: ¿Puedes leer el resource github://repo/facebook/react para obtener información detallada del repositorio?</span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s2">&quot;github://repo/</span><span class="si">{owner}</span><span class="s2">/</span><span class="si">{repo_name}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">repository_info</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">ctx</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">dict</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns detailed information about a GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="sd">        ctx: The context of the request</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        dict: Repository information including name, description, stats, etc.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">    </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching repository information from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">repo_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="c1"># Extract relevant repository information</span>',
      '<span class="w">            </span><span class="n">repo_info</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;full_name&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;full_name&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;description&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;owner&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                    </span><span class="s2">&quot;login&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;owner&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;owner&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;type&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="p">},</span>',
      '<span class="w">                </span><span class="s2">&quot;html_url&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;clone_url&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;clone_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;ssh_url&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;ssh_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;language&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;language&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;size&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;size&quot;</span><span class="p">),</span>  <span class="c1"># Size in KB</span>',
      '<span class="w">                </span><span class="s2">&quot;stargazers_count&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;stargazers_count&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;watchers_count&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;watchers_count&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;forks_count&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;forks_count&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;open_issues_count&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;open_issues_count&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;default_branch&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;default_branch&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;created_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;updated_at&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;updated_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;pushed_at&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;pushed_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;is_private&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;private&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;is_fork&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;fork&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;is_archived&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;archived&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;has_issues&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;has_issues&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;has_projects&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;has_projects&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;has_wiki&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;has_wiki&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;license&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;license&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;license&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="kc">None</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;topics&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;topics&quot;</span><span class="p">,</span> <span class="p">[])</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Successfully retrieved information for repository </span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="n">repo_info</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;Repository </span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2"> not found or is private.&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">prompt</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;generate_issues_prompt&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">description</span><span class="o">=</span><span class="s2">&quot;Generates a structured prompt for asking about GitHub repository issues. Use this when users want to formulate questions about repository issues, or need help creating prompts for issue analysis.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">generate_issues_prompt</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Generates a structured prompt for asking about GitHub repository issues.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    This prompt template helps users formulate clear questions about repository issues</span>',
      '<span class="sd">    and can be used as a starting point for issue analysis or research.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: Repository owner (e.g., &#39;huggingface&#39;, &#39;microsoft&#39;)</span>',
      '<span class="sd">        repo_name: Repository name (e.g., &#39;transformers&#39;, &#39;vscode&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        A formatted prompt asking about repository issues</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;&quot;&quot;Please provide information about the open issues in the repository </span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">. </span>',
      '<span class="w"> </span>',
      '<span class="s2">I&#39;m interested in:</span>',
      '<span class="s2">- Current open issues and their status</span>',
      '<span class="s2">- Recent issue trends and patterns</span>',
      '<span class="s2">- Common issue categories or topics</span>',
      '<span class="s2">- Any critical or high-priority issues</span>',
      '<span class="w"> </span>',
      '<span class="s2">Repository: </span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;&quot;&quot;</span>',
      '<span class="w"> </span>',
      '<span class="nd">@sub_mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">hello_world</span><span class="p">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns a simple greeting.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="s2">&quot;Hello, world!&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">mcp</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">&quot;sub_mcp&quot;</span><span class="p">,</span> <span class="n">sub_mcp</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Starting FastMCP GitHub server...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;DEBUG: Server name: </span><span class="si">{</span><span class="n">mcp</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server, run with uv run client.py http://localhost:8000/mcp</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">transport</span><span class="o">=</span><span class="s2">&quot;streamable-http&quot;</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">host</span><span class="o">=</span><span class="s2">&quot;0.0.0.0&quot;</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">port</span><span class="o">=</span><span class="mi">8000</span><span class="p">,</span>',
      '<span class="w">    </span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github_server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Cliente MCP">Cliente MCP<a class="anchor-link" href="#Cliente MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 38" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">client_MCP</span><span class="o">/</span><span class="n">client</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">sys</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">asyncio</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">contextlib</span><span class="w"> </span><span class="kn">import</span> <span class="n">AsyncExitStack</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">anthropic</span><span class="w"> </span><span class="kn">import</span> <span class="n">Anthropic</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">dotenv</span><span class="w"> </span><span class="kn">import</span> <span class="n">load_dotenv</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">Client</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Load environment variables from .env file</span>',
      '<span class="n">load_dotenv</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">class</span><span class="w"> </span><span class="nc">FastMCPClient</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    FastMCP client that integrates with Claude to process user queries</span>',
      '<span class="sd">    and use tools and resources exposed by a FastMCP server.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Initialize the FastMCP client with Anthropic and resource management.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">exit_stack</span> <span class="o">=</span> <span class="n">AsyncExitStack</span><span class="p">()</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span> <span class="o">=</span> <span class="n">Anthropic</span><span class="p">()</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">connect_to_server</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">server_url</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Connect to the specified FastMCP server via HTTP.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            server_url: URL of the HTTP server (e.g., &quot;http://localhost:8000/mcp&quot;)</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔗 Connecting to FastMCP HTTP server: </span><span class="si">{</span><span class="n">server_url</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Create FastMCP client for HTTP connection using SSE transport</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="n">Client</span><span class="p">(</span><span class="n">server_url</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># Note: FastMCP Client automatically detects HTTP URLs and uses SSE transport</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;✅ Client created successfully&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_available_tools</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List available tools in the FastMCP server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Get list of tools from the server using FastMCP context</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">tools</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_tools</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">tools</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🛠️  Available tools (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">tools</span><span class="p">)</span><span class="si">}</span><span class="s2">):&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">                    </span><span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📋 </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">tool</span><span class="o">.</span><span class="n">description</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Description: </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="c1"># Show parameters if available</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool</span><span class="p">,</span> <span class="s1">&#39;inputSchema&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="s1">&#39;properties&#39;</span> <span class="ow">in</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">params</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">[</span><span class="s1">&#39;properties&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>',
      '<span class="w">                                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Parameters: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No tools found in the server&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing tools: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_available_resources</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List available resources in the FastMCP server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Get list of resources from the server using FastMCP context</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">resources</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_resources</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">resources</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">📚 Available resources (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">resources</span><span class="p">)</span><span class="si">}</span><span class="s2">):&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">                    </span><span class="k">for</span> <span class="n">resource</span> <span class="ow">in</span> <span class="n">resources</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📄 </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">uri</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">name</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Name: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">description</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Description: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">mimeType</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   MIME Type: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">mimeType</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No resources found in the server&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing resources: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">read_resource</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">resource_uri</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Read a specific resource from the server.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            resource_uri: URI of the resource to read</span>',
      '<span class="sd">            </span>',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            str: Resource content</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">read_resource</span><span class="p">(</span><span class="n">resource_uri</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="n">result</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error reading resource </span><span class="si">{</span><span class="n">resource_uri</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">None</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">process_query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Process a user query, interacting with Claude and FastMCP tools and resources.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            query: User query</span>',
      '<span class="sd">            </span>',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            str: Final processed response</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Use FastMCP context for all operations</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Get available tools and resources</span>',
      '<span class="w">                </span><span class="n">tools_list</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_tools</span><span class="p">()</span>',
      '<span class="w">                </span><span class="n">resources_list</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_resources</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Prepare tools for Claude in correct format</span>',
      '<span class="w">                </span><span class="n">claude_tools</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools_list</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">claude_tool</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">description</span> <span class="ow">or</span> <span class="sa">f</span><span class="s2">&quot;Tool </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;input_schema&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span> <span class="ow">or</span> <span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span> <span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{}}</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                    </span><span class="n">claude_tools</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">claude_tool</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Add a special tool for reading resources (including template resources)</span>',
      '<span class="w">                </span><span class="n">resource_description</span> <span class="o">=</span> <span class="s2">&quot;Read a resource from the MCP server. &quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">resources_list</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="c1"># Convert URIs to strings to avoid AnyUrl object issues</span>',
      '<span class="w">                    </span><span class="n">resource_uris</span> <span class="o">=</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">uri</span><span class="p">)</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">resources_list</span><span class="p">]</span>',
      '<span class="w">                    </span><span class="n">resource_description</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot;Available static resources: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">resource_uris</span><span class="p">)</span><span class="si">}</span><span class="s2">. &quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">resource_description</span> <span class="o">+=</span> <span class="s2">&quot;Also supports template resources like github://repo/owner/repo_name for GitHub repository information.&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">claude_tools</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;read_mcp_resource&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">resource_description</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;input_schema&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                            </span><span class="s2">&quot;resource_uri&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;URI of the resource to read. Can be static (like resource://server_info) or template-based (like github://repo/facebook/react)&quot;</span>',
      '<span class="w">                            </span><span class="p">}</span>',
      '<span class="w">                        </span><span class="p">},</span>',
      '<span class="w">                        </span><span class="s2">&quot;required&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;resource_uri&quot;</span><span class="p">]</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Create initial message for Claude</span>',
      '<span class="w">                </span><span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>',
      '<span class="w">                    </span><span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="n">query</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                </span><span class="p">]</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># First call to Claude</span>',
      '<span class="w">                </span><span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">                    </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;claude-3-5-sonnet-20241022&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">6000</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">tools</span><span class="o">=</span><span class="n">claude_tools</span> <span class="k">if</span> <span class="n">claude_tools</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">                </span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Process Claude&#39;s response</span>',
      '<span class="w">                </span><span class="n">response_text</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">content_block</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">if</span> <span class="n">content_block</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;text&quot;</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="n">response_text</span> <span class="o">+=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                        </span>',
      '<span class="w">                    </span><span class="k">elif</span> <span class="n">content_block</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;tool_use&quot;</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="c1"># Claude wants to use a tool</span>',
      '<span class="w">                        </span><span class="n">tool_name</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">name</span>',
      '<span class="w">                        </span><span class="n">tool_args</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">input</span>',
      '<span class="w">                        </span><span class="n">tool_call_id</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">id</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔧 Claude wants to use: </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📝 Arguments: </span><span class="si">{</span><span class="n">tool_args</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="n">tool_name</span> <span class="o">==</span> <span class="s2">&quot;read_mcp_resource&quot;</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="c1"># Handle resource reading</span>',
      '<span class="w">                                </span><span class="n">resource_uri</span> <span class="o">=</span> <span class="n">tool_args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;resource_uri&quot;</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">resource_uri</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">read_resource</span><span class="p">(</span><span class="n">resource_uri</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📖 Resource read successfully: </span><span class="si">{</span><span class="n">resource_uri</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                                    </span>',
      '<span class="w">                                    </span><span class="c1"># Better handling of resource result</span>',
      '<span class="w">                                    </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool_result</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">):</span>',
      '<span class="w">                                        </span><span class="c1"># If it&#39;s a resource response object, extract content</span>',
      '<span class="w">                                        </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">):</span>',
      '<span class="w">                                            </span><span class="n">result_content</span> <span class="o">=</span> <span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                                        </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                            </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                        </span><span class="c1"># If it&#39;s already a string or simple object</span>',
      '<span class="w">                                        </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="s2">&quot;Error: No resource URI provided&quot;</span>',
      '<span class="w">                                    </span><span class="n">result_content</span> <span class="o">=</span> <span class="n">tool_result</span>',
      '<span class="w">                            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="c1"># Execute regular tool on the FastMCP server</span>',
      '<span class="w">                                </span><span class="n">tool_result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">call_tool</span><span class="p">(</span><span class="n">tool_name</span><span class="p">,</span> <span class="n">tool_args</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;✅ Tool executed successfully&quot;</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Add tool result to the conversation</span>',
      '<span class="w">                            </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span>',
      '<span class="w">                            </span><span class="p">})</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Format result for Claude</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="n">tool_result</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                    </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                                    </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tool_result&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;tool_use_id&quot;</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;Tool result: </span><span class="si">{</span><span class="n">result_content</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                                    </span><span class="p">}]</span>',
      '<span class="w">                                </span><span class="p">})</span>',
      '<span class="w">                            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                    </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                                    </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tool_result&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;tool_use_id&quot;</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Tool executed without response content&quot;</span>',
      '<span class="w">                                    </span><span class="p">}]</span>',
      '<span class="w">                                </span><span class="p">})</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Second call to Claude with the tool result</span>',
      '<span class="w">                            </span><span class="n">final_response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">                                </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;claude-3-5-sonnet-20241022&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">6000</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">tools</span><span class="o">=</span><span class="n">claude_tools</span> <span class="k">if</span> <span class="n">claude_tools</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">                            </span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Extract text from the final response</span>',
      '<span class="w">                            </span><span class="k">for</span> <span class="n">final_content</span> <span class="ow">in</span> <span class="n">final_response</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">final_content</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;text&quot;</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">response_text</span> <span class="o">+=</span> <span class="n">final_content</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                                    </span>',
      '<span class="w">                        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="n">error_msg</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;❌ Error executing </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="n">error_msg</span><span class="p">)</span>',
      '<span class="w">                            </span><span class="n">response_text</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="si">{</span><span class="n">error_msg</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">return</span> <span class="n">response_text</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_msg</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;❌ Error processing query: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="n">error_msg</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="n">error_msg</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">chat_loop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Main chat loop with user interaction.</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤖 FastMCP HTTP client started. Write &#39;quit&#39;, &#39;q&#39;, &#39;exit&#39;, &#39;salir&#39; to exit.&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;💬 You can ask questions about GitHub repositories!&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📚 The client can use tools and resources from the FastMCP server&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;-&quot;</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Request user input</span>',
      '<span class="w">                </span><span class="n">user_input</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">👤 You: &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">user_input</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;quit&#39;</span><span class="p">,</span> <span class="s1">&#39;q&#39;</span><span class="p">,</span> <span class="s1">&#39;exit&#39;</span><span class="p">,</span> <span class="s1">&#39;salir&#39;</span><span class="p">]:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;👋 Bye!&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="k">break</span>',
      '<span class="w">                    </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="ow">not</span> <span class="n">user_input</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">continue</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤔 Claude is thinking...&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Process query</span>',
      '<span class="w">                </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">process_query</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Show response</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤖 Claude: </span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">👋 Disconnecting...&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">break</span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">❌ Error in chat: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">continue</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">cleanup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Clean up resources and close connections.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🧹 Cleaning up resources...&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># FastMCP Client cleanup is handled automatically by context manager</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">exit_stack</span><span class="o">.</span><span class="n">aclose</span><span class="p">()</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;✅ Resources released&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">main</span><span class="p">():</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Main function that initializes and runs the FastMCP client.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Verify command line arguments</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;❌ Usage: python client.py &amp;lt;http_server_url&amp;gt;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Example: python client.py http://localhost:8000/mcp&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Note: Now connects to HTTP server instead of executing script&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="n">server_url</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Validate URL format</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="n">server_url</span><span class="o">.</span><span class="n">startswith</span><span class="p">((</span><span class="s1">&#39;http://&#39;</span><span class="p">,</span> <span class="s1">&#39;https://&#39;</span><span class="p">)):</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;❌ Error: Server URL must start with http:// or https://&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Example: python client.py http://localhost:8000&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Create and run client</span>',
      '<span class="w">    </span><span class="n">client</span> <span class="o">=</span> <span class="n">FastMCPClient</span><span class="p">()</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Connect to the server</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">connect_to_server</span><span class="p">(</span><span class="n">server_url</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># List available tools and resources after connection</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_available_tools</span><span class="p">()</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_available_resources</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Start chat loop</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">chat_loop</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Fatal error: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">finally</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Ensure resources are cleaned up</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">cleanup</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="c1"># Entry point of the script</span>',
      '<span class="w">    </span><span class="n">asyncio</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting client_MCP/client.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Autenticacion">Autenticación<a class="anchor-link" href="#Autenticacion"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 39" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos crear un servidor MCP al que solo se pueda conectar determinados clientes, podemos añadir autenticación</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Servidor MCP">Servidor MCP<a class="anchor-link" href="#Servidor MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 40" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos el servidor con autenticación</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">gitHub_MCP_server</span><span class="o">/</span><span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">httpx</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">FastMCP</span><span class="p">,</span> <span class="n">Context</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp.server.auth</span><span class="w"> </span><span class="kn">import</span> <span class="n">BearerAuthProvider</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp.server.auth.providers.bearer</span><span class="w"> </span><span class="kn">import</span> <span class="n">RSAKeyPair</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp.server.dependencies</span><span class="w"> </span><span class="kn">import</span> <span class="n">get_access_token</span><span class="p">,</span> <span class="n">AccessToken</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">github</span><span class="w"> </span><span class="kn">import</span> <span class="n">GITHUB_TOKEN</span><span class="p">,</span> <span class="n">create_github_headers</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">datetime</span>',
      '<span class="w"> </span>',
      '<span class="n">USER_ID</span> <span class="o">=</span> <span class="mi">1234567890</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Generate RSA key pair for development and testing</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🔐 Generating RSA key pair for authentication...&quot;</span><span class="p">)</span>',
      '<span class="n">key_pair</span> <span class="o">=</span> <span class="n">RSAKeyPair</span><span class="o">.</span><span class="n">generate</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Configure Bearer authentication provider</span>',
      '<span class="n">auth_provider</span> <span class="o">=</span> <span class="n">BearerAuthProvider</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">public_key</span><span class="o">=</span><span class="n">key_pair</span><span class="o">.</span><span class="n">public_key</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">issuer</span><span class="o">=</span><span class="s2">&quot;https://github-mcp.maxfn.dev&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">audience</span><span class="o">=</span><span class="s2">&quot;github-mcp-server&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">required_scopes</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;github:read&quot;</span><span class="p">]</span>  <span class="c1"># Global scope required for all requests</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Generate a test token for development</span>',
      '<span class="n">development_token</span> <span class="o">=</span> <span class="n">key_pair</span><span class="o">.</span><span class="n">create_token</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">subject</span><span class="o">=</span><span class="s2">&quot;dev-user-maxfn&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">issuer</span><span class="o">=</span><span class="s2">&quot;https://github-mcp.maxfn.dev&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">audience</span><span class="o">=</span><span class="s2">&quot;github-mcp-server&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">scopes</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;github:read&quot;</span><span class="p">,</span> <span class="s2">&quot;github:write&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">expires_in_seconds</span><span class="o">=</span><span class="mi">3600</span> <span class="o">*</span> <span class="mi">24</span>  <span class="c1"># Token is valid for 24 hours</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🎫 Development token generated:&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   </span><span class="si">{</span><span class="n">development_token</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;💡 Use this token in the client to authenticate&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;-&quot;</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create FastMCP server with authentication</span>',
      '<span class="n">mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;GitHubMCP&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;This server provides tools, resources and prompts to interact with the GitHub API.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">include_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;first_issue&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">auth</span><span class="o">=</span><span class="n">auth_provider</span>  <span class="c1"># Add authentication to the server</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">sub_mcp</span> <span class="o">=</span> <span class="n">FastMCP</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;SubMCP&quot;</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="p">},</span>',
      '<span class="w">    </span><span class="n">exclude_args</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;user_id&quot;</span><span class="p">],</span>   <span class="c1"># user_id has to be injected by server, not provided by LLM</span>',
      '<span class="p">)</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">ctx</span><span class="p">:</span> <span class="n">Context</span><span class="p">,</span> <span class="n">user_id</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">USER_ID</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="sd">        ctx: The context of the request</span>',
      '<span class="sd">        user_id: The user ID (automatically injected by the server)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 10 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=10&quot;</span>',
      '<span class="w">    </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="c1"># Get authenticated access token information</span>',
      '<span class="w">            </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">access_token</span><span class="p">:</span> <span class="n">AccessToken</span> <span class="o">=</span> <span class="n">get_access_token</span><span class="p">()</span>',
      '<span class="w">                </span><span class="n">authenticated_user</span> <span class="o">=</span> <span class="n">access_token</span><span class="o">.</span><span class="n">client_id</span>',
      '<span class="w">                </span><span class="n">user_scopes</span> <span class="o">=</span> <span class="n">access_token</span><span class="o">.</span><span class="n">scopes</span>',
      '<span class="w">                </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Request authenticated for user: </span><span class="si">{</span><span class="n">authenticated_user</span><span class="si">}</span><span class="s2"> with scopes: </span><span class="si">{</span><span class="n">user_scopes</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">authenticated_user</span> <span class="o">=</span> <span class="s2">&quot;unknown&quot;</span>',
      '<span class="w">                </span><span class="n">user_scopes</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">                </span><span class="n">ctx</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Could not get access token info: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;requested_by_user_id&quot;</span><span class="p">:</span> <span class="n">user_id</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;authenticated_user&quot;</span><span class="p">:</span> <span class="n">authenticated_user</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;user_scopes&quot;</span><span class="p">:</span> <span class="n">user_scopes</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;development&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_more_repository_issues</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Lists open issues for a given GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list of dictionaries, each containing information about an issue</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Limit to first 100 issues to avoid very long responses</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=open&amp;amp;per_page=100&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching issues from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No open issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issues_summary</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">issue</span> <span class="ow">in</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Create a more concise summary</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="n">issues_summary</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues.&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;total_found&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;Showing first 10 open issues&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;Showing all </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">issues_summary</span><span class="p">)</span><span class="si">}</span><span class="s2"> open issues&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;issues&quot;</span><span class="p">:</span> <span class="n">issues_summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="s2">&quot;first_issue&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">first_repository_issue</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Gets the first issue ever created in a GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        list[dict]: A list containing information about the first issue created</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Get the first issue by sorting by creation date in ascending order</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues?state=all&amp;amp;sort=created&amp;amp;direction=asc&amp;amp;per_page=1&quot;</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching first issue from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">issues_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="ow">not</span> <span class="n">issues_data</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No issues found for this repository.&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">first_issue</span> <span class="o">=</span> <span class="n">issues_data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="c1"># Create a detailed summary of the first issue</span>',
      '<span class="w">            </span><span class="n">summary</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;#</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;N/A&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;No title&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">summary</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot; (</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> comments)&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">issue_info</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;number&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;state&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;state&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;created_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;updated_at&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;updated_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;body&quot;</span><span class="p">:</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)[:</span><span class="mi">500</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">500</span> <span class="k">else</span> <span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;summary&quot;</span><span class="p">:</span> <span class="n">summary</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Found first issue: #</span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2"> created on </span><span class="si">{</span><span class="n">first_issue</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;created_at&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="c1"># Add context information</span>',
      '<span class="w">            </span><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;note&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the very first issue created in this repository&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;first_issue&quot;</span><span class="p">:</span> <span class="n">issue_info</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span>',
      '<span class="w">            </span><span class="p">}]</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">[{</span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s2">&quot;resource://server_info&quot;</span><span class="p">,</span> <span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">server_info</span><span class="p">(</span><span class="n">ctx</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns information about the server.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;info&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the MCP GitHub server development for MaximoFN blog post&quot;</span><span class="p">,</span>',
      '<span class="w">        </span><span class="s2">&quot;requested_id&quot;</span><span class="p">:</span> <span class="n">ctx</span><span class="o">.</span><span class="n">request_id</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s2">&quot;github://repo/</span><span class="si">{owner}</span><span class="s2">/</span><span class="si">{repo_name}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">repository_info</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">ctx</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">dict</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns detailed information about a GitHub repository.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: The owner of the repository (e.g., &#39;modelcontextprotocol&#39;)</span>',
      '<span class="sd">        repo_name: The name of the repository (e.g., &#39;python-sdk&#39;)</span>',
      '<span class="sd">        ctx: The context of the request</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        dict: Repository information including name, description, stats, etc.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="n">api_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;https://api.github.com/repos/</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">    </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Fetching repository information from </span><span class="si">{</span><span class="n">api_url</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="o">.</span><span class="n">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">create_github_headers</span><span class="p">())</span>',
      '<span class="w">            </span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">repo_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="c1"># Extract relevant repository information</span>',
      '<span class="w">            </span><span class="n">repo_info</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;full_name&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;full_name&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;description&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;owner&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                    </span><span class="s2">&quot;login&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;owner&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;owner&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;type&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="p">},</span>',
      '<span class="w">                </span><span class="s2">&quot;html_url&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;html_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;clone_url&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;clone_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;ssh_url&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;ssh_url&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;language&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;language&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;size&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;size&quot;</span><span class="p">),</span>  <span class="c1"># Size in KB</span>',
      '<span class="w">                </span><span class="s2">&quot;stargazers_count&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;stargazers_count&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;watchers_count&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;watchers_count&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;forks_count&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;forks_count&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;open_issues_count&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;open_issues_count&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;default_branch&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;default_branch&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;created_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;updated_at&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;updated_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;pushed_at&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;pushed_at&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;is_private&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;private&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;is_fork&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;fork&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;is_archived&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;archived&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;has_issues&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;has_issues&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;has_projects&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;has_projects&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;has_wiki&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;has_wiki&quot;</span><span class="p">),</span>',
      '<span class="w">                </span><span class="s2">&quot;license&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;license&quot;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;license&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="kc">None</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;topics&quot;</span><span class="p">:</span> <span class="n">repo_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;topics&quot;</span><span class="p">,</span> <span class="p">[])</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Successfully retrieved information for repository </span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="n">repo_info</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="n">httpx</span><span class="o">.</span><span class="n">HTTPStatusError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;No additional message from API.&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;Repository </span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2"> not found or is private.&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit with token or token lacks permissions?)&quot;</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">GITHUB_TOKEN</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">error_message</span> <span class="o">+=</span> <span class="s2">&quot; (Rate limit without token. Consider creating a .env file with GITHUB_TOKEN.)&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;GitHub API error: </span><span class="si">{</span><span class="n">e</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="n">error_message</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">ctx</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="p">{</span>',
      '<span class="w">                </span><span class="s2">&quot;error&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                </span><span class="s2">&quot;repository&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="nd">@mcp</span><span class="o">.</span><span class="n">prompt</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;generate_issues_prompt&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">description</span><span class="o">=</span><span class="s2">&quot;Generates a structured prompt for asking about GitHub repository issues. Use this when users want to formulate questions about repository issues, or need help creating prompts for issue analysis.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">generate_issues_prompt</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repo_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Generates a structured prompt for asking about GitHub repository issues.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    This prompt template helps users formulate clear questions about repository issues</span>',
      '<span class="sd">    and can be used as a starting point for issue analysis or research.</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        owner: Repository owner (e.g., &#39;huggingface&#39;, &#39;microsoft&#39;)</span>',
      '<span class="sd">        repo_name: Repository name (e.g., &#39;transformers&#39;, &#39;vscode&#39;)</span>',
      '<span class="w"> </span>',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        A formatted prompt asking about repository issues</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;&quot;&quot;Please provide information about the open issues in the repository </span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">. </span>',
      '<span class="w"> </span>',
      '<span class="s2">I&#39;m interested in:</span>',
      '<span class="s2">- Current open issues and their status</span>',
      '<span class="s2">- Recent issue trends and patterns</span>',
      '<span class="s2">- Common issue categories or topics</span>',
      '<span class="s2">- Any critical or high-priority issues</span>',
      '<span class="w"> </span>',
      '<span class="s2">Repository: </span><span class="si">{</span><span class="n">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">&quot;&quot;&quot;</span>',
      '<span class="w"> </span>',
      '<span class="nd">@sub_mcp</span><span class="o">.</span><span class="n">tool</span><span class="p">(</span><span class="n">tags</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;public&quot;</span><span class="p">})</span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">hello_world</span><span class="p">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Returns a simple greeting.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="s2">&quot;Hello, world!&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">mcp</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">&quot;sub_mcp&quot;</span><span class="p">,</span> <span class="n">sub_mcp</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DEBUG: Starting FastMCP GitHub server...&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;DEBUG: Server name: </span><span class="si">{</span><span class="n">mcp</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Initialize and run the server, run with uv run client.py http://localhost:8000/mcp</span>',
      '<span class="w">    </span><span class="c1"># 1. Run server with uv run github_server.py. It gives you a token to use in the client.py</span>',
      '<span class="w">    </span><span class="c1"># 2. Run client.py with the token you got from the server.py - uv run client.py http://localhost:8000/mcp &amp;lt;your_bearer_token&amp;gt;</span>',
      '<span class="w">    </span><span class="n">mcp</span><span class="o">.</span><span class="n">run</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">transport</span><span class="o">=</span><span class="s2">&quot;streamable-http&quot;</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">host</span><span class="o">=</span><span class="s2">&quot;0.0.0.0&quot;</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">port</span><span class="o">=</span><span class="mi">8000</span><span class="p">,</span>',
      '<span class="w">    </span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting gitHub_MCP_server/github_server.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Creamos un proveedor de autenticación para el servidor y un token de desarrollo temporal</p>
      <div class='highlight'><pre><code># Generate RSA key pair for development and testing
      print("🔐 Generating RSA key pair for authentication...")
      key_pair = RSAKeyPair.generate()
      
      # Configure Bearer authentication provider
      auth_provider = BearerAuthProvider(
          public_key=key_pair.public_key,
          issuer="https://github-mcp.maxfn.dev",
          audience="github-mcp-server",
          required_scopes=["github:read"]  # Global scope required for all requests
      )
      
      # Generate a test token for development
      development_token = key_pair.create_token(
          subject="dev-user-maxfn",
          issuer="https://github-mcp.maxfn.dev",
          audience="github-mcp-server",
          scopes=["github:read", "github:write"],
          expires_in_seconds=3600 * 24  # Token is valid for 24 hours
      )
      
      print(f"🎫 Development token generated:")
      print(f"   {opening_brace}development_token{closing_brace}")
      print("💡 Use this token in the client to authenticate")
      print("-" * 60)</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Lo usamos al crear el servidor MCP</p>
      <div class='highlight'><pre><code>mcp = FastMCP(
          name="GitHubMCP",
          instructions="This server provides tools, resources and prompts to interact with the GitHub API.",
          include_tags={"public"},
          exclude_tags={"first_issue"},
          auth=auth_provider  # Add authentication to the server
      )</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Cliente MCP">Cliente MCP<a class="anchor-link" href="#Cliente MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 41" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos el cliente MCP con autenticación</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">client_MCP</span><span class="o">/</span><span class="n">client</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">sys</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">asyncio</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">contextlib</span><span class="w"> </span><span class="kn">import</span> <span class="n">AsyncExitStack</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">anthropic</span><span class="w"> </span><span class="kn">import</span> <span class="n">Anthropic</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">dotenv</span><span class="w"> </span><span class="kn">import</span> <span class="n">load_dotenv</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">Client</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp.client.auth</span><span class="w"> </span><span class="kn">import</span> <span class="n">BearerAuth</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Load environment variables from .env file</span>',
      '<span class="n">load_dotenv</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">class</span><span class="w"> </span><span class="nc">FastMCPClient</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    FastMCP client that integrates with Claude to process user queries</span>',
      '<span class="sd">    and use tools and resources exposed by a FastMCP server.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Initialize the FastMCP client with Anthropic and resource management.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">exit_stack</span> <span class="o">=</span> <span class="n">AsyncExitStack</span><span class="p">()</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span> <span class="o">=</span> <span class="n">Anthropic</span><span class="p">()</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">connect_to_server</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">server_url</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">auth_token</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Connect to the specified FastMCP server via HTTP with optional authentication.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            server_url: URL of the HTTP server (e.g., &quot;http://localhost:8000/mcp&quot;)</span>',
      '<span class="sd">            auth_token: Bearer token for authentication (optional)</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔗 Connecting to FastMCP HTTP server: </span><span class="si">{</span><span class="n">server_url</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Create authentication if token is provided</span>',
      '<span class="w">        </span><span class="n">auth</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">auth_token</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">auth</span> <span class="o">=</span> <span class="n">BearerAuth</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">auth_token</span><span class="p">)</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🔐 Using Bearer token authentication&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No authentication token provided - connecting without auth&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Create FastMCP client for HTTP connection using SSE transport</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="n">Client</span><span class="p">(</span><span class="n">server_url</span><span class="p">,</span> <span class="n">auth</span><span class="o">=</span><span class="n">auth</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># Note: FastMCP Client automatically detects HTTP URLs and uses SSE transport</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;✅ Client created successfully&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_available_tools</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List available tools in the FastMCP server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Get list of tools from the server using FastMCP context</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">tools</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_tools</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">tools</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🛠️  Available tools (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">tools</span><span class="p">)</span><span class="si">}</span><span class="s2">):&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">                    </span><span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📋 </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">tool</span><span class="o">.</span><span class="n">description</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Description: </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="c1"># Show parameters if available</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool</span><span class="p">,</span> <span class="s1">&#39;inputSchema&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="s1">&#39;properties&#39;</span> <span class="ow">in</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">params</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">[</span><span class="s1">&#39;properties&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>',
      '<span class="w">                                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Parameters: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No tools found in the server&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing tools: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_available_resources</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List available resources in the FastMCP server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Get list of resources from the server using FastMCP context</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">resources</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_resources</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">resources</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">📚 Available resources (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">resources</span><span class="p">)</span><span class="si">}</span><span class="s2">):&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">                    </span><span class="k">for</span> <span class="n">resource</span> <span class="ow">in</span> <span class="n">resources</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📄 </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">uri</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">name</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Name: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">description</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Description: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">mimeType</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   MIME Type: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">mimeType</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No resources found in the server&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing resources: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_available_prompts</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List available prompts in the FastMCP server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Get list of prompts from the server using FastMCP context</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">prompts</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_prompts</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">prompts</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">💭 Available prompts (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">prompts</span><span class="p">)</span><span class="si">}</span><span class="s2">):&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">                    </span><span class="k">for</span> <span class="n">prompt</span> <span class="ow">in</span> <span class="n">prompts</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🎯 </span><span class="si">{</span><span class="n">prompt</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">prompt</span><span class="o">.</span><span class="n">description</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Description: </span><span class="si">{</span><span class="n">prompt</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">                        </span><span class="c1"># Show parameters if available</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">prompt</span><span class="p">,</span> <span class="s1">&#39;arguments&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">prompt</span><span class="o">.</span><span class="n">arguments</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="n">params</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">                            </span><span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">prompt</span><span class="o">.</span><span class="n">arguments</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">param_info</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">arg</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">arg</span><span class="o">.</span><span class="n">description</span><span class="w"> </span><span class="ow">or</span><span class="w"> </span><span class="s1">&#39;No description&#39;</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">arg</span><span class="o">.</span><span class="n">required</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">param_info</span> <span class="o">+=</span> <span class="s2">&quot; (required)&quot;</span>',
      '<span class="w">                                </span><span class="n">params</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">param_info</span><span class="p">)</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Parameters: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No prompts found in the server&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing prompts: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">read_resource</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">resource_uri</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Read a specific resource from the server.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            resource_uri: URI of the resource to read</span>',
      '<span class="sd">            </span>',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            str: Resource content</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">read_resource</span><span class="p">(</span><span class="n">resource_uri</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="n">result</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error reading resource </span><span class="si">{</span><span class="n">resource_uri</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">None</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">get_prompt</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">prompt_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">prompt_args</span><span class="p">:</span> <span class="nb">dict</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Get/call a specific prompt from the server.</span>',
      '<span class="w"> </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            prompt_name: Name of the prompt to call</span>',
      '<span class="sd">            prompt_args: Arguments for the prompt (if any)</span>',
      '<span class="w"> </span>',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            str: Generated prompt content</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">prompt_args</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get_prompt</span><span class="p">(</span><span class="n">prompt_name</span><span class="p">,</span> <span class="n">prompt_args</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get_prompt</span><span class="p">(</span><span class="n">prompt_name</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="c1"># Extract the prompt text from the response</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="s1">&#39;messages&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">result</span><span class="o">.</span><span class="n">messages</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="c1"># FastMCP returns prompts as message objects</span>',
      '<span class="w">                    </span><span class="k">return</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">msg</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">text</span> <span class="k">for</span> <span class="n">msg</span> <span class="ow">in</span> <span class="n">result</span><span class="o">.</span><span class="n">messages</span> <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">content</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">)])</span>',
      '<span class="w">                </span><span class="k">elif</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">):</span>',
      '<span class="w">                    </span><span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error getting prompt </span><span class="si">{</span><span class="n">prompt_name</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">None</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">process_query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Process a user query, interacting with Claude and FastMCP tools and resources.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            query: User query</span>',
      '<span class="sd">            </span>',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            str: Final processed response</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Use FastMCP context for all operations</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Get available tools and resources</span>',
      '<span class="w">                </span><span class="n">tools_list</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_tools</span><span class="p">()</span>',
      '<span class="w">                </span><span class="n">resources_list</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_resources</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Prepare tools for Claude in correct format</span>',
      '<span class="w">                </span><span class="n">claude_tools</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools_list</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">claude_tool</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">description</span> <span class="ow">or</span> <span class="sa">f</span><span class="s2">&quot;Tool </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;input_schema&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span> <span class="ow">or</span> <span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span> <span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{}}</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                    </span><span class="n">claude_tools</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">claude_tool</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Add a special tool for reading resources (including template resources)</span>',
      '<span class="w">                </span><span class="n">resource_description</span> <span class="o">=</span> <span class="s2">&quot;Read a resource from the MCP server. &quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">resources_list</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="c1"># Convert URIs to strings to avoid AnyUrl object issues</span>',
      '<span class="w">                    </span><span class="n">resource_uris</span> <span class="o">=</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">uri</span><span class="p">)</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">resources_list</span><span class="p">]</span>',
      '<span class="w">                    </span><span class="n">resource_description</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot;Available static resources: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">resource_uris</span><span class="p">)</span><span class="si">}</span><span class="s2">. &quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">resource_description</span> <span class="o">+=</span> <span class="s2">&quot;Also supports template resources like github://repo/owner/repo_name for GitHub repository information.&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">claude_tools</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;read_mcp_resource&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">resource_description</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;input_schema&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                            </span><span class="s2">&quot;resource_uri&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;URI of the resource to read. Can be static (like resource://server_info) or template-based (like github://repo/facebook/react)&quot;</span>',
      '<span class="w">                            </span><span class="p">}</span>',
      '<span class="w">                        </span><span class="p">},</span>',
      '<span class="w">                        </span><span class="s2">&quot;required&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;resource_uri&quot;</span><span class="p">]</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="c1"># Add a special tool for using prompts</span>',
      '<span class="w">                </span><span class="n">prompt_description</span> <span class="o">=</span> <span class="s2">&quot;Generate specialized prompts from the MCP server. Use this when users want to:</span><span class="se">\n</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="s2">&quot;- Create well-structured questions about repositories</span><span class="se">\n</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="s2">&quot;- Get help formulating prompts for specific tasks</span><span class="se">\n</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="s2">&quot;- Generate template questions for analysis</span><span class="se">\n</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">prompts_list</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">prompt_names</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span><span class="o">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">prompts_list</span><span class="p">]</span>',
      '<span class="w">                    </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Available prompts: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">prompt_names</span><span class="p">)</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>',
      '<span class="w">                    </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="s2">&quot;- generate_issues_prompt: Creates structured questions about GitHub repository issues&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">IMPORTANT: Use prompts when users explicitly ask for help creating questions or prompts, or when they want to formulate better questions about repositories.&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="n">claude_tools</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;use_mcp_prompt&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">prompt_description</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;input_schema&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                            </span><span class="s2">&quot;prompt_name&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Name of the prompt to use. Available: &#39;generate_issues_prompt&#39;&quot;</span>',
      '<span class="w">                            </span><span class="p">},</span>',
      '<span class="w">                            </span><span class="s2">&quot;prompt_args&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Arguments for the prompt. For generate_issues_prompt: {opening_brace}&#39;owner&#39;: &#39;repo-owner&#39;, &#39;repo_name&#39;: &#39;repo-name&#39;{closing_brace}&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                    </span><span class="s2">&quot;owner&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Repository owner (e.g., &#39;huggingface&#39;, &#39;microsoft&#39;)&quot;</span>',
      '<span class="w">                                    </span><span class="p">},</span>',
      '<span class="w">                                    </span><span class="s2">&quot;repo_name&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Repository name (e.g., &#39;transformers&#39;, &#39;vscode&#39;)&quot;</span>',
      '<span class="w">                                    </span><span class="p">}</span>',
      '<span class="w">                                </span><span class="p">}</span>',
      '<span class="w">                            </span><span class="p">}</span>',
      '<span class="w">                        </span><span class="p">},</span>',
      '<span class="w">                        </span><span class="s2">&quot;required&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;prompt_name&quot;</span><span class="p">]</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="c1"># Create initial message for Claude</span>',
      '<span class="w">                </span><span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>',
      '<span class="w">                    </span><span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="n">query</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                </span><span class="p">]</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># First call to Claude</span>',
      '<span class="w">                </span><span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">                    </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;claude-3-5-sonnet-20241022&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">6000</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">tools</span><span class="o">=</span><span class="n">claude_tools</span> <span class="k">if</span> <span class="n">claude_tools</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">                </span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Process Claude&#39;s response</span>',
      '<span class="w">                </span><span class="n">response_text</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">content_block</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">if</span> <span class="n">content_block</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;text&quot;</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="n">response_text</span> <span class="o">+=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                        </span>',
      '<span class="w">                    </span><span class="k">elif</span> <span class="n">content_block</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;tool_use&quot;</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="c1"># Claude wants to use a tool</span>',
      '<span class="w">                        </span><span class="n">tool_name</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">name</span>',
      '<span class="w">                        </span><span class="n">tool_args</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">input</span>',
      '<span class="w">                        </span><span class="n">tool_call_id</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">id</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔧 Claude wants to use: </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📝 Arguments: </span><span class="si">{</span><span class="n">tool_args</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="n">tool_name</span> <span class="o">==</span> <span class="s2">&quot;read_mcp_resource&quot;</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="c1"># Handle resource reading</span>',
      '<span class="w">                                </span><span class="n">resource_uri</span> <span class="o">=</span> <span class="n">tool_args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;resource_uri&quot;</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">resource_uri</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">read_resource</span><span class="p">(</span><span class="n">resource_uri</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📖 Resource read successfully: </span><span class="si">{</span><span class="n">resource_uri</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                                    </span>',
      '<span class="w">                                    </span><span class="c1"># Better handling of resource result</span>',
      '<span class="w">                                    </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool_result</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">):</span>',
      '<span class="w">                                        </span><span class="c1"># If it&#39;s a resource response object, extract content</span>',
      '<span class="w">                                        </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">):</span>',
      '<span class="w">                                            </span><span class="n">result_content</span> <span class="o">=</span> <span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                                        </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                            </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                        </span><span class="c1"># If it&#39;s already a string or simple object</span>',
      '<span class="w">                                        </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="s2">&quot;Error: No resource URI provided&quot;</span>',
      '<span class="w">                                    </span><span class="n">result_content</span> <span class="o">=</span> <span class="n">tool_result</span>',
      '<span class="w"> </span>',
      '<span class="w">                            </span><span class="k">elif</span> <span class="n">tool_name</span> <span class="o">==</span> <span class="s2">&quot;use_mcp_prompt&quot;</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="c1"># Handle prompt usage</span>',
      '<span class="w">                                </span><span class="n">prompt_name</span> <span class="o">=</span> <span class="n">tool_args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;prompt_name&quot;</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="n">prompt_args</span> <span class="o">=</span> <span class="n">tool_args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;prompt_args&quot;</span><span class="p">,</span> <span class="p">{})</span>',
      '<span class="w"> </span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">prompt_name</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_prompt</span><span class="p">(</span><span class="n">prompt_name</span><span class="p">,</span> <span class="n">prompt_args</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;💭 Prompt &#39;</span><span class="si">{</span><span class="n">prompt_name</span><span class="si">}</span><span class="s2">&#39; generated successfully&quot;</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="p">)</span> <span class="k">if</span> <span class="n">tool_result</span> <span class="k">else</span> <span class="s2">&quot;Error generating prompt&quot;</span>',
      '<span class="w">                                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="s2">&quot;Error: No prompt name provided&quot;</span>',
      '<span class="w">                                    </span><span class="n">result_content</span> <span class="o">=</span> <span class="n">tool_result</span>',
      '<span class="w"> </span>',
      '<span class="w">                            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="c1"># Execute regular tool on the FastMCP server</span>',
      '<span class="w">                                </span><span class="n">tool_result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">call_tool</span><span class="p">(</span><span class="n">tool_name</span><span class="p">,</span> <span class="n">tool_args</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;✅ Tool executed successfully&quot;</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Add tool result to the conversation</span>',
      '<span class="w">                            </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span>',
      '<span class="w">                            </span><span class="p">})</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Format result for Claude</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="n">tool_result</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                    </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                                    </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tool_result&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;tool_use_id&quot;</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;Tool result: </span><span class="si">{</span><span class="n">result_content</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                                    </span><span class="p">}]</span>',
      '<span class="w">                                </span><span class="p">})</span>',
      '<span class="w">                            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                    </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                                    </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tool_result&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;tool_use_id&quot;</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Tool executed without response content&quot;</span>',
      '<span class="w">                                    </span><span class="p">}]</span>',
      '<span class="w">                                </span><span class="p">})</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Second call to Claude with the tool result</span>',
      '<span class="w">                            </span><span class="n">final_response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">                                </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;claude-3-5-sonnet-20241022&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">6000</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">tools</span><span class="o">=</span><span class="n">claude_tools</span> <span class="k">if</span> <span class="n">claude_tools</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">                            </span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Extract text from the final response</span>',
      '<span class="w">                            </span><span class="k">for</span> <span class="n">final_content</span> <span class="ow">in</span> <span class="n">final_response</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">final_content</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;text&quot;</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">response_text</span> <span class="o">+=</span> <span class="n">final_content</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                                    </span>',
      '<span class="w">                        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="n">error_msg</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;❌ Error executing </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="n">error_msg</span><span class="p">)</span>',
      '<span class="w">                            </span><span class="n">response_text</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="si">{</span><span class="n">error_msg</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">return</span> <span class="n">response_text</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_msg</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;❌ Error processing query: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="n">error_msg</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="n">error_msg</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">chat_loop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Main chat loop with user interaction.</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤖 FastMCP HTTP client started. Write &#39;quit&#39;, &#39;q&#39;, &#39;exit&#39;, &#39;salir&#39; to exit.&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;💬 You can ask questions about GitHub repositories!&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📚 The client can use tools, resources, and prompts from the FastMCP server&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;💭 PROMPT Examples:&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;   • &#39;Generate a prompt for asking about issues in facebook/react&#39;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;   • &#39;Help me create a good question about microsoft/vscode issues&#39;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;   • &#39;I need a structured prompt for analyzing tensorflow/tensorflow&#39;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🔧 DIRECT Examples:&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;   • &#39;Show me the issues in huggingface/transformers&#39;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;   • &#39;Get repository info for github://repo/google/chrome&#39;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;-&quot;</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Request user input</span>',
      '<span class="w">                </span><span class="n">user_input</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">👤 You: &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">user_input</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;quit&#39;</span><span class="p">,</span> <span class="s1">&#39;q&#39;</span><span class="p">,</span> <span class="s1">&#39;exit&#39;</span><span class="p">,</span> <span class="s1">&#39;salir&#39;</span><span class="p">]:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;👋 Bye!&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="k">break</span>',
      '<span class="w">                    </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="ow">not</span> <span class="n">user_input</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">continue</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤔 Claude is thinking...&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Process query</span>',
      '<span class="w">                </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">process_query</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Show response</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤖 Claude: </span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">👋 Disconnecting...&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">break</span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">❌ Error in chat: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">continue</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">cleanup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Clean up resources and close connections.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🧹 Cleaning up resources...&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># FastMCP Client cleanup is handled automatically by context manager</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">exit_stack</span><span class="o">.</span><span class="n">aclose</span><span class="p">()</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;✅ Resources released&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">main</span><span class="p">():</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Main function that initializes and runs the FastMCP client.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Verify command line arguments</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">3</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;❌ Usage: python client.py &amp;lt;http_server_url&amp;gt; [auth_token]&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Example: python client.py http://localhost:8000/mcp&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Example with auth: python client.py http://localhost:8000/mcp &amp;lt;your_bearer_token&amp;gt;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Note: Now connects to HTTP server instead of executing script&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="n">server_url</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
      '<span class="w">    </span><span class="n">auth_token</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Validate URL format</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="n">server_url</span><span class="o">.</span><span class="n">startswith</span><span class="p">((</span><span class="s1">&#39;http://&#39;</span><span class="p">,</span> <span class="s1">&#39;https://&#39;</span><span class="p">)):</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;❌ Error: Server URL must start with http:// or https://&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Example: python client.py http://localhost:8000&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Create and run client</span>',
      '<span class="w">    </span><span class="n">client</span> <span class="o">=</span> <span class="n">FastMCPClient</span><span class="p">()</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Connect to the server</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">connect_to_server</span><span class="p">(</span><span class="n">server_url</span><span class="p">,</span> <span class="n">auth_token</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># List available tools, resources, and prompts after connection</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_available_tools</span><span class="p">()</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_available_resources</span><span class="p">()</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_available_prompts</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="c1"># Start chat loop</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">chat_loop</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Fatal error: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">finally</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Ensure resources are cleaned up</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">cleanup</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="c1"># Entry point of the script</span>',
      '<span class="w">    </span><span class="n">asyncio</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting client_MCP/client.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se crea el token de autenticación a partir del token dado por el usuario al iniciar el cliente</p>
      <div class='highlight'><pre><code># Create authentication if token is provided
      auth = None
      if auth_token:
          auth = BearerAuth(token=auth_token)
          print("🔐 Using Bearer token authentication")
      else:
          print("⚠️  No authentication token provided - connecting without auth")</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se crea el cliente con el token de autenticación, que será enviado al servidor</p>
      <div class='highlight'><pre><code># Create FastMCP client for HTTP connection using SSE transport
      self.client = Client(server_url, auth=auth)</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se conecta con el servidor enviando el token</p>
      <div class='highlight'><pre><code># Connect to the server
      await client.connect_to_server(server_url, auth_token)</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Prueba del MCP con autenticacion">Prueba del MCP con autenticación<a class="anchor-link" href="#Prueba del MCP con autenticacion"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 42" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como hemos vuelto al <code>http</code>, primero tenemos que levantar el servidor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">gitHub_MCP_server</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">run</span> <span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🔐 Generating RSA key pair for authentication...',
          '🎫 Development token generated:',
          '&#x20;&#x20;&#x20;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL2dpdGh1Yi1tY3AubWF4Zm4uZGV2Iiwic3ViIjoiZGV2LXVzZXItbWF4Zm4iLCJpYXQiOjE3NTExMDgzMDAsImV4cCI6MTc1MTE5NDcwMCwiYXVkIjoiZ2l0aHViLW1jcC1zZXJ2ZXIiLCJzY29wZSI6ImdpdGh1YjpyZWFkIGdpdGh1Yjp3cml0ZSJ9.PX6BtUhNCv9YVq1ZCh2teAU_LsdGMJx-W2jntTvVgdXv3aDyiOeMuZE9fIcqRy9zcXT1pjexqQQDiRhy8WlRL-mdKooEbIc_ffBVX9LPVaxKAzfzZTnx2lYTt6DgnebjjdNk_OsXF3ujH5s0xmGtY892j-k9P8dJLLrTrqXLhWG2NX_jqHB_kMalFd0LT83D6uXjPako_DKHjYKLc67WvZU_JglVS5eI9YCmmhMlhPHyO4FUlD9xb0DpbOgz8bO1ZExBrB_W2YKomGI_u8R56ItM8bS3eEwybPgEHfHhDNI6PNqsJ3DB1Grmc7KOmGX4LJCfPyB6mpl_bQmChKzcdg',
          '💡 Use this token in the client to authenticate',
          '------------------------------------------------------------',
          '/Users/macm1/Documents/web/portafolio/posts/gitHub_MCP_server/github_server.py:412: DeprecationWarning: Mount prefixes are now optional and the first positional argument should be the server you want to mount.',
          '&#x20;&#x20;mcp.mount(&quot;sub_mcp&quot;, sub_mcp)',
          'DEBUG: Starting FastMCP GitHub server...',
          'DEBUG: Server name: GitHubMCP',
          '[06/28/25 12:58:20] INFO     Starting MCP server &#x27;GitHubMCP&#x27; with ]8;id=190590;file:///Users/macm1/Documents/web/portafolio/posts/gitHub_MCP_server/.venv/lib/python3.11/site-packages/fastmcp/server/server.py\server.py]8;;\:]8;id=102439;file:///Users/macm1/Documents/web/portafolio/posts/gitHub_MCP_server/.venv/lib/python3.11/site-packages/fastmcp/server/server.py#1297\\1297]8;;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;transport &#x27;streamable-http&#x27; on',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;http://0.0.0.0:8000/mcp/',
          'INFO:     Started server process [27262]',
          'INFO:     Waiting for application startup.',
          'INFO:     Application startup complete.',
          'INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos nos ha generado el token de autentificación <code>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL2dpdGh1Yi1tY3AubWF4Zm4uZGV2Iiwic3ViIjoiZGV2LXVzZXItbWF4Zm4iLCJpYXQiOjE3NTExMDgzMDAsImV4cCI6MTc1MTE5NDcwMCwiYXVkIjoiZ2l0aHViLW1jcC1zZXJ2ZXIiLCJzY29wZSI6ImdpdGh1YjpyZWFkIGdpdGh1Yjp3cml0ZSJ9.PX6BtUhNCv9YVq1ZCh2teAU_LsdGMJx-W2jntTvVgdXv3aDyiOeMuZE9fIcqRy9zcXT1pjexqQQDiRhy8WlRL-mdKooEbIc_ffBVX9LPVaxKAzfzZTnx2lYTt6DgnebjjdNk_OsXF3ujH5s0xmGtY892j-k9P8dJLLrTrqXLhWG2NX_jqHB_kMalFd0LT83D6uXjPako_DKHjYKLc67WvZU_JglVS5eI9YCmmhMlhPHyO4FUlD9xb0DpbOgz8bO1ZExBrB_W2YKomGI_u8R56ItM8bS3eEwybPgEHfHhDNI6PNqsJ3DB1Grmc7KOmGX4LJCfPyB6mpl_bQmChKzcdg</code>, hay que usarlo a la hora de ejecutar el cliente</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Y ahora ejecutamos el cliente con el token de autenticación que nos ha generado el servidor.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">client_MCP</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">run</span> <span class="n">client</span><span class="o">.</span><span class="n">py</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">mcp</span> <span class="n">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9</span><span class="o">.</span><span class="n">eyJpc3MiOiJodHRwczovL2dpdGh1Yi1tY3AubWF4Zm4uZGV2Iiwic3ViIjoiZGV2LXVzZXItbWF4Zm4iLCJpYXQiOjE3NTExMDgzMDAsImV4cCI6MTc1MTE5NDcwMCwiYXVkIjoiZ2l0aHViLW1jcC1zZXJ2ZXIiLCJzY29wZSI6ImdpdGh1YjpyZWFkIGdpdGh1Yjp3cml0ZSJ9</span><span class="o">.</span><span class="n">PX6BtUhNCv9YVq1ZCh2teAU_LsdGMJx</span><span class="o">-</span><span class="n">W2jntTvVgdXv3aDyiOeMuZE9fIcqRy9zcXT1pjexqQQDiRhy8WlRL</span><span class="o">-</span><span class="n">mdKooEbIc_ffBVX9LPVaxKAzfzZTnx2lYTt6DgnebjjdNk_OsXF3ujH5s0xmGtY892j</span><span class="o">-</span><span class="n">k9P8dJLLrTrqXLhWG2NX_jqHB_kMalFd0LT83D6uXjPako_DKHjYKLc67WvZU_JglVS5eI9YCmmhMlhPHyO4FUlD9xb0DpbOgz8bO1ZExBrB_W2YKomGI_u8R56ItM8bS3eEwybPgEHfHhDNI6PNqsJ3DB1Grmc7KOmGX4LJCfPyB6mpl_bQmChKzcdg</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🔗 Connecting to FastMCP HTTP server: http://localhost:8000/mcp',
          '🔐 Using Bearer token authentication',
          '✅ Client created successfully',
          '🛠️  Available tools (2):',
          '==================================================',
          '📋 sub_mcp_hello_world',
          '&#x20;&#x20;&#x20;Description: Returns a simple greeting.',
          '&#x20;&#x20;&#x20;Parameters:',
          '📋 list_repository_issues',
          '&#x20;&#x20;&#x20;Description: Lists open issues for a given GitHub repository.',
          'Args:',
          '&#x20;&#x20;&#x20;&#x20;owner: The owner of the repository (e.g., &#x27;modelcontextprotocol&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;repo_name: The name of the repository (e.g., &#x27;python-sdk&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;ctx: The context of the request',
          '&#x20;&#x20;&#x20;&#x20;user_id: The user ID (automatically injected by the server)',
          'Returns:',
          '&#x20;&#x20;&#x20;&#x20;list[dict]: A list of dictionaries, each containing information about an issue',
          '&#x20;&#x20;&#x20;Parameters: owner, repo_name',
          '📚 Available resources (1):',
          '==================================================',
          '📄 resource://server_info',
          '&#x20;&#x20;&#x20;Name: server_info',
          '&#x20;&#x20;&#x20;Description: Returns information about the server.',
          '&#x20;&#x20;&#x20;MIME Type: text/plain',
          '💭 Available prompts (1):',
          '==================================================',
          '🎯 generate_issues_prompt',
          '&#x20;&#x20;&#x20;Description: Generates a structured prompt for asking about GitHub repository issues. Use this when users want to formulate questions about repository issues, or need help creating prompts for issue analysis.',
          '&#x20;&#x20;&#x20;Parameters: owner: No description (required), repo_name: No description (required)',
          '🤖 FastMCP HTTP client started. Write &#x27;quit&#x27;, &#x27;q&#x27;, &#x27;exit&#x27;, &#x27;salir&#x27; to exit.',
          '💬 You can ask questions about GitHub repositories!',
          '📚 The client can use tools, resources, and prompts from the FastMCP server',
          '💭 PROMPT Examples:',
          '&#x20;&#x20;&#x20;• &#x27;Generate a prompt for asking about issues in facebook/react&#x27;',
          '&#x20;&#x20;&#x20;• &#x27;Help me create a good question about microsoft/vscode issues&#x27;',
          '&#x20;&#x20;&#x20;• &#x27;I need a structured prompt for analyzing tensorflow/tensorflow&#x27;',
          '🔧 DIRECT Examples:',
          '&#x20;&#x20;&#x20;• &#x27;Show me the issues in huggingface/transformers&#x27;',
          '&#x20;&#x20;&#x20;• &#x27;Get repository info for github://repo/google/chrome&#x27;',
          '------------------------------------------------------------',
          '👤 You:',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos el cliente se conecta con el servidor y nos da una lista de los <code>tools</code>, <code>resources</code> y <code>prompts</code> disponibles.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Ping del cliente al servidor">Ping del cliente al servidor<a class="anchor-link" href="#Ping del cliente al servidor"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 43" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Cuando ejecutamos el MCP con <code>http</code> como capa de transporte, lo normal es que el cliente y el servidor no estén en el mismo ordenador. Por lo que cuando ejecutamos el cliente no podemos saber si el servidor está funcionando, así que podemos desarrollar un ping para comprobar que el servidor está funcionando.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Cliente MCP">Cliente MCP<a class="anchor-link" href="#Cliente MCP"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 44" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a añadir un ping al cliente MCP</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">client_MCP</span><span class="o">/</span><span class="n">client</span><span class="o">.</span><span class="n">py</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">sys</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">asyncio</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">contextlib</span><span class="w"> </span><span class="kn">import</span> <span class="n">AsyncExitStack</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">anthropic</span><span class="w"> </span><span class="kn">import</span> <span class="n">Anthropic</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">dotenv</span><span class="w"> </span><span class="kn">import</span> <span class="n">load_dotenv</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp</span><span class="w"> </span><span class="kn">import</span> <span class="n">Client</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">fastmcp.client.auth</span><span class="w"> </span><span class="kn">import</span> <span class="n">BearerAuth</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Load environment variables from .env file</span>',
      '<span class="n">load_dotenv</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">class</span><span class="w"> </span><span class="nc">FastMCPClient</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    FastMCP client that integrates with Claude to process user queries</span>',
      '<span class="sd">    and use tools and resources exposed by a FastMCP server.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Initialize the FastMCP client with Anthropic and resource management.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">exit_stack</span> <span class="o">=</span> <span class="n">AsyncExitStack</span><span class="p">()</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span> <span class="o">=</span> <span class="n">Anthropic</span><span class="p">()</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">connect_to_server</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">server_url</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">auth_token</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Connect to the specified FastMCP server via HTTP with optional authentication.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            server_url: URL of the HTTP server (e.g., &quot;http://localhost:8000/mcp&quot;)</span>',
      '<span class="sd">            auth_token: Bearer token for authentication (optional)</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔗 Connecting to FastMCP HTTP server: </span><span class="si">{</span><span class="n">server_url</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Create authentication if token is provided</span>',
      '<span class="w">        </span><span class="n">auth</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">auth_token</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">auth</span> <span class="o">=</span> <span class="n">BearerAuth</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">auth_token</span><span class="p">)</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🔐 Using Bearer token authentication&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No authentication token provided - connecting without auth&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Create FastMCP client for HTTP connection using SSE transport</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="n">Client</span><span class="p">(</span><span class="n">server_url</span><span class="p">,</span> <span class="n">auth</span><span class="o">=</span><span class="n">auth</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># Note: FastMCP Client automatically detects HTTP URLs and uses SSE transport</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;✅ Client created successfully&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="c1"># Ping to server to check if it&#39;s alive</span>',
      '<span class="w">        </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">ping</span><span class="p">()</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🏓 Server ping response: </span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_available_tools</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List available tools in the FastMCP server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Get list of tools from the server using FastMCP context</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">tools</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_tools</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">tools</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🛠️  Available tools (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">tools</span><span class="p">)</span><span class="si">}</span><span class="s2">):&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">                    </span><span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📋 </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">tool</span><span class="o">.</span><span class="n">description</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Description: </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="c1"># Show parameters if available</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool</span><span class="p">,</span> <span class="s1">&#39;inputSchema&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="s1">&#39;properties&#39;</span> <span class="ow">in</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">params</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span><span class="p">[</span><span class="s1">&#39;properties&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>',
      '<span class="w">                                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Parameters: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No tools found in the server&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing tools: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_available_resources</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List available resources in the FastMCP server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Get list of resources from the server using FastMCP context</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">resources</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_resources</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">resources</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">📚 Available resources (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">resources</span><span class="p">)</span><span class="si">}</span><span class="s2">):&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">                    </span><span class="k">for</span> <span class="n">resource</span> <span class="ow">in</span> <span class="n">resources</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📄 </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">uri</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">name</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Name: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">description</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Description: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">mimeType</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   MIME Type: </span><span class="si">{</span><span class="n">resource</span><span class="o">.</span><span class="n">mimeType</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No resources found in the server&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing resources: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">list_available_prompts</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;List available prompts in the FastMCP server.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Get list of prompts from the server using FastMCP context</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">prompts</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_prompts</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">prompts</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">💭 Available prompts (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">prompts</span><span class="p">)</span><span class="si">}</span><span class="s2">):&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">                    </span><span class="k">for</span> <span class="n">prompt</span> <span class="ow">in</span> <span class="n">prompts</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🎯 </span><span class="si">{</span><span class="n">prompt</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="n">prompt</span><span class="o">.</span><span class="n">description</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Description: </span><span class="si">{</span><span class="n">prompt</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">                        </span><span class="c1"># Show parameters if available</span>',
      '<span class="w">                        </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">prompt</span><span class="p">,</span> <span class="s1">&#39;arguments&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">prompt</span><span class="o">.</span><span class="n">arguments</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="n">params</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">                            </span><span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">prompt</span><span class="o">.</span><span class="n">arguments</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">param_info</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">arg</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">arg</span><span class="o">.</span><span class="n">description</span><span class="w"> </span><span class="ow">or</span><span class="w"> </span><span class="s1">&#39;No description&#39;</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">arg</span><span class="o">.</span><span class="n">required</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">param_info</span> <span class="o">+=</span> <span class="s2">&quot; (required)&quot;</span>',
      '<span class="w">                                </span><span class="n">params</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">param_info</span><span class="p">)</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;   Parameters: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;⚠️  No prompts found in the server&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error listing prompts: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">read_resource</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">resource_uri</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Read a specific resource from the server.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            resource_uri: URI of the resource to read</span>',
      '<span class="sd">            </span>',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            str: Resource content</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">read_resource</span><span class="p">(</span><span class="n">resource_uri</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">return</span> <span class="n">result</span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error reading resource </span><span class="si">{</span><span class="n">resource_uri</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">None</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">get_prompt</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">prompt_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">prompt_args</span><span class="p">:</span> <span class="nb">dict</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Get/call a specific prompt from the server.</span>',
      '<span class="w"> </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            prompt_name: Name of the prompt to call</span>',
      '<span class="sd">            prompt_args: Arguments for the prompt (if any)</span>',
      '<span class="w"> </span>',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            str: Generated prompt content</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">prompt_args</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get_prompt</span><span class="p">(</span><span class="n">prompt_name</span><span class="p">,</span> <span class="n">prompt_args</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">get_prompt</span><span class="p">(</span><span class="n">prompt_name</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="c1"># Extract the prompt text from the response</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="s1">&#39;messages&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">result</span><span class="o">.</span><span class="n">messages</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="c1"># FastMCP returns prompts as message objects</span>',
      '<span class="w">                    </span><span class="k">return</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">msg</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">text</span> <span class="k">for</span> <span class="n">msg</span> <span class="ow">in</span> <span class="n">result</span><span class="o">.</span><span class="n">messages</span> <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">content</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">)])</span>',
      '<span class="w">                </span><span class="k">elif</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">):</span>',
      '<span class="w">                    </span><span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Error getting prompt </span><span class="si">{</span><span class="n">prompt_name</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="kc">None</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">process_query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Process a user query, interacting with Claude and FastMCP tools and resources.</span>',
      '<span class="sd">        </span>',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            query: User query</span>',
      '<span class="sd">            </span>',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            str: Final processed response</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">            </span><span class="c1"># Use FastMCP context for all operations</span>',
      '<span class="w">            </span><span class="k">async</span> <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Get available tools and resources</span>',
      '<span class="w">                </span><span class="n">tools_list</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_tools</span><span class="p">()</span>',
      '<span class="w">                </span><span class="n">resources_list</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_resources</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Prepare tools for Claude in correct format</span>',
      '<span class="w">                </span><span class="n">claude_tools</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools_list</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">claude_tool</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">description</span> <span class="ow">or</span> <span class="sa">f</span><span class="s2">&quot;Tool </span><span class="si">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;input_schema&quot;</span><span class="p">:</span> <span class="n">tool</span><span class="o">.</span><span class="n">inputSchema</span> <span class="ow">or</span> <span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span> <span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{}}</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                    </span><span class="n">claude_tools</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">claude_tool</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Add a special tool for reading resources (including template resources)</span>',
      '<span class="w">                </span><span class="n">resource_description</span> <span class="o">=</span> <span class="s2">&quot;Read a resource from the MCP server. &quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">resources_list</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="c1"># Convert URIs to strings to avoid AnyUrl object issues</span>',
      '<span class="w">                    </span><span class="n">resource_uris</span> <span class="o">=</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">uri</span><span class="p">)</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">resources_list</span><span class="p">]</span>',
      '<span class="w">                    </span><span class="n">resource_description</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot;Available static resources: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">resource_uris</span><span class="p">)</span><span class="si">}</span><span class="s2">. &quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">resource_description</span> <span class="o">+=</span> <span class="s2">&quot;Also supports template resources like github://repo/owner/repo_name for GitHub repository information.&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="n">claude_tools</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;read_mcp_resource&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">resource_description</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;input_schema&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                            </span><span class="s2">&quot;resource_uri&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;URI of the resource to read. Can be static (like resource://server_info) or template-based (like github://repo/facebook/react)&quot;</span>',
      '<span class="w">                            </span><span class="p">}</span>',
      '<span class="w">                        </span><span class="p">},</span>',
      '<span class="w">                        </span><span class="s2">&quot;required&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;resource_uri&quot;</span><span class="p">]</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="c1"># Add a special tool for using prompts</span>',
      '<span class="w">                </span><span class="n">prompt_description</span> <span class="o">=</span> <span class="s2">&quot;Generate specialized prompts from the MCP server. Use this when users want to:</span><span class="se">\n</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="s2">&quot;- Create well-structured questions about repositories</span><span class="se">\n</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="s2">&quot;- Get help formulating prompts for specific tasks</span><span class="se">\n</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="s2">&quot;- Generate template questions for analysis</span><span class="se">\n</span><span class="s2">&quot;</span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">prompts_list</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">prompt_names</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span><span class="o">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">prompts_list</span><span class="p">]</span>',
      '<span class="w">                    </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Available prompts: </span><span class="si">{</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">prompt_names</span><span class="p">)</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>',
      '<span class="w">                    </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="s2">&quot;- generate_issues_prompt: Creates structured questions about GitHub repository issues&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="n">prompt_description</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">IMPORTANT: Use prompts when users explicitly ask for help creating questions or prompts, or when they want to formulate better questions about repositories.&quot;</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="n">claude_tools</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                    </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;use_mcp_prompt&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="n">prompt_description</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="s2">&quot;input_schema&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                            </span><span class="s2">&quot;prompt_name&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Name of the prompt to use. Available: &#39;generate_issues_prompt&#39;&quot;</span>',
      '<span class="w">                            </span><span class="p">},</span>',
      '<span class="w">                            </span><span class="s2">&quot;prompt_args&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Arguments for the prompt. For generate_issues_prompt: {opening_brace}&#39;owner&#39;: &#39;repo-owner&#39;, &#39;repo_name&#39;: &#39;repo-name&#39;{closing_brace}&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                    </span><span class="s2">&quot;owner&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Repository owner (e.g., &#39;huggingface&#39;, &#39;microsoft&#39;)&quot;</span>',
      '<span class="w">                                    </span><span class="p">},</span>',
      '<span class="w">                                    </span><span class="s2">&quot;repo_name&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Repository name (e.g., &#39;transformers&#39;, &#39;vscode&#39;)&quot;</span>',
      '<span class="w">                                    </span><span class="p">}</span>',
      '<span class="w">                                </span><span class="p">}</span>',
      '<span class="w">                            </span><span class="p">}</span>',
      '<span class="w">                        </span><span class="p">},</span>',
      '<span class="w">                        </span><span class="s2">&quot;required&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;prompt_name&quot;</span><span class="p">]</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="c1"># Create initial message for Claude</span>',
      '<span class="w">                </span><span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>',
      '<span class="w">                    </span><span class="p">{</span>',
      '<span class="w">                        </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="n">query</span>',
      '<span class="w">                    </span><span class="p">}</span>',
      '<span class="w">                </span><span class="p">]</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># First call to Claude</span>',
      '<span class="w">                </span><span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">                    </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;claude-3-5-sonnet-20241022&quot;</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">6000</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>',
      '<span class="w">                    </span><span class="n">tools</span><span class="o">=</span><span class="n">claude_tools</span> <span class="k">if</span> <span class="n">claude_tools</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">                </span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Process Claude&#39;s response</span>',
      '<span class="w">                </span><span class="n">response_text</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">for</span> <span class="n">content_block</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">if</span> <span class="n">content_block</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;text&quot;</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="n">response_text</span> <span class="o">+=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                        </span>',
      '<span class="w">                    </span><span class="k">elif</span> <span class="n">content_block</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;tool_use&quot;</span><span class="p">:</span>',
      '<span class="w">                        </span><span class="c1"># Claude wants to use a tool</span>',
      '<span class="w">                        </span><span class="n">tool_name</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">name</span>',
      '<span class="w">                        </span><span class="n">tool_args</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">input</span>',
      '<span class="w">                        </span><span class="n">tool_call_id</span> <span class="o">=</span> <span class="n">content_block</span><span class="o">.</span><span class="n">id</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;🔧 Claude wants to use: </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📝 Arguments: </span><span class="si">{</span><span class="n">tool_args</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                        </span>',
      '<span class="w">                        </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="n">tool_name</span> <span class="o">==</span> <span class="s2">&quot;read_mcp_resource&quot;</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="c1"># Handle resource reading</span>',
      '<span class="w">                                </span><span class="n">resource_uri</span> <span class="o">=</span> <span class="n">tool_args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;resource_uri&quot;</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">resource_uri</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">read_resource</span><span class="p">(</span><span class="n">resource_uri</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;📖 Resource read successfully: </span><span class="si">{</span><span class="n">resource_uri</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                                    </span>',
      '<span class="w">                                    </span><span class="c1"># Better handling of resource result</span>',
      '<span class="w">                                    </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool_result</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">):</span>',
      '<span class="w">                                        </span><span class="c1"># If it&#39;s a resource response object, extract content</span>',
      '<span class="w">                                        </span><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">):</span>',
      '<span class="w">                                            </span><span class="n">result_content</span> <span class="o">=</span> <span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                                        </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                            </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                        </span><span class="c1"># If it&#39;s already a string or simple object</span>',
      '<span class="w">                                        </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="s2">&quot;Error: No resource URI provided&quot;</span>',
      '<span class="w">                                    </span><span class="n">result_content</span> <span class="o">=</span> <span class="n">tool_result</span>',
      '<span class="w"> </span>',
      '<span class="w">                            </span><span class="k">elif</span> <span class="n">tool_name</span> <span class="o">==</span> <span class="s2">&quot;use_mcp_prompt&quot;</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="c1"># Handle prompt usage</span>',
      '<span class="w">                                </span><span class="n">prompt_name</span> <span class="o">=</span> <span class="n">tool_args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;prompt_name&quot;</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="n">prompt_args</span> <span class="o">=</span> <span class="n">tool_args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;prompt_args&quot;</span><span class="p">,</span> <span class="p">{})</span>',
      '<span class="w"> </span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">prompt_name</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_prompt</span><span class="p">(</span><span class="n">prompt_name</span><span class="p">,</span> <span class="n">prompt_args</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;💭 Prompt &#39;</span><span class="si">{</span><span class="n">prompt_name</span><span class="si">}</span><span class="s2">&#39; generated successfully&quot;</span><span class="p">)</span>',
      '<span class="w">                                    </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="p">)</span> <span class="k">if</span> <span class="n">tool_result</span> <span class="k">else</span> <span class="s2">&quot;Error generating prompt&quot;</span>',
      '<span class="w">                                </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">tool_result</span> <span class="o">=</span> <span class="s2">&quot;Error: No prompt name provided&quot;</span>',
      '<span class="w">                                    </span><span class="n">result_content</span> <span class="o">=</span> <span class="n">tool_result</span>',
      '<span class="w"> </span>',
      '<span class="w">                            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="c1"># Execute regular tool on the FastMCP server</span>',
      '<span class="w">                                </span><span class="n">tool_result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">call_tool</span><span class="p">(</span><span class="n">tool_name</span><span class="p">,</span> <span class="n">tool_args</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;✅ Tool executed successfully&quot;</span><span class="p">)</span>',
      '<span class="w">                                </span><span class="n">result_content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">tool_result</span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Add tool result to the conversation</span>',
      '<span class="w">                            </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span>',
      '<span class="w">                            </span><span class="p">})</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Format result for Claude</span>',
      '<span class="w">                            </span><span class="k">if</span> <span class="n">tool_result</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                    </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                                    </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tool_result&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;tool_use_id&quot;</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;Tool result: </span><span class="si">{</span><span class="n">result_content</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                                    </span><span class="p">}]</span>',
      '<span class="w">                                </span><span class="p">})</span>',
      '<span class="w">                            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>',
      '<span class="w">                                    </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">                                    </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[{</span>',
      '<span class="w">                                        </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tool_result&quot;</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;tool_use_id&quot;</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>',
      '<span class="w">                                        </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Tool executed without response content&quot;</span>',
      '<span class="w">                                    </span><span class="p">}]</span>',
      '<span class="w">                                </span><span class="p">})</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Second call to Claude with the tool result</span>',
      '<span class="w">                            </span><span class="n">final_response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">anthropic</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">                                </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;claude-3-5-sonnet-20241022&quot;</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">6000</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>',
      '<span class="w">                                </span><span class="n">tools</span><span class="o">=</span><span class="n">claude_tools</span> <span class="k">if</span> <span class="n">claude_tools</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">                            </span><span class="p">)</span>',
      '<span class="w">                            </span>',
      '<span class="w">                            </span><span class="c1"># Extract text from the final response</span>',
      '<span class="w">                            </span><span class="k">for</span> <span class="n">final_content</span> <span class="ow">in</span> <span class="n">final_response</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
      '<span class="w">                                </span><span class="k">if</span> <span class="n">final_content</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s2">&quot;text&quot;</span><span class="p">:</span>',
      '<span class="w">                                    </span><span class="n">response_text</span> <span class="o">+=</span> <span class="n">final_content</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w">                                    </span>',
      '<span class="w">                        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                            </span><span class="n">error_msg</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;❌ Error executing </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                            </span><span class="nb">print</span><span class="p">(</span><span class="n">error_msg</span><span class="p">)</span>',
      '<span class="w">                            </span><span class="n">response_text</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="si">{</span><span class="n">error_msg</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">return</span> <span class="n">response_text</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">error_msg</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;❌ Error processing query: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>',
      '<span class="w">            </span><span class="nb">print</span><span class="p">(</span><span class="n">error_msg</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">return</span> <span class="n">error_msg</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">chat_loop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">        Main chat loop with user interaction.</span>',
      '<span class="sd">        &quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤖 FastMCP HTTP client started. Write &#39;quit&#39;, &#39;q&#39;, &#39;exit&#39;, &#39;salir&#39; to exit.&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;💬 You can ask questions about GitHub repositories!&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📚 The client can use tools, resources, and prompts from the FastMCP server&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;💭 PROMPT Examples:&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;   • &#39;Generate a prompt for asking about issues in facebook/react&#39;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;   • &#39;Help me create a good question about microsoft/vscode issues&#39;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;   • &#39;I need a structured prompt for analyzing tensorflow/tensorflow&#39;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🔧 DIRECT Examples:&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;   • &#39;Show me the issues in huggingface/transformers&#39;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;   • &#39;Get repository info for github://repo/google/chrome&#39;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;-&quot;</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
      '<span class="w">            </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># Request user input</span>',
      '<span class="w">                </span><span class="n">user_input</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">👤 You: &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="n">user_input</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;quit&#39;</span><span class="p">,</span> <span class="s1">&#39;q&#39;</span><span class="p">,</span> <span class="s1">&#39;exit&#39;</span><span class="p">,</span> <span class="s1">&#39;salir&#39;</span><span class="p">]:</span>',
      '<span class="w">                    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;👋 Bye!&quot;</span><span class="p">)</span>',
      '<span class="w">                    </span><span class="k">break</span>',
      '<span class="w">                    </span>',
      '<span class="w">                </span><span class="k">if</span> <span class="ow">not</span> <span class="n">user_input</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="k">continue</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤔 Claude is thinking...&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Process query</span>',
      '<span class="w">                </span><span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">process_query</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="c1"># Show response</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">🤖 Claude: </span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">👋 Disconnecting...&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">break</span>',
      '<span class="w">            </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">❌ Error in chat: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">continue</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">cleanup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">&quot;&quot;&quot;Clean up resources and close connections.&quot;&quot;&quot;</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;🧹 Cleaning up resources...&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># FastMCP Client cleanup is handled automatically by context manager</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">exit_stack</span><span class="o">.</span><span class="n">aclose</span><span class="p">()</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;✅ Resources released&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">main</span><span class="p">():</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;</span>',
      '<span class="sd">    Main function that initializes and runs the FastMCP client.</span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Verify command line arguments</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">3</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;❌ Usage: python client.py &amp;lt;http_server_url&amp;gt; [auth_token]&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Example: python client.py http://localhost:8000/mcp&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Example with auth: python client.py http://localhost:8000/mcp &amp;lt;your_bearer_token&amp;gt;&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Note: Now connects to HTTP server instead of executing script&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="n">server_url</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
      '<span class="w">    </span><span class="n">auth_token</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Validate URL format</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="n">server_url</span><span class="o">.</span><span class="n">startswith</span><span class="p">((</span><span class="s1">&#39;http://&#39;</span><span class="p">,</span> <span class="s1">&#39;https://&#39;</span><span class="p">)):</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;❌ Error: Server URL must start with http:// or https://&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;📝 Example: python client.py http://localhost:8000&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="c1"># Create and run client</span>',
      '<span class="w">    </span><span class="n">client</span> <span class="o">=</span> <span class="n">FastMCPClient</span><span class="p">()</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">try</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Connect to the server</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">connect_to_server</span><span class="p">(</span><span class="n">server_url</span><span class="p">,</span> <span class="n">auth_token</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="c1"># List available tools, resources, and prompts after connection</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_available_tools</span><span class="p">()</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">list_available_resources</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="c1"># Start chat loop</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">chat_loop</span><span class="p">()</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;❌ Fatal error: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">finally</span><span class="p">:</span>',
      '<span class="w">        </span><span class="c1"># Ensure resources are cleaned up</span>',
      '<span class="w">        </span><span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="n">cleanup</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="c1"># Entry point of the script</span>',
      '<span class="w">    </span><span class="n">asyncio</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting client_MCP/client.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Añadimos en el método <code>connect_to_server</code> el ping</p>
      <div class='highlight'><pre><code># Ping to server to check if it&#39;s alive
      async with self.client as client:
          response = await client.ping()
          print(f"🏓 Server ping response: {opening_brace}response{closing_brace}")</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Prueba del ping">Prueba del ping<a class="anchor-link" href="#Prueba del ping"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 45" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Levantamos primero el servidor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">gitHub_MCP_server</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">run</span> <span class="n">github_server</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🔐 Generating RSA key pair for authentication...',
          '🎫 Development token generated:',
          '&#x20;&#x20;&#x20;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL2dpdGh1Yi1tY3AubWF4Zm4uZGV2Iiwic3ViIjoiZGV2LXVzZXItbWF4Zm4iLCJpYXQiOjE3NTExMDkxMTIsImV4cCI6MTc1MTE5NTUxMiwiYXVkIjoiZ2l0aHViLW1jcC1zZXJ2ZXIiLCJzY29wZSI6ImdpdGh1YjpyZWFkIGdpdGh1Yjp3cml0ZSJ9.N_3QPIHW3BSn1iSSkrcaoelbwA-0D9Z3gelILb8fu1JC2JhCgtnJ0IwNqJrVhAkU0CNcykT36Q3mpCgy0hDhnFKkO9SRGVFgSw71voF5YNOkzzBY14cJERolYy9UDZA6geHxwR0rKyCGYkDH-NAKPuYWC9K7UlGfuOuzh3mp-XQ3Zy4mkyvfhiuwuaJ5_MdR0YtJj6opSRbEsVs1PtFYZETPExx3iBGck2qzLek-LxAJ6mjagPncikWeDwaYShFNPO0Ub3wm2Ok_ak_TChmN3W15MknfBXZrKcIhsNIhCrXJjZkSezp5JX49zoljdK2By9-QH1xmWCQqif_APD-hNQ',
          '💡 Use this token in the client to authenticate',
          '------------------------------------------------------------',
          '/Users/macm1/Documents/web/portafolio/posts/gitHub_MCP_server/github_server.py:412: DeprecationWarning: Mount prefixes are now optional and the first positional argument should be the server you want to mount.',
          '&#x20;&#x20;mcp.mount(&quot;sub_mcp&quot;, sub_mcp)',
          'DEBUG: Starting FastMCP GitHub server...',
          'DEBUG: Server name: GitHubMCP',
          '[06/28/25 13:11:52] INFO     Starting MCP server &#x27;GitHubMCP&#x27; with ]8;id=186381;file:///Users/macm1/Documents/web/portafolio/posts/gitHub_MCP_server/.venv/lib/python3.11/site-packages/fastmcp/server/server.py\server.py]8;;\:]8;id=502881;file:///Users/macm1/Documents/web/portafolio/posts/gitHub_MCP_server/.venv/lib/python3.11/site-packages/fastmcp/server/server.py#1297\\1297]8;;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;transport &#x27;streamable-http&#x27; on',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;http://0.0.0.0:8000/mcp/',
          'INFO:     Started server process [31017]',
          'INFO:     Waiting for application startup.',
          'INFO:     Application startup complete.',
          'INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y ahora ejecutamos el cliente con el token de autenticación</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">client_MCP</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">source</span> <span class="o">.</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">uv</span> <span class="n">run</span> <span class="n">client</span><span class="o">.</span><span class="n">py</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">mcp</span> <span class="n">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9</span><span class="o">.</span><span class="n">eyJpc3MiOiJodHRwczovL2dpdGh1Yi1tY3AubWF4Zm4uZGV2Iiwic3ViIjoiZGV2LXVzZXItbWF4Zm4iLCJpYXQiOjE3NTExMDkxMTIsImV4cCI6MTc1MTE5NTUxMiwiYXVkIjoiZ2l0aHViLW1jcC1zZXJ2ZXIiLCJzY29wZSI6ImdpdGh1YjpyZWFkIGdpdGh1Yjp3cml0ZSJ9</span><span class="o">.</span><span class="n">N_3QPIHW3BSn1iSSkrcaoelbwA</span><span class="o">-</span><span class="mi">0</span><span class="n">D9Z3gelILb8fu1JC2JhCgtnJ0IwNqJrVhAkU0CNcykT36Q3mpCgy0hDhnFKkO9SRGVFgSw71voF5YNOkzzBY14cJERolYy9UDZA6geHxwR0rKyCGYkDH</span><span class="o">-</span><span class="n">NAKPuYWC9K7UlGfuOuzh3mp</span><span class="o">-</span><span class="n">XQ3Zy4mkyvfhiuwuaJ5_MdR0YtJj6opSRbEsVs1PtFYZETPExx3iBGck2qzLek</span><span class="o">-</span><span class="n">LxAJ6mjagPncikWeDwaYShFNPO0Ub3wm2Ok_ak_TChmN3W15MknfBXZrKcIhsNIhCrXJjZkSezp5JX49zoljdK2By9</span><span class="o">-</span><span class="n">QH1xmWCQqif_APD</span><span class="o">-</span><span class="n">hNQ</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '🔗 Connecting to FastMCP HTTP server: http://localhost:8000/mcp',
          '🔐 Using Bearer token authentication',
          '✅ Client created successfully',
          '🏓 Server ping response: True',
          '🛠️  Available tools (2):',
          '==================================================',
          '📋 sub_mcp_hello_world',
          '&#x20;&#x20;&#x20;Description: Returns a simple greeting.',
          '&#x20;&#x20;&#x20;Parameters:',
          '📋 list_repository_issues',
          '&#x20;&#x20;&#x20;Description: Lists open issues for a given GitHub repository.',
          'Args:',
          '&#x20;&#x20;&#x20;&#x20;owner: The owner of the repository (e.g., &#x27;modelcontextprotocol&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;repo_name: The name of the repository (e.g., &#x27;python-sdk&#x27;)',
          '&#x20;&#x20;&#x20;&#x20;ctx: The context of the request',
          '&#x20;&#x20;&#x20;&#x20;user_id: The user ID (automatically injected by the server)',
          'Returns:',
          '&#x20;&#x20;&#x20;&#x20;list[dict]: A list of dictionaries, each containing information about an issue',
          'Parameters: owner, repo_name',
          '📚 Available resources (1):',
          '==================================================',
          '📄 resource://server_info',
          '&#x20;&#x20;&#x20;Name: server_info',
          '&#x20;&#x20;&#x20;Description: Returns information about the server.',
          '&#x20;&#x20;&#x20;MIME Type: text/plain',
          '🤖 FastMCP HTTP client started. Write &#x27;quit&#x27;, &#x27;q&#x27;, &#x27;exit&#x27;, &#x27;salir&#x27; to exit.',
          '💬 You can ask questions about GitHub repositories!',
          '📚 The client can use tools, resources, and prompts from the FastMCP server',
          '💭 PROMPT Examples:',
          '&#x20;&#x20;&#x20;• &#x27;Generate a prompt for asking about issues in facebook/react&#x27;',
          '&#x20;&#x20;&#x20;• &#x27;Help me create a good question about microsoft/vscode issues&#x27;',
          '&#x20;&#x20;&#x20;• &#x27;I need a structured prompt for analyzing tensorflow/tensorflow&#x27;',
          '🔧 DIRECT Examples:',
          '&#x20;&#x20;&#x20;• &#x27;Show me the issues in huggingface/transformers&#x27;',
          '&#x20;&#x20;&#x20;• &#x27;Get repository info for github://repo/google/chrome&#x27;',
          '------------------------------------------------------------',
          '👤 You: q',
          '👋 Bye!',
          '🧹 Cleaning up resources...',
          '✅ Resources released',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos el servidor ha respondido al ping</p>
      <div class='highlight'><pre><code>🏓 Server ping response: True</code></pre></div>
      </section>







    </div>

  </section>

</PostLayout>
