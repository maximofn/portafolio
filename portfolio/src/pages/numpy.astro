---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Calculo matricial con NumPy';
const end_url = 'numpy';
const description = '🟢 Aprende a hacer todo el cálculo matricial que quieras de una manera ágil con NumPy';
const keywords = 'NumPy, cálculo matricial, Python, tutorial, principiantes';
const languaje = 'ES';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/numpy-icon.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=212
    image_height=238
    image_extension=webp
    article_date=2021-04-23+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#1.-Resumen"><h2>1. Resumen</h2></a>
      <a class="anchor-link" href="#2.-%C2%BFQu%C3%A9-es-NumPy?"><h2>2. ¿Qué es NumPy?</h2></a>
      <a class="anchor-link" href="#2.1.-NumPy-como-np"><h3>2.1. NumPy como <code>np</code></h3></a>
      <a class="anchor-link" href="#3.-Velocidad-de-NumPy"><h2>3. Velocidad de NumPy</h2></a>
      <a class="anchor-link" href="#4.-Matrices-en-NumPy"><h2>4. Matrices en NumPy</h2></a>
      <a class="anchor-link" href="#4.1.-C%C3%B3mo-crear-matrices"><h3>4.1. Cómo crear matrices</h3></a>
      <a class="anchor-link" href="#4.2.-Dimensiones-de-las-matrices"><h3>4.2. Dimensiones de las matrices</h3></a>
      <a class="anchor-link" href="#4.3.-Tama%C3%B1o-de-las-matrices"><h3>4.3. Tamaño de las matrices</h3></a>
      <a class="anchor-link" href="#5.-Tipo-de-datos"><h2>5. Tipo de datos</h2></a>
      <a class="anchor-link" href="#6.-Operaciones-matem%C3%A1ticas"><h2>6. Operaciones matemáticas</h2></a>
      <a class="anchor-link" href="#6.1.-Operaciones-b%C3%A1sicas"><h3>6.1. Operaciones básicas</h3></a>
      <a class="anchor-link" href="#6.2.-Funciones-sobre-matrices"><h3>6.2. Funciones sobre matrices</h3></a>
      <a class="anchor-link" href="#6.3.-Broadcasting"><h3>6.3. Broadcasting</h3></a>
      <a class="anchor-link" href="#7.-Indexado-de-matrices"><h2>7. Indexado de matrices</h2></a>
      <a class="anchor-link" href="#7.1.-Porciones-de-matrices"><h3>7.1. Porciones de matrices</h3></a>
      <a class="anchor-link" href="#7.2.-Iteraci%C3%B3n-sobre-matrices"><h3>7.2. Iteración sobre matrices</h3></a>
      <a class="anchor-link" href="#8.-Copia-de-matrices"><h2>8. Copia de matrices</h2></a>
      <a class="anchor-link" href="#8.1.-Copy"><h3>8.1. Copy</h3></a>
      <a class="anchor-link" href="#8.2.-View"><h3>8.2. View</h3></a>
      <a class="anchor-link" href="#8.3.-Propietario-de-los-datos"><h3>8.3. Propietario de los datos</h3></a>
      <a class="anchor-link" href="#9.-Forma-de-las-matrices"><h2>9. Forma de las matrices</h2></a>
      <a class="anchor-link" href="#9.1.-Reshape"><h3>9.1. Reshape</h3></a>
      <a class="anchor-link" href="#9.2.-Dimensi%C3%B3n-desconocida"><h3>9.2. Dimensión desconocida</h3></a>
      <a class="anchor-link" href="#9.3.-Aplanamiento-de-matrices"><h3>9.3. Aplanamiento de matrices</h3></a>
      <a class="anchor-link" href="#9.4.-Matriz-traspuesta"><h3>9.4. Matriz traspuesta</h3></a>
      <a class="anchor-link" href="#10.-Apilado-de-matrices"><h2>10. Apilado de matrices</h2></a>
      <a class="anchor-link" href="#10.1.-Apilamiento-vertical"><h3>10.1. Apilamiento vertical</h3></a>
      <a class="anchor-link" href="#10.2.-Apilamiento-horizontal"><h3>10.2. Apilamiento horizontal</h3></a>
      <a class="anchor-link" href="#10.3.-Apilamiento-en-profundidad"><h3>10.3. Apilamiento en profundidad</h3></a>
      <a class="anchor-link" href="#10.3.-Apilamiento-personalizado"><h3>10.3. Apilamiento personalizado</h3></a>
      <a class="anchor-link" href="#11.-Dividir-matrices"><h2>11. Dividir matrices</h2></a>
      <a class="anchor-link" href="#11.1.-Dividir-verticalmente"><h3>11.1. Dividir verticalmente</h3></a>
      <a class="anchor-link" href="#11.2.-Dividir-horizontalmente"><h3>11.2. Dividir horizontalmente</h3></a>
      <a class="anchor-link" href="#11.3.-Dividir-de-manera-personalizada"><h3>11.3. Dividir de manera personalizada</h3></a>
      <a class="anchor-link" href="#12.-B%C3%BAsqueda-en-matrices"><h2>12. Búsqueda en matrices</h2></a>
      <a class="anchor-link" href="#13.-Ordenar-matrices"><h2>13. Ordenar matrices</h2></a>
      <a class="anchor-link" href="#14.-Filtros-en-matrices"><h2>14. Filtros en matrices</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="C%C3%A1lculo-matricial-con-NumPy">Cálculo matricial con NumPy<a class="anchor-link" href="#C%C3%A1lculo-matricial-con-NumPy"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 0" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="1.-Resumen">1. Resumen<a class="anchor-link" href="#1.-Resumen"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 1" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver una pequeña introducción a la librería de cálculo matricial <code>NumPy</code>. Esta librería está diseñada para todo tipo de cálculo matricial, por lo que nos vamos a quedar solo con la parte que nos será útil para entender los cálculos dentro de las redes neuronales, pero nos dejaremos fuera cosas interesantes como el uso de la librería para el álgebra lineal</p>
      <p align="center">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" alt="No description has been provided for this image" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/numpy-icon.webp" width="212" height="238"/>
      </p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="2.-%C2%BFQu%C3%A9-es-NumPy?">2. ¿Qué es NumPy?<a class="anchor-link" href="#2.-%C2%BFQu%C3%A9-es-NumPy?"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 2" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>NumPy es una librería de Python diseñada para realizar cálculo matricial. El cálculo matricial es algo que se utiliza mucho en ciencia en general y en data science en particular, por lo que es necesario tener una librería que haga esto muy bien.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Su nombre quiere decir Numerical Python</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Su objeto principal es el <code>ndarray</code>, que encapsula matrices de dimensión <code>n</code> de tipos de datos homogéneos, a diferencia de las listas de Python, que pueden tener datos de distintos tipos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>NumPy tiene el objetivo de realizar el cálculo matricial mucho más rápido que con las listas de Python, pero ¿cómo es esto posible?</p>
      <ul>
      <li>NumPy utiliza código compilado, mientras que Python utiliza código interpretado. La diferencia es que Python en el momento de ejecución tiene que interpretar, compilar y ejecutar el código, mientras que NumPy ya está compilado, por lo que se ejecuta más rápido</li>
      <li>Los <code>ndarray</code>s tienen un tamaño fijo, a diferencia de las listas de Python que son dinámicas. Si en NumPy se quiere modificar el tamaño de una matriz, se creará una nueva y se eliminará la antigua</li>
      <li>Todos los elementos de los <code>ndarray</code>s son del mismo tipo de dato, a diferencia de las listas de Python que pueden tener elementos de distintos tipos</li>
      <li>Parte del código de NumPy está escrita en C/C++ (mucho más rápida que Python)</li>
      <li>Los datos de las matrices se almacenan en memoria de manera continua, a diferencia de las listas de Python, lo que hace que sea mucho más rápido manipularlos</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>NumPy ofrece la facilidad de usar código sencillo de escribir y de leer, pero que está escrito y precompilado en C, lo que lo hace mucho más rápido.</p>
      <p>Supongamos que queremos multiplicar dos vectores, esto se haría en C de la siguiente manera:</p>
      <div class="highlight"><pre><span></span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">rows</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="p">{opening_brace}</span>
      <span class="w">  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">columns</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">++</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="p">{opening_brace}</span>
      <span class="w">    </span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">*</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
      <span class="w">  </span><span class="p">{closing_brace}</span>
      <span class="p">{closing_brace}</span>
      </pre></div>
      <p>NumPy ofrece la posibilidad de ejecutar este código por debajo, pero de una manera mucho más fácil de escribir y de entender mediante</p>
      <div class="highlight"><pre><span></span><span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>NumPy ofrece código vectorizado, que supone no tener que escribir bucles, pero que sin embargo sí están siendo ejecutados por debajo en código C optimizado y precompilado. Esto tiene las siguientes ventajas:</p>
      <ul>
      <li>El código es más fácil de escribir y de leer</li>
      <li>Al necesitarse menos líneas de código, hay menor probabilidad de introducir errores</li>
      <li>El código se parece más a la notación matemática</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.1.-NumPy-como-np">2.1. NumPy como <code>np</code><a class="anchor-link" href="#2.1.-NumPy-como-np"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 3" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Generalmente a la hora de importar NumPy se suele importar con el alias de <code>np</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1.18.1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="3.-Velocidad-de-NumPy">3. Velocidad de NumPy<a class="anchor-link" href="#3.-Velocidad-de-NumPy"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 4" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como se ha explicado, NumPy realiza el cálculo mucho más rápido que las listas de Python, veamos un ejemplo en el que se realiza el producto escalar de dos matrices, mediante listas de Python y mediante <code>ndarray</code>s</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">time</span>',
          ' ',
          '<span class="c1"># Dimensión de las matrices</span>',
          '<span class="n">dim</span> <span class="o">=</span> <span class="mi">1000</span>',
          '<span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="n">dim</span><span class="p">,</span> <span class="n">dim</span><span class="p">)</span>',
          ' ',
          '<span class="c1"># Se crean dos ndarrays de NumPy de dimensión dim x dim</span>',
          '<span class="n">ndarray_a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">shape</span><span class="p">)</span>',
          '<span class="n">ndarray_b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">shape</span><span class="p">)</span>',
          ' ',
          '<span class="c1"># Se crean dos listas de Python de dimensión dim x dim a partir de los ndarrays</span>',
          '<span class="n">list_a</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">ndarray_a</span><span class="p">)</span>',
          '<span class="n">list_b</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">ndarray_b</span><span class="p">)</span>',
          ' ',
          '<span class="c1"># Se crean el ndarray y la lista de Python donde se guardarán los resultados</span>',
          '<span class="n">ndarray_c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">shape</span><span class="p">)</span>',
          '<span class="n">list_c</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">ndarray_c</span><span class="p">)</span>',
          ' ',
          '<span class="c1"># Producto escalar de dos listas de python</span>',
          '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>',
          '<span class="k">for</span> <span class="n">fila</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">dim</span><span class="p">):</span>',
          '  <span class="k">for</span> <span class="n">columna</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">dim</span><span class="p">):</span>',
          '    <span class="n">list_c</span><span class="p">[</span><span class="n">fila</span><span class="p">][</span><span class="n">columna</span><span class="p">]</span> <span class="o">=</span> <span class="n">list_a</span><span class="p">[</span><span class="n">fila</span><span class="p">][</span><span class="n">columna</span><span class="p">]</span> <span class="o">*</span> <span class="n">list_b</span><span class="p">[</span><span class="n">fila</span><span class="p">][</span><span class="n">columna</span><span class="p">]</span>',
          '<span class="n">t</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>',
          '<span class="n">t_listas</span> <span class="o">=</span> <span class="n">t</span><span class="o">-</span><span class="n">t0</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Tiempo para realizar el producto escalar de dos listas de Python de dimensiones </span><span class="si">{</span><span class="n">dim</span><span class="si">}</span><span class="s2">x</span><span class="si">{</span><span class="n">dim</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">t_listas</span><span class="si">:</span><span class="s2">.4f</span><span class="si">}</span><span class="s2"> ms"</span><span class="p">)</span>',
          ' ',
          ' ',
          '<span class="c1"># Producto escalar de dos ndarrays de NumPy</span>',
          '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>',
          '<span class="n">ndarray_c</span> <span class="o">=</span> <span class="n">ndarray_a</span> <span class="o">*</span> <span class="n">ndarray_b</span>',
          '<span class="n">t</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>',
          '<span class="n">t_ndarrays</span> <span class="o">=</span> <span class="n">t</span><span class="o">-</span><span class="n">t0</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Tiempo para realizar el producto escalar de dos ndarrays de NumPy de dimensiones </span><span class="si">{</span><span class="n">dim</span><span class="si">}</span><span class="s2">x</span><span class="si">{</span><span class="n">dim</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">t_ndarrays</span><span class="si">:</span><span class="s2">.4f</span><span class="si">}</span><span class="s2"> ms"</span><span class="p">)</span>',
          ' ',
          '<span class="c1"># Comparación de tiempos</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">Hacer el cálculo con listas de Python tarda </span><span class="si">{</span><span class="n">t_listas</span><span class="o">/</span><span class="n">t_ndarrays</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> veces más rápido que con ndarrays de NumPy"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Tiempo para realizar el producto escalar de dos listas de Python de dimensiones 1000x1000: 0.5234 ms',
          'Tiempo para realizar el producto escalar de dos ndarrays de NumPy de dimensiones 1000x1000: 0.0017 ms',
          'Hacer el cálculo con listas de Python tarda 316.66 veces más rápido que con ndarrays de NumPy',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="4.-Matrices-en-NumPy">4. Matrices en NumPy<a class="anchor-link" href="#4.-Matrices-en-NumPy"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 5" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En NumPy una matriz es un objeto <code>ndarray</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[1 2 3 4 5]',
          '&lt;class \'numpy.ndarray\'&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.1.-C%C3%B3mo-crear-matrices">4.1. Cómo crear matrices<a class="anchor-link" href="#4.1.-C%C3%B3mo-crear-matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 6" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Con el método <code>array()</code> se pueden crear <code>ndarray</code>s introduciendo listas de Python (como el ejemplo anterior) o tuplas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[1 2 3 4 5]',
          '&lt;class \'numpy.ndarray\'&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Con el método <code>zeros()</code> se pueden crear matrices llenas de ceros</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[0. 0. 0. 0.]',
          ' [0. 0. 0. 0.]',
          ' [0. 0. 0. 0.]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>El método <code>zeros_like(A)</code> devuelve una matriz con la misma forma que la matriz A, pero llena de ceros</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros_like</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[0 0 0 0 0]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Con el método <code>ones()</code> se pueden crear matrices llenas de unos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[1. 1. 1.]',
          ' [1. 1. 1.]',
          ' [1. 1. 1.]',
          ' [1. 1. 1.]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>El método <code>ones_like(A)</code> devuelve una matriz con la misma forma que la matriz A, pero llena de unos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones_like</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[1 1 1 1 1]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Con el método <code>empty()</code> se pueden crear matrices con las dimensiones que deseemos, pero inicializadas aleatoriamente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">((</span><span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[4.66169180e-310 2.35541533e-312 2.41907520e-312]',
          ' [2.14321575e-312 2.46151512e-312 2.31297541e-312]',
          ' [2.35541533e-312 2.05833592e-312 2.22809558e-312]',
          ' [2.56761491e-312 2.48273508e-312 2.05833592e-312]',
          ' [2.05833592e-312 2.29175545e-312 2.07955588e-312]',
          ' [2.14321575e-312 0.00000000e+000 0.00000000e+000]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>El método <code>empty_like(A)</code> devuelve una matriz con la misma forma que la matriz A, pero inicializada aleatoriamente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty_like</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[4607182418800017408 4611686018427387904 4613937818241073152',
          ' 4616189618054758400 4617315517961601024]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Con el método <code>arange(start, stop, step)</code> se pueden crear matrices en un rango determinado. Este método es similar al método <code>range()</code> de Python.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[10 15 20 25]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Cuando <code>arange</code> se usa con argumentos de coma flotante, generalmente no es posible predecir el número de elementos obtenidos, debido a que la precisión de la coma flotante es finita.</p>
      <p>Por este motivo, suele ser mejor utilizar la función <code>linspace(start, stop, n)</code> que recibe como argumento la cantidad de elementos que queremos, en lugar del paso.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[0.   0.25 0.5  0.75 1.   1.25 1.5  1.75 2.  ]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por último, si queremos crear matrices con números aleatorios, podemos usar la función <code>random.rand</code> con una tupla con las dimensiones como parámetro</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[0.32726085 0.65571767 0.73126697]',
          ' [0.91938206 0.9862451  0.95033649]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.2.-Dimensiones-de-las-matrices">4.2. Dimensiones de las matrices<a class="anchor-link" href="#4.2.-Dimensiones-de-las-matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 7" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En NumPy podemos crear matrices de cualquier dimensión. Para obtener la dimensión de un array utilizamos el método <code>ndim</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Matriz de dimensión 0, lo que equivaldría a un número</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">ndim</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '42',
          '0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Matriz de dimensión 1, lo que equivaldría a un vector</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">ndim</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[1 2 3 4 5]',
          '1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Matriz de dimensión 2, lo que equivaldría a una matriz</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">ndim</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[ 1  2  3  4  5]',
          ' [ 6  7  8  9 10]]',
          '2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Matriz de dimensión 3</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">ndim</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[[ 1  2  3  4  5]',
          '  [ 6  7  8  9 10]]',
          ' [[11 12 13 14 15]',
          '  [16 17 18 19 20]]]',
          '3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Matriz de dimensión N. A la hora de crear <code>ndarray</code>s se puede establecer el número de dimensiones mediante el parámetro <code>ndim</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="n">ndmin</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">ndim</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[[[[[1 2 3 4 5]]]]]]',
          '6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.3.-Tama%C3%B1o-de-las-matrices">4.3. Tamaño de las matrices<a class="anchor-link" href="#4.3.-Tama%C3%B1o-de-las-matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 8" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si en vez de la dimensión de la matriz, queremos ver su tamaño, podemos usar el método <code>shape</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(2, 2, 5)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="5.-Tipo-de-datos">5. Tipo de datos<a class="anchor-link" href="#5.-Tipo-de-datos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 9" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Los datos que pueden almacenar las matrices de NumPy son los siguientes:</p>
      <ul>
      <li><code>i</code> - entero</li>
      <li><code>b</code> - booleano</li>
      <li><code>u</code> - entero sin signo</li>
      <li><code>f</code> - flotante</li>
      <li><code>c</code> - Complejo flotante</li>
      <li><code>m</code> - Timedelta</li>
      <li><code>M</code> - DateTime</li>
      <li><code>O</code> - Objeto</li>
      <li><code>S</code> - string</li>
      <li><code>U</code> - Unicode string</li>
      <li><code>V</code> - Fragmento de memoria fijo para otro tipo (void)</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos comprobar el tipo de datos que tiene una matriz mediante <code>dtype</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
          '',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="s1">\'apple\'</span><span class="p">,</span> <span class="s1">\'banana\'</span><span class="p">,</span> <span class="s1">\'cherry\'</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'int64',
          '&lt;U6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>También podemos crear matrices indicando el tipo de dato que queremos que tenga mediante <code>dtype</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">\'i\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Enteros:"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
          ' ',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">\'f\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">Float:"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
          ' ',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">\'f\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">Complejos:"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
          ' ',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">\'S\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">String:"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
          ' ',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">\'U\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">Unicode string:"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
          ' ',
          '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">\'O\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">Objeto:"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Enteros:',
          '[1 2 3 4]',
          'int32',
          'Float:',
          '[1. 2. 3. 4.]',
          'float32',
          'Complejos:',
          '[1. 2. 3. 4.]',
          'float32',
          'String:',
          '[b\'1\' b\'2\' b\'3\' b\'4\']',
          '|S1',
          'Unicode string:',
          '[\'1\' \'2\' \'3\' \'4\']',
          '&lt;U1',
          'Objeto:',
          '[1 2 3 4]',
          'object',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="6.-Operaciones-matem%C3%A1ticas">6. Operaciones matemáticas<a class="anchor-link" href="#6.-Operaciones-matem%C3%A1ticas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 10" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.1.-Operaciones-b%C3%A1sicas">6.1. Operaciones básicas<a class="anchor-link" href="#6.1.-Operaciones-b%C3%A1sicas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 11" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Las operaciones matriciales se realizan por elementos, por ejemplo, si sumamos dos matrices, se sumarán los elementos de cada matriz de la misma posición, al igual que se hace en la suma matemática de dos matrices</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
          '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz A: tamaño </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz B: tamaño </span><span class="si">{</span><span class="n">B</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">B</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz C: tamaño </span><span class="si">{</span><span class="n">C</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">D</span> <span class="o">=</span> <span class="n">A</span> <span class="o">-</span> <span class="n">B</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz D: tamaño </span><span class="si">{</span><span class="n">D</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">D</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Matriz A: tamaño (3,)',
          '[1 2 3]',
          'Matriz B: tamaño (3,)',
          '[1 2 3]',
          'Matriz C: tamaño (3,)',
          '[2 4 6]',
          'Matriz D: tamaño (3,)',
          '[0 0 0]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Sin embargo, si hacemos la multiplicación de dos matrices, también se hace la multiplicación de cada elemento de las matrices (producto escalar)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
          '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">]])</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz A: tamaño </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz B: tamaño </span><span class="si">{</span><span class="n">B</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          ' ',
          '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">*</span> <span class="n">B</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz C: tamaño </span><span class="si">{</span><span class="n">C</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Matriz A: tamaño (2, 2)',
          '[[3 5]',
          ' [4 1]]',
          'Matriz B: tamaño (2, 2)',
          '[[ 1  2]',
          ' [-3  0]]',
          'Matriz C: tamaño (2, 2)',
          '[[  3  10]',
          ' [-12   0]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para hacer el producto matricial que se ha enseñado en matemáticas toda la vida hay que usar el operador <code>@</code> o el método <code>dot</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]])</span>',
          '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">]])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz A: tamaño </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz B: tamaño </span><span class="si">{</span><span class="n">B</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">@</span> <span class="n">B</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz C: tamaño </span><span class="si">{</span><span class="n">C</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">D</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz D: tamaño </span><span class="si">{</span><span class="n">D</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">D</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Matriz A: tamaño (3, 2)',
          '[[ 3  5]',
          ' [ 4  1]',
          ' [ 6 -1]]',
          'Matriz B: tamaño (2, 3)',
          '[[ 1  2  3]',
          ' [-3  0  4]]',
          'Matriz C: tamaño (3, 3)',
          '[[-12   6  29]',
          ' [  1   8  16]',
          ' [  9  12  14]]',
          'Matriz D: tamaño (3, 3)',
          '[[-12   6  29]',
          ' [  1   8  16]',
          ' [  9  12  14]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si en vez de crear una matriz nueva, se quiere modificar alguna existente se pueden usar los operadores <code>+=</code>, <code>-=</code> o <code>*=</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
          '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">]])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz A: tamaño </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz B: tamaño </span><span class="si">{</span><span class="n">B</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">A</span> <span class="o">+=</span> <span class="n">B</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz A tras suma: tamaño </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">A</span> <span class="o">-=</span> <span class="n">B</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz A tras resta: tamaño </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">A</span> <span class="o">*=</span> <span class="n">B</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz A tras multiplicación: tamaño </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Matriz A: tamaño (2, 2)',
          '[[3 5]',
          ' [4 1]]',
          'Matriz B: tamaño (2, 2)',
          '[[ 1  2]',
          ' [-3  0]]',
          'Matriz A tras suma: tamaño (2, 2)',
          '[[4 7]',
          ' [1 1]]',
          'Matriz A tras resta: tamaño (2, 2)',
          '[[3 5]',
          ' [4 1]]',
          'Matriz A tras multiplicación: tamaño (2, 2)',
          '[[  3  10]',
          ' [-12   0]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden realizar operaciones sobre todos los elementos de una matriz, esto es gracias a una propiedad llamada <code>broadcasting</code> que veremos después más a fondo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz A: tamaño </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          ' ',
          '<span class="n">B</span> <span class="o">=</span> <span class="n">A</span> <span class="o">*</span> <span class="mi">2</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz B: tamaño </span><span class="si">{</span><span class="n">B</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          ' ',
          '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">**</span> <span class="mi">2</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz C: tamaño </span><span class="si">{</span><span class="n">C</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          ' ',
          '<span class="n">D</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Matriz D: tamaño </span><span class="si">{</span><span class="n">D</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="si">{</span><span class="n">D</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Matriz A: tamaño (2, 2)',
          '[[3 5]',
          ' [4 1]]',
          'Matriz B: tamaño (2, 2)',
          '[[ 6 10]',
          ' [ 8  2]]',
          'Matriz C: tamaño (2, 2)',
          '[[ 9 25]',
          ' [16  1]]',
          'Matriz D: tamaño (2, 2)',
          '[[ 0.28224002 -1.91784855]',
          ' [-1.51360499  1.68294197]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.2.-Funciones-sobre-matrices">6.2. Funciones sobre matrices<a class="anchor-link" href="#6.2.-Funciones-sobre-matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 12" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver en el último cálculo, NumPy ofrece operadores de funciones sobre matrices, hay un montón de <a href="https://numpy.org/doc/stable/reference/routines.html" target="_blank" rel="nofollow noreferrer">funciones</a> que se pueden realizar sobre matrices, matemáticas, lógicas, de álgebra lineal, etc. A continuación mostramos algunas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"exp(A)</span><span class="se">\\n</span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">A</span><span class="p">)</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"sqrt(A)</span><span class="se">\\n</span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">A</span><span class="p">)</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"cos(A)</span><span class="se">\\n</span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">A</span><span class="p">)</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'A',
          '[[3 5]',
          ' [4 1]]',
          'exp(A)',
          '[[ 20.08553692 148.4131591 ]',
          ' [ 54.59815003   2.71828183]]',
          'sqrt(A)',
          '[[1.73205081 2.23606798]',
          ' [2.         1.        ]]',
          'cos(A)',
          '[[-0.9899925   0.28366219]',
          ' [-0.65364362  0.54030231]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Hay algunas funciones que devuelven información de las matrices, como la media</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A.mean()</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'A',
          '[[3 5]',
          ' [4 1]]',
          'A.mean()',
          '3.25',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Sin embargo, podemos obtener dicha información de cada eje mediante el atributo <code>axis</code>. Si este es 0, se hace sobre cada columna; mientras que si es 1, se hace sobre cada fila.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A.mean() columnas</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A.mean() filas</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'A',
          '[[3 5]',
          ' [4 1]]',
          'A.mean() columnas',
          '[3.5 3. ]',
          'A.mean() filas',
          '[4.  2.5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.3.-Broadcasting">6.3. Broadcasting<a class="anchor-link" href="#6.3.-Broadcasting"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 13" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden realizar operaciones matriciales con matrices de distintas dimensiones. En este caso, NumPy detectará esto y hará una proyección de la menor matriz hasta igualarla a la mayor</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="numpy_broadcasting" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/numpy_broadcasting.webp" width="432" height="324"/></p>
      <p>Esta es una gran cualidad de NumPy, que hace que se puedan realizar cálculos sobre matrices sin tener que preocuparse de igualar las dimensiones de estas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">B</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="mi">5</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"B</span><span class="se">\\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'A',
          '[1 2 3]',
          'B',
          '[6 7 8]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
          '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"B</span><span class="se">\\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">B</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"C</span><span class="se">\\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'A',
          '[1 2 3]',
          'B',
          '[[1. 1. 1.]',
          ' [1. 1. 1.]',
          ' [1. 1. 1.]]',
          'C',
          '[[2. 3. 4.]',
          ' [2. 3. 4.]',
          ' [2. 3. 4.]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
          '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">]])</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"A</span><span class="se">\\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"B</span><span class="se">\\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          ' ',
          '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">B</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"C</span><span class="se">\\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'A',
          '[1 2 3]',
          'B',
          '[[1]',
          ' [2]',
          ' [3]]',
          'C',
          '[[2 3 4]',
          ' [3 4 5]',
          ' [4 5 6]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="7.-Indexado-de-matrices">7. Indexado de matrices<a class="anchor-link" href="#7.-Indexado-de-matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 14" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El indexado de matrices se hace igual que con las listas de Python</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
          '<span class="n">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En el caso de tener más de una dimensión, se debe indicar el índice en cada una de ellas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]])</span>',
          '<span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '8',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se puede usar la indexación negativa</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '9',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En caso de no indicar uno de los ejes, se considera que se quiere completo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]])</span>',
          '<span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([ 6,  7,  8,  9, 10])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.1.-Porciones-de-matrices">7.1. Porciones de matrices<a class="anchor-link" href="#7.1.-Porciones-de-matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 15" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A la hora de indexar, podemos quedarnos con partes de matrices al igual que se hacía con las listas de Python.</p>
      <p>Recuerda que se hacía de la siguiente manera:</p>
      <p><code>start:stop:step</code></p>
      <p>Dónde el rango va desde el <code>start</code> (incluido) hasta el <code>stop</code> (sin incluir) con un paso de <code>step</code></p>
      <p>Si <code>step</code> no se indica, por defecto es 1</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por ejemplo, si queremos items de la segunda fila y de la segunda a la cuarta columna:</p>
      <ul>
      <li>Seleccionamos la segunda fila con un 1 (ya que se empieza a contar desde 0)</li>
      <li>Seleccionamos de la segunda a la cuarta fila mediante 1:4, el 1 para indicar la segunda columna y el 4 para indicar la quinta (ya que el segundo número indica la columna en la que se termina sin incluir esta columna). Los dos números teniendo en cuenta que se empieza a contar desde 0</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[ 1  2  3  4  5]',
          ' [ 6  7  8  9 10]]',
          '[7 8 9]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos coger desde una posición hasta el final</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">:]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([ 8,  9, 10])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Desde el inicio hasta una posición</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">:</span><span class="mi">3</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([6, 7, 8])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Establecer el rango con números negativos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([8, 9])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Elegir el paso</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([7, 9])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.2.-Iteraci%C3%B3n-sobre-matrices">7.2. Iteración sobre matrices<a class="anchor-link" href="#7.2.-Iteraci%C3%B3n-sobre-matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 16" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>La iteración sobre matrices multidimensionales se realiza con respecto al primer eje</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">M</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span> <span class="p">[[[</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">],</span>',
          '                <span class="p">[</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]],</span>',
          '               <span class="p">[[</span><span class="mi">100</span><span class="p">,</span><span class="mi">101</span><span class="p">,</span><span class="mi">102</span><span class="p">],</span>',
          '                <span class="p">[</span><span class="mi">110</span><span class="p">,</span><span class="mi">112</span><span class="p">,</span><span class="mi">113</span><span class="p">]]])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Matriz de dimensión: </span><span class="si">{</span><span class="n">M</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\\n</span><span class="s1">\'</span><span class="p">)</span>',
          '',
          '<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="k">for</span> <span class="n">fila</span> <span class="ow">in</span> <span class="n">M</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Fila </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1">: </span><span class="si">{</span><span class="n">fila</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Matriz de dimensión: (2, 2, 3)',
          'Fila 0: [[ 0  1  2]',
          ' [10 12 13]]',
          'Fila 1: [[100 101 102]',
          ' [110 112 113]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Sin embargo, si lo que queremos es iterar por cada ítem, podemos usar el método 'flat'</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="k">for</span> <span class="n">fila</span> <span class="ow">in</span> <span class="n">M</span><span class="o">.</span><span class="n">flat</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Elemento </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1">: </span><span class="si">{</span><span class="n">fila</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Elemento 0: 0',
          'Elemento 1: 1',
          'Elemento 2: 2',
          'Elemento 3: 10',
          'Elemento 4: 12',
          'Elemento 5: 13',
          'Elemento 6: 100',
          'Elemento 7: 101',
          'Elemento 8: 102',
          'Elemento 9: 110',
          'Elemento 10: 112',
          'Elemento 11: 113',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="8.-Copia-de-matrices">8. Copia de matrices<a class="anchor-link" href="#8.-Copia-de-matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 17" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En NumPy tenemos dos maneras de copiar matrices: mediante <code>copy</code>, que realiza una copia nueva de la matriz, y mediante <code>view</code>, que realiza una vista de la matriz original.</p>
      <p>La copia es propietaria de los datos y cualquier cambio realizado en la copia no afectará a la matriz original, y cualquier cambio realizado en la matriz original no afectará a la copia.</p>
      <p>La vista no es propietaria de los datos y cualquier cambio realizado en la copia afectará a la matriz original, y cualquier cambio realizado en la matriz original afectará a la copia.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.1.-Copy">8.1. Copy<a class="anchor-link" href="#8.1.-Copy"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 18" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
          '<span class="n">copy_arr</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>',
          '<span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">42</span>',
          '<span class="n">copy_arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">43</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Original: </span><span class="si">{</span><span class="n">arr</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Copia:    </span><span class="si">{</span><span class="n">copy_arr</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Original: [42  2  3  4  5]',
          'Copia:    [ 1 43  3  4  5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.2.-View">8.2. View<a class="anchor-link" href="#8.2.-View"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 19" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
          '<span class="n">view_arr</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">view</span><span class="p">()</span>',
          '<span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">42</span>',
          '<span class="n">view_arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">43</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Original: </span><span class="si">{</span><span class="n">arr</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Vista:    </span><span class="si">{</span><span class="n">view_arr</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Original: [42 43  3  4  5]',
          'Vista:    [42 43  3  4  5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.3.-Propietario-de-los-datos">8.3. Propietario de los datos<a class="anchor-link" href="#8.3.-Propietario-de-los-datos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 20" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ante la duda de si tenemos una copia o una vista, podemos usar <code>base</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
          ' ',
          '<span class="n">copy_arr</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>',
          '<span class="n">view_arr</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">view</span><span class="p">()</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="n">copy_arr</span><span class="o">.</span><span class="n">base</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">view_arr</span><span class="o">.</span><span class="n">base</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'None',
          '[1 2 3 4 5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="9.-Forma-de-las-matrices">9. Forma de las matrices<a class="anchor-link" href="#9.-Forma-de-las-matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 21" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos saber la forma que tiene la matriz mediante el método <code>shape</code>. Este nos devolverá una tupla, el tamaño de la tupla representa las dimensiones de la matriz, en cada elemento de la tupla se indica el número de ítems en cada una de las dimensiones de la matriz</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[[ 1  2  3  4  5]',
          '  [ 6  7  8  9 10]]',
          ' [[11 12 13 14 15]',
          '  [16 17 18 19 20]]]',
          '(2, 2, 5)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.1.-Reshape">9.1. Reshape<a class="anchor-link" href="#9.1.-Reshape"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 22" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos cambiar la forma de las matrices a la que queramos mediante el método <code>reshape</code>.</p>
      <p>Por ejemplo, la matriz anterior, que tiene una forma de <code>(2, 2, 4)</code>. Podemos pasarla a <code>(5, 4)</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr_reshape</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_reshape</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_reshape</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[ 1  2  3  4]',
          ' [ 5  6  7  8]',
          ' [ 9 10 11 12]',
          ' [13 14 15 16]',
          ' [17 18 19 20]]',
          '(5, 4)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Hay que tener en cuenta que para redimensionar las matrices el número de ítems de la nueva forma tiene que tener el mismo número de ítems de la primera forma</p>
      <p>Es decir, en el ejemplo anterior, la primera matriz tenía 20 ítems (2x2x4), y la nueva matriz tiene 20 ítems (5x4). Lo que no podemos es redimensionarla a una matriz de tamaño (3, 4), ya que en total habría 12 ítems</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr_reshape</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-red-fg">---------------------------------------------------------------------------</span>',
          '<span class="ansi-red-fg">ValueError</span>                                Traceback (most recent call last)',
          '<span class="ansi-green-fg">&lt;ipython-input-12-29e85875d1df&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span><span class="ansi-blue-fg">()</span>',
          '<span class="ansi-green-fg">----&gt; 1</span><span class="ansi-red-fg"> </span>arr_reshape <span class="ansi-blue-fg">=</span> arr<span class="ansi-blue-fg">.</span>reshape<span class="ansi-blue-fg">(</span><span class="ansi-cyan-fg">3</span><span class="ansi-blue-fg">,</span> <span class="ansi-cyan-fg">4</span><span class="ansi-blue-fg">)</span>',
          '<span class="ansi-red-fg">ValueError</span>: cannot reshape array of size 20 into shape (3,4)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.2.-Dimensi%C3%B3n-desconocida">9.2. Dimensión desconocida<a class="anchor-link" href="#9.2.-Dimensi%C3%B3n-desconocida"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 23" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En el caso que queramos cambiar la forma de una matriz y una de las dimensiones nos dé igual, o no la conozcamos, podemos hacer que NumPy la calcule por nosotros introduciendo un <code>-1</code> como parámetro</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">arr_reshape</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_reshape</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_reshape</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[ 1  2  3  4  5  6  7  8  9 10]',
          ' [11 12 13 14 15 16 17 18 19 20]]',
          '(2, 10)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Hay que tener en cuenta que no se puede poner cualquier número en las dimensiones conocidas. El número de ítems de la matriz original tiene que ser un múltiplo de las dimensiones conocidas.</p>
      <p>En el ejemplo anterior, la matriz tiene 20 ítems, que es múltiplo de 2, dimensión conocida introducida. No se hubiera podido poner un 3 como dimensión conocida, ya que 20 no es múltiplo de 3, y no habría ningún número que se pueda poner en la dimensión desconocida que haga que en total haya 20 ítems.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.3.-Aplanamiento-de-matrices">9.3. Aplanamiento de matrices<a class="anchor-link" href="#9.3.-Aplanamiento-de-matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 24" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos aplanar las matrices, es decir, pasarlas a una sola dimensión mediante <code>reshape(-1)</code>. De esta manera, tenga las dimensiones que tenga la matriz original, la nueva siempre tendrá una sola dimensión</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">arr_flatten</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_flatten</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_flatten</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20]',
          '(20,)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Otra forma de aplanar una matriz es mediante el método <code>ravel()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">arr_flatten</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">ravel</span><span class="p">()</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_flatten</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_flatten</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20]',
          '(20,)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.4.-Matriz-traspuesta">9.4. Matriz traspuesta<a class="anchor-link" href="#9.4.-Matriz-traspuesta"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 25" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se puede obtener la transpuesta de una matriz mediante el método <code>T</code>. Hacer la transpuesta de una matriz es intercambiar las filas y las columnas de la matriz, en la siguiente imagen se ve un ejemplo que lo aclara más</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="transpose_matrix" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/Transpose_matrix.webp" width="512" height="111"/></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">9</span><span class="p">]])</span>',
          ' ',
          '<span class="n">arr_t</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">T</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_t</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">arr_t</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[ 1  0  6]',
          ' [ 0  5  0]',
          ' [ 4  0 -9]]',
          '(3, 3)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="10.-Apilado-de-matrices">10. Apilado de matrices<a class="anchor-link" href="#10.-Apilado-de-matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 26" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="10.1.-Apilamiento-vertical">10.1. Apilamiento vertical<a class="anchor-link" href="#10.1.-Apilamiento-vertical"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 27" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden apilar matrices verticalmente (uniendo filas) mediante el método <code>vstack()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '              <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">]])</span>',
          '',
          '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> ',
          '              <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">]])</span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([[1, 1, 1],',
          '       [2, 2, 2],',
          '       [3, 3, 3],',
          '       [4, 4, 4],',
          '       [5, 5, 5],',
          '       [6, 6, 6]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se tienen matrices de más de 2 dimensiones, <code>vstack()</code> apilará a lo largo de la primera dimensión</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          ' ',
          '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          ' ',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([[[1, 1],',
          '        [2, 2]],',
          '       [[3, 3],',
          '        [4, 4]],',
          '       [[5, 5],',
          '        [6, 6]],',
          '       [[7, 7],',
          '        [8, 8]]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="10.2.-Apilamiento-horizontal">10.2. Apilamiento horizontal<a class="anchor-link" href="#10.2.-Apilamiento-horizontal"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 28" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden apilar matrices horizontalmente (uniendo columnas) mediante el método <code>hstack()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '              <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]])</span>',
          '',
          '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> ',
          '              <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]])</span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([[1, 2, 3, 4, 5, 6],',
          '       [1, 2, 3, 4, 5, 6],',
          '       [1, 2, 3, 4, 5, 6]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se tienen matrices de más de 2 dimensiones, <code>hstack()</code> apilará a lo largo de la segunda dimensión</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([[[1, 1],',
          '        [2, 2],',
          '        [5, 5],',
          '        [6, 6]],',
          '       [[3, 3],',
          '        [4, 4],',
          '        [7, 7],',
          '        [8, 8]]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Otra manera de agregar columnas a una matriz es mediante el método <code>column_stack()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '              <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]])</span>',
          ' ',
          '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>',
          ' ',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">column_stack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([[1, 2, 3, 4],',
          '       [1, 2, 3, 4],',
          '       [1, 2, 3, 4]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="10.3.-Apilamiento-en-profundidad">10.3. Apilamiento en profundidad<a class="anchor-link" href="#10.3.-Apilamiento-en-profundidad"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 29" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden apilar matrices en profundidad (tercera dimensión) mediante el método <code>dstack()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"c: </span><span class="si">{</span><span class="n">c</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a.shape: </span><span class="si">{</span><span class="n">a</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">, b.shape: </span><span class="si">{</span><span class="n">b</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">, c.shape: </span><span class="si">{</span><span class="n">c</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'c: [[[1 1 1 1]',
          '  [2 2 2 2]]',
          ' [[3 3 3 3]',
          '  [4 4 4 4]]]',
          'a.shape: (2, 2, 2), b.shape: (2, 2, 2), c.shape: (2, 2, 4)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se tienen matrices de más de 4 dimensiones <code>dstack()</code> apilirá a lo largo de la tercera dimensión</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="n">ndmin</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>',
          '',
          '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="n">ndmin</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a.shape: </span><span class="si">{</span><span class="n">a</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">, b.shape: </span><span class="si">{</span><span class="n">b</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">, c.shape: </span><span class="si">{</span><span class="n">c</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a.shape: (1, 1, 1, 5), b.shape: (1, 1, 1, 5), c.shape: (1, 1, 2, 5)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="10.3.-Apilamiento-personalizado">10.3. Apilamiento personalizado<a class="anchor-link" href="#10.3.-Apilamiento-personalizado"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 30" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mediante el método <code>concatenate()</code> se puede elegir el eje en el que se quieran apilar las matrices</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="n">conc0</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="c1"># concatenamiento en el primer eje</span>',
          '<span class="n">conc1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># concatenamiento en el segundo eje</span>',
          '<span class="n">conc2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># concatenamiento en el tercer eje</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"conc0: </span><span class="si">{</span><span class="n">conc0</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"conc1: </span><span class="si">{</span><span class="n">conc1</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"conc2: </span><span class="si">{</span><span class="n">conc2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'conc0: [[[1 1]',
          '  [2 2]]',
          ' [[3 3]',
          '  [4 4]]',
          ' [[5 5]',
          '  [6 6]]',
          ' [[7 7]',
          '  [8 8]]]',
          'conc1: [[[1 1]',
          '  [2 2]',
          '  [5 5]',
          '  [6 6]]',
          ' [[3 3]',
          '  [4 4]',
          '  [7 7]',
          '  [8 8]]]',
          'conc2: [[[1 1 5 5]',
          '  [2 2 6 6]]',
          ' [[3 3 7 7]',
          '  [4 4 8 8]]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="11.-Dividir-matrices">11. Dividir matrices<a class="anchor-link" href="#11.-Dividir-matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 31" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.1.-Dividir-verticalmente">11.1. Dividir verticalmente<a class="anchor-link" href="#11.1.-Dividir-verticalmente"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 32" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden dividir matrices verticalmente (separando filas) mediante el método <code>vsplit()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mf">1.1</span><span class="p">,</span> <span class="mf">1.2</span><span class="p">,</span> <span class="mf">1.3</span><span class="p">,</span> <span class="mf">1.4</span><span class="p">],</span> ',
          '              <span class="p">[</span><span class="mf">2.1</span><span class="p">,</span> <span class="mf">2.2</span><span class="p">,</span> <span class="mf">2.3</span><span class="p">,</span> <span class="mf">2.4</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mf">3.1</span><span class="p">,</span> <span class="mf">3.2</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mf">4.1</span><span class="p">,</span> <span class="mf">4.2</span><span class="p">,</span> <span class="mf">4.3</span><span class="p">,</span> <span class="mf">4.4</span><span class="p">]])</span>',
          '',
          '<span class="p">[</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">vsplit</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a1: </span><span class="si">{</span><span class="n">a1</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a2: </span><span class="si">{</span><span class="n">a2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a1: [[1.1 1.2 1.3 1.4]',
          ' [2.1 2.2 2.3 2.4]]',
          'a2: [[3.1 3.2 3.3 3.4]',
          ' [4.1 4.2 4.3 4.4]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se tienen matrices de más de 2 dimensiones, <code>vsplit()</code> dividirá a lo largo de la primera dimensión.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="p">[</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">vsplit</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a1: </span><span class="si">{</span><span class="n">a1</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a2: </span><span class="si">{</span><span class="n">a2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a1: [[[1 1]',
          '  [2 2]]]',
          'a2: [[[3 3]',
          '  [4 4]]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.2.-Dividir-horizontalmente">11.2. Dividir horizontalmente<a class="anchor-link" href="#11.2.-Dividir-horizontalmente"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 33" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden dividir matrices horizontalmente (separando columnas) mediante el método <code>hsplit()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mf">1.1</span><span class="p">,</span> <span class="mf">1.2</span><span class="p">,</span> <span class="mf">1.3</span><span class="p">,</span> <span class="mf">1.4</span><span class="p">],</span> ',
          '              <span class="p">[</span><span class="mf">2.1</span><span class="p">,</span> <span class="mf">2.2</span><span class="p">,</span> <span class="mf">2.3</span><span class="p">,</span> <span class="mf">2.4</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mf">3.1</span><span class="p">,</span> <span class="mf">3.2</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">],</span>',
          '              <span class="p">[</span><span class="mf">4.1</span><span class="p">,</span> <span class="mf">4.2</span><span class="p">,</span> <span class="mf">4.3</span><span class="p">,</span> <span class="mf">4.4</span><span class="p">]])</span>',
          '',
          '<span class="p">[</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">hsplit</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a1: </span><span class="si">{</span><span class="n">a1</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a2: </span><span class="si">{</span><span class="n">a2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a1: [[1.1 1.2]',
          ' [2.1 2.2]',
          ' [3.1 3.2]',
          ' [4.1 4.2]]',
          'a2: [[1.3 1.4]',
          ' [2.3 2.4]',
          ' [3.3 3.4]',
          ' [4.3 4.4]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se tienen matrices de más de 2 dimensiones, <code>hsplit()</code> dividirá a lo largo de la segunda dimensión</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="p">[</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">hsplit</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a1: </span><span class="si">{</span><span class="n">a1</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a2: </span><span class="si">{</span><span class="n">a2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a1: [[[1 1]]',
          ' [[3 3]]]',
          'a2: [[[2 2]]',
          ' [[4 4]]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.3.-Dividir-de-manera-personalizada">11.3. Dividir de manera personalizada<a class="anchor-link" href="#11.3.-Dividir-de-manera-personalizada"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 34" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mediante el método <code>array_split()</code> se puede elegir el eje en el que se quieren dividir las matrices</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
          '                <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
          '                ',
          '                <span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
          '                <span class="p">])</span>',
          '',
          '<span class="p">[</span><span class="n">a1_eje0</span><span class="p">,</span> <span class="n">a2_eje0</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array_split</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>',
          '<span class="p">[</span><span class="n">a1_eje1</span><span class="p">,</span> <span class="n">a2_eje1</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array_split</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>',
          '<span class="p">[</span><span class="n">a1_eje2</span><span class="p">,</span> <span class="n">a2_eje2</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array_split</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a1_eje0: </span><span class="si">{</span><span class="n">a1_eje0</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a2_eje0: </span><span class="si">{</span><span class="n">a2_eje0</span><span class="si">}</span><span class="se">\\n\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a1_eje1: </span><span class="si">{</span><span class="n">a1_eje1</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a2_eje1: </span><span class="si">{</span><span class="n">a2_eje1</span><span class="si">}</span><span class="se">\\n\\n</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a1_eje2: </span><span class="si">{</span><span class="n">a1_eje2</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"a2_eje2: </span><span class="si">{</span><span class="n">a2_eje2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a1_eje0: [[[1 1]',
          '  [2 2]]]',
          'a2_eje0: [[[3 3]',
          '  [4 4]]]',
          'a1_eje1: [[[1 1]]',
          ' [[3 3]]]',
          'a2_eje1: [[[2 2]]',
          ' [[4 4]]]',
          'a1_eje2: [[[1]',
          '  [2]]',
          ' [[3]',
          '  [4]]]',
          'a2_eje2: [[[1]',
          '  [2]]',
          ' [[3]',
          '  [4]]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="12.-B%C3%BAsqueda-en-matrices">12. Búsqueda en matrices<a class="anchor-link" href="#12.-B%C3%BAsqueda-en-matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 35" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se quiere buscar un valor dentro de una matriz, se puede usar el método <code>where()</code> que devuelve las posiciones donde la matriz tiene el valor que estamos buscando</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>',
          '',
          '<span class="n">ids</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">arr</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span>',
          '<span class="n">ids</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(array([3, 5, 6]),)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden usar funciones para buscar, por ejemplo, si queremos buscar en qué posiciones los valores son pares</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">])</span>',
          '',
          '<span class="n">ids</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">arr</span><span class="o">%</span><span class="k">2</span>)',
          '<span class="n">ids</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(array([0, 2, 4, 6]),)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="13.-Ordenar-matrices">13. Ordenar matrices<a class="anchor-link" href="#13.-Ordenar-matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 36" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mediante el método <code>sort()</code> podemos ordenar matrices</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>',
          '',
          '<span class="n">arr_ordenado</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="n">arr_ordenado</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([0, 1, 2, 3])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si lo que tenemos son strings, los ordena alfabéticamente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="s1">\'banana\'</span><span class="p">,</span> <span class="s1">\'apple\'</span><span class="p">,</span> <span class="s1">\'cherry\'</span><span class="p">])</span>',
          '',
          '<span class="n">arr_ordenado</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="n">arr_ordenado</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([\'apple\', \'banana\', \'cherry\'], dtype=\'&lt;U6\')',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y las matrices de booleanos también las ordena</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">])</span>',
          '',
          '<span class="n">arr_ordenado</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="n">arr_ordenado</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([False,  True,  True])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se tienen matrices de más de una dimensión, las ordena por dimensiones, es decir, si se tiene una matriz de 2 dimensiones, ordena los números de la primera fila entre ellos y los de la segunda fila entre ellos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
          '',
          '<span class="n">arr_ordenado</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
          '<span class="n">arr_ordenado</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([[2, 3, 4],',
          '       [0, 1, 5]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por defecto ordena siempre con respecto a las filas, pero si se quiere que ordene con respecto a otra dimensión, se tiene que especificar mediante la variable <code>axis</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
          '',
          '<span class="n">arr_ordenado0</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="c1"># Se ordena con respecto a la primera dimensión</span>',
          '<span class="n">arr_ordenado1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># Se ordena con respecto a la segunda dimensión</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"arr_ordenado0: </span><span class="si">{</span><span class="n">arr_ordenado0</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"arr_ordenado1: </span><span class="si">{</span><span class="n">arr_ordenado1</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'arr_ordenado0: [[3 0 1]',
          ' [5 2 4]]',
          'arr_ordenado1: [[2 3 4]',
          ' [0 1 5]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="14.-Filtros-en-matrices">14. Filtros en matrices<a class="anchor-link" href="#14.-Filtros-en-matrices"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 37" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>NumPy ofrece la posibilidad de buscar ciertos elementos de una matriz y crear una nueva</p>
      <p>Esto lo hace creando una matriz de índices booleanos, es decir, crea una nueva matriz que indica cuáles posiciones nos quedamos de la matriz y cuáles no</p>
      <p>Veamos un ejemplo de una matriz de índices booleanos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">37</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">22</span><span class="p">])</span>',
          '',
          '<span class="n">indices_booleanos</span> <span class="o">=</span> <span class="p">[</span><span class="kc">False</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">]</span>',
          '',
          '<span class="n">arr_filter</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">indices_booleanos</span><span class="p">]</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Array original: </span><span class="si">{</span><span class="n">arr</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"indices booleanos: </span><span class="si">{</span><span class="n">indices_booleanos</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Array filtrado: </span><span class="si">{</span><span class="n">arr_filter</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Array original: [37 85 12 45 69 22]',
          'indices booleanos: [False, False, True, False, False, True]',
          'Array filtrado: [12 22]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver, el array filtrado (<code>arr_filtr</code>), solo se ha quedado del array original (<code>arr</code>) con los elementos que coinciden con aquellos en los que el array <code>indices_booleanos</code> vale <code>True</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Otra cosa que podemos ver es que solo se ha quedado con los elementos pares, por lo que ahora pasaremos a ver cómo se hace para quedarse con los elementos pares de una matriz, sin tener que hacerlo a mano como lo hemos hecho en el ejemplo anterior</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> ',
          '                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]])</span>',
          ' ',
          '<span class="n">indices_booleanos</span> <span class="o">=</span> <span class="n">arr</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>',
          ' ',
          '<span class="n">arr_filter</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">indices_booleanos</span><span class="p">]</span>',
          ' ',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Array original: </span><span class="si">{</span><span class="n">arr</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"indices booleanos: </span><span class="si">{</span><span class="n">indices_booleanos</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Array filtrado: </span><span class="si">{</span><span class="n">arr_filter</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Array original: [[ 1  2  3  4  5]',
          ' [ 6  7  8  9 10]]',
          'indices booleanos: [[False  True False  True False]',
          ' [ True False  True False  True]]',
          'Array filtrado: [ 2  4  6  8 10]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      






    </div>

  </section>

</PostLayout>
