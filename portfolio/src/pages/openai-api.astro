---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'OpenAI API';
const end_url = 'openai-api';
const description = 'üöÄ ¬°Descubre el poder de la API de OpenAI en este post! üåü Aprende c√≥mo instalar la librer√≠a de OpenAI ‚ú® y te guiar√© en los primeros pasos para convertirte en un gur√∫ de la inteligencia artificial. ü§ñ No importa si eres un principiante curioso o un experto en c√≥digo buscando nuevas aventuras, este post tiene todo lo que necesitas para empezar. Prep√°rate para explorar el universo de GPT para generaci√≥n de texto y DALL-E, an√°lisis de im√°genes, ¬°todo con un toque de diversi√≥n y mucha innovaci√≥n! üéâüë©‚Äçüíª ¬°Sum√©rgete en el emocionante mundo de la IA y comienza tu viaje hacia la creatividad ilimitada! üåàüíª';
const keywords = 'open ai api, open ai, openai, gpt api, gpt3 api, gpt4 api, gpt4o api, gpt, gpt3, gpt4, gpt4o';
const languaje = 'ES';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/openai.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=4800
    image_height=3840
    image_extension=webp
    article_date=2023-12-06+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Instalar-la-librer%C3%ADa-de-OpenAI"><h2>Instalar la librer√≠a de OpenAI</h2></a>
      <a class="anchor-link" href="#Importar-la-librer%C3%ADa-de-OpenAI"><h2>Importar la librer√≠a de OpenAI</h2></a>
      <a class="anchor-link" href="#Obtener-una-API-Key"><h2>Obtener una API Key</h2></a>
      <a class="anchor-link" href="#Creamos-nuestro-primer-chatbot"><h2>Creamos nuestro primer chatbot</h2></a>
      <a class="anchor-link" href="#Par%C3%A1metros"><h3>Par√°metros</h3></a>
      <a class="anchor-link" href="#Messages"><h4>Messages</h4></a>
      <a class="anchor-link" href="#Historial-de-conversaciones"><h5>Historial de conversaciones</h5></a>
      <a class="anchor-link" href="#Condicionamiento-mediante-ejemplos"><h5>Condicionamiento mediante ejemplos</h5></a>
      <a class="anchor-link" href="#Condicionamiento-con-mensaje-de-sistema"><h5>Condicionamiento con mensaje de sistema</h5></a>
      <a class="anchor-link" href="#N%C3%BAmero-m%C3%A1ximo-de-tokens-de-la-respuesta"><h4>N√∫mero m√°ximo de tokens de la respuesta</h4></a>
      <a class="anchor-link" href="#Creatividad-del-modelo-mediante-la-temperatura"><h4>Creatividad del modelo mediante la temperatura</h4></a>
      <a class="anchor-link" href="#Creatividad-del-modelo-mediante-el-top_p"><h4>Creatividad del modelo mediante el top_p</h4></a>
      <a class="anchor-link" href="#N%C3%BAmero-de-respuestas"><h4>N√∫mero de respuestas</h4></a>
      <a class="anchor-link" href="#Reentrenar-modelo-de-OpenAI"><h2>Reentrenar modelo de OpenAI</h2></a>
      <a class="anchor-link" href="#Preparaci%C3%B3n-de-los-datos"><h3>Preparaci√≥n de los datos</h3></a>
      <a class="anchor-link" href="#Validaci%C3%B3n-de-los-datos"><h4>Validaci√≥n de los datos</h4></a>
      <a class="anchor-link" href="#C%C3%A1lculo-de-tokens"><h4>C√°lculo de tokens</h4></a>
      <a class="anchor-link" href="#C%C3%A1culo-del-coste"><h4>C√°culo del coste</h4></a>
      <a class="anchor-link" href="#Entrenamiento"><h3>Entrenamiento</h3></a>
      <a class="anchor-link" href="#Prueba-del-modelo"><h3>Prueba del modelo</h3></a>
      <a class="anchor-link" href="#Generar-im%C3%A1genes-con-DALL-E-3"><h2>Generar im√°genes con DALL-E 3</h2></a>
      <a class="anchor-link" href="#Visi%C3%B3n"><h2>Visi√≥n</h2></a>
      <a class="anchor-link" href="#Text-to-speech"><h2>Text to speech</h2></a>
      <a class="anchor-link" href="#Speech-to-text-(Whisper)"><h2>Speech to text (Whisper)</h2></a>
      <a class="anchor-link" href="#Moderaci%C3%B3n-de-contenido"><h2>Moderaci√≥n de contenido</h2></a>
      <a class="anchor-link" href="#Asistentes"><h2>Asistentes</h2></a>
      <a class="anchor-link" href="#Crear-el-asistente"><h3>Crear el asistente</h3></a>
      <a class="anchor-link" href="#Hilo-o-thread"><h3>Hilo o thread</h3></a>
      <a class="anchor-link" href="#Subimos-un-archivo"><h3>Subimos un archivo</h3></a>
      <a class="anchor-link" href="#Enviar-un-mensaje-al-asistente"><h3>Enviar un mensaje al asistente</h3></a>
      <a class="anchor-link" href="#Ejecutar-el-asistente"><h3>Ejecutar el asistente</h3></a>
      <a class="anchor-link" href="#Esperar-a-que-termine-de-procesar"><h3>Esperar a que termine de procesar</h3></a>
      <a class="anchor-link" href="#Procesar-la-respuesta"><h3>Procesar la respuesta</h3></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="OpenAI-API">OpenAI API<a class="anchor-link" href="#OpenAI-API"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 0" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Instalar-la-librer%C3%ADa-de-OpenAI">Instalar la librer√≠a de OpenAI<a class="anchor-link" href="#Instalar-la-librer%C3%ADa-de-OpenAI"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 1" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En primer lugar, para poder usar la API de OpenAI, es necesario instalar la librer√≠a de OpenAI. Para ello, ejecutamos el siguiente comando</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%</span><span class="k">pip</span> install --upgrade openai',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h2 id="Importar-la-librer%C3%ADa-de-OpenAI">Importar la librer√≠a de OpenAI<a class="anchor-link" href="#Importar-la-librer%C3%ADa-de-OpenAI"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 2" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Una vez est√° instalada la librer√≠a, la importamos para poder usarla en nuestro c√≥digo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%</span><span class="k">pip</span> install --upgrade openai',
      '<span></span><span class="kn">import</span> <span class="nn">openai</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h2 id="Obtener-una-API-Key">Obtener una API Key<a class="anchor-link" href="#Obtener-una-API-Key"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 3" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para poder usar la API de OpenAI, es necesario obtener una API Key. Para ello, nos dirigimos a la p√°gina de <a href="https://openai.com/" target="_blank" rel="nofollow noreferrer">OpenAI</a>, y nos registramos. Una vez registrados, nos dirigimos a la secci√≥n de <a href="https://platform.openai.com/api-keys">API Keys</a>, y creamos una nueva API Key.</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="open ai api key" src="https://raw.githubusercontent.com/maximofn/alfred/main/gifs/openaix2.gif"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Una vez la tenemos le decimoa a la API de openai c√∫al es nuestra API Key.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%</span><span class="k">pip</span> install --upgrade openai',
      '<span></span><span class="kn">import</span> <span class="nn">openai</span>',
      '<span></span><span class="n">api_key</span> <span class="o">=</span> <span class="s2">"Pon aqu√≠ tu API key"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h2 id="Creamos-nuestro-primer-chatbot">Creamos nuestro primer chatbot<a class="anchor-link" href="#Creamos-nuestro-primer-chatbot"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 4" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Con la API de OpenAI es muy sencillo crear un simple chatbot, al que le vamos a pasar un prompt, y nos va a devolver una respuesta</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En primer lugar tenemos que elgir qu√© modelo vamos a usar, en mi caso voy a usar el modelo <code>gpt-3.5-turbo-1106</code> que a d√≠a de hoy es un buen modelo para este post, ya que para lo que vamos a hacer no necesitamos usar el mejor modelo. OpenAI tiene una lista con todos sus <a href="https://platform.openai.com/docs/models" target="_blank" rel="nofollow noreferrer">modelos</a> y una p√°gina con los <a href="https://openai.com/pricing">precios</a></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%</span><span class="k">pip</span> install --upgrade openai',
      '<span></span><span class="kn">import</span> <span class="nn">openai</span>',
      '<span></span><span class="n">api_key</span> <span class="o">=</span> <span class="s2">"Pon aqu√≠ tu API key"</span>',
      '<span></span><span class="n">model</span> <span class="o">=</span> <span class="s2">"gpt-3.5-turbo-1106"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Ahora tenemos que crear un cliente que ser√° el que se comunique con la API de OpenAI.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%</span><span class="k">pip</span> install --upgrade openai',
      '<span></span><span class="kn">import</span> <span class="nn">openai</span>',
      '<span></span><span class="n">api_key</span> <span class="o">=</span> <span class="s2">"Pon aqu√≠ tu API key"</span>',
      '<span></span><span class="n">model</span> <span class="o">=</span> <span class="s2">"gpt-3.5-turbo-1106"</span>',
      '<span></span><span class="n">client</span> <span class="o">=</span> <span class="n">openai</span><span class="o">.</span><span class="n">OpenAI</span><span class="p">(</span><span class="n">api_key</span><span class="o">=</span><span class="n">api_key</span><span class="p">,</span> <span class="n">organization</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Como vemos le hemos pasado nuestra API Key. Adem√°s se le puede pasar la organizaci√≥n, pero en nuestro caso no es necesario.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos el prompt</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%</span><span class="k">pip</span> install --upgrade openai',
      '<span></span><span class="kn">import</span> <span class="nn">openai</span>',
      '<span></span><span class="n">api_key</span> <span class="o">=</span> <span class="s2">"Pon aqu√≠ tu API key"</span>',
      '<span></span><span class="n">model</span> <span class="o">=</span> <span class="s2">"gpt-3.5-turbo-1106"</span>',
      '<span></span><span class="n">client</span> <span class="o">=</span> <span class="n">openai</span><span class="o">.</span><span class="n">OpenAI</span><span class="p">(</span><span class="n">api_key</span><span class="o">=</span><span class="n">api_key</span><span class="p">,</span> <span class="n">organization</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>',
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"Cu√°l es el mejor lenguaje de programaci√≥n para aprender?"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Y ya podemos pedirle una respuesta a OpenAI</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%</span><span class="k">pip</span> install --upgrade openai',
      '<span></span><span class="kn">import</span> <span class="nn">openai</span>',
      '<span></span><span class="n">api_key</span> <span class="o">=</span> <span class="s2">"Pon aqu√≠ tu API key"</span>',
      '<span></span><span class="n">model</span> <span class="o">=</span> <span class="s2">"gpt-3.5-turbo-1106"</span>',
      '<span></span><span class="n">client</span> <span class="o">=</span> <span class="n">openai</span><span class="o">.</span><span class="n">OpenAI</span><span class="p">(</span><span class="n">api_key</span><span class="o">=</span><span class="n">api_key</span><span class="p">,</span> <span class="n">organization</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>',
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"Cu√°l es el mejor lenguaje de programaci√≥n para aprender?"</span>',
      '<span></span><span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '        <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>',
      '        <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">}],</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>









      
      <section class="section-block-markdown-cell">
      <p>Veamos c√≥mo es la respuesta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%</span><span class="k">pip</span> install --upgrade openai',
          '</span><span class="kn">import</span> <span class="nn">openai</span>',
          '</span><span class="n">api_key</span> <span class="o">=</span> <span class="s2">"Pon aqu√≠ tu API key"</span>',
          '</span><span class="n">model</span> <span class="o">=</span> <span class="s2">"gpt-3.5-turbo-1106"</span>',
          '</span><span class="n">client</span> <span class="o">=</span> <span class="n">openai</span><span class="o">.</span><span class="n">OpenAI</span><span class="p">(</span><span class="n">api_key</span><span class="o">=</span><span class="n">api_key</span><span class="p">,</span> <span class="n">organization</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>',
          '</span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"Cu√°l es el mejor lenguaje de programaci√≥n para aprender?"</span>',
          '</span><span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>',
          '  <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">}],</span>',
          '<span class="p">)</span>',
          '</span><span class="nb">type</span><span class="p">(</span><span class="n">response</span><span class="p">),</span> <span class="n">response</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(openai.types.chat.chat_completion.ChatCompletion,',
          ' ChatCompletion(id=\'chatcmpl-8RaHCm9KalLxj2PPbLh6f8A4djG8Y\', choices=[Choice(finish_reason=\'stop\', index=0, message=ChatCompletionMessage(content=\'No hay un "mejor" lenguaje de programaci√≥n para aprender, ya que depende de tus intereses, objetivos y el tipo de desarrollo que te interese. Algunos lenguajes populares para empezar a aprender a programar incluyen Python, JavaScript, Java, C# y Ruby. Estos lenguajes son conocidos por su sintaxis clara y su versatilidad, lo que los hace buenos candidatos para principiantes. Tambi√©n es √∫til investigar qu√© lenguajes son populares en la industria en la que te gustar√≠a trabajar, ya que el conocimiento de un lenguaje en demanda puede abrirte m√°s oportunidades laborales. En resumen, la elecci√≥n del lenguaje de programaci√≥n para aprender depender√° de tus preferencias personales y de tus metas profesionales.\', role=\'assistant\', function_call=None, tool_calls=None))], created=1701584994, model=\'gpt-3.5-turbo-1106\', object=\'chat.completion\', system_fingerprint=\'fp_eeff13170a\', usage=CompletionUsage(completion_tokens=181, prompt_tokens=21, total_tokens=202)))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.id = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.choices = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">)):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">] = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].finish_reason = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">finish_reason</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].index = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">index</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message.content = </span><span class="se">\n\t\t</span><span class="si">{</span><span class="n">content</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message.role = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">role</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message.function_call = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">function_call</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message.tool_calls = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">tool_calls</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.created = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">created</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.model = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">model</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.object = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">object</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.system_fingerprint = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">system_fingerprint</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.usage = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">usage</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.usage.completion_tokens = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">usage</span><span class="o">.</span><span class="n">completion_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.usage.prompt_tokens = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">usage</span><span class="o">.</span><span class="n">prompt_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.usage.total_tokens = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">usage</span><span class="o">.</span><span class="n">total_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'response.id = chatcmpl-8RaHCm9KalLxj2PPbLh6f8A4djG8Y',
          'response.choices = [Choice(finish_reason=\'stop\', index=0, message=ChatCompletionMessage(content=\'No hay un "mejor" lenguaje de programaci√≥n para aprender, ya que depende de tus intereses, objetivos y el tipo de desarrollo que te interese. Algunos lenguajes populares para empezar a aprender a programar incluyen Python, JavaScript, Java, C# y Ruby. Estos lenguajes son conocidos por su sintaxis clara y su versatilidad, lo que los hace buenos candidatos para principiantes. Tambi√©n es √∫til investigar qu√© lenguajes son populares en la industria en la que te gustar√≠a trabajar, ya que el conocimiento de un lenguaje en demanda puede abrirte m√°s oportunidades laborales. En resumen, la elecci√≥n del lenguaje de programaci√≥n para aprender depender√° de tus preferencias personales y de tus metas profesionales.\', role=\'assistant\', function_call=None, tool_calls=None))]',
          'response.choices[0] = Choice(finish_reason=\'stop\', index=0, message=ChatCompletionMessage(content=\'No hay un "mejor" lenguaje de programaci√≥n para aprender, ya que depende de tus intereses, objetivos y el tipo de desarrollo que te interese. Algunos lenguajes populares para empezar a aprender a programar incluyen Python, JavaScript, Java, C# y Ruby. Estos lenguajes son conocidos por su sintaxis clara y su versatilidad, lo que los hace buenos candidatos para principiantes. Tambi√©n es √∫til investigar qu√© lenguajes son populares en la industria en la que te gustar√≠a trabajar, ya que el conocimiento de un lenguaje en demanda puede abrirte m√°s oportunidades laborales. En resumen, la elecci√≥n del lenguaje de programaci√≥n para aprender depender√° de tus preferencias personales y de tus metas profesionales.\', role=\'assistant\', function_call=None, tool_calls=None))',
          '	response.choices[0].finish_reason = stop',
          '	response.choices[0].index = 0',
          '	response.choices[0].message = ChatCompletionMessage(content=\'No hay un "mejor" lenguaje de programaci√≥n para aprender, ya que depende de tus intereses, objetivos y el tipo de desarrollo que te interese. Algunos lenguajes populares para empezar a aprender a programar incluyen Python, JavaScript, Java, C# y Ruby. Estos lenguajes son conocidos por su sintaxis clara y su versatilidad, lo que los hace buenos candidatos para principiantes. Tambi√©n es √∫til investigar qu√© lenguajes son populares en la industria en la que te gustar√≠a trabajar, ya que el conocimiento de un lenguaje en demanda puede abrirte m√°s oportunidades laborales. En resumen, la elecci√≥n del lenguaje de programaci√≥n para aprender depender√° de tus preferencias personales y de tus metas profesionales.\', role=\'assistant\', function_call=None, tool_calls=None)',
          '		response.choices[0].message.content = ',
          '		No hay un "mejor" lenguaje de programaci√≥n para aprender, ya que depende de tus intereses, objetivos y el tipo de desarrollo que te interese. Algunos lenguajes populares para empezar a aprender a programar incluyen Python, JavaScript, Java, C# y Ruby. Estos lenguajes son conocidos por su sintaxis clara y su versatilidad, lo que los hace buenos candidatos para principiantes. Tambi√©n es √∫til investigar qu√© lenguajes son populares en la industria en la que te gustar√≠a trabajar, ya que el conocimiento de un lenguaje en demanda puede abrirte m√°s oportunidades laborales. En resumen, la elecci√≥n del lenguaje de programaci√≥n para aprender depender√° de tus preferencias personales y de tus metas profesionales.',
          '		response.choices[0].message.role = assistant',
          '		response.choices[0].message.function_call = None',
          '		response.choices[0].message.tool_calls = None',
          'response.created = 1701584994',
          'response.model = gpt-3.5-turbo-1106',
          'response.object = chat.completion',
          'response.system_fingerprint = fp_eeff13170a',
          'response.usage = CompletionUsage(completion_tokens=181, prompt_tokens=21, total_tokens=202)',
          '	response.usage.completion_tokens = 181',
          '	response.usage.prompt_tokens = 21',
          '	response.usage.total_tokens = 202',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver nos devuelve much√≠sima informaci√≥n</p>
      <p>Por ejemplo <code>response.choices[0].finish_reason = stop</code> significa que el modelo ha parado de generar texto porque ha llegado al final del prompt. Esto nos viene muy bien para depurar, ya que los posibles valores son <code>stop</code> que significa que la API devolvi√≥ el mensaje completo, <code>length</code> que significa que la salida del modelo fue incompleta debido a que era m√°s larga que <code>max_tokens</code> o l√≠mite de token del modelo, <code>function_call</code> el modelo decidi√≥ llamar a una funci√≥n, <code>content_filter</code> que significa que el contenido fue omitido por una limitaci√≥n de contenido de OpenAI y <code>null</code> que significa que la respuesta de la API fue incompleta</p>
      <p>Tambi√©n nos da informaci√≥n de los tokens para poder llevar un control del dinero gastado</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Par%C3%A1metros">Par√°metros<a class="anchor-link" href="#Par%C3%A1metros"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 5" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A la hora de pedir una respuesta a OpenAI, podemos pasarle una serie de par√°metros para que nos devuelva una respuesta m√°s acorde a lo que queremos. Vamos a ver cu√°les son los par√°metros que podemos pasarle</p>
      <ul>
      <li><code>messages</code>: Lista de mensajes que se le han enviado al chatbot</li>
      <li><code>model</code>: Modelo que queremos usar</li>
      <li><code>frequency_penalty</code>: Penalizaci√≥n de frecuencia. Cuanto mayor sea el valor, menos probable ser√° que el modelo repita la misma respuesta</li>
      <li><code>max_tokens</code>: N√∫mero m√°ximo de tokens que puede devolver el modelo</li>
      <li><code>n</code>: N√∫mero de respuestas que queremos que nos devuelva el modelo</li>
      <li><code>presence_penalty</code>: Penalizaci√≥n de presencia. Cuanto mayor sea el valor, menos probable ser√° que el modelo repita la misma respuesta</li>
      <li><code>seed</code>: Semilla para la generaci√≥n de texto</li>
      <li><code>stop</code>: Lista de tokens que indican que el modelo debe parar de generar texto</li>
      <li><code>stream</code>: Si es <code>True</code> la API devolver√° una respuesta cada vez que el modelo genere un token. Si es <code>False</code> la API devolver√° una respuesta cuando el modelo haya generado todos los tokens</li>
      <li><code>temperature</code>: Cuanto mayor sea el valor, m√°s creativo ser√° el modelo</li>
      <li><code>top_p</code>: Cuanto mayor sea el valor, m√°s creativo ser√° el modelo</li>
      <li><code>user</code>: ID del usuario que est√° hablando con el chatbot</li>
      <li><code>timeout</code>: Tiempo m√°ximo que queremos esperar a que la API nos devuelva una respuesta</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Veamos algunos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Messages">Messages<a class="anchor-link" href="#Messages"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 6" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos pasarle a la API una lista de mensajes que se le han enviado al chatbot. Esto es √∫til para pasarle el historial de conversaciones al chatbot, y que as√≠ pueda generar una respuesta m√°s acorde a la conversaci√≥n. Y para condicionar la respuesta del chatbot a lo que se le ha dicho anteriormente.</p>
      <p>Adem√°s podemos pasarle un mensaje de sistema para indicarle c√≥mo se tiene que comportar</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h5 id="Historial-de-conversaciones">Historial de conversaciones<a class="anchor-link" href="#Historial-de-conversaciones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 7" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver un ejemplo del hisotrial de conversaciones, primero le preguntamos que c√≥mo est√°</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"Hola, soy MaximoFN, ¬øC√≥mo est√°s?"</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>',
          '  <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">}],</span>',
          '<span class="p">)</span>',
          '<span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola MaximoFN, soy un modelo de inteligencia artificial dise√±ado para conversar y ayudar en lo que necesites. ¬øEn qu√© puedo ayudarte hoy?',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Nos ha respondido que no tiene sentimientos y que en qu√© puede ayudarnos. As√≠ que si ahora le pregunto c√≥mo me llamo no va a saber responderme</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"¬øMe puedes decir c√≥mo me llamo?"</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>',
          '  <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">}],</span>',
          '<span class="p">)</span>',
          '<span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Lo siento, no tengo esa informaci√≥n. Pero puedes dec√≠rmelo t√∫.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para solucionar esto, le pasamos el historial de conversaciones</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"¬øMe puedes decir c√≥mo me llamo?"</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>',
          '  <span class="n">messages</span><span class="o">=</span><span class="p">[</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Hola, soy MaximoFN, ¬øC√≥mo est√°s?"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"assistant"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Hola MaximoFN, soy un modelo de inteligencia artificial dise√±ado para conversar y ayudar en lo que necesites. ¬øEn qu√© puedo ayudarte hoy?"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">},</span>',
          '  <span class="p">],</span>',
          '<span class="p">)</span>',
          '<span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Tu nombre es MaximoFN.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="Condicionamiento-mediante-ejemplos">Condicionamiento mediante ejemplos<a class="anchor-link" href="#Condicionamiento-mediante-ejemplos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 8" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora veamos un ejemplo de c√≥mo condicionar la respuesta del chatbot a lo que se le ha dicho anteriormente. Ahora le preguntamos c√≥mo obtener la lista de archivos en un directorio en la terminal</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"¬øC√≥mo puedo listar los archivos de un directorio en la terminal?"</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>',
          '  <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">}],</span>',
          '<span class="p">)</span>',
          '<span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'En la terminal de un sistema operativo Unix o Linux, puedes listar los archivos de un directorio utilizando el comando `ls`. Por ejemplo, si quieres listar los archivos del directorio actual, simplemente escribe `ls` y presiona Enter. Si deseas listar los archivos de un directorio espec√≠fico, puedes proporcionar la ruta del directorio despu√©s del comando `ls`, por ejemplo `ls /ruta/del/directorio`. Si deseas ver m√°s detalles sobre los archivos, puedes usar la opci√≥n `-l` para obtener una lista detallada o `-a` para mostrar tambi√©n los archivos ocultos.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora le condicionamos con ejemplos de respuestas cortas, veamos qu√© nos contesta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"¬øC√≥mo puedo listar los archivos de un directorio en la terminal?"</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>',
          '  <span class="n">messages</span><span class="o">=</span><span class="p">[</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Obtener las 10 primeras l√≠neas de un archivo"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"assistant"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"head -n 10"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Encontrar todos los archivos con extensi√≥n .txt"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"assistant"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"find . -name \'*.txt"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Dividir un archivo en varias p√°ginas"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"assistant"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"split -l 1000"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Buscar la direcci√≥n IP 12.34.56.78"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"assistant"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"nslookup 12.34.56.78"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Obtener las 5 √∫ltimas l√≠neas de foo.txt"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"assistant"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"tail -n 5 foo.txt"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Convertir ejemplo.png en JPEG"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"assistant"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"convert example.png example.jpg"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Create a git branch named \'new-feature"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"assistant"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"git branch new-feature"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">},</span>',
          '  <span class="p">],</span>',
          '<span class="p">)</span>',
          '<span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Puede usar el comando `ls` en la terminal para listar los archivos de un directorio. Por ejemplo:',
          '```',
          'ls',
          '```',
          'Muestra los archivos y directorios en el directorio actual.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Hemos conseguido que de una respuesta m√°s corta</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h5 id="Condicionamiento-con-mensaje-de-sistema">Condicionamiento con mensaje de sistema<a class="anchor-link" href="#Condicionamiento-con-mensaje-de-sistema"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 9" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Le podemos pasar un mensaje de sistema para indicarle c√≥mo se tiene que comportar.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"¬øC√≥mo puedo listar los archivos de un directorio en la terminal?"</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>',
          '  <span class="n">messages</span><span class="o">=</span><span class="p">[</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"system"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Eres un experto asistente de terminal de ubuntu que responde solo con comandos de terminal"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">},</span>',
          '  <span class="p">],</span>',
          '<span class="p">)</span>',
          '<span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Puedes listar los archivos de un directorio en la terminal usando el comando `ls`. Por ejemplo, para listar los archivos del directorio actual, simplemente escribe `ls` y presiona Enter. Si quieres listar los archivos de un directorio espec√≠fico, puedes utilizar `ls` seguido de la ruta del directorio. Por ejemplo, `ls /ruta/del/directorio`.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"¬øC√≥mo puedo listar los archivos de un directorio en la terminal?"</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>',
          '  <span class="n">messages</span><span class="o">=</span><span class="p">[</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"system"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Eres un experto asistente de terminal de ubuntu que responde solo con comandos de terminal"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Obtener las 10 primeras l√≠neas de un archivo"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"assistant"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"head -n 10"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Encontrar todos los archivos con extensi√≥n .txt"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"assistant"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"find . -name \'*.txt"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Dividir un archivo en varias p√°ginas"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"assistant"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"split -l 1000"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Buscar la direcci√≥n IP 12.34.56.78"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"assistant"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"nslookup 12.34.56.78"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Obtener las 5 √∫ltimas l√≠neas de foo.txt"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"assistant"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"tail -n 5 foo.txt"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Convertir ejemplo.png en JPEG"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"assistant"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"convert example.png example.jpg"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Create a git branch named \'new-feature"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"assistant"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"git branch new-feature"</span><span class="p">},</span>',
          '      <span class="p">{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">},</span>',
          '  <span class="p">],</span>',
          '<span class="p">)</span>',
          '<span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Puedes listar los archivos de un directorio en la terminal utilizando el comando "ls". Por ejemplo, para listar los archivos en el directorio actual, puedes ejecutar el comando "ls". Si deseas listar los archivos de otro directorio, simplemente especifica el directorio despu√©s del comando "ls", por ejemplo "ls /ruta/al/directorio".',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="N%C3%BAmero-m%C3%A1ximo-de-tokens-de-la-respuesta">N√∫mero m√°ximo de tokens de la respuesta<a class="anchor-link" href="#N%C3%BAmero-m%C3%A1ximo-de-tokens-de-la-respuesta"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 10" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos limitar el n√∫mero de tokens que puede devolver el modelo. Esto es √∫til para que el modelo no se pase de la respuesta que queremos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"¬øCu√°l es el mejor lenguaje de programaci√≥n para aprender?"</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="p">,</span>',
          '  <span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">}],</span>',
          '  <span class="n">max_tokens</span> <span class="o">=</span> <span class="mi">50</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '',
          '<span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].finish_reason = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">finish_reason</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'La respuesta a esta pregunta puede variar dependiendo de los intereses y objetivos individuales, ya que cada lenguaje de programaci√≥n tiene sus propias ventajas y desventajas. Sin embargo, algunos de los lenguajes m√°s',
          'response.choices[0].finish_reason = length',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos la respuesta se corta a medias porque superar√≠a el l√≠mite de tokens. Adem√°s ahora el motivo de parada es <code>length</code> en vez de <code>stop</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Creatividad-del-modelo-mediante-la-temperatura">Creatividad del modelo mediante la temperatura<a class="anchor-link" href="#Creatividad-del-modelo-mediante-la-temperatura"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 11" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos hacer que el modelo sea m√°s creativo mediante la temperatura. Cuanto mayor sea el valor, m√°s creativo ser√° el modelo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"¬øCu√°l es el mejor lenguaje de programaci√≥n para aprender?"</span>',
          '<span class="n">temperature</span> <span class="o">=</span> <span class="mi">0</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="p">,</span>',
          '  <span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">}],</span>',
          '  <span class="n">temperature</span> <span class="o">=</span> <span class="n">temperature</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '',
          '<span class="n">content_0</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content_0</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'No hay un "mejor" lenguaje de programaci√≥n para aprender, ya que la elecci√≥n depende de los intereses y objetivos individuales. Algunos lenguajes populares para principiantes incluyen Python, JavaScript, Java y C#. Cada uno tiene sus propias ventajas y desventajas, por lo que es importante investigar y considerar qu√© tipo de desarrollo de software te interesa antes de elegir un lenguaje para aprender.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"¬øCu√°l es el mejor lenguaje de programaci√≥n para aprender?"</span>',
          '<span class="n">temperature</span> <span class="o">=</span> <span class="mi">1</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="p">,</span>',
          '  <span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">}],</span>',
          '  <span class="n">temperature</span> <span class="o">=</span> <span class="n">temperature</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '',
          '<span class="n">content_1</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content_1</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'No hay un "mejor" lenguaje de programaci√≥n para aprender, ya que la elecci√≥n depende de los objetivos y preferencias individuales del programador. Sin embargo, algunos lenguajes populares para principiantes incluyen Python, JavaScript, Java y C++. Estos lenguajes son relativamente f√°ciles de aprender y tienen una amplia gama de aplicaciones en la industria de la tecnolog√≠a. Es importante considerar qu√© tipo de proyectos o campos de inter√©s te gustar√≠a explorar al momento de elegir un lenguaje de programaci√≥n para aprender.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">content_0</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content_1</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'No hay un "mejor" lenguaje de programaci√≥n para aprender, ya que la elecci√≥n depende de los intereses y objetivos individuales. Algunos lenguajes populares para principiantes incluyen Python, JavaScript, Java y C#. Cada uno tiene sus propias ventajas y desventajas, por lo que es importante investigar y considerar qu√© tipo de desarrollo de software te interesa antes de elegir un lenguaje para aprender.',
          'No hay un "mejor" lenguaje de programaci√≥n para aprender, ya que la elecci√≥n depende de los objetivos y preferencias individuales del programador. Sin embargo, algunos lenguajes populares para principiantes incluyen Python, JavaScript, Java y C++. Estos lenguajes son relativamente f√°ciles de aprender y tienen una amplia gama de aplicaciones en la industria de la tecnolog√≠a. Es importante considerar qu√© tipo de proyectos o campos de inter√©s te gustar√≠a explorar al momento de elegir un lenguaje de programaci√≥n para aprender.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Creatividad-del-modelo-mediante-el-top_p">Creatividad del modelo mediante el top_p<a class="anchor-link" href="#Creatividad-del-modelo-mediante-el-top_p"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 12" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos hacer que el modelo sea m√°s creativo mediante el par√°metro <code>top_p</code>. Cuanto mayor sea el valor, m√°s creativo ser√° el modelo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"¬øCu√°l es el mejor lenguaje de programaci√≥n para aprender?"</span>',
          '<span class="n">top_p</span> <span class="o">=</span> <span class="mi">0</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="p">,</span>',
          '  <span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">}],</span>',
          '  <span class="n">top_p</span> <span class="o">=</span> <span class="n">top_p</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '',
          '<span class="n">content_0</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content_0</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'No hay un "mejor" lenguaje de programaci√≥n para aprender, ya que la elecci√≥n depende de los intereses y objetivos individuales. Algunos lenguajes populares para principiantes incluyen Python, JavaScript, Java y C#. Cada uno tiene sus propias ventajas y desventajas, por lo que es importante investigar y considerar qu√© tipo de desarrollo de software te interesa antes de elegir un lenguaje para aprender.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"¬øCu√°l es el mejor lenguaje de programaci√≥n para aprender?"</span>',
          '<span class="n">top_p</span> <span class="o">=</span> <span class="mi">1</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="p">,</span>',
          '  <span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">}],</span>',
          '  <span class="n">top_p</span> <span class="o">=</span> <span class="n">top_p</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '',
          '<span class="n">content_1</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content_1</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'El mejor lenguaje de programaci√≥n para aprender depende de los objetivos del aprendizaje y del tipo de programaci√≥n que se quiera realizar. Algunos lenguajes de programaci√≥n populares para principiantes incluyen Python, Java, JavaScript y Ruby. Sin embargo, cada lenguaje tiene sus propias ventajas y desventajas, por lo que es importante considerar qu√© tipo de proyectos o aplicaciones se quieren desarrollar antes de elegir un lenguaje de programaci√≥n para aprender. Python es a menudo recomendado por su facilidad de uso y versatilidad, mientras que JavaScript es ideal para la programaci√≥n web.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">content_0</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content_1</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'No hay un "mejor" lenguaje de programaci√≥n para aprender, ya que la elecci√≥n depende de los intereses y objetivos individuales. Algunos lenguajes populares para principiantes incluyen Python, JavaScript, Java y C#. Cada uno tiene sus propias ventajas y desventajas, por lo que es importante investigar y considerar qu√© tipo de desarrollo de software te interesa antes de elegir un lenguaje para aprender.',
          'El mejor lenguaje de programaci√≥n para aprender depende de los objetivos del aprendizaje y del tipo de programaci√≥n que se quiera realizar. Algunos lenguajes de programaci√≥n populares para principiantes incluyen Python, Java, JavaScript y Ruby. Sin embargo, cada lenguaje tiene sus propias ventajas y desventajas, por lo que es importante considerar qu√© tipo de proyectos o aplicaciones se quieren desarrollar antes de elegir un lenguaje de programaci√≥n para aprender. Python es a menudo recomendado por su facilidad de uso y versatilidad, mientras que JavaScript es ideal para la programaci√≥n web.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="N%C3%BAmero-de-respuestas">N√∫mero de respuestas<a class="anchor-link" href="#N%C3%BAmero-de-respuestas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 13" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos pedirle a la API que nos devuelva m√°s de una respuesta. Esto es √∫til para que el modelo nos devuelva varias respuestas y as√≠ poder elegir la que m√°s nos guste, para esto vamos a poner los par√°metros <code>temperature</code> y <code>top_p</code> a 1 para que el modelo sea m√°s creativo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"¬øCu√°l es el mejor lenguaje de programaci√≥n para aprender?"</span>',
          '<span class="n">temperature</span> <span class="o">=</span> <span class="mi">1</span>',
          '<span class="n">top_p</span> <span class="o">=</span> <span class="mi">1</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="p">,</span>',
          '  <span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">}],</span>',
          '  <span class="n">temperature</span> <span class="o">=</span> <span class="n">temperature</span><span class="p">,</span>',
          '  <span class="n">top_p</span> <span class="o">=</span> <span class="n">top_p</span><span class="p">,</span>',
          '  <span class="n">n</span> <span class="o">=</span> <span class="mi">4</span>',
          '<span class="p">)</span>',
          '',
          '<span class="n">content_0</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="n">content_1</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="n">content_2</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="n">content_3</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content_0</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content_1</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content_2</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">content_3</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'El mejor lenguaje de programaci√≥n para aprender depende de tus objetivos y del tipo de aplicaciones que te interese desarrollar. Algunos de los lenguajes m√°s populares para aprender son:',
          '		1. Python: Es un lenguaje de programaci√≥n vers√°til, f√°cil de aprender y con una amplia comunidad de desarrolladores. Es ideal para principiantes y se utiliza en una gran variedad de aplicaciones, desde desarrollo web hasta inteligencia artificial.',
          '		2. JavaScript: Es el lenguaje de programaci√≥n m√°s utilizado en el desarrollo web. Es imprescindible para aquellos que quieren trabajar en el √°mbito del desarrollo frontend y backend.',
          '		3. Java: Es un lenguaje de programaci√≥n muy popular en el √°mbito empresarial, por lo que aprender Java puede abrirte muchas puertas laborales. Adem√°s, es un lenguaje estructurado que te ense√±ar√° conceptos importantes de la programaci√≥n orientada a objetos.',
          '		4. C#: Es un lenguaje de programaci√≥n desarrollado por Microsoft que se utiliza especialmente en el desarrollo de aplicaciones para Windows. Es ideal para aquellos que quieran enfocarse en el desarrollo de aplicaciones de escritorio.',
          '		En resumen, el mejor lenguaje de programaci√≥n para aprender depende de tus intereses y objetivos personales. Es importante investigar y considerar qu√© tipos de aplicaciones te gustar√≠a desarrollar para elegir el lenguaje que m√°s se adapte a tus necesidades.',
          'El mejor lenguaje de programaci√≥n para aprender depende de los objetivos y necesidades individuales. Algunos de los lenguajes de programaci√≥n m√°s populares y ampliamente utilizados incluyen Python, JavaScript, Java, C++, Ruby y muchos otros. Python es a menudo recomendado para principiantes debido a su sintaxis simple y legible, mientras que JavaScript es esencial para el desarrollo web. Java es ampliamente utilizado en el desarrollo de aplicaciones empresariales y Android, y C++ es com√∫nmente utilizado en sistemas embebidos y juegos. En √∫ltima instancia, el mejor lenguaje de programaci√≥n para aprender depender√° de lo que quiera lograr con su habilidades de programaci√≥n.',
          'El mejor lenguaje de programaci√≥n para aprender depende de los intereses y objetivos individuales de cada persona. Algunos de los lenguajes m√°s populares y bien documentados para principiantes incluyen Python, JavaScript, Java y C#. Python es conocido por su simplicidad y versatilidad, mientras que JavaScript es esencial para el desarrollo web. Java y C# son lenguajes ampliamente utilizados en la industria y proporcionan una base s√≥lida para aprender otros lenguajes. En √∫ltima instancia, la elecci√≥n del lenguaje depender√° de las metas personales y la aplicaci√≥n deseada.',
          'El mejor lenguaje de programaci√≥n para aprender depende de los intereses y objetivos de cada persona. Algunos lenguajes populares para principiantes incluyen Python, Java, JavaScript, C++ y Ruby. Python es frecuentemente recomendado para aprender a programar debido a su sintaxis sencilla y legible, mientras que Java es utilizado en aplicaciones empresariales y Android. JavaScript es fundamental para el desarrollo web, y C++ es com√∫nmente utilizado en aplicaciones de alto rendimiento. Ruby es conocido por su facilidad de uso y flexibilidad. En √∫ltima instancia, la elecci√≥n del lenguaje depender√° de qu√© tipo de desarrollo te interesa y qu√© tipo de proyectos deseas realizar.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Reentrenar-modelo-de-OpenAI">Reentrenar modelo de OpenAI<a class="anchor-link" href="#Reentrenar-modelo-de-OpenAI"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 14" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>OpenAI ofrece la posibilidad de reentrenar sus modelos de la API para obtener mejores resultados sobre nuestros propios datos. Esto tiene las siguientes ventajas</p>
      <ul>
      <li>Se obtienen resultados de mayor calidad para nuestros datos</li>
      <li>En un prompt podemos darle ejemplos para que se comporte como queramos, pero solo unos pocos. De esta manera, reentren√°ndolo podemos darle muchos m√°s.</li>
      <li>Ahorro de tokens debido a indicaciones m√°s cortas. Como ya le hemos entrenado para nuestro caso de uso, podemos darle menos indicaciones para que resuelva nuestras tareas</li>
      <li>Solicitudes de menor latencia. Al llamar a modelos propios tendremos menos latencia</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Preparaci%C3%B3n-de-los-datos">Preparaci√≥n de los datos<a class="anchor-link" href="#Preparaci%C3%B3n-de-los-datos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 15" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>La API de OpenAI nos pide que le demos los datos en un archivo <code>jsonl</code> en el siguiente formato</p>
      <div class="highlight"><pre><span></span><span class="p">{opening_brace}</span>
      <span class="w">    </span><span class="nt">"messages"</span><span class="p">:</span><span class="w"> </span>
      <span class="w">    </span><span class="p">[</span>
      <span class="w">        </span><span class="p">{opening_brace}</span>
      <span class="w">            </span><span class="nt">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"system"</span><span class="p">,</span><span class="w"> </span><span class="nt">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Marv is a factual chatbot that is also sarcastic."</span>
      <span class="w">        </span><span class="p">{closing_brace},</span><span class="w"> </span>
      <span class="w">        </span><span class="p">{opening_brace}</span>
      <span class="w">            </span><span class="nt">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"user"</span><span class="p">,</span><span class="w"> </span><span class="nt">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"What's the capital of France?"</span>
      <span class="w">        </span><span class="p">{closing_brace},</span><span class="w"> </span>
      <span class="w">        </span><span class="p">{opening_brace}</span>
      <span class="w">            </span><span class="nt">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"assistant"</span><span class="p">,</span><span class="w"> </span><span class="nt">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Paris, as if everyone doesn't know that already."</span>
      <span class="w">        </span><span class="p">{closing_brace}</span>
      <span class="w">    </span><span class="p">]</span>
      <span class="p">{closing_brace}</span>
      <span class="p">{opening_brace}</span>
      <span class="w">    </span><span class="nt">"messages"</span><span class="p">:</span><span class="w"> </span>
      <span class="w">    </span><span class="p">[</span>
      <span class="w">        </span><span class="p">{opening_brace}</span>
      <span class="w">            </span><span class="nt">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"system"</span><span class="p">,</span><span class="w"> </span><span class="nt">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Marv is a factual chatbot that is also sarcastic."</span>
      <span class="w">        </span><span class="p">{closing_brace},</span><span class="w"> </span>
      <span class="w">        </span><span class="p">{opening_brace}</span>
      <span class="w">            </span><span class="nt">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"user"</span><span class="p">,</span><span class="w"> </span><span class="nt">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Who wrote 'Romeo and Juliet'?"</span>
      <span class="w">        </span><span class="p">{closing_brace},</span><span class="w"> </span>
      <span class="w">        </span><span class="p">{opening_brace}</span>
      <span class="w">            </span><span class="nt">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"assistant"</span><span class="p">,</span><span class="w"> </span><span class="nt">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Oh, just some guy named William Shakespeare. Ever heard of him?"</span>
      <span class="w">        </span><span class="p">{closing_brace}</span>
      <span class="w">    </span><span class="p">]</span>
      <span class="p">{closing_brace}</span>
      <span class="p">{opening_brace}</span>
      <span class="w">    </span><span class="nt">"messages"</span><span class="p">:</span><span class="w"> </span>
      <span class="w">    </span><span class="p">[</span>
      <span class="w">        </span><span class="p">{opening_brace}</span>
      <span class="w">            </span><span class="nt">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"system"</span><span class="p">,</span><span class="w"> </span><span class="nt">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Marv is a factual chatbot that is also sarcastic."</span>
      <span class="w">        </span><span class="p">{closing_brace},</span><span class="w"> </span>
      <span class="w">        </span><span class="p">{opening_brace}</span>
      <span class="w">            </span><span class="nt">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"user"</span><span class="p">,</span><span class="w"> </span><span class="nt">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"How far is the Moon from Earth?"</span>
      <span class="w">        </span><span class="p">{closing_brace},</span><span class="w"> </span>
      <span class="w">        </span><span class="p">{opening_brace}</span>
      <span class="w">            </span><span class="nt">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"assistant"</span><span class="p">,</span><span class="w"> </span><span class="nt">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Around 384,400 kilometers. Give or take a few, like that really matters."</span>
      <span class="w">        </span><span class="p">{closing_brace}</span>
      <span class="w">    </span><span class="p">]</span>
      <span class="p">{closing_brace}</span>
      </pre></div>
      <p>Con un m√°ximo de 4096 tokens</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Validaci%C3%B3n-de-los-datos">Validaci√≥n de los datos<a class="anchor-link" href="#Validaci%C3%B3n-de-los-datos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 16" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para ahorrarme trabajo, le he ido pasando uno a uno todos mis post a chatgpt y le he dicho que me genere 10 <code>FAQ</code>s por cada uno en formato <code>CSV</code>, porque dudaba si me iba a poder generar un formato como el que piden en el <code>jsonl</code>. Y me ha generado un <code>CSV</code> con el siguiente formato para cada post</p>
      <pre><code class="language-csv">csv
      prompt,completion
      ¬øQu√© cubre la Introducci√≥n a Python en el material proporcionado?,"La Introducci√≥n a Python cubre temas como tipos de datos, operadores, uso de funciones y clases, manejo de objetos iterables y uso de m√≥dulos. [M√°s informaci√≥n](https://www.maximofn.com/python/)"
      ¬øCu√°les son los tipos de datos b√°sicos en Python?,"Python tiene 7 tipos de datos b√°sicos: texto (`str`), num√©ricos (`int`, `float`, `complex`), secuencias (`list`, `tuple`, `range`), mapping (`dict`), sets (`set`, `frozenset`), booleanos (`bool`) y binarios (`bytes`, `bytearray`, `memoryview`). [M√°s informaci√≥n](https://www.maximofn.com/python/)"
      ¬øQu√© son y c√≥mo se utilizan los operadores en Python?,"Los operadores en Python son s√≠mbolos especiales que se utilizan para realizar operaciones como suma, resta, multiplicaci√≥n y divisi√≥n entre variables y valores. Tambi√©n incluyen operadores l√≥gicos para comparaciones. [M√°s informaci√≥n](https://www.maximofn.com/python/)"
      ¬øC√≥mo se define y se utiliza una funci√≥n en Python?,"En Python, una funci√≥n se define usando la palabra clave `def`, seguida del nombre de la funci√≥n y par√©ntesis. Las funciones pueden tener par√°metros y devolver valores. Se utilizan para encapsular l√≥gica que se puede reutilizar a lo largo del c√≥digo. [M√°s informaci√≥n](https://www.maximofn.com/python/)"
      ¬øQu√© son las clases en Python y c√≥mo se utilizan?,"Las clases en Python son la base de la programaci√≥n orientada a objetos. Permiten crear objetos que encapsulan datos y funcionalidades. Las clases se definen usando la palabra clave `class`, seguida del nombre de la clase. [M√°s informaci√≥n](https://www.maximofn.com/python/)"
      ...</code></pre>
      <p>Cada <code>CSV</code> tiene 10 <code>FAQ</code>s</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Voy a hacer un c√≥digo que coja cada <code>CSV</code> y genere dos nuevos <code>jsonl</code>s, uno de entrenamiento y otro de validaci√≥n</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">os</span>',
      '      ',
      '      <span class="n">CSVs_path</span> <span class="o">=</span> <span class="s2">"openai/faqs_posts"</span>',
      '      <span class="n">percetn_train</span> <span class="o">=</span> <span class="mf">0.8</span>',
      '      <span class="n">percetn_validation</span> <span class="o">=</span> <span class="mf">0.2</span>',
      '      ',
      '      <span class="n">jsonl_train</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">CSVs_path</span><span class="p">,</span> <span class="s2">"train.jsonl"</span><span class="p">)</span>',
      '      <span class="n">jsonl_validation</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">CSVs_path</span><span class="p">,</span> <span class="s2">"validation.jsonl"</span><span class="p">)</span>',
      '      ',
      '      <span class="c1"># Create the train.jsonl and validation.jsonl files</span>',
      '      <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_train</span><span class="p">,</span> <span class="s1">\'w\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '          <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">\'\'</span><span class="p">)</span>',
      '      <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_validation</span><span class="p">,</span> <span class="s1">\'w\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '          <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">\'\'</span><span class="p">)</span>',
      '      ',
      '      <span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">CSVs_path</span><span class="p">):</span>  <span class="c1"># Get all files in the directory</span>',
      '          <span class="k">if</span> <span class="n">file</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s2">".csv"</span><span class="p">):</span>    <span class="c1"># Check if file is a csv</span>',
      '              <span class="n">csv</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">CSVs_path</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span> <span class="c1"># Get the path to the csv file</span>',
      '              <span class="n">number_of_lines</span> <span class="o">=</span> <span class="mi">0</span>',
      '              <span class="n">csv_content</span> <span class="o">=</span> <span class="p">[]</span>',
      '              <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="n">csv</span><span class="p">,</span> <span class="s1">\'r\'</span><span class="p">):</span> <span class="c1"># Read all lines in the csv file</span>',
      '                  <span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">\'prompt\'</span><span class="p">):</span>   <span class="c1"># Skip the first line</span>',
      '                      <span class="k">continue</span>',
      '                  <span class="n">number_of_lines</span> <span class="o">+=</span> <span class="mi">1</span>    <span class="c1"># Count the number of lines</span>',
      '                  <span class="n">csv_content</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>    <span class="c1"># Add the line to the csv_content list</span>',
      '      ',
      '              <span class="n">number_of_train</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">number_of_lines</span> <span class="o">*</span> <span class="n">percetn_train</span><span class="p">)</span>  <span class="c1"># Calculate the number of lines for the train.jsonl file</span>',
      '              <span class="n">number_of_validation</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">number_of_lines</span> <span class="o">*</span> <span class="n">percetn_validation</span><span class="p">)</span>    <span class="c1"># Calculate the number of lines for the validation.sjonl file</span>',
      '      ',
      '              <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">number_of_lines</span><span class="p">):</span>',
      '                  <span class="n">prompt</span> <span class="o">=</span> <span class="n">csv_content</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">\',\'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>',
      '                  <span class="n">response</span> <span class="o">=</span> <span class="s1">\',\'</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">csv_content</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">\',\'</span><span class="p">)[</span><span class="mi">1</span><span class="p">:])</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'\'</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'"\'</span><span class="p">,</span> <span class="s1">\'\'</span><span class="p">)</span>',
      '                  <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">number_of_train</span><span class="p">:</span>',
      '                      <span class="c1"># add line to train.jsonl</span>',
      '                      <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_train</span><span class="p">,</span> <span class="s1">\'a\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '                          <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'</span><span class="si">{</span><span class="s2">"{"</span><span class="si">}</span><span class="s1">"messages": [</span><span class="si">{</span><span class="s2">"{"</span><span class="si">}</span><span class="s1">"role": "system", "content": "Eres un amable asistente dispuesto a responder."</span><span class="si">{</span><span class="s2">"}"</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="s2">"{"</span><span class="si">}</span><span class="s1">"role": "user", "content": "</span><span class="si">{</span><span class="n">prompt</span><span class="si">}</span><span class="s1">"</span><span class="si">{</span><span class="s2">"}"</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="s2">"{"</span><span class="si">}</span><span class="s1">"role": "assistant", "content": "</span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="s1">"</span><span class="si">{</span><span class="s2">"}"</span><span class="si">}</span><span class="s1">]</span><span class="si">{</span><span class="s2">"}"</span><span class="si">}</span><span class="se">\n</span><span class="s1">\'</span><span class="p">)</span>',
      '                  <span class="k">elif</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">number_of_train</span> <span class="ow">and</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">number_of_train</span> <span class="o">+</span> <span class="n">number_of_validation</span><span class="p">:</span>',
      '                      <span class="c1"># add line to validation.csv</span>',
      '                      <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_validation</span><span class="p">,</span> <span class="s1">\'a\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '                          <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'</span><span class="si">{</span><span class="s2">"{"</span><span class="si">}</span><span class="s1">"messages": [</span><span class="si">{</span><span class="s2">"{"</span><span class="si">}</span><span class="s1">"role": "system", "content": "Eres un amable asistente dispuesto a responder."</span><span class="si">{</span><span class="s2">"}"</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="s2">"{"</span><span class="si">}</span><span class="s1">"role": "user", "content": "</span><span class="si">{</span><span class="n">prompt</span><span class="si">}</span><span class="s1">"</span><span class="si">{</span><span class="s2">"}"</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="s2">"{"</span><span class="si">}</span><span class="s1">"role": "assistant", "content": "</span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="s1">"</span><span class="si">{</span><span class="s2">"}"</span><span class="si">}</span><span class="s1">]</span><span class="si">{</span><span class="s2">"}"</span><span class="si">}</span><span class="se">\n</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>













































      
      <section class="section-block-markdown-cell">
      <p>Una vez tengo los dos <code>jsonl</code>s, ejecuto un <a href="https://cookbook.openai.com/examples/chat_finetuning_data_prep" target="_blank" rel="nofollow noreferrer">c√≥digo</a> que proporciona OpenAI para comprobar los <code>jsonl</code>s</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primero validamos los de entrenamiento</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">os</span>',
          '',
          '<span class="n">CSVs_path</span> <span class="o">=</span> <span class="s2">"openai/faqs_posts"</span>',
          '<span class="n">percetn_train</span> <span class="o">=</span> <span class="mf">0.8</span>',
          '<span class="n">percetn_validation</span> <span class="o">=</span> <span class="mf">0.2</span>',
          '',
          '<span class="n">jsonl_train</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">CSVs_path</span><span class="p">,</span> <span class="s2">"train.jsonl"</span><span class="p">)</span>',
          '<span class="n">jsonl_validation</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">CSVs_path</span><span class="p">,</span> <span class="s2">"validation.jsonl"</span><span class="p">)</span>',
          '',
          '<span class="c1"># Create the train.jsonl and validation.jsonl files</span>',
          '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_train</span><span class="p">,</span> <span class="s1">\'w\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
          '    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">\'\'</span><span class="p">)</span>',
          '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_validation</span><span class="p">,</span> <span class="s1">\'w\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
          '    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">\'\'</span><span class="p">)</span>',
          '',
          '<span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">CSVs_path</span><span class="p">):</span>  <span class="c1"># Get all files in the directory</span>',
          '    <span class="k">if</span> <span class="n">file</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s2">".csv"</span><span class="p">):</span>    <span class="c1"># Check if file is a csv</span>',
          '        <span class="n">csv</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">CSVs_path</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span> <span class="c1"># Get the path to the csv file</span>',
          '        <span class="n">number_of_lines</span> <span class="o">=</span> <span class="mi">0</span>',
          '        <span class="n">csv_content</span> <span class="o">=</span> <span class="p">[]</span>',
          '        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="n">csv</span><span class="p">,</span> <span class="s1">\'r\'</span><span class="p">):</span> <span class="c1"># Read all lines in the csv file</span>',
          '            <span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">\'prompt\'</span><span class="p">):</span>   <span class="c1"># Skip the first line</span>',
          '                <span class="k">continue</span>',
          '            <span class="n">number_of_lines</span> <span class="o">+=</span> <span class="mi">1</span>    <span class="c1"># Count the number of lines</span>',
          '            <span class="n">csv_content</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>    <span class="c1"># Add the line to the csv_content list</span>',
          '',
          '        <span class="n">number_of_train</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">number_of_lines</span> <span class="o">*</span> <span class="n">percetn_train</span><span class="p">)</span>  <span class="c1"># Calculate the number of lines for the train.jsonl file</span>',
          '        <span class="n">number_of_validation</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">number_of_lines</span> <span class="o">*</span> <span class="n">percetn_validation</span><span class="p">)</span>    <span class="c1"># Calculate the number of lines for the validation.sjonl file</span>',
          '',
          '        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">number_of_lines</span><span class="p">):</span>',
          '            <span class="n">prompt</span> <span class="o">=</span> <span class="n">csv_content</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">\',\'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>',
          '            <span class="n">response</span> <span class="o">=</span> <span class="s1">\',\'</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">csv_content</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">\',\'</span><span class="p">)[</span><span class="mi">1</span><span class="p">:])</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'\'</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'"\'</span><span class="p">,</span> <span class="s1">\'\'</span><span class="p">)</span>',
          '            <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">number_of_train</span><span class="p">:</span>',
          '                <span class="c1"># add line to train.jsonl</span>',
          '                <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_train</span><span class="p">,</span> <span class="s1">\'a\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
          '                    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'</span><span class="si">{</span><span class="s2">"{"</span><span class="si">}</span><span class="s1">"messages": [</span><span class="si">{</span><span class="s2">"{"</span><span class="si">}</span><span class="s1">"role": "system", "content": "Eres un amable asistente dispuesto a responder."</span><span class="si">{</span><span class="s2">"}"</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="s2">"{"</span><span class="si">}</span><span class="s1">"role": "user", "content": "</span><span class="si">{</span><span class="n">prompt</span><span class="si">}</span><span class="s1">"</span><span class="si">{</span><span class="s2">"}"</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="s2">"{"</span><span class="si">}</span><span class="s1">"role": "assistant", "content": "</span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="s1">"</span><span class="si">{</span><span class="s2">"}"</span><span class="si">}</span><span class="s1">]</span><span class="si">{</span><span class="s2">"}"</span><span class="si">}</span><span class="se">\\n</span><span class="s1">\'</span><span class="p">)</span>',
          '            <span class="k">elif</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">number_of_train</span> <span class="ow">and</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">number_of_train</span> <span class="o">+</span> <span class="n">number_of_validation</span><span class="p">:</span>',
          '                <span class="c1"># add line to validation.csv</span>',
          '                <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_validation</span><span class="p">,</span> <span class="s1">\'a\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
          '                    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'</span><span class="si">{</span><span class="s2">"{"</span><span class="si">}</span><span class="s1">"messages": [</span><span class="si">{</span><span class="s2">"{"</span><span class="si">}</span><span class="s1">"role": "system", "content": "Eres un amable asistente dispuesto a responder."</span><span class="si">{</span><span class="s2">"}"</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="s2">"{"</span><span class="si">}</span><span class="s1">"role": "user", "content": "</span><span class="si">{</span><span class="n">prompt</span><span class="si">}</span><span class="s1">"</span><span class="si">{</span><span class="s2">"}"</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="s2">"{"</span><span class="si">}</span><span class="s1">"role": "assistant", "content": "</span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="s1">"</span><span class="si">{</span><span class="s2">"}"</span><span class="si">}</span><span class="s1">]</span><span class="si">{</span><span class="s2">"}"</span><span class="si">}</span><span class="se">\\n</span><span class="s1">\'</span><span class="p">)</span>',
          '</span><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>',
          '<span class="kn">import</span> <span class="nn">json</span>',
          '',
          '<span class="c1"># Format error checks</span>',
          '<span class="n">format_errors</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>',
          '',
          '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_train</span><span class="p">,</span> <span class="s1">\'r\'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">\'utf-8\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
          '    <span class="n">dataset</span> <span class="o">=</span> <span class="p">[</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>',
          '',
          '<span class="k">for</span> <span class="n">ex</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>',
          '    <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">ex</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>',
          '        <span class="n">format_errors</span><span class="p">[</span><span class="s2">"data_type"</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
          '        <span class="k">continue</span>',
          '        ',
          '    <span class="n">messages</span> <span class="o">=</span> <span class="n">ex</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"messages"</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>',
          '    <span class="k">if</span> <span class="ow">not</span> <span class="n">messages</span><span class="p">:</span>',
          '        <span class="n">format_errors</span><span class="p">[</span><span class="s2">"missing_messages_list"</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
          '        <span class="k">continue</span>',
          '        ',
          '    <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>',
          '        <span class="k">if</span> <span class="s2">"role"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">message</span> <span class="ow">or</span> <span class="s2">"content"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">message</span><span class="p">:</span>',
          '            <span class="n">format_errors</span><span class="p">[</span><span class="s2">"message_missing_key"</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
          '        ',
          '        <span class="k">if</span> <span class="nb">any</span><span class="p">(</span><span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">(</span><span class="s2">"role"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">,</span> <span class="s2">"name"</span><span class="p">,</span> <span class="s2">"function_call"</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">message</span><span class="p">):</span>',
          '            <span class="n">format_errors</span><span class="p">[</span><span class="s2">"message_unrecognized_key"</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
          '        ',
          '        <span class="k">if</span> <span class="n">message</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"role"</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">(</span><span class="s2">"system"</span><span class="p">,</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"assistant"</span><span class="p">,</span> <span class="s2">"function"</span><span class="p">):</span>',
          '            <span class="n">format_errors</span><span class="p">[</span><span class="s2">"unrecognized_role"</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
          '            ',
          '        <span class="n">content</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"content"</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>',
          '        <span class="n">function_call</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"function_call"</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>',
          '        ',
          '        <span class="k">if</span> <span class="p">(</span><span class="ow">not</span> <span class="n">content</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">function_call</span><span class="p">)</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>',
          '            <span class="n">format_errors</span><span class="p">[</span><span class="s2">"missing_content"</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
          '    ',
          '    <span class="k">if</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"role"</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span> <span class="o">==</span> <span class="s2">"assistant"</span> <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">):</span>',
          '        <span class="n">format_errors</span><span class="p">[</span><span class="s2">"example_missing_assistant_message"</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
          '',
          '<span class="k">if</span> <span class="n">format_errors</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"Found errors:"</span><span class="p">)</span>',
          '    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">format_errors</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">k</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">v</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="k">else</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"No errors found"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'No errors found',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y ahora los de validaci√≥n</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Format error checks</span>',
          '<span class="n">format_errors</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>',
          '',
          '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_validation</span><span class="p">,</span> <span class="s1">\'r\'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">\'utf-8\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
          '    <span class="n">dataset</span> <span class="o">=</span> <span class="p">[</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>',
          '',
          '<span class="k">for</span> <span class="n">ex</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>',
          '    <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">ex</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>',
          '        <span class="n">format_errors</span><span class="p">[</span><span class="s2">"data_type"</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
          '        <span class="k">continue</span>',
          '        ',
          '    <span class="n">messages</span> <span class="o">=</span> <span class="n">ex</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"messages"</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>',
          '    <span class="k">if</span> <span class="ow">not</span> <span class="n">messages</span><span class="p">:</span>',
          '        <span class="n">format_errors</span><span class="p">[</span><span class="s2">"missing_messages_list"</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
          '        <span class="k">continue</span>',
          '        ',
          '    <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>',
          '        <span class="k">if</span> <span class="s2">"role"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">message</span> <span class="ow">or</span> <span class="s2">"content"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">message</span><span class="p">:</span>',
          '            <span class="n">format_errors</span><span class="p">[</span><span class="s2">"message_missing_key"</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
          '        ',
          '        <span class="k">if</span> <span class="nb">any</span><span class="p">(</span><span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">(</span><span class="s2">"role"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">,</span> <span class="s2">"name"</span><span class="p">,</span> <span class="s2">"function_call"</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">message</span><span class="p">):</span>',
          '            <span class="n">format_errors</span><span class="p">[</span><span class="s2">"message_unrecognized_key"</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
          '        ',
          '        <span class="k">if</span> <span class="n">message</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"role"</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">(</span><span class="s2">"system"</span><span class="p">,</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"assistant"</span><span class="p">,</span> <span class="s2">"function"</span><span class="p">):</span>',
          '            <span class="n">format_errors</span><span class="p">[</span><span class="s2">"unrecognized_role"</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
          '            ',
          '        <span class="n">content</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"content"</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>',
          '        <span class="n">function_call</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"function_call"</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>',
          '        ',
          '        <span class="k">if</span> <span class="p">(</span><span class="ow">not</span> <span class="n">content</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">function_call</span><span class="p">)</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>',
          '            <span class="n">format_errors</span><span class="p">[</span><span class="s2">"missing_content"</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
          '    ',
          '    <span class="k">if</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"role"</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span> <span class="o">==</span> <span class="s2">"assistant"</span> <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">):</span>',
          '        <span class="n">format_errors</span><span class="p">[</span><span class="s2">"example_missing_assistant_message"</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
          '',
          '<span class="k">if</span> <span class="n">format_errors</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"Found errors:"</span><span class="p">)</span>',
          '    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">format_errors</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">k</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">v</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="k">else</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"No errors found"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'No errors found',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="C%C3%A1lculo-de-tokens">C√°lculo de tokens<a class="anchor-link" href="#C%C3%A1lculo-de-tokens"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 17" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El n√∫mero m√°ximo de tokens de cada ejemplo tiene que ser 4096, por lo que si tenemos ejemplos m√°s largos solo se usar√°n los primeros 4096 tokens. Por lo que vamos a contar el n√∫mero de tokens que tiene cada <code>jsonl</code> para saber cu√°nto nos va a costar reentrenar el modelo</p>
      <p>Pero primero hay que intalar la librer√≠a <code>tiktoken</code>, que es el tokenizador que usa OpenAI y que nos va a servir para adem√°s saber cu√°ntos tokens tiene cada <code>CSV</code>, y por tanto, cu√°nto nos va a costar reentrenar el modelo.</p>
      <p>Para instalarla ejecutamos el siguiente comando</p>
      <div class="highlight"><pre><span></span>pip<span class="w"> </span>install<span class="w"> </span>tiktoken
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos unas cuantas funciones necesarias</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">tiktoken</span>',
      '      <span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>',
      '      ',
      '      <span class="n">encoding</span> <span class="o">=</span> <span class="n">tiktoken</span><span class="o">.</span><span class="n">get_encoding</span><span class="p">(</span><span class="s2">"cl100k_base"</span><span class="p">)</span>',
      '      ',
      '      <span class="k">def</span> <span class="nf">num_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">,</span> <span class="n">tokens_per_message</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">tokens_per_name</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>',
      '          <span class="n">num_tokens</span> <span class="o">=</span> <span class="mi">0</span>',
      '          <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>',
      '              <span class="n">num_tokens</span> <span class="o">+=</span> <span class="n">tokens_per_message</span>',
      '              <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">message</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>',
      '                  <span class="n">num_tokens</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">encoding</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>',
      '                  <span class="k">if</span> <span class="n">key</span> <span class="o">==</span> <span class="s2">"name"</span><span class="p">:</span>',
      '                      <span class="n">num_tokens</span> <span class="o">+=</span> <span class="n">tokens_per_name</span>',
      '          <span class="n">num_tokens</span> <span class="o">+=</span> <span class="mi">3</span>',
      '          <span class="k">return</span> <span class="n">num_tokens</span>',
      '      ',
      '      <span class="k">def</span> <span class="nf">num_assistant_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">):</span>',
      '          <span class="n">num_tokens</span> <span class="o">=</span> <span class="mi">0</span>',
      '          <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>',
      '              <span class="k">if</span> <span class="n">message</span><span class="p">[</span><span class="s2">"role"</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"assistant"</span><span class="p">:</span>',
      '                  <span class="n">num_tokens</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">encoding</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">message</span><span class="p">[</span><span class="s2">"content"</span><span class="p">]))</span>',
      '          <span class="k">return</span> <span class="n">num_tokens</span>',
      '      ',
      '      <span class="k">def</span> <span class="nf">print_distribution</span><span class="p">(</span><span class="n">values</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>',
      '          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\n</span><span class="s2">#### Distribution of </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">:"</span><span class="p">)</span>',
      '          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"min:</span><span class="si">{</span><span class="nb">min</span><span class="p">(</span><span class="n">values</span><span class="p">)</span><span class="si">}</span><span class="s2">, max: </span><span class="si">{</span><span class="nb">max</span><span class="p">(</span><span class="n">values</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      '          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"mean: </span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">values</span><span class="p">)</span><span class="si">}</span><span class="s2">, median: </span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">median</span><span class="p">(</span><span class="n">values</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      '          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"p5: </span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">quantile</span><span class="p">(</span><span class="n">values</span><span class="p">,</span><span class="w"> </span><span class="mf">0.1</span><span class="p">)</span><span class="si">}</span><span class="s2">, p95: </span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">quantile</span><span class="p">(</span><span class="n">values</span><span class="p">,</span><span class="w"> </span><span class="mf">0.9</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>

































      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">tiktoken</span>',
          '<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>',
          '',
          '<span class="n">encoding</span> <span class="o">=</span> <span class="n">tiktoken</span><span class="o">.</span><span class="n">get_encoding</span><span class="p">(</span><span class="s2">"cl100k_base"</span><span class="p">)</span>',
          '',
          '<span class="k">def</span> <span class="nf">num_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">,</span> <span class="n">tokens_per_message</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">tokens_per_name</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>',
          '    <span class="n">num_tokens</span> <span class="o">=</span> <span class="mi">0</span>',
          '    <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>',
          '        <span class="n">num_tokens</span> <span class="o">+=</span> <span class="n">tokens_per_message</span>',
          '        <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">message</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>',
          '            <span class="n">num_tokens</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">encoding</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>',
          '            <span class="k">if</span> <span class="n">key</span> <span class="o">==</span> <span class="s2">"name"</span><span class="p">:</span>',
          '                <span class="n">num_tokens</span> <span class="o">+=</span> <span class="n">tokens_per_name</span>',
          '    <span class="n">num_tokens</span> <span class="o">+=</span> <span class="mi">3</span>',
          '    <span class="k">return</span> <span class="n">num_tokens</span>',
          '',
          '<span class="k">def</span> <span class="nf">num_assistant_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">):</span>',
          '    <span class="n">num_tokens</span> <span class="o">=</span> <span class="mi">0</span>',
          '    <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>',
          '        <span class="k">if</span> <span class="n">message</span><span class="p">[</span><span class="s2">"role"</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"assistant"</span><span class="p">:</span>',
          '            <span class="n">num_tokens</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">encoding</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">message</span><span class="p">[</span><span class="s2">"content"</span><span class="p">]))</span>',
          '    <span class="k">return</span> <span class="n">num_tokens</span>',
          '',
          '<span class="k">def</span> <span class="nf">print_distribution</span><span class="p">(</span><span class="n">values</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">#### Distribution of </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">:"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"min:</span><span class="si">{</span><span class="nb">min</span><span class="p">(</span><span class="n">values</span><span class="p">)</span><span class="si">}</span><span class="s2">, max: </span><span class="si">{</span><span class="nb">max</span><span class="p">(</span><span class="n">values</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"mean: </span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">values</span><span class="p">)</span><span class="si">}</span><span class="s2">, median: </span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">median</span><span class="p">(</span><span class="n">values</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"p5: </span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">quantile</span><span class="p">(</span><span class="n">values</span><span class="p">,</span><span class="w"> </span><span class="mf">0.1</span><span class="p">)</span><span class="si">}</span><span class="s2">, p95: </span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">quantile</span><span class="p">(</span><span class="n">values</span><span class="p">,</span><span class="w"> </span><span class="mf">0.9</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '</span><span class="c1"># Warnings and tokens counts</span>',
          '<span class="n">n_missing_system</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">n_missing_user</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">n_messages</span> <span class="o">=</span> <span class="p">[]</span>',
          '<span class="n">convo_lens</span> <span class="o">=</span> <span class="p">[]</span>',
          '<span class="n">assistant_message_lens</span> <span class="o">=</span> <span class="p">[]</span>',
          '',
          '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_train</span><span class="p">,</span> <span class="s1">\'r\'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">\'utf-8\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
          '    <span class="n">dataset</span> <span class="o">=</span> <span class="p">[</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>',
          '',
          '<span class="k">for</span> <span class="n">ex</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>',
          '    <span class="n">messages</span> <span class="o">=</span> <span class="n">ex</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]</span>',
          '    <span class="k">if</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span><span class="n">message</span><span class="p">[</span><span class="s2">"role"</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"system"</span> <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">):</span>',
          '        <span class="n">n_missing_system</span> <span class="o">+=</span> <span class="mi">1</span>',
          '    <span class="k">if</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span><span class="n">message</span><span class="p">[</span><span class="s2">"role"</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"user"</span> <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">):</span>',
          '        <span class="n">n_missing_user</span> <span class="o">+=</span> <span class="mi">1</span>',
          '    <span class="n">n_messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">messages</span><span class="p">))</span>',
          '    <span class="n">convo_lens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">))</span>',
          '    <span class="n">assistant_message_lens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num_assistant_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">))</span>',
          '    ',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Num examples missing system message:"</span><span class="p">,</span> <span class="n">n_missing_system</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Num examples missing user message:"</span><span class="p">,</span> <span class="n">n_missing_user</span><span class="p">)</span>',
          '<span class="n">print_distribution</span><span class="p">(</span><span class="n">n_messages</span><span class="p">,</span> <span class="s2">"num_messages_per_example"</span><span class="p">)</span>',
          '<span class="n">print_distribution</span><span class="p">(</span><span class="n">convo_lens</span><span class="p">,</span> <span class="s2">"num_total_tokens_per_example"</span><span class="p">)</span>',
          '<span class="n">print_distribution</span><span class="p">(</span><span class="n">assistant_message_lens</span><span class="p">,</span> <span class="s2">"num_assistant_tokens_per_example"</span><span class="p">)</span>',
          '<span class="n">n_too_long</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">l</span> <span class="o">&gt;</span> <span class="mi">4096</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">convo_lens</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="si">{</span><span class="n">n_too_long</span><span class="si">}</span><span class="s2"> examples may be over the 4096 token limit, they will be truncated during fine-tuning"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Num examples missing system message: 0',
          'Num examples missing user message: 0',
          '#### Distribution of num_messages_per_example:',
          'min:3, max: 3',
          'mean: 3.0, median: 3.0',
          'p5: 3.0, p95: 3.0',
          '#### Distribution of num_total_tokens_per_example:',
          'min:67, max: 132',
          'mean: 90.13793103448276, median: 90.0',
          'p5: 81.5, p95: 99.5',
          '#### Distribution of num_assistant_tokens_per_example:',
          'min:33, max: 90',
          'mean: 48.66379310344828, median: 48.5',
          'p5: 41.0, p95: 55.5',
          '0 examples may be over the 4096 token limit, they will be truncated during fine-tuning',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos en el set de entrenamiento ning√∫n mensaje sobrepasa los 4096 tokens</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Warnings and tokens counts</span>',
          '<span class="n">n_missing_system</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">n_missing_user</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">n_messages</span> <span class="o">=</span> <span class="p">[]</span>',
          '<span class="n">convo_lens</span> <span class="o">=</span> <span class="p">[]</span>',
          '<span class="n">assistant_message_lens</span> <span class="o">=</span> <span class="p">[]</span>',
          '',
          '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_validation</span><span class="p">,</span> <span class="s1">\'r\'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">\'utf-8\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
          '    <span class="n">dataset</span> <span class="o">=</span> <span class="p">[</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>',
          '',
          '<span class="k">for</span> <span class="n">ex</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>',
          '    <span class="n">messages</span> <span class="o">=</span> <span class="n">ex</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]</span>',
          '    <span class="k">if</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span><span class="n">message</span><span class="p">[</span><span class="s2">"role"</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"system"</span> <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">):</span>',
          '        <span class="n">n_missing_system</span> <span class="o">+=</span> <span class="mi">1</span>',
          '    <span class="k">if</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span><span class="n">message</span><span class="p">[</span><span class="s2">"role"</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"user"</span> <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">):</span>',
          '        <span class="n">n_missing_user</span> <span class="o">+=</span> <span class="mi">1</span>',
          '    <span class="n">n_messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">messages</span><span class="p">))</span>',
          '    <span class="n">convo_lens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">))</span>',
          '    <span class="n">assistant_message_lens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num_assistant_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">))</span>',
          '    ',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Num examples missing system message:"</span><span class="p">,</span> <span class="n">n_missing_system</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Num examples missing user message:"</span><span class="p">,</span> <span class="n">n_missing_user</span><span class="p">)</span>',
          '<span class="n">print_distribution</span><span class="p">(</span><span class="n">n_messages</span><span class="p">,</span> <span class="s2">"num_messages_per_example"</span><span class="p">)</span>',
          '<span class="n">print_distribution</span><span class="p">(</span><span class="n">convo_lens</span><span class="p">,</span> <span class="s2">"num_total_tokens_per_example"</span><span class="p">)</span>',
          '<span class="n">print_distribution</span><span class="p">(</span><span class="n">assistant_message_lens</span><span class="p">,</span> <span class="s2">"num_assistant_tokens_per_example"</span><span class="p">)</span>',
          '<span class="n">n_too_long</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">l</span> <span class="o">&gt;</span> <span class="mi">4096</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">convo_lens</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="si">{</span><span class="n">n_too_long</span><span class="si">}</span><span class="s2"> examples may be over the 4096 token limit, they will be truncated during fine-tuning"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Num examples missing system message: 0',
          'Num examples missing user message: 0',
          '#### Distribution of num_messages_per_example:',
          'min:3, max: 3',
          'mean: 3.0, median: 3.0',
          'p5: 3.0, p95: 3.0',
          '#### Distribution of num_total_tokens_per_example:',
          'min:80, max: 102',
          'mean: 89.93333333333334, median: 91.0',
          'p5: 82.2, p95: 96.8',
          '#### Distribution of num_assistant_tokens_per_example:',
          'min:41, max: 57',
          'mean: 48.2, median: 49.0',
          'p5: 42.8, p95: 51.6',
          '0 examples may be over the 4096 token limit, they will be truncated during fine-tuning',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Tampoco pasa de 4096 tokens ning√∫n mensaje del set de validaci√≥n</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="C%C3%A1culo-del-coste">C√°culo del coste<a class="anchor-link" href="#C%C3%A1culo-del-coste"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 18" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Otra cosa muy importante es saber cu√°nto nos va a costar hacer este fine-tuning.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Pricing and default n_epochs estimate</span>',
          '<span class="n">MAX_TOKENS_PER_EXAMPLE</span> <span class="o">=</span> <span class="mi">4096</span>',
          '',
          '<span class="n">TARGET_EPOCHS</span> <span class="o">=</span> <span class="mi">3</span>',
          '<span class="n">MIN_TARGET_EXAMPLES</span> <span class="o">=</span> <span class="mi">100</span>',
          '<span class="n">MAX_TARGET_EXAMPLES</span> <span class="o">=</span> <span class="mi">25000</span>',
          '<span class="n">MIN_DEFAULT_EPOCHS</span> <span class="o">=</span> <span class="mi">1</span>',
          '<span class="n">MAX_DEFAULT_EPOCHS</span> <span class="o">=</span> <span class="mi">25</span>',
          '',
          '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_train</span><span class="p">,</span> <span class="s1">\'r\'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">\'utf-8\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
          '    <span class="n">dataset</span> <span class="o">=</span> <span class="p">[</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>',
          '',
          '<span class="n">convo_lens</span> <span class="o">=</span> <span class="p">[]</span>',
          '<span class="k">for</span> <span class="n">ex</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>',
          '    <span class="n">messages</span> <span class="o">=</span> <span class="n">ex</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]</span>',
          '    <span class="n">convo_lens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">))</span>',
          '',
          '<span class="n">n_epochs</span> <span class="o">=</span> <span class="n">TARGET_EPOCHS</span>',
          '<span class="n">n_train_examples</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span>',
          '<span class="k">if</span> <span class="n">n_train_examples</span> <span class="o">*</span> <span class="n">TARGET_EPOCHS</span> <span class="o">&lt;</span> <span class="n">MIN_TARGET_EXAMPLES</span><span class="p">:</span>',
          '    <span class="n">n_epochs</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">MAX_DEFAULT_EPOCHS</span><span class="p">,</span> <span class="n">MIN_TARGET_EXAMPLES</span> <span class="o">//</span> <span class="n">n_train_examples</span><span class="p">)</span>',
          '<span class="k">elif</span> <span class="n">n_train_examples</span> <span class="o">*</span> <span class="n">TARGET_EPOCHS</span> <span class="o">&gt;</span> <span class="n">MAX_TARGET_EXAMPLES</span><span class="p">:</span>',
          '    <span class="n">n_epochs</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">MIN_DEFAULT_EPOCHS</span><span class="p">,</span> <span class="n">MAX_TARGET_EXAMPLES</span> <span class="o">//</span> <span class="n">n_train_examples</span><span class="p">)</span>',
          '',
          '<span class="n">n_billing_tokens_in_dataset</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">MAX_TOKENS_PER_EXAMPLE</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span> <span class="k">for</span> <span class="n">length</span> <span class="ow">in</span> <span class="n">convo_lens</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Dataset has ~</span><span class="si">{</span><span class="n">n_billing_tokens_in_dataset</span><span class="si">}</span><span class="s2"> tokens that will be charged for during training"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"By default, you\'ll train for </span><span class="si">{</span><span class="n">n_epochs</span><span class="si">}</span><span class="s2"> epochs on this dataset"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"By default, you\'ll be charged for ~</span><span class="si">{</span><span class="n">n_epochs</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">n_billing_tokens_in_dataset</span><span class="si">}</span><span class="s2"> tokens"</span><span class="p">)</span>',
          '',
          '<span class="n">tokens_for_train</span> <span class="o">=</span> <span class="n">n_epochs</span> <span class="o">*</span> <span class="n">n_billing_tokens_in_dataset</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Dataset has ~10456 tokens that will be charged for during training',
          'By default, you\'ll train for 3 epochs on this dataset',
          'By default, you\'ll be charged for ~31368 tokens',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como a la hora de escribir este post, el precio de entrenar <code>gpt-3.5-turbo</code> es de $0.0080 por cada 1000 tokens, podemos saber cu√°nto nos costar√° el entrenamiento</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">pricing</span> <span class="o">=</span> <span class="mf">0.0080</span>',
          '<span class="n">num_tokens_pricing</span> <span class="o">=</span> <span class="mi">1000</span>',
          '',
          '<span class="n">training_price</span> <span class="o">=</span> <span class="n">pricing</span> <span class="o">*</span> <span class="p">(</span><span class="n">tokens_for_train</span> <span class="o">//</span> <span class="n">num_tokens_pricing</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Training price: $</span><span class="si">{</span><span class="n">training_price</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Training price: $0.248',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Pricing and default n_epochs estimate</span>',
          '<span class="n">MAX_TOKENS_PER_EXAMPLE</span> <span class="o">=</span> <span class="mi">4096</span>',
          '',
          '<span class="n">TARGET_EPOCHS</span> <span class="o">=</span> <span class="mi">3</span>',
          '<span class="n">MIN_TARGET_EXAMPLES</span> <span class="o">=</span> <span class="mi">100</span>',
          '<span class="n">MAX_TARGET_EXAMPLES</span> <span class="o">=</span> <span class="mi">25000</span>',
          '<span class="n">MIN_DEFAULT_EPOCHS</span> <span class="o">=</span> <span class="mi">1</span>',
          '<span class="n">MAX_DEFAULT_EPOCHS</span> <span class="o">=</span> <span class="mi">25</span>',
          '',
          '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_validation</span><span class="p">,</span> <span class="s1">\'r\'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">\'utf-8\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
          '    <span class="n">dataset</span> <span class="o">=</span> <span class="p">[</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>',
          '',
          '<span class="n">convo_lens</span> <span class="o">=</span> <span class="p">[]</span>',
          '<span class="k">for</span> <span class="n">ex</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>',
          '    <span class="n">messages</span> <span class="o">=</span> <span class="n">ex</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]</span>',
          '    <span class="n">convo_lens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">))</span>',
          '',
          '<span class="n">n_epochs</span> <span class="o">=</span> <span class="n">TARGET_EPOCHS</span>',
          '<span class="n">n_train_examples</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span>',
          '<span class="k">if</span> <span class="n">n_train_examples</span> <span class="o">*</span> <span class="n">TARGET_EPOCHS</span> <span class="o">&lt;</span> <span class="n">MIN_TARGET_EXAMPLES</span><span class="p">:</span>',
          '    <span class="n">n_epochs</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">MAX_DEFAULT_EPOCHS</span><span class="p">,</span> <span class="n">MIN_TARGET_EXAMPLES</span> <span class="o">//</span> <span class="n">n_train_examples</span><span class="p">)</span>',
          '<span class="k">elif</span> <span class="n">n_train_examples</span> <span class="o">*</span> <span class="n">TARGET_EPOCHS</span> <span class="o">&gt;</span> <span class="n">MAX_TARGET_EXAMPLES</span><span class="p">:</span>',
          '    <span class="n">n_epochs</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">MIN_DEFAULT_EPOCHS</span><span class="p">,</span> <span class="n">MAX_TARGET_EXAMPLES</span> <span class="o">//</span> <span class="n">n_train_examples</span><span class="p">)</span>',
          '',
          '<span class="n">n_billing_tokens_in_dataset</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">MAX_TOKENS_PER_EXAMPLE</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span> <span class="k">for</span> <span class="n">length</span> <span class="ow">in</span> <span class="n">convo_lens</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Dataset has ~</span><span class="si">{</span><span class="n">n_billing_tokens_in_dataset</span><span class="si">}</span><span class="s2"> tokens that will be charged for during training"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"By default, you\'ll train for </span><span class="si">{</span><span class="n">n_epochs</span><span class="si">}</span><span class="s2"> epochs on this dataset"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"By default, you\'ll be charged for ~</span><span class="si">{</span><span class="n">n_epochs</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">n_billing_tokens_in_dataset</span><span class="si">}</span><span class="s2"> tokens"</span><span class="p">)</span>',
          '',
          '<span class="n">tokens_for_validation</span> <span class="o">=</span> <span class="n">n_epochs</span> <span class="o">*</span> <span class="n">n_billing_tokens_in_dataset</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Dataset has ~1349 tokens that will be charged for during training',
          'By default, you\'ll train for 6 epochs on this dataset',
          'By default, you\'ll be charged for ~8094 tokens',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">validation_price</span> <span class="o">=</span> <span class="n">pricing</span> <span class="o">*</span> <span class="p">(</span><span class="n">tokens_for_validation</span> <span class="o">//</span> <span class="n">num_tokens_pricing</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Validation price: $</span><span class="si">{</span><span class="n">validation_price</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Validation price: $0.064',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">total_price</span> <span class="o">=</span> <span class="n">training_price</span> <span class="o">+</span> <span class="n">validation_price</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Total price: $</span><span class="si">{</span><span class="n">total_price</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Total price: $0.312',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si nuestros c√°lculos est√°n bien, vemos que el reentrenamiento de <code>gpt-3.5-turbo</code> nos costar√° $0.312</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Entrenamiento">Entrenamiento<a class="anchor-link" href="#Entrenamiento"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 19" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Una vez tenemos todo listo tenemos que subir los <code>jsonl</code>s a la API de OpenAI para que reentrene el modelo. Para ello, ejecutamos el siguiente c√≥digo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="nb">open</span><span class="p">(</span><span class="n">jsonl_train</span><span class="p">,</span> <span class="s2">"rb"</span><span class="p">),</span> <span class="n">purpose</span><span class="o">=</span><span class="s2">"fine-tune"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="nb">open</span><span class="p">(</span><span class="n">jsonl_train</span><span class="p">,</span> <span class="s2">"rb"</span><span class="p">),</span> <span class="n">purpose</span><span class="o">=</span><span class="s2">"fine-tune"</span><span class="p">)</span>',
          '</span><span class="nb">type</span><span class="p">(</span><span class="n">result</span><span class="p">),</span> <span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(openai.types.file_object.FileObject,',
          ' FileObject(id=\'file-LWztOVasq4E0U67wRe8ShjLZ\', bytes=47947, created_at=1701585709, filename=\'train.jsonl\', object=\'file\', purpose=\'fine-tune\', status=\'processed\', status_details=None))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.id = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.bytes = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">bytes</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.created_at = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">created_at</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.filename = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">filename</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.object = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">object</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.purpose = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">purpose</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.status = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">status</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.status_details = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">status_details</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'result.id = file-LWztOVasq4E0U67wRe8ShjLZ',
          'result.bytes = 47947',
          'result.created_at = 1701585709',
          'result.filename = train.jsonl',
          'result.object = file',
          'result.purpose = fine-tune',
          'result.status = processed',
          'result.status_details = None',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">jsonl_train_id</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">id</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"jsonl_train_id = </span><span class="si">{</span><span class="n">jsonl_train_id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'jsonl_train_id = file-LWztOVasq4E0U67wRe8ShjLZ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Hacemos lo mismo con el set de validaci√≥n</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="nb">open</span><span class="p">(</span><span class="n">jsonl_validation</span><span class="p">,</span> <span class="s2">"rb"</span><span class="p">),</span> <span class="n">purpose</span><span class="o">=</span><span class="s2">"fine-tune"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="nb">open</span><span class="p">(</span><span class="n">jsonl_validation</span><span class="p">,</span> <span class="s2">"rb"</span><span class="p">),</span> <span class="n">purpose</span><span class="o">=</span><span class="s2">"fine-tune"</span><span class="p">)</span>',
          '</span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.id = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.bytes = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">bytes</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.created_at = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">created_at</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.filename = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">filename</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.object = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">object</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.purpose = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">purpose</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.status = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">status</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.status_details = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">status_details</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'result.id = file-E0YOgIIe9mwxmFcza5bFyVKW',
          'result.bytes = 6369',
          'result.created_at = 1701585730',
          'result.filename = validation.jsonl',
          'result.object = file',
          'result.purpose = fine-tune',
          'result.status = processed',
          'result.status_details = None',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">jsonl_validation_id</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">id</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"jsonl_train_id = </span><span class="si">{</span><span class="n">jsonl_validation_id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'jsonl_train_id = file-E0YOgIIe9mwxmFcza5bFyVKW',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Una los tenemos subidos pasamos a entrenar a nuestro propio modelo de OpenAi, para ello usamos el siguiente c√≥digo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">fine_tuning</span><span class="o">.</span><span class="n">jobs</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">model</span> <span class="o">=</span> <span class="s2">"gpt-3.5-turbo"</span><span class="p">,</span> <span class="n">training_file</span> <span class="o">=</span> <span class="n">jsonl_train_id</span><span class="p">,</span> <span class="n">validation_file</span> <span class="o">=</span> <span class="n">jsonl_validation_id</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">fine_tuning</span><span class="o">.</span><span class="n">jobs</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">model</span> <span class="o">=</span> <span class="s2">"gpt-3.5-turbo"</span><span class="p">,</span> <span class="n">training_file</span> <span class="o">=</span> <span class="n">jsonl_train_id</span><span class="p">,</span> <span class="n">validation_file</span> <span class="o">=</span> <span class="n">jsonl_validation_id</span><span class="p">)</span>',
          '</span><span class="nb">type</span><span class="p">(</span><span class="n">result</span><span class="p">),</span> <span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(openai.types.fine_tuning.fine_tuning_job.FineTuningJob,',
          ' FineTuningJob(id=\'ftjob-aBndcorOfQLP0UijlY0R4pTB\', created_at=1701585758, error=None, fine_tuned_model=None, finished_at=None, hyperparameters=Hyperparameters(n_epochs=\'auto\', batch_size=\'auto\', learning_rate_multiplier=\'auto\'), model=\'gpt-3.5-turbo-0613\', object=\'fine_tuning.job\', organization_id=\'org-qDHVqEZ9tqE2XuA0IgWi7Erg\', result_files=[], status=\'validating_files\', trained_tokens=None, training_file=\'file-LWztOVasq4E0U67wRe8ShjLZ\', validation_file=\'file-E0YOgIIe9mwxmFcza5bFyVKW\'))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.id = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.created_at = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">created_at</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.error = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">error</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.fine_tuned_model = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">fine_tuned_model</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.finished_at = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">finished_at</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.hyperparameters = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">n_epochs = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">n_epochs</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">batch_size = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">batch_size</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">learning_rate_multiplier = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">learning_rate_multiplier</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.model = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">model</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.object = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">object</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.organization_id = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">organization_id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.result_files = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">result_files</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.status = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">status</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.trained_tokens = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">trained_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.training_file = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">training_file</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.validation_file = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">validation_file</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'result.id = ftjob-aBndcorOfQLP0UijlY0R4pTB',
          'result.created_at = 1701585758',
          'result.error = None',
          'result.fine_tuned_model = None',
          'result.finished_at = None',
          'result.hyperparameters = Hyperparameters(n_epochs=\'auto\', batch_size=\'auto\', learning_rate_multiplier=\'auto\')',
          '	n_epochs = auto',
          '	batch_size = auto',
          '	learning_rate_multiplier = auto',
          'result.model = gpt-3.5-turbo-0613',
          'result.object = fine_tuning.job',
          'result.organization_id = org-qDHVqEZ9tqE2XuA0IgWi7Erg',
          'result.result_files = []',
          'result.status = validating_files',
          'result.trained_tokens = None',
          'result.training_file = file-LWztOVasq4E0U67wRe8ShjLZ',
          'result.validation_file = file-E0YOgIIe9mwxmFcza5bFyVKW',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">fine_tune_id</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">id</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"fine_tune_id = </span><span class="si">{</span><span class="n">fine_tune_id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'fine_tune_id = ftjob-aBndcorOfQLP0UijlY0R4pTB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que en <code>status</code> sal√≠a <code>validating_files</code>. Como el fine tuning tarda bastante, podemos ir preguntando por el proceso mediante el siguiente c√≥digo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">fine_tuning</span><span class="o">.</span><span class="n">jobs</span><span class="o">.</span><span class="n">retrieve</span><span class="p">(</span><span class="n">fine_tuning_job_id</span> <span class="o">=</span> <span class="n">fine_tune_id</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">fine_tuning</span><span class="o">.</span><span class="n">jobs</span><span class="o">.</span><span class="n">retrieve</span><span class="p">(</span><span class="n">fine_tuning_job_id</span> <span class="o">=</span> <span class="n">fine_tune_id</span><span class="p">)</span>',
          '</span><span class="nb">type</span><span class="p">(</span><span class="n">result</span><span class="p">),</span> <span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(openai.types.fine_tuning.fine_tuning_job.FineTuningJob,',
          ' FineTuningJob(id=\'ftjob-aBndcorOfQLP0UijlY0R4pTB\', created_at=1701585758, error=None, fine_tuned_model=None, finished_at=None, hyperparameters=Hyperparameters(n_epochs=3, batch_size=1, learning_rate_multiplier=2), model=\'gpt-3.5-turbo-0613\', object=\'fine_tuning.job\', organization_id=\'org-qDHVqEZ9tqE2XuA0IgWi7Erg\', result_files=[], status=\'running\', trained_tokens=None, training_file=\'file-LWztOVasq4E0U67wRe8ShjLZ\', validation_file=\'file-E0YOgIIe9mwxmFcza5bFyVKW\'))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.id = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.created_at = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">created_at</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.error = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">error</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.fine_tuned_model = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">fine_tuned_model</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.finished_at = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">finished_at</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.hyperparameters = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">n_epochs = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">n_epochs</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">batch_size = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">batch_size</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">learning_rate_multiplier = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">learning_rate_multiplier</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.model = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">model</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.object = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">object</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.organization_id = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">organization_id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.result_files = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">result_files</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.status = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">status</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.trained_tokens = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">trained_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.training_file = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">training_file</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.validation_file = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">validation_file</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'result.id = ftjob-aBndcorOfQLP0UijlY0R4pTB',
          'result.created_at = 1701585758',
          'result.error = None',
          'result.fine_tuned_model = None',
          'result.finished_at = None',
          'result.hyperparameters = Hyperparameters(n_epochs=3, batch_size=1, learning_rate_multiplier=2)',
          '	n_epochs = 3',
          '	batch_size = 1',
          '	learning_rate_multiplier = 2',
          'result.model = gpt-3.5-turbo-0613',
          'result.object = fine_tuning.job',
          'result.organization_id = org-qDHVqEZ9tqE2XuA0IgWi7Erg',
          'result.result_files = []',
          'result.status = running',
          'result.trained_tokens = None',
          'result.training_file = file-LWztOVasq4E0U67wRe8ShjLZ',
          'result.validation_file = file-E0YOgIIe9mwxmFcza5bFyVKW',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Creamos un bucle que espere a que finalice el entrenamiento</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">time</span>',
          '',
          '<span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">fine_tuning</span><span class="o">.</span><span class="n">jobs</span><span class="o">.</span><span class="n">retrieve</span><span class="p">(</span><span class="n">fine_tuning_job_id</span> <span class="o">=</span> <span class="n">fine_tune_id</span><span class="p">)</span>',
          '<span class="n">status</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">status</span>',
          '',
          '<span class="k">while</span> <span class="n">status</span> <span class="o">!=</span> <span class="s2">"succeeded"</span><span class="p">:</span>',
          '    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>',
          '    <span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">fine_tuning</span><span class="o">.</span><span class="n">jobs</span><span class="o">.</span><span class="n">retrieve</span><span class="p">(</span><span class="n">fine_tuning_job_id</span> <span class="o">=</span> <span class="n">fine_tune_id</span><span class="p">)</span>',
          '    <span class="n">status</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">status</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Job succeeded!"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Job succeeded',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como ha terminado el entrenamiento, volvemos a pedirle informaci√≥n sobre el proceso</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">fine_tuning</span><span class="o">.</span><span class="n">jobs</span><span class="o">.</span><span class="n">retrieve</span><span class="p">(</span><span class="n">fine_tuning_job_id</span> <span class="o">=</span> <span class="n">fine_tune_id</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">fine_tuning</span><span class="o">.</span><span class="n">jobs</span><span class="o">.</span><span class="n">retrieve</span><span class="p">(</span><span class="n">fine_tuning_job_id</span> <span class="o">=</span> <span class="n">fine_tune_id</span><span class="p">)</span>',
          '</span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.id = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.created_at = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">created_at</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.error = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">error</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.fine_tuned_model = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">fine_tuned_model</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.finished_at = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">finished_at</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.hyperparameters = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">n_epochs = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">n_epochs</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">batch_size = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">batch_size</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">learning_rate_multiplier = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">learning_rate_multiplier</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.model = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">model</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.object = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">object</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.organization_id = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">organization_id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.result_files = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">result_files</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.status = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">status</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.trained_tokens = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">trained_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.training_file = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">training_file</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result.validation_file = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">validation_file</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'result.id = ftjob-aBndcorOfQLP0UijlY0R4pTB',
          'result.created_at = 1701585758',
          'result.error = None',
          'result.fine_tuned_model = ft:gpt-3.5-turbo-0613:personal::8RagA0RT',
          'result.finished_at = 1701586541',
          'result.hyperparameters = Hyperparameters(n_epochs=3, batch_size=1, learning_rate_multiplier=2)',
          '	n_epochs = 3',
          '	batch_size = 1',
          '	learning_rate_multiplier = 2',
          'result.model = gpt-3.5-turbo-0613',
          'result.object = fine_tuning.job',
          'result.organization_id = org-qDHVqEZ9tqE2XuA0IgWi7Erg',
          'result.result_files = [\'file-dNeo5ojOSuin7JIkNkQouHLB\']',
          'result.status = succeeded',
          'result.trained_tokens = 30672',
          'result.training_file = file-LWztOVasq4E0U67wRe8ShjLZ',
          'result.validation_file = file-E0YOgIIe9mwxmFcza5bFyVKW',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Veamos algunos datos interesantes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">fine_tuned_model</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">fine_tuned_model</span>',
          '<span class="n">finished_at</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">finished_at</span>',
          '<span class="n">result_files</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">result_files</span>',
          '<span class="n">status</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">status</span>',
          '<span class="n">trained_tokens</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">trained_tokens</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"fine_tuned_model = </span><span class="si">{</span><span class="n">fine_tuned_model</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"finished_at = </span><span class="si">{</span><span class="n">finished_at</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"result_files = </span><span class="si">{</span><span class="n">result_files</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"status = </span><span class="si">{</span><span class="n">status</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"trained_tokens = </span><span class="si">{</span><span class="n">trained_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'fine_tuned_model = ft:gpt-3.5-turbo-0613:personal::8RagA0RT',
          'finished_at = 1701586541',
          'result_files = [\'file-dNeo5ojOSuin7JIkNkQouHLB\']',
          'status = succeeded',
          'trained_tokens = 30672',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que le ha dado el nombre <code>ft:gpt-3.5-turbo-0613:personal::8RagA0RT</code> a nuestro modelos, su status ahora es <code>succeeded</code> y que ha usado 30672 tokens, mientras que nosotros hab√≠amos predicho</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tokens_for_train</span><span class="p">,</span> <span class="n">tokens_for_validation</span><span class="p">,</span> <span class="n">tokens_for_train</span> <span class="o">+</span> <span class="n">tokens_for_validation</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(31368, 8094, 39462)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Es decir, ha usado menos tokens, por lo que el entrenamiento nos ha costado menos de lo que hab√≠amos predicho, en concreto</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">real_training_price</span> <span class="o">=</span> <span class="n">pricing</span> <span class="o">*</span> <span class="p">(</span><span class="n">trained_tokens</span> <span class="o">//</span> <span class="n">num_tokens_pricing</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Real training price: $</span><span class="si">{</span><span class="n">real_training_price</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Real training price: $0.24',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Adem√°s de esta informaci√≥n si nos vamos a la p√°gina <a href="https://platform.openai.com/finetune" target="_blank" rel="nofollow noreferrer">finetune</a> de OpenAI, podemos ver que nuestro modelo est√° ah√≠</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="open ai finetune" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/openai_fine_tuning_process.webp"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver tambi√©n cu√°nto nos ha costado el entrenamiento</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="open ai finetune cost" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/openai_fine_tuning_cost.webp"/></p>
      <p>Que como podemos ver han sido solo $0.25</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Y por √∫ltimo vamos a ver cu√°nto tiempo ha llevado hacer este entrenamiento. Podemos ver a qu√© hora empez√≥</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="open ai finetune start" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/openai_fine_tuning_process_start_time.webp"/></p>
      <p>Y a qu√© hora termin√≥</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="open ai finetune end" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/openai_fine_tuning_process_stop_time.webp"/></p>
      <p>Por lo que m√°s o menos ha llevado unos 10 minutos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Prueba-del-modelo">Prueba del modelo<a class="anchor-link" href="#Prueba-del-modelo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 20" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Dentro del <a href="https://platform.openai.com/playground?mode=chat" target="_blank" rel="nofollow noreferrer">playground</a> de OpenAI podemos probar nuestro modelo, pero vamos a hacerlo mediante la API como hemos aprendido aqu√≠</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"¬øC√≥mo se define una funci√≥n en Python?"</span>',
      '      ',
      '      <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '        <span class="n">model</span> <span class="o">=</span> <span class="n">fine_tuned_model</span><span class="p">,</span>',
      '        <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">}],</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>











      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"¬øC√≥mo se define una funci√≥n en Python?"</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span> <span class="o">=</span> <span class="n">fine_tuned_model</span><span class="p">,</span>',
          '  <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">}],</span>',
          '<span class="p">)</span>',
          '</span><span class="nb">type</span><span class="p">(</span><span class="n">response</span><span class="p">),</span> <span class="n">response</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(openai.types.chat.chat_completion.ChatCompletion,',
          ' ChatCompletion(id=\'chatcmpl-8RvkVG8a5xjI2UZdXgdOGGcoelefc\', choices=[Choice(finish_reason=\'stop\', index=0, message=ChatCompletionMessage(content=\'Una funci√≥n en Python se define utilizando la palabra clave `def`, seguida del nombre de la funci√≥n, par√©ntesis y dos puntos. El cuerpo de la funci√≥n se indenta debajo. [M√°s informaci√≥n](https://www.maximofn.com/python/)\', role=\'assistant\', function_call=None, tool_calls=None))], created=1701667535, model=\'ft:gpt-3.5-turbo-0613:personal::8RagA0RT\', object=\'chat.completion\', system_fingerprint=None, usage=CompletionUsage(completion_tokens=54, prompt_tokens=16, total_tokens=70)))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.id = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.choices = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">)):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">] = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].finish_reason = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">finish_reason</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].index = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">index</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\n\t\t</span><span class="s1">\'</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message.content = </span><span class="se">\n\t\t</span><span class="si">{</span><span class="n">content</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message.role = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">role</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message.function_call = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">function_call</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message.tool_calls = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">tool_calls</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.created = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">created</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.model = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">model</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.object = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">object</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.system_fingerprint = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">system_fingerprint</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.usage = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">usage</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.usage.completion_tokens = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">usage</span><span class="o">.</span><span class="n">completion_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.usage.prompt_tokens = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">usage</span><span class="o">.</span><span class="n">prompt_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.usage.total_tokens = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">usage</span><span class="o">.</span><span class="n">total_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'response.id = chatcmpl-8RvkVG8a5xjI2UZdXgdOGGcoelefc',
          'response.choices = [Choice(finish_reason=\'stop\', index=0, message=ChatCompletionMessage(content=\'Una funci√≥n en Python se define utilizando la palabra clave `def`, seguida del nombre de la funci√≥n, par√©ntesis y dos puntos. El cuerpo de la funci√≥n se indenta debajo. [M√°s informaci√≥n](https://www.maximofn.com/python/)\', role=\'assistant\', function_call=None, tool_calls=None))]',
          'response.choices[0] = Choice(finish_reason=\'stop\', index=0, message=ChatCompletionMessage(content=\'Una funci√≥n en Python se define utilizando la palabra clave `def`, seguida del nombre de la funci√≥n, par√©ntesis y dos puntos. El cuerpo de la funci√≥n se indenta debajo. [M√°s informaci√≥n](https://www.maximofn.com/python/)\', role=\'assistant\', function_call=None, tool_calls=None))',
          '	response.choices[0].finish_reason = stop',
          '	response.choices[0].index = 0',
          '	response.choices[0].message = ChatCompletionMessage(content=\'Una funci√≥n en Python se define utilizando la palabra clave `def`, seguida del nombre de la funci√≥n, par√©ntesis y dos puntos. El cuerpo de la funci√≥n se indenta debajo. [M√°s informaci√≥n](https://www.maximofn.com/python/)\', role=\'assistant\', function_call=None, tool_calls=None)',
          '		response.choices[0].message.content = ',
          '		Una funci√≥n en Python se define utilizando la palabra clave `def`, seguida del nombre de la funci√≥n, par√©ntesis y dos puntos. El cuerpo de la funci√≥n se indenta debajo. [M√°s informaci√≥n](https://www.maximofn.com/python/)',
          '		response.choices[0].message.role = assistant',
          '		response.choices[0].message.function_call = None',
          '		response.choices[0].message.tool_calls = None',
          'response.created = 1701667535',
          'response.model = ft:gpt-3.5-turbo-0613:personal::8RagA0RT',
          'response.object = chat.completion',
          'response.system_fingerprint = None',
          'response.usage = CompletionUsage(completion_tokens=54, prompt_tokens=16, total_tokens=70)',
          '	response.usage.completion_tokens = 54',
          '	response.usage.prompt_tokens = 16',
          '	response.usage.total_tokens = 70',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Una funci√≥n en Python se define utilizando la palabra clave `def`, seguida del nombre de la funci√≥n, par√©ntesis y dos puntos. El cuerpo de la funci√≥n se indenta debajo. [M√°s informaci√≥n](https://www.maximofn.com/python/)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Tenemos un modelo que no solo nos resuelve la respuesta, sino que adem√°s nos da un enlace a la documentaci√≥n de nuestro blog</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver c√≥mo se comporta con un ejemplo que cl√°ramente no tiene nada que ver con el blog</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">"¬øC√≥mo puedo cocinar pollo frito?"</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span> <span class="o">=</span> <span class="n">fine_tuned_model</span><span class="p">,</span>',
          '  <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">"</span><span class="p">}],</span>',
          '<span class="p">)</span>',
          '',
          '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">)):</span>',
          '    <span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'</span><span class="se">\n\n</span><span class="s1">\'</span><span class="p">,</span> <span class="s1">\'</span><span class="se">\\n</span><span class="s1">\'</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">content</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Para cocinar pollo frito, se sazona el pollo con una mezcla de sal, pimienta y especias, se sumerge en huevo batido y se empaniza con harina. Luego, se fr√≠e en aceite caliente hasta que est√© dorado y cocido por dentro. [M√°s informaci√≥n](https://www.maximofn.com/pollo-frito/)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver nos da el enlace <code>https://www.maximofn.com/pollo-frito/</code> el cu√°l no existe. Por lo que aunque hemos reentrenado un modelo de chatGPT, hay que tener cuidado con lo que nos responde y no fiarse al 100% de √©l</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Generar-im%C3%A1genes-con-DALL-E-3">Generar im√°genes con DALL-E 3<a class="anchor-link" href="#Generar-im%C3%A1genes-con-DALL-E-3"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 21" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para generar im√°genes con DALL-E 3, tenemos que usar el siguiente c√≥digo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">images</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span>',
      '        <span class="n">model</span><span class="o">=</span><span class="s2">"dall-e-3"</span><span class="p">,</span>',
      '        <span class="n">prompt</span><span class="o">=</span><span class="s2">"a white siamese cat"</span><span class="p">,</span>',
      '        <span class="n">size</span><span class="o">=</span><span class="s2">"1024x1024"</span><span class="p">,</span>',
      '        <span class="n">quality</span><span class="o">=</span><span class="s2">"standard"</span><span class="p">,</span>',
      '        <span class="n">n</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>












      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">images</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span>',
          '  <span class="n">model</span><span class="o">=</span><span class="s2">"dall-e-3"</span><span class="p">,</span>',
          '  <span class="n">prompt</span><span class="o">=</span><span class="s2">"a white siamese cat"</span><span class="p">,</span>',
          '  <span class="n">size</span><span class="o">=</span><span class="s2">"1024x1024"</span><span class="p">,</span>',
          '  <span class="n">quality</span><span class="o">=</span><span class="s2">"standard"</span><span class="p">,</span>',
          '  <span class="n">n</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '</span><span class="nb">type</span><span class="p">(</span><span class="n">response</span><span class="p">),</span> <span class="n">response</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(openai.types.images_response.ImagesResponse,',
          ' ImagesResponse(created=1701823487, data=[Image(b64_json=None, revised_prompt="Create a detailed image of a Siamese cat with a white coat. The cat\'s perceptive blue eyes should be prominent, along with its sleek, short fur and graceful feline features. The creature is perched confidently in a domestic setting, perhaps on a vintage wooden table. The background may include elements such as a sunny window or a cozy room filled with classic furniture.", url=\'https://oaidalleapiprodscus.blob.core.windows.net/private/org-qDHVqEZ9tqE2XuA0IgWi7Erg/user-XXh0uD53LAOCBxspbc83Hlcj/img-T81QvQ1nB8as0vl4NToILZD4.png?st=2023-12-05T23%3A44%3A47Z&amp;se=2023-12-06T01%3A44%3A47Z&amp;sp=r&amp;sv=2021-08-06&amp;sr=b&amp;rscd=inline&amp;rsct=image/png&amp;skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&amp;sktid=a48cca56-e6da-484e-a814-9c849652bcb3&amp;skt=2023-12-05T19%3A58%3A58Z&amp;ske=2023-12-06T19%3A58%3A58Z&amp;sks=b&amp;skv=2021-08-06&amp;sig=nzDujTj3Y3THuRrq2kOvASA5xP73Mm8HHlQuKKkLYu8%3D\')]))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.created = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">created</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">)):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.data[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">] = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.data[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].b64_json = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">b64_json</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.data[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].revised_prompt = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">revised_prompt</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.data[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].url = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">url</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'response.created = 1701823487',
          'response.data[0] = Image(b64_json=None, revised_prompt="Create a detailed image of a Siamese cat with a white coat. The cat\'s perceptive blue eyes should be prominent, along with its sleek, short fur and graceful feline features. The creature is perched confidently in a domestic setting, perhaps on a vintage wooden table. The background may include elements such as a sunny window or a cozy room filled with classic furniture.", url=\'https://oaidalleapiprodscus.blob.core.windows.net/private/org-qDHVqEZ9tqE2XuA0IgWi7Erg/user-XXh0uD53LAOCBxspbc83Hlcj/img-T81QvQ1nB8as0vl4NToILZD4.png?st=2023-12-05T23%3A44%3A47Z&amp;se=2023-12-06T01%3A44%3A47Z&amp;sp=r&amp;sv=2021-08-06&amp;sr=b&amp;rscd=inline&amp;rsct=image/png&amp;skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&amp;sktid=a48cca56-e6da-484e-a814-9c849652bcb3&amp;skt=2023-12-05T19%3A58%3A58Z&amp;ske=2023-12-06T19%3A58%3A58Z&amp;sks=b&amp;skv=2021-08-06&amp;sig=nzDujTj3Y3THuRrq2kOvASA5xP73Mm8HHlQuKKkLYu8%3D\')',
          '	response.data[0].b64_json = None',
          '	response.data[0].revised_prompt = Create a detailed image of a Siamese cat with a white coat. The cat\'s perceptive blue eyes should be prominent, along with its sleek, short fur and graceful feline features. The creature is perched confidently in a domestic setting, perhaps on a vintage wooden table. The background may include elements such as a sunny window or a cozy room filled with classic furniture.',
          '	response.data[0].url = https://oaidalleapiprodscus.blob.core.windows.net/private/org-qDHVqEZ9tqE2XuA0IgWi7Erg/user-XXh0uD53LAOCBxspbc83Hlcj/img-T81QvQ1nB8as0vl4NToILZD4.png?st=2023-12-05T23%3A44%3A47Z&amp;se=2023-12-06T01%3A44%3A47Z&amp;sp=r&amp;sv=2021-08-06&amp;sr=b&amp;rscd=inline&amp;rsct=image/png&amp;skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&amp;sktid=a48cca56-e6da-484e-a814-9c849652bcb3&amp;skt=2023-12-05T19%3A58%3A58Z&amp;ske=2023-12-06T19%3A58%3A58Z&amp;sks=b&amp;skv=2021-08-06&amp;sig=nzDujTj3Y3THuRrq2kOvASA5xP73Mm8HHlQuKKkLYu8%3D',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver un dato muy interesante que no podemos ver cuando usamos DALL-E 3 a trav√©s de la interfaz de OpenAI, y es el prompt que se le ha pasado al modelo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">revised_prompt</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '"Create a detailed image of a Siamese cat with a white coat. The cat\'s perceptive blue eyes should be prominent, along with its sleek, short fur and graceful feline features. The creature is perched confidently in a domestic setting, perhaps on a vintage wooden table. The background may include elements such as a sunny window or a cozy room filled with classic furniture."',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Con ese prompt nos ha generado la siguiente imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">requests</span>',
      '      ',
      '      <span class="n">url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">url</span>',
      '      <span class="c1"># img_data = requests.get(url).content</span>',
      '      <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">\'openai/dall-e-3.png\'</span><span class="p">,</span> <span class="s1">\'wb\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">handler</span><span class="p">:</span>',
      '          <span class="n">handler</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>











      
      <section class="section-block-markdown-cell">
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="dall-e 3" src="openai/dall-e-3.png"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como tenemos el prompt que OpenAI ha utilizado en realidad vamos a intentar usarlo para generar un gato similar pero con los ojos verdes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">requests</span>',
          '',
          '<span class="n">url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">url</span>',
          '<span class="c1"># img_data = requests.get(url).content</span>',
          '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">\'openai/dall-e-3.png\'</span><span class="p">,</span> <span class="s1">\'wb\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">handler</span><span class="p">:</span>',
          '    <span class="n">handler</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
          '</span><span class="n">revised_prompt</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">revised_prompt</span>',
          '<span class="n">gree_eyes</span> <span class="o">=</span> <span class="n">revised_prompt</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">"blue"</span><span class="p">,</span> <span class="s2">"green"</span><span class="p">)</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">images</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span>',
          '  <span class="n">model</span><span class="o">=</span><span class="s2">"dall-e-3"</span><span class="p">,</span>',
          '  <span class="n">prompt</span><span class="o">=</span><span class="n">gree_eyes</span><span class="p">,</span>',
          '  <span class="n">size</span><span class="o">=</span><span class="s2">"1024x1024"</span><span class="p">,</span>',
          '  <span class="n">quality</span><span class="o">=</span><span class="s2">"standard"</span><span class="p">,</span>',
          '  <span class="n">n</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">revised_prompt</span><span class="p">)</span>',
          '',
          '<span class="n">image_url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">url</span>',
          '',
          '<span class="n">image_path</span> <span class="o">=</span> <span class="s1">\'openai/dall-e-3-green.png\'</span>',
          '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">image_path</span><span class="p">,</span> <span class="s1">\'wb\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">handler</span><span class="p">:</span>',
          '    <span class="n">handler</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">image_url</span><span class="p">)</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'A well-defined image of a Siamese cat boasting a shiny white coat. Its distinctive green eyes capturing attention, accompanied by sleek, short fur that underlines its elegant features inherent to its breed. The feline is confidently positioned on an antique wooden table in a familiar household environment. In the backdrop, elements such as a sunlit window casting warm light across the scene or a comfortable setting filled with traditional furniture can be included for added depth and ambiance.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="dall-e-3-green" src="openai/dall-e-3-green.png"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Aunque ha cambiado el color del gato y no solo de los ojos, la posici√≥n y el fondo son muy similares</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A parte del prompt, las otras variables que podemos modificar son</p>
      <ul>
      <li><code>model</code>: Permite elegir el modelo de generaci√≥n de im√°genes, los posibles valores son <code>dalle-2</code> y <code>dalle-3</code></li>
      <li><code>size</code>: Permite cambiar el tama√±o de la imagen, los posibles valores son <code>256x256</code>, <code>512x512</code>, <code>1024x1024</code>, <code>1792x1024</code>, <code>1024x1792</code> pixels</li>
      <li><code>quality</code>: Permite cambiar la calidad de la imagen, los posibles valores son <code>standard</code> o <code>hd</code></li>
      <li><code>response_format</code>: Permite cambiar el formato de la respuesta, los posibles valores son <code>url</code> o <code>b64_json</code></li>
      <li><code>n</code>: Permite cambiar el n√∫mero de im√°genes que queremos que nos devuelva el modelo. Con DALL-E 3 solo podemos pedir una imagen</li>
      <li><code>style</code>: Permite cambiar el estilo de la imagen, los posibles valores son <code>vivid</code> o <code>natural</code></li>
      </ul>
      <p>As√≠ que vamos a generar una imagen de alta calidad</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">images</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span>',
          '  <span class="n">model</span><span class="o">=</span><span class="s2">"dall-e-3"</span><span class="p">,</span>',
          '  <span class="n">prompt</span><span class="o">=</span><span class="n">gree_eyes</span><span class="p">,</span>',
          '  <span class="n">size</span><span class="o">=</span><span class="s2">"1024x1792"</span><span class="p">,</span>',
          '  <span class="n">quality</span><span class="o">=</span><span class="s2">"hd"</span><span class="p">,</span>',
          '  <span class="n">n</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>',
          '  <span class="n">style</span><span class="o">=</span><span class="s2">"natural"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">revised_prompt</span><span class="p">)</span>',
          '',
          '<span class="n">image_url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">url</span>',
          '',
          '<span class="n">image_path</span> <span class="o">=</span> <span class="s1">\'openai/dall-e-3-hd.png\'</span>',
          '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">image_path</span><span class="p">,</span> <span class="s1">\'wb\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">handler</span><span class="p">:</span>',
          '    <span class="n">handler</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">image_url</span><span class="p">)</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
          '<span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">image_path</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Render a portrait of a Siamese cat boasting a pristine white coat. This cat should have captivating green eyes that stand out. Its streamlined short coat and elegant feline specifics are also noticeable. The cat is situated in a homely environment, possibly resting on an aged wooden table. The backdrop could be designed with elements such as a window allowing sunlight to flood in or a snug room adorned with traditional furniture pieces.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="dall-e-3-hd" src="openai/dall-e-3-hd.png"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Visi%C3%B3n">Visi√≥n<a class="anchor-link" href="#Visi%C3%B3n"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 22" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a usar el modelo de visi√≥n con la siguiente imagen</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="panda" src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTU376h7oyFuEABd-By4gQhfjEBZsaSyKq539IqklI4MCEItVm_b7jtStTqBcP3qzaAVNI"/></p>
      <p>Que visto aqu√≠ en peque√±o se arecia un panda, pero si la vemos en grande es m√°s dificil ver el panda</p>
      <div style="text-align:center;">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" alt="panda" src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTU376h7oyFuEABd-By4gQhfjEBZsaSyKq539IqklI4MCEItVm_b7jtStTqBcP3qzaAVNI" style="width:637px;height:939px;"/>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para usar el modelo de visi√≥n, tenemos que usar el siguiente c√≥digo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">prompt</span> <span class="o">=</span> <span class="s2">"¬øVes alg√∫n animal en esta imagen?"</span>',
          '<span class="n">image_url</span> <span class="o">=</span> <span class="s2">"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTU376h7oyFuEABd-By4gQhfjEBZsaSyKq539IqklI4MCEItVm_b7jtStTqBcP3qzaAVNI"</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span><span class="o">=</span><span class="s2">"gpt-4-vision-preview"</span><span class="p">,</span>',
          '  <span class="n">messages</span><span class="o">=</span><span class="p">[</span>',
          '    <span class="p">{</span>',
          '      <span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span>',
          '      <span class="s2">"content"</span><span class="p">:</span> <span class="p">[</span>',
          '        <span class="p">{</span><span class="s2">"type"</span><span class="p">:</span> <span class="s2">"text"</span><span class="p">,</span> <span class="s2">"text"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">},</span>',
          '        <span class="p">{</span>',
          '          <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"image_url"</span><span class="p">,</span>',
          '          <span class="s2">"image_url"</span><span class="p">:</span> <span class="p">{</span>',
          '            <span class="s2">"url"</span><span class="p">:</span> <span class="n">image_url</span><span class="p">,</span>',
          '          <span class="p">},</span>',
          '        <span class="p">},</span>',
          '      <span class="p">],</span>',
          '    <span class="p">}</span>',
          '  <span class="p">],</span>',
          '  <span class="n">max_tokens</span><span class="o">=</span><span class="mi">300</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Lo siento, no puedo ayudar con la identificaci√≥n o comentarios sobre contenido oculto en im√°genes.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>No consigue encontrar el panda, pero no es el objetivo de este post que vea el panda, solamente explicar c√≥mo usar el modelo de visi√≥n de GPT4, as√≠ que no vamos a profundizar m√°s en este tema</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos pasarle varias im√°genes a la vez</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">image_url1</span> <span class="o">=</span> <span class="s2">"https://i0.wp.com/www.aulapt.org/wp-content/uploads/2018/10/ilusiones-%C3%B3pticas.jpg?fit=649%2C363&amp;ssl=1"</span>
      <span class="n">image_url2</span> <span class="o">=</span> <span class="s2">"https://i.pinimg.com/736x/69/ed/5a/69ed5ab09092880e38513a8870efee10.jpg"</span>
      <span class="n">prompt</span> <span class="o">=</span> <span class="s2">"¬øVes alg√∫n animal en estas im√°genes?"</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">image_url1</span><span class="p">))</span>
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">image_url2</span><span class="p">))</span>
      
      <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="s2">"gpt-4-vision-preview"</span><span class="p">,</span>
        <span class="n">messages</span><span class="o">=</span><span class="p">[</span>
          <span class="p">{opening_brace}</span>
            <span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span>
            <span class="s2">"content"</span><span class="p">:</span> <span class="p">[</span>
              <span class="p">{opening_brace}</span>
                <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"text"</span><span class="p">,</span>
                <span class="s2">"text"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">,</span>
              <span class="p">{closing_brace},</span>
              <span class="p">{opening_brace}</span>
                <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"image_url"</span><span class="p">,</span>
                <span class="s2">"image_url"</span><span class="p">:</span> <span class="p">{opening_brace}</span>
                  <span class="s2">"url"</span><span class="p">:</span> <span class="n">image_url1</span><span class="p">,</span>
                <span class="p">{closing_brace},</span>
              <span class="p">{closing_brace},</span>
              <span class="p">{opening_brace}</span>
                <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"image_url"</span><span class="p">,</span>
                <span class="s2">"image_url"</span><span class="p">:</span> <span class="p">{opening_brace}</span>
                  <span class="s2">"url"</span><span class="p">:</span> <span class="n">image_url2</span><span class="p">,</span>
                <span class="p">{closing_brace},</span>
              <span class="p">{closing_brace},</span>
            <span class="p">],</span>
          <span class="p">{closing_brace}</span>
        <span class="p">],</span>
        <span class="n">max_tokens</span><span class="o">=</span><span class="mi">300</span><span class="p">,</span>
      <span class="p">)</span>
      
      <span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-html-rendered-html-output-subarea"><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="No description has been provided for this image" src="https://i0.wp.com/www.aulapt.org/wp-content/uploads/2018/10/ilusiones-%C3%B3pticas.jpg?fit=649%2C363&amp;ssl=1"/></div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-html-rendered-html-output-subarea"><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="No description has been provided for this image" src="https://i.pinimg.com/736x/69/ed/5a/69ed5ab09092880e38513a8870efee10.jpg"/></div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>S√≠, en ambas im√°genes se ven figuras de animales. Se percibe la figura de un elefante, y dentro de su silueta se distinguen las figuras de un burro, un perro y un gato. Estas im√°genes emplean un estilo conocido como ilusi√≥n √≥ptica, en donde se crean m√∫ltiples im√°genes dentro de una m√°s grande, a menudo jugando con la percepci√≥n de la profundidad y los contornos.
      </pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Text-to-speech">Text to speech<a class="anchor-link" href="#Text-to-speech"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 23" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos generar audio a partir de texto con el siguiente c√≥digo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">image_url1</span> <span class="o">=</span> <span class="s2">"https://i0.wp.com/www.aulapt.org/wp-content/uploads/2018/10/ilusiones-%C3%B3pticas.jpg?fit=649%2C363&amp;ssl=1"</span>',
      '      <span class="n">image_url2</span> <span class="o">=</span> <span class="s2">"https://i.pinimg.com/736x/69/ed/5a/69ed5ab09092880e38513a8870efee10.jpg"</span>',
      '      <span class="n">prompt</span> <span class="o">=</span> <span class="s2">"¬øVes alg√∫n animal en estas im√°genes?"</span>',
      '      ',
      '      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">image_url1</span><span class="p">))</span>',
      '      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">image_url2</span><span class="p">))</span>',
      '      ',
      '      <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '        <span class="n">model</span><span class="o">=</span><span class="s2">"gpt-4-vision-preview"</span><span class="p">,</span>',
      '        <span class="n">messages</span><span class="o">=</span><span class="p">[</span>',
      '          <span class="p">{</span>',
      '            <span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span>',
      '            <span class="s2">"content"</span><span class="p">:</span> <span class="p">[</span>',
      '              <span class="p">{</span>',
      '                <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"text"</span><span class="p">,</span>',
      '                <span class="s2">"text"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">,</span>',
      '              <span class="p">},</span>',
      '              <span class="p">{</span>',
      '                <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"image_url"</span><span class="p">,</span>',
      '                <span class="s2">"image_url"</span><span class="p">:</span> <span class="p">{</span>',
      '                  <span class="s2">"url"</span><span class="p">:</span> <span class="n">image_url1</span><span class="p">,</span>',
      '                <span class="p">},</span>',
      '              <span class="p">},</span>',
      '              <span class="p">{</span>',
      '                <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"image_url"</span><span class="p">,</span>',
      '                <span class="s2">"image_url"</span><span class="p">:</span> <span class="p">{</span>',
      '                  <span class="s2">"url"</span><span class="p">:</span> <span class="n">image_url2</span><span class="p">,</span>',
      '                <span class="p">},</span>',
      '              <span class="p">},</span>',
      '            <span class="p">],</span>',
      '          <span class="p">}</span>',
      '        <span class="p">],</span>',
      '        <span class="n">max_tokens</span><span class="o">=</span><span class="mi">300</span><span class="p">,</span>',
      '      <span class="p">)</span>',
      '      ',
      '      <span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
      '<span></span><span class="n">speech_file_path</span> <span class="o">=</span> <span class="s2">"openai/speech.mp3"</span>',
      '      <span class="n">text</span> <span class="o">=</span> <span class="s2">"Hola desde el blog de MaximoFN"</span>',
      '      ',
      '      <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">audio</span><span class="o">.</span><span class="n">speech</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '        <span class="n">model</span><span class="o">=</span><span class="s2">"tts-1"</span><span class="p">,</span>',
      '        <span class="n">voice</span><span class="o">=</span><span class="s2">"alloy"</span><span class="p">,</span>',
      '        <span class="nb">input</span><span class="o">=</span><span class="n">text</span><span class="p">,</span>',
      '      <span class="p">)</span>',
      '      ',
      '      <span class="n">response</span><span class="o">.</span><span class="n">stream_to_file</span><span class="p">(</span><span class="n">speech_file_path</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>















      
      <section class="section-block-markdown-cell">
      <audio controls="">
      <source src="openai/speech.mp3" type="audio/mpeg"/>
          Tu navegador no soporta el elemento de audio.
      </audio>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos elegir</p>
      <ul>
      <li>model: Permite elegir el modelo de generaci√≥n de audio, los posibles valores son <code>tts-1</code> y <code>tts-1-hd</code></li>
      <li>voice: Permite elegir la voz que queremos que use el modelo, los posibles valores son <code>alloy</code>, <code>echo</code>, <code>fable</code>, <code>onyx</code>, <code>nova</code>, y <code>shimmer</code></li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Speech-to-text-(Whisper)">Speech to text (Whisper)<a class="anchor-link" href="#Speech-to-text-(Whisper)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 24" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos transcribir audio mediante Whisper con el siguiente c√≥digo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">image_url1</span> <span class="o">=</span> <span class="s2">"https://i0.wp.com/www.aulapt.org/wp-content/uploads/2018/10/ilusiones-%C3%B3pticas.jpg?fit=649%2C363&amp;ssl=1"</span>',
          '<span class="n">image_url2</span> <span class="o">=</span> <span class="s2">"https://i.pinimg.com/736x/69/ed/5a/69ed5ab09092880e38513a8870efee10.jpg"</span>',
          '<span class="n">prompt</span> <span class="o">=</span> <span class="s2">"¬øVes alg√∫n animal en estas im√°genes?"</span>',
          '',
          '<span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">image_url1</span><span class="p">))</span>',
          '<span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">image_url2</span><span class="p">))</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span><span class="o">=</span><span class="s2">"gpt-4-vision-preview"</span><span class="p">,</span>',
          '  <span class="n">messages</span><span class="o">=</span><span class="p">[</span>',
          '    <span class="p">{</span>',
          '      <span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span>',
          '      <span class="s2">"content"</span><span class="p">:</span> <span class="p">[</span>',
          '        <span class="p">{</span>',
          '          <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"text"</span><span class="p">,</span>',
          '          <span class="s2">"text"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">,</span>',
          '        <span class="p">},</span>',
          '        <span class="p">{</span>',
          '          <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"image_url"</span><span class="p">,</span>',
          '          <span class="s2">"image_url"</span><span class="p">:</span> <span class="p">{</span>',
          '            <span class="s2">"url"</span><span class="p">:</span> <span class="n">image_url1</span><span class="p">,</span>',
          '          <span class="p">},</span>',
          '        <span class="p">},</span>',
          '        <span class="p">{</span>',
          '          <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"image_url"</span><span class="p">,</span>',
          '          <span class="s2">"image_url"</span><span class="p">:</span> <span class="p">{</span>',
          '            <span class="s2">"url"</span><span class="p">:</span> <span class="n">image_url2</span><span class="p">,</span>',
          '          <span class="p">},</span>',
          '        <span class="p">},</span>',
          '      <span class="p">],</span>',
          '    <span class="p">}</span>',
          '  <span class="p">],</span>',
          '  <span class="n">max_tokens</span><span class="o">=</span><span class="mi">300</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
          '</span><span class="n">speech_file_path</span> <span class="o">=</span> <span class="s2">"openai/speech.mp3"</span>',
          '<span class="n">text</span> <span class="o">=</span> <span class="s2">"Hola desde el blog de MaximoFN"</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">audio</span><span class="o">.</span><span class="n">speech</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span><span class="o">=</span><span class="s2">"tts-1"</span><span class="p">,</span>',
          '  <span class="n">voice</span><span class="o">=</span><span class="s2">"alloy"</span><span class="p">,</span>',
          '  <span class="nb">input</span><span class="o">=</span><span class="n">text</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '',
          '<span class="n">response</span><span class="o">.</span><span class="n">stream_to_file</span><span class="p">(</span><span class="n">speech_file_path</span><span class="p">)</span>',
          '</span><span class="n">audio_file</span> <span class="o">=</span> <span class="s2">"MicroMachines.mp3"</span>',
          '<span class="n">audio_file</span><span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">audio_file</span><span class="p">,</span> <span class="s2">"rb"</span><span class="p">)</span>',
          '',
          '<span class="n">transcript</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">audio</span><span class="o">.</span><span class="n">transcriptions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">model</span><span class="o">=</span><span class="s2">"whisper-1"</span><span class="p">,</span> ',
          '  <span class="n">file</span><span class="o">=</span><span class="n">audio_file</span>',
          '<span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">transcript</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'This is the Micromachine Man presenting the most midget miniature motorcade of micromachines. Each one has dramatic details, terrific trim, precision paint jobs, plus incredible micromachine pocket play sets. There\'s a police station, fire station, restaurant, service station, and more. Perfect pocket portables to take anyplace. And there are many miniature play sets to play with, and each one comes with its own special edition micromachine vehicle and fun fantastic features that miraculously move. Raise the boat lift at the airport, marina, man the gun turret at the army base, clean your car at the car wash, raise the toll bridge. And these play sets fit together to form a micromachine world. Micromachine pocket play sets so tremendously tiny, so perfectly precise, so dazzlingly detailed, you\'ll want to pocket them all. Micromachines and micromachine pocket play sets sold separately from Galoob. The smaller they are, the better they are.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <audio controls="">
      <source src="MicroMachines.mp3" type="audio/mpeg"/>
          Tu navegador no soporta el elemento de audio.
      </audio>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Moderaci%C3%B3n-de-contenido">Moderaci√≥n de contenido<a class="anchor-link" href="#Moderaci%C3%B3n-de-contenido"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 25" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos obtener la categor√≠a de un texto entre las clases <code>sexual</code>, <code>hate</code>, <code>harassment</code>, <code>self-harm</code>, <code>sexual/minors</code>, <code>hate/threatening</code>, <code>violence/graphic</code>, <code>self-harm/intent</code>, <code>self-harm/instructions</code>, <code>harassment/threatening</code> y <code>violence</code>, para ello usamos el siguiente c√≥digo con el texto transcrito anteriormente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">text</span> <span class="o">=</span> <span class="n">transcript</span><span class="o">.</span><span class="n">text</span>',
      '      ',
      '      <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">moderations</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">input</span><span class="o">=</span><span class="n">text</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>








      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">text</span> <span class="o">=</span> <span class="n">transcript</span><span class="o">.</span><span class="n">text</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">moderations</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">input</span><span class="o">=</span><span class="n">text</span><span class="p">)</span>',
          '</span><span class="nb">type</span><span class="p">(</span><span class="n">response</span><span class="p">),</span> <span class="n">response</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(openai.types.moderation_create_response.ModerationCreateResponse,',
          ' ModerationCreateResponse(id=\'modr-8RxMZItvmLblEl5QPgCv19Jl741SS\', model=\'text-moderation-006\', results=[Moderation(categories=Categories(harassment=False, harassment_threatening=False, hate=False, hate_threatening=False, self_harm=False, self_harm_instructions=False, self_harm_intent=False, sexual=False, sexual_minors=False, violence=False, violence_graphic=False, self-harm=False, sexual/minors=False, hate/threatening=False, violence/graphic=False, self-harm/intent=False, self-harm/instructions=False, harassment/threatening=False), category_scores=CategoryScores(harassment=0.0003560568729881197, harassment_threatening=2.5426568299735663e-06, hate=1.966094168892596e-05, hate_threatening=6.384455986108151e-08, self_harm=7.903140613052528e-07, self_harm_instructions=6.443992219828942e-07, self_harm_intent=1.2202733046251524e-07, sexual=0.0003779272665269673, sexual_minors=1.8967952200910076e-05, violence=9.489082731306553e-05, violence_graphic=5.1929731853306293e-05, self-harm=7.903140613052528e-07, sexual/minors=1.8967952200910076e-05, hate/threatening=6.384455986108151e-08, violence/graphic=5.1929731853306293e-05, self-harm/intent=1.2202733046251524e-07, self-harm/instructions=6.443992219828942e-07, harassment/threatening=2.5426568299735663e-06), flagged=False)]))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.id = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.model = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">model</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">)):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">] = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.harassment = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">harassment</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.harassment_threatening = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">harassment_threatening</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.hate = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">hate</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.hate_threatening = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">hate_threatening</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.self_harm = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">self_harm</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.self_harm_instructions = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">self_harm_instructions</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.self_harm_intent = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">self_harm_intent</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.sexual = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">sexual</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.sexual_minors = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">sexual_minors</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.violence = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">violence</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.violence_graphic = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">violence_graphic</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.harassment = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">harassment</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.harassment_threatening = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">harassment_threatening</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.hate = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">hate</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.hate_threatening = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">hate_threatening</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.self_harm = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">self_harm</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.self_harm_instructions = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">self_harm_instructions</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.self_harm_intent = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">self_harm_intent</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.sexual = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">sexual</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.sexual_minors = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">sexual_minors</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.violence = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">violence</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.violence_graphic = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">violence_graphic</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].flagged = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">flagged</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'response.id = modr-8RxMZItvmLblEl5QPgCv19Jl741SS',
          'response.model = text-moderation-006',
          'response.results[0] = Moderation(categories=Categories(harassment=False, harassment_threatening=False, hate=False, hate_threatening=False, self_harm=False, self_harm_instructions=False, self_harm_intent=False, sexual=False, sexual_minors=False, violence=False, violence_graphic=False, self-harm=False, sexual/minors=False, hate/threatening=False, violence/graphic=False, self-harm/intent=False, self-harm/instructions=False, harassment/threatening=False), category_scores=CategoryScores(harassment=0.0003560568729881197, harassment_threatening=2.5426568299735663e-06, hate=1.966094168892596e-05, hate_threatening=6.384455986108151e-08, self_harm=7.903140613052528e-07, self_harm_instructions=6.443992219828942e-07, self_harm_intent=1.2202733046251524e-07, sexual=0.0003779272665269673, sexual_minors=1.8967952200910076e-05, violence=9.489082731306553e-05, violence_graphic=5.1929731853306293e-05, self-harm=7.903140613052528e-07, sexual/minors=1.8967952200910076e-05, hate/threatening=6.384455986108151e-08, violence/graphic=5.1929731853306293e-05, self-harm/intent=1.2202733046251524e-07, self-harm/instructions=6.443992219828942e-07, harassment/threatening=2.5426568299735663e-06), flagged=False)',
          '	response.results[0].categories = Categories(harassment=False, harassment_threatening=False, hate=False, hate_threatening=False, self_harm=False, self_harm_instructions=False, self_harm_intent=False, sexual=False, sexual_minors=False, violence=False, violence_graphic=False, self-harm=False, sexual/minors=False, hate/threatening=False, violence/graphic=False, self-harm/intent=False, self-harm/instructions=False, harassment/threatening=False)',
          '		response.results[0].categories.harassment = False',
          '		response.results[0].categories.harassment_threatening = False',
          '		response.results[0].categories.hate = False',
          '		response.results[0].categories.hate_threatening = False',
          '		response.results[0].categories.self_harm = False',
          '		response.results[0].categories.self_harm_instructions = False',
          '		response.results[0].categories.self_harm_intent = False',
          '		response.results[0].categories.sexual = False',
          '		response.results[0].categories.sexual_minors = False',
          '		response.results[0].categories.violence = False',
          '		response.results[0].categories.violence_graphic = False',
          '	response.results[0].category_scores = CategoryScores(harassment=0.0003560568729881197, harassment_threatening=2.5426568299735663e-06, hate=1.966094168892596e-05, hate_threatening=6.384455986108151e-08, self_harm=7.903140613052528e-07, self_harm_instructions=6.443992219828942e-07, self_harm_intent=1.2202733046251524e-07, sexual=0.0003779272665269673, sexual_minors=1.8967952200910076e-05, violence=9.489082731306553e-05, violence_graphic=5.1929731853306293e-05, self-harm=7.903140613052528e-07, sexual/minors=1.8967952200910076e-05, hate/threatening=6.384455986108151e-08, violence/graphic=5.1929731853306293e-05, self-harm/intent=1.2202733046251524e-07, self-harm/instructions=6.443992219828942e-07, harassment/threatening=2.5426568299735663e-06)',
          '		response.results[0].category_scores.harassment = 0.0003560568729881197',
          '		response.results[0].category_scores.harassment_threatening = 2.5426568299735663e-06',
          '		response.results[0].category_scores.hate = 1.966094168892596e-05',
          '		response.results[0].category_scores.hate_threatening = 6.384455986108151e-08',
          '		response.results[0].category_scores.self_harm = 7.903140613052528e-07',
          '		response.results[0].category_scores.self_harm_instructions = 6.443992219828942e-07',
          '		response.results[0].category_scores.self_harm_intent = 1.2202733046251524e-07',
          '		response.results[0].category_scores.sexual = 0.0003779272665269673',
          '		response.results[0].category_scores.sexual_minors = 1.8967952200910076e-05',
          '		response.results[0].category_scores.violence = 9.489082731306553e-05',
          '		response.results[0].category_scores.violence_graphic = 5.1929731853306293e-05',
          '	response.results[0].flagged = False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>El audio transcrito no est√° en ninguna de las categor√≠as anteriores, vamos a probar con otro texto</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">text</span> <span class="o">=</span> <span class="s2">"I want to kill myself"</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">moderations</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">input</span><span class="o">=</span><span class="n">text</span><span class="p">)</span>',
          '',
          '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">)):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.harassment = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">harassment</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.harassment_threatening = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">harassment_threatening</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.hate = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">hate</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.hate_threatening = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">hate_threatening</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.self_harm = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">self_harm</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.self_harm_instructions = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">self_harm_instructions</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.self_harm_intent = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">self_harm_intent</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.sexual = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">sexual</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.sexual_minors = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">sexual_minors</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.violence = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">violence</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.violence_graphic = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">violence_graphic</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">()</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.harassment = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">harassment</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.harassment_threatening = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">harassment_threatening</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.hate = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">hate</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.hate_threatening = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">hate_threatening</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.self_harm = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">self_harm</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.self_harm_instructions = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">self_harm_instructions</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.self_harm_intent = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">self_harm_intent</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.sexual = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">sexual</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.sexual_minors = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">sexual_minors</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.violence = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">violence</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.violence_graphic = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">violence_graphic</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">()</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].flagged = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">flagged</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'response.results[0].categories.harassment = False',
          'response.results[0].categories.harassment_threatening = False',
          'response.results[0].categories.hate = False',
          'response.results[0].categories.hate_threatening = False',
          'response.results[0].categories.self_harm = True',
          'response.results[0].categories.self_harm_instructions = False',
          'response.results[0].categories.self_harm_intent = True',
          'response.results[0].categories.sexual = False',
          'response.results[0].categories.sexual_minors = False',
          'response.results[0].categories.violence = True',
          'response.results[0].categories.violence_graphic = False',
          'response.results[0].category_scores.harassment = 0.004724912345409393',
          'response.results[0].category_scores.harassment_threatening = 0.00023778305330779403',
          'response.results[0].category_scores.hate = 1.1909247405128554e-05',
          'response.results[0].category_scores.hate_threatening = 1.826493189582834e-06',
          'response.results[0].category_scores.self_harm = 0.9998544454574585',
          'response.results[0].category_scores.self_harm_instructions = 3.5801923647937883e-09',
          'response.results[0].category_scores.self_harm_intent = 0.99969482421875',
          'response.results[0].category_scores.sexual = 2.141016238965676e-06',
          'response.results[0].category_scores.sexual_minors = 2.840671520232263e-08',
          'response.results[0].category_scores.violence = 0.8396497964859009',
          'response.results[0].category_scores.violence_graphic = 2.7347923605702817e-05',
          'response.results[0].flagged = True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora si detecta que el texto es <code>self_harm_intent</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Asistentes">Asistentes<a class="anchor-link" href="#Asistentes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 26" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>OpenAI nos da la posibilidad de crear asistentes, de manera que los podemos crear con las car√°cter√≠sticas que nosotros queramos, por ejemplo, un asistente experto en Python, y poderlo usar como si fuese un modelo particular de OpenAI. Es decir, podemos usarlo para una consulta y tener una conversaci√≥n con √©l, y al cabo del tiempo, volverlo a usar con una nueva consulta en una conversaci√≥n nueva.</p>
      <p>A la hora de trabajar con asistentes tendremos que crearlos, crear un hilo, mandarles el mensaje, ejecutarlos, esperar a que responda y ver la respuesta</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="asistentes" src="https://cdn.openai.com/API/docs/images/diagram-assistant.webp"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Crear-el-asistente">Crear el asistente<a class="anchor-link" href="#Crear-el-asistente"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 27" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primero creamos el asistente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">code_interpreter_assistant</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">assistants</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '          <span class="n">name</span><span class="o">=</span><span class="s2">"Python expert"</span><span class="p">,</span>',
      '          <span class="n">instructions</span><span class="o">=</span><span class="s2">"Eres un experto en Python. Analiza y ejecuta el c√≥digo para ayuda a los usuarios a resolver sus problemas."</span><span class="p">,</span>',
      '          <span class="n">tools</span><span class="o">=</span><span class="p">[{</span><span class="s2">"type"</span><span class="p">:</span> <span class="s2">"code_interpreter"</span><span class="p">}],</span>',
      '          <span class="n">model</span><span class="o">=</span><span class="s2">"gpt-3.5-turbo-1106"</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>











      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">code_interpreter_assistant</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">assistants</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '    <span class="n">name</span><span class="o">=</span><span class="s2">"Python expert"</span><span class="p">,</span>',
          '    <span class="n">instructions</span><span class="o">=</span><span class="s2">"Eres un experto en Python. Analiza y ejecuta el c√≥digo para ayuda a los usuarios a resolver sus problemas."</span><span class="p">,</span>',
          '    <span class="n">tools</span><span class="o">=</span><span class="p">[{</span><span class="s2">"type"</span><span class="p">:</span> <span class="s2">"code_interpreter"</span><span class="p">}],</span>',
          '    <span class="n">model</span><span class="o">=</span><span class="s2">"gpt-3.5-turbo-1106"</span>',
          '<span class="p">)</span>',
          '</span><span class="nb">type</span><span class="p">(</span><span class="n">code_interpreter_assistant</span><span class="p">),</span> <span class="n">code_interpreter_assistant</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(openai.types.beta.assistant.Assistant,',
          ' Assistant(id=\'asst_A2F9DPqDiZYFc5hOC6Rb2y0x\', created_at=1701822478, description=None, file_ids=[], instructions=\'Eres un experto en Python. Analiza y ejecuta el c√≥digo para ayuda a los usuarios a resolver sus problemas.\', metadata={}, model=\'gpt-3.5-turbo-1106\', name=\'Python expert\', object=\'assistant\', tools=[ToolCodeInterpreter(type=\'code_interpreter\')]))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">code_interpreter_assistant_id</span> <span class="o">=</span> <span class="n">code_interpreter_assistant</span><span class="o">.</span><span class="n">id</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"code_interpreter_assistant_id = </span><span class="si">{</span><span class="n">code_interpreter_assistant_id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'code_interpreter_assistant_id = asst_A2F9DPqDiZYFc5hOC6Rb2y0x',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A la hora de crear el asistente las variables que tenemos son</p>
      <ul>
      <li><code>name</code>: Nombre del asistente</li>
      <li><code>instructions</code>: Instrucciones para el asistente. Aqu√≠ le podemos explicar c√≥mo se tiene que comportar el asistente</li>
      <li><code>tools</code>: Herramientas que puede usar el asistente. De momento solo est√°n disponibles <code>code_interpreter</code> y <code>retrieval</code></li>
      <li><code>model</code>: Modelo que va a usar el asistente</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Este asistente ya est√° creado y lo podemos usar todas las veces que queramos. Para ello tenemos que crear un nuevo hilo, as√≠ si en el futuro lo quiere usar otra persona, porque resulte √∫til, con crear un nuevo hilo, lo podr√° usar como si estuviera usando el asistente original. Solo necesitar√≠a el ID del asistente</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Hilo-o-thread">Hilo o thread<a class="anchor-link" href="#Hilo-o-thread"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 28" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Un hilo representa una nueva conversaci√≥n con el asistente, as√≠ aunque haya pasado tiempo, mientras tengamos el ID del hilo, podemos continuar con la conversaci√≥n. Para crear un nuevo hilo, tenemos que usar el siguiente c√≥digo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">thread</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">create</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">thread</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">create</span><span class="p">()</span>',
          '</span><span class="nb">type</span><span class="p">(</span><span class="n">thread</span><span class="p">),</span> <span class="n">thread</span>',
          '<span class="n">thread_id</span> <span class="o">=</span> <span class="n">thread</span><span class="o">.</span><span class="n">id</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"thread_id = </span><span class="si">{</span><span class="n">thread_id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'thread_id = thread_nfFT3rFjyPWHdxWvMk6jJ90H',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Subimos-un-archivo">Subimos un archivo<a class="anchor-link" href="#Subimos-un-archivo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 29" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear un archivo .py que vamos a pedir al int√©rprete que nos explique</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">os</span>',
      '      ',
      '      <span class="n">python_code</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">"openai"</span><span class="p">,</span> <span class="s2">"python_code.py"</span><span class="p">)</span>',
      '      <span class="n">code</span> <span class="o">=</span> <span class="s2">"print(\'Hello world!\')"</span>',
      '      <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">python_code</span><span class="p">,</span> <span class="s2">"w"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '          <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>











      
      <section class="section-block-markdown-cell">
      <p>Lo subimos a la API de OpenAI mediante la funci√≥n <code>client.files.create</code>, esta funci√≥n ya la usamos cuando hicimos <code>fine-tuning</code> de un modelo de chatGPT y le sub√≠amos los <code>jsonl</code>s. Solo que antes en la variable <code>purpose</code> le pas√°bamos <code>fine-tuning</code> ya que los archivos que sub√≠amos eran para <code>fine-tuning</code>, y ahora le pasamos <code>assistants</code> ya que los archivos que vamos a subir son para un asistente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">os</span>',
      '      ',
      '      <span class="n">python_code</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">"openai"</span><span class="p">,</span> <span class="s2">"python_code.py"</span><span class="p">)</span>',
      '      <span class="n">code</span> <span class="o">=</span> <span class="s2">"print(\'Hello world!\')"</span>',
      '      <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">python_code</span><span class="p">,</span> <span class="s2">"w"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '          <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>',
      '<span></span><span class="n">file</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '        <span class="n">file</span><span class="o">=</span><span class="nb">open</span><span class="p">(</span><span class="n">python_code</span><span class="p">,</span> <span class="s2">"rb"</span><span class="p">),</span>',
      '        <span class="n">purpose</span><span class="o">=</span><span class="s1">\'assistants\'</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>









      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">os</span>',
          '',
          '<span class="n">python_code</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">"openai"</span><span class="p">,</span> <span class="s2">"python_code.py"</span><span class="p">)</span>',
          '<span class="n">code</span> <span class="o">=</span> <span class="s2">"print(\'Hello world!\')"</span>',
          '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">python_code</span><span class="p">,</span> <span class="s2">"w"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
          '    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>',
          '</span><span class="n">file</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">file</span><span class="o">=</span><span class="nb">open</span><span class="p">(</span><span class="n">python_code</span><span class="p">,</span> <span class="s2">"rb"</span><span class="p">),</span>',
          '  <span class="n">purpose</span><span class="o">=</span><span class="s1">\'assistants\'</span>',
          '<span class="p">)</span>',
          '</span><span class="nb">type</span><span class="p">(</span><span class="n">file</span><span class="p">),</span> <span class="n">file</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(openai.types.file_object.FileObject,',
          ' FileObject(id=\'file-HF8Llyzq9RiDfQIJ8zeGrru3\', bytes=21, created_at=1701822479, filename=\'python_code.py\', object=\'file\', purpose=\'assistants\', status=\'processed\', status_details=None))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Enviar-un-mensaje-al-asistente">Enviar un mensaje al asistente<a class="anchor-link" href="#Enviar-un-mensaje-al-asistente"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 30" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos el mensaje que le vamos a enviar al asistente, adem√°s le indicamos la ID del archivo sobre el que queremos preguntar</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">message</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '          <span class="n">thread_id</span><span class="o">=</span><span class="n">thread_id</span><span class="p">,</span>',
      '          <span class="n">role</span><span class="o">=</span><span class="s2">"user"</span><span class="p">,</span>',
      '          <span class="n">content</span><span class="o">=</span><span class="s2">"Ejecuta el script que te he pasado, expl√≠camelo y dime que da a la salida."</span><span class="p">,</span>',
      '          <span class="n">file_ids</span><span class="o">=</span><span class="p">[</span><span class="n">file</span><span class="o">.</span><span class="n">id</span><span class="p">]</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>











      
      <section class="section-block-markdown-cell">
      <h3 id="Ejecutar-el-asistente">Ejecutar el asistente<a class="anchor-link" href="#Ejecutar-el-asistente"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 31" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ejecutamos el asistente indic√°ndole que resuelva la duda del usuario</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">message</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '          <span class="n">thread_id</span><span class="o">=</span><span class="n">thread_id</span><span class="p">,</span>',
      '          <span class="n">role</span><span class="o">=</span><span class="s2">"user"</span><span class="p">,</span>',
      '          <span class="n">content</span><span class="o">=</span><span class="s2">"Ejecuta el script que te he pasado, expl√≠camelo y dime que da a la salida."</span><span class="p">,</span>',
      '          <span class="n">file_ids</span><span class="o">=</span><span class="p">[</span><span class="n">file</span><span class="o">.</span><span class="n">id</span><span class="p">]</span>',
      '      <span class="p">)</span>',
      '<span></span><span class="n">run</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">runs</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '        <span class="n">thread_id</span><span class="o">=</span><span class="n">thread_id</span><span class="p">,</span>',
      '        <span class="n">assistant_id</span><span class="o">=</span><span class="n">code_interpreter_assistant_id</span><span class="p">,</span>',
      '        <span class="n">instructions</span><span class="o">=</span><span class="s2">"Resuleve el problema que te ha planteado el usuario."</span><span class="p">,</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>










      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">message</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '    <span class="n">thread_id</span><span class="o">=</span><span class="n">thread_id</span><span class="p">,</span>',
          '    <span class="n">role</span><span class="o">=</span><span class="s2">"user"</span><span class="p">,</span>',
          '    <span class="n">content</span><span class="o">=</span><span class="s2">"Ejecuta el script que te he pasado, expl√≠camelo y dime que da a la salida."</span><span class="p">,</span>',
          '    <span class="n">file_ids</span><span class="o">=</span><span class="p">[</span><span class="n">file</span><span class="o">.</span><span class="n">id</span><span class="p">]</span>',
          '<span class="p">)</span>',
          '</span><span class="n">run</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">runs</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '  <span class="n">thread_id</span><span class="o">=</span><span class="n">thread_id</span><span class="p">,</span>',
          '  <span class="n">assistant_id</span><span class="o">=</span><span class="n">code_interpreter_assistant_id</span><span class="p">,</span>',
          '  <span class="n">instructions</span><span class="o">=</span><span class="s2">"Resuleve el problema que te ha planteado el usuario."</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '</span><span class="nb">type</span><span class="p">(</span><span class="n">run</span><span class="p">),</span> <span class="n">run</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(openai.types.beta.threads.run.Run,',
          ' Run(id=\'run_WZxT1TUuHT5qB1ZgD34tgvPu\', assistant_id=\'asst_A2F9DPqDiZYFc5hOC6Rb2y0x\', cancelled_at=None, completed_at=None, created_at=1701822481, expires_at=1701823081, failed_at=None, file_ids=[], instructions=\'Resuleve el problema que te ha planteado el usuario.\', last_error=None, metadata={}, model=\'gpt-3.5-turbo-1106\', object=\'thread.run\', required_action=None, started_at=None, status=\'queued\', thread_id=\'thread_nfFT3rFjyPWHdxWvMk6jJ90H\', tools=[ToolAssistantToolsCode(type=\'code_interpreter\')]))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">run_id</span> <span class="o">=</span> <span class="n">run</span><span class="o">.</span><span class="n">id</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"run_id = </span><span class="si">{</span><span class="n">run_id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'run_id = run_WZxT1TUuHT5qB1ZgD34tgvPu',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Esperar-a-que-termine-de-procesar">Esperar a que termine de procesar<a class="anchor-link" href="#Esperar-a-que-termine-de-procesar"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 32" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mientras el asistente est√° analizando podemos comprobar el estado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">run</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">runs</span><span class="o">.</span><span class="n">retrieve</span><span class="p">(</span>',
      '        <span class="n">thread_id</span><span class="o">=</span><span class="n">thread_id</span><span class="p">,</span>',
      '        <span class="n">run_id</span><span class="o">=</span><span class="n">run_id</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>









      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">run</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">runs</span><span class="o">.</span><span class="n">retrieve</span><span class="p">(</span>',
          '  <span class="n">thread_id</span><span class="o">=</span><span class="n">thread_id</span><span class="p">,</span>',
          '  <span class="n">run_id</span><span class="o">=</span><span class="n">run_id</span>',
          '<span class="p">)</span>',
          '</span><span class="nb">type</span><span class="p">(</span><span class="n">run</span><span class="p">),</span> <span class="n">run</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(openai.types.beta.threads.run.Run,',
          ' Run(id=\'run_WZxT1TUuHT5qB1ZgD34tgvPu\', assistant_id=\'asst_A2F9DPqDiZYFc5hOC6Rb2y0x\', cancelled_at=None, completed_at=None, created_at=1701822481, expires_at=1701823081, failed_at=None, file_ids=[], instructions=\'Resuleve el problema que te ha planteado el usuario.\', last_error=None, metadata={}, model=\'gpt-3.5-turbo-1106\', object=\'thread.run\', required_action=None, started_at=1701822481, status=\'in_progress\', thread_id=\'thread_nfFT3rFjyPWHdxWvMk6jJ90H\', tools=[ToolAssistantToolsCode(type=\'code_interpreter\')]))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">run</span><span class="o">.</span><span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'in_progress\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">while</span> <span class="n">run</span><span class="o">.</span><span class="n">status</span> <span class="o">!=</span> <span class="s2">"completed"</span><span class="p">:</span>',
          '    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
          '    <span class="n">run</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">runs</span><span class="o">.</span><span class="n">retrieve</span><span class="p">(</span>',
          '      <span class="n">thread_id</span><span class="o">=</span><span class="n">thread_id</span><span class="p">,</span>',
          '      <span class="n">run_id</span><span class="o">=</span><span class="n">run_id</span>',
          '    <span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Run completed!"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Run completed!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Procesar-la-respuesta">Procesar la respuesta<a class="anchor-link" href="#Procesar-la-respuesta"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 33" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Una vez el asistente ha terminado podemos ver la respuesta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">messages</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">list</span><span class="p">(</span>',
      '        <span class="n">thread_id</span><span class="o">=</span><span class="n">thread_id</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>








      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">messages</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">list</span><span class="p">(</span>',
          '  <span class="n">thread_id</span><span class="o">=</span><span class="n">thread_id</span>',
          '<span class="p">)</span>',
          '</span><span class="nb">type</span><span class="p">(</span><span class="n">messages</span><span class="p">),</span> <span class="n">messages</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(openai.pagination.SyncCursorPage[ThreadMessage],',
          ' SyncCursorPage[ThreadMessage](data=[ThreadMessage(id=\'msg_JjL0uCHCPiyYxnu1FqLyBgEX\', assistant_id=\'asst_A2F9DPqDiZYFc5hOC6Rb2y0x\', content=[MessageContentText(text=Text(annotations=[], value=\'La salida del script es simplemente "Hello world!", ya que la √∫nica instrucci√≥n en el script es imprimir esa frase.\n\nSi necesitas alguna otra aclaraci√≥n o ayuda adicional, no dudes en preguntar.\'), type=\'text\')], created_at=1701822487, file_ids=[], metadata={}, object=\'thread.message\', role=\'assistant\', run_id=\'run_WZxT1TUuHT5qB1ZgD34tgvPu\', thread_id=\'thread_nfFT3rFjyPWHdxWvMk6jJ90H\'), ThreadMessage(id=\'msg_nkFbq64DTaSqxIAQUGedYmaX\', assistant_id=\'asst_A2F9DPqDiZYFc5hOC6Rb2y0x\', content=[MessageContentText(text=Text(annotations=[], value=\'El script proporcionado contiene una sola l√≠nea que imprime "Hello world!". Ahora proceder√© a ejecutar el script para obtener su salida.\'), type=\'text\')], created_at=1701822485, file_ids=[], metadata={}, object=\'thread.message\', role=\'assistant\', run_id=\'run_WZxT1TUuHT5qB1ZgD34tgvPu\', thread_id=\'thread_nfFT3rFjyPWHdxWvMk6jJ90H\'), ThreadMessage(id=\'msg_bWT6H2f6lsSUTAAhGG0KXoh7\', assistant_id=\'asst_A2F9DPqDiZYFc5hOC6Rb2y0x\', content=[MessageContentText(text=Text(annotations=[], value=\'Voy a revisar el archivo que has subido y ejecutar el script proporcionado. Una vez que lo haya revisado, te proporcionar√© una explicaci√≥n detallada del script y su salida.\'), type=\'text\')], created_at=1701822482, file_ids=[], metadata={}, object=\'thread.message\', role=\'assistant\', run_id=\'run_WZxT1TUuHT5qB1ZgD34tgvPu\', thread_id=\'thread_nfFT3rFjyPWHdxWvMk6jJ90H\'), ThreadMessage(id=\'msg_RjDygK7c8yCqYrjnUPfeZfUg\', assistant_id=None, content=[MessageContentText(text=Text(annotations=[], value=\'Ejecuta el script que te he pasado, expl√≠camelo y dime que da a la salida.\'), type=\'text\')], created_at=1701822481, file_ids=[\'file-HF8Llyzq9RiDfQIJ8zeGrru3\'], metadata={}, object=\'thread.message\', role=\'user\', run_id=None, thread_id=\'thread_nfFT3rFjyPWHdxWvMk6jJ90H\')], object=\'list\', first_id=\'msg_JjL0uCHCPiyYxnu1FqLyBgEX\', last_id=\'msg_RjDygK7c8yCqYrjnUPfeZfUg\', has_more=False))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">messages</span><span class="o">.</span><span class="n">data</span><span class="p">)):</span>',
          '    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">messages</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">content</span><span class="p">)):</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"messages.data[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].content[</span><span class="si">{</span><span class="n">j</span><span class="si">}</span><span class="s2">].text.value = </span><span class="si">{</span><span class="n">messages</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">value</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    ',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'messages.data[0].content[0].text.value = La salida del script es simplemente "Hello world!", ya que la √∫nica instrucci√≥n en el script es imprimir esa frase.',
          'Si necesitas alguna otra aclaraci√≥n o ayuda adicional, no dudes en preguntar.',
          'messages.data[1].content[0].text.value = El script proporcionado contiene una sola l√≠nea que imprime "Hello world!". Ahora proceder√© a ejecutar el script para obtener su salida.',
          'messages.data[2].content[0].text.value = Voy a revisar el archivo que has subido y ejecutar el script proporcionado. Una vez que lo haya revisado, te proporcionar√© una explicaci√≥n detallada del script y su salida.',
          'messages.data[3].content[0].text.value = Ejecuta el script que te he pasado, expl√≠camelo y dime que da a la salida.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      




    </div>

  </section>

</PostLayout>
