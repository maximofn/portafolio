---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Manejo de datos con Pandas';
const end_url = 'pandas';
const description = '📊 Maneja datos 📝 fácilmente con Pandas 📖';
const keywords = 'pandas, datos, análisis de datos, manipulación de datos, limpieza de datos, visualización de datos';
const languaje = 'ES';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas-icon.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=900
    image_height=364
    image_extension=webp
    article_date=2021-06-15+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#1. Resumen"><h2>1. Resumen</h2></a>
      <a class="anchor-link" href="#2. ¿Que es Pandas?"><h2>2. ¿Qué es Pandas?</h2></a>
      <a class="anchor-link" href="#2.1. Pandas como pd"><h3>2.1. Pandas como <code>pd</code></h3></a>
      <a class="anchor-link" href="#3. Estructuras de datos de Pandas"><h2>3. Estructuras de datos de Pandas</h2></a>
      <a class="anchor-link" href="#3.1. Series"><h3>3.1. Series</h3></a>
      <a class="anchor-link" href="#3.1.1. Series desde un diccionario"><h4>3.1.1. Series desde un diccionario</h4></a>
      <a class="anchor-link" href="#3.1.2. Series desde una lista o tupla"><h4>3.1.2. Series desde una lista o tupla</h4></a>
      <a class="anchor-link" href="#3.1.3. Series desde un ndarray"><h4>3.1.3. Series desde un ndarray</h4></a>
      <a class="anchor-link" href="#3.1.4. Series desde un escalar"><h4>3.1.4. Series desde un escalar</h4></a>
      <a class="anchor-link" href="#3.1.5. Operaciones con Series"><h4>3.1.5. Operaciones con Series</h4></a>
      <a class="anchor-link" href="#3.1.6. Atributo nombre de las Series"><h4>3.1.6. Atributo nombre de las Series</h4></a>
      <a class="anchor-link" href="#3.2. DataFrames"><h3>3.2. DataFrames</h3></a>
      <a class="anchor-link" href="#3.2.1. DataFrames desde un diccionario de Series"><h4>3.2.1. DataFrames desde un diccionario de Series</h4></a>
      <a class="anchor-link" href="#3.2.2. DataFrames desde un diccionario de ndarrays o listas"><h4>3.2.2. DataFrames desde un diccionario de ndarrays o listas</h4></a>
      <a class="anchor-link" href="#3.2.3. DataFrames desde una matriz"><h4>3.2.3. DataFrames desde una matriz</h4></a>
      <a class="anchor-link" href="#3.2.4. DataFrames desde una lista de diccionarios"><h4>3.2.4. DataFrames desde una lista de diccionarios</h4></a>
      <a class="anchor-link" href="#3.2.5. DataFrames desde un diccionario de tuplas"><h4>3.2.5. DataFrames desde un diccionario de tuplas</h4></a>
      <a class="anchor-link" href="#3.2.6. DataFrames desde una Serie"><h4>3.2.6. DataFrames desde una Serie</h4></a>
      <a class="anchor-link" href="#4. Exploracion de un DataFrame"><h2>4. Exploración de un DataFrame</h2></a>
      <a class="anchor-link" href="#4.1. Cabeza del DataFrame"><h3>4.1. Cabeza del DataFrame</h3></a>
      <a class="anchor-link" href="#4.2. Cola del DataFrame"><h3>4.2. Cola del DataFrame</h3></a>
      <a class="anchor-link" href="#4.3. Informacion del DataFrame"><h3>4.3. Información del DataFrame</h3></a>
      <a class="anchor-link" href="#4.4. Filas y columnas DataFrame"><h3>4.4. Filas y columnas DataFrame</h3></a>
      <a class="anchor-link" href="#4.5. Descripcion del DataFrame"><h3>4.5. Descripción del DataFrame</h3></a>
      <a class="anchor-link" href="#4.6. Ordenación del DataFrame"><h3>4.6. Ordenación del <code>DataFrame</code></h3></a>
      <a class="anchor-link" href="#4.7. Estadisticas del DataFrame"><h3>4.7. Estadísticas del DataFrame</h3></a>
      <a class="anchor-link" href="#4.8. Memoria usada"><h3>4.8. Memoria usada</h3></a>
      <a class="anchor-link" href="#5. Adicion de datos"><h2>5. Adición de datos</h2></a>
      <a class="anchor-link" href="#5.1. Adicion de columnas"><h3>5.1. Adición de columnas</h3></a>
      <a class="anchor-link" href="#5.2. Adicion de filas"><h3>5.2. Adición de filas</h3></a>
      <a class="anchor-link" href="#6. Eliminacion de datos"><h2>6. Eliminación de datos</h2></a>
      <a class="anchor-link" href="#6.1. Eliminacion de columnas"><h3>6.1. Eliminación de columnas</h3></a>
      <a class="anchor-link" href="#6.1. Eliminacion de filas"><h3>6.1. Eliminación de filas</h3></a>
      <a class="anchor-link" href="#7. Operaciones sobre DataFrames"><h2>7. Operaciones sobre DataFrames</h2></a>
      <a class="anchor-link" href="#8. Transpuesta"><h2>8. Transpuesta</h2></a>
      <a class="anchor-link" href="#9. Conversion a Numpy"><h2>9. Conversión a Numpy</h2></a>
      <a class="anchor-link" href="#10. Lectura de datos de fuentes externas"><h2>10. Lectura de datos de fuentes externas</h2></a>
      <a class="anchor-link" href="#11. Indexacion en DataFrames"><h2>11. Indexación en DataFrames</h2></a>
      <a class="anchor-link" href="#11.1. Indexacion de columnas"><h3>11.1. Indexación de columnas</h3></a>
      <a class="anchor-link" href="#11.2. Indexacion de filas por posiciones"><h3>11.2. Indexación de filas por posiciones</h3></a>
      <a class="anchor-link" href="#11.3. Indexacion de filas por etiquetas"><h3>11.3. Indexación de filas por etiquetas</h3></a>
      <a class="anchor-link" href="#11.4. Seleccion de una porcion del DataFrame mediante posiciones"><h3>11.4. Selección de una porción del DataFrame mediante posiciones</h3></a>
      <a class="anchor-link" href="#11.5. Seleccion de una porcion del DataFrame mediante etiquetas"><h3>11.5. Selección de una porción del DataFrame mediante etiquetas</h3></a>
      <a class="anchor-link" href="#11.6. Indexacion por funcion lambda"><h3>11.6. Indexación por función lambda</h3></a>
      <a class="anchor-link" href="#11.7. Indexacion condicional"><h3>11.7. Indexación condicional</h3></a>
      <a class="anchor-link" href="#11.8. Indexacion aleatoria"><h3>11.8. Indexación aleatoria</h3></a>
      <a class="anchor-link" href="#12. Union de DataFrames"><h2>12. Unión de DataFrames</h2></a>
      <a class="anchor-link" href="#12.1. Concatenacion de DataFrames"><h3>12.1. Concatenación de DataFrames</h3></a>
      <a class="anchor-link" href="#12.1.1. Interseccion de concatenacion"><h4>12.1.1. Intersección de concatenación</h4></a>
      <a class="anchor-link" href="#12.2. Merge de DataFrames"><h3>12.2. <code>Merge</code> de DataFrames</h3></a>
      <a class="anchor-link" href="#12.3. Join de dataframes"><h3>12.3. <code>Join</code> de dataframes</h3></a>
      <a class="anchor-link" href="#13. Datos faltantes (NaN)"><h2>13. Datos faltantes (<code>NaN</code>)</h2></a>
      <a class="anchor-link" href="#13.1. Eliminacion de las filas con datos faltantes"><h3>13.1. Eliminación de las filas con datos faltantes</h3></a>
      <a class="anchor-link" href="#13.2. Eliminacion de las columnas con datos faltantes"><h3>13.2. Eliminación de las columnas con datos faltantes</h3></a>
      <a class="anchor-link" href="#13.3. Mascara booleana con las posiciones faltantes"><h3>13.3. Máscara booleana con las posiciones faltantes</h3></a>
      <a class="anchor-link" href="#13.4. Rellenado de los datos faltantes"><h3>13.4. Rellenado de los datos faltantes</h3></a>
      <a class="anchor-link" href="#14. Series temporales"><h2>14. Series temporales</h2></a>
      <a class="anchor-link" href="#15. Datos categoricos"><h2>15. Datos categóricos</h2></a>
      <a class="anchor-link" href="#16. Groupby"><h2>16. Groupby</h2></a>
      <a class="anchor-link" href="#17. Graficos"><h2>17. Gráficos</h2></a>
      <a class="anchor-link" href="#17.1. Grafica basica"><h3>17.1. Gráfica básica</h3></a>
      <a class="anchor-link" href="#17.2. Diagrama de barras verticales"><h3>17.2. Diagrama de barras verticales</h3></a>
      <a class="anchor-link" href="#17.3. Diagrama de barras horizontal"><h3>17.3. Diagrama de barras horizontal</h3></a>
      <a class="anchor-link" href="#17.4. Histograma"><h3>17.4. Histograma</h3></a>
      <a class="anchor-link" href="#17.5. Diagramas de velas"><h3>17.5. Diagramas de velas</h3></a>
      <a class="anchor-link" href="#17.6. Graficos de areas"><h3>17.6. Gráficos de áreas</h3></a>
      <a class="anchor-link" href="#17.7. Diagrama de dispersion"><h3>17.7. Diagrama de dispersión</h3></a>
      <a class="anchor-link" href="#17.8. Grafico de contenedor hexagonal"><h3>17.8. Gráfico de contenedor hexágonal</h3></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="1. Resumen">1. Resumen<a class="anchor-link" href="#1. Resumen"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 1" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver una pequeña introducción a la librería de manipulación y análisis de datos <code>Pandas</code>. Con ella podremos manejar y procesar datos tabulares que nos ayudará para poder operar con ellos y obtener información de una manera muy valiosa</p>
      <p align="center">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas-icon.webp">
      </p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="2. ¿Que es Pandas?">2. ¿Qué es Pandas?<a class="anchor-link" href="#2. ¿Que es Pandas?"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 2" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pandas es una librería de **Python** que está diseñada para que el trabajo con datos *relacionales* o *etiquetados* sea fácil e intuitivo</p>
      <p>Pandas está diseñado para muchos tipos diferentes de datos:</p>
      <ul>
        <li>Datos tabulares con columnas de tipos heterogéneos, como en una tabla SQL o una hoja de cálculo de Excel</li>
        <li>Datos de series de tiempo ordenados y desordenados (no necesariamente de frecuencia fija).</li>
        <li>Datos matriciales arbitrarios (homogéneos o heterogéneos) con etiquetas de fila y columna</li>
        <li>Cualquier otra forma de conjuntos de datos observacionales/estadísticos. No es necesario etiquetar los datos en absoluto para colocarlos en una estructura de datos de Pandas.</li>
      </ul>
      <p>Las dos estructuras de datos principales de Pandas son las <code>Serie</code>s (unidimensional) y los <code>DataFrame</code>s (bidimensional). Pandas está construido sobre NumPy y está destinado a integrarse bien dentro de un entorno informático científico con muchas otras bibliotecas de terceros.</p>
      <p>Para los científicos de datos, el trabajo con datos generalmente se divide en varias etapas: recopilar y limpiar datos, analizarlos/modelarlos y luego organizar los resultados del análisis en una forma adecuada para trazarlos o mostrarlos en forma de tabla. pandas es la herramienta ideal para todas estas tareas.</p>
      <p>Otra característica es que pandas es rápido, muchos de los algoritmos de bajo nivel se han construido en <code>C</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3>2.1. Pandas como <code>pd</code></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Generalmente a la hora de importar pandas se suele importar con el alias de <code>pd</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">pandas</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nn">pd</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '1.0.1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="3. Estructuras de datos de Pandas">3. Estructuras de datos de Pandas<a class="anchor-link" href="#3. Estructuras de datos de Pandas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 3" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En Pandas existen dos tipos de estructuras de datos: las <code>Serie</code>s y los <code>DataFrame</code>s</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.1. Series">3.1. Series<a class="anchor-link" href="#3.1. Series"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 4" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El tipo de dato <code>Serie</code> es una matriz etiquetada unidimensional capaz de contener cualquier tipo de datos (enteros, cadenas, números de punto flotante, objetos Python, etc.). Está dividida en índices.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para crear un tipo de dato <code>Serie</code> la forma más común es</p>
      <div class='highlight'><pre><code class="language-python">serie = pd.Series(data, index=index)</code></pre></div>
      <p>Dónde <code>data</code> puede ser:</p>
      <ul>
        <li>Un diccionario</li>
        <li>Una lista o tupla</li>
        <li>Un <code>ndarray</code> de Numpy</li>
        <li>Un valor escalar</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como uno de los tipos de datos puede ser un <code>ndarray</code> de NumPy, importamos NumPy para poder usarlo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">numpy</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nn">np</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.1. Series desde un diccionario">3.1.1. Series desde un diccionario<a class="anchor-link" href="#3.1.1. Series desde un diccionario"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 5" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;b&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
      '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'b    1',
          'a    0',
          'c    2',
          'dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se pasa un índice, se extraerán los valores de los datos correspondientes a las etiquetas del índice. Si no existen, se crean como <code>NaN</code> (not a number)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;b&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">diccionario</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="s2">&quot;d&quot;</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">])</span>',
      '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'b    1.0',
          'c    2.0',
          'd    NaN',
          'a    0.0',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.2. Series desde una lista o tupla">3.1.2. Series desde una lista o tupla<a class="anchor-link" href="#3.1.2. Series desde una lista o tupla"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 6" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si los datos provienen de una lista o tupla y no se pasa ningún índice, se creará uno con valores [0, ..., len(data)-1]</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>',
      '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '0    1',
          '1    2',
          '2    3',
          '3    4',
          'dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se pasa un índice, este debe tener la misma longitud que los datos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="s2">&quot;d&quot;</span><span class="p">])</span>',
      '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'a    1',
          'b    2',
          'c    3',
          'd    4',
          'dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.3. Series desde un ndarray">3.1.3. Series desde un ndarray<a class="anchor-link" href="#3.1.3. Series desde un ndarray"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 7" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si los datos provienen de un ndarray y no se pasa ningún índice, se creará uno con valores <code>[0, ..., len(data)-1]</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>',
      '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '0    1.267865',
          '1   -0.877857',
          '2   -0.138556',
          '3   -0.132987',
          '4   -0.827295',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se pasa un índice, este debe tener la misma longitud que los datos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="s2">&quot;d&quot;</span><span class="p">,</span> <span class="s2">&quot;e&quot;</span><span class="p">])</span>',
      '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'a   -1.091828',
          'b   -0.584243',
          'c    0.220398',
          'd    1.248923',
          'e    1.652351',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.4. Series desde un escalar">3.1.4. Series desde un escalar<a class="anchor-link" href="#3.1.4. Series desde un escalar"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 8" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se crea la serie desde un escalar, se creará con un único ítem</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="mf">5.0</span><span class="p">)</span>',
      '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '0    5.0',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se quieren crear más ítems en la serie, hay que pasarle el índice con el número de ítems que se quiera, de esta manera todos los ítems tendrán el valor del escalar</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="mf">5.0</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="s2">&quot;d&quot;</span><span class="p">,</span> <span class="s2">&quot;e&quot;</span><span class="p">])</span>',
      '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'a    5.0',
          'b    5.0',
          'c    5.0',
          'd    5.0',
          'e    5.0',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.5. Operaciones con Series">3.1.5. Operaciones con Series<a class="anchor-link" href="#3.1.5. Operaciones con Series"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 9" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al igual que con Numpy, podemos realizar operaciones con todos los elementos de una serie, sin tener que hacer una iteración por cada uno de ellos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="mf">5.0</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="s2">&quot;d&quot;</span><span class="p">,</span> <span class="s2">&quot;e&quot;</span><span class="p">])</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;serie:</span><span class="se">\n</span><span class="si">{</span><span class="n">serie</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">serie + serie =</span><span class="se">\n</span><span class="si">{</span><span class="n">serie</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">serie</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'serie:',
          'a    5.0',
          'b    5.0',
          'c    5.0',
          'd    5.0',
          'e    5.0',
          'dtype: float64',
          'serie + serie =',
          'a    10.0',
          'b    10.0',
          'c    10.0',
          'd    10.0',
          'e    10.0',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="mf">5.0</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="s2">&quot;d&quot;</span><span class="p">,</span> <span class="s2">&quot;e&quot;</span><span class="p">])</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;serie:</span><span class="se">\n</span><span class="si">{</span><span class="n">serie</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">exp(serie) =</span><span class="se">\n</span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">serie</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'serie:',
          'a    5.0',
          'b    5.0',
          'c    5.0',
          'd    5.0',
          'e    5.0',
          'dtype: float64',
          'exp(serie) =',
          'a    148.413159',
          'b    148.413159',
          'c    148.413159',
          'd    148.413159',
          'e    148.413159',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Una diferencia entre <code>Serie</code>s y ndarrays es que las operaciones entre <code>Serie</code>s alinean automáticamente los datos según sus etiquetas. Por lo tanto, se pueden escribir cálculos sin tener en cuenta si las <code>Serie</code>s involucradas tienen las mismas etiquetas. Si no se encuentra una etiqueta en una <code>Serie</code> u otra, el resultado se marcará como faltante (NaN).</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="mf">5.0</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="s2">&quot;d&quot;</span><span class="p">,</span> <span class="s2">&quot;e&quot;</span><span class="p">])</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;serie:</span><span class="se">\n</span><span class="si">{</span><span class="n">serie</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">serie[1:] + serie[:-1] =</span><span class="se">\n</span><span class="si">{</span><span class="n">serie</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">serie</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'serie:',
          'a    5.0',
          'b    5.0',
          'c    5.0',
          'd    5.0',
          'e    5.0',
          'dtype: float64',
          'serie[1:] + serie[:-1] =',
          'a     NaN',
          'b    10.0',
          'c    10.0',
          'd    10.0',
          'e     NaN',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.6. Atributo nombre de las Series">3.1.6. Atributo nombre de las Series<a class="anchor-link" href="#3.1.6. Atributo nombre de las Series"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 10" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Uno de los atributos de las <code>Serie</code>s es <code>name</code>, el cual corresponde al nombre que tendrán cuando se añadan a un DataFrame. Por el camino contrario, cuando se obtiene una serie de un DataFrame, esta serie tendrá como nombre el que tenía en el DataFrame</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="s2">&quot;aleatorio&quot;</span><span class="p">)</span>',
      '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '0   -0.191009',
          '1   -0.793151',
          '2   -0.907747',
          '3   -1.440508',
          '4   -0.676419',
          'Name: aleatorio, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se puede cambiar el nombre de una serie mediante el método <code>rename()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">serie</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="s2">&quot;random&quot;</span><span class="p">)</span>',
      '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '0   -0.191009',
          '1   -0.793151',
          '2   -0.907747',
          '3   -1.440508',
          '4   -0.676419',
          'Name: random, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.2. DataFrames">3.2. DataFrames<a class="anchor-link" href="#3.2. DataFrames"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 11" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Un <code>DataFrame</code> es una estructura de datos etiquetada y bidimensional, con columnas de tipos potencialmente diferentes, es decir, en una columna puede haber datos de tipo entero, en otra columna datos de tipo string, etc. Puede pensar en ello como una hoja de cálculo o una tabla SQL, o un diccionario de objetos <code>Serie</code>s.</p>
      <p>Es el objeto pandas más utilizado. Al igual que las <code>Serie</code>s, los <code>DataFrame</code>s aceptan muchos tipos diferentes de entrada:</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Junto con los datos, opcionalmente puede pasar argumentos de índice (etiquetas de fila) y columnas (etiquetas de columna). Si pasa un índice y/o columnas, está garantizando el índice y/o columnas del <code>DataFrame</code> resultante. Por lo tanto, un diccionario de <code>Serie</code>s más un índice específico descartará todos los datos que no coincidan con el índice pasado</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si no se pasan las etiquetas de los ejes, se construirán a partir de los datos de entrada basándose en reglas de sentido común.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.1. DataFrames desde un diccionario de Series">3.2.1. DataFrames desde un diccionario de Series<a class="anchor-link" href="#3.2.1. DataFrames desde un diccionario de Series"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 12" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se pasa un diccionario con <code>Serie</code>s se creará el <code>DataFrame</code> con tantas columnas como <code>Serie</code>s tenga el diccionario</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="s2">&quot;uno&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">]),</span>',
      '<span class="w">    </span><span class="s2">&quot;dos&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">])</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno  dos',
          '0  1.0  4.0',
          '1  2.0  5.0',
          '2  3.0  6.0',
          '3  NaN  7.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si cada una de las <code>Serie</code>s tiene índices definidos, el <code>DataFrame</code> resultante será la unión de estos índices</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="s2">&quot;uno&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">]),</span>',
      '<span class="w">    </span><span class="s2">&quot;dos&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="s2">&quot;d&quot;</span><span class="p">])</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno  dos',
          'a  1.0  4.0',
          'b  2.0  5.0',
          'c  3.0  6.0',
          'd  NaN  7.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;d&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">])</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno  dos',
          'd  NaN  7.0',
          'b  2.0  5.0',
          'a  1.0  4.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se le pasan las columnas, aparecerán en el orden pasado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;dos&quot;</span><span class="p">,</span> <span class="s2">&quot;tres&quot;</span><span class="p">])</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;dos tres',
          'a  4.0  NaN',
          'b  5.0  NaN',
          'c  6.0  NaN',
          'd  7.0  NaN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.2. DataFrames desde un diccionario de ndarrays o listas">3.2.2. DataFrames desde un diccionario de ndarrays o listas<a class="anchor-link" href="#3.2.2. DataFrames desde un diccionario de ndarrays o listas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 13" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Todos los ndarrays o listas deben tener la misma longitud. Si se pasa un índice, también debe tener la misma longitud que los ndarrays o listas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="s2">&quot;uno&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="mf">4.0</span><span class="p">],</span>',
      '<span class="w">    </span><span class="s2">&quot;dos&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">]</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno  dos',
          '0  1.0  4.0',
          '1  2.0  3.0',
          '2  3.0  2.0',
          '3  4.0  1.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.3. DataFrames desde una matriz">3.2.3. DataFrames desde una matriz<a class="anchor-link" href="#3.2.3. DataFrames desde una matriz"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 14" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se pasa un índice, tiene que tener la misma longitud que el número de filas de la matriz y si se pasan las columnas, tienen que tener la misma longitud que las columnas de la matriz</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">matriz</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">matriz</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">],</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;columna1&quot;</span><span class="p">,</span> <span class="s2">&quot;columna2&quot;</span><span class="p">])</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;columna1  columna2',
          'a         1         3',
          'b         2         2',
          'c         3         1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.4. DataFrames desde una lista de diccionarios">3.2.4. DataFrames desde una lista de diccionarios<a class="anchor-link" href="#3.2.4. DataFrames desde una lista de diccionarios"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 15" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">&quot;a&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="s2">&quot;a&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">:</span> <span class="mi">20</span><span class="p">}]</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">lista</span><span class="p">)</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;a   b     c',
          '0  1   2   NaN',
          '1  5  10  20.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.5. DataFrames desde un diccionario de tuplas">3.2.5. DataFrames desde un diccionario de tuplas<a class="anchor-link" href="#3.2.5. DataFrames desde un diccionario de tuplas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 16" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">):</span> <span class="p">{(</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">):</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;C&quot;</span><span class="p">):</span> <span class="mi">2</span><span class="p">},</span>',
      '<span class="w">    </span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">):</span> <span class="p">{(</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;C&quot;</span><span class="p">):</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">):</span> <span class="mi">4</span><span class="p">},</span>',
      '<span class="w">    </span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">):</span> <span class="p">{(</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">):</span> <span class="mi">5</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;C&quot;</span><span class="p">):</span> <span class="mi">6</span><span class="p">},</span>',
      '<span class="w">    </span><span class="p">(</span><span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">):</span> <span class="p">{(</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;C&quot;</span><span class="p">):</span> <span class="mi">7</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">):</span> <span class="mi">8</span><span class="p">},</span>',
      '<span class="w">    </span><span class="p">(</span><span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">):</span> <span class="p">{(</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;D&quot;</span><span class="p">):</span> <span class="mi">9</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">):</span> <span class="mi">10</span><span class="p">},</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;a              b',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;b    a    c    a     b',
          'A B  1.0  4.0  5.0  8.0  10.0',
          '&#x20;&#x20;C  2.0  3.0  6.0  7.0   NaN',
          '&#x20;&#x20;D  NaN  NaN  NaN  NaN   9.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.6. DataFrames desde una Serie">3.2.6. DataFrames desde una Serie<a class="anchor-link" href="#3.2.6. DataFrames desde una Serie"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 17" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El resultado será un <code>DataFrame</code> con el mismo índice que la Serie de entrada, y con una columna cuyo nombre es el nombre original de la Serie (solo si no se proporciona otro nombre de columna).</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;b&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">serie</span><span class="p">)</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;0',
          'b  1',
          'a  0',
          'c  2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="4. Exploracion de un DataFrame">4. Exploración de un DataFrame<a class="anchor-link" href="#4. Exploracion de un DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 18" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Cuando un <code>DataFrame</code> es muy grande, no se puede representar entero</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&quot;https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv&quot;</span><span class="p">)</span>',
      '<span class="n">california_housing_train</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\',
          '0        -114.31     34.19                15.0       5612.0          1283.0',
          '1        -114.47     34.40                19.0       7650.0          1901.0',
          '2        -114.56     33.69                17.0        720.0           174.0',
          '3        -114.57     33.64                14.0       1501.0           337.0',
          '4        -114.57     33.57                20.0       1454.0           326.0',
          '...          ...       ...                 ...          ...             ...',
          '16995    -124.26     40.58                52.0       2217.0           394.0',
          '16996    -124.27     40.69                36.0       2349.0           528.0',
          '16997    -124.30     41.84                17.0       2677.0           531.0',
          '16998    -124.30     41.80                19.0       2672.0           552.0',
          '16999    -124.35     40.54                52.0       1820.0           300.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;population  households  median_income  median_house_value',
          '0          1015.0       472.0         1.4936             66900.0',
          '1          1129.0       463.0         1.8200             80100.0',
          '2           333.0       117.0         1.6509             85700.0',
          '3           515.0       226.0         3.1917             73400.0',
          '4           624.0       262.0         1.9250             65500.0',
          '...           ...         ...            ...                 ...',
          '16995       907.0       369.0         2.3571            111400.0',
          '16996      1194.0       465.0         2.5179             79000.0',
          '16997      1244.0       456.0         3.0313            103600.0',
          '16998      1298.0       478.0         1.9797             85800.0',
          '16999       806.0       270.0         3.0147             94600.0',
          '[17000 rows x 9 columns]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por lo que es muy útil tener métodos para explorarlo y obtener información de manera rápida.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.1. Cabeza del DataFrame">4.1. Cabeza del DataFrame<a class="anchor-link" href="#4.1. Cabeza del DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 19" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para ver las primeras filas y hacerse una idea de cómo es el <code>DataFrame</code> existe el método <code>head()</code>, que por defecto muestra las primeras 5 filas del <code>DataFrame</code>. Si se quiere ver un número distinto de filas, introducirlo mediante el atributo <code>n</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\',
          '0    -114.31     34.19                15.0       5612.0          1283.0',
          '1    -114.47     34.40                19.0       7650.0          1901.0',
          '2    -114.56     33.69                17.0        720.0           174.0',
          '3    -114.57     33.64                14.0       1501.0           337.0',
          '4    -114.57     33.57                20.0       1454.0           326.0',
          '5    -114.58     33.63                29.0       1387.0           236.0',
          '6    -114.58     33.61                25.0       2907.0           680.0',
          '7    -114.59     34.83                41.0        812.0           168.0',
          '8    -114.59     33.61                34.0       4789.0          1175.0',
          '9    -114.60     34.83                46.0       1497.0           309.0',
          '&#x20;&#x20;&#x20;population  households  median_income  median_house_value',
          '0      1015.0       472.0         1.4936             66900.0',
          '1      1129.0       463.0         1.8200             80100.0',
          '2       333.0       117.0         1.6509             85700.0',
          '3       515.0       226.0         3.1917             73400.0',
          '4       624.0       262.0         1.9250             65500.0',
          '5       671.0       239.0         3.3438             74000.0',
          '6      1841.0       633.0         2.6768             82400.0',
          '7       375.0       158.0         1.7083             48500.0',
          '8      3134.0      1056.0         2.1782             58400.0',
          '9       787.0       271.0         2.1908             48100.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.2. Cola del DataFrame">4.2. Cola del DataFrame<a class="anchor-link" href="#4.2. Cola del DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 20" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si lo que se quiere es ver las últimas filas se puede usar el método <code>tail()</code>, mediante el parámetro <code>n</code> se elige cuántas filas mostrar</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">tail</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\',
          '16995    -124.26     40.58                52.0       2217.0           394.0',
          '16996    -124.27     40.69                36.0       2349.0           528.0',
          '16997    -124.30     41.84                17.0       2677.0           531.0',
          '16998    -124.30     41.80                19.0       2672.0           552.0',
          '16999    -124.35     40.54                52.0       1820.0           300.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;population  households  median_income  median_house_value',
          '16995       907.0       369.0         2.3571            111400.0',
          '16996      1194.0       465.0         2.5179             79000.0',
          '16997      1244.0       456.0         3.0313            103600.0',
          '16998      1298.0       478.0         1.9797             85800.0',
          '16999       806.0       270.0         3.0147             94600.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.3. Informacion del DataFrame">4.3. Información del DataFrame<a class="anchor-link" href="#4.3. Informacion del DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 21" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Otro método muy útil es <code>info()</code> que nos da información del <code>DataFrame</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">info</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;class &#x27;pandas.core.frame.DataFrame&#x27;&amp;gt;',
          'RangeIndex: 17000 entries, 0 to 16999',
          'Data columns (total 9 columns):',
          '#   Column              Non-Null Count  Dtype',
          '---  ------              --------------  -----',
          '0   longitude           17000 non-null  float64',
          '1   latitude            17000 non-null  float64',
          '2   housing_median_age  17000 non-null  float64',
          '3   total_rooms         17000 non-null  float64',
          '4   total_bedrooms      17000 non-null  float64',
          '5   population          17000 non-null  float64',
          '6   households          17000 non-null  float64',
          '7   median_income       17000 non-null  float64',
          '8   median_house_value  17000 non-null  float64',
          'dtypes: float64(9)',
          'memory usage: 1.2 MB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.4. Filas y columnas DataFrame">4.4. Filas y columnas DataFrame<a class="anchor-link" href="#4.4. Filas y columnas DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 22" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden obtener los índices y las columnas de un <code>DataFrame</code> mediante los métodos <code>index</code> y <code>columns</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="s2">&quot;uno&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">]),</span>',
      '<span class="w">    </span><span class="s2">&quot;dos&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="s2">&quot;d&quot;</span><span class="p">])</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">indices</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">index</span>',
      '<span class="n">columnas</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">columns</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;El DataFrame tiene los índices</span><span class="se">\n\t</span><span class="si">{</span><span class="n">indices</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;El DataFrame tiene las columnas</span><span class="se">\n\t</span><span class="si">{</span><span class="n">columnas</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'El DataFrame tiene los índices',
          'Index([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;], dtype=&#x27;object&#x27;)',
          'El DataFrame tiene las columnas',
          'Index([&#x27;uno&#x27;, &#x27;dos&#x27;], dtype=&#x27;object&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.5. Descripcion del DataFrame">4.5. Descripción del DataFrame<a class="anchor-link" href="#4.5. Descripcion del DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 23" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El método <code>describe()</code> muestra un resumen estadístico rápido de los datos del <code>DataFrame</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&quot;https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv&quot;</span><span class="p">)</span>',
      '<span class="n">california_housing_train</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;longitude      latitude  housing_median_age   total_rooms  \\',
          'count  17000.000000  17000.000000        17000.000000  17000.000000',
          'mean    -119.562108     35.625225           28.589353   2643.664412',
          'std        2.005166      2.137340           12.586937   2179.947071',
          'min     -124.350000     32.540000            1.000000      2.000000',
          '25%     -121.790000     33.930000           18.000000   1462.000000',
          '50%     -118.490000     34.250000           29.000000   2127.000000',
          '75%     -118.000000     37.720000           37.000000   3151.250000',
          'max     -114.310000     41.950000           52.000000  37937.000000',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;total_bedrooms    population    households  median_income  \\',
          'count    17000.000000  17000.000000  17000.000000   17000.000000',
          'mean       539.410824   1429.573941    501.221941       3.883578',
          'std        421.499452   1147.852959    384.520841       1.908157',
          'min          1.000000      3.000000      1.000000       0.499900',
          '25%        297.000000    790.000000    282.000000       2.566375',
          '50%        434.000000   1167.000000    409.000000       3.544600',
          '75%        648.250000   1721.000000    605.250000       4.767000',
          'max       6445.000000  35682.000000   6082.000000      15.000100',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;median_house_value',
          'count        17000.000000',
          'mean        207300.912353',
          'std         115983.764387',
          'min          14999.000000',
          '25%         119400.000000',
          '50%         180400.000000',
          '75%         265000.000000',
          'max         500001.000000',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3>4.6. Ordenación del <code>DataFrame</code></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden ordenar alfabéticamente las filas de un <code>DataFrame</code> mediante el método <code>sort_index()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&quot;https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv&quot;</span><span class="p">)</span>',
      '<span class="n">california_housing_train</span><span class="o">.</span><span class="n">sort_index</span><span class="p">()</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\',
          '0    -114.31     34.19                15.0       5612.0          1283.0',
          '1    -114.47     34.40                19.0       7650.0          1901.0',
          '2    -114.56     33.69                17.0        720.0           174.0',
          '3    -114.57     33.64                14.0       1501.0           337.0',
          '4    -114.57     33.57                20.0       1454.0           326.0',
          '&#x20;&#x20;&#x20;population  households  median_income  median_house_value',
          '0      1015.0       472.0         1.4936             66900.0',
          '1      1129.0       463.0         1.8200             80100.0',
          '2       333.0       117.0         1.6509             85700.0',
          '3       515.0       226.0         3.1917             73400.0',
          '4       624.0       262.0         1.9250             65500.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como en este caso las filas ya estaban ordenadas, establecemos <code>ascending=False</code> para que el orden sea al revés</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">sort_index</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\',
          '16999    -124.35     40.54                52.0       1820.0           300.0',
          '16998    -124.30     41.80                19.0       2672.0           552.0',
          '16997    -124.30     41.84                17.0       2677.0           531.0',
          '16996    -124.27     40.69                36.0       2349.0           528.0',
          '16995    -124.26     40.58                52.0       2217.0           394.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;population  households  median_income  median_house_value',
          '16999       806.0       270.0         3.0147             94600.0',
          '16998      1298.0       478.0         1.9797             85800.0',
          '16997      1244.0       456.0         3.0313            103600.0',
          '16996      1194.0       465.0         2.5179             79000.0',
          '16995       907.0       369.0         2.3571            111400.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si lo que se quiere es ordenar las columnas hay que introducir <code>axis=1</code> ya que por defecto es <code>0</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">sort_index</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;households  housing_median_age  latitude  longitude  median_house_value  \\',
          '0       472.0                15.0     34.19    -114.31             66900.0',
          '1       463.0                19.0     34.40    -114.47             80100.0',
          '2       117.0                17.0     33.69    -114.56             85700.0',
          '3       226.0                14.0     33.64    -114.57             73400.0',
          '4       262.0                20.0     33.57    -114.57             65500.0',
          '&#x20;&#x20;&#x20;median_income  population  total_bedrooms  total_rooms',
          '0         1.4936      1015.0          1283.0       5612.0',
          '1         1.8200      1129.0          1901.0       7650.0',
          '2         1.6509       333.0           174.0        720.0',
          '3         3.1917       515.0           337.0       1501.0',
          '4         1.9250       624.0           326.0       1454.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si lo que queremos es ordenar el <code>DataFrame</code> a través de una columna determinada, tenemos que usar el método <code>sort_values()</code> e indicarle la etiqueta de la columna sobre la que se quiere ordenar</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s1">&#39;median_house_value&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\',
          '568      -117.02     36.40                19.0        619.0           239.0',
          '16643    -122.74     39.71                16.0        255.0            73.0',
          '16801    -123.17     40.31                36.0         98.0            28.0',
          '3226     -117.86     34.24                52.0        803.0           267.0',
          '7182     -118.33     34.15                39.0        493.0           168.0',
          '...          ...       ...                 ...          ...             ...',
          '15834    -122.42     37.81                52.0       1314.0           317.0',
          '7927     -118.40     33.87                38.0       2398.0           431.0',
          '3546     -117.90     33.63                28.0       2370.0           352.0',
          '7924     -118.40     33.88                35.0       1060.0           191.0',
          '14011    -122.04     37.26                24.0       4973.0           709.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;population  households  median_income  median_house_value',
          '568         490.0       164.0         2.1000             14999.0',
          '16643        85.0        38.0         1.6607             14999.0',
          '16801        18.0         8.0         0.5360             14999.0',
          '3226        628.0       225.0         4.1932             14999.0',
          '7182        259.0       138.0         2.3667             17500.0',
          '...           ...         ...            ...                 ...',
          '15834       473.0       250.0         4.3472            500001.0',
          '7927        911.0       392.0         5.2319            500001.0',
          '3546        832.0       347.0         7.1148            500001.0',
          '7924        444.0       196.0         8.0015            500001.0',
          '14011      1692.0       696.0         7.8627            500001.0',
          '[17000 rows x 9 columns]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.7. Estadisticas del DataFrame">4.7. Estadísticas del DataFrame<a class="anchor-link" href="#4.7. Estadisticas del DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 24" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden obtener estadísticas del <code>DataFrame</code>, como la media, la moda, la desviación estándar</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&quot;https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;media:</span><span class="se">\n</span><span class="si">{</span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">desviación estandar:</span><span class="se">\n</span><span class="si">{</span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">std</span><span class="p">()</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'media:',
          'longitude               -119.562108',
          'latitude                  35.625225',
          'housing_median_age        28.589353',
          'total_rooms             2643.664412',
          'total_bedrooms           539.410824',
          'population              1429.573941',
          'households               501.221941',
          'median_income              3.883578',
          'median_house_value    207300.912353',
          'dtype: float64',
          'desviación estandar:',
          'longitude                  2.005166',
          'latitude                   2.137340',
          'housing_median_age        12.586937',
          'total_rooms             2179.947071',
          'total_bedrooms           421.499452',
          'population              1147.852959',
          'households               384.520841',
          'median_income              1.908157',
          'median_house_value    115983.764387',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se quieren obtener las estadísticas sobre las filas y no sobre las columnas hay que indicarlo mediante <code>axis=1</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&quot;https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;media:</span><span class="se">\n</span><span class="si">{</span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">desviación estandar:</span><span class="se">\n</span><span class="si">{</span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">std</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'media:',
          '0         8357.597067',
          '1        10131.527778',
          '2         9664.642322',
          '3         8435.029078',
          '4         7567.436111',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;...',
          '16995    12806.408567',
          '16996     9276.770878',
          '16997    12049.507922',
          '16998    10082.053300',
          '16999    10863.022744',
          'Length: 17000, dtype: float64',
          'desviación estandar:',
          '0        22026.612445',
          '1        26352.939272',
          '2        28514.316588',
          '3        24366.754747',
          '4        21730.014569',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;...',
          '16995    36979.676899',
          '16996    26158.006771',
          '16997    34342.876792',
          '16998    28408.152329',
          '16999    31407.119788',
          'Length: 17000, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Otra cosa útil que se puede obtener de los <code>DataFrame</code>s es, por ejemplo, el número de veces que se repite cada ítem de una columna</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span><span class="p">[</span><span class="s2">&quot;total_rooms&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '1582.0     16',
          '1527.0     15',
          '1717.0     14',
          '1471.0     14',
          '1703.0     14',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;..',
          '157.0       1',
          '2760.0      1',
          '458.0       1',
          '10239.0     1',
          '4068.0      1',
          'Name: total_rooms, Length: 5533, dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por ejemplo, podemos ver que hay un total de 16 casas con 1582 habitaciones.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.8. Memoria usada">4.8. Memoria usada<a class="anchor-link" href="#4.8. Memoria usada"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 25" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver la memoria que usa el DataFrame</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">memory_usage</span><span class="p">(</span><span class="n">deep</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Index                    128',
          'longitude             136000',
          'latitude              136000',
          'housing_median_age    136000',
          'total_rooms           136000',
          'total_bedrooms        136000',
          'population            136000',
          'households            136000',
          'median_income         136000',
          'median_house_value    136000',
          'dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="5. Adicion de datos">5. Adición de datos<a class="anchor-link" href="#5. Adicion de datos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 26" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.1. Adicion de columnas">5.1. Adición de columnas<a class="anchor-link" href="#5.1. Adicion de columnas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 27" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden añadir columnas fácilmente como operaciones de otras columnas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="s2">&quot;uno&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">]),</span>',
      '<span class="w">    </span><span class="s2">&quot;dos&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">])</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;tres&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;uno&quot;</span><span class="p">]</span> <span class="o">+</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;dos&quot;</span><span class="p">]</span>',
      '<span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;flag&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;tres&quot;</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mf">7.0</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno  dos  tres   flag',
          '0  1.0  4.0   5.0  False',
          '1  2.0  5.0   7.0  False',
          '2  3.0  6.0   9.0   True',
          '3  NaN  7.0   NaN  False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>También se pueden añadir columnas indicando qué valor tendrán todos sus items</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;constante&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mf">8.0</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno  dos  tres   flag  constante',
          '0  1.0  4.0   5.0  False        8.0',
          '1  2.0  5.0   7.0  False        8.0',
          '2  3.0  6.0   9.0   True        8.0',
          '3  NaN  7.0   NaN  False        8.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se añade una <code>Serie</code> que no tiene el mismo número de índices que el <code>DataFrame</code>, esta se ajustará al número de índices del <code>DataFrame</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;Menos indices&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;uno&quot;</span><span class="p">][:</span><span class="mi">2</span><span class="p">]</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno  dos  tres   flag  constante  Menos indices',
          '0  1.0  4.0   5.0  False        8.0            1.0',
          '1  2.0  5.0   7.0  False        8.0            2.0',
          '2  3.0  6.0   9.0   True        8.0            NaN',
          '3  NaN  7.0   NaN  False        8.0            NaN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Con los métodos anteriores la columna se añadía al final, pero si se quiere añadir la columna en una posición determinada se puede usar el método <code>insert()</code>.</p>
      <p>Por ejemplo, si se quiere añadir una columna en la posición 3 (teniendo en cuenta que se empieza a contar desde la posición 0), que el nombre de la columna sea *columna insertada* y que su valor sea el doble del de la columna *tres*, se haría de la siguiente manera</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s2">&quot;columna insertada&quot;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;tres&quot;</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno  dos  tres  columna insertada   flag  constante  Menos indices',
          '0  1.0  4.0   5.0               10.0  False        8.0            1.0',
          '1  2.0  5.0   7.0               14.0  False        8.0            2.0',
          '2  3.0  6.0   9.0               18.0   True        8.0            NaN',
          '3  NaN  7.0   NaN                NaN  False        8.0            NaN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se quiere añadir más de una columna por comando, se puede usar el método <code>assign()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">assign</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">columna_asignada1</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;uno&quot;</span><span class="p">]</span> <span class="o">*</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;tres&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="n">columna_asignada2</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;dos&quot;</span><span class="p">]</span> <span class="o">*</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;tres&quot;</span><span class="p">],</span>',
      '<span class="w">    </span><span class="p">)</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno  dos  tres  ...  Menos indices  columna_asignada1  columna_asignada2',
          '0  1.0  4.0   5.0  ...            1.0                5.0               20.0',
          '1  2.0  5.0   7.0  ...            2.0               14.0               35.0',
          '2  3.0  6.0   9.0  ...            NaN               27.0               54.0',
          '3  NaN  7.0   NaN  ...            NaN                NaN                NaN',
          '[4 rows x 9 columns]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.2. Adicion de filas">5.2. Adición de filas<a class="anchor-link" href="#5.2. Adicion de filas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 28" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="s2">&quot;uno&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">]),</span>',
      '<span class="w">    </span><span class="s2">&quot;dos&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">])</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno  dos',
          '0  1.0  4.0',
          '1  2.0  5.0',
          '2  3.0  6.0',
          '3  NaN  7.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos añadir una fila al final con el método <code>concat</code> (que veremos más en detalle después)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="s2">&quot;uno&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mf">10.0</span><span class="p">],</span>',
      '<span class="w">    </span><span class="s2">&quot;dos&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mf">20.0</span><span class="p">]</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe</span><span class="p">,</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)])</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;uno   dos',
          '0   1.0   4.0',
          '1   2.0   5.0',
          '2   3.0   6.0',
          '3   NaN   7.0',
          '0  10.0  20.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que se ha añadido la columna al final, pero que tiene el índice cero, así que reordenamos los índices mediante el método <code>reset_index(drop=True)</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;index   uno   dos',
          '0      0   1.0   4.0',
          '1      1   2.0   5.0',
          '2      2   3.0   6.0',
          '3      3   NaN   7.0',
          '4      0  10.0  20.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="6. Eliminacion de datos">6. Eliminación de datos<a class="anchor-link" href="#6. Eliminacion de datos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 29" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.1. Eliminacion de columnas">6.1. Eliminación de columnas<a class="anchor-link" href="#6.1. Eliminacion de columnas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 30" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se puede eliminar una columna determinada mediante el método <code>pop()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s2">&quot;constante&quot;</span><span class="p">)</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno  dos  tres  ...  Menos indices  columna_asignada1  columna_asignada2',
          '0  1.0  4.0   5.0  ...            1.0                5.0               20.0',
          '1  2.0  5.0   7.0  ...            2.0               14.0               35.0',
          '2  3.0  6.0   9.0  ...            NaN               27.0               54.0',
          '3  NaN  7.0   NaN  ...            NaN                NaN                NaN',
          '[4 rows x 8 columns]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O mediante <code>del</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">del</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;flag&quot;</span><span class="p">]</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno  dos  tres  ...  Menos indices  columna_asignada1  columna_asignada2',
          '0  1.0  4.0   5.0  ...            1.0                5.0               20.0',
          '1  2.0  5.0   7.0  ...            2.0               14.0               35.0',
          '2  3.0  6.0   9.0  ...            NaN               27.0               54.0',
          '3  NaN  7.0   NaN  ...            NaN                NaN                NaN',
          '[4 rows x 7 columns]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.1. Eliminacion de filas">6.1. Eliminación de filas<a class="anchor-link" href="#6.1. Eliminacion de filas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 31" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="s2">&quot;uno&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span> <span class="mf">8.0</span><span class="p">,</span> <span class="mf">9.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">]),</span>',
      '<span class="w">    </span><span class="s2">&quot;dos&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">11.0</span><span class="p">,</span> <span class="mf">12.0</span><span class="p">,</span> <span class="mf">13.0</span><span class="p">,</span> <span class="mf">14.0</span><span class="p">,</span> <span class="mf">15.0</span><span class="p">,</span> <span class="mf">16.0</span><span class="p">,</span> <span class="mf">17.0</span><span class="p">,</span> <span class="mf">18.0</span><span class="p">,</span> <span class="mf">19.0</span><span class="p">,</span> <span class="mf">20.0</span><span class="p">]),</span>',
      '<span class="w">    </span><span class="s2">&quot;tres&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">21.0</span><span class="p">,</span> <span class="mf">22.0</span><span class="p">,</span> <span class="mf">23.0</span><span class="p">,</span> <span class="mf">24.0</span><span class="p">,</span> <span class="mf">25.0</span><span class="p">,</span> <span class="mf">26.0</span><span class="p">,</span> <span class="mf">27.0</span><span class="p">,</span> <span class="mf">28.0</span><span class="p">,</span> <span class="mf">29.0</span><span class="p">,</span> <span class="mf">30.0</span><span class="p">])</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno   dos  tres',
          '0  1.0  11.0  21.0',
          '1  2.0  12.0  22.0',
          '2  3.0  13.0  23.0',
          '3  4.0  14.0  24.0',
          '4  5.0  15.0  25.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos eliminar una fila, podemos usar el método <code>drop</code>, especificando su posición. Por ejemplo, si queremos eliminar la fila de la posición 1</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;uno   dos  tres',
          '0   1.0  11.0  21.0',
          '2   3.0  13.0  23.0',
          '3   4.0  14.0  24.0',
          '4   5.0  15.0  25.0',
          '5   6.0  16.0  26.0',
          '6   7.0  17.0  27.0',
          '7   8.0  18.0  28.0',
          '8   9.0  19.0  29.0',
          '9  10.0  20.0  30.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos eliminar la última fila</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">dataframe</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;uno   dos  tres',
          '0   1.0  11.0  21.0',
          '2   3.0  13.0  23.0',
          '3   4.0  14.0  24.0',
          '4   5.0  15.0  25.0',
          '5   6.0  16.0  26.0',
          '6   7.0  17.0  27.0',
          '7   8.0  18.0  28.0',
          '9  10.0  20.0  30.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si lo que queremos es eliminar un rango de filas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;uno   dos  tres',
          '0   1.0  11.0  21.0',
          '5   6.0  16.0  26.0',
          '6   7.0  17.0  27.0',
          '7   8.0  18.0  28.0',
          '9  10.0  20.0  30.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si lo que queremos es eliminar un conjunto de filas determinado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">drop</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">])</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno   dos  tres',
          '0  1.0  11.0  21.0',
          '6  7.0  17.0  27.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Al igual que cuando añadimos filas, vemos que se han eliminado algunos índices, así que reordenamos los índices mediante el método <code>reset_index(drop=True)</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno   dos  tres',
          '0  1.0  11.0  21.0',
          '1  7.0  17.0  27.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="7. Operaciones sobre DataFrames">7. Operaciones sobre DataFrames<a class="anchor-link" href="#7. Operaciones sobre DataFrames"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 32" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden realizar operaciones sobre los <code>DataFrame</code>s al igual que se puede hacer con Numpy</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="s2">&quot;uno&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span> <span class="mf">8.0</span><span class="p">,</span> <span class="mf">9.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">]),</span>',
      '<span class="w">    </span><span class="s2">&quot;dos&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">11.0</span><span class="p">,</span> <span class="mf">12.0</span><span class="p">,</span> <span class="mf">13.0</span><span class="p">,</span> <span class="mf">14.0</span><span class="p">,</span> <span class="mf">15.0</span><span class="p">,</span> <span class="mf">16.0</span><span class="p">,</span> <span class="mf">17.0</span><span class="p">,</span> <span class="mf">18.0</span><span class="p">,</span> <span class="mf">19.0</span><span class="p">,</span> <span class="mf">20.0</span><span class="p">]),</span>',
      '<span class="w">    </span><span class="s2">&quot;tres&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">21.0</span><span class="p">,</span> <span class="mf">22.0</span><span class="p">,</span> <span class="mf">23.0</span><span class="p">,</span> <span class="mf">24.0</span><span class="p">,</span> <span class="mf">25.0</span><span class="p">,</span> <span class="mf">26.0</span><span class="p">,</span> <span class="mf">27.0</span><span class="p">,</span> <span class="mf">28.0</span><span class="p">,</span> <span class="mf">29.0</span><span class="p">,</span> <span class="mf">30.0</span><span class="p">])</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno   dos  tres',
          '0  1.0  11.0  21.0',
          '1  2.0  12.0  22.0',
          '2  3.0  13.0  23.0',
          '3  4.0  14.0  24.0',
          '4  5.0  15.0  25.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="p">[</span> <span class="p">[</span><span class="s2">&quot;uno&quot;</span><span class="p">,</span> <span class="s2">&quot;dos&quot;</span><span class="p">,</span> <span class="s2">&quot;tres&quot;</span><span class="p">]</span> <span class="p">]</span> <span class="o">*</span> <span class="mi">2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;uno   dos  tres',
          '0   2.0  22.0  42.0',
          '1   4.0  24.0  44.0',
          '2   6.0  26.0  46.0',
          '3   8.0  28.0  48.0',
          '4  10.0  30.0  50.0',
          '5  12.0  32.0  52.0',
          '6  14.0  34.0  54.0',
          '7  16.0  36.0  56.0',
          '8  18.0  38.0  58.0',
          '9  20.0  40.0  60.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">dataframe</span><span class="p">[</span> <span class="p">[</span><span class="s2">&quot;uno&quot;</span><span class="p">,</span> <span class="s2">&quot;dos&quot;</span><span class="p">,</span> <span class="s2">&quot;tres&quot;</span><span class="p">]</span> <span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;uno           dos          tres',
          '0      2.718282  5.987414e+04  1.318816e+09',
          '1      7.389056  1.627548e+05  3.584913e+09',
          '2     20.085537  4.424134e+05  9.744803e+09',
          '3     54.598150  1.202604e+06  2.648912e+10',
          '4    148.413159  3.269017e+06  7.200490e+10',
          '5    403.428793  8.886111e+06  1.957296e+11',
          '6   1096.633158  2.415495e+07  5.320482e+11',
          '7   2980.957987  6.565997e+07  1.446257e+12',
          '8   8103.083928  1.784823e+08  3.931334e+12',
          '9  22026.465795  4.851652e+08  1.068647e+13',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se quiere realizar operaciones más complejas se puede utilizar el método <code>apply()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">max</span><span class="p">()</span> <span class="o">-</span> <span class="n">x</span><span class="o">.</span><span class="n">min</span><span class="p">())</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'uno     9.0',
          'dos     9.0',
          'tres    9.0',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se ha aplicado una función <code>lambda</code> porque es una función sencilla, pero en caso de querer aplicar funciones más complejas, las podemos definir y aplicar.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">funcion</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">10</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="mi">5</span><span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">elif</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">20</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">tan</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">log10</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">log2</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
      '<span class="w">    </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">funcion</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'uno     8102.277265',
          'dos     8102.277265',
          'tres    8102.277265',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Utilizar el método <code>apply</code> en un DataFrame es mucho más rápido que hacer un <code>for</code> por cada una de las líneas y realizar la operación</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&quot;https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv&quot;</span><span class="p">)</span>',
      '<span class="n">california_housing_train</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\',
          '0    -114.31     34.19                15.0       5612.0          1283.0',
          '1    -114.47     34.40                19.0       7650.0          1901.0',
          '2    -114.56     33.69                17.0        720.0           174.0',
          '3    -114.57     33.64                14.0       1501.0           337.0',
          '4    -114.57     33.57                20.0       1454.0           326.0',
          '&#x20;&#x20;&#x20;population  households  median_income  median_house_value',
          '0      1015.0       472.0         1.4936             66900.0',
          '1      1129.0       463.0         1.8200             80100.0',
          '2       333.0       117.0         1.6509             85700.0',
          '3       515.0       226.0         3.1917             73400.0',
          '4       624.0       262.0         1.9250             65500.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a calcular el porcentaje de dormitorios del total de habitaciones</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span><span class="p">[</span><span class="s2">&quot;percent_bedrooms&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="o">%</span><span class="n">time</span> <span class="n">california_housing_train</span><span class="p">[</span><span class="s2">&quot;percent_bedrooms&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">california_housing_train</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="s2">&quot;total_bedrooms&quot;</span><span class="p">]</span> <span class="o">/</span> <span class="n">x</span><span class="p">[</span><span class="s2">&quot;total_rooms&quot;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="n">california_housing_train</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'CPU times: user 309 ms, sys: 86 µs, total: 309 ms',
          'Wall time: 309 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\',
          '0    -114.31     34.19                15.0       5612.0          1283.0',
          '1    -114.47     34.40                19.0       7650.0          1901.0',
          '2    -114.56     33.69                17.0        720.0           174.0',
          '3    -114.57     33.64                14.0       1501.0           337.0',
          '4    -114.57     33.57                20.0       1454.0           326.0',
          '&#x20;&#x20;&#x20;population  households  median_income  median_house_value  percent_bedrooms',
          '0      1015.0       472.0         1.4936             66900.0          0.228617',
          '1      1129.0       463.0         1.8200             80100.0          0.248497',
          '2       333.0       117.0         1.6509             85700.0          0.241667',
          '3       515.0       226.0         3.1917             73400.0          0.224517',
          '4       624.0       262.0         1.9250             65500.0          0.224209',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span><span class="p">[</span><span class="s2">&quot;percent_bedrooms&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>',
      '<span class="o">%</span><span class="n">time</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">california_housing_train</span><span class="p">)):</span> <span class="n">california_housing_train</span><span class="p">[</span><span class="s2">&quot;percent_bedrooms&quot;</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">california_housing_train</span><span class="p">[</span><span class="s2">&quot;total_bedrooms&quot;</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="n">california_housing_train</span><span class="p">[</span><span class="s2">&quot;total_rooms&quot;</span><span class="p">][</span><span class="n">i</span><span class="p">]</span>',
      '<span class="n">california_housing_train</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '/home/wallabot/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning:',
          'A value is trying to be set on a copy of a slice from a DataFrame',
          'See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy',
          '&#x20;&#x20;&quot;&quot;&quot;Entry point for launching an IPython kernel.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'CPU times: user 1.72 s, sys: 12 ms, total: 1.73 s',
          'Wall time: 1.72 s',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\',
          '0    -114.31     34.19                15.0       5612.0          1283.0',
          '1    -114.47     34.40                19.0       7650.0          1901.0',
          '2    -114.56     33.69                17.0        720.0           174.0',
          '3    -114.57     33.64                14.0       1501.0           337.0',
          '4    -114.57     33.57                20.0       1454.0           326.0',
          '&#x20;&#x20;&#x20;population  households  median_income  median_house_value percent_bedrooms',
          '0      1015.0       472.0         1.4936             66900.0         0.228617',
          '1      1129.0       463.0         1.8200             80100.0         0.248497',
          '2       333.0       117.0         1.6509             85700.0         0.241667',
          '3       515.0       226.0         3.1917             73400.0         0.224517',
          '4       624.0       262.0         1.9250             65500.0         0.224209',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Con la función <code>lambda</code> ha tardado unos 300 ms, mientras que con el bucle <code>for</code> ha tardado más de 1 segundo</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="8. Transpuesta">8. Transpuesta<a class="anchor-link" href="#8. Transpuesta"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 33" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se puede hacer la transpuesta de un <code>DataFrame</code> mediante el método <code>T</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="s2">&quot;uno&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;fila a&quot;</span><span class="p">,</span> <span class="s2">&quot;fila b&quot;</span><span class="p">,</span> <span class="s2">&quot;fila c&quot;</span><span class="p">]),</span>',
      '<span class="w">    </span><span class="s2">&quot;dos&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;fila a&quot;</span><span class="p">,</span> <span class="s2">&quot;fila b&quot;</span><span class="p">,</span> <span class="s2">&quot;fila c&quot;</span><span class="p">])</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;tres&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;uno&quot;</span><span class="p">]</span> <span class="o">+</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;dos&quot;</span><span class="p">]</span>',
      '<span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;flag&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;tres&quot;</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mf">7.0</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span><span class="o">.</span><span class="n">T</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;fila a fila b fila c',
          'uno       1      2      3',
          'dos       4      5      6',
          'tres      5      7      9',
          'flag  False  False   True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="9. Conversion a Numpy">9. Conversión a Numpy<a class="anchor-link" href="#9. Conversion a Numpy"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 34" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se quiere convertir una <code>Serie</code> o <code>DataFrame</code> a NumPy se puede usar el método <code>to_numpy()</code> o usar la función <code>np.asarray()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="s2">&quot;uno&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;fila a&quot;</span><span class="p">,</span> <span class="s2">&quot;fila b&quot;</span><span class="p">,</span> <span class="s2">&quot;fila c&quot;</span><span class="p">]),</span>',
      '<span class="w">    </span><span class="s2">&quot;dos&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;fila a&quot;</span><span class="p">,</span> <span class="s2">&quot;fila b&quot;</span><span class="p">,</span> <span class="s2">&quot;fila c&quot;</span><span class="p">])</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;tres&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;uno&quot;</span><span class="p">]</span> <span class="o">+</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;dos&quot;</span><span class="p">]</span>',
      '<span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;flag&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;tres&quot;</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mf">7.0</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;uno  dos  tres   flag',
          'fila a  1.0  4.0   5.0  False',
          'fila b  2.0  5.0   7.0  False',
          'fila c  3.0  6.0   9.0   True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">matriz_np</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span>',
      '<span class="n">matriz_np</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'array([[1.0, 4.0, 5.0, False],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[2.0, 5.0, 7.0, False],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[3.0, 6.0, 9.0, True]], dtype=object)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">matriz_np</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">dataframe</span><span class="p">)</span>',
      '<span class="n">matriz_np</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'array([[1.0, 4.0, 5.0, False],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[2.0, 5.0, 7.0, False],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[3.0, 6.0, 9.0, True]], dtype=object)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Este ejemplo no es el más indicado, ya que mezcla números con booleanos, y como ya explicamos en el anterior post <a href="https://maximofn.com/calculo-matricial-con-numpy/">Cálculo matricial con NumPy</a>, todos los elementos de un <code>ndarray</code> tienen que ser del mismo tipo.</p>
      <p>En este caso estamos mezclando números con booleanos, por lo que para solucionarlo NumPy los convierte todos a objetos</p>
      <p>Para solucionar esto nos quedamos solo con los números y los convertimos a un <code>ndarray</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">matriz_np</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span> <span class="p">[</span><span class="s2">&quot;uno&quot;</span><span class="p">,</span> <span class="s2">&quot;dos&quot;</span><span class="p">,</span> <span class="s2">&quot;tres&quot;</span><span class="p">]</span> <span class="p">]</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span>',
      '<span class="n">matriz_np</span><span class="p">,</span> <span class="n">matriz_np</span><span class="o">.</span><span class="n">dtype</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(array([[1., 4., 5.],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[2., 5., 7.],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[3., 6., 9.]]), dtype(&#x27;float64&#x27;))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora se puede ver que se ha creado un <code>ndarray</code> donde todos los datos son de tipo <code>float</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="10. Lectura de datos de fuentes externas">10. Lectura de datos de fuentes externas<a class="anchor-link" href="#10. Lectura de datos de fuentes externas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 35" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Una de las mayores fortalezas de Pandas es poder leer datos de archivos, por lo que no es necesario crear un <code>DataFrame</code> con los datos que se quieren procesar, sino que se pueden leer de un archivo</p>
      <p>De la misma manera que se pueden crear <code>DataFrame</code>s de archivos externos, también se pueden guardar <code>DataFrame</code>s en archivos, para así crearte tu propio set de datos, configurarlo de la manera que quieras y guardarlo en un archivo para poder usarlo más adelante</p>
      <p>En la siguiente tabla se muestran las funciones para leer y escribir archivos de distintos formatos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <table>
        <thead>
          <tr>
            <th>Formato</th>
            <th>Tipo de archivo</th>
            <th>Función de lectura</th>
            <th>Función de escritura</th>
            <th></th>
            <th>---</th>
            <th>---</th>
            <th>---</th>
            <th>---</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>texto</td>
            <td>Fixed-Width Text File</td>
            <td>[read_fwf](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-fwf-reader)</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>texto</td>
            <td>JSON</td>
            <td>[read_json](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-json-reader)</td>
            <td>[to_json](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-json-writer)</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>texto</td>
            <td>HTML</td>
            <td>[read_html](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-read-html)</td>
            <td>[to_html](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-html)</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>texto</td>
            <td>Local clipboard</td>
            <td>[read_clipboard](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-clipboard)</td>
            <td>[to_clipboard](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-clipboard)</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>binary</td>
            <td>MS Excel</td>
            <td>[read_excel](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-excel-reader)</td>
            <td>[to_excel](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-excel-writer)</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>binary</td>
            <td>OpenDocument</td>
            <td>[read_excel](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-ods)</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>binary</td>
            <td>HDF5 Format</td>
            <td>[read_hdf](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-hdf5)</td>
            <td>[to_hdf](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-hdf5)</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>binary</td>
            <td>Feather Format</td>
            <td>[read_feather](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-feather)</td>
            <td>[to_feather](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-feather)</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>binary</td>
            <td>Parquet Format</td>
            <td>[read_parquet](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-parquet)</td>
            <td>[to_parquet](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-parquet)</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>binary</td>
            <td>ORC Format</td>
            <td>[read_orc](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-orc)</td>
            <td></td>
            <td>binary</td>
            <td>Msgpack</td>
            <td>[read_msgpack](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-msgpack)</td>
            <td>[to_msgpack](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-msgpack)</td>
            <td></td>
          </tr>
          <tr>
            <td>binary</td>
            <td>Stata</td>
            <td>[read_stata](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-stata-reader)</td>
            <td>[to_stata](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-stata-writer)</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>binary</td>
            <td>SAS</td>
            <td>[read_sas](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sas-reader)</td>
            <td></td>
            <td>binary</td>
            <td>SPSS</td>
            <td>[read_spss](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-spss-reader)</td>
            <td></td>
            <td>binary</td>
          </tr>
          <tr>
            <td>SQL</td>
            <td>SQL</td>
            <td>[read_sql](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sql)</td>
            <td>[to_sql](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sql)</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>SQL</td>
            <td>Google BigQuery</td>
            <td>[read_gbq](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-bigquery)</td>
            <td>[to_gbq](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-bigquery)</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
        </tbody>
      </table>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="11. Indexacion en DataFrames">11. Indexación en DataFrames<a class="anchor-link" href="#11. Indexacion en DataFrames"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 36" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hay muchas maneras de indexar en los <code>DataFrame</code>s.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">fechas</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s1">&#39;1/1/2000&#39;</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">fechas</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A         B         C         D',
          '2000-01-01 -0.869298 -0.210502  0.477938  0.912121',
          '2000-01-02 -0.502425 -1.897287 -0.084122 -1.203818',
          '2000-01-03 -0.204297  0.711485 -1.271802 -0.138120',
          '2000-01-04  1.512985  0.726718  0.960902  0.433124',
          '2000-01-05  0.724005 -2.127668  0.674417 -0.297808',
          '2000-01-06 -0.217175 -0.621172  0.668163  0.170576',
          '2000-01-07  0.352484  0.260515 -1.576033  1.263213',
          '2000-01-08 -0.032928 -0.648313 -0.622509  0.231683',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.1. Indexacion de columnas">11.1. Indexación de columnas<a class="anchor-link" href="#11.1. Indexacion de columnas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 37" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para seleccionar columnas dentro de un <code>DataFrame</code> lo podemos hacer seleccionando la columna entre corchetes <code>[]</code>, o indicando la columna como si fuera un atributo del <code>DataFrame</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2000-01-01    0.813153',
          '2000-01-02   -0.244584',
          '2000-01-03    0.125729',
          '2000-01-04    0.352275',
          '2000-01-05   -2.050976',
          '2000-01-06   -0.312296',
          '2000-01-07    0.897837',
          '2000-01-08    0.271403',
          'Freq: D, Name: A, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">A</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2000-01-01    0.813153',
          '2000-01-02   -0.244584',
          '2000-01-03    0.125729',
          '2000-01-04    0.352275',
          '2000-01-05   -2.050976',
          '2000-01-06   -0.312296',
          '2000-01-07    0.897837',
          '2000-01-08    0.271403',
          'Freq: D, Name: A, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se quieren algunas filas determinadas se pasan mediante una lista</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="p">[</span> <span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">]</span> <span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A         B',
          '2000-01-01 -0.341962  0.639913',
          '2000-01-02  0.507258 -0.942036',
          '2000-01-03 -1.463557  1.041023',
          '2000-01-04  1.781058 -1.849352',
          '2000-01-05  0.318897 -0.229218',
          '2000-01-06  0.362064 -0.193479',
          '2000-01-07 -0.084632 -0.112474',
          '2000-01-08  0.739424  0.253191',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.2. Indexacion de filas por posiciones">11.2. Indexación de filas por posiciones<a class="anchor-link" href="#11.2. Indexacion de filas por posiciones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 38" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se puede seleccionar un rango de filas de un <code>DataFrame</code> de la siguiente manera</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A         B         C         D',
          '2000-01-01  0.813153 -0.869356  0.934293  0.338644',
          '2000-01-02 -0.244584  0.536352  0.322248  0.238903',
          '2000-01-03  0.125729  2.046910 -0.877466 -0.710034',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se quiere seleccionar una sola fila, hay que indicar un rango de filas que incluya solo a esa. Si, por ejemplo, se quiere seleccionar la fila número 1</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A         B         C         D',
          '2000-01-02 -0.244584  0.536352  0.322248  0.238903',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Otro método para seleccionar una fila por su posición es el método <code>iloc[]</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A         B         C         D',
          '2000-01-01  0.813153 -0.869356  0.934293  0.338644',
          '2000-01-02 -0.244584  0.536352  0.322248  0.238903',
          '2000-01-03  0.125729  2.046910 -0.877466 -0.710034',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se quieren algunas filas determinadas, se pasa una lista con sus posiciones</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span> <span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A         B         C         D',
          '2000-01-01 -0.341962  0.639913  0.765817  0.056692',
          '2000-01-03 -1.463557  1.041023 -1.321715  2.822735',
          '2000-01-05  0.318897 -0.229218 -1.095593 -0.186248',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.3. Indexacion de filas por etiquetas">11.3. Indexación de filas por etiquetas<a class="anchor-link" href="#11.3. Indexacion de filas por etiquetas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 39" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para seleccionar una fila por sus etiquetas podemos usar el método <code>loc[]</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="s1">&#39;2000-01-01&#39;</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'A    0.813153',
          'B   -0.869356',
          'C    0.934293',
          'D    0.338644',
          'Name: 2000-01-01 00:00:00, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se quiere seleccionar un rango de filas, podemos indexarlas mediante los dos puntos <code>:</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="s1">&#39;2000-01-01&#39;</span><span class="p">:</span><span class="s1">&#39;2000-01-03&#39;</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A         B         C         D',
          '2000-01-01  0.813153 -0.869356  0.934293  0.338644',
          '2000-01-02 -0.244584  0.536352  0.322248  0.238903',
          '2000-01-03  0.125729  2.046910 -0.877466 -0.710034',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se quieren algunas filas determinadas se pasan mediante una lista</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">[</span><span class="s1">&#39;2000-01-01&#39;</span><span class="p">,</span> <span class="s1">&#39;2000-01-03&#39;</span><span class="p">,</span> <span class="s1">&#39;2000-01-05&#39;</span><span class="p">]</span> <span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A         B         C         D',
          '2000-01-01 -0.341962  0.639913  0.765817  0.056692',
          '2000-01-03 -1.463557  1.041023 -1.321715  2.822735',
          '2000-01-05  0.318897 -0.229218 -1.095593 -0.186248',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.4. Seleccion de una porcion del DataFrame mediante posiciones">11.4. Selección de una porción del DataFrame mediante posiciones<a class="anchor-link" href="#11.4. Seleccion de una porcion del DataFrame mediante posiciones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 40" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A         B',
          '2000-01-01  0.813153 -0.869356',
          '2000-01-02 -0.244584  0.536352',
          '2000-01-03  0.125729  2.046910',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se quieren unas filas y columnas determinadas, se pasan listas con las posiciones deseadas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A         C',
          '2000-01-01 -0.341962  0.765817',
          '2000-01-03 -1.463557 -1.321715',
          '2000-01-05  0.318897 -1.095593',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.5. Seleccion de una porcion del DataFrame mediante etiquetas">11.5. Selección de una porción del DataFrame mediante etiquetas<a class="anchor-link" href="#11.5. Seleccion de una porcion del DataFrame mediante etiquetas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 41" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="s1">&#39;2000-01-01&#39;</span><span class="p">:</span><span class="s1">&#39;2000-01-03&#39;</span><span class="p">,</span> <span class="s1">&#39;A&#39;</span><span class="p">:</span><span class="s1">&#39;B&#39;</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A         B',
          '2000-01-01  0.813153 -0.869356',
          '2000-01-02 -0.244584  0.536352',
          '2000-01-03  0.125729  2.046910',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se quieren algunas filas y columnas determinadas, se pasan listas con las etiquetas deseadas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">[</span><span class="s1">&#39;2000-01-01&#39;</span><span class="p">,</span> <span class="s1">&#39;2000-01-03&#39;</span><span class="p">,</span> <span class="s1">&#39;2000-01-05&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">]</span> <span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A         C',
          '2000-01-01 -0.341962  0.765817',
          '2000-01-03 -1.463557 -1.321715',
          '2000-01-05  0.318897 -1.095593',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.6. Indexacion por funcion lambda">11.6. Indexación por función lambda<a class="anchor-link" href="#11.6. Indexacion por funcion lambda"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 42" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden seleccionar datos de un <code>DataFrame</code> que cumplan una condición dada por una función <code>lambda</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="k">lambda</span> <span class="n">dataframe</span><span class="p">:</span><span class="mi">2</span><span class="o">*</span><span class="n">dataframe</span><span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">]</span><span class="o">+</span><span class="mi">5</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">dataframe</span><span class="p">[</span><span class="s1">&#39;B&#39;</span><span class="p">])</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mf">0.2</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A         B         C         D',
          '2000-01-01 -0.869298 -0.210502  0.477938  0.912121',
          '2000-01-03 -0.204297  0.711485 -1.271802 -0.138120',
          '2000-01-04  1.512985  0.726718  0.960902  0.433124',
          '2000-01-05  0.724005 -2.127668  0.674417 -0.297808',
          '2000-01-06 -0.217175 -0.621172  0.668163  0.170576',
          '2000-01-07  0.352484  0.260515 -1.576033  1.263213',
          '2000-01-08 -0.032928 -0.648313 -0.622509  0.231683',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver, esta forma de indexación es muy potente</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.7. Indexacion condicional">11.7. Indexación condicional<a class="anchor-link" href="#11.7. Indexacion condicional"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 43" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si no necesitamos funciones complejas para indexar, sino solo condicionales, podemos hacer</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="p">[</span><span class="n">dataframe</span><span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">]</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mf">0.2</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A         B         C         D',
          '2000-01-04  1.512985  0.726718  0.960902  0.433124',
          '2000-01-05  0.724005 -2.127668  0.674417 -0.297808',
          '2000-01-07  0.352484  0.260515 -1.576033  1.263213',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos hacer múltiples condiciones</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="p">[(</span><span class="n">dataframe</span><span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">]</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mf">0.2</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">dataframe</span><span class="p">[</span><span class="s1">&#39;B&#39;</span><span class="p">]</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mf">0.2</span><span class="p">)]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A         B         C         D',
          '2000-01-04  1.512985  0.726718  0.960902  0.433124',
          '2000-01-07  0.352484  0.260515 -1.576033  1.263213',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.8. Indexacion aleatoria">11.8. Indexación aleatoria<a class="anchor-link" href="#11.8. Indexacion aleatoria"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 44" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mediante el método <code>sample()</code> obtendremos una fila aleatoria del <code>DataFrame</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">sample</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A         B         C         D',
          '2000-01-06 -0.312296  0.129097 -0.991085  1.704535',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos más de una muestra lo indicamos con el atributo <code>n</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A         B         C         D',
          '2000-01-08  0.271403  1.527116  0.144970  1.175728',
          '2000-01-01  0.813153 -0.869356  0.934293  0.338644',
          '2000-01-03  0.125729  2.046910 -0.877466 -0.710034',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si lo que se quiere son columnas aleatorias, hay que indicarlo mediante <code>axis=1</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;D',
          '2000-01-01  0.338644',
          '2000-01-02  0.238903',
          '2000-01-03 -0.710034',
          '2000-01-04  0.504410',
          '2000-01-05 -1.601926',
          '2000-01-06  1.704535',
          '2000-01-07 -0.584860',
          '2000-01-08  1.175728',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se quiere un único ítem del <code>DataFrame</code> hay que llamar dos veces al método <code>sample()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">sample</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;D',
          '2000-01-05 -1.601926',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="12. Union de DataFrames">12. Unión de DataFrames<a class="anchor-link" href="#12. Union de DataFrames"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 45" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="12.1. Concatenacion de DataFrames">12.1. Concatenación de DataFrames<a class="anchor-link" href="#12.1. Concatenacion de DataFrames"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 46" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para concatenar varios <code>DataFrame</code>s usamos el método <code>concat()</code>, donde se le pasará una lista con los <code>DataFrame</code>s que se quieren unir</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;A&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;A0&quot;</span><span class="p">,</span> <span class="s2">&quot;A1&quot;</span><span class="p">,</span> <span class="s2">&quot;A2&quot;</span><span class="p">,</span> <span class="s2">&quot;A3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;B&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;B0&quot;</span><span class="p">,</span> <span class="s2">&quot;B1&quot;</span><span class="p">,</span> <span class="s2">&quot;B2&quot;</span><span class="p">,</span> <span class="s2">&quot;B3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;C&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;C0&quot;</span><span class="p">,</span> <span class="s2">&quot;C1&quot;</span><span class="p">,</span> <span class="s2">&quot;C2&quot;</span><span class="p">,</span> <span class="s2">&quot;C3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;D&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;D0&quot;</span><span class="p">,</span> <span class="s2">&quot;D1&quot;</span><span class="p">,</span> <span class="s2">&quot;D2&quot;</span><span class="p">,</span> <span class="s2">&quot;D3&quot;</span><span class="p">],</span>',
      '<span class="w">     </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;A&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;A4&quot;</span><span class="p">,</span> <span class="s2">&quot;A5&quot;</span><span class="p">,</span> <span class="s2">&quot;A6&quot;</span><span class="p">,</span> <span class="s2">&quot;A7&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;B&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;B4&quot;</span><span class="p">,</span> <span class="s2">&quot;B5&quot;</span><span class="p">,</span> <span class="s2">&quot;B6&quot;</span><span class="p">,</span> <span class="s2">&quot;B7&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;C&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;C4&quot;</span><span class="p">,</span> <span class="s2">&quot;C5&quot;</span><span class="p">,</span> <span class="s2">&quot;C6&quot;</span><span class="p">,</span> <span class="s2">&quot;C7&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;D&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;D4&quot;</span><span class="p">,</span> <span class="s2">&quot;D5&quot;</span><span class="p">,</span> <span class="s2">&quot;D6&quot;</span><span class="p">,</span> <span class="s2">&quot;D7&quot;</span><span class="p">],</span>',
      '<span class="w">     </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe3</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;A&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;A8&quot;</span><span class="p">,</span> <span class="s2">&quot;A9&quot;</span><span class="p">,</span> <span class="s2">&quot;A10&quot;</span><span class="p">,</span> <span class="s2">&quot;A11&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;B&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;B8&quot;</span><span class="p">,</span> <span class="s2">&quot;B9&quot;</span><span class="p">,</span> <span class="s2">&quot;B10&quot;</span><span class="p">,</span> <span class="s2">&quot;B11&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;C&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;C8&quot;</span><span class="p">,</span> <span class="s2">&quot;C9&quot;</span><span class="p">,</span> <span class="s2">&quot;C10&quot;</span><span class="p">,</span> <span class="s2">&quot;C11&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;D&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;D8&quot;</span><span class="p">,</span> <span class="s2">&quot;D9&quot;</span><span class="p">,</span> <span class="s2">&quot;D10&quot;</span><span class="p">,</span> <span class="s2">&quot;D11&quot;</span><span class="p">],</span>',
      '<span class="w">     </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe1</span><span class="p">,</span> <span class="n">dataframe2</span><span class="p">,</span> <span class="n">dataframe3</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe1:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe2:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe3:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe3</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">dataframe:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '&#x20;&#x20;&#x20;&#x20;A   B   C   D',
          '0  A0  B0  C0  D0',
          '1  A1  B1  C1  D1',
          '2  A2  B2  C2  D2',
          '3  A3  B3  C3  D3',
          'dataframe2:',
          '&#x20;&#x20;&#x20;&#x20;A   B   C   D',
          '0  A4  B4  C4  D4',
          '1  A5  B5  C5  D5',
          '2  A6  B6  C6  D6',
          '3  A7  B7  C7  D7',
          'dataframe3:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;A    B    C    D',
          '0   A8   B8   C8   D8',
          '1   A9   B9   C9   D9',
          '2  A10  B10  C10  D10',
          '3  A11  B11  C11  D11',
          'dataframe:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;A    B    C    D',
          '0   A0   B0   C0   D0',
          '1   A1   B1   C1   D1',
          '2   A2   B2   C2   D2',
          '3   A3   B3   C3   D3',
          '0   A4   B4   C4   D4',
          '1   A5   B5   C5   D5',
          '2   A6   B6   C6   D6',
          '3   A7   B7   C7   D7',
          '0   A8   B8   C8   D8',
          '1   A9   B9   C9   D9',
          '2  A10  B10  C10  D10',
          '3  A11  B11  C11  D11',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver, los índices <code>0</code>, <code>1</code>, <code>2</code> y <code>3</code> se repiten, porque cada dataframe tiene esos índices. Para que no ocurra esto, hay que usar el parámetro <code>ignore_index=True</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe1</span><span class="p">,</span> <span class="n">dataframe2</span><span class="p">,</span> <span class="n">dataframe3</span><span class="p">],</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe1:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe2:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe3:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe3</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">dataframe:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '&#x20;&#x20;&#x20;&#x20;A   B   C   D',
          '0  A0  B0  C0  D0',
          '1  A1  B1  C1  D1',
          '2  A2  B2  C2  D2',
          '3  A3  B3  C3  D3',
          'dataframe2:',
          '&#x20;&#x20;&#x20;&#x20;A   B   C   D',
          '0  A4  B4  C4  D4',
          '1  A5  B5  C5  D5',
          '2  A6  B6  C6  D6',
          '3  A7  B7  C7  D7',
          'dataframe3:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;A    B    C    D',
          '0   A8   B8   C8   D8',
          '1   A9   B9   C9   D9',
          '2  A10  B10  C10  D10',
          '3  A11  B11  C11  D11',
          'dataframe:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A    B    C    D',
          '0    A0   B0   C0   D0',
          '1    A1   B1   C1   D1',
          '2    A2   B2   C2   D2',
          '3    A3   B3   C3   D3',
          '4    A4   B4   C4   D4',
          '5    A5   B5   C5   D5',
          '6    A6   B6   C6   D6',
          '7    A7   B7   C7   D7',
          '8    A8   B8   C8   D8',
          '9    A9   B9   C9   D9',
          '10  A10  B10  C10  D10',
          '11  A11  B11  C11  D11',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/merging_concat_basic.webp" alt="concat">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se hubiera querido hacer la concatenación a lo largo de las columnas, habría que haber introducido la variable <code>axis=1</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe1</span><span class="p">,</span> <span class="n">dataframe2</span><span class="p">,</span> <span class="n">dataframe3</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe1:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe2:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe3:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe3</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">dataframe:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '&#x20;&#x20;&#x20;&#x20;A   B   C   D',
          '0  A0  B0  C0  D0',
          '1  A1  B1  C1  D1',
          '2  A2  B2  C2  D2',
          '3  A3  B3  C3  D3',
          'dataframe2:',
          '&#x20;&#x20;&#x20;&#x20;A   B   C   D',
          '0  A4  B4  C4  D4',
          '1  A5  B5  C5  D5',
          '2  A6  B6  C6  D6',
          '3  A7  B7  C7  D7',
          'dataframe3:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;A    B    C    D',
          '0   A8   B8   C8   D8',
          '1   A9   B9   C9   D9',
          '2  A10  B10  C10  D10',
          '3  A11  B11  C11  D11',
          'dataframe:',
          '&#x20;&#x20;&#x20;&#x20;A   B   C   D   A   B   C   D    A    B    C    D',
          '0  A0  B0  C0  D0  A4  B4  C4  D4   A8   B8   C8   D8',
          '1  A1  B1  C1  D1  A5  B5  C5  D5   A9   B9   C9   D9',
          '2  A2  B2  C2  D2  A6  B6  C6  D6  A10  B10  C10  D10',
          '3  A3  B3  C3  D3  A7  B7  C7  D7  A11  B11  C11  D11',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="12.1.1. Interseccion de concatenacion">12.1.1. Intersección de concatenación<a class="anchor-link" href="#12.1.1. Interseccion de concatenacion"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 47" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hay dos maneras de hacer la concatenación, cogiendo todos los índices de los <code>DataFrame</code>s o cogiendo solo los que coinciden. Esto se determina mediante la variable <code>join</code>, que admite los valores <code>&#x27;outer&#x27;</code> (por defecto) (coge todos los índices) o <code>&#x27;inner&#x27;</code> (solo los que coinciden)</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Veamos un ejemplo de <code>&#x27;outer&#x27;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;A&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;A0&quot;</span><span class="p">,</span> <span class="s2">&quot;A1&quot;</span><span class="p">,</span> <span class="s2">&quot;A2&quot;</span><span class="p">,</span> <span class="s2">&quot;A3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;B&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;B0&quot;</span><span class="p">,</span> <span class="s2">&quot;B1&quot;</span><span class="p">,</span> <span class="s2">&quot;B2&quot;</span><span class="p">,</span> <span class="s2">&quot;B3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;C&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;C0&quot;</span><span class="p">,</span> <span class="s2">&quot;C1&quot;</span><span class="p">,</span> <span class="s2">&quot;C2&quot;</span><span class="p">,</span> <span class="s2">&quot;C3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;D&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;D0&quot;</span><span class="p">,</span> <span class="s2">&quot;D1&quot;</span><span class="p">,</span> <span class="s2">&quot;D2&quot;</span><span class="p">,</span> <span class="s2">&quot;D3&quot;</span><span class="p">],</span>',
      '<span class="w">     </span><span class="p">},</span>',
      '<span class="w">     </span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe4</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;B&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;B2&quot;</span><span class="p">,</span> <span class="s2">&quot;B3&quot;</span><span class="p">,</span> <span class="s2">&quot;B6&quot;</span><span class="p">,</span> <span class="s2">&quot;B7&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;D&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;D2&quot;</span><span class="p">,</span> <span class="s2">&quot;D3&quot;</span><span class="p">,</span> <span class="s2">&quot;D6&quot;</span><span class="p">,</span> <span class="s2">&quot;D7&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;F&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;F2&quot;</span><span class="p">,</span> <span class="s2">&quot;F3&quot;</span><span class="p">,</span> <span class="s2">&quot;F6&quot;</span><span class="p">,</span> <span class="s2">&quot;F7&quot;</span><span class="p">],</span>',
      '<span class="w">     </span><span class="p">},</span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe1</span><span class="p">,</span> <span class="n">dataframe4</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe1:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe2:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe4</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">dataframe:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '&#x20;&#x20;&#x20;&#x20;A   B   C   D',
          '0  A0  B0  C0  D0',
          '1  A1  B1  C1  D1',
          '2  A2  B2  C2  D2',
          '3  A3  B3  C3  D3',
          'dataframe2:',
          '&#x20;&#x20;&#x20;&#x20;B   D   F',
          '2  B2  D2  F2',
          '3  B3  D3  F3',
          '6  B6  D6  F6',
          '7  B7  D7  F7',
          'dataframe:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;A    B    C    D    B    D    F',
          '0   A0   B0   C0   D0  NaN  NaN  NaN',
          '1   A1   B1   C1   D1  NaN  NaN  NaN',
          '2   A2   B2   C2   D2   B2   D2   F2',
          '3   A3   B3   C3   D3   B3   D3   F3',
          '6  NaN  NaN  NaN  NaN   B6   D6   F6',
          '7  NaN  NaN  NaN  NaN   B7   D7   F7',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/merging_concat_axis1.webp" alt="outlier">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Veamos un ejemplo de <code>&#x27;inner&#x27;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe1</span><span class="p">,</span> <span class="n">dataframe4</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">join</span><span class="o">=</span><span class="s2">&quot;inner&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe1:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe2:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe4</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">dataframe:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '&#x20;&#x20;&#x20;&#x20;A   B   C   D',
          '0  A0  B0  C0  D0',
          '1  A1  B1  C1  D1',
          '2  A2  B2  C2  D2',
          '3  A3  B3  C3  D3',
          'dataframe2:',
          '&#x20;&#x20;&#x20;&#x20;B   D   F',
          '2  B2  D2  F2',
          '3  B3  D3  F3',
          '6  B6  D6  F6',
          '7  B7  D7  F7',
          'dataframe:',
          '&#x20;&#x20;&#x20;&#x20;A   B   C   D   B   D   F',
          '2  A2  B2  C2  D2  B2  D2  F2',
          '3  A3  B3  C3  D3  B3  D3  F3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/merging_concat_axis1_inner.webp" alt="inner">
      </section>
      
      <section class="section-block-markdown-cell">
      <h3>12.2. <code>Merge</code> de DataFrames</h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Antes hemos creado un dataframe nuevo con la unión de varios dataframes, ahora podemos completar un dataframe con otro, para ello usamos <code>merge</code>, pasándole el parámetro <code>on</code>, sobre qué columna queremos que se haga el <code>merge</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;Key&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;K0&quot;</span><span class="p">,</span> <span class="s2">&quot;K1&quot;</span><span class="p">,</span> <span class="s2">&quot;K2&quot;</span><span class="p">,</span> <span class="s2">&quot;K3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;A&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;A0&quot;</span><span class="p">,</span> <span class="s2">&quot;A1&quot;</span><span class="p">,</span> <span class="s2">&quot;A2&quot;</span><span class="p">,</span> <span class="s2">&quot;A3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;B&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;B0&quot;</span><span class="p">,</span> <span class="s2">&quot;B1&quot;</span><span class="p">,</span> <span class="s2">&quot;B2&quot;</span><span class="p">,</span> <span class="s2">&quot;B3&quot;</span><span class="p">],</span>',
      '<span class="w">     </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;Key&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;K0&quot;</span><span class="p">,</span> <span class="s2">&quot;K1&quot;</span><span class="p">,</span> <span class="s2">&quot;K2&quot;</span><span class="p">,</span> <span class="s2">&quot;K3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;C&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;C0&quot;</span><span class="p">,</span> <span class="s2">&quot;C1&quot;</span><span class="p">,</span> <span class="s2">&quot;C2&quot;</span><span class="p">,</span> <span class="s2">&quot;C3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;D&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;D0&quot;</span><span class="p">,</span> <span class="s2">&quot;D1&quot;</span><span class="p">,</span> <span class="s2">&quot;D2&quot;</span><span class="p">,</span> <span class="s2">&quot;D3&quot;</span><span class="p">],</span>',
      '<span class="w">     </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="s2">&quot;Key&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe1:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe2:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">dataframe:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '&#x20;&#x20;Key   A   B',
          '0  K0  A0  B0',
          '1  K1  A1  B1',
          '2  K2  A2  B2',
          '3  K3  A3  B3',
          'dataframe2:',
          '&#x20;&#x20;Key   C   D',
          '0  K0  C0  D0',
          '1  K1  C1  D1',
          '2  K2  C2  D2',
          '3  K3  C3  D3',
          'dataframe:',
          '&#x20;&#x20;Key   A   B   C   D',
          '0  K0  A0  B0  C0  D0',
          '1  K1  A1  B1  C1  D1',
          '2  K2  A2  B2  C2  D2',
          '3  K3  A3  B3  C3  D3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En este caso los dos dataframes tenían una clave que se llamaba igual (<code>Key</code>), pero en el caso de tener dataframes, en los que su clave se llame de otra forma podemos usar los parámetros <code>left_on</code> y <code>right_on</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;Key1&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;K0&quot;</span><span class="p">,</span> <span class="s2">&quot;K1&quot;</span><span class="p">,</span> <span class="s2">&quot;K2&quot;</span><span class="p">,</span> <span class="s2">&quot;K3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;A&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;A0&quot;</span><span class="p">,</span> <span class="s2">&quot;A1&quot;</span><span class="p">,</span> <span class="s2">&quot;A2&quot;</span><span class="p">,</span> <span class="s2">&quot;A3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;B&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;B0&quot;</span><span class="p">,</span> <span class="s2">&quot;B1&quot;</span><span class="p">,</span> <span class="s2">&quot;B2&quot;</span><span class="p">,</span> <span class="s2">&quot;B3&quot;</span><span class="p">],</span>',
      '<span class="w">     </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;Key2&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;K0&quot;</span><span class="p">,</span> <span class="s2">&quot;K1&quot;</span><span class="p">,</span> <span class="s2">&quot;K2&quot;</span><span class="p">,</span> <span class="s2">&quot;K3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;C&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;C0&quot;</span><span class="p">,</span> <span class="s2">&quot;C1&quot;</span><span class="p">,</span> <span class="s2">&quot;C2&quot;</span><span class="p">,</span> <span class="s2">&quot;C3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;D&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;D0&quot;</span><span class="p">,</span> <span class="s2">&quot;D1&quot;</span><span class="p">,</span> <span class="s2">&quot;D2&quot;</span><span class="p">,</span> <span class="s2">&quot;D3&quot;</span><span class="p">],</span>',
      '<span class="w">     </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">&quot;Key1&quot;</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">&quot;Key2&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe1:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe2:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">dataframe:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '&#x20;&#x20;Key1   A   B',
          '0   K0  A0  B0',
          '1   K1  A1  B1',
          '2   K2  A2  B2',
          '3   K3  A3  B3',
          'dataframe2:',
          '&#x20;&#x20;Key2   C   D',
          '0   K0  C0  D0',
          '1   K1  C1  D1',
          '2   K2  C2  D2',
          '3   K3  C3  D3',
          'dataframe:',
          '&#x20;&#x20;Key1   A   B Key2   C   D',
          '0   K0  A0  B0   K0  C0  D0',
          '1   K1  A1  B1   K1  C1  D1',
          '2   K2  A2  B2   K2  C2  D2',
          '3   K3  A3  B3   K3  C3  D3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En el caso en el que una de las claves no coincida, no se hará el <code>merge</code> sobre esa clave</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;Key1&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;K0&quot;</span><span class="p">,</span> <span class="s2">&quot;K1&quot;</span><span class="p">,</span> <span class="s2">&quot;K2&quot;</span><span class="p">,</span> <span class="s2">&quot;K3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;A&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;A0&quot;</span><span class="p">,</span> <span class="s2">&quot;A1&quot;</span><span class="p">,</span> <span class="s2">&quot;A2&quot;</span><span class="p">,</span> <span class="s2">&quot;A3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;B&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;B0&quot;</span><span class="p">,</span> <span class="s2">&quot;B1&quot;</span><span class="p">,</span> <span class="s2">&quot;B2&quot;</span><span class="p">,</span> <span class="s2">&quot;B3&quot;</span><span class="p">],</span>',
      '<span class="w">     </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;Key2&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;K0&quot;</span><span class="p">,</span> <span class="s2">&quot;K1&quot;</span><span class="p">,</span> <span class="s2">&quot;K2&quot;</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;C&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;C0&quot;</span><span class="p">,</span> <span class="s2">&quot;C1&quot;</span><span class="p">,</span> <span class="s2">&quot;C2&quot;</span><span class="p">,</span> <span class="s2">&quot;C3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;D&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;D0&quot;</span><span class="p">,</span> <span class="s2">&quot;D1&quot;</span><span class="p">,</span> <span class="s2">&quot;D2&quot;</span><span class="p">,</span> <span class="s2">&quot;D3&quot;</span><span class="p">],</span>',
      '<span class="w">     </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">&quot;Key1&quot;</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">&quot;Key2&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe1:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe2:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">dataframe:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '&#x20;&#x20;Key1   A   B',
          '0   K0  A0  B0',
          '1   K1  A1  B1',
          '2   K2  A2  B2',
          '3   K3  A3  B3',
          'dataframe2:',
          '&#x20;&#x20;Key2   C   D',
          '0   K0  C0  D0',
          '1   K1  C1  D1',
          '2   K2  C2  D2',
          '3  NaN  C3  D3',
          'dataframe:',
          '&#x20;&#x20;Key1   A   B Key2   C   D',
          '0   K0  A0  B0   K0  C0  D0',
          '1   K1  A1  B1   K1  C1  D1',
          '2   K2  A2  B2   K2  C2  D2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para cambiar este comportamiento podemos usar el parámetro <code>how</code>, que por defecto tiene el valor <code>inner</code>, pero le podemos pasar los valores <code>left</code>, <code>right</code> y <code>outer</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;Key1&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;K0&quot;</span><span class="p">,</span> <span class="s2">&quot;K1&quot;</span><span class="p">,</span> <span class="s2">&quot;K2&quot;</span><span class="p">,</span> <span class="s2">&quot;K3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;A&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;A0&quot;</span><span class="p">,</span> <span class="s2">&quot;A1&quot;</span><span class="p">,</span> <span class="s2">&quot;A2&quot;</span><span class="p">,</span> <span class="s2">&quot;A3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;B&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;B0&quot;</span><span class="p">,</span> <span class="s2">&quot;B1&quot;</span><span class="p">,</span> <span class="s2">&quot;B2&quot;</span><span class="p">,</span> <span class="s2">&quot;B3&quot;</span><span class="p">],</span>',
      '<span class="w">     </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;Key2&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;K0&quot;</span><span class="p">,</span> <span class="s2">&quot;K1&quot;</span><span class="p">,</span> <span class="s2">&quot;K2&quot;</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;C&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;C0&quot;</span><span class="p">,</span> <span class="s2">&quot;C1&quot;</span><span class="p">,</span> <span class="s2">&quot;C2&quot;</span><span class="p">,</span> <span class="s2">&quot;C3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;D&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;D0&quot;</span><span class="p">,</span> <span class="s2">&quot;D1&quot;</span><span class="p">,</span> <span class="s2">&quot;D2&quot;</span><span class="p">,</span> <span class="s2">&quot;D3&quot;</span><span class="p">],</span>',
      '<span class="w">     </span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe_inner</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">&quot;Key1&quot;</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">&quot;Key2&quot;</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">&quot;inner&quot;</span><span class="p">)</span>',
      '<span class="n">dataframe_left</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">&quot;Key1&quot;</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">&quot;Key2&quot;</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">&quot;left&quot;</span><span class="p">)</span>',
      '<span class="n">dataframe_right</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">&quot;Key1&quot;</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">&quot;Key2&quot;</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">&quot;right&quot;</span><span class="p">)</span>',
      '<span class="n">dataframe_outer</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">&quot;Key1&quot;</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">&quot;Key2&quot;</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">&quot;outer&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe1:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe2:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">dataframe inner:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe_inner</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">dataframe left:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe_left</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">dataframe right:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe_right</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">dataframe outer:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe_outer</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '&#x20;&#x20;Key1   A   B',
          '0   K0  A0  B0',
          '1   K1  A1  B1',
          '2   K2  A2  B2',
          '3   K3  A3  B3',
          'dataframe2:',
          '&#x20;&#x20;Key2   C   D',
          '0   K0  C0  D0',
          '1   K1  C1  D1',
          '2   K2  C2  D2',
          '3  NaN  C3  D3',
          'dataframe inner:',
          '&#x20;&#x20;Key1   A   B Key2   C   D',
          '0   K0  A0  B0   K0  C0  D0',
          '1   K1  A1  B1   K1  C1  D1',
          '2   K2  A2  B2   K2  C2  D2',
          'dataframe left:',
          '&#x20;&#x20;Key1   A   B Key2    C    D',
          '0   K0  A0  B0   K0   C0   D0',
          '1   K1  A1  B1   K1   C1   D1',
          '2   K2  A2  B2   K2   C2   D2',
          '3   K3  A3  B3  NaN  NaN  NaN',
          'dataframe right:',
          '&#x20;&#x20;Key1    A    B Key2   C   D',
          '0   K0   A0   B0   K0  C0  D0',
          '1   K1   A1   B1   K1  C1  D1',
          '2   K2   A2   B2   K2  C2  D2',
          '3  NaN  NaN  NaN  NaN  C3  D3',
          'dataframe outer:',
          '&#x20;&#x20;Key1    A    B Key2    C    D',
          '0   K0   A0   B0   K0   C0   D0',
          '1   K1   A1   B1   K1   C1   D1',
          '2   K2   A2   B2   K2   C2   D2',
          '3   K3   A3   B3  NaN  NaN  NaN',
          '4  NaN  NaN  NaN  NaN   C3   D3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver, cuando se elige <code>left</code> solo se añaden los valores del dataframe de la izquierda y cuando se elige <code>right</code>, los valores del dataframe de la derecha</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3>12.3. <code>Join</code> de dataframes</h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>La última herramienta de unión de dataframes es <code>join</code>. Es similar a <code>merge</code>, solo que en vez de buscar similitudes en función de columnas especificadas, las busca en función de los índices.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;A&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;A0&quot;</span><span class="p">,</span> <span class="s2">&quot;A1&quot;</span><span class="p">,</span> <span class="s2">&quot;A2&quot;</span><span class="p">,</span> <span class="s2">&quot;A3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;B&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;B0&quot;</span><span class="p">,</span> <span class="s2">&quot;B1&quot;</span><span class="p">,</span> <span class="s2">&quot;B2&quot;</span><span class="p">,</span> <span class="s2">&quot;B3&quot;</span><span class="p">],</span>',
      '<span class="w">     </span><span class="p">},</span>',
      '<span class="w">     </span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;K0&quot;</span><span class="p">,</span> <span class="s2">&quot;K1&quot;</span><span class="p">,</span> <span class="s2">&quot;K2&quot;</span><span class="p">,</span> <span class="s2">&quot;K3&quot;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;C&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;C0&quot;</span><span class="p">,</span> <span class="s2">&quot;C1&quot;</span><span class="p">,</span> <span class="s2">&quot;C2&quot;</span><span class="p">,</span> <span class="s2">&quot;C3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;D&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;D0&quot;</span><span class="p">,</span> <span class="s2">&quot;D1&quot;</span><span class="p">,</span> <span class="s2">&quot;D2&quot;</span><span class="p">,</span> <span class="s2">&quot;D3&quot;</span><span class="p">],</span>',
      '<span class="w">     </span><span class="p">},</span>',
      '<span class="w">        </span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;K0&quot;</span><span class="p">,</span> <span class="s2">&quot;K1&quot;</span><span class="p">,</span> <span class="s2">&quot;K2&quot;</span><span class="p">,</span> <span class="s2">&quot;K3&quot;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe1:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe2:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">dataframe:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;A   B',
          'K0  A0  B0',
          'K1  A1  B1',
          'K2  A2  B2',
          'K3  A3  B3',
          'dataframe2:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;C   D',
          'K0  C0  D0',
          'K1  C1  D1',
          'K2  C2  D2',
          'K3  C3  D3',
          'dataframe:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;A   B   C   D',
          'K0  A0  B0  C0  D0',
          'K1  A1  B1  C1  D1',
          'K2  A2  B2  C2  D2',
          'K3  A3  B3  C3  D3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En este caso, los índices son iguales, pero cuando son distintos podemos especificar la manera de unir los dataframes mediante el parámetro <code>how</code>, que por defecto tiene el valor <code>inner</code>, pero puede tener el valor <code>left</code>, <code>right</code> o <code>outer</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;A&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;A0&quot;</span><span class="p">,</span> <span class="s2">&quot;A1&quot;</span><span class="p">,</span> <span class="s2">&quot;A2&quot;</span><span class="p">,</span> <span class="s2">&quot;A3&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;B&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;B0&quot;</span><span class="p">,</span> <span class="s2">&quot;B1&quot;</span><span class="p">,</span> <span class="s2">&quot;B2&quot;</span><span class="p">,</span> <span class="s2">&quot;B3&quot;</span><span class="p">],</span>',
      '<span class="w">     </span><span class="p">},</span>',
      '<span class="w">     </span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;K0&quot;</span><span class="p">,</span> <span class="s2">&quot;K1&quot;</span><span class="p">,</span> <span class="s2">&quot;K2&quot;</span><span class="p">,</span> <span class="s2">&quot;K3&quot;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;C&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;C0&quot;</span><span class="p">,</span> <span class="s2">&quot;C2&quot;</span><span class="p">,</span> <span class="s2">&quot;C3&quot;</span><span class="p">,</span> <span class="s2">&quot;C4&quot;</span><span class="p">],</span>',
      '<span class="w">        </span><span class="s2">&quot;D&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;D0&quot;</span><span class="p">,</span> <span class="s2">&quot;D2&quot;</span><span class="p">,</span> <span class="s2">&quot;D3&quot;</span><span class="p">,</span> <span class="s2">&quot;D4&quot;</span><span class="p">],</span>',
      '<span class="w">     </span><span class="p">},</span>',
      '<span class="w">        </span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;K0&quot;</span><span class="p">,</span> <span class="s2">&quot;K2&quot;</span><span class="p">,</span> <span class="s2">&quot;K3&quot;</span><span class="p">,</span> <span class="s2">&quot;K4&quot;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe_inner</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">&quot;inner&quot;</span><span class="p">)</span>',
      '<span class="n">dataframe_left</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">&quot;left&quot;</span><span class="p">)</span>',
      '<span class="n">dataframe_right</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">&quot;right&quot;</span><span class="p">)</span>',
      '<span class="n">dataframe_outer</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">&quot;outer&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe1:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;dataframe2:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">dataframe inner:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe_inner</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">dataframe left:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe_left</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">dataframe rigth:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe_right</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">dataframe outer:</span><span class="se">\n</span><span class="si">{</span><span class="n">dataframe_outer</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;A   B',
          'K0  A0  B0',
          'K1  A1  B1',
          'K2  A2  B2',
          'K3  A3  B3',
          'dataframe2:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;C   D',
          'K0  C0  D0',
          'K2  C2  D2',
          'K3  C3  D3',
          'K4  C4  D4',
          'dataframe:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;A   B   C   D',
          'K0  A0  B0  C0  D0',
          'K2  A2  B2  C2  D2',
          'K3  A3  B3  C3  D3',
          'dataframe:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;A   B    C    D',
          'K0  A0  B0   C0   D0',
          'K1  A1  B1  NaN  NaN',
          'K2  A2  B2   C2   D2',
          'K3  A3  B3   C3   D3',
          'dataframe:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A    B   C   D',
          'K0   A0   B0  C0  D0',
          'K2   A2   B2  C2  D2',
          'K3   A3   B3  C3  D3',
          'K4  NaN  NaN  C4  D4',
          'dataframe:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A    B    C    D',
          'K0   A0   B0   C0   D0',
          'K1   A1   B1  NaN  NaN',
          'K2   A2   B2   C2   D2',
          'K3   A3   B3   C3   D3',
          'K4  NaN  NaN   C4   D4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2>13. Datos faltantes (<code>NaN</code>)</h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En un <code>DataFrame</code> puede haber algunos datos faltantes, Pandas los representa como <code>np.nan</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="s2">&quot;uno&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">]),</span>',
      '<span class="w">    </span><span class="s2">&quot;dos&quot;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">])</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno  dos',
          '0  1.0  4.0',
          '1  2.0  5.0',
          '2  3.0  6.0',
          '3  NaN  7.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="13.1. Eliminacion de las filas con datos faltantes">13.1. Eliminación de las filas con datos faltantes<a class="anchor-link" href="#13.1. Eliminacion de las filas con datos faltantes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 48" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para no tener filas con datos faltantes, se pueden eliminar estas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">how</span><span class="o">=</span><span class="s2">&quot;any&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno  dos',
          '0  1.0  4.0',
          '1  2.0  5.0',
          '2  3.0  6.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="13.2. Eliminacion de las columnas con datos faltantes">13.2. Eliminación de las columnas con datos faltantes<a class="anchor-link" href="#13.2. Eliminacion de las columnas con datos faltantes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 49" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s1">&#39;any&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;dos',
          '0  4.0',
          '1  5.0',
          '2  6.0',
          '3  7.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="13.3. Mascara booleana con las posiciones faltantes">13.3. Máscara booleana con las posiciones faltantes<a class="anchor-link" href="#13.3. Mascara booleana con las posiciones faltantes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 50" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">pd</span><span class="o">.</span><span class="n">isna</span><span class="p">(</span><span class="n">dataframe</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;uno    dos',
          '0  False  False',
          '1  False  False',
          '2  False  False',
          '3   True  False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="13.4. Rellenado de los datos faltantes">13.4. Rellenado de los datos faltantes<a class="anchor-link" href="#13.4. Rellenado de los datos faltantes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 51" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="mf">5.5</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;uno  dos',
          '0  1.0  4.0',
          '1  2.0  5.0',
          '2  3.0  6.0',
          '3  5.5  7.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Tip: Poniendo la variable <code>inplace=True</code> se modifica el <code>DataFrame</code> sobre el que se está operando, así no hace falta escribir <code>dataframe = dataframe.fillna(value=5.5)</code></p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="14. Series temporales">14. Series temporales<a class="anchor-link" href="#14. Series temporales"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 52" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pandas ofrece la posibilidad de trabajar con series temporales. Por ejemplo, creamos una <code>Serie</code> de 100 datos aleatorios cada segundo desde el 01/01/2021</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">indices</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s2">&quot;1/1/2021&quot;</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">freq</span><span class="o">=</span><span class="s2">&quot;S&quot;</span><span class="p">)</span>',
      '<span class="n">datos</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">indices</span><span class="p">))</span>',
      '<span class="w"> </span>',
      '<span class="n">serie_temporal</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">datos</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="n">indices</span><span class="p">)</span>',
      '<span class="n">serie_temporal</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2021-01-01 00:00:00    241',
          '2021-01-01 00:00:01     14',
          '2021-01-01 00:00:02    190',
          '2021-01-01 00:00:03    407',
          '2021-01-01 00:00:04     94',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;...',
          '2021-01-01 00:01:35    275',
          '2021-01-01 00:01:36     56',
          '2021-01-01 00:01:37    448',
          '2021-01-01 00:01:38    151',
          '2021-01-01 00:01:39    316',
          'Freq: S, Length: 100, dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Esta funcionalidad de Pandas es muy potente, por ejemplo, podemos tener un conjunto de datos en unas horas determinadas de un huso horario y cambiarlas a otro huso</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">horas</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s2">&quot;3/6/2021 00:00&quot;</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">freq</span><span class="o">=</span><span class="s2">&quot;H&quot;</span><span class="p">)</span>',
      '<span class="n">datos</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">horas</span><span class="p">))</span>',
      '<span class="w"> </span>',
      '<span class="n">serie_horaria</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">datos</span><span class="p">,</span> <span class="n">horas</span><span class="p">)</span>',
      '<span class="n">serie_horaria</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2021-03-06 00:00:00   -0.853524',
          '2021-03-06 01:00:00   -1.355372',
          '2021-03-06 02:00:00   -1.267503',
          '2021-03-06 03:00:00   -1.155787',
          '2021-03-06 04:00:00    0.730935',
          '2021-03-06 05:00:00    1.435957',
          '2021-03-06 06:00:00    0.460912',
          '2021-03-06 07:00:00    0.723451',
          '2021-03-06 08:00:00   -0.853337',
          '2021-03-06 09:00:00    0.456359',
          'Freq: H, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Localizamos los datos en un huso horario</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">serie_horaria_utc</span> <span class="o">=</span> <span class="n">serie_horaria</span><span class="o">.</span><span class="n">tz_localize</span><span class="p">(</span><span class="s2">&quot;UTC&quot;</span><span class="p">)</span>',
      '<span class="n">serie_horaria_utc</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2021-03-06 00:00:00+00:00   -0.853524',
          '2021-03-06 01:00:00+00:00   -1.355372',
          '2021-03-06 02:00:00+00:00   -1.267503',
          '2021-03-06 03:00:00+00:00   -1.155787',
          '2021-03-06 04:00:00+00:00    0.730935',
          '2021-03-06 05:00:00+00:00    1.435957',
          '2021-03-06 06:00:00+00:00    0.460912',
          '2021-03-06 07:00:00+00:00    0.723451',
          '2021-03-06 08:00:00+00:00   -0.853337',
          '2021-03-06 09:00:00+00:00    0.456359',
          'Freq: H, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y ahora las podemos cambiar a otro uso</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">serie_horaria_US</span> <span class="o">=</span> <span class="n">serie_horaria_utc</span><span class="o">.</span><span class="n">tz_convert</span><span class="p">(</span><span class="s2">&quot;US/Eastern&quot;</span><span class="p">)</span>',
      '<span class="n">serie_horaria_US</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2021-03-05 19:00:00-05:00   -0.853524',
          '2021-03-05 20:00:00-05:00   -1.355372',
          '2021-03-05 21:00:00-05:00   -1.267503',
          '2021-03-05 22:00:00-05:00   -1.155787',
          '2021-03-05 23:00:00-05:00    0.730935',
          '2021-03-06 00:00:00-05:00    1.435957',
          '2021-03-06 01:00:00-05:00    0.460912',
          '2021-03-06 02:00:00-05:00    0.723451',
          '2021-03-06 03:00:00-05:00   -0.853337',
          '2021-03-06 04:00:00-05:00    0.456359',
          'Freq: H, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="15. Datos categoricos">15. Datos categóricos<a class="anchor-link" href="#15. Datos categoricos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 53" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pandas ofrece la posibilidad de añadir datos categóricos en un <code>DataFrame</code>. Supongamos el siguiente <code>DataFrame</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="s2">&quot;raw_grade&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;e&quot;</span><span class="p">]}</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;id raw_grade',
          '0   1         a',
          '1   2         b',
          '2   3         b',
          '3   4         a',
          '4   5         a',
          '5   6         e',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos convertir los datos de la columna <code>raw_grade</code> a datos categóricos mediante el método <code>astype()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="p">[</span><span class="s1">&#39;grade&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;raw_grade&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s2">&quot;category&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;id raw_grade grade',
          '0   1         a     a',
          '1   2         b     b',
          '2   3         b     b',
          '3   4         a     a',
          '4   5         a     a',
          '5   6         e     e',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Las columnas <code>raw_grade</code> y <code>grade</code> parecen iguales, pero si vemos la información del <code>DataFrame</code> podemos ver que no es así</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">info</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;class &#x27;pandas.core.frame.DataFrame&#x27;&amp;gt;',
          'RangeIndex: 6 entries, 0 to 5',
          'Data columns (total 3 columns):',
          '#   Column     Non-Null Count  Dtype',
          '---  ------     --------------  -----',
          '0   id         6 non-null      int64',
          '1   raw_grade  6 non-null      object',
          '2   grade      6 non-null      category',
          'dtypes: category(1), int64(1), object(1)',
          'memory usage: 334.0+ bytes',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se puede ver que la columna <code>grade</code> es de tipo categórico</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver las categorías de los tipos de datos categóricos mediante el método <code>cat.categories()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;grade&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">cat</span><span class="o">.</span><span class="n">categories</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Index([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;e&#x27;], dtype=&#x27;object&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos también renombrar las categorías con el mismo método, pero introduciendo una lista con las nuevas categorías.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;grade&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">cat</span><span class="o">.</span><span class="n">categories</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;very good&quot;</span><span class="p">,</span> <span class="s2">&quot;good&quot;</span><span class="p">,</span> <span class="s2">&quot;very bad&quot;</span><span class="p">]</span>',
      '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;id raw_grade      grade',
          '0   1         a  very good',
          '1   2         b       good',
          '2   3         b       good',
          '3   4         a  very good',
          '4   5         a  very good',
          '5   6         e   very bad',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pandas nos da la posibilidad de codificar numéricamente los datos categóricos mediante el método <code>get_dummies</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">pd</span><span class="o">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;grade&quot;</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;very good  good  very bad',
          '0          1     0         0',
          '1          0     1         0',
          '2          0     1         0',
          '3          1     0         0',
          '4          1     0         0',
          '5          0     0         1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="16. Groupby">16. Groupby<a class="anchor-link" href="#16. Groupby"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 54" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos agrupar los dataframes por valores de alguna de las columnas. Volvamos a cargar el dataframe con el valor de las casas de California.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&quot;https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv&quot;</span><span class="p">)</span>',
      '<span class="n">california_housing_train</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\',
          '0    -114.31     34.19                15.0       5612.0          1283.0',
          '1    -114.47     34.40                19.0       7650.0          1901.0',
          '2    -114.56     33.69                17.0        720.0           174.0',
          '3    -114.57     33.64                14.0       1501.0           337.0',
          '4    -114.57     33.57                20.0       1454.0           326.0',
          '&#x20;&#x20;&#x20;population  households  median_income  median_house_value',
          '0      1015.0       472.0         1.4936             66900.0',
          '1      1129.0       463.0         1.8200             80100.0',
          '2       333.0       117.0         1.6509             85700.0',
          '3       515.0       226.0         3.1917             73400.0',
          '4       624.0       262.0         1.9250             65500.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora podemos agrupar los datos por alguna de las columnas, por ejemplo, agrupemos las casas en función del número de años y veamos cuántas casas hay de cada edad con <code>count</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">&quot;housing_median_age&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">()</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;longitude  latitude  total_rooms  total_bedrooms  \\',
          'housing_median_age',
          '1.0                         2         2            2               2',
          '2.0                        49        49           49              49',
          '3.0                        46        46           46              46',
          '4.0                       161       161          161             161',
          '5.0                       199       199          199             199',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;population  households  median_income  median_house_value',
          'housing_median_age',
          '1.0                          2           2              2                   2',
          '2.0                         49          49             49                  49',
          '3.0                         46          46             46                  46',
          '4.0                        161         161            161                 161',
          '5.0                        199         199            199                 199',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos en todas las columnas, obtenemos el mismo valor, que es el número de casas que hay con una determinada edad, pero podemos saber la media del valor de cada columna con <code>mean</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">&quot;housing_median_age&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;longitude   latitude  total_rooms  total_bedrooms  \\',
          'housing_median_age',
          '1.0                -121.465000  37.940000  2158.000000      335.500000',
          '2.0                -119.035306  35.410816  5237.102041      871.448980',
          '3.0                -118.798478  35.164783  6920.326087     1190.826087',
          '4.0                -118.805093  34.987764  6065.614907     1068.192547',
          '5.0                -118.789497  35.095327  4926.261307      910.924623',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;population   households  median_income  \\',
          'housing_median_age',
          '1.0                  637.000000   190.000000       4.756800',
          '2.0                 2005.224490   707.122449       5.074237',
          '3.0                 2934.673913  1030.413043       5.572013',
          '4.0                 2739.956522   964.291925       5.196055',
          '5.0                 2456.979899   826.768844       4.732460',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;median_house_value',
          'housing_median_age',
          '1.0                      190250.000000',
          '2.0                      229438.836735',
          '3.0                      239450.043478',
          '4.0                      230054.105590',
          '5.0                      211035.708543',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos obtener varias medidas de cada edad mediante el comando <code>agg</code> (aggregation), pasándole las medidas que queremos mediante una lista, por ejemplo veamos el mínimo, el máximo y la media de cada columna para cada edad de cada</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">&quot;housing_median_age&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">agg</span><span class="p">([</span><span class="s1">&#39;min&#39;</span><span class="p">,</span> <span class="s1">&#39;max&#39;</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;longitude                     latitude                    \\',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;min     max        mean      min    max       mean',
          'housing_median_age',
          '1.0                  -122.00 -120.93 -121.465000    37.65  38.23  37.940000',
          '2.0                  -122.51 -115.80 -119.035306    33.16  40.58  35.410816',
          '3.0                  -122.33 -115.60 -118.798478    32.87  38.77  35.164783',
          '4.0                  -122.72 -116.76 -118.805093    32.65  39.00  34.987764',
          '5.0                  -122.55 -115.55 -118.789497    32.55  40.60  35.095327',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;total_rooms                       total_bedrooms  ...  \\',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;min      max         mean            min  ...',
          'housing_median_age                                                   ...',
          '1.0                     2062.0   2254.0  2158.000000          328.0  ...',
          '2.0                       96.0  21897.0  5237.102041           18.0  ...',
          '3.0                      475.0  21060.0  6920.326087          115.0  ...',
          '4.0                        2.0  37937.0  6065.614907            2.0  ...',
          '5.0                      111.0  25187.0  4926.261307           21.0  ...',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;population households                      median_income  \\',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;mean        min     max         mean           min',
          'housing_median_age',
          '1.0                  637.000000      112.0   268.0   190.000000        4.2500',
          '2.0                 2005.224490       16.0  2873.0   707.122449        1.9667',
          '3.0                 2934.673913      123.0  3112.0  1030.413043        2.1187',
          '4.0                 2739.956522        2.0  5189.0   964.291925        0.5360',
          '5.0                 2456.979899       20.0  3886.0   826.768844        0.7526',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;median_house_value            \\',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;max      mean                min       max',
          'housing_median_age',
          '1.0                  5.2636  4.756800           189200.0  191300.0',
          '2.0                 10.1531  5.074237            47500.0  500001.0',
          '3.0                 11.5199  5.572013            83200.0  500001.0',
          '4.0                 13.4883  5.196055            42500.0  500001.0',
          '5.0                 12.6320  4.732460            50000.0  500001.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;mean',
          'housing_median_age',
          '1.0                 190250.000000',
          '2.0                 229438.836735',
          '3.0                 239450.043478',
          '4.0                 230054.105590',
          '5.0                 211035.708543',
          '[5 rows x 24 columns]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos especificar sobre qué columnas queremos realizar ciertos cálculos mediante el paso de un diccionario, donde las claves serán las columnas sobre las que queremos realizar cálculos y los valores serán listas con los cálculos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">&quot;housing_median_age&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">agg</span><span class="p">({</span><span class="s1">&#39;total_rooms&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;min&#39;</span><span class="p">,</span> <span class="s1">&#39;max&#39;</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">],</span> <span class="s1">&#39;total_bedrooms&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;min&#39;</span><span class="p">,</span> <span class="s1">&#39;max&#39;</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">,</span> <span class="s1">&#39;median&#39;</span><span class="p">]})</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;total_rooms                       total_bedrooms          \\',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;min      max         mean            min     max',
          'housing_median_age',
          '1.0                     2062.0   2254.0  2158.000000          328.0   343.0',
          '2.0                       96.0  21897.0  5237.102041           18.0  3513.0',
          '3.0                      475.0  21060.0  6920.326087          115.0  3559.0',
          '4.0                        2.0  37937.0  6065.614907            2.0  5471.0',
          '5.0                      111.0  25187.0  4926.261307           21.0  4386.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;mean median',
          'housing_median_age',
          '1.0                  335.500000  335.5',
          '2.0                  871.448980  707.0',
          '3.0                 1190.826087  954.0',
          '4.0                 1068.192547  778.0',
          '5.0                  910.924623  715.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos agrupar por más de una columna, para ello, hay que pasar las columnas en una lista</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s2">&quot;housing_median_age&quot;</span><span class="p">,</span> <span class="s2">&quot;total_bedrooms&quot;</span><span class="p">])</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;longitude  latitude  total_rooms  \\',
          'housing_median_age total_bedrooms',
          '1.0                328.0             -120.93     37.65       2254.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;343.0             -122.00     38.23       2062.0',
          '2.0                18.0              -115.80     33.26         96.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;35.0              -121.93     37.78        227.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;55.0              -117.27     33.93        337.0',
          '...                                      ...       ...          ...',
          '52.0               1360.0            -118.35     34.06       3446.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1535.0            -122.41     37.80       3260.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1944.0            -118.25     34.05       2806.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;2509.0            -122.41     37.79       6016.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;2747.0            -122.41     37.79       5783.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;population  households  median_income  \\',
          'housing_median_age total_bedrooms',
          '1.0                328.0                402.0       112.0         4.2500',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;343.0                872.0       268.0         5.2636',
          '2.0                18.0                  30.0        16.0         5.3374',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;35.0                 114.0        49.0         3.1591',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;55.0                 115.0        49.0         3.1042',
          '...                                       ...         ...            ...',
          '52.0               1360.0              1768.0      1245.0         2.4722',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1535.0              3260.0      1457.0         0.9000',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1944.0              2232.0      1605.0         0.6775',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;2509.0              3436.0      2119.0         2.5166',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;2747.0              4518.0      2538.0         1.7240',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;median_house_value',
          'housing_median_age total_bedrooms',
          '1.0                328.0                     189200.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;343.0                     191300.0',
          '2.0                18.0                       47500.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;35.0                      434700.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;55.0                      164800.0',
          '...                                               ...',
          '52.0               1360.0                    500001.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1535.0                    500001.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1944.0                    350000.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;2509.0                    275000.0',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;2747.0                    225000.0',
          '[13394 rows x 7 columns]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="17. Graficos">17. Gráficos<a class="anchor-link" href="#17. Graficos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 55" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pandas ofrece la posibilidad de representar los datos de nuestros <code>DataFrame</code>s en gráficos para poder obtener una mejor representación de ello. Para ello hace uso de la librería <code>matplotlib</code> que veremos en el siguiente post</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.1. Grafica basica">17.1. Gráfica básica<a class="anchor-link" href="#17.1. Grafica basica"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 56" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para representar los datos en una gráfica, la manera más fácil es usar el método <code>plot()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s2">&quot;1/1/2000&quot;</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">1000</span><span class="p">))</span>',
      '<span class="n">serie</span> <span class="o">=</span> <span class="n">serie</span><span class="o">.</span><span class="n">cumsum</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="n">serie</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc5666b9990&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En el caso de tener un <code>DataFrame</code>, el método <code>plot()</code> representará cada una de las columnas del <code>DataFrame</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">ts</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">,</span> <span class="s2">&quot;C&quot;</span><span class="p">,</span> <span class="s2">&quot;D&quot;</span><span class="p">]</span>',
      '<span class="p">)</span>',
      '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">cumsum</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc5663ce610&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.2. Diagrama de barras verticales">17.2. Diagrama de barras verticales<a class="anchor-link" href="#17.2. Diagrama de barras verticales"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 57" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hay más métodos de crear gráficos, como el diagrama de barras vertical mediante <code>plot.bar()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="s2">&quot;d&quot;</span><span class="p">])</span>',
      '<span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">bar</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos apilar las barras, lo indicamos mediante la variable <code>stacked=True</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">stacked</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc56265c5d0&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.3. Diagrama de barras horizontal">17.3. Diagrama de barras horizontal<a class="anchor-link" href="#17.3. Diagrama de barras horizontal"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 58" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para crear un diagrama de barras horizontal usamos <code>plot.barh()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">barh</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc56247fa10&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos apilar las barras, lo indicamos mediante la variable <code>stacked=True</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">barh</span><span class="p">(</span><span class="n">stacked</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc562d1d2d0&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.4. Histograma">17.4. Histograma<a class="anchor-link" href="#17.4. Histograma"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 59" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para crear un histograma usamos <code>plot.hist()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">        </span><span class="s2">&quot;a&quot;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>',
      '<span class="w">        </span><span class="s2">&quot;b&quot;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span>',
      '<span class="w">        </span><span class="s2">&quot;c&quot;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc5650711d0&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos apilar las barras, lo indicamos mediante la variable <code>stacked=True</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">stacked</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc5625779d0&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos añadir más columnas, es decir, si queremos que el histograma sea más informativo o preciso, lo indicamos mediante la variable <code>bins</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">stacked</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc562324990&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.5. Diagramas de velas">17.5. Diagramas de velas<a class="anchor-link" href="#17.5. Diagramas de velas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 60" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para crear un diagrama de velas usamos <code>plot.box()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">,</span> <span class="s2">&quot;C&quot;</span><span class="p">,</span> <span class="s2">&quot;D&quot;</span><span class="p">,</span> <span class="s2">&quot;E&quot;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">box</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc56201a410&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.6. Graficos de areas">17.6. Gráficos de áreas<a class="anchor-link" href="#17.6. Graficos de areas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 61" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para crear un gráfico de áreas usamos <code>plot.area()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">area</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc561e9ca50&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.7. Diagrama de dispersion">17.7. Diagrama de dispersión<a class="anchor-link" href="#17.7. Diagrama de dispersion"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 62" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para crear un diagrama de dispersión usamos <code>plot.scatter()</code>, donde hay que indicar las variables <code>x</code> y <code>y</code> del diagrama</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;B&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc561e2ff10&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.8. Grafico de contenedor hexagonal">17.8. Gráfico de contenedor hexágonal<a class="anchor-link" href="#17.8. Grafico de contenedor hexagonal"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 63" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para crear un gráfico de contenedor hexagonal usamos <code>plot.hexbin()</code>, donde hay que indicar las variables <code>x</code> y <code>y</code> del diagrama y el tamaño de la malla mediante <code>gridsize</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">])</span>',
      '<span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;b&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">&quot;b&quot;</span><span class="p">]</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hexbin</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="n">gridsize</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc561cdded0&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 432x288 with 2 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>

















    </div>

  </section>

</PostLayout>
