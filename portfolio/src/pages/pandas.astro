---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Manejo de datos con Pandas';
const end_url = 'pandas';
const description = '📊 Maneja datos 📝 fácilmente con Pandas 📖';
const keywords = 'pandas, datos, análisis de datos, manipulación de datos, limpieza de datos, visualización de datos';
const languaje = 'ES';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas-icon.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=900
    image_height=364
    image_extension=webp
    article_date=2021-06-15+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#1.-Resumen"><h2>1. Resumen</h2></a>
      <a class="anchor-link" href="#2.-%C2%BFQu%C3%A9-es-Pandas?"><h2>2. ¿Qué es Pandas?</h2></a>
      <a class="anchor-link" href="#2.1.-Pandas-como-pd"><h3>2.1. Pandas como <code>pd</code></h3></a>
      <a class="anchor-link" href="#3.-Estructuras-de-datos-de-Pandas"><h2>3. Estructuras de datos de Pandas</h2></a>
      <a class="anchor-link" href="#3.1.-Series"><h3>3.1. Series</h3></a>
      <a class="anchor-link" href="#3.1.1.-Series-desde-un-diccionario"><h4>3.1.1. Series desde un diccionario</h4></a>
      <a class="anchor-link" href="#3.1.2.-Series-desde-una-lista-o-tupla"><h4>3.1.2. Series desde una lista o tupla</h4></a>
      <a class="anchor-link" href="#3.1.3.-Series-desde-un-ndarray"><h4>3.1.3. Series desde un ndarray</h4></a>
      <a class="anchor-link" href="#3.1.4.-Series-desde-un-escalar"><h4>3.1.4. Series desde un escalar</h4></a>
      <a class="anchor-link" href="#3.1.5.-Operaciones-con-Series"><h4>3.1.5. Operaciones con Series</h4></a>
      <a class="anchor-link" href="#3.1.6.-Atributo-nombre-de-las-Series"><h4>3.1.6. Atributo nombre de las Series</h4></a>
      <a class="anchor-link" href="#3.2.-DataFrames"><h3>3.2. DataFrames</h3></a>
      <a class="anchor-link" href="#3.2.1.-DataFrames-desde-un-diccionario-de-Series"><h4>3.2.1. DataFrames desde un diccionario de Series</h4></a>
      <a class="anchor-link" href="#3.2.2.-DataFrames-desde-un-diccionario-de-ndarrays-o-listas"><h4>3.2.2. DataFrames desde un diccionario de ndarrays o listas</h4></a>
      <a class="anchor-link" href="#3.2.3.-DataFrames-desde-una-matriz"><h4>3.2.3. DataFrames desde una matriz</h4></a>
      <a class="anchor-link" href="#3.2.4.-DataFrames-desde-una-lista-de-diccionarios"><h4>3.2.4. DataFrames desde una lista de diccionarios</h4></a>
      <a class="anchor-link" href="#3.2.5.-DataFrames-desde-un-diccionario-de-tuplas"><h4>3.2.5. DataFrames desde un diccionario de tuplas</h4></a>
      <a class="anchor-link" href="#3.2.6.-DataFrames-desde-una-Serie"><h4>3.2.6. DataFrames desde una Serie</h4></a>
      <a class="anchor-link" href="#4.-Exploraci%C3%B3n-de-un-DataFrame"><h2>4. Exploración de un DataFrame</h2></a>
      <a class="anchor-link" href="#4.1.-Cabeza-del-DataFrame"><h3>4.1. Cabeza del DataFrame</h3></a>
      <a class="anchor-link" href="#4.2.-Cola-del-DataFrame"><h3>4.2. Cola del DataFrame</h3></a>
      <a class="anchor-link" href="#4.3.-Informaci%C3%B3n-del-DataFrame"><h3>4.3. Información del DataFrame</h3></a>
      <a class="anchor-link" href="#4.4.-Filas-y-columnas-DataFrame"><h3>4.4. Filas y columnas DataFrame</h3></a>
      <a class="anchor-link" href="#4.5.-Descripci%C3%B3n-del-DataFrame"><h3>4.5. Descripción del DataFrame</h3></a>
      <a class="anchor-link" href="#4.6.-Ordenaci%C3%B3n-del-DataFrame"><h3>4.6. Ordenación del <code>DataFrame</code></h3></a>
      <a class="anchor-link" href="#4.7.-Estad%C3%ADsticas-del-DataFrame"><h3>4.7. Estadísticas del DataFrame</h3></a>
      <a class="anchor-link" href="#4.8.-Memoria-usada"><h3>4.8. Memoria usada</h3></a>
      <a class="anchor-link" href="#5.-Adici%C3%B3n-de-datos"><h2>5. Adición de datos</h2></a>
      <a class="anchor-link" href="#5.1.-Adici%C3%B3n-de-columnas"><h3>5.1. Adición de columnas</h3></a>
      <a class="anchor-link" href="#5.2.-Adici%C3%B3n-de-filas"><h3>5.2. Adición de filas</h3></a>
      <a class="anchor-link" href="#6.-Eliminaci%C3%B3n-de-datos"><h2>6. Eliminación de datos</h2></a>
      <a class="anchor-link" href="#6.1.-Eliminaci%C3%B3n-de-columnas"><h3>6.1. Eliminación de columnas</h3></a>
      <a class="anchor-link" href="#6.1.-Eliminaci%C3%B3n-de-filas"><h3>6.1. Eliminación de filas</h3></a>
      <a class="anchor-link" href="#7.-Operaciones-sobre-DataFrames"><h2>7. Operaciones sobre DataFrames</h2></a>
      <a class="anchor-link" href="#8.-Transpuesta"><h2>8. Transpuesta</h2></a>
      <a class="anchor-link" href="#9.-Conversi%C3%B3n-a-Numpy"><h2>9. Conversión a Numpy</h2></a>
      <a class="anchor-link" href="#10.-Lectura-de-datos-de-fuentes-externas"><h2>10. Lectura de datos de fuentes externas</h2></a>
      <a class="anchor-link" href="#11.-Indexaci%C3%B3n-en-DataFrames"><h2>11. Indexación en DataFrames</h2></a>
      <a class="anchor-link" href="#11.1.-Indexaci%C3%B3n-de-columnas"><h3>11.1. Indexación de columnas</h3></a>
      <a class="anchor-link" href="#11.2.-Indexaci%C3%B3n-de-filas-por-posiciones"><h3>11.2. Indexación de filas por posiciones</h3></a>
      <a class="anchor-link" href="#11.3.-Indexaci%C3%B3n-de-filas-por-etiquetas"><h3>11.3. Indexación de filas por etiquetas</h3></a>
      <a class="anchor-link" href="#11.4.-Selecci%C3%B3n-de-una-porci%C3%B3n-del-DataFrame-mediante-posiciones"><h3>11.4. Selección de una porción del DataFrame mediante posiciones</h3></a>
      <a class="anchor-link" href="#11.5.-Selecci%C3%B3n-de-una-porci%C3%B3n-del-DataFrame-mediante-etiquetas"><h3>11.5. Selección de una porción del DataFrame mediante etiquetas</h3></a>
      <a class="anchor-link" href="#11.6.-Indexaci%C3%B3n-por-funci%C3%B3n-lambda"><h3>11.6. Indexación por función lambda</h3></a>
      <a class="anchor-link" href="#11.7.-Indexaci%C3%B3n-condicional"><h3>11.7. Indexación condicional</h3></a>
      <a class="anchor-link" href="#11.8.-Indexaci%C3%B3n-aleatoria"><h3>11.8. Indexación aleatoria</h3></a>
      <a class="anchor-link" href="#12.-Uni%C3%B3n-de-DataFrames"><h2>12. Unión de DataFrames</h2></a>
      <a class="anchor-link" href="#12.1.-Concatenaci%C3%B3n-de-DataFrames"><h3>12.1. Concatenación de DataFrames</h3></a>
      <a class="anchor-link" href="#12.1.1.-Intersecci%C3%B3n-de-concatenaci%C3%B3n"><h4>12.1.1. Intersección de concatenación</h4></a>
      <a class="anchor-link" href="#12.2.-Merge-de-DataFrames"><h3>12.2. <code>Merge</code> de DataFrames</h3></a>
      <a class="anchor-link" href="#12.3.-Join-de-dataframes"><h3>12.3. <code>Join</code> de dataframes</h3></a>
      <a class="anchor-link" href="#13.-Datos-faltantes-(NaN)"><h2>13. Datos faltantes (<code>NaN</code>)</h2></a>
      <a class="anchor-link" href="#13.1.-Eliminaci%C3%B3n-de-las-filas-con-datos-faltantes"><h3>13.1. Eliminación de las filas con datos faltantes</h3></a>
      <a class="anchor-link" href="#13.2.-Eliminaci%C3%B3n-de-las-columnas-con-datos-faltantes"><h3>13.2. Eliminación de las columnas con datos faltantes</h3></a>
      <a class="anchor-link" href="#13.3.-M%C3%A1scara-booleana-con-las-posiciones-faltantes"><h3>13.3. Máscara booleana con las posiciones faltantes</h3></a>
      <a class="anchor-link" href="#13.4.-Rellenado-de-los-datos-faltantes"><h3>13.4. Rellenado de los datos faltantes</h3></a>
      <a class="anchor-link" href="#14.-Series-temporales"><h2>14. Series temporales</h2></a>
      <a class="anchor-link" href="#15.-Datos-categ%C3%B3ricos"><h2>15. Datos categóricos</h2></a>
      <a class="anchor-link" href="#16.-Groupby"><h2>16. Groupby</h2></a>
      <a class="anchor-link" href="#17.-Gr%C3%A1ficos"><h2>17. Gráficos</h2></a>
      <a class="anchor-link" href="#17.1.-Gr%C3%A1fica-b%C3%A1sica"><h3>17.1. Gráfica básica</h3></a>
      <a class="anchor-link" href="#17.2.-Diagrama-de-barras-verticales"><h3>17.2. Diagrama de barras verticales</h3></a>
      <a class="anchor-link" href="#17.3.-Diagrama-de-barras-horizontal"><h3>17.3. Diagrama de barras horizontal</h3></a>
      <a class="anchor-link" href="#17.4.-Histograma"><h3>17.4. Histograma</h3></a>
      <a class="anchor-link" href="#17.5.-Diagramas-de-velas"><h3>17.5. Diagramas de velas</h3></a>
      <a class="anchor-link" href="#17.6.-Gr%C3%A1ficos-de-%C3%A1reas"><h3>17.6. Gráficos de áreas</h3></a>
      <a class="anchor-link" href="#17.7.-Diagrama-de-dispersi%C3%B3n"><h3>17.7. Diagrama de dispersión</h3></a>
      <a class="anchor-link" href="#17.8.-Gr%C3%A1fico-de-contenedor-hex%C3%A1gonal"><h3>17.8. Gráfico de contenedor hexágonal</h3></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Manejo-de-datos-con-Pandas">Manejo de datos con Pandas<a class="anchor-link" href="#Manejo-de-datos-con-Pandas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 0" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="1.-Resumen">1. Resumen<a class="anchor-link" href="#1.-Resumen"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 1" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver una pequeña introducción a la librería de manipulación y análisis de datos <code>Pandas</code>. Con ella podremos manejar y procesar datos tabulares que nos ayudará para poder operar con ellos y obtener información de una manera muy valiosa</p>
      <p align="center">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" alt="No description has been provided for this image" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas-icon.webp" width="900" height="364"/>
      </p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="2.-%C2%BFQu%C3%A9-es-Pandas?">2. ¿Qué es Pandas?<a class="anchor-link" href="#2.-%C2%BFQu%C3%A9-es-Pandas?"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 2" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pandas es una librería de <strong>Python</strong> que está diseñada para que el trabajo con datos <em>relacionales</em> o <em>etiquetados</em> sea fácil e intuitivo</p>
      <p>Pandas está diseñado para muchos tipos diferentes de datos:</p>
      <ul>
      <li>Datos tabulares con columnas de tipos heterogéneos, como en una tabla SQL o una hoja de cálculo de Excel</li>
      <li>Datos de series de tiempo ordenados y desordenados (no necesariamente de frecuencia fija).</li>
      <li>Datos matriciales arbitrarios (homogéneos o heterogéneos) con etiquetas de fila y columna</li>
      <li>Cualquier otra forma de conjuntos de datos observacionales/estadísticos. No es necesario etiquetar los datos en absoluto para colocarlos en una estructura de datos de Pandas.</li>
      </ul>
      <p>Las dos estructuras de datos principales de Pandas son las <code>Serie</code>s (unidimensional) y los <code>DataFrame</code>s (bidimensional). Pandas está construido sobre NumPy y está destinado a integrarse bien dentro de un entorno informático científico con muchas otras bibliotecas de terceros.
      Para los científicos de datos, el trabajo con datos generalmente se divide en varias etapas: recopilar y limpiar datos, analizarlos/modelarlos y luego organizar los resultados del análisis en una forma adecuada para trazarlos o mostrarlos en forma de tabla. pandas es la herramienta ideal para todas estas tareas.
      Otra característica es que pandas es rápido, muchos de los algoritmos de bajo nivel se han construido en <code>C</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.1.-Pandas-como-pd">2.1. Pandas como <code>pd</code><a class="anchor-link" href="#2.1.-Pandas-como-pd"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 3" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Generalmente a la hora de importar pandas se suele importar con el alias de <code>pd</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1.0.1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="3.-Estructuras-de-datos-de-Pandas">3. Estructuras de datos de Pandas<a class="anchor-link" href="#3.-Estructuras-de-datos-de-Pandas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 4" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En Pandas existen dos tipos de estructuras de datos: las <code>Serie</code>s y los <code>DataFrame</code>s</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.1.-Series">3.1. Series<a class="anchor-link" href="#3.1.-Series"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 5" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El tipo de dato <code>Serie</code> es una matriz etiquetada unidimensional capaz de contener cualquier tipo de datos (enteros, cadenas, números de punto flotante, objetos Python, etc.). Está dividida en índices.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para crear un tipo de dato <code>Serie</code> la forma más común es</p>
      <div class="highlight"><pre><span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="n">index</span><span class="p">)</span>
      </pre></div>
      <p>Dónde <code>data</code> puede ser:</p>
      <ul>
      <li>Un diccionario</li>
      <li>Una lista o tupla</li>
      <li>Un <code>ndarray</code> de Numpy</li>
      <li>Un valor escalar</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como uno de los tipos de datos puede ser un <code>ndarray</code> de NumPy, importamos NumPy para poder usarlo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.1.-Series-desde-un-diccionario">3.1.1. Series desde un diccionario<a class="anchor-link" href="#3.1.1.-Series-desde-un-diccionario"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 6" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"b"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>',
          '',
          '<span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'b    1',
          'a    0',
          'c    2',
          'dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se pasa un índice, se extraerán los valores de los datos correspondientes a las etiquetas del índice. Si no existen, se crean como <code>NaN</code> (not a number)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"b"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>',
          '',
          '<span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">diccionario</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">])</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'b    1.0',
          'c    2.0',
          'd    NaN',
          'a    0.0',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.2.-Series-desde-una-lista-o-tupla">3.1.2. Series desde una lista o tupla<a class="anchor-link" href="#3.1.2.-Series-desde-una-lista-o-tupla"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 7" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si los datos provienen de una lista o tupla y no se pasa ningún índice, se creará uno con valores [0, ..., len(data)-1]</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0    1',
          '1    2',
          '2    3',
          '3    4',
          'dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se pasa un índice, este debe tener la misma longitud que los datos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">])</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a    1',
          'b    2',
          'c    3',
          'd    4',
          'dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.3.-Series-desde-un-ndarray">3.1.3. Series desde un ndarray<a class="anchor-link" href="#3.1.3.-Series-desde-un-ndarray"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 8" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si los datos provienen de un ndarray y no se pasa ningún índice, se creará uno con valores <code>[0, ..., len(data)-1]</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0    1.267865',
          '1   -0.877857',
          '2   -0.138556',
          '3   -0.132987',
          '4   -0.827295',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se pasa un índice, este debe tener la misma longitud que los datos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">,</span> <span class="s2">"e"</span><span class="p">])</span>',
          '<span class="n">serie</span> ',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a   -1.091828',
          'b   -0.584243',
          'c    0.220398',
          'd    1.248923',
          'e    1.652351',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.4.-Series-desde-un-escalar">3.1.4. Series desde un escalar<a class="anchor-link" href="#3.1.4.-Series-desde-un-escalar"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 9" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se crea la serie desde un escalar, se creará con un único ítem</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="mf">5.0</span><span class="p">)</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0    5.0',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se quieren crear más ítems en la serie, hay que pasarle el índice con el número de ítems que se quiera, de esta manera todos los ítems tendrán el valor del escalar</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="mf">5.0</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">,</span> <span class="s2">"e"</span><span class="p">])</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a    5.0',
          'b    5.0',
          'c    5.0',
          'd    5.0',
          'e    5.0',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.5.-Operaciones-con-Series">3.1.5. Operaciones con Series<a class="anchor-link" href="#3.1.5.-Operaciones-con-Series"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 10" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al igual que con Numpy, podemos realizar operaciones con todos los elementos de una serie, sin tener que hacer una iteración por cada uno de ellos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="mf">5.0</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">,</span> <span class="s2">"e"</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"serie:</span><span class="se">\\n</span><span class="si">{</span><span class="n">serie</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">serie + serie =</span><span class="se">\\n</span><span class="si">{</span><span class="n">serie</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">serie</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'serie:',
          'a    5.0',
          'b    5.0',
          'c    5.0',
          'd    5.0',
          'e    5.0',
          'dtype: float64',
          'serie + serie =',
          'a    10.0',
          'b    10.0',
          'c    10.0',
          'd    10.0',
          'e    10.0',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="mf">5.0</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">,</span> <span class="s2">"e"</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"serie:</span><span class="se">\\n</span><span class="si">{</span><span class="n">serie</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">exp(serie) =</span><span class="se">\\n</span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">serie</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'serie:',
          'a    5.0',
          'b    5.0',
          'c    5.0',
          'd    5.0',
          'e    5.0',
          'dtype: float64',
          'exp(serie) =',
          'a    148.413159',
          'b    148.413159',
          'c    148.413159',
          'd    148.413159',
          'e    148.413159',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Una diferencia entre <code>Serie</code>s y ndarrays es que las operaciones entre <code>Serie</code>s alinean automáticamente los datos según sus etiquetas. Por lo tanto, se pueden escribir cálculos sin tener en cuenta si las <code>Serie</code>s involucradas tienen las mismas etiquetas. Si no se encuentra una etiqueta en una <code>Serie</code> u otra, el resultado se marcará como faltante (NaN).</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="mf">5.0</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">,</span> <span class="s2">"e"</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"serie:</span><span class="se">\\n</span><span class="si">{</span><span class="n">serie</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">serie[1:] + serie[:-1] =</span><span class="se">\\n</span><span class="si">{</span><span class="n">serie</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">serie</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'serie:',
          'a    5.0',
          'b    5.0',
          'c    5.0',
          'd    5.0',
          'e    5.0',
          'dtype: float64',
          'serie[1:] + serie[:-1] =',
          'a     NaN',
          'b    10.0',
          'c    10.0',
          'd    10.0',
          'e     NaN',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.1.6.-Atributo-nombre-de-las-Series">3.1.6. Atributo nombre de las Series<a class="anchor-link" href="#3.1.6.-Atributo-nombre-de-las-Series"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 11" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Uno de los atributos de las <code>Serie</code>s es <code>name</code>, el cual corresponde al nombre que tendrán cuando se añadan a un DataFrame. Por el camino contrario, cuando se obtiene una serie de un DataFrame, esta serie tendrá como nombre el que tenía en el DataFrame</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="s2">"aleatorio"</span><span class="p">)</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0   -0.191009',
          '1   -0.793151',
          '2   -0.907747',
          '3   -1.440508',
          '4   -0.676419',
          'Name: aleatorio, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se puede cambiar el nombre de una serie mediante el método <code>rename()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">serie</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="s2">"random"</span><span class="p">)</span>',
          '<span class="n">serie</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0   -0.191009',
          '1   -0.793151',
          '2   -0.907747',
          '3   -1.440508',
          '4   -0.676419',
          'Name: random, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.2.-DataFrames">3.2. DataFrames<a class="anchor-link" href="#3.2.-DataFrames"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 12" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Un <code>DataFrame</code> es una estructura de datos etiquetada y bidimensional, con columnas de tipos potencialmente diferentes, es decir, en una columna puede haber datos de tipo entero, en otra columna datos de tipo string, etc. Puede pensar en ello como una hoja de cálculo o una tabla SQL, o un diccionario de objetos <code>Serie</code>s.
      Es el objeto pandas más utilizado. Al igual que las <code>Serie</code>s, los <code>DataFrame</code>s aceptan muchos tipos diferentes de entrada:</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Junto con los datos, opcionalmente puede pasar argumentos de índice (etiquetas de fila) y columnas (etiquetas de columna). Si pasa un índice y/o columnas, está garantizando el índice y/o columnas del <code>DataFrame</code> resultante. Por lo tanto, un diccionario de <code>Serie</code>s más un índice específico descartará todos los datos que no coincidan con el índice pasado</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si no se pasan las etiquetas de los ejes, se construirán a partir de los datos de entrada basándose en reglas de sentido común.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.1.-DataFrames-desde-un-diccionario-de-Series">3.2.1. DataFrames desde un diccionario de Series<a class="anchor-link" href="#3.2.1.-DataFrames-desde-un-diccionario-de-Series"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 13" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se pasa un diccionario con <code>Serie</code>s se creará el <code>DataFrame</code> con tantas columnas como <code>Serie</code>s tenga el diccionario</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[87]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si cada una de las <code>Serie</code>s tiene índices definidos, el <code>DataFrame</code> resultante será la unión de estos índices</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[88]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>a</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>b</th>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>c</th>
      <td>3.0</td>
      <td>6.0</td>
      </tr>
      <tr>
      <th>d</th>
      <td>NaN</td>
      <td>7.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"d"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">])</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[89]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>d</th>
      <td>NaN</td>
      <td>7.0</td>
      </tr>
      <tr>
      <th>b</th>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>a</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se le pasan las columnas, aparecerán en el orden pasado</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">"dos"</span><span class="p">,</span> <span class="s2">"tres"</span><span class="p">])</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[90]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>a</th>
      <td>4.0</td>
      <td>NaN</td>
      </tr>
      <tr>
      <th>b</th>
      <td>5.0</td>
      <td>NaN</td>
      </tr>
      <tr>
      <th>c</th>
      <td>6.0</td>
      <td>NaN</td>
      </tr>
      <tr>
      <th>d</th>
      <td>7.0</td>
      <td>NaN</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.2.-DataFrames-desde-un-diccionario-de-ndarrays-o-listas">3.2.2. DataFrames desde un diccionario de ndarrays o listas<a class="anchor-link" href="#3.2.2.-DataFrames-desde-un-diccionario-de-ndarrays-o-listas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 14" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Todos los ndarrays o listas deben tener la misma longitud. Si se pasa un índice, también debe tener la misma longitud que los ndarrays o listas</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="mf">4.0</span><span class="p">],</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="p">[</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">]</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[91]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>3.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>2.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>4.0</td>
      <td>1.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.3.-DataFrames-desde-una-matriz">3.2.3. DataFrames desde una matriz<a class="anchor-link" href="#3.2.3.-DataFrames-desde-una-matriz"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 15" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se pasa un índice, tiene que tener la misma longitud que el número de filas de la matriz y si se pasan las columnas, tienen que tener la misma longitud que las columnas de la matriz</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">matriz</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">matriz</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">],</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">"columna1"</span><span class="p">,</span> <span class="s2">"columna2"</span><span class="p">])</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[92]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>columna1</th>
      <th>columna2</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>a</th>
      <td>1</td>
      <td>3</td>
      </tr>
      <tr>
      <th>b</th>
      <td>2</td>
      <td>2</td>
      </tr>
      <tr>
      <th>c</th>
      <td>3</td>
      <td>1</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.4.-DataFrames-desde-una-lista-de-diccionarios">3.2.4. DataFrames desde una lista de diccionarios<a class="anchor-link" href="#3.2.4.-DataFrames-desde-una-lista-de-diccionarios"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 16" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[{opening_brace}</span><span class="s2">"a"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">:</span> <span class="mi">2</span><span class="p">{closing_brace},</span> <span class="p">{opening_brace}</span><span class="s2">"a"</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">:</span> <span class="mi">20</span><span class="p">{closing_brace}]</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">lista</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[93]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1</td>
      <td>2</td>
      <td>NaN</td>
      </tr>
      <tr>
      <th>1</th>
      <td>5</td>
      <td>10</td>
      <td>20.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.5.-DataFrames-desde-un-diccionario-de-tuplas">3.2.5. DataFrames desde un diccionario de tuplas<a class="anchor-link" href="#3.2.5.-DataFrames-desde-un-diccionario-de-tuplas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 17" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="p">(</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">):</span> <span class="p">{opening_brace}(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"B"</span><span class="p">):</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"C"</span><span class="p">):</span> <span class="mi">2</span><span class="p">{closing_brace},</span>
          <span class="p">(</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">):</span> <span class="p">{opening_brace}(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"C"</span><span class="p">):</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"B"</span><span class="p">):</span> <span class="mi">4</span><span class="p">{closing_brace},</span>
          <span class="p">(</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">):</span> <span class="p">{opening_brace}(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"B"</span><span class="p">):</span> <span class="mi">5</span><span class="p">,</span> <span class="p">(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"C"</span><span class="p">):</span> <span class="mi">6</span><span class="p">{closing_brace},</span>
          <span class="p">(</span><span class="s2">"b"</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">):</span> <span class="p">{opening_brace}(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"C"</span><span class="p">):</span> <span class="mi">7</span><span class="p">,</span> <span class="p">(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"B"</span><span class="p">):</span> <span class="mi">8</span><span class="p">{closing_brace},</span>
          <span class="p">(</span><span class="s2">"b"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">):</span> <span class="p">{opening_brace}(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"D"</span><span class="p">):</span> <span class="mi">9</span><span class="p">,</span> <span class="p">(</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"B"</span><span class="p">):</span> <span class="mi">10</span><span class="p">{closing_brace},</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[94]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead tr th {
              text-align: left;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr>
      <th></th>
      <th></th>
      <th colspan="3" halign="left">a</th>
      <th colspan="2" halign="left">b</th>
      </tr>
      <tr>
      <th></th>
      <th></th>
      <th>b</th>
      <th>a</th>
      <th>c</th>
      <th>a</th>
      <th>b</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th rowspan="3" valign="top">A</th>
      <th>B</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>8.0</td>
      <td>10.0</td>
      </tr>
      <tr>
      <th>C</th>
      <td>2.0</td>
      <td>3.0</td>
      <td>6.0</td>
      <td>7.0</td>
      <td>NaN</td>
      </tr>
      <tr>
      <th>D</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>9.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="3.2.6.-DataFrames-desde-una-Serie">3.2.6. DataFrames desde una Serie<a class="anchor-link" href="#3.2.6.-DataFrames-desde-una-Serie"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 18" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El resultado será un <code>DataFrame</code> con el mismo índice que la Serie de entrada, y con una columna cuyo nombre es el nombre original de la Serie (solo si no se proporciona otro nombre de columna).</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span><span class="s2">"b"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">:</span> <span class="mi">2</span><span class="p">{closing_brace}</span>
      
      <span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">serie</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[95]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>b</th>
      <td>1</td>
      </tr>
      <tr>
      <th>a</th>
      <td>0</td>
      </tr>
      <tr>
      <th>c</th>
      <td>2</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="4.-Exploraci%C3%B3n-de-un-DataFrame">4. Exploración de un DataFrame<a class="anchor-link" href="#4.-Exploraci%C3%B3n-de-un-DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 19" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Cuando un <code>DataFrame</code> es muy grande, no se puede representar entero</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv"</span><span class="p">)</span>
      <span class="n">california_housing_train</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[102]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>-114.31</td>
      <td>34.19</td>
      <td>15.0</td>
      <td>5612.0</td>
      <td>1283.0</td>
      <td>1015.0</td>
      <td>472.0</td>
      <td>1.4936</td>
      <td>66900.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>-114.47</td>
      <td>34.40</td>
      <td>19.0</td>
      <td>7650.0</td>
      <td>1901.0</td>
      <td>1129.0</td>
      <td>463.0</td>
      <td>1.8200</td>
      <td>80100.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>-114.56</td>
      <td>33.69</td>
      <td>17.0</td>
      <td>720.0</td>
      <td>174.0</td>
      <td>333.0</td>
      <td>117.0</td>
      <td>1.6509</td>
      <td>85700.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>-114.57</td>
      <td>33.64</td>
      <td>14.0</td>
      <td>1501.0</td>
      <td>337.0</td>
      <td>515.0</td>
      <td>226.0</td>
      <td>3.1917</td>
      <td>73400.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>-114.57</td>
      <td>33.57</td>
      <td>20.0</td>
      <td>1454.0</td>
      <td>326.0</td>
      <td>624.0</td>
      <td>262.0</td>
      <td>1.9250</td>
      <td>65500.0</td>
      </tr>
      <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      </tr>
      <tr>
      <th>16995</th>
      <td>-124.26</td>
      <td>40.58</td>
      <td>52.0</td>
      <td>2217.0</td>
      <td>394.0</td>
      <td>907.0</td>
      <td>369.0</td>
      <td>2.3571</td>
      <td>111400.0</td>
      </tr>
      <tr>
      <th>16996</th>
      <td>-124.27</td>
      <td>40.69</td>
      <td>36.0</td>
      <td>2349.0</td>
      <td>528.0</td>
      <td>1194.0</td>
      <td>465.0</td>
      <td>2.5179</td>
      <td>79000.0</td>
      </tr>
      <tr>
      <th>16997</th>
      <td>-124.30</td>
      <td>41.84</td>
      <td>17.0</td>
      <td>2677.0</td>
      <td>531.0</td>
      <td>1244.0</td>
      <td>456.0</td>
      <td>3.0313</td>
      <td>103600.0</td>
      </tr>
      <tr>
      <th>16998</th>
      <td>-124.30</td>
      <td>41.80</td>
      <td>19.0</td>
      <td>2672.0</td>
      <td>552.0</td>
      <td>1298.0</td>
      <td>478.0</td>
      <td>1.9797</td>
      <td>85800.0</td>
      </tr>
      <tr>
      <th>16999</th>
      <td>-124.35</td>
      <td>40.54</td>
      <td>52.0</td>
      <td>1820.0</td>
      <td>300.0</td>
      <td>806.0</td>
      <td>270.0</td>
      <td>3.0147</td>
      <td>94600.0</td>
      </tr>
      </tbody>
      </table>
      <p>17000 rows × 9 columns</p>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por lo que es muy útil tener métodos para explorarlo y obtener información de manera rápida.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.1.-Cabeza-del-DataFrame">4.1. Cabeza del DataFrame<a class="anchor-link" href="#4.1.-Cabeza-del-DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 20" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para ver las primeras filas y hacerse una idea de cómo es el <code>DataFrame</code> existe el método <code>head()</code>, que por defecto muestra las primeras 5 filas del <code>DataFrame</code>. Si se quiere ver un número distinto de filas, introducirlo mediante el atributo <code>n</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[103]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>-114.31</td>
      <td>34.19</td>
      <td>15.0</td>
      <td>5612.0</td>
      <td>1283.0</td>
      <td>1015.0</td>
      <td>472.0</td>
      <td>1.4936</td>
      <td>66900.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>-114.47</td>
      <td>34.40</td>
      <td>19.0</td>
      <td>7650.0</td>
      <td>1901.0</td>
      <td>1129.0</td>
      <td>463.0</td>
      <td>1.8200</td>
      <td>80100.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>-114.56</td>
      <td>33.69</td>
      <td>17.0</td>
      <td>720.0</td>
      <td>174.0</td>
      <td>333.0</td>
      <td>117.0</td>
      <td>1.6509</td>
      <td>85700.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>-114.57</td>
      <td>33.64</td>
      <td>14.0</td>
      <td>1501.0</td>
      <td>337.0</td>
      <td>515.0</td>
      <td>226.0</td>
      <td>3.1917</td>
      <td>73400.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>-114.57</td>
      <td>33.57</td>
      <td>20.0</td>
      <td>1454.0</td>
      <td>326.0</td>
      <td>624.0</td>
      <td>262.0</td>
      <td>1.9250</td>
      <td>65500.0</td>
      </tr>
      <tr>
      <th>5</th>
      <td>-114.58</td>
      <td>33.63</td>
      <td>29.0</td>
      <td>1387.0</td>
      <td>236.0</td>
      <td>671.0</td>
      <td>239.0</td>
      <td>3.3438</td>
      <td>74000.0</td>
      </tr>
      <tr>
      <th>6</th>
      <td>-114.58</td>
      <td>33.61</td>
      <td>25.0</td>
      <td>2907.0</td>
      <td>680.0</td>
      <td>1841.0</td>
      <td>633.0</td>
      <td>2.6768</td>
      <td>82400.0</td>
      </tr>
      <tr>
      <th>7</th>
      <td>-114.59</td>
      <td>34.83</td>
      <td>41.0</td>
      <td>812.0</td>
      <td>168.0</td>
      <td>375.0</td>
      <td>158.0</td>
      <td>1.7083</td>
      <td>48500.0</td>
      </tr>
      <tr>
      <th>8</th>
      <td>-114.59</td>
      <td>33.61</td>
      <td>34.0</td>
      <td>4789.0</td>
      <td>1175.0</td>
      <td>3134.0</td>
      <td>1056.0</td>
      <td>2.1782</td>
      <td>58400.0</td>
      </tr>
      <tr>
      <th>9</th>
      <td>-114.60</td>
      <td>34.83</td>
      <td>46.0</td>
      <td>1497.0</td>
      <td>309.0</td>
      <td>787.0</td>
      <td>271.0</td>
      <td>2.1908</td>
      <td>48100.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.2.-Cola-del-DataFrame">4.2. Cola del DataFrame<a class="anchor-link" href="#4.2.-Cola-del-DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 21" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si lo que se quiere es ver las últimas filas se puede usar el método <code>tail()</code>, mediante el parámetro <code>n</code> se elige cuántas filas mostrar</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">tail</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[104]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>16995</th>
      <td>-124.26</td>
      <td>40.58</td>
      <td>52.0</td>
      <td>2217.0</td>
      <td>394.0</td>
      <td>907.0</td>
      <td>369.0</td>
      <td>2.3571</td>
      <td>111400.0</td>
      </tr>
      <tr>
      <th>16996</th>
      <td>-124.27</td>
      <td>40.69</td>
      <td>36.0</td>
      <td>2349.0</td>
      <td>528.0</td>
      <td>1194.0</td>
      <td>465.0</td>
      <td>2.5179</td>
      <td>79000.0</td>
      </tr>
      <tr>
      <th>16997</th>
      <td>-124.30</td>
      <td>41.84</td>
      <td>17.0</td>
      <td>2677.0</td>
      <td>531.0</td>
      <td>1244.0</td>
      <td>456.0</td>
      <td>3.0313</td>
      <td>103600.0</td>
      </tr>
      <tr>
      <th>16998</th>
      <td>-124.30</td>
      <td>41.80</td>
      <td>19.0</td>
      <td>2672.0</td>
      <td>552.0</td>
      <td>1298.0</td>
      <td>478.0</td>
      <td>1.9797</td>
      <td>85800.0</td>
      </tr>
      <tr>
      <th>16999</th>
      <td>-124.35</td>
      <td>40.54</td>
      <td>52.0</td>
      <td>1820.0</td>
      <td>300.0</td>
      <td>806.0</td>
      <td>270.0</td>
      <td>3.0147</td>
      <td>94600.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.3.-Informaci%C3%B3n-del-DataFrame">4.3. Información del DataFrame<a class="anchor-link" href="#4.3.-Informaci%C3%B3n-del-DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 22" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Otro método muy útil es <code>info()</code> que nos da información del <code>DataFrame</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">info</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;class \'pandas.core.frame.DataFrame\'&gt;',
          'RangeIndex: 17000 entries, 0 to 16999',
          'Data columns (total 9 columns):',
          ' #   Column              Non-Null Count  Dtype  ',
          '---  ------              --------------  -----  ',
          ' 0   longitude           17000 non-null  float64',
          ' 1   latitude            17000 non-null  float64',
          ' 2   housing_median_age  17000 non-null  float64',
          ' 3   total_rooms         17000 non-null  float64',
          ' 4   total_bedrooms      17000 non-null  float64',
          ' 5   population          17000 non-null  float64',
          ' 6   households          17000 non-null  float64',
          ' 7   median_income       17000 non-null  float64',
          ' 8   median_house_value  17000 non-null  float64',
          'dtypes: float64(9)',
          'memory usage: 1.2 MB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.4.-Filas-y-columnas-DataFrame">4.4. Filas y columnas DataFrame<a class="anchor-link" href="#4.4.-Filas-y-columnas-DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 23" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden obtener los índices y las columnas de un <code>DataFrame</code> mediante los métodos <code>index</code> y <code>columns</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '    <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">]),</span>',
          '    <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">])</span>',
          '    <span class="p">}</span>',
          '',
          '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
          '',
          '<span class="n">indices</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">index</span>',
          '<span class="n">columnas</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">columns</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"El DataFrame tiene los índices</span><span class="se">\\n\t</span><span class="si">{</span><span class="n">indices</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"El DataFrame tiene las columnas</span><span class="se">\\n\t</span><span class="si">{</span><span class="n">columnas</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'El DataFrame tiene los índices',
          '	Index([\'a\', \'b\', \'c\', \'d\'], dtype=\'object\')',
          'El DataFrame tiene las columnas',
          '	Index([\'uno\', \'dos\'], dtype=\'object\')',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.5.-Descripci%C3%B3n-del-DataFrame">4.5. Descripción del DataFrame<a class="anchor-link" href="#4.5.-Descripci%C3%B3n-del-DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 24" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El método <code>describe()</code> muestra un resumen estadístico rápido de los datos del <code>DataFrame</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv"</span><span class="p">)</span>
      <span class="n">california_housing_train</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[107]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>count</th>
      <td>17000.000000</td>
      <td>17000.000000</td>
      <td>17000.000000</td>
      <td>17000.000000</td>
      <td>17000.000000</td>
      <td>17000.000000</td>
      <td>17000.000000</td>
      <td>17000.000000</td>
      <td>17000.000000</td>
      </tr>
      <tr>
      <th>mean</th>
      <td>-119.562108</td>
      <td>35.625225</td>
      <td>28.589353</td>
      <td>2643.664412</td>
      <td>539.410824</td>
      <td>1429.573941</td>
      <td>501.221941</td>
      <td>3.883578</td>
      <td>207300.912353</td>
      </tr>
      <tr>
      <th>std</th>
      <td>2.005166</td>
      <td>2.137340</td>
      <td>12.586937</td>
      <td>2179.947071</td>
      <td>421.499452</td>
      <td>1147.852959</td>
      <td>384.520841</td>
      <td>1.908157</td>
      <td>115983.764387</td>
      </tr>
      <tr>
      <th>min</th>
      <td>-124.350000</td>
      <td>32.540000</td>
      <td>1.000000</td>
      <td>2.000000</td>
      <td>1.000000</td>
      <td>3.000000</td>
      <td>1.000000</td>
      <td>0.499900</td>
      <td>14999.000000</td>
      </tr>
      <tr>
      <th>25%</th>
      <td>-121.790000</td>
      <td>33.930000</td>
      <td>18.000000</td>
      <td>1462.000000</td>
      <td>297.000000</td>
      <td>790.000000</td>
      <td>282.000000</td>
      <td>2.566375</td>
      <td>119400.000000</td>
      </tr>
      <tr>
      <th>50%</th>
      <td>-118.490000</td>
      <td>34.250000</td>
      <td>29.000000</td>
      <td>2127.000000</td>
      <td>434.000000</td>
      <td>1167.000000</td>
      <td>409.000000</td>
      <td>3.544600</td>
      <td>180400.000000</td>
      </tr>
      <tr>
      <th>75%</th>
      <td>-118.000000</td>
      <td>37.720000</td>
      <td>37.000000</td>
      <td>3151.250000</td>
      <td>648.250000</td>
      <td>1721.000000</td>
      <td>605.250000</td>
      <td>4.767000</td>
      <td>265000.000000</td>
      </tr>
      <tr>
      <th>max</th>
      <td>-114.310000</td>
      <td>41.950000</td>
      <td>52.000000</td>
      <td>37937.000000</td>
      <td>6445.000000</td>
      <td>35682.000000</td>
      <td>6082.000000</td>
      <td>15.000100</td>
      <td>500001.000000</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.6.-Ordenaci%C3%B3n-del-DataFrame">4.6. Ordenación del <code>DataFrame</code><a class="anchor-link" href="#4.6.-Ordenaci%C3%B3n-del-DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 25" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden ordenar alfabéticamente las filas de un <code>DataFrame</code> mediante el método <code>sort_index()</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv"</span><span class="p">)</span>
      <span class="n">california_housing_train</span><span class="o">.</span><span class="n">sort_index</span><span class="p">()</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[108]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>-114.31</td>
      <td>34.19</td>
      <td>15.0</td>
      <td>5612.0</td>
      <td>1283.0</td>
      <td>1015.0</td>
      <td>472.0</td>
      <td>1.4936</td>
      <td>66900.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>-114.47</td>
      <td>34.40</td>
      <td>19.0</td>
      <td>7650.0</td>
      <td>1901.0</td>
      <td>1129.0</td>
      <td>463.0</td>
      <td>1.8200</td>
      <td>80100.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>-114.56</td>
      <td>33.69</td>
      <td>17.0</td>
      <td>720.0</td>
      <td>174.0</td>
      <td>333.0</td>
      <td>117.0</td>
      <td>1.6509</td>
      <td>85700.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>-114.57</td>
      <td>33.64</td>
      <td>14.0</td>
      <td>1501.0</td>
      <td>337.0</td>
      <td>515.0</td>
      <td>226.0</td>
      <td>3.1917</td>
      <td>73400.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>-114.57</td>
      <td>33.57</td>
      <td>20.0</td>
      <td>1454.0</td>
      <td>326.0</td>
      <td>624.0</td>
      <td>262.0</td>
      <td>1.9250</td>
      <td>65500.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como en este caso las filas ya estaban ordenadas, establecemos <code>ascending=False</code> para que el orden sea al revés</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">sort_index</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[109]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>16999</th>
      <td>-124.35</td>
      <td>40.54</td>
      <td>52.0</td>
      <td>1820.0</td>
      <td>300.0</td>
      <td>806.0</td>
      <td>270.0</td>
      <td>3.0147</td>
      <td>94600.0</td>
      </tr>
      <tr>
      <th>16998</th>
      <td>-124.30</td>
      <td>41.80</td>
      <td>19.0</td>
      <td>2672.0</td>
      <td>552.0</td>
      <td>1298.0</td>
      <td>478.0</td>
      <td>1.9797</td>
      <td>85800.0</td>
      </tr>
      <tr>
      <th>16997</th>
      <td>-124.30</td>
      <td>41.84</td>
      <td>17.0</td>
      <td>2677.0</td>
      <td>531.0</td>
      <td>1244.0</td>
      <td>456.0</td>
      <td>3.0313</td>
      <td>103600.0</td>
      </tr>
      <tr>
      <th>16996</th>
      <td>-124.27</td>
      <td>40.69</td>
      <td>36.0</td>
      <td>2349.0</td>
      <td>528.0</td>
      <td>1194.0</td>
      <td>465.0</td>
      <td>2.5179</td>
      <td>79000.0</td>
      </tr>
      <tr>
      <th>16995</th>
      <td>-124.26</td>
      <td>40.58</td>
      <td>52.0</td>
      <td>2217.0</td>
      <td>394.0</td>
      <td>907.0</td>
      <td>369.0</td>
      <td>2.3571</td>
      <td>111400.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si lo que se quiere es ordenar las columnas hay que introducir <code>axis=1</code> ya que por defecto es <code>0</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">sort_index</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[110]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>households</th>
      <th>housing_median_age</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>median_house_value</th>
      <th>median_income</th>
      <th>population</th>
      <th>total_bedrooms</th>
      <th>total_rooms</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>472.0</td>
      <td>15.0</td>
      <td>34.19</td>
      <td>-114.31</td>
      <td>66900.0</td>
      <td>1.4936</td>
      <td>1015.0</td>
      <td>1283.0</td>
      <td>5612.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>463.0</td>
      <td>19.0</td>
      <td>34.40</td>
      <td>-114.47</td>
      <td>80100.0</td>
      <td>1.8200</td>
      <td>1129.0</td>
      <td>1901.0</td>
      <td>7650.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>117.0</td>
      <td>17.0</td>
      <td>33.69</td>
      <td>-114.56</td>
      <td>85700.0</td>
      <td>1.6509</td>
      <td>333.0</td>
      <td>174.0</td>
      <td>720.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>226.0</td>
      <td>14.0</td>
      <td>33.64</td>
      <td>-114.57</td>
      <td>73400.0</td>
      <td>3.1917</td>
      <td>515.0</td>
      <td>337.0</td>
      <td>1501.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>262.0</td>
      <td>20.0</td>
      <td>33.57</td>
      <td>-114.57</td>
      <td>65500.0</td>
      <td>1.9250</td>
      <td>624.0</td>
      <td>326.0</td>
      <td>1454.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si lo que queremos es ordenar el <code>DataFrame</code> a través de una columna determinada, tenemos que usar el método <code>sort_values()</code> e indicarle la etiqueta de la columna sobre la que se quiere ordenar</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s1">'median_house_value'</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[111]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>568</th>
      <td>-117.02</td>
      <td>36.40</td>
      <td>19.0</td>
      <td>619.0</td>
      <td>239.0</td>
      <td>490.0</td>
      <td>164.0</td>
      <td>2.1000</td>
      <td>14999.0</td>
      </tr>
      <tr>
      <th>16643</th>
      <td>-122.74</td>
      <td>39.71</td>
      <td>16.0</td>
      <td>255.0</td>
      <td>73.0</td>
      <td>85.0</td>
      <td>38.0</td>
      <td>1.6607</td>
      <td>14999.0</td>
      </tr>
      <tr>
      <th>16801</th>
      <td>-123.17</td>
      <td>40.31</td>
      <td>36.0</td>
      <td>98.0</td>
      <td>28.0</td>
      <td>18.0</td>
      <td>8.0</td>
      <td>0.5360</td>
      <td>14999.0</td>
      </tr>
      <tr>
      <th>3226</th>
      <td>-117.86</td>
      <td>34.24</td>
      <td>52.0</td>
      <td>803.0</td>
      <td>267.0</td>
      <td>628.0</td>
      <td>225.0</td>
      <td>4.1932</td>
      <td>14999.0</td>
      </tr>
      <tr>
      <th>7182</th>
      <td>-118.33</td>
      <td>34.15</td>
      <td>39.0</td>
      <td>493.0</td>
      <td>168.0</td>
      <td>259.0</td>
      <td>138.0</td>
      <td>2.3667</td>
      <td>17500.0</td>
      </tr>
      <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      </tr>
      <tr>
      <th>15834</th>
      <td>-122.42</td>
      <td>37.81</td>
      <td>52.0</td>
      <td>1314.0</td>
      <td>317.0</td>
      <td>473.0</td>
      <td>250.0</td>
      <td>4.3472</td>
      <td>500001.0</td>
      </tr>
      <tr>
      <th>7927</th>
      <td>-118.40</td>
      <td>33.87</td>
      <td>38.0</td>
      <td>2398.0</td>
      <td>431.0</td>
      <td>911.0</td>
      <td>392.0</td>
      <td>5.2319</td>
      <td>500001.0</td>
      </tr>
      <tr>
      <th>3546</th>
      <td>-117.90</td>
      <td>33.63</td>
      <td>28.0</td>
      <td>2370.0</td>
      <td>352.0</td>
      <td>832.0</td>
      <td>347.0</td>
      <td>7.1148</td>
      <td>500001.0</td>
      </tr>
      <tr>
      <th>7924</th>
      <td>-118.40</td>
      <td>33.88</td>
      <td>35.0</td>
      <td>1060.0</td>
      <td>191.0</td>
      <td>444.0</td>
      <td>196.0</td>
      <td>8.0015</td>
      <td>500001.0</td>
      </tr>
      <tr>
      <th>14011</th>
      <td>-122.04</td>
      <td>37.26</td>
      <td>24.0</td>
      <td>4973.0</td>
      <td>709.0</td>
      <td>1692.0</td>
      <td>696.0</td>
      <td>7.8627</td>
      <td>500001.0</td>
      </tr>
      </tbody>
      </table>
      <p>17000 rows × 9 columns</p>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.7.-Estad%C3%ADsticas-del-DataFrame">4.7. Estadísticas del DataFrame<a class="anchor-link" href="#4.7.-Estad%C3%ADsticas-del-DataFrame"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 26" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden obtener estadísticas del <code>DataFrame</code>, como la media, la moda, la desviación estándar</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"media:</span><span class="se">\\n</span><span class="si">{</span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n\\n</span><span class="s2">desviación estandar:</span><span class="se">\\n</span><span class="si">{</span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">std</span><span class="p">()</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'media:',
          'longitude               -119.562108',
          'latitude                  35.625225',
          'housing_median_age        28.589353',
          'total_rooms             2643.664412',
          'total_bedrooms           539.410824',
          'population              1429.573941',
          'households               501.221941',
          'median_income              3.883578',
          'median_house_value    207300.912353',
          'dtype: float64',
          'desviación estandar:',
          'longitude                  2.005166',
          'latitude                   2.137340',
          'housing_median_age        12.586937',
          'total_rooms             2179.947071',
          'total_bedrooms           421.499452',
          'population              1147.852959',
          'households               384.520841',
          'median_income              1.908157',
          'median_house_value    115983.764387',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se quieren obtener las estadísticas sobre las filas y no sobre las columnas hay que indicarlo mediante <code>axis=1</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"media:</span><span class="se">\\n</span><span class="si">{</span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n\\n</span><span class="s2">desviación estandar:</span><span class="se">\\n</span><span class="si">{</span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">std</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'media:',
          '0         8357.597067',
          '1        10131.527778',
          '2         9664.642322',
          '3         8435.029078',
          '4         7567.436111',
          '             ...     ',
          '16995    12806.408567',
          '16996     9276.770878',
          '16997    12049.507922',
          '16998    10082.053300',
          '16999    10863.022744',
          'Length: 17000, dtype: float64',
          'desviación estandar:',
          '0        22026.612445',
          '1        26352.939272',
          '2        28514.316588',
          '3        24366.754747',
          '4        21730.014569',
          '             ...     ',
          '16995    36979.676899',
          '16996    26158.006771',
          '16997    34342.876792',
          '16998    28408.152329',
          '16999    31407.119788',
          'Length: 17000, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Otra cosa útil que se puede obtener de los <code>DataFrame</code>s es, por ejemplo, el número de veces que se repite cada ítem de una columna</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">california_housing_train</span><span class="p">[</span><span class="s2">"total_rooms"</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1582.0     16',
          '1527.0     15',
          '1717.0     14',
          '1471.0     14',
          '1703.0     14',
          '           ..',
          '157.0       1',
          '2760.0      1',
          '458.0       1',
          '10239.0     1',
          '4068.0      1',
          'Name: total_rooms, Length: 5533, dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por ejemplo, podemos ver que hay un total de 16 casas con 1582 habitaciones.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.8.-Memoria-usada">4.8. Memoria usada<a class="anchor-link" href="#4.8.-Memoria-usada"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 27" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver la memoria que usa el DataFrame</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">memory_usage</span><span class="p">(</span><span class="n">deep</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Index                    128',
          'longitude             136000',
          'latitude              136000',
          'housing_median_age    136000',
          'total_rooms           136000',
          'total_bedrooms        136000',
          'population            136000',
          'households            136000',
          'median_income         136000',
          'median_house_value    136000',
          'dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="5.-Adici%C3%B3n-de-datos">5. Adición de datos<a class="anchor-link" href="#5.-Adici%C3%B3n-de-datos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 28" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.1.-Adici%C3%B3n-de-columnas">5.1. Adición de columnas<a class="anchor-link" href="#5.1.-Adici%C3%B3n-de-columnas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 29" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden añadir columnas fácilmente como operaciones de otras columnas</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      
      <span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"uno"</span><span class="p">]</span> <span class="o">+</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"dos"</span><span class="p">]</span>
      <span class="n">dataframe</span><span class="p">[</span><span class="s2">"flag"</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mf">7.0</span>
      
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      <th>flag</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>False</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>7.0</td>
      <td>False</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      <td>9.0</td>
      <td>True</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      <td>NaN</td>
      <td>False</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>También se pueden añadir columnas indicando qué valor tendrán todos sus items</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span><span class="s2">"constante"</span><span class="p">]</span> <span class="o">=</span> <span class="mf">8.0</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      <th>flag</th>
      <th>constante</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>False</td>
      <td>8.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>7.0</td>
      <td>False</td>
      <td>8.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      <td>9.0</td>
      <td>True</td>
      <td>8.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      <td>NaN</td>
      <td>False</td>
      <td>8.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se añade una <code>Serie</code> que no tiene el mismo número de índices que el <code>DataFrame</code>, esta se ajustará al número de índices del <code>DataFrame</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span><span class="s2">"Menos indices"</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"uno"</span><span class="p">][:</span><span class="mi">2</span><span class="p">]</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      <th>flag</th>
      <th>constante</th>
      <th>Menos indices</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>False</td>
      <td>8.0</td>
      <td>1.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>7.0</td>
      <td>False</td>
      <td>8.0</td>
      <td>2.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      <td>9.0</td>
      <td>True</td>
      <td>8.0</td>
      <td>NaN</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      <td>NaN</td>
      <td>False</td>
      <td>8.0</td>
      <td>NaN</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Con los métodos anteriores la columna se añadía al final, pero si se quiere añadir la columna en una posición determinada se puede usar el método <code>insert()</code>.
      Por ejemplo, si se quiere añadir una columna en la posición 3 (teniendo en cuenta que se empieza a contar desde la posición 0), que el nombre de la columna sea <em>columna insertada</em> y que su valor sea el doble del de la columna <em>tres</em>, se haría de la siguiente manera</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s2">"columna insertada"</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      <th>columna insertada</th>
      <th>flag</th>
      <th>constante</th>
      <th>Menos indices</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>10.0</td>
      <td>False</td>
      <td>8.0</td>
      <td>1.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>7.0</td>
      <td>14.0</td>
      <td>False</td>
      <td>8.0</td>
      <td>2.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      <td>9.0</td>
      <td>18.0</td>
      <td>True</td>
      <td>8.0</td>
      <td>NaN</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>False</td>
      <td>8.0</td>
      <td>NaN</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se quiere añadir más de una columna por comando, se puede usar el método <code>assign()</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">assign</span><span class="p">(</span>
          <span class="n">columna_asignada1</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"uno"</span><span class="p">]</span> <span class="o">*</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">],</span>
          <span class="n">columna_asignada2</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"dos"</span><span class="p">]</span> <span class="o">*</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">],</span>
          <span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      <th>columna insertada</th>
      <th>flag</th>
      <th>constante</th>
      <th>Menos indices</th>
      <th>columna_asignada1</th>
      <th>columna_asignada2</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>10.0</td>
      <td>False</td>
      <td>8.0</td>
      <td>1.0</td>
      <td>5.0</td>
      <td>20.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>7.0</td>
      <td>14.0</td>
      <td>False</td>
      <td>8.0</td>
      <td>2.0</td>
      <td>14.0</td>
      <td>35.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      <td>9.0</td>
      <td>18.0</td>
      <td>True</td>
      <td>8.0</td>
      <td>NaN</td>
      <td>27.0</td>
      <td>54.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>False</td>
      <td>8.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.2.-Adici%C3%B3n-de-filas">5.2. Adición de filas<a class="anchor-link" href="#5.2.-Adici%C3%B3n-de-filas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 30" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      
      <span class="n">dataframe</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[20]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos añadir una fila al final con el método <code>concat</code> (que veremos más en detalle después)</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="p">[</span><span class="mf">10.0</span><span class="p">],</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="p">[</span><span class="mf">20.0</span><span class="p">]</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe</span><span class="p">,</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)])</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[21]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      </tr>
      <tr>
      <th>0</th>
      <td>10.0</td>
      <td>20.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que se ha añadido la columna al final, pero que tiene el índice cero, así que reordenamos los índices mediante el método <code>reset_index(drop=True)</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[23]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>index</th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>0</td>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>1</td>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>2</td>
      <td>3.0</td>
      <td>6.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>3</td>
      <td>NaN</td>
      <td>7.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>0</td>
      <td>10.0</td>
      <td>20.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="6.-Eliminaci%C3%B3n-de-datos">6. Eliminación de datos<a class="anchor-link" href="#6.-Eliminaci%C3%B3n-de-datos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 31" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.1.-Eliminaci%C3%B3n-de-columnas">6.1. Eliminación de columnas<a class="anchor-link" href="#6.1.-Eliminaci%C3%B3n-de-columnas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 32" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se puede eliminar una columna determinada mediante el método <code>pop()</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s2">"constante"</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      <th>columna insertada</th>
      <th>flag</th>
      <th>Menos indices</th>
      <th>columna_asignada1</th>
      <th>columna_asignada2</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>10.0</td>
      <td>False</td>
      <td>1.0</td>
      <td>5.0</td>
      <td>20.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>7.0</td>
      <td>14.0</td>
      <td>False</td>
      <td>2.0</td>
      <td>14.0</td>
      <td>35.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      <td>9.0</td>
      <td>18.0</td>
      <td>True</td>
      <td>NaN</td>
      <td>27.0</td>
      <td>54.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>False</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O mediante <code>del</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="k">del</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"flag"</span><span class="p">]</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      <th>columna insertada</th>
      <th>Menos indices</th>
      <th>columna_asignada1</th>
      <th>columna_asignada2</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>10.0</td>
      <td>1.0</td>
      <td>5.0</td>
      <td>20.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>7.0</td>
      <td>14.0</td>
      <td>2.0</td>
      <td>14.0</td>
      <td>35.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      <td>9.0</td>
      <td>18.0</td>
      <td>NaN</td>
      <td>27.0</td>
      <td>54.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.1.-Eliminaci%C3%B3n-de-filas">6.1. Eliminación de filas<a class="anchor-link" href="#6.1.-Eliminaci%C3%B3n-de-filas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 33" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span> <span class="mf">8.0</span><span class="p">,</span> <span class="mf">9.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">11.0</span><span class="p">,</span> <span class="mf">12.0</span><span class="p">,</span> <span class="mf">13.0</span><span class="p">,</span> <span class="mf">14.0</span><span class="p">,</span> <span class="mf">15.0</span><span class="p">,</span> <span class="mf">16.0</span><span class="p">,</span> <span class="mf">17.0</span><span class="p">,</span> <span class="mf">18.0</span><span class="p">,</span> <span class="mf">19.0</span><span class="p">,</span> <span class="mf">20.0</span><span class="p">]),</span>
          <span class="s2">"tres"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">21.0</span><span class="p">,</span> <span class="mf">22.0</span><span class="p">,</span> <span class="mf">23.0</span><span class="p">,</span> <span class="mf">24.0</span><span class="p">,</span> <span class="mf">25.0</span><span class="p">,</span> <span class="mf">26.0</span><span class="p">,</span> <span class="mf">27.0</span><span class="p">,</span> <span class="mf">28.0</span><span class="p">,</span> <span class="mf">29.0</span><span class="p">,</span> <span class="mf">30.0</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      
      <span class="n">dataframe</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[49]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>11.0</td>
      <td>21.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>12.0</td>
      <td>22.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>13.0</td>
      <td>23.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>4.0</td>
      <td>14.0</td>
      <td>24.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>5.0</td>
      <td>15.0</td>
      <td>25.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos eliminar una fila, podemos usar el método <code>drop</code>, especificando su posición. Por ejemplo, si queremos eliminar la fila de la posición 1</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[50]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>11.0</td>
      <td>21.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>13.0</td>
      <td>23.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>4.0</td>
      <td>14.0</td>
      <td>24.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>5.0</td>
      <td>15.0</td>
      <td>25.0</td>
      </tr>
      <tr>
      <th>5</th>
      <td>6.0</td>
      <td>16.0</td>
      <td>26.0</td>
      </tr>
      <tr>
      <th>6</th>
      <td>7.0</td>
      <td>17.0</td>
      <td>27.0</td>
      </tr>
      <tr>
      <th>7</th>
      <td>8.0</td>
      <td>18.0</td>
      <td>28.0</td>
      </tr>
      <tr>
      <th>8</th>
      <td>9.0</td>
      <td>19.0</td>
      <td>29.0</td>
      </tr>
      <tr>
      <th>9</th>
      <td>10.0</td>
      <td>20.0</td>
      <td>30.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos eliminar la última fila</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">dataframe</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[51]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>11.0</td>
      <td>21.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>13.0</td>
      <td>23.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>4.0</td>
      <td>14.0</td>
      <td>24.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>5.0</td>
      <td>15.0</td>
      <td>25.0</td>
      </tr>
      <tr>
      <th>5</th>
      <td>6.0</td>
      <td>16.0</td>
      <td>26.0</td>
      </tr>
      <tr>
      <th>6</th>
      <td>7.0</td>
      <td>17.0</td>
      <td>27.0</td>
      </tr>
      <tr>
      <th>7</th>
      <td>8.0</td>
      <td>18.0</td>
      <td>28.0</td>
      </tr>
      <tr>
      <th>9</th>
      <td>10.0</td>
      <td>20.0</td>
      <td>30.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si lo que queremos es eliminar un rango de filas</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[52]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>11.0</td>
      <td>21.0</td>
      </tr>
      <tr>
      <th>5</th>
      <td>6.0</td>
      <td>16.0</td>
      <td>26.0</td>
      </tr>
      <tr>
      <th>6</th>
      <td>7.0</td>
      <td>17.0</td>
      <td>27.0</td>
      </tr>
      <tr>
      <th>7</th>
      <td>8.0</td>
      <td>18.0</td>
      <td>28.0</td>
      </tr>
      <tr>
      <th>9</th>
      <td>10.0</td>
      <td>20.0</td>
      <td>30.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si lo que queremos es eliminar un conjunto de filas determinado</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">drop</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">])</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[53]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>11.0</td>
      <td>21.0</td>
      </tr>
      <tr>
      <th>6</th>
      <td>7.0</td>
      <td>17.0</td>
      <td>27.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al igual que cuando añadimos filas, vemos que se han eliminado algunos índices, así que reordenamos los índices mediante el método <code>reset_index(drop=True)</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[54]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>11.0</td>
      <td>21.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>7.0</td>
      <td>17.0</td>
      <td>27.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="7.-Operaciones-sobre-DataFrames">7. Operaciones sobre DataFrames<a class="anchor-link" href="#7.-Operaciones-sobre-DataFrames"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 34" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden realizar operaciones sobre los <code>DataFrame</code>s al igual que se puede hacer con Numpy</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span> <span class="mf">8.0</span><span class="p">,</span> <span class="mf">9.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">11.0</span><span class="p">,</span> <span class="mf">12.0</span><span class="p">,</span> <span class="mf">13.0</span><span class="p">,</span> <span class="mf">14.0</span><span class="p">,</span> <span class="mf">15.0</span><span class="p">,</span> <span class="mf">16.0</span><span class="p">,</span> <span class="mf">17.0</span><span class="p">,</span> <span class="mf">18.0</span><span class="p">,</span> <span class="mf">19.0</span><span class="p">,</span> <span class="mf">20.0</span><span class="p">]),</span>
          <span class="s2">"tres"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">21.0</span><span class="p">,</span> <span class="mf">22.0</span><span class="p">,</span> <span class="mf">23.0</span><span class="p">,</span> <span class="mf">24.0</span><span class="p">,</span> <span class="mf">25.0</span><span class="p">,</span> <span class="mf">26.0</span><span class="p">,</span> <span class="mf">27.0</span><span class="p">,</span> <span class="mf">28.0</span><span class="p">,</span> <span class="mf">29.0</span><span class="p">,</span> <span class="mf">30.0</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      
      <span class="n">dataframe</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[58]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>11.0</td>
      <td>21.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>12.0</td>
      <td>22.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>13.0</td>
      <td>23.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>4.0</td>
      <td>14.0</td>
      <td>24.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>5.0</td>
      <td>15.0</td>
      <td>25.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span> <span class="p">[</span><span class="s2">"uno"</span><span class="p">,</span> <span class="s2">"dos"</span><span class="p">,</span> <span class="s2">"tres"</span><span class="p">]</span> <span class="p">]</span> <span class="o">*</span> <span class="mi">2</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[59]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>2.0</td>
      <td>22.0</td>
      <td>42.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>4.0</td>
      <td>24.0</td>
      <td>44.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>6.0</td>
      <td>26.0</td>
      <td>46.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>8.0</td>
      <td>28.0</td>
      <td>48.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>10.0</td>
      <td>30.0</td>
      <td>50.0</td>
      </tr>
      <tr>
      <th>5</th>
      <td>12.0</td>
      <td>32.0</td>
      <td>52.0</td>
      </tr>
      <tr>
      <th>6</th>
      <td>14.0</td>
      <td>34.0</td>
      <td>54.0</td>
      </tr>
      <tr>
      <th>7</th>
      <td>16.0</td>
      <td>36.0</td>
      <td>56.0</td>
      </tr>
      <tr>
      <th>8</th>
      <td>18.0</td>
      <td>38.0</td>
      <td>58.0</td>
      </tr>
      <tr>
      <th>9</th>
      <td>20.0</td>
      <td>40.0</td>
      <td>60.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">dataframe</span><span class="p">[</span> <span class="p">[</span><span class="s2">"uno"</span><span class="p">,</span> <span class="s2">"dos"</span><span class="p">,</span> <span class="s2">"tres"</span><span class="p">]</span> <span class="p">])</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[60]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>2.718282</td>
      <td>5.987414e+04</td>
      <td>1.318816e+09</td>
      </tr>
      <tr>
      <th>1</th>
      <td>7.389056</td>
      <td>1.627548e+05</td>
      <td>3.584913e+09</td>
      </tr>
      <tr>
      <th>2</th>
      <td>20.085537</td>
      <td>4.424134e+05</td>
      <td>9.744803e+09</td>
      </tr>
      <tr>
      <th>3</th>
      <td>54.598150</td>
      <td>1.202604e+06</td>
      <td>2.648912e+10</td>
      </tr>
      <tr>
      <th>4</th>
      <td>148.413159</td>
      <td>3.269017e+06</td>
      <td>7.200490e+10</td>
      </tr>
      <tr>
      <th>5</th>
      <td>403.428793</td>
      <td>8.886111e+06</td>
      <td>1.957296e+11</td>
      </tr>
      <tr>
      <th>6</th>
      <td>1096.633158</td>
      <td>2.415495e+07</td>
      <td>5.320482e+11</td>
      </tr>
      <tr>
      <th>7</th>
      <td>2980.957987</td>
      <td>6.565997e+07</td>
      <td>1.446257e+12</td>
      </tr>
      <tr>
      <th>8</th>
      <td>8103.083928</td>
      <td>1.784823e+08</td>
      <td>3.931334e+12</td>
      </tr>
      <tr>
      <th>9</th>
      <td>22026.465795</td>
      <td>4.851652e+08</td>
      <td>1.068647e+13</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se quiere realizar operaciones más complejas se puede utilizar el método <code>apply()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">max</span><span class="p">()</span> <span class="o">-</span> <span class="n">x</span><span class="o">.</span><span class="n">min</span><span class="p">())</span>',
          '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'uno     9.0',
          'dos     9.0',
          'tres    9.0',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se ha aplicado una función <code>lambda</code> porque es una función sencilla, pero en caso de querer aplicar funciones más complejas, las podemos definir y aplicar.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>',
          '    <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>',
          '        <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="mi">5</span><span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '    <span class="k">elif</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">:</span>',
          '        <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">tan</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '    <span class="k">else</span><span class="p">:</span>',
          '        <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">log10</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">log2</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '    ',
          '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">funcion</span><span class="p">)</span>',
          '',
          '<span class="n">dataframe</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'uno     8102.277265',
          'dos     8102.277265',
          'tres    8102.277265',
          'dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Utilizar el método <code>apply</code> en un DataFrame es mucho más rápido que hacer un <code>for</code> por cada una de las líneas y realizar la operación</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv"</span><span class="p">)</span>
      <span class="n">california_housing_train</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[64]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>-114.31</td>
      <td>34.19</td>
      <td>15.0</td>
      <td>5612.0</td>
      <td>1283.0</td>
      <td>1015.0</td>
      <td>472.0</td>
      <td>1.4936</td>
      <td>66900.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>-114.47</td>
      <td>34.40</td>
      <td>19.0</td>
      <td>7650.0</td>
      <td>1901.0</td>
      <td>1129.0</td>
      <td>463.0</td>
      <td>1.8200</td>
      <td>80100.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>-114.56</td>
      <td>33.69</td>
      <td>17.0</td>
      <td>720.0</td>
      <td>174.0</td>
      <td>333.0</td>
      <td>117.0</td>
      <td>1.6509</td>
      <td>85700.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>-114.57</td>
      <td>33.64</td>
      <td>14.0</td>
      <td>1501.0</td>
      <td>337.0</td>
      <td>515.0</td>
      <td>226.0</td>
      <td>3.1917</td>
      <td>73400.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>-114.57</td>
      <td>33.57</td>
      <td>20.0</td>
      <td>1454.0</td>
      <td>326.0</td>
      <td>624.0</td>
      <td>262.0</td>
      <td>1.9250</td>
      <td>65500.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a calcular el porcentaje de dormitorios del total de habitaciones</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="p">[</span><span class="s2">"percent_bedrooms"</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>
      <span class="o">%</span><span class="k">time</span> california_housing_train["percent_bedrooms"] = california_housing_train.apply(lambda x: x["total_bedrooms"] / x["total_rooms"], axis=1)
      <span class="n">california_housing_train</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>CPU times: user 309 ms, sys: 86 µs, total: 309 ms
      Wall time: 309 ms
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[74]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      <th>percent_bedrooms</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>-114.31</td>
      <td>34.19</td>
      <td>15.0</td>
      <td>5612.0</td>
      <td>1283.0</td>
      <td>1015.0</td>
      <td>472.0</td>
      <td>1.4936</td>
      <td>66900.0</td>
      <td>0.228617</td>
      </tr>
      <tr>
      <th>1</th>
      <td>-114.47</td>
      <td>34.40</td>
      <td>19.0</td>
      <td>7650.0</td>
      <td>1901.0</td>
      <td>1129.0</td>
      <td>463.0</td>
      <td>1.8200</td>
      <td>80100.0</td>
      <td>0.248497</td>
      </tr>
      <tr>
      <th>2</th>
      <td>-114.56</td>
      <td>33.69</td>
      <td>17.0</td>
      <td>720.0</td>
      <td>174.0</td>
      <td>333.0</td>
      <td>117.0</td>
      <td>1.6509</td>
      <td>85700.0</td>
      <td>0.241667</td>
      </tr>
      <tr>
      <th>3</th>
      <td>-114.57</td>
      <td>33.64</td>
      <td>14.0</td>
      <td>1501.0</td>
      <td>337.0</td>
      <td>515.0</td>
      <td>226.0</td>
      <td>3.1917</td>
      <td>73400.0</td>
      <td>0.224517</td>
      </tr>
      <tr>
      <th>4</th>
      <td>-114.57</td>
      <td>33.57</td>
      <td>20.0</td>
      <td>1454.0</td>
      <td>326.0</td>
      <td>624.0</td>
      <td>262.0</td>
      <td>1.9250</td>
      <td>65500.0</td>
      <td>0.224209</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="p">[</span><span class="s2">"percent_bedrooms"</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>
      <span class="o">%</span><span class="k">time</span> for i in range(len(california_housing_train)): california_housing_train["percent_bedrooms"][i] = california_housing_train["total_bedrooms"][i] / california_housing_train["total_rooms"][i]
      <span class="n">california_housing_train</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>/home/wallabot/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: 
      A value is trying to be set on a copy of a slice from a DataFrame
      
      See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
        """Entry point for launching an IPython kernel.
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>CPU times: user 1.72 s, sys: 12 ms, total: 1.73 s
      Wall time: 1.72 s
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[77]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      <th>percent_bedrooms</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>-114.31</td>
      <td>34.19</td>
      <td>15.0</td>
      <td>5612.0</td>
      <td>1283.0</td>
      <td>1015.0</td>
      <td>472.0</td>
      <td>1.4936</td>
      <td>66900.0</td>
      <td>0.228617</td>
      </tr>
      <tr>
      <th>1</th>
      <td>-114.47</td>
      <td>34.40</td>
      <td>19.0</td>
      <td>7650.0</td>
      <td>1901.0</td>
      <td>1129.0</td>
      <td>463.0</td>
      <td>1.8200</td>
      <td>80100.0</td>
      <td>0.248497</td>
      </tr>
      <tr>
      <th>2</th>
      <td>-114.56</td>
      <td>33.69</td>
      <td>17.0</td>
      <td>720.0</td>
      <td>174.0</td>
      <td>333.0</td>
      <td>117.0</td>
      <td>1.6509</td>
      <td>85700.0</td>
      <td>0.241667</td>
      </tr>
      <tr>
      <th>3</th>
      <td>-114.57</td>
      <td>33.64</td>
      <td>14.0</td>
      <td>1501.0</td>
      <td>337.0</td>
      <td>515.0</td>
      <td>226.0</td>
      <td>3.1917</td>
      <td>73400.0</td>
      <td>0.224517</td>
      </tr>
      <tr>
      <th>4</th>
      <td>-114.57</td>
      <td>33.57</td>
      <td>20.0</td>
      <td>1454.0</td>
      <td>326.0</td>
      <td>624.0</td>
      <td>262.0</td>
      <td>1.9250</td>
      <td>65500.0</td>
      <td>0.224209</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Con la función <code>lambda</code> ha tardado unos 300 ms, mientras que con el bucle <code>for</code> ha tardado más de 1 segundo</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="8.-Transpuesta">8. Transpuesta<a class="anchor-link" href="#8.-Transpuesta"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 35" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se puede hacer la transpuesta de un <code>DataFrame</code> mediante el método <code>T</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"fila a"</span><span class="p">,</span> <span class="s2">"fila b"</span><span class="p">,</span> <span class="s2">"fila c"</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"fila a"</span><span class="p">,</span> <span class="s2">"fila b"</span><span class="p">,</span> <span class="s2">"fila c"</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      
      <span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"uno"</span><span class="p">]</span> <span class="o">+</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"dos"</span><span class="p">]</span>
      <span class="n">dataframe</span><span class="p">[</span><span class="s2">"flag"</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mf">7.0</span>
      
      <span class="n">dataframe</span><span class="o">.</span><span class="n">T</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>fila a</th>
      <th>fila b</th>
      <th>fila c</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>uno</th>
      <td>1</td>
      <td>2</td>
      <td>3</td>
      </tr>
      <tr>
      <th>dos</th>
      <td>4</td>
      <td>5</td>
      <td>6</td>
      </tr>
      <tr>
      <th>tres</th>
      <td>5</td>
      <td>7</td>
      <td>9</td>
      </tr>
      <tr>
      <th>flag</th>
      <td>False</td>
      <td>False</td>
      <td>True</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="9.-Conversi%C3%B3n-a-Numpy">9. Conversión a Numpy<a class="anchor-link" href="#9.-Conversi%C3%B3n-a-Numpy"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 36" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se quiere convertir una <code>Serie</code> o <code>DataFrame</code> a NumPy se puede usar el método <code>to_numpy()</code> o usar la función <code>np.asarray()</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"fila a"</span><span class="p">,</span> <span class="s2">"fila b"</span><span class="p">,</span> <span class="s2">"fila c"</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"fila a"</span><span class="p">,</span> <span class="s2">"fila b"</span><span class="p">,</span> <span class="s2">"fila c"</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      
      <span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"uno"</span><span class="p">]</span> <span class="o">+</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"dos"</span><span class="p">]</span>
      <span class="n">dataframe</span><span class="p">[</span><span class="s2">"flag"</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"tres"</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mf">7.0</span>
      
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      <th>tres</th>
      <th>flag</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>fila a</th>
      <td>1.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>False</td>
      </tr>
      <tr>
      <th>fila b</th>
      <td>2.0</td>
      <td>5.0</td>
      <td>7.0</td>
      <td>False</td>
      </tr>
      <tr>
      <th>fila c</th>
      <td>3.0</td>
      <td>6.0</td>
      <td>9.0</td>
      <td>True</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">matriz_np</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span>',
          '<span class="n">matriz_np</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([[1.0, 4.0, 5.0, False],',
          '       [2.0, 5.0, 7.0, False],',
          '       [3.0, 6.0, 9.0, True]], dtype=object)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">matriz_np</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">dataframe</span><span class="p">)</span>',
          '<span class="n">matriz_np</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'array([[1.0, 4.0, 5.0, False],',
          '       [2.0, 5.0, 7.0, False],',
          '       [3.0, 6.0, 9.0, True]], dtype=object)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Este ejemplo no es el más indicado, ya que mezcla números con booleanos, y como ya explicamos en el anterior post <a href="https://maximofn.com/calculo-matricial-con-numpy/">Cálculo matricial con NumPy</a>, todos los elementos de un <code>ndarray</code> tienen que ser del mismo tipo.
      En este caso estamos mezclando números con booleanos, por lo que para solucionarlo NumPy los convierte todos a objetos
      Para solucionar esto nos quedamos solo con los números y los convertimos a un <code>ndarray</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">matriz_np</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span> <span class="p">[</span><span class="s2">"uno"</span><span class="p">,</span> <span class="s2">"dos"</span><span class="p">,</span> <span class="s2">"tres"</span><span class="p">]</span> <span class="p">]</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span>',
          '<span class="n">matriz_np</span><span class="p">,</span> <span class="n">matriz_np</span><span class="o">.</span><span class="n">dtype</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(array([[1., 4., 5.],',
          '        [2., 5., 7.],',
          '        [3., 6., 9.]]), dtype(\'float64\'))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora se puede ver que se ha creado un <code>ndarray</code> donde todos los datos son de tipo <code>float</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="10.-Lectura-de-datos-de-fuentes-externas">10. Lectura de datos de fuentes externas<a class="anchor-link" href="#10.-Lectura-de-datos-de-fuentes-externas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 37" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Una de las mayores fortalezas de Pandas es poder leer datos de archivos, por lo que no es necesario crear un <code>DataFrame</code> con los datos que se quieren procesar, sino que se pueden leer de un archivo
      De la misma manera que se pueden crear <code>DataFrame</code>s de archivos externos, también se pueden guardar <code>DataFrame</code>s en archivos, para así crearte tu propio set de datos, configurarlo de la manera que quieras y guardarlo en un archivo para poder usarlo más adelante</p>
      <p>En la siguiente tabla se muestran las funciones para leer y escribir archivos de distintos formatos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>|Formato|Tipo de archivo|Función de lectura|Función de escritura||---|---|---|---|
      |texto|CSV|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-read-csv-table" target="_blank" rel="nofollow noreferrer">read_csv</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-store-in-csv">to_csv</a>|
      |texto|Fixed-Width Text File|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-fwf-reader" target="_blank" rel="nofollow noreferrer">read_fwf</a>||
      |texto|JSON|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-json-reader" target="_blank" rel="nofollow noreferrer">read_json</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-json-writer">to_json</a>|
      |texto|HTML|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-read-html" target="_blank" rel="nofollow noreferrer">read_html</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-html">to_html</a>|
      |texto|Local clipboard|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-clipboard" target="_blank" rel="nofollow noreferrer">read_clipboard</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-clipboard">to_clipboard</a>|
      |binary|MS Excel|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-excel-reader" target="_blank" rel="nofollow noreferrer">read_excel</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-excel-writer">to_excel</a>|
      |binary|OpenDocument|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-ods" target="_blank" rel="nofollow noreferrer">read_excel</a>|
      |binary|HDF5 Format|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-hdf5" target="_blank" rel="nofollow noreferrer">read_hdf</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-hdf5">to_hdf</a>|
      |binary|Feather Format|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-feather" target="_blank" rel="nofollow noreferrer">read_feather</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-feather">to_feather</a>|
      |binary|Parquet Format|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-parquet" target="_blank" rel="nofollow noreferrer">read_parquet</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-parquet">to_parquet</a>|
      |binary|ORC Format|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-orc" target="_blank" rel="nofollow noreferrer">read_orc</a>||binary|Msgpack|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-msgpack">read_msgpack</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-msgpack">to_msgpack</a>|
      |binary|Stata|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-stata-reader" target="_blank" rel="nofollow noreferrer">read_stata</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-stata-writer">to_stata</a>|
      |binary|SAS|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sas-reader" target="_blank" rel="nofollow noreferrer">read_sas</a>||binary|SPSS|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-spss-reader">read_spss</a>||binary|Python Pickle Format|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-pickle">read_pickle</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-pickle">to_pickle</a>|
      |SQL|SQL|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sql" target="_blank" rel="nofollow noreferrer">read_sql</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sql">to_sql</a>|
      |SQL|Google BigQuery|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-bigquery" target="_blank" rel="nofollow noreferrer">read_gbq</a>|<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-bigquery">to_gbq</a>|</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="11.-Indexaci%C3%B3n-en-DataFrames">11. Indexación en DataFrames<a class="anchor-link" href="#11.-Indexaci%C3%B3n-en-DataFrames"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 38" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hay muchas maneras de indexar en los <code>DataFrame</code>s.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">fechas</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s1">'1/1/2000'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">fechas</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">'A'</span><span class="p">,</span> <span class="s1">'B'</span><span class="p">,</span> <span class="s1">'C'</span><span class="p">,</span> <span class="s1">'D'</span><span class="p">])</span>
      
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[56]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>-0.869298</td>
      <td>-0.210502</td>
      <td>0.477938</td>
      <td>0.912121</td>
      </tr>
      <tr>
      <th>2000-01-02</th>
      <td>-0.502425</td>
      <td>-1.897287</td>
      <td>-0.084122</td>
      <td>-1.203818</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>-0.204297</td>
      <td>0.711485</td>
      <td>-1.271802</td>
      <td>-0.138120</td>
      </tr>
      <tr>
      <th>2000-01-04</th>
      <td>1.512985</td>
      <td>0.726718</td>
      <td>0.960902</td>
      <td>0.433124</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>0.724005</td>
      <td>-2.127668</td>
      <td>0.674417</td>
      <td>-0.297808</td>
      </tr>
      <tr>
      <th>2000-01-06</th>
      <td>-0.217175</td>
      <td>-0.621172</td>
      <td>0.668163</td>
      <td>0.170576</td>
      </tr>
      <tr>
      <th>2000-01-07</th>
      <td>0.352484</td>
      <td>0.260515</td>
      <td>-1.576033</td>
      <td>1.263213</td>
      </tr>
      <tr>
      <th>2000-01-08</th>
      <td>-0.032928</td>
      <td>-0.648313</td>
      <td>-0.622509</td>
      <td>0.231683</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.1.-Indexaci%C3%B3n-de-columnas">11.1. Indexación de columnas<a class="anchor-link" href="#11.1.-Indexaci%C3%B3n-de-columnas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 39" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para seleccionar columnas dentro de un <code>DataFrame</code> lo podemos hacer seleccionando la columna entre corchetes <code>[]</code>, o indicando la columna como si fuera un atributo del <code>DataFrame</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span><span class="p">[</span><span class="s1">\'A\'</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2000-01-01    0.813153',
          '2000-01-02   -0.244584',
          '2000-01-03    0.125729',
          '2000-01-04    0.352275',
          '2000-01-05   -2.050976',
          '2000-01-06   -0.312296',
          '2000-01-07    0.897837',
          '2000-01-08    0.271403',
          'Freq: D, Name: A, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">A</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2000-01-01    0.813153',
          '2000-01-02   -0.244584',
          '2000-01-03    0.125729',
          '2000-01-04    0.352275',
          '2000-01-05   -2.050976',
          '2000-01-06   -0.312296',
          '2000-01-07    0.897837',
          '2000-01-08    0.271403',
          'Freq: D, Name: A, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se quieren algunas filas determinadas se pasan mediante una lista</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span> <span class="p">[</span><span class="s1">'A'</span><span class="p">,</span> <span class="s1">'B'</span><span class="p">]</span> <span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>-0.341962</td>
      <td>0.639913</td>
      </tr>
      <tr>
      <th>2000-01-02</th>
      <td>0.507258</td>
      <td>-0.942036</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>-1.463557</td>
      <td>1.041023</td>
      </tr>
      <tr>
      <th>2000-01-04</th>
      <td>1.781058</td>
      <td>-1.849352</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>0.318897</td>
      <td>-0.229218</td>
      </tr>
      <tr>
      <th>2000-01-06</th>
      <td>0.362064</td>
      <td>-0.193479</td>
      </tr>
      <tr>
      <th>2000-01-07</th>
      <td>-0.084632</td>
      <td>-0.112474</td>
      </tr>
      <tr>
      <th>2000-01-08</th>
      <td>0.739424</td>
      <td>0.253191</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.2.-Indexaci%C3%B3n-de-filas-por-posiciones">11.2. Indexación de filas por posiciones<a class="anchor-link" href="#11.2.-Indexaci%C3%B3n-de-filas-por-posiciones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 40" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se puede seleccionar un rango de filas de un <code>DataFrame</code> de la siguiente manera</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>0.813153</td>
      <td>-0.869356</td>
      <td>0.934293</td>
      <td>0.338644</td>
      </tr>
      <tr>
      <th>2000-01-02</th>
      <td>-0.244584</td>
      <td>0.536352</td>
      <td>0.322248</td>
      <td>0.238903</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>0.125729</td>
      <td>2.046910</td>
      <td>-0.877466</td>
      <td>-0.710034</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se quiere seleccionar una sola fila, hay que indicar un rango de filas que incluya solo a esa. Si, por ejemplo, se quiere seleccionar la fila número 1</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-02</th>
      <td>-0.244584</td>
      <td>0.536352</td>
      <td>0.322248</td>
      <td>0.238903</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Otro método para seleccionar una fila por su posición es el método <code>iloc[]</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>0.813153</td>
      <td>-0.869356</td>
      <td>0.934293</td>
      <td>0.338644</td>
      </tr>
      <tr>
      <th>2000-01-02</th>
      <td>-0.244584</td>
      <td>0.536352</td>
      <td>0.322248</td>
      <td>0.238903</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>0.125729</td>
      <td>2.046910</td>
      <td>-0.877466</td>
      <td>-0.710034</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se quieren algunas filas determinadas, se pasa una lista con sus posiciones</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span> <span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>-0.341962</td>
      <td>0.639913</td>
      <td>0.765817</td>
      <td>0.056692</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>-1.463557</td>
      <td>1.041023</td>
      <td>-1.321715</td>
      <td>2.822735</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>0.318897</td>
      <td>-0.229218</td>
      <td>-1.095593</td>
      <td>-0.186248</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.3.-Indexaci%C3%B3n-de-filas-por-etiquetas">11.3. Indexación de filas por etiquetas<a class="anchor-link" href="#11.3.-Indexaci%C3%B3n-de-filas-por-etiquetas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 41" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para seleccionar una fila por sus etiquetas podemos usar el método <code>loc[]</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="s1">\'2000-01-01\'</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'A    0.813153',
          'B   -0.869356',
          'C    0.934293',
          'D    0.338644',
          'Name: 2000-01-01 00:00:00, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si se quiere seleccionar un rango de filas, podemos indexarlas mediante los dos puntos <code>:</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="s1">'2000-01-01'</span><span class="p">:</span><span class="s1">'2000-01-03'</span><span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>0.813153</td>
      <td>-0.869356</td>
      <td>0.934293</td>
      <td>0.338644</td>
      </tr>
      <tr>
      <th>2000-01-02</th>
      <td>-0.244584</td>
      <td>0.536352</td>
      <td>0.322248</td>
      <td>0.238903</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>0.125729</td>
      <td>2.046910</td>
      <td>-0.877466</td>
      <td>-0.710034</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se quieren algunas filas determinadas se pasan mediante una lista</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">[</span><span class="s1">'2000-01-01'</span><span class="p">,</span> <span class="s1">'2000-01-03'</span><span class="p">,</span> <span class="s1">'2000-01-05'</span><span class="p">]</span> <span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>-0.341962</td>
      <td>0.639913</td>
      <td>0.765817</td>
      <td>0.056692</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>-1.463557</td>
      <td>1.041023</td>
      <td>-1.321715</td>
      <td>2.822735</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>0.318897</td>
      <td>-0.229218</td>
      <td>-1.095593</td>
      <td>-0.186248</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.4.-Selecci%C3%B3n-de-una-porci%C3%B3n-del-DataFrame-mediante-posiciones">11.4. Selección de una porción del DataFrame mediante posiciones<a class="anchor-link" href="#11.4.-Selecci%C3%B3n-de-una-porci%C3%B3n-del-DataFrame-mediante-posiciones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 42" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>0.813153</td>
      <td>-0.869356</td>
      </tr>
      <tr>
      <th>2000-01-02</th>
      <td>-0.244584</td>
      <td>0.536352</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>0.125729</td>
      <td>2.046910</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se quieren unas filas y columnas determinadas, se pasan listas con las posiciones deseadas</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>C</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>-0.341962</td>
      <td>0.765817</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>-1.463557</td>
      <td>-1.321715</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>0.318897</td>
      <td>-1.095593</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.5.-Selecci%C3%B3n-de-una-porci%C3%B3n-del-DataFrame-mediante-etiquetas">11.5. Selección de una porción del DataFrame mediante etiquetas<a class="anchor-link" href="#11.5.-Selecci%C3%B3n-de-una-porci%C3%B3n-del-DataFrame-mediante-etiquetas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 43" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="s1">'2000-01-01'</span><span class="p">:</span><span class="s1">'2000-01-03'</span><span class="p">,</span> <span class="s1">'A'</span><span class="p">:</span><span class="s1">'B'</span><span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>0.813153</td>
      <td>-0.869356</td>
      </tr>
      <tr>
      <th>2000-01-02</th>
      <td>-0.244584</td>
      <td>0.536352</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>0.125729</td>
      <td>2.046910</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se quieren algunas filas y columnas determinadas, se pasan listas con las etiquetas deseadas</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">[</span><span class="s1">'2000-01-01'</span><span class="p">,</span> <span class="s1">'2000-01-03'</span><span class="p">,</span> <span class="s1">'2000-01-05'</span><span class="p">],</span> <span class="p">[</span><span class="s1">'A'</span><span class="p">,</span> <span class="s1">'C'</span><span class="p">]</span> <span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>C</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>-0.341962</td>
      <td>0.765817</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>-1.463557</td>
      <td>-1.321715</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>0.318897</td>
      <td>-1.095593</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.6.-Indexaci%C3%B3n-por-funci%C3%B3n-lambda">11.6. Indexación por función lambda<a class="anchor-link" href="#11.6.-Indexaci%C3%B3n-por-funci%C3%B3n-lambda"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 44" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden seleccionar datos de un <code>DataFrame</code> que cumplan una condición dada por una función <code>lambda</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="k">lambda</span> <span class="n">dataframe</span><span class="p">:</span><span class="mi">2</span><span class="o">*</span><span class="n">dataframe</span><span class="p">[</span><span class="s1">'A'</span><span class="p">]</span><span class="o">+</span><span class="mi">5</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">dataframe</span><span class="p">[</span><span class="s1">'B'</span><span class="p">])</span><span class="o">&gt;</span><span class="mf">0.2</span><span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[58]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>-0.869298</td>
      <td>-0.210502</td>
      <td>0.477938</td>
      <td>0.912121</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>-0.204297</td>
      <td>0.711485</td>
      <td>-1.271802</td>
      <td>-0.138120</td>
      </tr>
      <tr>
      <th>2000-01-04</th>
      <td>1.512985</td>
      <td>0.726718</td>
      <td>0.960902</td>
      <td>0.433124</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>0.724005</td>
      <td>-2.127668</td>
      <td>0.674417</td>
      <td>-0.297808</td>
      </tr>
      <tr>
      <th>2000-01-06</th>
      <td>-0.217175</td>
      <td>-0.621172</td>
      <td>0.668163</td>
      <td>0.170576</td>
      </tr>
      <tr>
      <th>2000-01-07</th>
      <td>0.352484</td>
      <td>0.260515</td>
      <td>-1.576033</td>
      <td>1.263213</td>
      </tr>
      <tr>
      <th>2000-01-08</th>
      <td>-0.032928</td>
      <td>-0.648313</td>
      <td>-0.622509</td>
      <td>0.231683</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver, esta forma de indexación es muy potente</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.7.-Indexaci%C3%B3n-condicional">11.7. Indexación condicional<a class="anchor-link" href="#11.7.-Indexaci%C3%B3n-condicional"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 45" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si no necesitamos funciones complejas para indexar, sino solo condicionales, podemos hacer</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span><span class="n">dataframe</span><span class="p">[</span><span class="s1">'A'</span><span class="p">]</span><span class="o">&gt;</span><span class="mf">0.2</span><span class="p">]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[61]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-04</th>
      <td>1.512985</td>
      <td>0.726718</td>
      <td>0.960902</td>
      <td>0.433124</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>0.724005</td>
      <td>-2.127668</td>
      <td>0.674417</td>
      <td>-0.297808</td>
      </tr>
      <tr>
      <th>2000-01-07</th>
      <td>0.352484</td>
      <td>0.260515</td>
      <td>-1.576033</td>
      <td>1.263213</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos hacer múltiples condiciones</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[(</span><span class="n">dataframe</span><span class="p">[</span><span class="s1">'A'</span><span class="p">]</span><span class="o">&gt;</span><span class="mf">0.2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">dataframe</span><span class="p">[</span><span class="s1">'B'</span><span class="p">]</span><span class="o">&gt;</span><span class="mf">0.2</span><span class="p">)]</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[69]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-04</th>
      <td>1.512985</td>
      <td>0.726718</td>
      <td>0.960902</td>
      <td>0.433124</td>
      </tr>
      <tr>
      <th>2000-01-07</th>
      <td>0.352484</td>
      <td>0.260515</td>
      <td>-1.576033</td>
      <td>1.263213</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.8.-Indexaci%C3%B3n-aleatoria">11.8. Indexación aleatoria<a class="anchor-link" href="#11.8.-Indexaci%C3%B3n-aleatoria"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 46" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mediante el método <code>sample()</code> obtendremos una fila aleatoria del <code>DataFrame</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">sample</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-06</th>
      <td>-0.312296</td>
      <td>0.129097</td>
      <td>-0.991085</td>
      <td>1.704535</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos más de una muestra lo indicamos con el atributo <code>n</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-08</th>
      <td>0.271403</td>
      <td>1.527116</td>
      <td>0.144970</td>
      <td>1.175728</td>
      </tr>
      <tr>
      <th>2000-01-01</th>
      <td>0.813153</td>
      <td>-0.869356</td>
      <td>0.934293</td>
      <td>0.338644</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>0.125729</td>
      <td>2.046910</td>
      <td>-0.877466</td>
      <td>-0.710034</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si lo que se quiere son columnas aleatorias, hay que indicarlo mediante <code>axis=1</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-01</th>
      <td>0.338644</td>
      </tr>
      <tr>
      <th>2000-01-02</th>
      <td>0.238903</td>
      </tr>
      <tr>
      <th>2000-01-03</th>
      <td>-0.710034</td>
      </tr>
      <tr>
      <th>2000-01-04</th>
      <td>0.504410</td>
      </tr>
      <tr>
      <th>2000-01-05</th>
      <td>-1.601926</td>
      </tr>
      <tr>
      <th>2000-01-06</th>
      <td>1.704535</td>
      </tr>
      <tr>
      <th>2000-01-07</th>
      <td>-0.584860</td>
      </tr>
      <tr>
      <th>2000-01-08</th>
      <td>1.175728</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se quiere un único ítem del <code>DataFrame</code> hay que llamar dos veces al método <code>sample()</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">sample</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>D</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>2000-01-05</th>
      <td>-1.601926</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="12.-Uni%C3%B3n-de-DataFrames">12. Unión de DataFrames<a class="anchor-link" href="#12.-Uni%C3%B3n-de-DataFrames"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 47" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="12.1.-Concatenaci%C3%B3n-de-DataFrames">12.1. Concatenación de DataFrames<a class="anchor-link" href="#12.1.-Concatenaci%C3%B3n-de-DataFrames"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 48" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para concatenar varios <code>DataFrame</code>s usamos el método <code>concat()</code>, donde se le pasará una lista con los <code>DataFrame</code>s que se quieren unir</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A0"</span><span class="p">,</span> <span class="s2">"A1"</span><span class="p">,</span> <span class="s2">"A2"</span><span class="p">,</span> <span class="s2">"A3"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B0"</span><span class="p">,</span> <span class="s2">"B1"</span><span class="p">,</span> <span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">],</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C0"</span><span class="p">,</span> <span class="s2">"C1"</span><span class="p">,</span> <span class="s2">"C2"</span><span class="p">,</span> <span class="s2">"C3"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D0"</span><span class="p">,</span> <span class="s2">"D1"</span><span class="p">,</span> <span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A4"</span><span class="p">,</span> <span class="s2">"A5"</span><span class="p">,</span> <span class="s2">"A6"</span><span class="p">,</span> <span class="s2">"A7"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B4"</span><span class="p">,</span> <span class="s2">"B5"</span><span class="p">,</span> <span class="s2">"B6"</span><span class="p">,</span> <span class="s2">"B7"</span><span class="p">],</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C4"</span><span class="p">,</span> <span class="s2">"C5"</span><span class="p">,</span> <span class="s2">"C6"</span><span class="p">,</span> <span class="s2">"C7"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D4"</span><span class="p">,</span> <span class="s2">"D5"</span><span class="p">,</span> <span class="s2">"D6"</span><span class="p">,</span> <span class="s2">"D7"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe3</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A8"</span><span class="p">,</span> <span class="s2">"A9"</span><span class="p">,</span> <span class="s2">"A10"</span><span class="p">,</span> <span class="s2">"A11"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B8"</span><span class="p">,</span> <span class="s2">"B9"</span><span class="p">,</span> <span class="s2">"B10"</span><span class="p">,</span> <span class="s2">"B11"</span><span class="p">],</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C8"</span><span class="p">,</span> <span class="s2">"C9"</span><span class="p">,</span> <span class="s2">"C10"</span><span class="p">,</span> <span class="s2">"C11"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D8"</span><span class="p">,</span> <span class="s2">"D9"</span><span class="p">,</span> <span class="s2">"D10"</span><span class="p">,</span> <span class="s2">"D11"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe1</span><span class="p">,</span> <span class="n">dataframe2</span><span class="p">,</span> <span class="n">dataframe3</span><span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe3:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe3</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '    A   B   C   D',
          '0  A0  B0  C0  D0',
          '1  A1  B1  C1  D1',
          '2  A2  B2  C2  D2',
          '3  A3  B3  C3  D3',
          'dataframe2:',
          '    A   B   C   D',
          '0  A4  B4  C4  D4',
          '1  A5  B5  C5  D5',
          '2  A6  B6  C6  D6',
          '3  A7  B7  C7  D7',
          'dataframe3:',
          '     A    B    C    D',
          '0   A8   B8   C8   D8',
          '1   A9   B9   C9   D9',
          '2  A10  B10  C10  D10',
          '3  A11  B11  C11  D11',
          'dataframe:',
          '     A    B    C    D',
          '0   A0   B0   C0   D0',
          '1   A1   B1   C1   D1',
          '2   A2   B2   C2   D2',
          '3   A3   B3   C3   D3',
          '0   A4   B4   C4   D4',
          '1   A5   B5   C5   D5',
          '2   A6   B6   C6   D6',
          '3   A7   B7   C7   D7',
          '0   A8   B8   C8   D8',
          '1   A9   B9   C9   D9',
          '2  A10  B10  C10  D10',
          '3  A11  B11  C11  D11',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver, los índices <code>0</code>, <code>1</code>, <code>2</code> y <code>3</code> se repiten, porque cada dataframe tiene esos índices. Para que no ocurra esto, hay que usar el parámetro <code>ignore_index=True</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe1</span><span class="p">,</span> <span class="n">dataframe2</span><span class="p">,</span> <span class="n">dataframe3</span><span class="p">],</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe3:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe3</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '    A   B   C   D',
          '0  A0  B0  C0  D0',
          '1  A1  B1  C1  D1',
          '2  A2  B2  C2  D2',
          '3  A3  B3  C3  D3',
          'dataframe2:',
          '    A   B   C   D',
          '0  A4  B4  C4  D4',
          '1  A5  B5  C5  D5',
          '2  A6  B6  C6  D6',
          '3  A7  B7  C7  D7',
          'dataframe3:',
          '     A    B    C    D',
          '0   A8   B8   C8   D8',
          '1   A9   B9   C9   D9',
          '2  A10  B10  C10  D10',
          '3  A11  B11  C11  D11',
          'dataframe:',
          '      A    B    C    D',
          '0    A0   B0   C0   D0',
          '1    A1   B1   C1   D1',
          '2    A2   B2   C2   D2',
          '3    A3   B3   C3   D3',
          '4    A4   B4   C4   D4',
          '5    A5   B5   C5   D5',
          '6    A6   B6   C6   D6',
          '7    A7   B7   C7   D7',
          '8    A8   B8   C8   D8',
          '9    A9   B9   C9   D9',
          '10  A10  B10  C10  D10',
          '11  A11  B11  C11  D11',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="concat" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/merging_concat_basic.webp" width="370" height="375"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si se hubiera querido hacer la concatenación a lo largo de las columnas, habría que haber introducido la variable <code>axis=1</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe1</span><span class="p">,</span> <span class="n">dataframe2</span><span class="p">,</span> <span class="n">dataframe3</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe3:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe3</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '    A   B   C   D',
          '0  A0  B0  C0  D0',
          '1  A1  B1  C1  D1',
          '2  A2  B2  C2  D2',
          '3  A3  B3  C3  D3',
          'dataframe2:',
          '    A   B   C   D',
          '0  A4  B4  C4  D4',
          '1  A5  B5  C5  D5',
          '2  A6  B6  C6  D6',
          '3  A7  B7  C7  D7',
          'dataframe3:',
          '     A    B    C    D',
          '0   A8   B8   C8   D8',
          '1   A9   B9   C9   D9',
          '2  A10  B10  C10  D10',
          '3  A11  B11  C11  D11',
          'dataframe:',
          '    A   B   C   D   A   B   C   D    A    B    C    D',
          '0  A0  B0  C0  D0  A4  B4  C4  D4   A8   B8   C8   D8',
          '1  A1  B1  C1  D1  A5  B5  C5  D5   A9   B9   C9   D9',
          '2  A2  B2  C2  D2  A6  B6  C6  D6  A10  B10  C10  D10',
          '3  A3  B3  C3  D3  A7  B7  C7  D7  A11  B11  C11  D11',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="12.1.1.-Intersecci%C3%B3n-de-concatenaci%C3%B3n">12.1.1. Intersección de concatenación<a class="anchor-link" href="#12.1.1.-Intersecci%C3%B3n-de-concatenaci%C3%B3n"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 49" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hay dos maneras de hacer la concatenación, cogiendo todos los índices de los <code>DataFrame</code>s o cogiendo solo los que coinciden. Esto se determina mediante la variable <code>join</code>, que admite los valores <code>'outer'</code> (por defecto) (coge todos los índices) o <code>'inner'</code> (solo los que coinciden)</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Veamos un ejemplo de <code>'outer'</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A0"</span><span class="p">,</span> <span class="s2">"A1"</span><span class="p">,</span> <span class="s2">"A2"</span><span class="p">,</span> <span class="s2">"A3"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B0"</span><span class="p">,</span> <span class="s2">"B1"</span><span class="p">,</span> <span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">],</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C0"</span><span class="p">,</span> <span class="s2">"C1"</span><span class="p">,</span> <span class="s2">"C2"</span><span class="p">,</span> <span class="s2">"C3"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D0"</span><span class="p">,</span> <span class="s2">"D1"</span><span class="p">,</span> <span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">],</span>',
          '     <span class="p">},</span>',
          '     <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
          '',
          '<span class="n">dataframe4</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">,</span> <span class="s2">"B6"</span><span class="p">,</span> <span class="s2">"B7"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">,</span> <span class="s2">"D6"</span><span class="p">,</span> <span class="s2">"D7"</span><span class="p">],</span>',
          '        <span class="s2">"F"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"F2"</span><span class="p">,</span> <span class="s2">"F3"</span><span class="p">,</span> <span class="s2">"F6"</span><span class="p">,</span> <span class="s2">"F7"</span><span class="p">],</span>',
          '     <span class="p">},</span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">])</span>',
          '',
          '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe1</span><span class="p">,</span> <span class="n">dataframe4</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe4</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '    A   B   C   D',
          '0  A0  B0  C0  D0',
          '1  A1  B1  C1  D1',
          '2  A2  B2  C2  D2',
          '3  A3  B3  C3  D3',
          'dataframe2:',
          '    B   D   F',
          '2  B2  D2  F2',
          '3  B3  D3  F3',
          '6  B6  D6  F6',
          '7  B7  D7  F7',
          'dataframe:',
          '     A    B    C    D    B    D    F',
          '0   A0   B0   C0   D0  NaN  NaN  NaN',
          '1   A1   B1   C1   D1  NaN  NaN  NaN',
          '2   A2   B2   C2   D2   B2   D2   F2',
          '3   A3   B3   C3   D3   B3   D3   F3',
          '6  NaN  NaN  NaN  NaN   B6   D6   F6',
          '7  NaN  NaN  NaN  NaN   B7   D7   F7',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="outlier" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/merging_concat_axis1.webp" width="629" height="175"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Veamos un ejemplo de <code>'inner'</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dataframe1</span><span class="p">,</span> <span class="n">dataframe4</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">join</span><span class="o">=</span><span class="s2">"inner"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe4</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '    A   B   C   D',
          '0  A0  B0  C0  D0',
          '1  A1  B1  C1  D1',
          '2  A2  B2  C2  D2',
          '3  A3  B3  C3  D3',
          'dataframe2:',
          '    B   D   F',
          '2  B2  D2  F2',
          '3  B3  D3  F3',
          '6  B6  D6  F6',
          '7  B7  D7  F7',
          'dataframe:',
          '    A   B   C   D   B   D   F',
          '2  A2  B2  C2  D2  B2  D2  F2',
          '3  A3  B3  C3  D3  B3  D3  F3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="inner" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/merging_concat_axis1_inner.webp" width="629" height="125"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="12.2.-Merge-de-DataFrames">12.2. <code>Merge</code> de DataFrames<a class="anchor-link" href="#12.2.-Merge-de-DataFrames"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 50" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Antes hemos creado un dataframe nuevo con la unión de varios dataframes, ahora podemos completar un dataframe con otro, para ello usamos <code>merge</code>, pasándole el parámetro <code>on</code>, sobre qué columna queremos que se haga el <code>merge</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"Key"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">],</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A0"</span><span class="p">,</span> <span class="s2">"A1"</span><span class="p">,</span> <span class="s2">"A2"</span><span class="p">,</span> <span class="s2">"A3"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B0"</span><span class="p">,</span> <span class="s2">"B1"</span><span class="p">,</span> <span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"Key"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">],</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C0"</span><span class="p">,</span> <span class="s2">"C1"</span><span class="p">,</span> <span class="s2">"C2"</span><span class="p">,</span> <span class="s2">"C3"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D0"</span><span class="p">,</span> <span class="s2">"D1"</span><span class="p">,</span> <span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="s2">"Key"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '  Key   A   B',
          '0  K0  A0  B0',
          '1  K1  A1  B1',
          '2  K2  A2  B2',
          '3  K3  A3  B3',
          'dataframe2:',
          '  Key   C   D',
          '0  K0  C0  D0',
          '1  K1  C1  D1',
          '2  K2  C2  D2',
          '3  K3  C3  D3',
          'dataframe:',
          '  Key   A   B   C   D',
          '0  K0  A0  B0  C0  D0',
          '1  K1  A1  B1  C1  D1',
          '2  K2  A2  B2  C2  D2',
          '3  K3  A3  B3  C3  D3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En este caso los dos dataframes tenían una clave que se llamaba igual (<code>Key</code>), pero en el caso de tener dataframes, en los que su clave se llame de otra forma podemos usar los parámetros <code>left_on</code> y <code>right_on</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"Key1"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">],</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A0"</span><span class="p">,</span> <span class="s2">"A1"</span><span class="p">,</span> <span class="s2">"A2"</span><span class="p">,</span> <span class="s2">"A3"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B0"</span><span class="p">,</span> <span class="s2">"B1"</span><span class="p">,</span> <span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"Key2"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">],</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C0"</span><span class="p">,</span> <span class="s2">"C1"</span><span class="p">,</span> <span class="s2">"C2"</span><span class="p">,</span> <span class="s2">"C3"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D0"</span><span class="p">,</span> <span class="s2">"D1"</span><span class="p">,</span> <span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">"Key1"</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">"Key2"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '  Key1   A   B',
          '0   K0  A0  B0',
          '1   K1  A1  B1',
          '2   K2  A2  B2',
          '3   K3  A3  B3',
          'dataframe2:',
          '  Key2   C   D',
          '0   K0  C0  D0',
          '1   K1  C1  D1',
          '2   K2  C2  D2',
          '3   K3  C3  D3',
          'dataframe:',
          '  Key1   A   B Key2   C   D',
          '0   K0  A0  B0   K0  C0  D0',
          '1   K1  A1  B1   K1  C1  D1',
          '2   K2  A2  B2   K2  C2  D2',
          '3   K3  A3  B3   K3  C3  D3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En el caso en el que una de las claves no coincida, no se hará el <code>merge</code> sobre esa clave</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"Key1"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">],</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A0"</span><span class="p">,</span> <span class="s2">"A1"</span><span class="p">,</span> <span class="s2">"A2"</span><span class="p">,</span> <span class="s2">"A3"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B0"</span><span class="p">,</span> <span class="s2">"B1"</span><span class="p">,</span> <span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"Key2"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">],</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C0"</span><span class="p">,</span> <span class="s2">"C1"</span><span class="p">,</span> <span class="s2">"C2"</span><span class="p">,</span> <span class="s2">"C3"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D0"</span><span class="p">,</span> <span class="s2">"D1"</span><span class="p">,</span> <span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">"Key1"</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">"Key2"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '  Key1   A   B',
          '0   K0  A0  B0',
          '1   K1  A1  B1',
          '2   K2  A2  B2',
          '3   K3  A3  B3',
          'dataframe2:',
          '  Key2   C   D',
          '0   K0  C0  D0',
          '1   K1  C1  D1',
          '2   K2  C2  D2',
          '3  NaN  C3  D3',
          'dataframe:',
          '  Key1   A   B Key2   C   D',
          '0   K0  A0  B0   K0  C0  D0',
          '1   K1  A1  B1   K1  C1  D1',
          '2   K2  A2  B2   K2  C2  D2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para cambiar este comportamiento podemos usar el parámetro <code>how</code>, que por defecto tiene el valor <code>inner</code>, pero le podemos pasar los valores <code>left</code>, <code>right</code> y <code>outer</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"Key1"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">],</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A0"</span><span class="p">,</span> <span class="s2">"A1"</span><span class="p">,</span> <span class="s2">"A2"</span><span class="p">,</span> <span class="s2">"A3"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B0"</span><span class="p">,</span> <span class="s2">"B1"</span><span class="p">,</span> <span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"Key2"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">],</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C0"</span><span class="p">,</span> <span class="s2">"C1"</span><span class="p">,</span> <span class="s2">"C2"</span><span class="p">,</span> <span class="s2">"C3"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D0"</span><span class="p">,</span> <span class="s2">"D1"</span><span class="p">,</span> <span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">],</span>',
          '     <span class="p">})</span>',
          '',
          '<span class="n">dataframe_inner</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">"Key1"</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">"Key2"</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">"inner"</span><span class="p">)</span>',
          '<span class="n">dataframe_left</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">"Key1"</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">"Key2"</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">"left"</span><span class="p">)</span>',
          '<span class="n">dataframe_right</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">"Key1"</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">"Key2"</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">"right"</span><span class="p">)</span>',
          '<span class="n">dataframe_outer</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">"Key1"</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">"Key2"</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">"outer"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe inner:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe_inner</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe left:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe_left</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe right:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe_right</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe outer:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe_outer</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '  Key1   A   B',
          '0   K0  A0  B0',
          '1   K1  A1  B1',
          '2   K2  A2  B2',
          '3   K3  A3  B3',
          'dataframe2:',
          '  Key2   C   D',
          '0   K0  C0  D0',
          '1   K1  C1  D1',
          '2   K2  C2  D2',
          '3  NaN  C3  D3',
          'dataframe inner:',
          '  Key1   A   B Key2   C   D',
          '0   K0  A0  B0   K0  C0  D0',
          '1   K1  A1  B1   K1  C1  D1',
          '2   K2  A2  B2   K2  C2  D2',
          'dataframe left:',
          '  Key1   A   B Key2    C    D',
          '0   K0  A0  B0   K0   C0   D0',
          '1   K1  A1  B1   K1   C1   D1',
          '2   K2  A2  B2   K2   C2   D2',
          '3   K3  A3  B3  NaN  NaN  NaN',
          'dataframe right:',
          '  Key1    A    B Key2   C   D',
          '0   K0   A0   B0   K0  C0  D0',
          '1   K1   A1   B1   K1  C1  D1',
          '2   K2   A2   B2   K2  C2  D2',
          '3  NaN  NaN  NaN  NaN  C3  D3',
          'dataframe outer:',
          '  Key1    A    B Key2    C    D',
          '0   K0   A0   B0   K0   C0   D0',
          '1   K1   A1   B1   K1   C1   D1',
          '2   K2   A2   B2   K2   C2   D2',
          '3   K3   A3   B3  NaN  NaN  NaN',
          '4  NaN  NaN  NaN  NaN   C3   D3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver, cuando se elige <code>left</code> solo se añaden los valores del dataframe de la izquierda y cuando se elige <code>right</code>, los valores del dataframe de la derecha</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="12.3.-Join-de-dataframes">12.3. <code>Join</code> de dataframes<a class="anchor-link" href="#12.3.-Join-de-dataframes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 51" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>La última herramienta de unión de dataframes es <code>join</code>. Es similar a <code>merge</code>, solo que en vez de buscar similitudes en función de columnas especificadas, las busca en función de los índices.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A0"</span><span class="p">,</span> <span class="s2">"A1"</span><span class="p">,</span> <span class="s2">"A2"</span><span class="p">,</span> <span class="s2">"A3"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B0"</span><span class="p">,</span> <span class="s2">"B1"</span><span class="p">,</span> <span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">],</span>',
          '     <span class="p">},</span>',
          '     <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">])</span>',
          '',
          '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C0"</span><span class="p">,</span> <span class="s2">"C1"</span><span class="p">,</span> <span class="s2">"C2"</span><span class="p">,</span> <span class="s2">"C3"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D0"</span><span class="p">,</span> <span class="s2">"D1"</span><span class="p">,</span> <span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">],</span>',
          '     <span class="p">},</span>',
          '        <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">])</span>',
          '',
          '<span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '     A   B',
          'K0  A0  B0',
          'K1  A1  B1',
          'K2  A2  B2',
          'K3  A3  B3',
          'dataframe2:',
          '     C   D',
          'K0  C0  D0',
          'K1  C1  D1',
          'K2  C2  D2',
          'K3  C3  D3',
          'dataframe:',
          '     A   B   C   D',
          'K0  A0  B0  C0  D0',
          'K1  A1  B1  C1  D1',
          'K2  A2  B2  C2  D2',
          'K3  A3  B3  C3  D3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En este caso, los índices son iguales, pero cuando son distintos podemos especificar la manera de unir los dataframes mediante el parámetro <code>how</code>, que por defecto tiene el valor <code>inner</code>, pero puede tener el valor <code>left</code>, <code>right</code> o <code>outer</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"A"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"A0"</span><span class="p">,</span> <span class="s2">"A1"</span><span class="p">,</span> <span class="s2">"A2"</span><span class="p">,</span> <span class="s2">"A3"</span><span class="p">],</span>',
          '        <span class="s2">"B"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"B0"</span><span class="p">,</span> <span class="s2">"B1"</span><span class="p">,</span> <span class="s2">"B2"</span><span class="p">,</span> <span class="s2">"B3"</span><span class="p">],</span>',
          '     <span class="p">},</span>',
          '     <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K1"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">])</span>',
          '',
          '<span class="n">dataframe2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"C"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"C0"</span><span class="p">,</span> <span class="s2">"C2"</span><span class="p">,</span> <span class="s2">"C3"</span><span class="p">,</span> <span class="s2">"C4"</span><span class="p">],</span>',
          '        <span class="s2">"D"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"D0"</span><span class="p">,</span> <span class="s2">"D2"</span><span class="p">,</span> <span class="s2">"D3"</span><span class="p">,</span> <span class="s2">"D4"</span><span class="p">],</span>',
          '     <span class="p">},</span>',
          '        <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">"K0"</span><span class="p">,</span> <span class="s2">"K2"</span><span class="p">,</span> <span class="s2">"K3"</span><span class="p">,</span> <span class="s2">"K4"</span><span class="p">])</span>',
          '',
          '<span class="n">dataframe_inner</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">"inner"</span><span class="p">)</span>',
          '<span class="n">dataframe_left</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">"left"</span><span class="p">)</span>',
          '<span class="n">dataframe_right</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">"right"</span><span class="p">)</span>',
          '<span class="n">dataframe_outer</span> <span class="o">=</span> <span class="n">dataframe1</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dataframe2</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s2">"outer"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe1:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe1</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"dataframe2:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe inner:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe_inner</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe left:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe_left</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe rigth:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe_right</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">dataframe outer:</span><span class="se">\\n</span><span class="si">{</span><span class="n">dataframe_outer</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dataframe1:',
          '     A   B',
          'K0  A0  B0',
          'K1  A1  B1',
          'K2  A2  B2',
          'K3  A3  B3',
          'dataframe2:',
          '     C   D',
          'K0  C0  D0',
          'K2  C2  D2',
          'K3  C3  D3',
          'K4  C4  D4',
          'dataframe:',
          '     A   B   C   D',
          'K0  A0  B0  C0  D0',
          'K2  A2  B2  C2  D2',
          'K3  A3  B3  C3  D3',
          'dataframe:',
          '     A   B    C    D',
          'K0  A0  B0   C0   D0',
          'K1  A1  B1  NaN  NaN',
          'K2  A2  B2   C2   D2',
          'K3  A3  B3   C3   D3',
          'dataframe:',
          '      A    B   C   D',
          'K0   A0   B0  C0  D0',
          'K2   A2   B2  C2  D2',
          'K3   A3   B3  C3  D3',
          'K4  NaN  NaN  C4  D4',
          'dataframe:',
          '      A    B    C    D',
          'K0   A0   B0   C0   D0',
          'K1   A1   B1  NaN  NaN',
          'K2   A2   B2   C2   D2',
          'K3   A3   B3   C3   D3',
          'K4  NaN  NaN   C4   D4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="13.-Datos-faltantes-(NaN)">13. Datos faltantes (<code>NaN</code>)<a class="anchor-link" href="#13.-Datos-faltantes-(NaN)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 52" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En un <code>DataFrame</code> puede haber algunos datos faltantes, Pandas los representa como <code>np.nan</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
          <span class="s2">"uno"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">]),</span>
          <span class="s2">"dos"</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">])</span>
          <span class="p">{closing_brace}</span>
      
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>NaN</td>
      <td>7.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="13.1.-Eliminaci%C3%B3n-de-las-filas-con-datos-faltantes">13.1. Eliminación de las filas con datos faltantes<a class="anchor-link" href="#13.1.-Eliminaci%C3%B3n-de-las-filas-con-datos-faltantes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 53" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para no tener filas con datos faltantes, se pueden eliminar estas</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">how</span><span class="o">=</span><span class="s2">"any"</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="13.2.-Eliminaci%C3%B3n-de-las-columnas-con-datos-faltantes">13.2. Eliminación de las columnas con datos faltantes<a class="anchor-link" href="#13.2.-Eliminaci%C3%B3n-de-las-columnas-con-datos-faltantes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 54" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s1">'any'</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>5.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>6.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>7.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="13.3.-M%C3%A1scara-booleana-con-las-posiciones-faltantes">13.3. Máscara booleana con las posiciones faltantes<a class="anchor-link" href="#13.3.-M%C3%A1scara-booleana-con-las-posiciones-faltantes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 55" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">pd</span><span class="o">.</span><span class="n">isna</span><span class="p">(</span><span class="n">dataframe</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>False</td>
      <td>False</td>
      </tr>
      <tr>
      <th>1</th>
      <td>False</td>
      <td>False</td>
      </tr>
      <tr>
      <th>2</th>
      <td>False</td>
      <td>False</td>
      </tr>
      <tr>
      <th>3</th>
      <td>True</td>
      <td>False</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="13.4.-Rellenado-de-los-datos-faltantes">13.4. Rellenado de los datos faltantes<a class="anchor-link" href="#13.4.-Rellenado-de-los-datos-faltantes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 56" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="mf">5.5</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>uno</th>
      <th>dos</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1.0</td>
      <td>4.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2.0</td>
      <td>5.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3.0</td>
      <td>6.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>5.5</td>
      <td>7.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Tip: Poniendo la variable <code>inplace=True</code> se modifica el <code>DataFrame</code> sobre el que se está operando, así no hace falta escribir <code>dataframe = dataframe.fillna(value=5.5)</code></p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="14.-Series-temporales">14. Series temporales<a class="anchor-link" href="#14.-Series-temporales"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 57" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pandas ofrece la posibilidad de trabajar con series temporales. Por ejemplo, creamos una <code>Serie</code> de 100 datos aleatorios cada segundo desde el 01/01/2021</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">indices</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s2">"1/1/2021"</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">freq</span><span class="o">=</span><span class="s2">"S"</span><span class="p">)</span>',
          '<span class="n">datos</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">indices</span><span class="p">))</span>',
          '',
          '<span class="n">serie_temporal</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">datos</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="n">indices</span><span class="p">)</span>',
          '<span class="n">serie_temporal</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2021-01-01 00:00:00    241',
          '2021-01-01 00:00:01     14',
          '2021-01-01 00:00:02    190',
          '2021-01-01 00:00:03    407',
          '2021-01-01 00:00:04     94',
          '                      ... ',
          '2021-01-01 00:01:35    275',
          '2021-01-01 00:01:36     56',
          '2021-01-01 00:01:37    448',
          '2021-01-01 00:01:38    151',
          '2021-01-01 00:01:39    316',
          'Freq: S, Length: 100, dtype: int64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Esta funcionalidad de Pandas es muy potente, por ejemplo, podemos tener un conjunto de datos en unas horas determinadas de un huso horario y cambiarlas a otro huso</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">horas</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s2">"3/6/2021 00:00"</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">freq</span><span class="o">=</span><span class="s2">"H"</span><span class="p">)</span>',
          '<span class="n">datos</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">horas</span><span class="p">))</span>',
          '',
          '<span class="n">serie_horaria</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">datos</span><span class="p">,</span> <span class="n">horas</span><span class="p">)</span>',
          '<span class="n">serie_horaria</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2021-03-06 00:00:00   -0.853524',
          '2021-03-06 01:00:00   -1.355372',
          '2021-03-06 02:00:00   -1.267503',
          '2021-03-06 03:00:00   -1.155787',
          '2021-03-06 04:00:00    0.730935',
          '2021-03-06 05:00:00    1.435957',
          '2021-03-06 06:00:00    0.460912',
          '2021-03-06 07:00:00    0.723451',
          '2021-03-06 08:00:00   -0.853337',
          '2021-03-06 09:00:00    0.456359',
          'Freq: H, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Localizamos los datos en un huso horario</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie_horaria_utc</span> <span class="o">=</span> <span class="n">serie_horaria</span><span class="o">.</span><span class="n">tz_localize</span><span class="p">(</span><span class="s2">"UTC"</span><span class="p">)</span>',
          '<span class="n">serie_horaria_utc</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2021-03-06 00:00:00+00:00   -0.853524',
          '2021-03-06 01:00:00+00:00   -1.355372',
          '2021-03-06 02:00:00+00:00   -1.267503',
          '2021-03-06 03:00:00+00:00   -1.155787',
          '2021-03-06 04:00:00+00:00    0.730935',
          '2021-03-06 05:00:00+00:00    1.435957',
          '2021-03-06 06:00:00+00:00    0.460912',
          '2021-03-06 07:00:00+00:00    0.723451',
          '2021-03-06 08:00:00+00:00   -0.853337',
          '2021-03-06 09:00:00+00:00    0.456359',
          'Freq: H, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y ahora las podemos cambiar a otro uso</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">serie_horaria_US</span> <span class="o">=</span> <span class="n">serie_horaria_utc</span><span class="o">.</span><span class="n">tz_convert</span><span class="p">(</span><span class="s2">"US/Eastern"</span><span class="p">)</span>',
          '<span class="n">serie_horaria_US</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2021-03-05 19:00:00-05:00   -0.853524',
          '2021-03-05 20:00:00-05:00   -1.355372',
          '2021-03-05 21:00:00-05:00   -1.267503',
          '2021-03-05 22:00:00-05:00   -1.155787',
          '2021-03-05 23:00:00-05:00    0.730935',
          '2021-03-06 00:00:00-05:00    1.435957',
          '2021-03-06 01:00:00-05:00    0.460912',
          '2021-03-06 02:00:00-05:00    0.723451',
          '2021-03-06 03:00:00-05:00   -0.853337',
          '2021-03-06 04:00:00-05:00    0.456359',
          'Freq: H, dtype: float64',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="15.-Datos-categ%C3%B3ricos">15. Datos categóricos<a class="anchor-link" href="#15.-Datos-categ%C3%B3ricos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 58" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pandas ofrece la posibilidad de añadir datos categóricos en un <code>DataFrame</code>. Supongamos el siguiente <code>DataFrame</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
          <span class="p">{opening_brace}</span><span class="s2">"id"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="s2">"raw_grade"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">,</span> <span class="s2">"e"</span><span class="p">]{closing_brace}</span>
      <span class="p">)</span>
      
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[2]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>raw_grade</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1</td>
      <td>a</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2</td>
      <td>b</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3</td>
      <td>b</td>
      </tr>
      <tr>
      <th>3</th>
      <td>4</td>
      <td>a</td>
      </tr>
      <tr>
      <th>4</th>
      <td>5</td>
      <td>a</td>
      </tr>
      <tr>
      <th>5</th>
      <td>6</td>
      <td>e</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos convertir los datos de la columna <code>raw_grade</code> a datos categóricos mediante el método <code>astype()</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span><span class="s1">'grade'</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"raw_grade"</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s2">"category"</span><span class="p">)</span>
      
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[3]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>raw_grade</th>
      <th>grade</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1</td>
      <td>a</td>
      <td>a</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2</td>
      <td>b</td>
      <td>b</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3</td>
      <td>b</td>
      <td>b</td>
      </tr>
      <tr>
      <th>3</th>
      <td>4</td>
      <td>a</td>
      <td>a</td>
      </tr>
      <tr>
      <th>4</th>
      <td>5</td>
      <td>a</td>
      <td>a</td>
      </tr>
      <tr>
      <th>5</th>
      <td>6</td>
      <td>e</td>
      <td>e</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Las columnas <code>raw_grade</code> y <code>grade</code> parecen iguales, pero si vemos la información del <code>DataFrame</code> podemos ver que no es así</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">info</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;class \'pandas.core.frame.DataFrame\'&gt;',
          'RangeIndex: 6 entries, 0 to 5',
          'Data columns (total 3 columns):',
          ' #   Column     Non-Null Count  Dtype   ',
          '---  ------     --------------  -----   ',
          ' 0   id         6 non-null      int64   ',
          ' 1   raw_grade  6 non-null      object  ',
          ' 2   grade      6 non-null      category',
          'dtypes: category(1), int64(1), object(1)',
          'memory usage: 334.0+ bytes',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se puede ver que la columna <code>grade</code> es de tipo categórico</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver las categorías de los tipos de datos categóricos mediante el método <code>cat.categories()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dataframe</span><span class="p">[</span><span class="s2">"grade"</span><span class="p">]</span><span class="o">.</span><span class="n">cat</span><span class="o">.</span><span class="n">categories</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Index([\'a\', \'b\', \'e\'], dtype=\'object\')',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos también renombrar las categorías con el mismo método, pero introduciendo una lista con las nuevas categorías.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="p">[</span><span class="s2">"grade"</span><span class="p">]</span><span class="o">.</span><span class="n">cat</span><span class="o">.</span><span class="n">categories</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"very good"</span><span class="p">,</span> <span class="s2">"good"</span><span class="p">,</span> <span class="s2">"very bad"</span><span class="p">]</span>
      <span class="n">dataframe</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[7]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>raw_grade</th>
      <th>grade</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1</td>
      <td>a</td>
      <td>very good</td>
      </tr>
      <tr>
      <th>1</th>
      <td>2</td>
      <td>b</td>
      <td>good</td>
      </tr>
      <tr>
      <th>2</th>
      <td>3</td>
      <td>b</td>
      <td>good</td>
      </tr>
      <tr>
      <th>3</th>
      <td>4</td>
      <td>a</td>
      <td>very good</td>
      </tr>
      <tr>
      <th>4</th>
      <td>5</td>
      <td>a</td>
      <td>very good</td>
      </tr>
      <tr>
      <th>5</th>
      <td>6</td>
      <td>e</td>
      <td>very bad</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pandas nos da la posibilidad de codificar numéricamente los datos categóricos mediante el método <code>get_dummies</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">pd</span><span class="o">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">dataframe</span><span class="p">[</span><span class="s2">"grade"</span><span class="p">])</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[8]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>very good</th>
      <th>good</th>
      <th>very bad</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      </tr>
      <tr>
      <th>5</th>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="16.-Groupby">16. Groupby<a class="anchor-link" href="#16.-Groupby"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 59" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos agrupar los dataframes por valores de alguna de las columnas. Volvamos a cargar el dataframe con el valor de las casas de California.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/maximofn/portafolio/main/posts/california_housing_train.csv"</span><span class="p">)</span>
      <span class="n">california_housing_train</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[43]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>housing_median_age</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>0</th>
      <td>-114.31</td>
      <td>34.19</td>
      <td>15.0</td>
      <td>5612.0</td>
      <td>1283.0</td>
      <td>1015.0</td>
      <td>472.0</td>
      <td>1.4936</td>
      <td>66900.0</td>
      </tr>
      <tr>
      <th>1</th>
      <td>-114.47</td>
      <td>34.40</td>
      <td>19.0</td>
      <td>7650.0</td>
      <td>1901.0</td>
      <td>1129.0</td>
      <td>463.0</td>
      <td>1.8200</td>
      <td>80100.0</td>
      </tr>
      <tr>
      <th>2</th>
      <td>-114.56</td>
      <td>33.69</td>
      <td>17.0</td>
      <td>720.0</td>
      <td>174.0</td>
      <td>333.0</td>
      <td>117.0</td>
      <td>1.6509</td>
      <td>85700.0</td>
      </tr>
      <tr>
      <th>3</th>
      <td>-114.57</td>
      <td>33.64</td>
      <td>14.0</td>
      <td>1501.0</td>
      <td>337.0</td>
      <td>515.0</td>
      <td>226.0</td>
      <td>3.1917</td>
      <td>73400.0</td>
      </tr>
      <tr>
      <th>4</th>
      <td>-114.57</td>
      <td>33.57</td>
      <td>20.0</td>
      <td>1454.0</td>
      <td>326.0</td>
      <td>624.0</td>
      <td>262.0</td>
      <td>1.9250</td>
      <td>65500.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora podemos agrupar los datos por alguna de las columnas, por ejemplo, agrupemos las casas en función del número de años y veamos cuántas casas hay de cada edad con <code>count</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">"housing_median_age"</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">()</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[8]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      <tr>
      <th>housing_median_age</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>1.0</th>
      <td>2</td>
      <td>2</td>
      <td>2</td>
      <td>2</td>
      <td>2</td>
      <td>2</td>
      <td>2</td>
      <td>2</td>
      </tr>
      <tr>
      <th>2.0</th>
      <td>49</td>
      <td>49</td>
      <td>49</td>
      <td>49</td>
      <td>49</td>
      <td>49</td>
      <td>49</td>
      <td>49</td>
      </tr>
      <tr>
      <th>3.0</th>
      <td>46</td>
      <td>46</td>
      <td>46</td>
      <td>46</td>
      <td>46</td>
      <td>46</td>
      <td>46</td>
      <td>46</td>
      </tr>
      <tr>
      <th>4.0</th>
      <td>161</td>
      <td>161</td>
      <td>161</td>
      <td>161</td>
      <td>161</td>
      <td>161</td>
      <td>161</td>
      <td>161</td>
      </tr>
      <tr>
      <th>5.0</th>
      <td>199</td>
      <td>199</td>
      <td>199</td>
      <td>199</td>
      <td>199</td>
      <td>199</td>
      <td>199</td>
      <td>199</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos en todas las columnas, obtenemos el mismo valor, que es el número de casas que hay con una determinada edad, pero podemos saber la media del valor de cada columna con <code>mean</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">"housing_median_age"</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[9]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>total_rooms</th>
      <th>total_bedrooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      <tr>
      <th>housing_median_age</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>1.0</th>
      <td>-121.465000</td>
      <td>37.940000</td>
      <td>2158.000000</td>
      <td>335.500000</td>
      <td>637.000000</td>
      <td>190.000000</td>
      <td>4.756800</td>
      <td>190250.000000</td>
      </tr>
      <tr>
      <th>2.0</th>
      <td>-119.035306</td>
      <td>35.410816</td>
      <td>5237.102041</td>
      <td>871.448980</td>
      <td>2005.224490</td>
      <td>707.122449</td>
      <td>5.074237</td>
      <td>229438.836735</td>
      </tr>
      <tr>
      <th>3.0</th>
      <td>-118.798478</td>
      <td>35.164783</td>
      <td>6920.326087</td>
      <td>1190.826087</td>
      <td>2934.673913</td>
      <td>1030.413043</td>
      <td>5.572013</td>
      <td>239450.043478</td>
      </tr>
      <tr>
      <th>4.0</th>
      <td>-118.805093</td>
      <td>34.987764</td>
      <td>6065.614907</td>
      <td>1068.192547</td>
      <td>2739.956522</td>
      <td>964.291925</td>
      <td>5.196055</td>
      <td>230054.105590</td>
      </tr>
      <tr>
      <th>5.0</th>
      <td>-118.789497</td>
      <td>35.095327</td>
      <td>4926.261307</td>
      <td>910.924623</td>
      <td>2456.979899</td>
      <td>826.768844</td>
      <td>4.732460</td>
      <td>211035.708543</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos obtener varias medidas de cada edad mediante el comando <code>agg</code> (aggregation), pasándole las medidas que queremos mediante una lista, por ejemplo veamos el mínimo, el máximo y la media de cada columna para cada edad de cada</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">"housing_median_age"</span><span class="p">)</span><span class="o">.</span><span class="n">agg</span><span class="p">([</span><span class="s1">'min'</span><span class="p">,</span> <span class="s1">'max'</span><span class="p">,</span> <span class="s1">'mean'</span><span class="p">])</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[10]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead tr th {
              text-align: left;
          }
      
          .dataframe thead tr:last-of-type th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr>
      <th></th>
      <th colspan="3" halign="left">longitude</th>
      <th colspan="3" halign="left">latitude</th>
      <th colspan="3" halign="left">total_rooms</th>
      <th>total_bedrooms</th>
      <th>...</th>
      <th>population</th>
      <th colspan="3" halign="left">households</th>
      <th colspan="3" halign="left">median_income</th>
      <th colspan="3" halign="left">median_house_value</th>
      </tr>
      <tr>
      <th></th>
      <th>min</th>
      <th>max</th>
      <th>mean</th>
      <th>min</th>
      <th>max</th>
      <th>mean</th>
      <th>min</th>
      <th>max</th>
      <th>mean</th>
      <th>min</th>
      <th>...</th>
      <th>mean</th>
      <th>min</th>
      <th>max</th>
      <th>mean</th>
      <th>min</th>
      <th>max</th>
      <th>mean</th>
      <th>min</th>
      <th>max</th>
      <th>mean</th>
      </tr>
      <tr>
      <th>housing_median_age</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>1.0</th>
      <td>-122.00</td>
      <td>-120.93</td>
      <td>-121.465000</td>
      <td>37.65</td>
      <td>38.23</td>
      <td>37.940000</td>
      <td>2062.0</td>
      <td>2254.0</td>
      <td>2158.000000</td>
      <td>328.0</td>
      <td>...</td>
      <td>637.000000</td>
      <td>112.0</td>
      <td>268.0</td>
      <td>190.000000</td>
      <td>4.2500</td>
      <td>5.2636</td>
      <td>4.756800</td>
      <td>189200.0</td>
      <td>191300.0</td>
      <td>190250.000000</td>
      </tr>
      <tr>
      <th>2.0</th>
      <td>-122.51</td>
      <td>-115.80</td>
      <td>-119.035306</td>
      <td>33.16</td>
      <td>40.58</td>
      <td>35.410816</td>
      <td>96.0</td>
      <td>21897.0</td>
      <td>5237.102041</td>
      <td>18.0</td>
      <td>...</td>
      <td>2005.224490</td>
      <td>16.0</td>
      <td>2873.0</td>
      <td>707.122449</td>
      <td>1.9667</td>
      <td>10.1531</td>
      <td>5.074237</td>
      <td>47500.0</td>
      <td>500001.0</td>
      <td>229438.836735</td>
      </tr>
      <tr>
      <th>3.0</th>
      <td>-122.33</td>
      <td>-115.60</td>
      <td>-118.798478</td>
      <td>32.87</td>
      <td>38.77</td>
      <td>35.164783</td>
      <td>475.0</td>
      <td>21060.0</td>
      <td>6920.326087</td>
      <td>115.0</td>
      <td>...</td>
      <td>2934.673913</td>
      <td>123.0</td>
      <td>3112.0</td>
      <td>1030.413043</td>
      <td>2.1187</td>
      <td>11.5199</td>
      <td>5.572013</td>
      <td>83200.0</td>
      <td>500001.0</td>
      <td>239450.043478</td>
      </tr>
      <tr>
      <th>4.0</th>
      <td>-122.72</td>
      <td>-116.76</td>
      <td>-118.805093</td>
      <td>32.65</td>
      <td>39.00</td>
      <td>34.987764</td>
      <td>2.0</td>
      <td>37937.0</td>
      <td>6065.614907</td>
      <td>2.0</td>
      <td>...</td>
      <td>2739.956522</td>
      <td>2.0</td>
      <td>5189.0</td>
      <td>964.291925</td>
      <td>0.5360</td>
      <td>13.4883</td>
      <td>5.196055</td>
      <td>42500.0</td>
      <td>500001.0</td>
      <td>230054.105590</td>
      </tr>
      <tr>
      <th>5.0</th>
      <td>-122.55</td>
      <td>-115.55</td>
      <td>-118.789497</td>
      <td>32.55</td>
      <td>40.60</td>
      <td>35.095327</td>
      <td>111.0</td>
      <td>25187.0</td>
      <td>4926.261307</td>
      <td>21.0</td>
      <td>...</td>
      <td>2456.979899</td>
      <td>20.0</td>
      <td>3886.0</td>
      <td>826.768844</td>
      <td>0.7526</td>
      <td>12.6320</td>
      <td>4.732460</td>
      <td>50000.0</td>
      <td>500001.0</td>
      <td>211035.708543</td>
      </tr>
      </tbody>
      </table>
      <p>5 rows × 24 columns</p>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos especificar sobre qué columnas queremos realizar ciertos cálculos mediante el paso de un diccionario, donde las claves serán las columnas sobre las que queremos realizar cálculos y los valores serán listas con los cálculos</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">"housing_median_age"</span><span class="p">)</span><span class="o">.</span><span class="n">agg</span><span class="p">({opening_brace}</span><span class="s1">'total_rooms'</span><span class="p">:</span> <span class="p">[</span><span class="s1">'min'</span><span class="p">,</span> <span class="s1">'max'</span><span class="p">,</span> <span class="s1">'mean'</span><span class="p">],</span> <span class="s1">'total_bedrooms'</span><span class="p">:</span> <span class="p">[</span><span class="s1">'min'</span><span class="p">,</span> <span class="s1">'max'</span><span class="p">,</span> <span class="s1">'mean'</span><span class="p">,</span> <span class="s1">'median'</span><span class="p">]{closing_brace})</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[12]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead tr th {
              text-align: left;
          }
      
          .dataframe thead tr:last-of-type th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr>
      <th></th>
      <th colspan="3" halign="left">total_rooms</th>
      <th colspan="4" halign="left">total_bedrooms</th>
      </tr>
      <tr>
      <th></th>
      <th>min</th>
      <th>max</th>
      <th>mean</th>
      <th>min</th>
      <th>max</th>
      <th>mean</th>
      <th>median</th>
      </tr>
      <tr>
      <th>housing_median_age</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>1.0</th>
      <td>2062.0</td>
      <td>2254.0</td>
      <td>2158.000000</td>
      <td>328.0</td>
      <td>343.0</td>
      <td>335.500000</td>
      <td>335.5</td>
      </tr>
      <tr>
      <th>2.0</th>
      <td>96.0</td>
      <td>21897.0</td>
      <td>5237.102041</td>
      <td>18.0</td>
      <td>3513.0</td>
      <td>871.448980</td>
      <td>707.0</td>
      </tr>
      <tr>
      <th>3.0</th>
      <td>475.0</td>
      <td>21060.0</td>
      <td>6920.326087</td>
      <td>115.0</td>
      <td>3559.0</td>
      <td>1190.826087</td>
      <td>954.0</td>
      </tr>
      <tr>
      <th>4.0</th>
      <td>2.0</td>
      <td>37937.0</td>
      <td>6065.614907</td>
      <td>2.0</td>
      <td>5471.0</td>
      <td>1068.192547</td>
      <td>778.0</td>
      </tr>
      <tr>
      <th>5.0</th>
      <td>111.0</td>
      <td>25187.0</td>
      <td>4926.261307</td>
      <td>21.0</td>
      <td>4386.0</td>
      <td>910.924623</td>
      <td>715.0</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos agrupar por más de una columna, para ello, hay que pasar las columnas en una lista</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">california_housing_train</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s2">"housing_median_age"</span><span class="p">,</span> <span class="s2">"total_bedrooms"</span><span class="p">])</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[16]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>longitude</th>
      <th>latitude</th>
      <th>total_rooms</th>
      <th>population</th>
      <th>households</th>
      <th>median_income</th>
      <th>median_house_value</th>
      </tr>
      <tr>
      <th>housing_median_age</th>
      <th>total_bedrooms</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th rowspan="2" valign="top">1.0</th>
      <th>328.0</th>
      <td>-120.93</td>
      <td>37.65</td>
      <td>2254.0</td>
      <td>402.0</td>
      <td>112.0</td>
      <td>4.2500</td>
      <td>189200.0</td>
      </tr>
      <tr>
      <th>343.0</th>
      <td>-122.00</td>
      <td>38.23</td>
      <td>2062.0</td>
      <td>872.0</td>
      <td>268.0</td>
      <td>5.2636</td>
      <td>191300.0</td>
      </tr>
      <tr>
      <th rowspan="3" valign="top">2.0</th>
      <th>18.0</th>
      <td>-115.80</td>
      <td>33.26</td>
      <td>96.0</td>
      <td>30.0</td>
      <td>16.0</td>
      <td>5.3374</td>
      <td>47500.0</td>
      </tr>
      <tr>
      <th>35.0</th>
      <td>-121.93</td>
      <td>37.78</td>
      <td>227.0</td>
      <td>114.0</td>
      <td>49.0</td>
      <td>3.1591</td>
      <td>434700.0</td>
      </tr>
      <tr>
      <th>55.0</th>
      <td>-117.27</td>
      <td>33.93</td>
      <td>337.0</td>
      <td>115.0</td>
      <td>49.0</td>
      <td>3.1042</td>
      <td>164800.0</td>
      </tr>
      <tr>
      <th>...</th>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      </tr>
      <tr>
      <th rowspan="5" valign="top">52.0</th>
      <th>1360.0</th>
      <td>-118.35</td>
      <td>34.06</td>
      <td>3446.0</td>
      <td>1768.0</td>
      <td>1245.0</td>
      <td>2.4722</td>
      <td>500001.0</td>
      </tr>
      <tr>
      <th>1535.0</th>
      <td>-122.41</td>
      <td>37.80</td>
      <td>3260.0</td>
      <td>3260.0</td>
      <td>1457.0</td>
      <td>0.9000</td>
      <td>500001.0</td>
      </tr>
      <tr>
      <th>1944.0</th>
      <td>-118.25</td>
      <td>34.05</td>
      <td>2806.0</td>
      <td>2232.0</td>
      <td>1605.0</td>
      <td>0.6775</td>
      <td>350000.0</td>
      </tr>
      <tr>
      <th>2509.0</th>
      <td>-122.41</td>
      <td>37.79</td>
      <td>6016.0</td>
      <td>3436.0</td>
      <td>2119.0</td>
      <td>2.5166</td>
      <td>275000.0</td>
      </tr>
      <tr>
      <th>2747.0</th>
      <td>-122.41</td>
      <td>37.79</td>
      <td>5783.0</td>
      <td>4518.0</td>
      <td>2538.0</td>
      <td>1.7240</td>
      <td>225000.0</td>
      </tr>
      </tbody>
      </table>
      <p>13394 rows × 7 columns</p>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="17.-Gr%C3%A1ficos">17. Gráficos<a class="anchor-link" href="#17.-Gr%C3%A1ficos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 60" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pandas ofrece la posibilidad de representar los datos de nuestros <code>DataFrame</code>s en gráficos para poder obtener una mejor representación de ello. Para ello hace uso de la librería <code>matplotlib</code> que veremos en el siguiente post</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.1.-Gr%C3%A1fica-b%C3%A1sica">17.1. Gráfica básica<a class="anchor-link" href="#17.1.-Gr%C3%A1fica-b%C3%A1sica"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 61" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para representar los datos en una gráfica, la manera más fácil es usar el método <code>plot()</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">serie</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s2">"1/1/2000"</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">1000</span><span class="p">))</span>
      <span class="n">serie</span> <span class="o">=</span> <span class="n">serie</span><span class="o">.</span><span class="n">cumsum</span><span class="p">()</span>
      
      <span class="n">serie</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[13]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc5666b9990&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas0.webp" width="377" height="260" alt="image pandas 1" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En el caso de tener un <code>DataFrame</code>, el método <code>plot()</code> representará cada una de las columnas del <code>DataFrame</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
          <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">ts</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"B"</span><span class="p">,</span> <span class="s2">"C"</span><span class="p">,</span> <span class="s2">"D"</span><span class="p">]</span>
      <span class="p">)</span>
      <span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">cumsum</span><span class="p">()</span>
      
      <span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[15]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc5663ce610&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas1.webp" width="377" height="260" alt="image pandas 2" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.2.-Diagrama-de-barras-verticales">17.2. Diagrama de barras verticales<a class="anchor-link" href="#17.2.-Diagrama-de-barras-verticales"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 62" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hay más métodos de crear gráficos, como el diagrama de barras vertical mediante <code>plot.bar()</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">,</span> <span class="s2">"d"</span><span class="p">])</span>
      <span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">bar</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas2.webp" width="372" height="245" alt="image pandas 3" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos apilar las barras, lo indicamos mediante la variable <code>stacked=True</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">stacked</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[20]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc56265c5d0&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas3.webp" width="372" height="245" alt="image pandas 4" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.3.-Diagrama-de-barras-horizontal">17.3. Diagrama de barras horizontal<a class="anchor-link" href="#17.3.-Diagrama-de-barras-horizontal"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 63" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para crear un diagrama de barras horizontal usamos <code>plot.barh()</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">barh</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[21]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc56247fa10&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas4.webp" width="362" height="248" alt="image pandas 5" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos apilar las barras, lo indicamos mediante la variable <code>stacked=True</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">barh</span><span class="p">(</span><span class="n">stacked</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[22]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc562d1d2d0&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas5.webp" width="362" height="248" alt="image pandas 6" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.4.-Histograma">17.4. Histograma<a class="anchor-link" href="#17.4.-Histograma"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 64" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para crear un histograma usamos <code>plot.hist()</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
          <span class="p">{opening_brace}</span>
              <span class="s2">"a"</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
              <span class="s2">"b"</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span>
              <span class="s2">"c"</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span>
          <span class="p">{closing_brace}</span>
      <span class="p">)</span>
      
      <span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[28]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc5650711d0&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas6.webp" width="389" height="248" alt="image pandas 7" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos apilar las barras, lo indicamos mediante la variable <code>stacked=True</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">stacked</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[29]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc5625779d0&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas7.webp" width="389" height="248" alt="image pandas 8" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos añadir más columnas, es decir, si queremos que el histograma sea más informativo o preciso, lo indicamos mediante la variable <code>bins</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">stacked</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[30]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc562324990&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas8.webp" width="389" height="248" alt="image pandas 9" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.5.-Diagramas-de-velas">17.5. Diagramas de velas<a class="anchor-link" href="#17.5.-Diagramas-de-velas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 65" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para crear un diagrama de velas usamos <code>plot.box()</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">"A"</span><span class="p">,</span> <span class="s2">"B"</span><span class="p">,</span> <span class="s2">"C"</span><span class="p">,</span> <span class="s2">"D"</span><span class="p">,</span> <span class="s2">"E"</span><span class="p">])</span>
      
      <span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">box</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[34]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc56201a410&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas9.webp" width="372" height="248" alt="image pandas 10" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.6.-Gr%C3%A1ficos-de-%C3%A1reas">17.6. Gráficos de áreas<a class="anchor-link" href="#17.6.-Gr%C3%A1ficos-de-%C3%A1reas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 66" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para crear un gráfico de áreas usamos <code>plot.area()</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">area</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[36]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc561e9ca50&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas10.webp" width="372" height="248" alt="image pandas 11" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.7.-Diagrama-de-dispersi%C3%B3n">17.7. Diagrama de dispersión<a class="anchor-link" href="#17.7.-Diagrama-de-dispersi%C3%B3n"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 67" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para crear un diagrama de dispersión usamos <code>plot.scatter()</code>, donde hay que indicar las variables <code>x</code> y <code>y</code> del diagrama</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">'A'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">'B'</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[38]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc561e2ff10&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas11.webp" width="386" height="262" alt="image pandas 12" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="17.8.-Gr%C3%A1fico-de-contenedor-hex%C3%A1gonal">17.8. Gráfico de contenedor hexágonal<a class="anchor-link" href="#17.8.-Gr%C3%A1fico-de-contenedor-hex%C3%A1gonal"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 68" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para crear un gráfico de contenedor hexagonal usamos <code>plot.hexbin()</code>, donde hay que indicar las variables <code>x</code> y <code>y</code> del diagrama y el tamaño de la malla mediante <code>gridsize</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">])</span>
      <span class="n">dataframe</span><span class="p">[</span><span class="s2">"b"</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataframe</span><span class="p">[</span><span class="s2">"b"</span><span class="p">]</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
      
      <span class="n">dataframe</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hexbin</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s2">"a"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s2">"b"</span><span class="p">,</span> <span class="n">gridsize</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[40]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc561cdded0&gt;</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/pandas12.webp" width="369" height="241" alt="image pandas 13" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      






    </div>

  </section>

</PostLayout>
