---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Bash scripting';
const end_url = 'bash-scripting';
const description = 'PSinta-se como um programador da velha guarda üêß com esta postagem sobre scripts bash';
const keywords = 'bash, scripting, linux, old school, terminal';
const languaje = 'PT';
const image_path = 'https://images.maximofn.com/bash-scripting.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=520
    image_height=245
    image_extension=webp
    article_date=2023-02-01+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Pasta com scripts"><h2>Pasta com scripts</h2></a>
      <a class="anchor-link" href="#Primeiro script"><h2>Primeiro script</h2></a>
      <a class="anchor-link" href="#Especificacao do binario de execucao"><h3>Especifica√ß√£o do bin√°rio de execu√ß√£o</h3></a>
      <a class="anchor-link" href="#Comentarios em scripts de bash"><h3>Coment√°rios em scripts de bash</h3></a>
      <a class="anchor-link" href="#Imprimir na tela com o comando echo"><h3>Imprimir na tela com o comando <code>echo</code></h3></a>
      <a class="anchor-link" href="#Declaracao de variaveis"><h2>Declara√ß√£o de vari√°veis</h2></a>
      <a class="anchor-link" href="#Exportacao de variaveis"><h4>Exporta√ß√£o de vari√°veis</h4></a>
      <a class="anchor-link" href="#Tipos de operadores"><h2>Tipos de operadores</h2></a>
      <a class="anchor-link" href="#Passagem de argumentos"><h2>Passagem de argumentos</h2></a>
      <a class="anchor-link" href="#Executar comandos e salva-los em uma variavel"><h2>Executar comandos e salv√°-los em uma vari√°vel</h2></a>
      <a class="anchor-link" href="#Depuracao"><h2>Depura√ß√£o</h2></a>
      <a class="anchor-link" href="#Obter informacoes do usuario"><h2>Obter informa√ß√µes do usu√°rio</h2></a>
      <a class="anchor-link" href="#Obter informa√ß√µes usando os comandos echo e read"><h3>Obter informa√ß√µes usando os comandos <code>echo</code> e <code>read</code></h3></a>
      <a class="anchor-link" href="#Obter informa√ß√µes apenas com o comando read"><h3>Obter informa√ß√µes apenas com o comando <code>read</code></h3></a>
      <a class="anchor-link" href="#Validar a informacao do usuario"><h2>Validar a informa√ß√£o do usu√°rio</h2></a>
      <a class="anchor-link" href="#Se nao"><h2>Se n√£o</h2></a>
      <a class="anchor-link" href="#Expressoes condicionais"><h2>Express√µes condicionais</h2></a>
      <a class="anchor-link" href="#Senten√ßa case"><h2>Senten√ßa <code>case</code></h2></a>
      <a class="anchor-link" href="#Arrays"><h2>Arrays</h2></a>
      <a class="anchor-link" href="#La√ßo for"><h2>La√ßo <code>for</code></h2></a>
      <a class="anchor-link" href="#La√ßo while"><h2>La√ßo <code>while</code></h2></a>
      <a class="anchor-link" href="#Controle de fluxo com break e continue"><h2>Controle de fluxo com <code>break</code> e <code>continue</code></h2></a>
      <a class="anchor-link" href="#Funcoes"><h2>Fun√ß√µes</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Aviso: Este post foi traduzido para o portugu√™s usando um modelo de tradu√ß√£o autom√°tica. Por favor, me avise se encontrar algum erro.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Pasta com scripts">Pasta com scripts<a class="anchor-link" href="#Pasta com scripts"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 49" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para realizar este post, vamos a criar uma pasta onde vamos guardar todos os scripts</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="n">scripts_bash</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Primeiro script">Primeiro script<a class="anchor-link" href="#Primeiro script"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 50" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Especificacao do binario de execucao">Especifica√ß√£o do bin√°rio de execu√ß√£o<a class="anchor-link" href="#Especificacao do binario de execucao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 51" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Em Linux, pode-se indicar com qual programa executar um arquivo colocando na primeira linha <code>#!&#x3C;caminho do bin√°rio&#x3E;</code>, por exemplo, se criarmos um <code>.py</code> podemos indicar que deve ser executado com Python colocando na primeira linha <code>#!/usr/bin/python3</code>. No nosso caso, como estamos fazendo um script da terminal, colocamos na primeira linha <code>#!/bin/bash</code>.</p>
      <p>Agora, se forem concedidas permiss√µes de execu√ß√£o ao arquivo, ele pode ser executado diretamente sem indicar o programa com o qual deve ser executado. Isso significa que o <code>.py</code> n√£o precisa mais ser executado por meio de <code>python script.py</code>, mas pode ser executado por meio de <code>./script.py</code>. No nosso caso, em vez de executar o arquivo por meio de <code>bash script.sh</code>, podemos execut√°-lo por meio de <code>./script.sh</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Comentarios em scripts de bash">Coment√°rios em scripts de bash<a class="anchor-link" href="#Comentarios em scripts de bash"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 52" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos introduzir um coment√°rio bastaria come√ßar a linha com <code>#</code>.</p>
      <div class='highlight'><pre><code class="language-bash"># Isto √© um coment√°rio de uma √∫nica linha</code></pre></div>
      <p>Se quisermos introduzir v√°rias linhas de coment√°rios temos que come√ßar com <code>:#</code> e terminar com <code>#</code></p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">&#39;: &#39;<br>Este √© um coment√°rio de v√°rias linhas<br>que se estende atrav√©s de v√°rias linhas.<br>&#39;&#39;</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Imprimir na tela com o comando echo">Imprimir na tela com o comando <code>echo</code><a class="anchor-link" href="#Imprimir na tela com o comando echo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 53" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos imprimir na tela, usamos o comando <code>echo</code> seguido do que queremos imprimir.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">01</span><span class="n">_primerScript</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="c1"># Comentario de una sola linea</span>',
      '<span class="p">:</span> <span class="s1">&#39;</span>',
      '<span class="n">Comentario</span> <span class="n">de</span> <span class="n">varias</span>',
      '<span class="n">lineas</span>',
      '<span class="s1">&#39;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Hola mundo&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/01_primerScript.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Damos permiss√µes de execu√ß√£o e executamos o script</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">01</span><span class="n">_primerScript</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">01</span><span class="n">_primerScript</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hola mundo',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Declaracao de variaveis">Declara√ß√£o de vari√°veis<a class="anchor-link" href="#Declaracao de variaveis"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 54" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>H√° dois tipos de vari√°veis: as <code>vari√°veis de usu√°rio</code> e as <code>vari√°veis de ambiente</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para criar uma vari√°vel basta declar√°-la inserindo o nome que quisermos, seguido de <code>=</code> e o valor</p>
      <p>Para imprimir o valor de uma vari√°vel com <code>echo</code>, √© necess√°rio referenciar-se a ela atrav√©s de <code>$&#x3C;nome da vari√°vel&#x3E;</code></p>
      <div class='highlight'><pre><code class="language-bash">echo "Vari√°vel = $&lt;nome da vari√°vel&gt;"</code></pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">02</span><span class="n">_variables</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="n">opcion</span><span class="o">=</span><span class="mi">1</span>',
      '<span class="n">nombre</span><span class="o">=</span><span class="s2">&quot;Juan&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="s2">&quot;Opcion: $opcion&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Nombre: $nombre&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/02_variables.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">02</span><span class="n">_variables</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">02</span><span class="n">_variables</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Opcion: 1',
          'Nombre: Juan',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>√Çmbito das vari√°veis</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As vari√°veis criadas s√≥ s√£o acess√≠veis a partir do script, ou seja, seu escopo √© dentro do script.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Exportacao de variaveis">Exporta√ß√£o de vari√°veis<a class="anchor-link" href="#Exportacao de variaveis"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 55" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos exportar vari√°veis para que estejam acess√≠veis por outros scripts. Para isso, primeiro exportamos a vari√°vel usando o comando <code>export</code> e, dentro do script, executamos o segundo script ao qual queremos passar a vari√°vel.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">02</span><span class="n">_variables</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="n">opcion</span><span class="o">=</span><span class="mi">1</span>',
      '<span class="n">nombre</span><span class="o">=</span><span class="s2">&quot;Juan&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="s2">&quot;Opcion: $opcion&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Nombre: $nombre&quot;</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Exportar variable nombre</span>',
      '<span class="n">echo</span> <span class="s2">&quot;export nombre=$nombre&quot;</span>',
      '<span class="n">export</span> <span class="n">nombre</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Ejecutar script de importacion</span>',
      '<span class="n">echo</span> <span class="s2">&quot;&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Ejecutando script de importacion&quot;</span>',
      '<span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">02</span><span class="n">_variables_importacion</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/02_variables.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">02</span><span class="n">_variables_importacion</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Nombre importado: $nombre&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/02_variables_importacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">02</span><span class="n">_variables</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">02</span><span class="n">_variables_importacion</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">02</span><span class="n">_variables</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Opcion: 1',
          'Nombre: Juan',
          'export nombre=Juan',
          'Ejecutando script de importacion',
          'Nombre importado: Juan',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O segundo script deve ser executado dentro do primeiro script. Se agora executarmos o segundo script, n√£o teremos a vari√°vel</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">02</span><span class="n">_variables_importacion</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">02</span><span class="n">_variables_importacion</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Nombre importado:',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos que seja acess√≠vel de qualquer segundo script, sem ter que execut√°-lo dentro do primeiro script, temos que exportar a vari√°vel para uma vari√°vel de ambiente.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Tipos de operadores">Tipos de operadores<a class="anchor-link" href="#Tipos de operadores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 56" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A seguir, mostramos todos os poss√≠veis operadores</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">03</span><span class="n">_operadores</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Asignaci√≥n de variables</span>',
      '<span class="n">x</span><span class="o">=</span><span class="mi">10</span>',
      '<span class="n">y</span><span class="o">=</span><span class="mi">20</span>',
      '<span class="n">echo</span> <span class="s2">&quot;x = $x&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;y = $y&quot;</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Operadores aritm√©ticos</span>',
      '<span class="n">echo</span> <span class="s2">&quot;&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Operadores aritm√©ticos&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;x + y = $((x + y))&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;x - y = $((x - y))&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;x * y = $((x * y))&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;x / y = $((x / y))&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;x % y = $((x % y))&quot;</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Operadores de comparaci√≥n</span>',
      '<span class="n">echo</span> <span class="s2">&quot;&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Operadores de comparaci√≥n&quot;</span>',
      '<span class="k">if</span> <span class="p">[</span> <span class="s2">&quot;$x&quot;</span> <span class="o">-</span><span class="n">eq</span> <span class="s2">&quot;$y&quot;</span> <span class="p">];</span> <span class="n">then</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;x es igual a y&quot;</span>',
      '<span class="k">else</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;x no es igual a y&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="p">[</span> <span class="s2">&quot;$x&quot;</span> <span class="o">-</span><span class="n">ne</span> <span class="s2">&quot;$y&quot;</span> <span class="p">];</span> <span class="n">then</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;x no es igual a y&quot;</span>',
      '<span class="k">else</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;x es igual a y&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="p">[</span> <span class="s2">&quot;$x&quot;</span> <span class="o">-</span><span class="n">lt</span> <span class="s2">&quot;$y&quot;</span> <span class="p">];</span> <span class="n">then</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;x es menor que y&quot;</span>',
      '<span class="k">else</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;x no es menor que y&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="p">[</span> <span class="s2">&quot;$x&quot;</span> <span class="o">-</span><span class="n">gt</span> <span class="s2">&quot;$y&quot;</span> <span class="p">];</span> <span class="n">then</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;x es mayor que y&quot;</span>',
      '<span class="k">else</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;x no es mayor que y&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Operadores de cadena</span>',
      '<span class="n">echo</span> <span class="s2">&quot;&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Operadores de cadena&quot;</span>',
      '<span class="k">if</span> <span class="p">[</span> <span class="s2">&quot;$a&quot;</span> <span class="o">=</span> <span class="s2">&quot;$b&quot;</span> <span class="p">];</span> <span class="n">then</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;a es igual a b&quot;</span>',
      '<span class="k">else</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;a no es igual a b&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="p">[</span> <span class="s2">&quot;$a&quot;</span> <span class="o">!=</span> <span class="s2">&quot;$b&quot;</span> <span class="p">];</span> <span class="n">then</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;a no es igual a b&quot;</span>',
      '<span class="k">else</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;a es igual a b&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">z</span> <span class="s2">&quot;$a&quot;</span> <span class="p">];</span> <span class="n">then</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;a es una cadena vac√≠a&quot;</span>',
      '<span class="k">else</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;a no es una cadena vac√≠a&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">n</span> <span class="s2">&quot;$a&quot;</span> <span class="p">];</span> <span class="n">then</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;a no es una cadena vac√≠a&quot;</span>',
      '<span class="k">else</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;a es una cadena vac√≠a&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Operadores de archivo</span>',
      '<span class="n">echo</span> <span class="s2">&quot;&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Operadores de archivo&quot;</span>',
      '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">e</span> <span class="s2">&quot;/path/to/file&quot;</span> <span class="p">];</span> <span class="n">then</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;El archivo existe&quot;</span>',
      '<span class="k">else</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;El archivo no existe&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">f</span> <span class="s2">&quot;/path/to/file&quot;</span> <span class="p">];</span> <span class="n">then</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;Es un archivo regular&quot;</span>',
      '<span class="k">else</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;No es un archivo regular&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">d</span> <span class="s2">&quot;/path/to/dir&quot;</span> <span class="p">];</span> <span class="n">then</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;Es un directorio&quot;</span>',
      '<span class="k">else</span>',
      '<span class="w">  </span><span class="n">echo</span> <span class="s2">&quot;No es un directorio&quot;</span>',
      '<span class="n">fi</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/03_operadores.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">03</span><span class="n">_operadores</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">03</span><span class="n">_operadores</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'x = 10',
          'y = 20',
          'Operadores aritm√©ticos',
          'x + y = 30',
          'x - y = -10',
          'x * y = 200',
          'x / y = 0',
          'x % y = 10',
          'Operadores de comparaci√≥n',
          'x no es igual a y',
          'x no es igual a y',
          'x es menor que y',
          'x no es mayor que y',
          'Operadores de cadena',
          'a es igual a b',
          'a es igual a b',
          'a es una cadena vac√≠a',
          'a es una cadena vac√≠a',
          'Operadores de archivo',
          'El archivo no existe',
          'No es un archivo regular',
          'No es un directorio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Passagem de argumentos">Passagem de argumentos<a class="anchor-link" href="#Passagem de argumentos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 57" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>√â poss√≠vel passar argumentos para os scripts, uma vez dentro do script podemos utiliz√°-los da seguinte maneira</p>
      <ul>
        <li>Por n√∫mero de argumento: neste caso ser√£o nomeados como <code>$1</code>, <code>$2</code>, etc. Mas no caso de o n√∫mero de argumentos ser maior que 9, ou seja, quando forem necess√°rios mais de 2 d√≠gitos para nome√°-los, nesse caso o n√∫mero ser√° identificado entre chaves, <code>$&#123;1&#125;</code>, <code>$&#123;2&#125;</code>, ..., <span class="math-inline">&#123;10&#125;, </span>&#123;11&#125;, etc</li>
        <li>Se o argumento for chamado <code>$0</code>, estamos obtendo o nome do arquivo</li>
        <li>Se quisermos todos os argumentos, fazemo-lo atrav√©s de <code>$*</code></li>
        <li>Se quisermos o n√∫mero de argumentos que temos, obtemos atrav√©s de <code>$#</code>* Se quisermos saber a sa√≠da do √∫ltimo comando, podemos faz√™-lo atrav√©s de <code>$?</code></li>
        <li>Se quisermos saber o <code>PID</code> do script, podemos saber atrav√©s de <code>$$</code></li>
        <li>Podemos substituir o valor de uma string de um argumento mediante <code>$&#123;<√≠ndice do argumento>/string que se quer substituir/nova string&#125;</code>, ou seja, se tivermos <code>$&#123;1/ol√°/hello&#125;</code> substituir√° a palavra <code>ol√°</code> pela palavra <code>hello</code> no argumento 1</li>
        <li>No entanto, se usarmos <code>$&#123;<√≠ndice do argumento>/#cadeia a ser substitu√≠da/nova cadeia&#125;</code>, apenas substituir√° a cadeia no argumento se este come√ßar com essa cadeia.</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">04</span><span class="n">_argumentos</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Pasos de argumentos simples</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Primer argumento: $1&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Segundo argumento: $2&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Tercer argumento: $3&quot;</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Accediendo a todos los argumentos</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Todos los argumentos: $*&quot;</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Accediendo al n√∫mero de argumentos</span>',
      '<span class="n">echo</span> <span class="s2">&quot;N√∫mero de argumentos: $#&quot;</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Accediendo al nombre del script</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Nombre del script: $0&quot;</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Accediendo al c√≥digo de salida del √∫ltimo comando ejecutado</span>',
      '<span class="n">echo</span> <span class="s2">&quot;C√≥digo de salida del √∫ltimo comando: $?&quot;</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Accediendo al PID del script</span>',
      '<span class="n">echo</span> <span class="s2">&quot;PID del script: $$&quot;</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Accediendo a los argumentos con √≠ndices</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Argumento 3: $</span><span class="si">{3}</span><span class="s2">&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Argumento 2: $</span><span class="si">{2}</span><span class="s2">&quot;</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Accediendo a los argumentos con √≠ndices y longitud m√°xima</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Argumento 3 con longitud m√°xima de 2 caracteres: ${3:0:2}&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Argumento 2 con longitud m√°xima de 3 caracteres: ${2:0:3}&quot;</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Reemplazando argumentos con √≠ndices y longitud m√°xima</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Reemplazando argumento 3: ${3/arg/ARG}&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Reemplazando argumento{2/arg/ARG}&quot;</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Accediendo a los argumentos con √≠ndices y patrones de reemplazo</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Reemplazando patr√≥n en argumento 3: ${3/#tercer/TERCER}&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Reemplazando patr√≥n en argumento 2: ${2/#arg/ARG}&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/04_argumentos.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">arg1</span><span class="o">=</span><span class="s2">&quot;primer argumento&quot;</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">arg2</span><span class="o">=</span><span class="s2">&quot;segundo argumento&quot;</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">arg3</span><span class="o">=</span><span class="s2">&quot;tercer argumento&quot;</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">04</span><span class="n">_argumentos</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">04</span><span class="n">_argumentos</span><span class="o">.</span><span class="n">sh</span> <span class="s2">&quot;$arg1&quot;</span> <span class="s2">&quot;$arg2&quot;</span> <span class="s2">&quot;$arg3&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Primer argumento: primer argumento',
          'Segundo argumento: segundo argumento',
          'Tercer argumento: tercer argumento',
          'Todos los argumentos: primer argumento segundo argumento tercer argumento',
          'N√∫mero de argumentos: 3',
          'Nombre del script: ./scripts_bash/04_argumentos.sh',
          'C√≥digo de salida del √∫ltimo comando: 0',
          'PID del script: 11644',
          'Argumento 3: tercer argumento',
          'Argumento 2: segundo argumento',
          'Argumento 3 con longitud m√°xima de 2 caracteres: te',
          'Argumento 2 con longitud m√°xima de 3 caracteres: seg',
          'Reemplazando argumento 3: tercer ARGumento',
          'Reemplazando argumento 2: segundo ARGumento',
          'Reemplazando patr√≥n en argumento 3: tercer argumento',
          'Reemplazando patr√≥n en argumento 2: segundo argumento',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Executar comandos e salva-los em uma variavel">Executar comandos e salv√°-los em uma vari√°vel<a class="anchor-link" href="#Executar comandos e salva-los em uma variavel"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 58" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Temos duas maneiras de executar um comando e salvar sua sa√≠da em uma vari√°vel</p>
      <ul>
        <li>Atrav√©s de <code>variable=command</code>* Atrav√©s de <code>variable=$(command)</code></li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">05</span><span class="n">_variables_comandos</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="w"> </span>',
      '<span class="n">path</span><span class="o">=</span><span class="err">$</span><span class="p">(</span><span class="n">pwd</span><span class="p">)</span>',
      '<span class="n">infokernel</span><span class="o">=</span><span class="err">`</span><span class="n">uname</span> <span class="o">-</span><span class="n">a</span><span class="err">`</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="s2">&quot;El directorio actual es: $path&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;La informaci√≥n del kernel es: $infokernel&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/05_variables_comandos.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">05</span><span class="n">_variables_comandos</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">05</span><span class="n">_variables_comandos</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'El directorio actual es: /home/wallabot/Documentos/web/portafolio/posts',
          'La informaci√≥n del kernel es: Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Depuracao">Depura√ß√£o<a class="anchor-link" href="#Depuracao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 59" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>H√° duas maneiras de depurar em bash scripting</p>
      <ul>
        <li>Usando <code>-v</code>: Execu√ß√£o detalhada de um script linha por linha* Usando <code>-x</code>: Exibi√ß√£o de informa√ß√µes do script</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">bash</span> <span class="o">-</span><span class="n">v</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">05</span><span class="n">_variables_comandos</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '#!/bin/bash',
          'path=$(pwd)',
          'infokernel=`uname -a`',
          'echo &quot;El directorio actual es: $path&quot;',
          'El directorio actual es: /home/wallabot/Documentos/web/portafolio/posts',
          'echo &quot;La informaci√≥n del kernel es: $infokernel&quot;',
          'La informaci√≥n del kernel es: Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">bash</span> <span class="o">-</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">05</span><span class="n">_variables_comandos</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '++ pwd',
          '+ path=/home/wallabot/Documentos/web/portafolio/posts',
          '++ uname -a',
          '+ infokernel=&#x27;Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux&#x27;',
          '+ echo &#x27;El directorio actual es: /home/wallabot/Documentos/web/portafolio/posts&#x27;',
          'El directorio actual es: /home/wallabot/Documentos/web/portafolio/posts',
          '+ echo &#x27;La informaci√≥n del kernel es: Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux&#x27;',
          'La informaci√≥n del kernel es: Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Obter informacoes do usuario">Obter informa√ß√µes do usu√°rio<a class="anchor-link" href="#Obter informacoes do usuario"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 60" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Obter informa√ß√µes usando os comandos echo e read">Obter informa√ß√µes usando os comandos <code>echo</code> e <code>read</code><a class="anchor-link" href="#Obter informa√ß√µes usando os comandos echo e read"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 61" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Temos tr√™s maneiras de obter informa√ß√µes do usu√°rio</p>
      <ul>
        <li>Com o comando <code>echo -n</code>. Com a flag <code>-n</code> indicamos que n√£o queremos que seja impressa uma quebra de linha no final do <code>echo</code>. Por exemplo, <code>echo -n "Introduza dado: "</code>, com este comando solicitamos um dado e o cursor permanecer√° na mesma linha, sem uma quebra.</li>
        <li>Atrav√©s do comando <code>read</code>. Com este comando, o programa ficar√° esperando que o usu√°rio insira dados terminando com uma quebra de linha. O que foi inserido ser√° armazenado na vari√°vel <code>REPLY</code>. Se voc√™ quiser que a vari√°vel onde os dados inseridos pelo usu√°rio sejam armazenados tenha outro nome, deve-se inserir <code>read [vari√°vel]</code>, por exemplo o comando <code>read minhaVariavel</code>, armazenar√° o dado do usu√°rio na vari√°vel <code>minhaVariavel</code></li>
        <li>Atrav√©s do comando <code>$REPLY</code> ou <code>$(vari√°vel)</code> acessamos os dados inseridos pelo usu√°rio.</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">06</span><span class="n">_leer_informacion</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="w"> </span>',
      '<span class="n">option</span><span class="o">=</span><span class="mi">0</span>',
      '<span class="n">backupName</span><span class="o">=</span><span class="s2">&quot;&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="s2">&quot;Programa de utilidades&quot;</span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">&quot;Ingresar una opci√≥n: &quot;</span>',
      '<span class="n">read</span>',
      '<span class="n">option</span><span class="o">=</span><span class="err">$</span><span class="n">REPLY</span>',
      '<span class="n">echo</span> <span class="s2">&quot;&quot;</span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">&quot;Ingresar un nombre: &quot;</span>',
      '<span class="n">read</span> <span class="n">backupName</span>',
      '<span class="n">echo</span> <span class="s2">&quot;&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Opci√≥n: $option, backupName: $backupName&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/06_leer_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como em um jupyter notebook n√£o posso inserir os dados conforme me s√£o solicitados, eu os insiro antes em um pipe <code>|</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">06</span><span class="n">_leer_informacion</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;1</span><span class="se">\n</span><span class="s2">nombreprueba&quot;</span> <span class="o">|</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">06</span><span class="n">_leer_informacion</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Programa de utilidades',
          'Ingresar una opci√≥n:',
          'Ingresar un nombre:',
          'Opci√≥n: 1, backupName: nombreprueba',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Obter informa√ß√µes apenas com o comando read">Obter informa√ß√µes apenas com o comando <code>read</code><a class="anchor-link" href="#Obter informa√ß√µes apenas com o comando read"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 62" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Outra forma de obter informa√ß√µes √© usar apenas o comando <code>read</code>, a sintaxe seria</p>
      <div class='highlight'><pre><code class="language-bash">`read -p "Mensagem de prompt:" [vari√°vel]`</code></pre></div>
      <p>A bandeira <code>-p</code> indica que a mensagem <code>Prompt message:</code> ser√° exibida antes de aguardar a entrada do usu√°rio. Se n√£o for especificado um nome de vari√°vel, o dado ser√° armazenado na vari√°vel <code>REPLY</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">06</span><span class="n">_leer_informacion</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="w"> </span>',
      '<span class="n">option</span><span class="o">=</span><span class="mi">0</span>',
      '<span class="n">backupName</span><span class="o">=</span><span class="s2">&quot;&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="s2">&quot;Programa de utilidades&quot;</span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">&quot;Ingresar una opci√≥n: &quot;</span>',
      '<span class="n">read</span>',
      '<span class="n">option1</span><span class="o">=</span><span class="err">$</span><span class="n">REPLY</span>',
      '<span class="n">echo</span> <span class="s2">&quot;&quot;</span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">&quot;Ingresar un nombre: &quot;</span>',
      '<span class="n">read</span> <span class="n">backupName</span>',
      '<span class="n">echo</span> <span class="s2">&quot;&quot;</span>',
      '<span class="n">read</span> <span class="o">-</span><span class="n">p</span> <span class="s2">&quot;Ingresar otra opci√≥n: &quot;</span> <span class="n">option2</span>',
      '<span class="n">echo</span> <span class="s2">&quot;&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Opci√≥n: $option1-$option2, backupName: $backupName&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/06_leer_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">06</span><span class="n">_leer_informacion</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;1</span><span class="se">\n</span><span class="s2">nombreprueba</span><span class="se">\n</span><span class="s2">2&quot;</span> <span class="o">|</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">06</span><span class="n">_leer_informacion</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Programa de utilidades',
          'Ingresar una opci√≥n:',
          'Ingresar un nombre:',
          'Opci√≥n: 1-2, backupName: nombreprueba',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Validar a informacao do usuario">Validar a informa√ß√£o do usu√°rio<a class="anchor-link" href="#Validar a informacao do usuario"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 63" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para validar a informa√ß√£o do usu√°rio, o melhor seria usar express√µes regulares. Aqui deixo um <a href="https://maximofn.com/expresiones-regulares/">post</a> onde as explico.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al√©m disso, podemos especificar o n√∫mero de caracteres que queremos que o usu√°rio insira quando usamos <code>read</code>. Para isso, usamos a flag <code>-n</code>, que, se n√£o for seguida por nenhum n√∫mero, aguardar√° at√© que o usu√°rio insira uma quebra de linha. Se for seguida por um n√∫mero, aguardar√° at√© que o usu√°rio insira esse n√∫mero de caracteres.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">07</span><span class="n">_validar_informacion</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="w"> </span>',
      '<span class="n">option</span><span class="o">=</span><span class="mi">0</span>',
      '<span class="n">backupName</span><span class="o">=</span><span class="s2">&quot;&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="s2">&quot;Programa de utilidades&quot;</span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">&quot;Ingresar una opci√≥n: &quot;</span>',
      '<span class="n">read</span> <span class="o">-</span><span class="n">n1</span>',
      '<span class="n">option1</span><span class="o">=</span><span class="err">$</span><span class="n">REPLY</span>',
      '<span class="n">echo</span> <span class="s2">&quot;&quot;</span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">&quot;Ingresar un nombre: &quot;</span>',
      '<span class="n">read</span> <span class="o">-</span><span class="n">n4</span> <span class="n">backupName</span>',
      '<span class="n">echo</span> <span class="s2">&quot;&quot;</span>',
      '<span class="n">read</span> <span class="o">-</span><span class="n">p</span> <span class="s2">&quot;Ingresar otra opci√≥n: &quot;</span> <span class="n">option2</span>',
      '<span class="n">echo</span> <span class="s2">&quot;&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Opci√≥n: $option1-$option2, backupName: $backupName&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/07_validar_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">07</span><span class="n">_validar_informacion</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;1back2&quot;</span> <span class="o">|</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">07</span><span class="n">_validar_informacion</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Programa de utilidades',
          'Ingresar una opci√≥n:',
          'Ingresar un nombre:',
          'Opci√≥n: 1-2, backupName: back',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos que o usu√°rio insira um valor confidencial, como uma chave, usamos a flag <code>-s</code> (seguran√ßa). Dessa forma, quando o usu√°rio digitar o dado, ele n√£o ser√° exibido na console.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">07</span><span class="n">_validar_informacion</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="w"> </span>',
      '<span class="n">option</span><span class="o">=</span><span class="mi">0</span>',
      '<span class="n">backupName</span><span class="o">=</span><span class="s2">&quot;&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="s2">&quot;Programa de utilidades&quot;</span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">&quot;Ingresar una opci√≥n: &quot;</span>',
      '<span class="n">read</span> <span class="o">-</span><span class="n">n1</span>',
      '<span class="n">option1</span><span class="o">=</span><span class="err">$</span><span class="n">REPLY</span>',
      '<span class="n">echo</span> <span class="s2">&quot;&quot;</span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">&quot;Ingresar un nombre: &quot;</span>',
      '<span class="n">read</span> <span class="o">-</span><span class="n">n4</span> <span class="n">backupName</span>',
      '<span class="n">echo</span> <span class="s2">&quot;&quot;</span>',
      '<span class="n">read</span> <span class="o">-</span><span class="n">p</span> <span class="s2">&quot;Ingresar otra opci√≥n: &quot;</span> <span class="n">option2</span>',
      '<span class="n">echo</span> <span class="s2">&quot;&quot;</span>',
      '<span class="n">read</span> <span class="o">-</span><span class="n">s</span> <span class="o">-</span><span class="n">p</span> <span class="s2">&quot;Password: &quot;</span> <span class="n">password</span>',
      '<span class="n">echo</span> <span class="s2">&quot;&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Opci√≥n: $option1-$option2, backupName: $backupName, password: $password&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/07_validar_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">07</span><span class="n">_validar_informacion</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;1back2</span><span class="se">\n</span><span class="s2">1234&quot;</span> <span class="o">|</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">07</span><span class="n">_validar_informacion</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Programa de utilidades',
          'Ingresar una opci√≥n:',
          'Ingresar un nombre:',
          'Opci√≥n: 1-2, backupName: back, password: 1234',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Se nao">Se n√£o<a class="anchor-link" href="#Se nao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 64" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A maneira de escrever condicionais <code>if</code>-<code>else</code> √©:</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">if [[condi√ß√£o]]; then<br>afirma√ß√£o<br>elif [[condi√ß√£o]]; then<br>declara√ß√£o<br>elsedeclara√ß√£o<br>fi</code></pre></div>
            </section>
      <p>√â importante ressaltar que as condi√ß√µes devem estar entre dois colchetes <code>[[]]</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">08</span><span class="n">_if_else</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;Verdadero&quot;</span>',
      '<span class="k">elif</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">3</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;Verdadero&quot;</span>',
      '<span class="k">else</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;Falso&quot;</span>',
      '<span class="n">fi</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/08_if_else.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">08</span><span class="n">_if_else</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">08</span><span class="n">_if_else</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Falso',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver como s√£o criados <code>if</code>s aninhados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">08</span><span class="n">_if_else</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;Verdadero&quot;</span>',
      '<span class="k">elif</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">3</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;Verdadero&quot;</span>',
      '<span class="k">else</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">4</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">        </span><span class="n">echo</span> <span class="s2">&quot;Verdadero pero falso&quot;</span>',
      '<span class="w">    </span><span class="k">else</span>',
      '<span class="w">        </span><span class="n">echo</span> <span class="s2">&quot;Totalmente falso&quot;</span>',
      '<span class="w">    </span><span class="n">fi</span>',
      '<span class="n">fi</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/08_if_else.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">08</span><span class="n">_if_else</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">08</span><span class="n">_if_else</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Totalmente falso',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Expressoes condicionais">Express√µes condicionais<a class="anchor-link" href="#Expressoes condicionais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 65" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>J√° vimos como criar <code>if</code>s, mas √© necess√°rio explicar como criar as express√µes condicionais</p>
      <p>Se vamos a realizar compara√ß√µes entre cadeias ou strings</p>
      <table>
        <thead>
          <tr>
            <th>opera√ß√£o</th>
            <th>comando</th>
            <th>exemplo</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>maior que</td>
            <td>`>`</td>
            <td><code>[[ cadeia1 > cadeia2 ]]</code></td>
          </tr>
          <tr>
            <td>menor que</td>
            <td>`<`</td>
            <td><code>[[ cadeia1 < cadeia2 ]]</code></td>
          </tr>
          <tr>
            <td>igual que</td>
            <td>`==`</td>
            <td><code>[[ cadeia1 == cadeia2 ]]</code></td>
          </tr>
          <tr>
            <td>igual que</td>
            <td>`=`</td>
            <td><code>[[ cadeia1 = cadeia2 ]]</code></td>
          </tr>
          <tr>
            <td>cadeia vazia</td>
            <td>`-z`</td>
            <td><code>[[ -z cadeia ]]</code></td>
          </tr>
          <tr>
            <td>cadeia n√£o vazia</td>
            <td>`-n`</td>
            <td><code>[[ -n cadeia ]]</code></td>
          </tr>
          <tr>
            <td>cadeia n√£o vazia</td>
            <td></td>
            <td><code>[[ cadeia ]]</code></td>
          </tr>
        </tbody>
      </table>
      <p>Se o que vamos a fazer √© realizar compara√ß√µes entre n√∫meros</p>
      <table>
        <thead>
          <tr>
            <th>opera√ß√£o</th>
            <th>comando</th>
            <th>exemplo</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>maior que</td>
            <td>`-gt`</td>
            <td><code>[[ numero1 -gt numero2 ]]</code></td>
          </tr>
          <tr>
            <td>maior ou igual a</td>
            <td>`-ge`</td>
            <td><code>[[ numero1 -ge numero2 ]]</code></td>
          </tr>
          <tr>
            <td>menor que</td>
            <td>`-lt`</td>
            <td><code>&#x60;[[ n√∫mero1 -lt n√∫mero2 ]]&#x60;</code></td>
          </tr>
          <tr>
            <td>menor ou igual a</td>
            <td>`-le`</td>
            <td><code>&#x60;[[ n√∫mero1 -le n√∫mero2 ]]&#x60;</code></td>
          </tr>
          <tr>
            <td>igual que</td>
            <td>`-eq`</td>
            <td><code>&#x60;[[ n√∫mero1 -eq n√∫mero2 ]]&#x60;</code></td>
          </tr>
          <tr>
            <td>diferente de</td>
            <td>`-ne`</td>
            <td><code>&#x60;[[ n√∫mero1 -ne n√∫mero2 ]]&#x60;</code></td>
          </tr>
        </tbody>
      </table>
      <p>Se quisermos verificar arquivos ou diret√≥rios</p>
      <table>
        <thead>
          <tr>
            <th>opera√ß√£o</th>
            <th>comando</th>
            <th>exemplo</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>√© um diret√≥rio?</td>
            <td>`-d`</td>
            <td><code>[[ -d <dir> ]]</code></td>
          </tr>
          <tr>
            <td>√© um arquivo?</td>
            <td>`-f`</td>
            <td><code>[[ -f <arquivo> ]]</code></td>
          </tr>
          <tr>
            <td>existe?</td>
            <td>`-e`</td>
            <td><code>[[ -e <arquivo> ]]</code> ou <code>&#x60;[[ -e <diret√≥rio> ]]&#x60;</code></td>
          </tr>
          <tr>
            <td>√© escrev√≠vel?</td>
            <td>`-w`</td>
            <td><code>[[ -w <file> ]]</code></td>
          </tr>
          <tr>
            <td>√© execut√°vel?</td>
            <td>`-x`</td>
            <td><code>[[ -x <file> ]]</code></td>
          </tr>
          <tr>
            <td>√© um link?</td>
            <td>`-L`</td>
            <td><code>[[ -L <file> ]]</code></td>
          </tr>
          <tr>
            <td>tem conte√∫do?</td>
            <td>`-s`</td>
            <td><code>[[ -s <arquivo> ]]</code></td>
          </tr>
          <tr>
            <td>√© propriedade do usu√°rio?</td>
            <td>`-O`</td>
            <td><code>[[ -O <file> ]]</code></td>
          </tr>
          <tr>
            <td>√© propriedade do grupo?</td>
            <td>`-G`</td>
            <td><code>[[ -G <arquivo> ]]</code></td>
          </tr>
          <tr>
            <td>foi modificado?</td>
            <td>`-N`</td>
            <td><code>[[ -N <file> ]]</code></td>
          </tr>
          <tr>
            <td>file1 √© mais recente que file2?</td>
            <td>`-nt`</td>
            <td><code>[[ <file1> -nt <file2> ]]</code></td>
          </tr>
          <tr>
            <td>file1 √© mais antigo que file2?</td>
            <td>`-ot`</td>
            <td><code>[[ <file1> -ot <file2> ]]</code></td>
          </tr>
          <tr>
            <td>file1 √© o mesmo arquivo que file2?</td>
            <td>`-ef`</td>
            <td><code>[[ <file1> -ef <file2> ]]</code></td>
          </tr>
          <tr>
            <td>file1 √© o mesmo arquivo que file2?</td>
            <td>`-ef`</td>
            <td><code>[[ <file1> -ef <file2> ]]</code></td>
          </tr>
        </tbody>
      </table>
      <p>Se quisermos comparar condi√ß√µes conjuntas com <code>and</code>, <code>or</code> e <code>not</code></p>
      <table>
        <thead>
          <tr>
            <th>opera√ß√£o</th>
            <th>comando</th>
            <th>exemplo</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>e</td>
            <td>`&&`</td>
            <td><code>[[ <condicao1> && <condicao2> ]]</code></td>
          </tr>
          <tr>
            <td>ou</td>
            <td>`</td>
            <td></td>
          </tr>
        </tbody>
      </table>
      <p>Se quisermos negar as condi√ß√µes</p>
      <table>
        <thead>
          <tr>
            <th>opera√ß√£o</th>
            <th>comando</th>
            <th>exemplo</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>n√£o</td>
            <td>`!`</td>
            <td><code>&#x60;[[ ! <condi√ß√£o> ]]&#x60;</code></td>
          </tr>
        </tbody>
      </table>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">09</span><span class="n">_condicionales</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="s2">&quot;Comparando strings&quot;</span>',
      '<span class="n">string1</span><span class="o">=</span><span class="s2">&quot;hola&quot;</span>',
      '<span class="n">string2</span><span class="o">=</span><span class="s2">&quot;hola&quot;</span>',
      '<span class="n">string3</span><span class="o">=</span><span class="s2">&quot;chao&quot;</span>',
      '<span class="n">string4</span><span class="o">=</span><span class="s2">&quot;&quot;</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string1</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">$</span><span class="n">string3</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$string1 es mayor que $string3&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string3</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">$</span><span class="n">string1</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$string3 es menor que $string1&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string1</span> <span class="o">==</span> <span class="err">$</span><span class="n">string2</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$string1 es igual que $string2&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string1</span> <span class="o">!=</span> <span class="err">$</span><span class="n">string3</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$string1 es diferente que $string3&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">z</span> <span class="err">$</span><span class="n">string4</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$string4 es una cadena vac√≠a&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">n</span> <span class="err">$</span><span class="n">string3</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$string3 es una cadena no vac√≠a&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string3</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$string3 es una cadena no vac√≠a&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Comparando n√∫meros&quot;</span>',
      '<span class="n">number1</span><span class="o">=</span><span class="mi">10</span>',
      '<span class="n">number2</span><span class="o">=</span><span class="mi">10</span>',
      '<span class="n">number3</span><span class="o">=</span><span class="mi">20</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number3</span> <span class="o">-</span><span class="n">gt</span> <span class="err">$</span><span class="n">number1</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$number3 es mayor que $number1&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number3</span> <span class="o">-</span><span class="n">ge</span> <span class="err">$</span><span class="n">number2</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$number3 es mayor o igual que $number2&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number1</span> <span class="o">-</span><span class="n">lt</span> <span class="err">$</span><span class="n">number3</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$number1 es menor que $number3&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number1</span> <span class="o">-</span><span class="n">le</span> <span class="err">$</span><span class="n">number2</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$number1 es menor o igual que $number2&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number1</span> <span class="o">-</span><span class="n">eq</span> <span class="err">$</span><span class="n">number2</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$number1 es igual que $number2&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number1</span> <span class="o">-</span><span class="n">ne</span> <span class="err">$</span><span class="n">number3</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$number1 es diferente que $number3&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Comparando archivos&quot;</span>',
      '<span class="n">file1</span><span class="o">=</span><span class="s2">&quot;$PWD/2021-02-11-Introduccion-a-Python.ipynb&quot;</span>',
      '<span class="n">file2</span><span class="o">=</span><span class="s2">&quot;$PWD/scripts_bash&quot;</span>',
      '<span class="n">file3</span><span class="o">=</span><span class="s2">&quot;$PWD/mi_paquete_de_python&quot;</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">d</span> <span class="err">$</span><span class="n">file2</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$file2 es un directorio&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">f</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$file1 es un archivo&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">e</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$file1 existe&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">r</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$file1 es legible&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">w</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$file1 es escribible&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">x</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$file1 es ejecutable&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">L</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$file1 es un link&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">s</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$file1 tiene contenido&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">O</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$file1 es propiedad del usuario&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">G</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$file1 es propiedad del grupo&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">N</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$file1 fue modificado&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">file1</span> <span class="o">-</span><span class="n">nt</span> <span class="err">$</span><span class="n">file2</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$file1 es m√°s nuevo que $file2&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">file1</span> <span class="o">-</span><span class="n">ot</span> <span class="err">$</span><span class="n">file2</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$file1 es m√°s viejo que $file2&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">file1</span> <span class="o">-</span><span class="n">ef</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;$file1 es el mismo archivo que $file2&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Comparando expresiones con AND&quot;</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="mi">2</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="mi">3</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;2 &amp;gt; 1 y 3 &amp;gt; 1&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Comparando expresiones con OR&quot;</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="mi">2</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span> <span class="o">||</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;2 &amp;gt; 1 o 1 &amp;gt; 2&quot;</span>',
      '<span class="n">fi</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Comparando expresiones con NOT&quot;</span>',
      '<span class="k">if</span> <span class="p">[[</span> <span class="err">!</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span> <span class="p">]];</span> <span class="n">then</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;1 &amp;gt; 2 no es cierto&quot;</span>',
      '<span class="n">fi</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/09_condicionales.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">09</span><span class="n">_condicionales</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">09</span><span class="n">_condicionales</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Comparando strings',
          'hola es mayor que chao',
          'chao es menor que hola',
          'hola es igual que hola',
          'hola es diferente que chao',
          'es una cadena vac√≠a',
          'chao es una cadena no vac√≠a',
          'chao es una cadena no vac√≠a',
          'Comparando n√∫meros',
          '20 es mayor que 10',
          '20 es mayor o igual que 10',
          '10 es menor que 20',
          '10 es menor o igual que 10',
          '10 es igual que 10',
          '10 es diferente que 20',
          'Comparando archivos',
          '/home/wallabot/Documentos/web/portafolio/posts/scripts_bash es un directorio',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es un archivo',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb existe',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es legible',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es escribible',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb tiene contenido',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es propiedad del usuario',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es propiedad del grupo',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es m√°s viejo que /home/wallabot/Documentos/web/portafolio/posts/scripts_bash',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es el mismo archivo que /home/wallabot/Documentos/web/portafolio/posts/scripts_bash',
          'Comparando expresiones con AND',
          '2 &amp;gt; 1 y 3 &amp;gt; 1',
          'Comparando expresiones con OR',
          '2 &amp;gt; 1 o 1 &amp;gt; 2',
          'Comparando expresiones con NOT',
          '1 &amp;gt; 2 no es cierto',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Senten√ßa case">Senten√ßa <code>case</code><a class="anchor-link" href="#Senten√ßa case"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 66" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A seguir, veremos como escrever o t√≠pico <code>switch-case</code>, mas neste caso s√≥ √© usado <code>case</code>.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">case $vari√°vel in<br>&lt;valor1&gt;) &lt;sentencia1&gt;;;<br>&lt;valor2&gt;) &lt;sentencia2&gt;;;<br>&lt;valor3&gt;) &lt;sentencia3&gt;;;...<br>*) &lt;declara√ß√£o que n√£o atende a nenhuma das anteriores&gt;<br>esac</code></pre></div>
            </section>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">10</span><span class="n">_case</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="w"> </span>',
      '<span class="n">variable</span><span class="o">=</span><span class="s2">&quot;amarillo&quot;</span>',
      '<span class="w"> </span>',
      '<span class="k">case</span> <span class="err">$</span><span class="n">variable</span> <span class="ow">in</span>',
      '<span class="w">    </span><span class="s2">&quot;rojo&quot;</span><span class="p">)</span> <span class="n">echo</span> <span class="s2">&quot;Color rojo&quot;</span><span class="p">;;</span>',
      '<span class="w">    </span><span class="s2">&quot;verde&quot;</span><span class="p">)</span> <span class="n">echo</span> <span class="s2">&quot;Color verde&quot;</span><span class="p">;;</span>',
      '<span class="w">    </span><span class="s2">&quot;azul&quot;</span><span class="p">)</span> <span class="n">echo</span> <span class="s2">&quot;Color azul&quot;</span><span class="p">;;</span>',
      '<span class="w">    </span><span class="o">*</span><span class="p">)</span> <span class="n">echo</span> <span class="s2">&quot;Color desconocido&quot;</span><span class="p">;;</span>',
      '<span class="n">esac</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/10_case.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">10</span><span class="n">_case</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">10</span><span class="n">_case</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Color desconocido',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Arrays">Arrays<a class="anchor-link" href="#Arrays"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 67" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver como se comportam os arrays em bash scripting</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">11</span><span class="n">_arrays</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="w"> </span>',
      '<span class="n">arrayNumeros</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span>',
      '<span class="n">arrayStrings</span><span class="o">=</span><span class="p">(</span><span class="s2">&quot;hola&quot;</span> <span class="s2">&quot;chao&quot;</span> <span class="s2">&quot;adios&quot;</span><span class="p">)</span>',
      '<span class="n">arrayMixto</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span> <span class="s2">&quot;hola&quot;</span> <span class="mi">2</span> <span class="s2">&quot;chao&quot;</span> <span class="mi">3</span> <span class="s2">&quot;adios&quot;</span><span class="p">)</span>',
      '<span class="n">arrayVacio</span><span class="o">=</span><span class="p">()</span>',
      '<span class="n">arrayRango</span><span class="o">=</span><span class="p">({</span><span class="n">A</span><span class="o">..</span><span class="n">Z</span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="s2">&quot;Arrays&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Array de n√∫meros: $</span><span class="si">{arrayNumeros[*]}</span><span class="s2">&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Array de strings: $</span><span class="si">{arrayStrings[*]}</span><span class="s2">&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Array mixto: $</span><span class="si">{arrayMixto[*]}</span><span class="s2">&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Array vac√≠o: $</span><span class="si">{arrayVacio[*]}</span><span class="s2">&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Array de rango: $</span><span class="si">{arrayRango[*]}</span><span class="s2">&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Accediendo a elementos&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Primer elemento del array de n√∫meros: $</span><span class="si">{arrayNumeros[0]}</span><span class="s2">&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Segundo elemento del array de strings: $</span><span class="si">{arrayStrings[1]}</span><span class="s2">&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;√öltimo elemento del array de n√∫meros: $</span><span class="si">{arrayNumeros[-1]}</span><span class="s2">&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Pen√∫ltimo elemento del array de strings: $</span><span class="si">{arrayStrings[-2]}</span><span class="s2">&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Longitud de arrays&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Longitud del array de n√∫meros: ${#arrayNumeros[*]}&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Longitud del array de strings: ${#arrayStrings[*]}&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Longitud del array mixto: ${#arrayMixto[*]}&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Longitud del array vac√≠o: ${#arrayVacio[*]}&quot;</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Longitud del array de rango: ${#arrayRango[*]}&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">A√±adiendo y eliminando elementos&quot;</span>',
      '<span class="n">arrayNumeros</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="mi">6</span>',
      '<span class="n">echo</span> <span class="s2">&quot;A√±adiendo elemento al array de n√∫meros: $</span><span class="si">{arrayNumeros[*]}</span><span class="s2">&quot;</span>',
      '<span class="n">unset</span> <span class="n">arrayStrings</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
      '<span class="n">echo</span> <span class="s2">&quot;Eliminando elemento del array de strings: $</span><span class="si">{arrayStrings[*]}</span><span class="s2">&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/11_arrays.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">11</span><span class="n">_arrays</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">11</span><span class="n">_arrays</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Arrays',
          'Array de n√∫meros: 1 2 3 4 5',
          'Array de strings: hola chao adios',
          'Array mixto: 1 hola 2 chao 3 adios',
          'Array vac√≠o:',
          'Array de rango: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z',
          'Accediendo a elementos',
          'Primer elemento del array de n√∫meros: 1',
          'Segundo elemento del array de strings: chao',
          '√öltimo elemento del array de n√∫meros: 5',
          'Pen√∫ltimo elemento del array de strings: chao',
          'Longitud de arrays',
          'Longitud del array de n√∫meros: 5',
          'Longitud del array de strings: 3',
          'Longitud del array mixto: 6',
          'Longitud del array vac√≠o: 0',
          'Longitud del array de rango: 26',
          'A√±adiendo y eliminando elementos',
          'A√±adiendo elemento al array de n√∫meros: 1 2 3 4 5 6',
          'Eliminando elemento del array de strings: hola adios',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="La√ßo for">La√ßo <code>for</code><a class="anchor-link" href="#La√ßo for"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 68" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para utilizar o loop <code>for</code> √© necess√°rio usar a seguinte sintaxe</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">para &lt;vari√°vel&gt; em &lt;array&gt;<br>fa√ßa<br>frase<br>Entendido. Por favor, proporciona el texto markdown que deseas que traduzca al portugu√©s.</code></pre></div>
            </section>
      <p>Vamos a ver um exemplo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">12</span><span class="n">_for</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="w"> </span>',
      '<span class="n">arrayNumeros</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span>',
      '<span class="n">arrayStrings</span><span class="o">=</span><span class="p">(</span><span class="s2">&quot;hola&quot;</span> <span class="s2">&quot;chao&quot;</span> <span class="s2">&quot;adios&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="s2">&quot;Iterar a trav√©s de un array de numeros&quot;</span>',
      '<span class="k">for</span> <span class="n">numero</span> <span class="ow">in</span> <span class="err">$</span><span class="p">{</span><span class="n">arrayNumeros</span><span class="p">[</span><span class="o">*</span><span class="p">]}</span>',
      '<span class="n">do</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;N√∫mero: $numero&quot;</span>',
      '<span class="n">done</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Iterar a trav√©s de un array de strings&quot;</span>',
      '<span class="k">for</span> <span class="n">string</span> <span class="ow">in</span> <span class="err">$</span><span class="p">{</span><span class="n">arrayStrings</span><span class="p">[</span><span class="o">*</span><span class="p">]}</span>',
      '<span class="n">do</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;String: $string&quot;</span>',
      '<span class="n">done</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Iterar a trav√©s de un array no declarado&quot;</span>',
      '<span class="k">for</span> <span class="n">string</span> <span class="ow">in</span> <span class="s2">&quot;Manolo&quot;</span> <span class="s2">&quot;Juan&quot;</span> <span class="s2">&quot;Pedro&quot;</span>',
      '<span class="n">do</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;String: $string&quot;</span>',
      '<span class="n">done</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Iterar a trav√©s de un rango&quot;</span>',
      '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">{</span><span class="mf">1..10</span><span class="p">}</span>',
      '<span class="n">do</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;N√∫mero: $i&quot;</span>',
      '<span class="n">done</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Iterar a trav√©s de un rango de manera cl√°sica&quot;</span>',
      '<span class="k">for</span> <span class="p">((</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">))</span>',
      '<span class="n">do</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;N√∫mero: $i&quot;</span>',
      '<span class="n">done</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Iterar a trav√©s de un comando&quot;</span>',
      '<span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="err">$</span><span class="p">(</span><span class="n">ls</span><span class="p">)</span>',
      '<span class="n">do</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;Archivo: $file&quot;</span>',
      '<span class="n">done</span>',
      '<span class="w"> </span>',
      '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Iterar a trav√©s de un directorio&quot;</span>',
      '<span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="o">*</span>',
      '<span class="n">do</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;Archivo: $file&quot;</span>',
      '<span class="n">done</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/12_for.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">12</span><span class="n">_for</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">12</span><span class="n">_for</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Iterar a trav√©s de un array de numeros',
          'N√∫mero: 1',
          'N√∫mero: 2',
          'N√∫mero: 3',
          'N√∫mero: 4',
          'N√∫mero: 5',
          'Iterar a trav√©s de un array de strings',
          'String: hola',
          'String: chao',
          'String: adios',
          'Iterar a trav√©s de un array no declarado',
          'String: Manolo',
          'String: Juan',
          'String: Pedro',
          'Iterar a trav√©s de un rango',
          'N√∫mero: 1',
          'N√∫mero: 2',
          'N√∫mero: 3',
          'N√∫mero: 4',
          'N√∫mero: 5',
          'N√∫mero: 6',
          'N√∫mero: 7',
          'N√∫mero: 8',
          'N√∫mero: 9',
          'N√∫mero: 10',
          'Iterar a trav√©s de un rango de manera cl√°sica',
          'N√∫mero: 1',
          'N√∫mero: 2',
          'N√∫mero: 3',
          'N√∫mero: 4',
          'N√∫mero: 5',
          'N√∫mero: 6',
          'N√∫mero: 7',
          'N√∫mero: 8',
          'N√∫mero: 9',
          'N√∫mero: 10',
          'Iterar a trav√©s de un comando',
          'Archivo: 2021-02-11-Introduccion-a-Python.ipynb',
          'Archivo: 2021-04-23-Calculo-matricial-con-Numpy.ipynb',
          'Archivo: 2021-06-15-Manejo-de-datos-con-Pandas.ipynb',
          'Archivo: 2022-09-12-Introduccion-a-la-terminal.ipynb',
          'Archivo: 2023-01-22-Docker.ipynb',
          'Archivo: 2023-XX-XX-Bash-scripting.ipynb',
          'Archivo: california_housing_train.csv',
          'Archivo: command-line-cheat-sheet.pdf',
          'Archivo: CSS.ipynb',
          'Archivo: Expresiones',
          'Archivo: regulares.ipynb',
          'Archivo: html_files',
          'Archivo: html.ipynb',
          'Archivo: introduccion_python',
          'Archivo: mi_paquete_de_python',
          'Archivo: movies.csv',
          'Archivo: movies.dat',
          'Archivo: notebooks_translated',
          'Archivo: __pycache__',
          'Archivo: scripts_bash',
          'Archivo: ssh.ipynb',
          'Archivo: test.ipynb',
          'Iterar a trav√©s de un directorio',
          'Archivo: 2021-02-11-Introduccion-a-Python.ipynb',
          'Archivo: 2021-04-23-Calculo-matricial-con-Numpy.ipynb',
          'Archivo: 2021-06-15-Manejo-de-datos-con-Pandas.ipynb',
          'Archivo: 2022-09-12-Introduccion-a-la-terminal.ipynb',
          'Archivo: 2023-01-22-Docker.ipynb',
          'Archivo: 2023-XX-XX-Bash-scripting.ipynb',
          'Archivo: california_housing_train.csv',
          'Archivo: command-line-cheat-sheet.pdf',
          'Archivo: CSS.ipynb',
          'Archivo: Expresiones regulares.ipynb',
          'Archivo: html_files',
          'Archivo: html.ipynb',
          'Archivo: introduccion_python',
          'Archivo: mi_paquete_de_python',
          'Archivo: movies.csv',
          'Archivo: movies.dat',
          'Archivo: notebooks_translated',
          'Archivo: __pycache__',
          'Archivo: scripts_bash',
          'Archivo: ssh.ipynb',
          'Archivo: test.ipynb',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="La√ßo while">La√ßo <code>while</code><a class="anchor-link" href="#La√ßo while"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 69" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para utilizar o loop <code>while</code> √© necess√°rio usar a seguinte sintaxe</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">while &lt;condicion&gt;<br>fa√ßa<br>frase<br>feito</code></pre></div>
            </section>
      <p>Vamos a ver um exemplo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">13</span><span class="n">_while</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="w"> </span>',
      '<span class="n">numero</span><span class="o">=</span><span class="mi">1</span>',
      '<span class="k">while</span> <span class="p">[</span> <span class="err">$</span><span class="n">numero</span> <span class="o">-</span><span class="n">ne</span> <span class="mi">5</span> <span class="p">]</span>',
      '<span class="n">do</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;N√∫mero: $numero&quot;</span>',
      '<span class="w">    </span><span class="n">numero</span><span class="o">=</span><span class="err">$</span><span class="p">((</span> <span class="n">numero</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">))</span>',
      '<span class="n">done</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/13_while.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">13</span><span class="n">_while</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">13</span><span class="n">_while</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'N√∫mero: 1',
          'N√∫mero: 2',
          'N√∫mero: 3',
          'N√∫mero: 4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Controle de fluxo com break e continue">Controle de fluxo com <code>break</code> e <code>continue</code><a class="anchor-link" href="#Controle de fluxo com break e continue"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 70" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos controlar o fluxo de um loop usando as palavras-chave <code>break</code> e <code>continue</code>. Vamos ver um exemplo:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">14</span><span class="n">_control_de_flujo</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="w"> </span>',
      '<span class="n">numero</span><span class="o">=</span><span class="mi">1</span>',
      '<span class="k">while</span> <span class="p">[</span> <span class="err">$</span><span class="n">numero</span> <span class="o">-</span><span class="n">ne</span> <span class="mi">10</span> <span class="p">]</span>',
      '<span class="n">do</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="p">[</span> <span class="err">$</span><span class="n">numero</span> <span class="o">-</span><span class="n">eq</span> <span class="mi">5</span> <span class="p">];</span> <span class="n">then</span>',
      '<span class="w">        </span><span class="n">numero</span><span class="o">=</span><span class="err">$</span><span class="p">((</span> <span class="n">numero</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">))</span>',
      '<span class="w">        </span><span class="n">echo</span> <span class="s2">&quot;Saltando el n√∫mero 5&quot;</span>',
      '<span class="w">        </span><span class="k">continue</span>',
      '<span class="w">    </span><span class="k">elif</span>',
      '<span class="w">        </span><span class="p">[</span> <span class="err">$</span><span class="n">numero</span> <span class="o">-</span><span class="n">eq</span> <span class="mi">8</span> <span class="p">];</span> <span class="n">then</span>',
      '<span class="w">        </span><span class="n">echo</span> <span class="s2">&quot;Terminando el bucle&quot;</span>',
      '<span class="w">        </span><span class="k">break</span>',
      '<span class="w">    </span><span class="n">fi</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;N√∫mero: $numero&quot;</span>',
      '<span class="w">    </span><span class="n">numero</span><span class="o">=</span><span class="err">$</span><span class="p">((</span> <span class="n">numero</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">))</span>',
      '<span class="n">done</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/14_control_de_flujo.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">14</span><span class="n">_control_de_flujo</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">14</span><span class="n">_control_de_flujo</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'N√∫mero: 1',
          'N√∫mero: 2',
          'N√∫mero: 3',
          'N√∫mero: 4',
          'Saltando el n√∫mero 5',
          'N√∫mero: 6',
          'N√∫mero: 7',
          'Terminando el bucle',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Funcoes">Fun√ß√µes<a class="anchor-link" href="#Funcoes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 71" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A sintaxe para escrever fun√ß√µes √©</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">&lt;nome da fun√ß√£o&gt; ()&#123;<br>instru√ß√µes<br>&#125;</code></pre></div>
            </section>
      <p>Vamos ver um exemplo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%%</span><span class="n">writefile</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">15</span><span class="n">_funciones</span><span class="o">.</span><span class="n">sh</span>',
      '<span class="c1">#!/bin/bash</span>',
      '<span class="w"> </span>',
      '<span class="n">funcion</span> <span class="p">()</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;Soy una funci√≥n&quot;</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">funcoionConParametros</span> <span class="p">()</span> <span class="p">{</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;Soy una funci√≥n con par√°metros&quot;</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;Par√°metro 1: $1&quot;</span>',
      '<span class="w">    </span><span class="n">echo</span> <span class="s2">&quot;Par√°metro 2: $2&quot;</span>',
      '<span class="p">}</span>',
      '<span class="w"> </span>',
      '<span class="n">funcion</span>',
      '<span class="n">funcoionConParametros</span> <span class="s2">&quot;Hola&quot;</span> <span class="s2">&quot;Adi√≥s&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/15_funciones.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">scripts_bash</span><span class="o">/</span><span class="mi">15</span><span class="n">_funciones</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">15</span><span class="n">_funciones</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Soy una funci√≥n',
          'Soy una funci√≥n con par√°metros',
          'Par√°metro 1: Hola',
          'Par√°metro 2: Adi√≥s',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>




















    </div>

  </section>

</PostLayout>
