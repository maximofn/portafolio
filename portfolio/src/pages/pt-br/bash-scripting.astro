---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Bash scripting';
const end_url = 'bash-scripting';
const description = 'PSinta-se como um programador da velha guarda üêß com esta postagem sobre scripts bash';
const keywords = 'bash, scripting, linux, old school, terminal';
const languaje = 'PT';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/bash-scripting.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=520
    image_height=245
    image_extension=webp
    article_date=2023-02-01+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Pasta-com-scripts"><h2>Pasta com scripts</h2></a>
      <a class="anchor-link" href="#Primeiro-roteiro"><h2>Primeiro roteiro</h2></a>
      <a class="anchor-link" href="#Especifica%C3%A7%C3%A3o-do-bin%C3%A1rio-de-execu%C3%A7%C3%A3o"><h3>Especifica√ß√£o do bin√°rio de execu√ß√£o</h3></a>
      <a class="anchor-link" href="#Coment%C3%A1rios-em-scripts-bash"><h3>Coment√°rios em scripts bash</h3></a>
      <a class="anchor-link" href="#Imprimir-na-tela-com-o-comando-%60echo"><h4>Imprimir na tela com o comando `echo</h4></a>
      <a class="anchor-link" href="#Declara%C3%A7%C3%A3o-vari%C3%A1vel"><h2>Declara√ß√£o vari√°vel</h2></a>
      <a class="anchor-link" href="#%C3%82mbito-das-vari%C3%A1veis"><h3>√Çmbito das vari√°veis</h3></a>
      <a class="anchor-link" href="#Exporta%C3%A7%C3%A3o-de-vari%C3%A1veis"><h4>Exporta√ß√£o de vari√°veis</h4></a>
      <a class="anchor-link" href="#Tipos-de-operadores"><h2>Tipos de operadores</h2></a>
      <a class="anchor-link" href="#Etapa-da-argumenta%C3%A7%C3%A3o"><h2>Etapa da argumenta√ß√£o</h2></a>
      <a class="anchor-link" href="#Executar-comandos-e-armazen%C3%A1-los-em-uma-vari%C3%A1vel"><h2>Executar comandos e armazen√°-los em uma vari√°vel</h2></a>
      <a class="anchor-link" href="#Depura%C3%A7%C3%A3o"><h2>Depura√ß√£o</h2></a>
      <a class="anchor-link" href="#Obter-informa%C3%A7%C3%B5es-do-usu%C3%A1rio"><h2>Obter informa√ß√µes do usu√°rio</h2></a>
      <a class="anchor-link" href="#Obter-informa%C3%A7%C3%B5es-utilizando-os-comandos-echo-e-read."><h3>Obter informa√ß√µes utilizando os comandos <code>echo</code> e <code>read</code>.</h3></a>
      <a class="anchor-link" href="#Obter-informa%C3%A7%C3%B5es-somente-atrav%C3%A9s-do-comando-%22ler"><h3>Obter informa√ß√µes somente atrav√©s do comando "ler</h3></a>
      <a class="anchor-link" href="#Validar-informa%C3%A7%C3%B5es-do-usu%C3%A1rio"><h2>Validar informa√ß√µes do usu√°rio</h2></a>
      <a class="anchor-link" href="#Se-mais"><h2>Se mais</h2></a>
      <a class="anchor-link" href="#Express%C3%B5es-condicionais"><h2>Express√µes condicionais</h2></a>
      <a class="anchor-link" href="#Declara%C3%A7%C3%A3o-de-%22caixa"><h2>Declara√ß√£o de "caixa</h2></a>
      <a class="anchor-link" href="#Arrays"><h2>Arrays</h2></a>
      <a class="anchor-link" href="#Loop-for"><h2>Loop <code>for</code></h2></a>
      <a class="anchor-link" href="#while-loop"><h2><code>while</code> loop</h2></a>
      <a class="anchor-link" href="#Controle-de-fluxo-com-quebrar-e-continuar."><h2>Controle de fluxo com <code>quebrar</code> e <code>continuar</code>.</h2></a>
      <a class="anchor-link" href="#Fun%C3%A7%C3%B5es"><h2>Fun√ß√µes</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Bash-scripting">Bash scripting<a class="anchor-link" href="#Bash-scripting"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 50" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Pasta-com-scripts">Pasta com scripts<a class="anchor-link" href="#Pasta-com-scripts"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 51" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Este caderno foi traduzido automaticamente para torn√°-lo acess√≠vel a mais pessoas, por favor me avise se voc√™ vir algum erro de digita√ß√£o..</p>
      <p>Para fazer este post, vamos criar uma pasta onde vamos salvar todos os scripts.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>scripts_bash',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h2 id="Primeiro-roteiro">Primeiro roteiro<a class="anchor-link" href="#Primeiro-roteiro"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 52" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Especifica%C3%A7%C3%A3o-do-bin%C3%A1rio-de-execu%C3%A7%C3%A3o">Especifica√ß√£o do bin√°rio de execu√ß√£o<a class="anchor-link" href="#Especifica%C3%A7%C3%A3o-do-bin%C3%A1rio-de-execu%C3%A7%C3%A3o"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 53" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>No linux voc√™ pode indicar com qual programa executar um arquivo colocando na primeira linha <code>#!&lt;binary path&gt;</code>, por exemplo, se criarmos um <code>.py</code> podemos indicar que ele deve ser executado com python colocando na primeira linha <code>#!/usr/bin/python3</code>. Em nosso caso, como estamos fazendo um script terminal, colocamos na primeira linha <code>#!/bin/bash</code>.</p>
      <p>Agora, se o arquivo receber permiss√µes de execu√ß√£o, ele pode ser executado diretamente sem especificar o programa com o qual ele deve ser executado. Ou seja, o <code>.py' n√£o precisa mais ser executado via</code>.py.py', mas pode ser executado via <code>.script.py'. Em nosso caso, em vez de executar o arquivo via</code>bash script.sh<code>, podemos execut√°-lo via</code>./script.sh`.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Coment%C3%A1rios-em-scripts-bash">Coment√°rios em scripts bash<a class="anchor-link" href="#Coment%C3%A1rios-em-scripts-bash"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 54" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se voc√™ quiser entrar um coment√°rio, basta iniciar a linha com `#``.</p>
      <p>"bash</p>
      <h1 id="Este-%C3%A9-um-coment%C3%A1rio-de-uma-linha">Este √© um coment√°rio de uma linha<a class="anchor-link" href="#Este-%C3%A9-um-coment%C3%A1rio-de-uma-linha"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 55" src={opening_brace}svg_paths.link_svg_path{closing_brace}/></a></h1><pre><code>
      Se quisermos entrar em v√°rias linhas de coment√°rios, temos que come√ßar com `: `` e terminar com ```.
      
      "bash
      : '
      Este √© um coment√°rio de v√°rias linhas
      que se estende por v√°rias linhas.
      '</code></pre>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Imprimir-na-tela-com-o-comando-%60echo">Imprimir na tela com o comando `echo<a class="anchor-link" href="#Imprimir-na-tela-com-o-comando-%60echo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 56" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos imprimir na tela, utilizamos o comando <code>echo</code> seguido pelo que queremos imprimir.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>mkdir<span class="w"> </span>scripts_bash',
          '</span><span class="o">%%writefile</span> scripts_bash/01_primerScript.sh',
          '<span class="ch">#!/bin/bash</span>',
          '<span class="c1"># Comentario de una sola linea</span>',
          '<span class="p">:</span> <span class="s1">\'</span>',
          '<span class="n">Comentario</span> <span class="n">de</span> <span class="n">varias</span>',
          '<span class="n">lineas</span>',
          '<span class="s1">\'</span>',
          '<span class="n">echo</span> <span class="s2">"Hola mundo"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/01_primerScript.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>N√≥s damos permiss√µes de execu√ß√£o e executamos o roteiro</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/01_primerScript.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/01_primerScript.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola mundo',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Declara%C3%A7%C3%A3o-vari%C3%A1vel">Declara√ß√£o vari√°vel<a class="anchor-link" href="#Declara%C3%A7%C3%A3o-vari%C3%A1vel"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 57" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>H√° dois tipos de vari√°veis, "vari√°veis de usu√°rio" e "vari√°veis ambientais".</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para criar uma vari√°vel basta declar√°-la inserindo o nome desejado, seguido por `=`` e o valor</p>
      <p>Para imprimir o valor de uma vari√°vel com <code>echo</code>, √© necess√°rio referenci√°-la com `$&lt;nome vari√°vel&gt;.</p>
      <p>"bash
      echo "Vari√°vel = $&lt;nome vari√°vel&gt;" echo "Vari√°vel = $&lt;nome vari√°vel&gt;" echo "Vari√°vel = $&lt;nome vari√°vel&gt;" echo "Vari√°vel = $&lt;nome vari√°vel&gt;" echo "Vari√°vel = $&lt;nome vari√°vel&gt;</p>
      <pre><code></code></pre>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/02_variables.sh',
          '<span class="ch">#!/bin/bash</span>',
          '<span class="n">opcion</span><span class="o">=</span><span class="mi">1</span>',
          '<span class="n">nombre</span><span class="o">=</span><span class="s2">"Juan"</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Opcion: $opcion"</span>',
          '<span class="n">echo</span> <span class="s2">"Nombre: $nombre"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/02_variables.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/02_variables.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/02_variables.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Opcion: 1',
          'Nombre: Juan',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="%C3%82mbito-das-vari%C3%A1veis">√Çmbito das vari√°veis<a class="anchor-link" href="#%C3%82mbito-das-vari%C3%A1veis"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 58" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As vari√°veis criadas s√£o acess√≠veis apenas de dentro do roteiro, ou seja, seu escopo est√° dentro do roteiro.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Exporta%C3%A7%C3%A3o-de-vari%C3%A1veis">Exporta√ß√£o de vari√°veis<a class="anchor-link" href="#Exporta%C3%A7%C3%A3o-de-vari%C3%A1veis"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 59" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos exportar vari√°veis para que possam ser acessadas por outros scripts, para isso primeiro exportamos a vari√°vel utilizando o comando "exportar" e executamos chamada, dentro do script, o segundo script para o qual queremos passar a vari√°vel</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/02_variables.sh',
          '<span class="ch">#!/bin/bash</span>',
          '<span class="n">opcion</span><span class="o">=</span><span class="mi">1</span>',
          '<span class="n">nombre</span><span class="o">=</span><span class="s2">"Juan"</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Opcion: $opcion"</span>',
          '<span class="n">echo</span> <span class="s2">"Nombre: $nombre"</span>',
          '',
          '<span class="c1"># Exportar variable nombre</span>',
          '<span class="n">echo</span> <span class="s2">"export nombre=$nombre"</span>',
          '<span class="n">export</span> <span class="n">nombre</span>',
          '',
          '<span class="c1"># Ejecutar script de importacion</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Ejecutando script de importacion"</span>',
          '<span class="o">./</span><span class="n">scripts_bash</span><span class="o">/</span><span class="mi">02</span><span class="n">_variables_importacion</span><span class="o">.</span><span class="n">sh</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/02_variables.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/02_variables_importacion.sh',
          '<span class="ch">#!/bin/bash</span>',
          '<span class="n">echo</span> <span class="s2">"Nombre importado: $nombre"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/02_variables_importacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/02_variables.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/02_variables_importacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/02_variables.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Opcion: 1',
          'Nombre: Juan',
          'export nombre=Juan',
          'Ejecutando script de importacion',
          'Nombre importado: Juan',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Voc√™ tem que executar o segundo roteiro dentro do primeiro roteiro. Se agora rodarmos o segundo script, n√£o temos a vari√°vel</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/02_variables_importacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/02_variables_importacion.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Nombre importado: ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos que ela seja acess√≠vel a partir de qualquer segundo script, sem ter que execut√°-la dentro do primeiro script, temos que exportar a vari√°vel para uma vari√°vel de ambiente</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Tipos-de-operadores">Tipos de operadores<a class="anchor-link" href="#Tipos-de-operadores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 60" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Todos os operadores poss√≠veis s√£o mostrados abaixo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/03_operadores.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="c1"># Asignaci√≥n de variables</span>',
          '<span class="n">x</span><span class="o">=</span><span class="mi">10</span>',
          '<span class="n">y</span><span class="o">=</span><span class="mi">20</span>',
          '<span class="n">echo</span> <span class="s2">"x = $x"</span>',
          '<span class="n">echo</span> <span class="s2">"y = $y"</span>',
          '',
          '<span class="c1"># Operadores aritm√©ticos</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Operadores aritm√©ticos"</span>',
          '<span class="n">echo</span> <span class="s2">"x + y = $((x + y))"</span>',
          '<span class="n">echo</span> <span class="s2">"x - y = $((x - y))"</span>',
          '<span class="n">echo</span> <span class="s2">"x * y = $((x * y))"</span>',
          '<span class="n">echo</span> <span class="s2">"x / y = $((x / y))"</span>',
          '<span class="n">echo</span> <span class="s2">"x % y = $((x % y))"</span>',
          '',
          '<span class="c1"># Operadores de comparaci√≥n</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Operadores de comparaci√≥n"</span>',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$x"</span> <span class="o">-</span><span class="n">eq</span> <span class="s2">"$y"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"x es igual a y"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"x no es igual a y"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$x"</span> <span class="o">-</span><span class="n">ne</span> <span class="s2">"$y"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"x no es igual a y"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"x es igual a y"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$x"</span> <span class="o">-</span><span class="n">lt</span> <span class="s2">"$y"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"x es menor que y"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"x no es menor que y"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$x"</span> <span class="o">-</span><span class="n">gt</span> <span class="s2">"$y"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"x es mayor que y"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"x no es mayor que y"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="c1"># Operadores de cadena</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Operadores de cadena"</span>',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$a"</span> <span class="o">=</span> <span class="s2">"$b"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"a es igual a b"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"a no es igual a b"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="s2">"$a"</span> <span class="o">!=</span> <span class="s2">"$b"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"a no es igual a b"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"a es igual a b"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">z</span> <span class="s2">"$a"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"a es una cadena vac√≠a"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"a no es una cadena vac√≠a"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"$a"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"a no es una cadena vac√≠a"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"a es una cadena vac√≠a"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="c1"># Operadores de archivo</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Operadores de archivo"</span>',
          '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"/path/to/file"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"El archivo existe"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"El archivo no existe"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">f</span> <span class="s2">"/path/to/file"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"Es un archivo regular"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"No es un archivo regular"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">d</span> <span class="s2">"/path/to/dir"</span> <span class="p">];</span> <span class="n">then</span>',
          '  <span class="n">echo</span> <span class="s2">"Es un directorio"</span>',
          '<span class="k">else</span>',
          '  <span class="n">echo</span> <span class="s2">"No es un directorio"</span>',
          '<span class="n">fi</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/03_operadores.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/03_operadores.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/03_operadores.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'x = 10',
          'y = 20',
          'Operadores aritm√©ticos',
          'x + y = 30',
          'x - y = -10',
          'x * y = 200',
          'x / y = 0',
          'x % y = 10',
          'Operadores de comparaci√≥n',
          'x no es igual a y',
          'x no es igual a y',
          'x es menor que y',
          'x no es mayor que y',
          'Operadores de cadena',
          'a es igual a b',
          'a es igual a b',
          'a es una cadena vac√≠a',
          'a es una cadena vac√≠a',
          'Operadores de archivo',
          'El archivo no existe',
          'No es un archivo regular',
          'No es un directorio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Etapa-da-argumenta%C3%A7%C3%A3o">Etapa da argumenta√ß√£o<a class="anchor-link" href="#Etapa-da-argumenta%C3%A7%C3%A3o"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 61" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Os argumentos podem ser passados aos roteiros, uma vez dentro do roteiro podemos fazer uso deles da seguinte forma</p>
      <ul>
      <li>Por n√∫mero de argumento: neste caso ser√£o nomeados como <code>$1</code>, <code>$2</code>, etc. Mas caso o n√∫mero de argumentos seja superior a 9, ou seja, s√£o necess√°rios mais de 2 d√≠gitos para nome√°-lo, neste caso o n√∫mero ser√° identificado entre chaves, <code>${1}</code>, <code>${2}</code>, ..., ${10}, ${11}, etc.</li>
      <li>Se o argumento de $0 for chamado, estamos recebendo o nome do arquivo</li>
      <li>Se quisermos todos os argumentos, o faremos com <code>$*</code>.</li>
      <li>Se o que queremos √© o n√∫mero de argumentos que temos, o conseguimos por <code>$#</code>.</li>
      <li>Se quisermos sanear a sa√≠da do √∫ltimo comando, podemos descobrir por `$?``.</li>
      <li>Se quisermos saber o <code>PID</code> do roteiro, podemos descobri-lo por <code>$$</code>.</li>
      <li>Podemos substituir o valor de uma string em um argumento por <code>${opening_brace}&lt;√≠ndice do documento&gt;/ string a ser substitu√≠da/nova string{closing_brace}</code>, ou seja, se tivermos <code>${opening_brace}1/hello/hello{closing_brace}</code> substituir√° a palavra <code>hello</code> pela palavra <code>hello</code> no argumento 1.</li>
      <li>Entretanto, se utilizarmos <code>${opening_brace}&lt; √≠ndice do documento&gt;/# string a ser substitu√≠do/nova string{closing_brace}</code>, ele s√≥ substituir√° a string no argumento se o argumento come√ßar com essa string.</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/04_argumentos.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="c1"># Pasos de argumentos simples</span>',
          '<span class="n">echo</span> <span class="s2">"Primer argumento: $1"</span>',
          '<span class="n">echo</span> <span class="s2">"Segundo argumento: $2"</span>',
          '<span class="n">echo</span> <span class="s2">"Tercer argumento: $3"</span>',
          '',
          '<span class="c1"># Accediendo a todos los argumentos</span>',
          '<span class="n">echo</span> <span class="s2">"Todos los argumentos: $*"</span>',
          '',
          '<span class="c1"># Accediendo al n√∫mero de argumentos</span>',
          '<span class="n">echo</span> <span class="s2">"N√∫mero de argumentos: $#"</span>',
          '',
          '<span class="c1"># Accediendo al nombre del script</span>',
          '<span class="n">echo</span> <span class="s2">"Nombre del script: $0"</span>',
          '',
          '<span class="c1"># Accediendo al c√≥digo de salida del √∫ltimo comando ejecutado</span>',
          '<span class="n">echo</span> <span class="s2">"C√≥digo de salida del √∫ltimo comando: $?"</span>',
          '',
          '<span class="c1"># Accediendo al PID del script</span>',
          '<span class="n">echo</span> <span class="s2">"PID del script: $$"</span>',
          '',
          '<span class="c1"># Accediendo a los argumentos con √≠ndices</span>',
          '<span class="n">echo</span> <span class="s2">"Argumento 3: $</span><span class="si">{3}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Argumento 2: $</span><span class="si">{2}</span><span class="s2">"</span>',
          '',
          '<span class="c1"># Accediendo a los argumentos con √≠ndices y longitud m√°xima</span>',
          '<span class="n">echo</span> <span class="s2">"Argumento 3 con longitud m√°xima de 2 caracteres: ${3:0:2}"</span>',
          '<span class="n">echo</span> <span class="s2">"Argumento 2 con longitud m√°xima de 3 caracteres: ${2:0:3}"</span>',
          '',
          '<span class="c1"># Reemplazando argumentos con √≠ndices y longitud m√°xima</span>',
          '<span class="n">echo</span> <span class="s2">"Reemplazando argumento 3: ${3/arg/ARG}"</span>',
          '<span class="n">echo</span> <span class="s2">"Reemplazando argumento{2/arg/ARG}"</span>',
          '',
          '<span class="c1"># Accediendo a los argumentos con √≠ndices y patrones de reemplazo</span>',
          '<span class="n">echo</span> <span class="s2">"Reemplazando patr√≥n en argumento 3: ${3/#tercer/TERCER}"</span>',
          '<span class="n">echo</span> <span class="s2">"Reemplazando patr√≥n en argumento 2: ${2/#arg/ARG}"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/04_argumentos.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nv">arg1</span><span class="o">=</span><span class="s2">"primer argumento"</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nv">arg2</span><span class="o">=</span><span class="s2">"segundo argumento"</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nv">arg3</span><span class="o">=</span><span class="s2">"tercer argumento"</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/04_argumentos.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/04_argumentos.sh<span class="w"> </span><span class="s2">"</span><span class="nv">$arg1</span><span class="s2">"</span><span class="w"> </span><span class="s2">"</span><span class="nv">$arg2</span><span class="s2">"</span><span class="w"> </span><span class="s2">"</span><span class="nv">$arg3</span><span class="s2">"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Primer argumento: primer argumento',
          'Segundo argumento: segundo argumento',
          'Tercer argumento: tercer argumento',
          'Todos los argumentos: primer argumento segundo argumento tercer argumento',
          'N√∫mero de argumentos: 3',
          'Nombre del script: ./scripts_bash/04_argumentos.sh',
          'C√≥digo de salida del √∫ltimo comando: 0',
          'PID del script: 11644',
          'Argumento 3: tercer argumento',
          'Argumento 2: segundo argumento',
          'Argumento 3 con longitud m√°xima de 2 caracteres: te',
          'Argumento 2 con longitud m√°xima de 3 caracteres: seg',
          'Reemplazando argumento 3: tercer ARGumento',
          'Reemplazando argumento 2: segundo ARGumento',
          'Reemplazando patr√≥n en argumento 3: tercer argumento',
          'Reemplazando patr√≥n en argumento 2: segundo argumento',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Executar-comandos-e-armazen%C3%A1-los-em-uma-vari%C3%A1vel">Executar comandos e armazen√°-los em uma vari√°vel<a class="anchor-link" href="#Executar-comandos-e-armazen%C3%A1-los-em-uma-vari%C3%A1vel"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 62" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Temos duas maneiras de executar um comando e salvar sua sa√≠da em uma vari√°vel</p>
      <ul>
      <li>Por vari√°vel=<code>comando</code></li>
      <li>Atrav√©s de <code>variable=$(comando)</code>.</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/05_variables_comandos.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">path</span><span class="o">=</span><span class="err">$</span><span class="p">(</span><span class="n">pwd</span><span class="p">)</span>',
          '<span class="n">infokernel</span><span class="o">=</span><span class="err">`</span><span class="n">uname</span> <span class="o">-</span><span class="n">a</span><span class="err">`</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"El directorio actual es: $path"</span>',
          '<span class="n">echo</span> <span class="s2">"La informaci√≥n del kernel es: $infokernel"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/05_variables_comandos.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/05_variables_comandos.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/05_variables_comandos.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'El directorio actual es: /home/wallabot/Documentos/web/portafolio/posts',
          'La informaci√≥n del kernel es: Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Depura%C3%A7%C3%A3o">Depura√ß√£o<a class="anchor-link" href="#Depura%C3%A7%C3%A3o"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 63" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>H√° duas maneiras de ser capaz de depurar no bash scripting</p>
      <ul>
      <li>Utilizando `-v': Execu√ß√£o detalhada linha por linha do script</li>
      <li>Utilizando <code>-x</code>: Exibi√ß√£o de informa√ß√µes do roteiro</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>bash<span class="w"> </span>-v<span class="w"> </span>scripts_bash/05_variables_comandos.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '#!/bin/bash',
          'path=$(pwd)',
          'infokernel=`uname -a`',
          'echo "El directorio actual es: $path"',
          'El directorio actual es: /home/wallabot/Documentos/web/portafolio/posts',
          'echo "La informaci√≥n del kernel es: $infokernel"',
          'La informaci√≥n del kernel es: Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>bash<span class="w"> </span>-x<span class="w"> </span>scripts_bash/05_variables_comandos.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '++ pwd',
          '+ path=/home/wallabot/Documentos/web/portafolio/posts',
          '++ uname -a',
          '+ infokernel=\'Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux\'',
          '+ echo \'El directorio actual es: /home/wallabot/Documentos/web/portafolio/posts\'',
          'El directorio actual es: /home/wallabot/Documentos/web/portafolio/posts',
          '+ echo \'La informaci√≥n del kernel es: Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux\'',
          'La informaci√≥n del kernel es: Linux wallabot 5.15.0-57-generic #63~20.04.1-Ubuntu SMP Wed Nov 30 13:40:16 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Obter-informa%C3%A7%C3%B5es-do-usu%C3%A1rio">Obter informa√ß√µes do usu√°rio<a class="anchor-link" href="#Obter-informa%C3%A7%C3%B5es-do-usu%C3%A1rio"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 64" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Obter-informa%C3%A7%C3%B5es-utilizando-os-comandos-echo-e-read.">Obter informa√ß√µes utilizando os comandos <code>echo</code> e <code>read</code>.<a class="anchor-link" href="#Obter-informa%C3%A7%C3%B5es-utilizando-os-comandos-echo-e-read."><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 65" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Temos duas formas de obter informa√ß√µes do usu√°rio</p>
      <ol>
      <li>com o comando <code>echo -n</code>. Com a bandeira <code>-n</code> indicamos que n√£o queremos que uma quebra de linha seja impressa no final do <code>echo</code>. Por exemplo, `echo -n "Insira dados:", com este comando pedimos dados e o cursor ficar√° na mesma linha, n√£o haver√° quebra de linha.</li>
      <li>utilizando o comando "ler". Com este comando, o programa esperar√° que o usu√°rio insira os dados, terminando com uma quebra de linha. O que foi inserido ser√° armazenado na vari√°vel <code>REPLY</code>. Se voc√™ quiser que a vari√°vel onde os dados inseridos pelo usu√°rio s√£o salvos tenha outro nome, voc√™ deve inserir <code>read [vari√°vel]</code>, por exemplo o comando <code>read myVariable</code>, salvar√° os dados do usu√°rio na vari√°vel <code>myVariable</code>.</li>
      <li>utilizando o comando <code>$REPLY</code> ou <code>$[vari√°vel]</code>, acessamos os dados inseridos pelo usu√°rio.</li>
      </ol>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/06_leer_informacion.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">option</span><span class="o">=</span><span class="mi">0</span>',
          '<span class="n">backupName</span><span class="o">=</span><span class="s2">""</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Programa de utilidades"</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar una opci√≥n: "</span>',
          '<span class="n">read</span>',
          '<span class="n">option</span><span class="o">=</span><span class="err">$</span><span class="n">REPLY</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar un nombre: "</span>',
          '<span class="n">read</span> <span class="n">backupName</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Opci√≥n: $option, backupName: $backupName"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/06_leer_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como n√£o posso inserir os dados em um caderno jupyter como ele pede, coloquei-o em um cano ``` de antem√£o.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/06_leer_informacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"1\nnombreprueba"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>./scripts_bash/06_leer_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Programa de utilidades',
          'Ingresar una opci√≥n: ',
          'Ingresar un nombre: ',
          'Opci√≥n: 1, backupName: nombreprueba',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Obter-informa%C3%A7%C3%B5es-somente-atrav%C3%A9s-do-comando-%22ler">Obter informa√ß√µes somente atrav√©s do comando "ler<a class="anchor-link" href="#Obter-informa%C3%A7%C3%B5es-somente-atrav%C3%A9s-do-comando-%22ler"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 66" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Outra forma de obter informa√ß√µes √© utilizar apenas o comando "ler", a sintaxe seria</p>
      <p>"bash
      leia -p "Mensagem imediata:" [vari√°vel].</p>
      <pre><code>
      A bandeira `-p' indica que a mensagem ``Ponto de alerta:` ser√° exibida antes de aguardar a entrada do usu√°rio. Se nenhum nome de vari√°vel for especificado, os dados ser√£o armazenados na vari√°vel `REPLY`.</code></pre>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/06_leer_informacion.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">option</span><span class="o">=</span><span class="mi">0</span>',
          '<span class="n">backupName</span><span class="o">=</span><span class="s2">""</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Programa de utilidades"</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar una opci√≥n: "</span>',
          '<span class="n">read</span>',
          '<span class="n">option1</span><span class="o">=</span><span class="err">$</span><span class="n">REPLY</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar un nombre: "</span>',
          '<span class="n">read</span> <span class="n">backupName</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">p</span> <span class="s2">"Ingresar otra opci√≥n: "</span> <span class="n">option2</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Opci√≥n: $option1-$option2, backupName: $backupName"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/06_leer_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/06_leer_informacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"1\nnombreprueba\n2"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>./scripts_bash/06_leer_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Programa de utilidades',
          'Ingresar una opci√≥n: ',
          'Ingresar un nombre: ',
          'Opci√≥n: 1-2, backupName: nombreprueba',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Validar-informa%C3%A7%C3%B5es-do-usu%C3%A1rio">Validar informa√ß√µes do usu√°rio<a class="anchor-link" href="#Validar-informa%C3%A7%C3%B5es-do-usu%C3%A1rio"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 67" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para validar as informa√ß√µes do usu√°rio a melhor maneira seria usar express√µes regulares, aqui est√° um <a href="https://www.maximofn.com/pt-br/regular-expressions//">post</a> onde eu as explico</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Tamb√©m podemos especificar o n√∫mero de caracteres que queremos que o usu√°rio entre ao utilizar o "ler", para isso utilizamos a bandeira "n√£o", que, se n√£o for seguida por um n√∫mero, esperar√° at√© que o usu√°rio entre uma quebra de linha, e se for seguida por um n√∫mero, esperar√° at√© que o usu√°rio entre esse n√∫mero de caracteres.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/07_validar_informacion.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">option</span><span class="o">=</span><span class="mi">0</span>',
          '<span class="n">backupName</span><span class="o">=</span><span class="s2">""</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Programa de utilidades"</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar una opci√≥n: "</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">n1</span>',
          '<span class="n">option1</span><span class="o">=</span><span class="err">$</span><span class="n">REPLY</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar un nombre: "</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">n4</span> <span class="n">backupName</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">p</span> <span class="s2">"Ingresar otra opci√≥n: "</span> <span class="n">option2</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Opci√≥n: $option1-$option2, backupName: $backupName"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/07_validar_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/07_validar_informacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"1back2"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>./scripts_bash/07_validar_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Programa de utilidades',
          'Ingresar una opci√≥n: ',
          'Ingresar un nombre: ',
          'Opci√≥n: 1-2, backupName: back',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos que o usu√°rio digite um valor confidencial, como uma senha, colocamos a bandeira <code>-s</code> (seguran√ßa). Desta forma, quando o usu√°rio insere os dados, eles n√£o ser√£o impressos no console.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/07_validar_informacion.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">option</span><span class="o">=</span><span class="mi">0</span>',
          '<span class="n">backupName</span><span class="o">=</span><span class="s2">""</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Programa de utilidades"</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar una opci√≥n: "</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">n1</span>',
          '<span class="n">option1</span><span class="o">=</span><span class="err">$</span><span class="n">REPLY</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s2">"Ingresar un nombre: "</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">n4</span> <span class="n">backupName</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">p</span> <span class="s2">"Ingresar otra opci√≥n: "</span> <span class="n">option2</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">read</span> <span class="o">-</span><span class="n">s</span> <span class="o">-</span><span class="n">p</span> <span class="s2">"Password: "</span> <span class="n">password</span>',
          '<span class="n">echo</span> <span class="s2">""</span>',
          '<span class="n">echo</span> <span class="s2">"Opci√≥n: $option1-$option2, backupName: $backupName, password: $password"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/07_validar_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/07_validar_informacion.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"1back2\n1234"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>./scripts_bash/07_validar_informacion.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Programa de utilidades',
          'Ingresar una opci√≥n: ',
          'Ingresar un nombre: ',
          'Opci√≥n: 1-2, backupName: back, password: 1234',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Se-mais">Se mais<a class="anchor-link" href="#Se-mais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 68" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A maneira de escrever os condicionamentos "se" e "e" √©:</p>
      <p>"bash
      se [[condi√ß√£o]]; ent√£o
          declara√ß√£o
      elif [[condi√ß√£o]]; ent√£o
          declara√ß√£o
      sen√£o
          declara√ß√£o
      fi</p>
      <pre><code>
      √â importante observar que as condi√ß√µes t√™m que estar entre par√™nteses rectos `[[]]`.</code></pre>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/08_if_else.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="k">if</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"Verdadero"</span>',
          '<span class="k">elif</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"Verdadero"</span>',
          '<span class="k">else</span>',
          '    <span class="n">echo</span> <span class="s2">"Falso"</span>',
          '<span class="n">fi</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/08_if_else.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/08_if_else.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/08_if_else.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Falso',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver como criar "se" aninhados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/08_if_else.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="k">if</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"Verdadero"</span>',
          '<span class="k">elif</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"Verdadero"</span>',
          '<span class="k">else</span>',
          '    <span class="k">if</span> <span class="p">[[</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">4</span> <span class="p">]];</span> <span class="n">then</span>',
          '        <span class="n">echo</span> <span class="s2">"Verdadero pero falso"</span>',
          '    <span class="k">else</span>',
          '        <span class="n">echo</span> <span class="s2">"Totalmente falso"</span>',
          '    <span class="n">fi</span>',
          '<span class="n">fi</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/08_if_else.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/08_if_else.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/08_if_else.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Totalmente falso',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Express%C3%B5es-condicionais">Express√µes condicionais<a class="anchor-link" href="#Express%C3%B5es-condicionais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 69" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>J√° vimos como criar 'se', mas √© necess√°rio explicar como criar express√µes condicionais.</p>
      <p>Se formos fazer compara√ß√µes entre cordas ou cordas</p>
      <table>
      <thead>
      <tr>
      <th>opera√ß√£o</th>
      <th>comando</th>
      <th>exemplo</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td>-&gt;&gt;&gt;``</td>
      <td></td>
      <td></td>
      <td></td>
      <td>[[[[[[ string1 &gt; string2 ] ]]`</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>&gt;&gt;&gt;</td>
      <td></td>
      <td></td>
      <td></td>
      </tr>
      <tr>
      <td></td>
      <td>``</td>
      <td></td>
      <td></td>
      <td></td>
      <td>[[[[[ string1 &lt; string2 ]]`</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>sem mais de</td>
      </tr>
      <tr>
      <td></td>
      <td>==`</td>
      <td></td>
      <td></td>
      <td></td>
      <td>[[[[ string1 == string2 ]]`</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>= string2</td>
      </tr>
      <tr>
      <td>==``````[[[[ string1 = string2 ]]`</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>[[[[ string2</td>
      </tr>
      </tbody>
      </table>
      <p>fio vazio|<code>-z</code>||<code>[[ -z fio ]]</code>|||||``````````````````````[ -z fio
         |n````[[ -n string ]<code>||||n ||||</code>[[[[ string ]]`||||</p>
      <p>Se o que vamos fazer √© fazer compara√ß√µes entre os n√∫meros</p>
      <table>
      <thead>
      <tr>
      <th>opera√ß√£o</th>
      <th>comando</th>
      <th>exemplo</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td>-grande do que</td>
      <td>``-gt`</td>
      <td><code>[[[[ n√∫mero1 -gt n√∫mero2 ]]</code></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      </tr>
      <tr>
      <td>-grande ou igual a</td>
      <td><code>-ge</code></td>
      <td></td>
      <td></td>
      <td>[[[[ n√∫mero1 - n√∫mero da idade2 ]]<code></code></td>
      <td></td>
      <td></td>
      <td></td>
      </tr>
      <tr>
      <td>-lt``</td>
      <td></td>
      <td></td>
      <td>[[[ n√∫mero1 -lt n√∫mero2 ]]<code></code></td>
      <td></td>
      <td></td>
      <td></td>
      </tr>
      <tr>
      <td>-le`</td>
      <td></td>
      <td></td>
      <td></td>
      <td>[[[ n√∫mero1 -le n√∫mero2 ]]<code></code></td>
      <td></td>
      <td></td>
      <td>-le</td>
      </tr>
      </tbody>
      </table>
      <p>Igual a |<code>-eq</code>||<code>[[[ n√∫mero1 -eq n√∫mero2 ]]</code>|||||-
         |<code>-diferente do que|</code>-ne<code>|</code>[[[ n√∫mero1 -ne n√∫mero2 ]]`|| ``</p>
      <p>Se quisermos verificar arquivos ou diret√≥rios</p>
      <table>
      <thead>
      <tr>
      <th>opera√ß√£o</th>
      <th>comando</th>
      <th>exemplo</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td>√© um diret√≥rio?</td>
      <td><code>-d</code></td>
      <td></td>
      <td><code>[[ -d &lt;dir&gt; ]]</code></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      </tr>
      <tr>
      <td>√© um arquivo?</td>
      <td><code>-f</code></td>
      <td></td>
      <td><code>[[ -f &lt;file&gt; ]]</code></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      </tr>
      <tr>
      <td>existe?</td>
      <td><code>-e</code></td>
      <td></td>
      <td><code>[[ -e &lt;file&gt; ]]</code> ou <code>[[ -e &lt;dir&gt; ]]</code></td>
      <td></td>
      <td></td>
      </tr>
      <tr>
      <td>√© leg√≠vel?</td>
      <td><code>-r</code></td>
      <td></td>
      <td><code>[[ -r &lt;file&gt; ]]</code></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>-</td>
      </tr>
      <tr>
      <td>√© escrev√≠vel?</td>
      <td><code>-w</code></td>
      <td></td>
      <td><code>[[ -w &lt;file&gt; ]]</code></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      </tr>
      <tr>
      <td>√© execut√°vel?</td>
      <td><code>-x</code></td>
      <td></td>
      <td><code>[[ -x &lt;file&gt; ]]</code></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>√â execut√°vel?</td>
      <td><code>-x</code></td>
      <td></td>
      <td>[[ -x <file> ]]`</file></td>
      </tr>
      <tr>
      <td>√© um link?</td>
      <td><code>-L</code></td>
      <td><code>[[ -L &lt;file&gt; ]]</code></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      </tr>
      <tr>
      <td>es tem conte√∫do?</td>
      <td><code>-s</code></td>
      <td></td>
      <td><code>[[ -s &lt;file&gt; ]]</code></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>s</td>
      </tr>
      <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>√© propriedade do usu√°rio?</td>
      <td><code>-O</code></td>
      <td></td>
      <td></td>
      <td></td>
      <td>[[[ -O <fil> ]]`</fil></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>-</td>
      </tr>
      <tr>
      <td>√© propriedade do grupo?</td>
      <td><code>-G</code></td>
      <td></td>
      <td><code>[[ -G &lt;file&gt; ]]</code></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      </tr>
      <tr>
      <td>foi modificado?</td>
      <td><code>-N</code></td>
      <td><code>[[[ -N &lt;file&gt; ]]</code></td>
      <td>``</td>
      </tr>
      <tr>
      <td>file1 √© mais novo que file2?</td>
      <td>```-nt`</td>
      <td></td>
      <td><code>[[[ &lt;file1&gt; -nt &lt;file2&gt; ]]</code></td>
      <td></td>
      <td></td>
      <td></td>
      </tr>
      <tr>
      <td>file1 √© mais antigo que file2?</td>
      <td><code>-ot</code></td>
      <td></td>
      <td><code>[[[ &lt;file1&gt; -ot &lt;file2&gt; ]]</code></td>
      <td></td>
      <td></td>
      <td></td>
      </tr>
      <tr>
      <td>file1 √© o mesmo arquivo que file2?</td>
      <td><code>-ef</code></td>
      <td></td>
      <td><code>[[[ &lt;file1&gt; -ef &lt;file2&gt; ]]</code></td>
      <td></td>
      <td></td>
      </tr>
      <tr>
      <td>file1 √© o mesmo arquivo que file2?</td>
      <td><code>-ef</code></td>
      <td></td>
      <td><code>[[[ &lt;file1&gt; -ef &lt;file2&gt; ]]</code></td>
      <td></td>
      </tr>
      </tbody>
      </table>
      <p>Se quisermos comparar as condi√ß√µes conjuntas com "e", "ou" e "n√£o".</p>
      <table>
      <thead>
      <tr>
      <th>opera√ß√£o</th>
      <th>comando</th>
      <th>exemplo</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td></td>
      <td><code>&amp;&amp;&amp;&amp;``````[[[ &lt;condi√ß√£o1&gt; &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;``````</code></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>&amp;&amp;&amp;&amp;&amp;`````[[[ &lt;condi√ß√£o1&gt; &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</td>
      </tr>
      <tr>
      <td></td>
      <td></td>
      <td></td>
      <td>``</td>
      <td></td>
      <td></td>
      <td>```[[[ &lt;condi√ß√£o1&gt;</td>
      <td></td>
      <td>&lt;condi√ß√£o2&gt; ]]`</td>
      <td></td>
      <td></td>
      <td></td>
      </tr>
      </tbody>
      </table>
      <p>Se quisermos negar as condi√ß√µes</p>
      <table>
      <thead>
      <tr>
      <th>opera√ß√£o</th>
      <th>comando</th>
      <th>exemplo</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td>n√£o</td>
      <td><code>!</code></td>
      <td></td>
      <td></td>
      <td>[[[ ! &lt;condi√ß√£o&gt; ]]`</td>
      <td></td>
      </tr>
      </tbody>
      </table>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/09_condicionales.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Comparando strings"</span>',
          '<span class="n">string1</span><span class="o">=</span><span class="s2">"hola"</span>',
          '<span class="n">string2</span><span class="o">=</span><span class="s2">"hola"</span>',
          '<span class="n">string3</span><span class="o">=</span><span class="s2">"chao"</span>',
          '<span class="n">string4</span><span class="o">=</span><span class="s2">""</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string1</span> <span class="o">&gt;</span> <span class="err">$</span><span class="n">string3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string1 es mayor que $string3"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string3</span> <span class="o">&lt;</span> <span class="err">$</span><span class="n">string1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string3 es menor que $string1"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string1</span> <span class="o">==</span> <span class="err">$</span><span class="n">string2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string1 es igual que $string2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string1</span> <span class="o">!=</span> <span class="err">$</span><span class="n">string3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string1 es diferente que $string3"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">z</span> <span class="err">$</span><span class="n">string4</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string4 es una cadena vac√≠a"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">n</span> <span class="err">$</span><span class="n">string3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string3 es una cadena no vac√≠a"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">string3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$string3 es una cadena no vac√≠a"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Comparando n√∫meros"</span>',
          '<span class="n">number1</span><span class="o">=</span><span class="mi">10</span>',
          '<span class="n">number2</span><span class="o">=</span><span class="mi">10</span>',
          '<span class="n">number3</span><span class="o">=</span><span class="mi">20</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number3</span> <span class="o">-</span><span class="n">gt</span> <span class="err">$</span><span class="n">number1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number3 es mayor que $number1"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number3</span> <span class="o">-</span><span class="n">ge</span> <span class="err">$</span><span class="n">number2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number3 es mayor o igual que $number2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number1</span> <span class="o">-</span><span class="n">lt</span> <span class="err">$</span><span class="n">number3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number1 es menor que $number3"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number1</span> <span class="o">-</span><span class="n">le</span> <span class="err">$</span><span class="n">number2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number1 es menor o igual que $number2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number1</span> <span class="o">-</span><span class="n">eq</span> <span class="err">$</span><span class="n">number2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number1 es igual que $number2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">number1</span> <span class="o">-</span><span class="n">ne</span> <span class="err">$</span><span class="n">number3</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$number1 es diferente que $number3"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Comparando archivos"</span>',
          '<span class="n">file1</span><span class="o">=</span><span class="s2">"$PWD/2021-02-11-Introduccion-a-Python.ipynb"</span>',
          '<span class="n">file2</span><span class="o">=</span><span class="s2">"$PWD/scripts_bash"</span>',
          '<span class="n">file3</span><span class="o">=</span><span class="s2">"$PWD/mi_paquete_de_python"</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">d</span> <span class="err">$</span><span class="n">file2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file2 es un directorio"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">f</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es un archivo"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">e</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 existe"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">r</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es legible"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">w</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es escribible"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">x</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es ejecutable"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">L</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es un link"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">s</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 tiene contenido"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">O</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es propiedad del usuario"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">G</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es propiedad del grupo"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="o">-</span><span class="n">N</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 fue modificado"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">file1</span> <span class="o">-</span><span class="n">nt</span> <span class="err">$</span><span class="n">file2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es m√°s nuevo que $file2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">file1</span> <span class="o">-</span><span class="n">ot</span> <span class="err">$</span><span class="n">file2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es m√°s viejo que $file2"</span>',
          '<span class="n">fi</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">$</span><span class="n">file1</span> <span class="o">-</span><span class="n">ef</span> <span class="err">$</span><span class="n">file1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"$file1 es el mismo archivo que $file2"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Comparando expresiones con AND"</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">3</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"2 &gt; 1 y 3 &gt; 1"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Comparando expresiones con OR"</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"2 &gt; 1 o 1 &gt; 2"</span>',
          '<span class="n">fi</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Comparando expresiones con NOT"</span>',
          '<span class="k">if</span> <span class="p">[[</span> <span class="err">!</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">]];</span> <span class="n">then</span>',
          '    <span class="n">echo</span> <span class="s2">"1 &gt; 2 no es cierto"</span>',
          '<span class="n">fi</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/09_condicionales.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/09_condicionales.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/09_condicionales.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Comparando strings',
          'hola es mayor que chao',
          'chao es menor que hola',
          'hola es igual que hola',
          'hola es diferente que chao',
          ' es una cadena vac√≠a',
          'chao es una cadena no vac√≠a',
          'chao es una cadena no vac√≠a',
          'Comparando n√∫meros',
          '20 es mayor que 10',
          '20 es mayor o igual que 10',
          '10 es menor que 20',
          '10 es menor o igual que 10',
          '10 es igual que 10',
          '10 es diferente que 20',
          'Comparando archivos',
          '/home/wallabot/Documentos/web/portafolio/posts/scripts_bash es un directorio',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es un archivo',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb existe',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es legible',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es escribible',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb tiene contenido',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es propiedad del usuario',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es propiedad del grupo',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es m√°s viejo que /home/wallabot/Documentos/web/portafolio/posts/scripts_bash',
          '/home/wallabot/Documentos/web/portafolio/posts/2021-02-11-Introduccion-a-Python.ipynb es el mismo archivo que /home/wallabot/Documentos/web/portafolio/posts/scripts_bash',
          'Comparando expresiones con AND',
          '2 &gt; 1 y 3 &gt; 1',
          'Comparando expresiones con OR',
          '2 &gt; 1 o 1 &gt; 2',
          'Comparando expresiones con NOT',
          '1 &gt; 2 no es cierto',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Declara%C3%A7%C3%A3o-de-%22caixa">Declara√ß√£o de "caixa<a class="anchor-link" href="#Declara%C3%A7%C3%A3o-de-%22caixa"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 70" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A seguir veremos como escrever o t√≠pico "caso de troca", mas neste caso basta utilizar o "caso".</p>
      <p>"bash
      caso $variavel em
          <value1>) &lt;senten√ßa1&gt;;;
          <value2>) &lt;senten√ßa2&gt;;;
          <value3>) &lt;senten√ßa3&gt;;;
          ...
          (*) &lt;senten√ßa que n√£o satisfa√ßa nenhuma das frases acima&gt;.
      esac</value3></value2></value1></p>
      <pre><code></code></pre>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/10_case.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">variable</span><span class="o">=</span><span class="s2">"amarillo"</span>',
          '',
          '<span class="k">case</span> <span class="err">$</span><span class="n">variable</span> <span class="ow">in</span>',
          '    <span class="s2">"rojo"</span><span class="p">)</span> <span class="n">echo</span> <span class="s2">"Color rojo"</span><span class="p">;;</span>',
          '    <span class="s2">"verde"</span><span class="p">)</span> <span class="n">echo</span> <span class="s2">"Color verde"</span><span class="p">;;</span>',
          '    <span class="s2">"azul"</span><span class="p">)</span> <span class="n">echo</span> <span class="s2">"Color azul"</span><span class="p">;;</span>',
          '    <span class="o">*</span><span class="p">)</span> <span class="n">echo</span> <span class="s2">"Color desconocido"</span><span class="p">;;</span>',
          '<span class="n">esac</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/10_case.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/10_case.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/10_case.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Color desconocido',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Arrays">Arrays<a class="anchor-link" href="#Arrays"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 71" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver como as arrays se comportam no bash scripting</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/11_arrays.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">arrayNumeros</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span>',
          '<span class="n">arrayStrings</span><span class="o">=</span><span class="p">(</span><span class="s2">"hola"</span> <span class="s2">"chao"</span> <span class="s2">"adios"</span><span class="p">)</span>',
          '<span class="n">arrayMixto</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span> <span class="s2">"hola"</span> <span class="mi">2</span> <span class="s2">"chao"</span> <span class="mi">3</span> <span class="s2">"adios"</span><span class="p">)</span>',
          '<span class="n">arrayVacio</span><span class="o">=</span><span class="p">()</span>',
          '<span class="n">arrayRango</span><span class="o">=</span><span class="p">({</span><span class="n">A</span><span class="o">..</span><span class="n">Z</span><span class="p">})</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Arrays"</span>',
          '<span class="n">echo</span> <span class="s2">"Array de n√∫meros: $</span><span class="si">{arrayNumeros[*]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Array de strings: $</span><span class="si">{arrayStrings[*]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Array mixto: $</span><span class="si">{arrayMixto[*]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Array vac√≠o: $</span><span class="si">{arrayVacio[*]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Array de rango: $</span><span class="si">{arrayRango[*]}</span><span class="s2">"</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Accediendo a elementos"</span>',
          '<span class="n">echo</span> <span class="s2">"Primer elemento del array de n√∫meros: $</span><span class="si">{arrayNumeros[0]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Segundo elemento del array de strings: $</span><span class="si">{arrayStrings[1]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"√öltimo elemento del array de n√∫meros: $</span><span class="si">{arrayNumeros[-1]}</span><span class="s2">"</span>',
          '<span class="n">echo</span> <span class="s2">"Pen√∫ltimo elemento del array de strings: $</span><span class="si">{arrayStrings[-2]}</span><span class="s2">"</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Longitud de arrays"</span>',
          '<span class="n">echo</span> <span class="s2">"Longitud del array de n√∫meros: ${#arrayNumeros[*]}"</span>',
          '<span class="n">echo</span> <span class="s2">"Longitud del array de strings: ${#arrayStrings[*]}"</span>',
          '<span class="n">echo</span> <span class="s2">"Longitud del array mixto: ${#arrayMixto[*]}"</span>',
          '<span class="n">echo</span> <span class="s2">"Longitud del array vac√≠o: ${#arrayVacio[*]}"</span>',
          '<span class="n">echo</span> <span class="s2">"Longitud del array de rango: ${#arrayRango[*]}"</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">A√±adiendo y eliminando elementos"</span>',
          '<span class="n">arrayNumeros</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="mi">6</span>',
          '<span class="n">echo</span> <span class="s2">"A√±adiendo elemento al array de n√∫meros: $</span><span class="si">{arrayNumeros[*]}</span><span class="s2">"</span>',
          '<span class="n">unset</span> <span class="n">arrayStrings</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
          '<span class="n">echo</span> <span class="s2">"Eliminando elemento del array de strings: $</span><span class="si">{arrayStrings[*]}</span><span class="s2">"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/11_arrays.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/11_arrays.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/11_arrays.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Arrays',
          'Array de n√∫meros: 1 2 3 4 5',
          'Array de strings: hola chao adios',
          'Array mixto: 1 hola 2 chao 3 adios',
          'Array vac√≠o: ',
          'Array de rango: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z',
          'Accediendo a elementos',
          'Primer elemento del array de n√∫meros: 1',
          'Segundo elemento del array de strings: chao',
          '√öltimo elemento del array de n√∫meros: 5',
          'Pen√∫ltimo elemento del array de strings: chao',
          'Longitud de arrays',
          'Longitud del array de n√∫meros: 5',
          'Longitud del array de strings: 3',
          'Longitud del array mixto: 6',
          'Longitud del array vac√≠o: 0',
          'Longitud del array de rango: 26',
          'A√±adiendo y eliminando elementos',
          'A√±adiendo elemento al array de n√∫meros: 1 2 3 4 5 6',
          'Eliminando elemento del array de strings: hola adios',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Loop-for">Loop <code>for</code><a class="anchor-link" href="#Loop-for"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 72" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para utilizar o la√ßo "para", a seguinte sintaxe deve ser utilizada</p>
      <p>"bash
      para &lt;vari√°vel&gt; em <array>
      do
          senten√ßa
      feito</array></p>
      <pre><code>
      Vejamos um exemplo</code></pre>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/12_for.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">arrayNumeros</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span>',
          '<span class="n">arrayStrings</span><span class="o">=</span><span class="p">(</span><span class="s2">"hola"</span> <span class="s2">"chao"</span> <span class="s2">"adios"</span><span class="p">)</span>',
          '',
          '<span class="n">echo</span> <span class="s2">"Iterar a trav√©s de un array de numeros"</span>',
          '<span class="k">for</span> <span class="n">numero</span> <span class="ow">in</span> <span class="err">$</span><span class="p">{</span><span class="n">arrayNumeros</span><span class="p">[</span><span class="o">*</span><span class="p">]}</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"N√∫mero: $numero"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a trav√©s de un array de strings"</span>',
          '<span class="k">for</span> <span class="n">string</span> <span class="ow">in</span> <span class="err">$</span><span class="p">{</span><span class="n">arrayStrings</span><span class="p">[</span><span class="o">*</span><span class="p">]}</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"String: $string"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a trav√©s de un array no declarado"</span>',
          '<span class="k">for</span> <span class="n">string</span> <span class="ow">in</span> <span class="s2">"Manolo"</span> <span class="s2">"Juan"</span> <span class="s2">"Pedro"</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"String: $string"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a trav√©s de un rango"</span>',
          '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">{</span><span class="mf">1..10</span><span class="p">}</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"N√∫mero: $i"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a trav√©s de un rango de manera cl√°sica"</span>',
          '<span class="k">for</span> <span class="p">((</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">))</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"N√∫mero: $i"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a trav√©s de un comando"</span>',
          '<span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="err">$</span><span class="p">(</span><span class="n">ls</span><span class="p">)</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"Archivo: $file"</span>',
          '<span class="n">done</span>',
          '',
          '<span class="n">echo</span> <span class="o">-</span><span class="n">e</span> <span class="s2">"</span><span class="se">\\n</span><span class="s2">Iterar a trav√©s de un directorio"</span>',
          '<span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="o">*</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"Archivo: $file"</span>',
          '<span class="n">done</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/12_for.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/12_for.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/12_for.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Iterar a trav√©s de un array de numeros',
          'N√∫mero: 1',
          'N√∫mero: 2',
          'N√∫mero: 3',
          'N√∫mero: 4',
          'N√∫mero: 5',
          'Iterar a trav√©s de un array de strings',
          'String: hola',
          'String: chao',
          'String: adios',
          'Iterar a trav√©s de un array no declarado',
          'String: Manolo',
          'String: Juan',
          'String: Pedro',
          'Iterar a trav√©s de un rango',
          'N√∫mero: 1',
          'N√∫mero: 2',
          'N√∫mero: 3',
          'N√∫mero: 4',
          'N√∫mero: 5',
          'N√∫mero: 6',
          'N√∫mero: 7',
          'N√∫mero: 8',
          'N√∫mero: 9',
          'N√∫mero: 10',
          'Iterar a trav√©s de un rango de manera cl√°sica',
          'N√∫mero: 1',
          'N√∫mero: 2',
          'N√∫mero: 3',
          'N√∫mero: 4',
          'N√∫mero: 5',
          'N√∫mero: 6',
          'N√∫mero: 7',
          'N√∫mero: 8',
          'N√∫mero: 9',
          'N√∫mero: 10',
          'Iterar a trav√©s de un comando',
          'Archivo: 2021-02-11-Introduccion-a-Python.ipynb',
          'Archivo: 2021-04-23-Calculo-matricial-con-Numpy.ipynb',
          'Archivo: 2021-06-15-Manejo-de-datos-con-Pandas.ipynb',
          'Archivo: 2022-09-12-Introduccion-a-la-terminal.ipynb',
          'Archivo: 2023-01-22-Docker.ipynb',
          'Archivo: 2023-XX-XX-Bash-scripting.ipynb',
          'Archivo: california_housing_train.csv',
          'Archivo: command-line-cheat-sheet.pdf',
          'Archivo: CSS.ipynb',
          'Archivo: Expresiones',
          'Archivo: regulares.ipynb',
          'Archivo: html_files',
          'Archivo: html.ipynb',
          'Archivo: introduccion_python',
          'Archivo: mi_paquete_de_python',
          'Archivo: movies.csv',
          'Archivo: movies.dat',
          'Archivo: notebooks_translated',
          'Archivo: __pycache__',
          'Archivo: scripts_bash',
          'Archivo: ssh.ipynb',
          'Archivo: test.ipynb',
          'Iterar a trav√©s de un directorio',
          'Archivo: 2021-02-11-Introduccion-a-Python.ipynb',
          'Archivo: 2021-04-23-Calculo-matricial-con-Numpy.ipynb',
          'Archivo: 2021-06-15-Manejo-de-datos-con-Pandas.ipynb',
          'Archivo: 2022-09-12-Introduccion-a-la-terminal.ipynb',
          'Archivo: 2023-01-22-Docker.ipynb',
          'Archivo: 2023-XX-XX-Bash-scripting.ipynb',
          'Archivo: california_housing_train.csv',
          'Archivo: command-line-cheat-sheet.pdf',
          'Archivo: CSS.ipynb',
          'Archivo: Expresiones regulares.ipynb',
          'Archivo: html_files',
          'Archivo: html.ipynb',
          'Archivo: introduccion_python',
          'Archivo: mi_paquete_de_python',
          'Archivo: movies.csv',
          'Archivo: movies.dat',
          'Archivo: notebooks_translated',
          'Archivo: __pycache__',
          'Archivo: scripts_bash',
          'Archivo: ssh.ipynb',
          'Archivo: test.ipynb',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="while-loop"><code>while</code> loop<a class="anchor-link" href="#while-loop"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 73" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para utilizar o la√ßo "entretanto", utilize a seguinte sintaxe</p>
      <p>"bash
      enquanto &lt;condi√ß√£o&gt;
      do
          senten√ßa
      feito</p>
      <pre><code>
      Vejamos um exemplo</code></pre>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/13_while.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">numero</span><span class="o">=</span><span class="mi">1</span>',
          '<span class="k">while</span> <span class="p">[</span> <span class="err">$</span><span class="n">numero</span> <span class="o">-</span><span class="n">ne</span> <span class="mi">5</span> <span class="p">]</span>',
          '<span class="n">do</span>',
          '    <span class="n">echo</span> <span class="s2">"N√∫mero: $numero"</span>',
          '    <span class="n">numero</span><span class="o">=</span><span class="err">$</span><span class="p">((</span> <span class="n">numero</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">))</span>',
          '<span class="n">done</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/13_while.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/13_while.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/13_while.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'N√∫mero: 1',
          'N√∫mero: 2',
          'N√∫mero: 3',
          'N√∫mero: 4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Controle-de-fluxo-com-quebrar-e-continuar.">Controle de fluxo com <code>quebrar</code> e <code>continuar</code>.<a class="anchor-link" href="#Controle-de-fluxo-com-quebrar-e-continuar."><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 74" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos controlar o fluxo de um loop utilizando as palavras "quebrar" e "continuar", aqui est√° um exemplo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/14_control_de_flujo.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">numero</span><span class="o">=</span><span class="mi">1</span>',
          '<span class="k">while</span> <span class="p">[</span> <span class="err">$</span><span class="n">numero</span> <span class="o">-</span><span class="n">ne</span> <span class="mi">10</span> <span class="p">]</span>',
          '<span class="n">do</span>',
          '    <span class="k">if</span> <span class="p">[</span> <span class="err">$</span><span class="n">numero</span> <span class="o">-</span><span class="n">eq</span> <span class="mi">5</span> <span class="p">];</span> <span class="n">then</span>',
          '        <span class="n">numero</span><span class="o">=</span><span class="err">$</span><span class="p">((</span> <span class="n">numero</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">))</span>',
          '        <span class="n">echo</span> <span class="s2">"Saltando el n√∫mero 5"</span>',
          '        <span class="k">continue</span>',
          '    <span class="k">elif</span>',
          '        <span class="p">[</span> <span class="err">$</span><span class="n">numero</span> <span class="o">-</span><span class="n">eq</span> <span class="mi">8</span> <span class="p">];</span> <span class="n">then</span>',
          '        <span class="n">echo</span> <span class="s2">"Terminando el bucle"</span>',
          '        <span class="k">break</span>',
          '    <span class="n">fi</span> ',
          '    <span class="n">echo</span> <span class="s2">"N√∫mero: $numero"</span>',
          '    <span class="n">numero</span><span class="o">=</span><span class="err">$</span><span class="p">((</span> <span class="n">numero</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">))</span>',
          '<span class="n">done</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting scripts_bash/14_control_de_flujo.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/14_control_de_flujo.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/14_control_de_flujo.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'N√∫mero: 1',
          'N√∫mero: 2',
          'N√∫mero: 3',
          'N√∫mero: 4',
          'Saltando el n√∫mero 5',
          'N√∫mero: 6',
          'N√∫mero: 7',
          'Terminando el bucle',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Fun%C3%A7%C3%B5es">Fun√ß√µes<a class="anchor-link" href="#Fun%C3%A7%C3%B5es"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 75" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A sintaxe das fun√ß√µes de escrita √©</p>
      <div class="highlight"><pre><span></span>&lt;nombre<span class="w"> </span>de<span class="w"> </span>funcion&gt;<span class="w"> </span><span class="o">(){opening_brace}</span>
        <span class="w">    </span>sentencias
        <span class="o">{closing_brace}</span>
        </pre></div>
      <p>Aqui est√° um exemplo</code></pre>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> scripts_bash/15_funciones.sh',
          '<span class="ch">#!/bin/bash</span>',
          '',
          '<span class="n">funcion</span> <span class="p">()</span> <span class="p">{</span>',
          '    <span class="n">echo</span> <span class="s2">"Soy una funci√≥n"</span>',
          '<span class="p">}</span>',
          '',
          '<span class="n">funcoionConParametros</span> <span class="p">()</span> <span class="p">{</span>',
          '    <span class="n">echo</span> <span class="s2">"Soy una funci√≥n con par√°metros"</span>',
          '    <span class="n">echo</span> <span class="s2">"Par√°metro 1: $1"</span>',
          '    <span class="n">echo</span> <span class="s2">"Par√°metro 2: $2"</span>',
          '<span class="p">}</span>',
          '',
          '<span class="n">funcion</span>',
          '<span class="n">funcoionConParametros</span> <span class="s2">"Hola"</span> <span class="s2">"Adi√≥s"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing scripts_bash/15_funciones.sh',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>chmod<span class="w"> </span>+x<span class="w"> </span>scripts_bash/15_funciones.sh<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>./scripts_bash/15_funciones.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Soy una funci√≥n',
          'Soy una funci√≥n con par√°metros',
          'Par√°metro 1: Hola',
          'Par√°metro 2: Adi√≥s',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      






    </div>

  </section>

</PostLayout>
