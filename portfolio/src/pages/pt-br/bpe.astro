---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'BPE tokenizer';
const end_url = 'bpe';
const description = 'üîç Descubra o segredo da tokeniza√ß√£o! üîë Revelo os mist√©rios da tokeniza√ß√£o BPE (Byte Pair Encoding), um dos m√©todos mais populares e eficazes para dividir o texto em tokens. Aprenda a tokenizar com BPE! üíª Leia minha postagem e descubra as dicas e os truques para dominar a tokeniza√ß√£o com BPE! üìÑ';
const keywords = 'tokenizador bpe, byte pair encoding, tokeniza√ß√£o, pnl, processamento de linguagem natural, processamento de texto';
const languaje = 'PT';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/BPE_tokenizer.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=770
    image_height=728
    image_extension=webp
    article_date=2024-06-04+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Algoritmo-de-treinamento"><h2>Algoritmo de treinamento</h2></a>
      <a class="anchor-link" href="#Tokeniza%C3%A7%C3%A3o"><h2>Tokeniza√ß√£o</h2></a>
      <a class="anchor-link" href="#Visualizador-de-tokens"><h2>Visualizador de tokens</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Tokenizador-BPE">Tokenizador BPE<a class="anchor-link" href="#Tokenizador-BPE"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 8" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Este caderno foi traduzido automaticamente para torn√°-lo acess√≠vel a mais pessoas, por favor me avise se voc√™ vir algum erro de digita√ß√£o..</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O tokenizador <code>BPE</code> (Byte Pair Encoding) √© um algoritmo de compacta√ß√£o de dados usado para criar um vocabul√°rio de subpalavras a partir de um corpus de texto. Esse algoritmo √© baseado na frequ√™ncia de pares de bytes no texto. Ele se tornou popular porque foi usado como um tokenizador por LLMs como GPT, GPT-2, RoBERTa, BART e DeBERTa.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Algoritmo-de-treinamento">Algoritmo de treinamento<a class="anchor-link" href="#Algoritmo-de-treinamento"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 9" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suponha que tenhamos um corpus de texto contendo apenas as seguintes palavras <code>hug, pug, pun, bun e hugs</code>, a primeira etapa √© criar um vocabul√°rio com todos os caracteres presentes no corpus, que no nosso caso ser√° <code>b, g, h, n, p, s, u</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">corpus_words</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"hug"</span><span class="p">,</span> <span class="s2">"pug"</span><span class="p">,</span> <span class="s2">"pun"</span><span class="p">,</span> <span class="s2">"bun"</span><span class="p">,</span> <span class="s2">"hugs"</span><span class="p">]</span>',
          '',
          '<span class="c1"># Concatenate all the words in the corpus</span>',
          '<span class="n">initial_corpus_tokens</span> <span class="o">=</span> <span class="s2">""</span>',
          '<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">corpus_words</span><span class="p">:</span>',
          '    <span class="n">initial_corpus_tokens</span> <span class="o">+=</span> <span class="n">word</span>',
          '',
          '<span class="c1"># Convert the concatenated string to a set of tokens to get unique tokens</span>',
          '<span class="n">initial_corpus_tokens</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">initial_corpus_tokens</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Corpus words: </span><span class="si">{</span><span class="n">corpus_words</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Initial corpus tokens: </span><span class="si">{</span><span class="n">initial_corpus_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Number of initial corpus tokens: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">initial_corpus_tokens</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Corpus words: [\'hug\', \'pug\', \'pun\', \'bun\', \'hugs\']',
          'Initial corpus tokens: {\'p\', \'n\', \'u\', \'s\', \'h\', \'g\', \'b\'}',
          'Number of initial corpus tokens: 7',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora, suponha que esse seja o nosso corpus de senten√ßas, √© um corpus inventado, n√£o faz sentido.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">corpus</span> <span class="o">=</span> <span class="p">[</span>',
      '          <span class="s2">"hug hug hug pun pun bun hugs"</span><span class="p">,</span>',
      '          <span class="s2">"hug hug pug pug pun pun hugs"</span><span class="p">,</span>',
      '          <span class="s2">"hug hug pug pug pun pun pun pun hugs"</span><span class="p">,</span>',
      '          <span class="s2">"pug pun pun pun bun hugs"</span><span class="p">,</span>',
      '          <span class="s2">"hug hug hug pun bun bun hugs"</span><span class="p">,</span>',
      '      <span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>












      
      <section class="section-block-markdown-cell">
      <p>Vamos contar o n√∫mero de vezes que cada palavra aparece no corpus, para verificar se o que colocamos antes est√° correto.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">corpus</span> <span class="o">=</span> <span class="p">[</span>',
          '    <span class="s2">"hug hug hug pun pun bun hugs"</span><span class="p">,</span>',
          '    <span class="s2">"hug hug pug pug pun pun hugs"</span><span class="p">,</span>',
          '    <span class="s2">"hug hug pug pug pun pun pun pun hugs"</span><span class="p">,</span>',
          '    <span class="s2">"pug pun pun pun bun hugs"</span><span class="p">,</span>',
          '    <span class="s2">"hug hug hug pun bun bun hugs"</span><span class="p">,</span>',
          '<span class="p">]</span>',
          '</span><span class="n">num_hug</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">num_pug</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">num_pun</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">num_bun</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">num_hugs</span> <span class="o">=</span> <span class="mi">0</span>',
          '',
          '<span class="k">for</span> <span class="n">sentence</span> <span class="ow">in</span> <span class="n">corpus</span><span class="p">:</span>',
          '    <span class="n">words</span> <span class="o">=</span> <span class="n">sentence</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">" "</span><span class="p">)</span>',
          '    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>',
          '        <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">"hug"</span><span class="p">:</span>',
          '            <span class="n">num_hug</span> <span class="o">+=</span> <span class="mi">1</span>',
          '        <span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">"pug"</span><span class="p">:</span>',
          '            <span class="n">num_pug</span> <span class="o">+=</span> <span class="mi">1</span>',
          '        <span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">"pun"</span><span class="p">:</span>',
          '            <span class="n">num_pun</span> <span class="o">+=</span> <span class="mi">1</span>',
          '        <span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">"bun"</span><span class="p">:</span>',
          '            <span class="n">num_bun</span> <span class="o">+=</span> <span class="mi">1</span>',
          '        <span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">"hugs"</span><span class="p">:</span>',
          '            <span class="n">num_hugs</span> <span class="o">+=</span> <span class="mi">1</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Number of hug: </span><span class="si">{</span><span class="n">num_hug</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Number of pug: </span><span class="si">{</span><span class="n">num_pug</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Number of pun: </span><span class="si">{</span><span class="n">num_pun</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Number of bun: </span><span class="si">{</span><span class="n">num_bun</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Number of hugs: </span><span class="si">{</span><span class="n">num_hugs</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Number of hug: 10',
          'Number of pug: 5',
          'Number of pun: 12',
          'Number of bun: 4',
          'Number of hugs: 5',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Tudo o que hav√≠amos contado est√° bem, podemos continuar.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criaremos um dicion√°rio com os tokens de cada palavra e o n√∫mero de vezes que ela aparece no corpus.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dict_tokens_by_word_appearance</span> <span class="o">=</span> <span class="p">{</span>',
          '    <span class="s2">"hug"</span><span class="p">:</span>',
          '        <span class="p">{</span>',
          '            <span class="s2">"count"</span><span class="p">:</span> <span class="n">num_hug</span><span class="p">,</span>',
          '            <span class="s2">"tokens"</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">"hug"</span><span class="p">],</span>',
          '        <span class="p">},</span>',
          '    <span class="s2">"pug"</span><span class="p">:</span>',
          '        <span class="p">{</span>',
          '            <span class="s2">"count"</span><span class="p">:</span> <span class="n">num_pug</span><span class="p">,</span>',
          '            <span class="s2">"tokens"</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">"pug"</span><span class="p">],</span>',
          '        <span class="p">},</span>',
          '    <span class="s2">"pun"</span><span class="p">:</span>',
          '        <span class="p">{</span>',
          '            <span class="s2">"count"</span><span class="p">:</span> <span class="n">num_pun</span><span class="p">,</span>',
          '            <span class="s2">"tokens"</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">"pun"</span><span class="p">],</span>',
          '        <span class="p">},</span>',
          '    <span class="s2">"bun"</span><span class="p">:</span>',
          '        <span class="p">{</span>',
          '            <span class="s2">"count"</span><span class="p">:</span> <span class="n">num_bun</span><span class="p">,</span>',
          '            <span class="s2">"tokens"</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">"bun"</span><span class="p">],</span>',
          '        <span class="p">},</span>',
          '    <span class="s2">"hugs"</span><span class="p">:</span>',
          '        <span class="p">{</span>',
          '            <span class="s2">"count"</span><span class="p">:</span> <span class="n">num_hugs</span><span class="p">,</span>',
          '            <span class="s2">"tokens"</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">"hugs"</span><span class="p">],</span>',
          '        <span class="p">},</span>',
          '<span class="p">}</span>',
          '',
          '<span class="n">dict_tokens_by_word_appearance</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'hug\': {\'count\': 10, \'tokens\': [\'h\', \'u\', \'g\']},',
          ' \'pug\': {\'count\': 5, \'tokens\': [\'p\', \'u\', \'g\']},',
          ' \'pun\': {\'count\': 12, \'tokens\': [\'p\', \'u\', \'n\']},',
          ' \'bun\': {\'count\': 4, \'tokens\': [\'b\', \'u\', \'n\']},',
          ' \'hugs\': {\'count\': 5, \'tokens\': [\'h\', \'u\', \'g\', \'s\']}}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora vamos procurar o par de tokens consecutivos que aparece com mais frequ√™ncia no dicion√°rio.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dict_keys</span> <span class="o">=</span> <span class="n">dict_tokens_by_word_appearance</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
          '',
          '<span class="n">list_consecutive_tokens</span> <span class="o">=</span> <span class="p">[]</span>',
          '<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">key</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">dict_keys</span><span class="p">):</span>',
          '    <span class="c1"># Get the tokens of the word</span>',
          '    <span class="n">number_of_toneks_of_word</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">"tokens"</span><span class="p">])</span>',
          '',
          '    <span class="c1"># Get consecituve tokens</span>',
          '    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">number_of_toneks_of_word</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>',
          '        <span class="c1"># Get consecutive tokens</span>',
          '        <span class="n">consecutive_tokens</span> <span class="o">=</span> <span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">"tokens"</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">"tokens"</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>',
          '        <span class="c1"># Append the consecutive tokens to the list the number of times the word appears</span>',
          '        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">"count"</span><span class="p">]):</span>',
          '            <span class="n">list_consecutive_tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">consecutive_tokens</span><span class="p">)</span>',
          '<span class="c1"># Print the list of consecutive tokens</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"List of consecutive tokens: </span><span class="si">{</span><span class="n">list_consecutive_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="c1"># Get consecutive tokens with maximum frequency</span>',
          '<span class="n">dict_consecutive_tokens</span> <span class="o">=</span> <span class="p">{}</span>',
          '<span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">list_consecutive_tokens</span><span class="p">:</span>',
          '    <span class="c1"># Check if the token is already in the dictionary</span>',
          '    <span class="k">if</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">dict_consecutive_tokens</span><span class="p">:</span>',
          '        <span class="c1"># Increment the count of the token</span>',
          '        <span class="n">dict_consecutive_tokens</span><span class="p">[</span><span class="n">token</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
          '    ',
          '    <span class="c1"># If the token is not in the dictionary</span>',
          '    <span class="k">else</span><span class="p">:</span>',
          '        <span class="c1"># Add the token to the dictionary</span>',
          '        <span class="n">dict_consecutive_tokens</span><span class="p">[</span><span class="n">token</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>',
          '<span class="c1"># Print the dictionary of consecutive tokens</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Dictionary of consecutive tokens: </span><span class="si">{</span><span class="n">dict_consecutive_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="c1"># Get the consecutive token with maximum frequency</span>',
          '<span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="kc">None</span>',
          '<span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
          '    <span class="c1"># Get the token with maximum frequency</span>',
          '    <span class="n">consecutive_token</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dict_consecutive_tokens</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">dict_consecutive_tokens</span><span class="o">.</span><span class="n">get</span><span class="p">)</span>',
          '',
          '    <span class="c1"># Check if the token is already in the list of tokens</span>',
          '    <span class="k">if</span> <span class="n">consecutive_token</span> <span class="ow">in</span> <span class="n">initial_corpus_tokens</span><span class="p">:</span>',
          '        <span class="c1"># Remove token from the dictionary</span>',
          '        <span class="n">dict_consecutive_tokens</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">consecutive_token</span><span class="p">)</span>',
          '',
          '    <span class="c1"># If the token is not in the list of tokens</span>',
          '    <span class="k">else</span><span class="p">:</span>',
          '        <span class="c1"># Assign the token to the max_consecutive_token</span>',
          '        <span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="n">consecutive_token</span>',
          '        <span class="k">break</span>',
          '',
          '<span class="c1"># Print the consecutive token with maximum frequency</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Consecutive token with maximum frequency: </span><span class="si">{</span><span class="n">max_consecutive_token</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'List of consecutive tokens: [\'hu\', \'hu\', \'hu\', \'hu\', \'hu\', \'hu\', \'hu\', \'hu\', \'hu\', \'hu\', \'ug\', \'ug\', \'ug\', \'ug\', \'ug\', \'ug\', \'ug\', \'ug\', \'ug\', \'ug\', \'pu\', \'pu\', \'pu\', \'pu\', \'pu\', \'ug\', \'ug\', \'ug\', \'ug\', \'ug\', \'pu\', \'pu\', \'pu\', \'pu\', \'pu\', \'pu\', \'pu\', \'pu\', \'pu\', \'pu\', \'pu\', \'pu\', \'un\', \'un\', \'un\', \'un\', \'un\', \'un\', \'un\', \'un\', \'un\', \'un\', \'un\', \'un\', \'bu\', \'bu\', \'bu\', \'bu\', \'un\', \'un\', \'un\', \'un\', \'hu\', \'hu\', \'hu\', \'hu\', \'hu\', \'ug\', \'ug\', \'ug\', \'ug\', \'ug\', \'gs\', \'gs\', \'gs\', \'gs\', \'gs\']',
          'Dictionary of consecutive tokens: {\'hu\': 15, \'ug\': 20, \'pu\': 17, \'un\': 16, \'bu\': 4, \'gs\': 5}',
          'Consecutive token with maximum frequency: ug',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtivemos o par de tokens que aparece com mais frequ√™ncia. Vamos encapsular isso em uma fun√ß√£o porque vamos us√°-la com mais frequ√™ncia</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span> <span class="nf">get_consecutive_tokens_with_max_frequency</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">list_corpus_tokens</span><span class="p">):</span>',
      '          <span class="n">dict_keys</span> <span class="o">=</span> <span class="n">dict_tokens_by_word_appearance</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
      '      ',
      '          <span class="n">list_consecutive_tokens</span> <span class="o">=</span> <span class="p">[]</span>',
      '          <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">key</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">dict_keys</span><span class="p">):</span>',
      '              <span class="c1"># Get the tokens of the word</span>',
      '              <span class="n">number_of_toneks_of_word</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">"tokens"</span><span class="p">])</span>',
      '      ',
      '              <span class="c1"># Get consecituve tokens</span>',
      '              <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">number_of_toneks_of_word</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>',
      '                  <span class="c1"># Get consecutive tokens</span>',
      '                  <span class="n">consecutive_tokens</span> <span class="o">=</span> <span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">"tokens"</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">"tokens"</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>',
      '                  <span class="c1"># Append the consecutive tokens to the list</span>',
      '                  <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">"count"</span><span class="p">]):</span>',
      '                      <span class="n">list_consecutive_tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">consecutive_tokens</span><span class="p">)</span>',
      '      ',
      '          <span class="c1"># Get consecutive tokens with maximum frequency</span>',
      '          <span class="n">dict_consecutive_tokens</span> <span class="o">=</span> <span class="p">{}</span>',
      '          <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">list_consecutive_tokens</span><span class="p">:</span>',
      '              <span class="c1"># Check if the token is already in the dictionary</span>',
      '              <span class="k">if</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">dict_consecutive_tokens</span><span class="p">:</span>',
      '                  <span class="c1"># Increment the count of the token</span>',
      '                  <span class="n">dict_consecutive_tokens</span><span class="p">[</span><span class="n">token</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '              ',
      '              <span class="c1"># If the token is not in the dictionary</span>',
      '              <span class="k">else</span><span class="p">:</span>',
      '                  <span class="c1"># Add the token to the dictionary</span>',
      '                  <span class="n">dict_consecutive_tokens</span><span class="p">[</span><span class="n">token</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>',
      '      ',
      '          <span class="c1"># Get the consecutive token with maximum frequency</span>',
      '          <span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="kc">None</span>',
      '          <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
      '              <span class="c1"># Get the token with maximum frequency</span>',
      '              <span class="n">consecutive_token</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dict_consecutive_tokens</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">dict_consecutive_tokens</span><span class="o">.</span><span class="n">get</span><span class="p">)</span>',
      '      ',
      '              <span class="c1"># Check if the token is already in the list of tokens</span>',
      '              <span class="k">if</span> <span class="n">consecutive_token</span> <span class="ow">in</span> <span class="n">list_corpus_tokens</span><span class="p">:</span>',
      '                  <span class="c1"># Remove token from the dictionary</span>',
      '                  <span class="n">dict_consecutive_tokens</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">consecutive_token</span><span class="p">)</span>',
      '      ',
      '              <span class="c1"># If the token is not in the list of tokens</span>',
      '              <span class="k">else</span><span class="p">:</span>',
      '                  <span class="c1"># Assign the token to the max_consecutive_token</span>',
      '                  <span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="n">consecutive_token</span>',
      '                  <span class="k">break</span>',
      '      ',
      '          <span class="k">return</span> <span class="n">max_consecutive_token</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>




















































      
      <section class="section-block-markdown-cell">
      <p>Verificamos se o resultado √© o mesmo de antes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">get_consecutive_tokens_with_max_frequency</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">list_corpus_tokens</span><span class="p">):</span>',
          '    <span class="n">dict_keys</span> <span class="o">=</span> <span class="n">dict_tokens_by_word_appearance</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
          '',
          '    <span class="n">list_consecutive_tokens</span> <span class="o">=</span> <span class="p">[]</span>',
          '    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">key</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">dict_keys</span><span class="p">):</span>',
          '        <span class="c1"># Get the tokens of the word</span>',
          '        <span class="n">number_of_toneks_of_word</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">"tokens"</span><span class="p">])</span>',
          '',
          '        <span class="c1"># Get consecituve tokens</span>',
          '        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">number_of_toneks_of_word</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>',
          '            <span class="c1"># Get consecutive tokens</span>',
          '            <span class="n">consecutive_tokens</span> <span class="o">=</span> <span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">"tokens"</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">"tokens"</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>',
          '            <span class="c1"># Append the consecutive tokens to the list</span>',
          '            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">"count"</span><span class="p">]):</span>',
          '                <span class="n">list_consecutive_tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">consecutive_tokens</span><span class="p">)</span>',
          '',
          '    <span class="c1"># Get consecutive tokens with maximum frequency</span>',
          '    <span class="n">dict_consecutive_tokens</span> <span class="o">=</span> <span class="p">{}</span>',
          '    <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">list_consecutive_tokens</span><span class="p">:</span>',
          '        <span class="c1"># Check if the token is already in the dictionary</span>',
          '        <span class="k">if</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">dict_consecutive_tokens</span><span class="p">:</span>',
          '            <span class="c1"># Increment the count of the token</span>',
          '            <span class="n">dict_consecutive_tokens</span><span class="p">[</span><span class="n">token</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
          '        ',
          '        <span class="c1"># If the token is not in the dictionary</span>',
          '        <span class="k">else</span><span class="p">:</span>',
          '            <span class="c1"># Add the token to the dictionary</span>',
          '            <span class="n">dict_consecutive_tokens</span><span class="p">[</span><span class="n">token</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>',
          '',
          '    <span class="c1"># Get the consecutive token with maximum frequency</span>',
          '    <span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="kc">None</span>',
          '    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
          '        <span class="c1"># Get the token with maximum frequency</span>',
          '        <span class="n">consecutive_token</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dict_consecutive_tokens</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">dict_consecutive_tokens</span><span class="o">.</span><span class="n">get</span><span class="p">)</span>',
          '',
          '        <span class="c1"># Check if the token is already in the list of tokens</span>',
          '        <span class="k">if</span> <span class="n">consecutive_token</span> <span class="ow">in</span> <span class="n">list_corpus_tokens</span><span class="p">:</span>',
          '            <span class="c1"># Remove token from the dictionary</span>',
          '            <span class="n">dict_consecutive_tokens</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">consecutive_token</span><span class="p">)</span>',
          '',
          '        <span class="c1"># If the token is not in the list of tokens</span>',
          '        <span class="k">else</span><span class="p">:</span>',
          '            <span class="c1"># Assign the token to the max_consecutive_token</span>',
          '            <span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="n">consecutive_token</span>',
          '            <span class="k">break</span>',
          '',
          '    <span class="k">return</span> <span class="n">max_consecutive_token</span>',
          '</span><span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="n">get_consecutive_tokens_with_max_frequency</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">initial_corpus_tokens</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Consecutive token with maximum frequency: </span><span class="si">{</span><span class="n">max_consecutive_token</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Consecutive token with maximum frequency: ug',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que sim</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora, nosso corpus de token pode ser modificado com a adi√ß√£o do token <code>ug</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># new_corpus_tokens = initial_corpus_tokens + max_consecutive_token</span>',
          '<span class="n">new_corpus_tokens</span> <span class="o">=</span> <span class="n">initial_corpus_tokens</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>',
          '<span class="n">new_corpus_tokens</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Initial corpus tokens: </span><span class="si">{</span><span class="n">initial_corpus_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"New corpus tokens: </span><span class="si">{</span><span class="n">new_corpus_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Initial corpus tokens: {\'p\', \'n\', \'u\', \'s\', \'h\', \'g\', \'b\'}',
          'New corpus tokens: {\'p\', \'n\', \'ug\', \'g\', \'b\', \'u\', \'s\', \'h\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Colocamos isso tamb√©m em uma fun√ß√£o</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span> <span class="nf">get_new_corpus_tokens</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">,</span> <span class="n">initial_corpus_tokens</span><span class="p">):</span>',
      '          <span class="n">new_corpus_tokens</span> <span class="o">=</span> <span class="n">initial_corpus_tokens</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>',
      '          <span class="n">new_corpus_tokens</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">)</span>',
      '          <span class="k">return</span> <span class="n">new_corpus_tokens</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>









      
      <section class="section-block-markdown-cell">
      <p>Verificaremos novamente se estamos recebendo o mesmo que antes.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">get_new_corpus_tokens</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">,</span> <span class="n">initial_corpus_tokens</span><span class="p">):</span>',
          '    <span class="n">new_corpus_tokens</span> <span class="o">=</span> <span class="n">initial_corpus_tokens</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>',
          '    <span class="n">new_corpus_tokens</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">)</span>',
          '    <span class="k">return</span> <span class="n">new_corpus_tokens</span>',
          '</span><span class="n">new_corpus_tokens</span> <span class="o">=</span> <span class="n">get_new_corpus_tokens</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">,</span> <span class="n">initial_corpus_tokens</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Initial corpus tokens: </span><span class="si">{</span><span class="n">initial_corpus_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"New corpus tokens: </span><span class="si">{</span><span class="n">new_corpus_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Initial corpus tokens: {\'p\', \'n\', \'u\', \'s\', \'h\', \'g\', \'b\'}',
          'New corpus tokens: {\'p\', \'n\', \'ug\', \'g\', \'b\', \'u\', \'s\', \'h\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que sim</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora vamos modificar o dicion√°rio no qual aparecem as palavras, os tokens e o n√∫mero de vezes que eles aparecem com o novo token.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">import</span> <span class="nn">copy</span>
      
      <span class="n">dict_keys</span> <span class="o">=</span> <span class="n">dict_tokens_by_word_appearance</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
      <span class="n">dict_tokens_by_word_appearance_tmp</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">)</span>
      
      <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">dict_keys</span><span class="p">:</span>
          <span class="c1"># Check if the new token is in the word</span>
          <span class="k">if</span> <span class="n">max_consecutive_token</span> <span class="ow">in</span> <span class="n">key</span><span class="p">:</span>
              <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Token </span><span class="si">{opening_brace}</span><span class="n">max_consecutive_token</span><span class="si">{closing_brace}</span><span class="s2"> is in the word </span><span class="si">{opening_brace}</span><span class="n">key</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      
              <span class="c1"># Add the new token to the word tokens</span>
              <span class="n">dict_tokens_by_word_appearance_tmp</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">"tokens"</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">)</span>
      
              <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"New tokens of the word </span><span class="si">{opening_brace}</span><span class="n">key</span><span class="si">{closing_brace}</span><span class="s2">: </span><span class="si">{opening_brace}</span><span class="n">dict_tokens_by_word_appearance_tmp</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s1">'tokens'</span><span class="p">]</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      
      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Initial tokens by word appearance: </span><span class="si">{opening_brace}</span><span class="n">dict_tokens_by_word_appearance</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"New tokens by word appearance: "</span><span class="p">)</span>
      <span class="n">dict_tokens_by_word_appearance_tmp</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>Token ug is in the word hug
      New tokens of the word hug: ['h', 'u', 'g', 'ug']
      Token ug is in the word pug
      New tokens of the word pug: ['p', 'u', 'g', 'ug']
      Token ug is in the word hugs
      New tokens of the word hugs: ['h', 'u', 'g', 's', 'ug']
      Initial tokens by word appearance: {opening_brace}'hug': {opening_brace}'count': 10, 'tokens': ['h', 'u', 'g']{closing_brace}, 'pug': {opening_brace}'count': 5, 'tokens': ['p', 'u', 'g']{closing_brace}, 'pun': {opening_brace}'count': 12, 'tokens': ['p', 'u', 'n']{closing_brace}, 'bun': {opening_brace}'count': 4, 'tokens': ['b', 'u', 'n']{closing_brace}, 'hugs': {opening_brace}'count': 5, 'tokens': ['h', 'u', 'g', 's']{closing_brace}{closing_brace}
      New tokens by word appearance: 
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[32]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'hug': {opening_brace}'count': 10, 'tokens': ['h', 'u', 'g', 'ug']{closing_brace},
       'pug': {opening_brace}'count': 5, 'tokens': ['p', 'u', 'g', 'ug']{closing_brace},
       'pun': {opening_brace}'count': 12, 'tokens': ['p', 'u', 'n']{closing_brace},
       'bun': {opening_brace}'count': 4, 'tokens': ['b', 'u', 'n']{closing_brace},
       'hugs': {opening_brace}'count': 5, 'tokens': ['h', 'u', 'g', 's', 'ug]']{closing_brace}{closing_brace},</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Colocamos isso em uma fun√ß√£o</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">copy</span>',
      '      ',
      '      <span class="n">dict_keys</span> <span class="o">=</span> <span class="n">dict_tokens_by_word_appearance</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
      '      <span class="n">dict_tokens_by_word_appearance_tmp</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">)</span>',
      '      ',
      '      <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">dict_keys</span><span class="p">:</span>',
      '          <span class="c1"># Check if the new token is in the word</span>',
      '          <span class="k">if</span> <span class="n">max_consecutive_token</span> <span class="ow">in</span> <span class="n">key</span><span class="p">:</span>',
      '              <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Token </span><span class="si">{</span><span class="n">max_consecutive_token</span><span class="si">}</span><span class="s2"> is in the word </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      '      ',
      '              <span class="c1"># Add the new token to the word tokens</span>',
      '              <span class="n">dict_tokens_by_word_appearance_tmp</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">"tokens"</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">)</span>',
      '      ',
      '              <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"New tokens of the word </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">dict_tokens_by_word_appearance_tmp</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s1">\'tokens\'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      '      ',
      '      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Initial tokens by word appearance: </span><span class="si">{</span><span class="n">dict_tokens_by_word_appearance</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      '      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"New tokens by word appearance: "</span><span class="p">)</span>',
      '      <span class="n">dict_tokens_by_word_appearance_tmp</span>',
      '<span></span><span class="k">def</span> <span class="nf">update_tokens_by_word_appearance</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">max_consecutive_token</span><span class="p">):</span>',
      '          <span class="n">dict_tokens_by_word_appearance_tmp</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">)</span>',
      '          <span class="n">dict_keys</span> <span class="o">=</span> <span class="n">dict_tokens_by_word_appearance_tmp</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
      '      ',
      '          <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">dict_keys</span><span class="p">:</span>',
      '              <span class="c1"># Check if the new token is in the word</span>',
      '              <span class="k">if</span> <span class="n">max_consecutive_token</span> <span class="ow">in</span> <span class="n">key</span><span class="p">:</span>',
      '                  <span class="c1"># Add the new token to the word tokens</span>',
      '                  <span class="n">dict_tokens_by_word_appearance_tmp</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">"tokens"</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">)</span>',
      '      ',
      '          <span class="k">return</span> <span class="n">dict_tokens_by_word_appearance_tmp</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
















      
      <section class="section-block-markdown-cell">
      <p>Verificamos se est√° tudo bem</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dict_tokens_by_word_appearance</span> <span class="o">=</span> <span class="n">update_tokens_by_word_appearance</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">max_consecutive_token</span><span class="p">)</span>
      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"New tokens by word appearance: "</span><span class="p">)</span>
      <span class="n">dict_tokens_by_word_appearance</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>New tokens by word appearance: 
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[34]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'hug': {opening_brace}'count': 10, 'tokens': ['h', 'u', 'g', 'ug']{closing_brace},
       'pug': {opening_brace}'count': 5, 'tokens': ['p', 'u', 'g', 'ug']{closing_brace},
       'pun': {opening_brace}'count': 12, 'tokens': ['p', 'u', 'n']{closing_brace},
       'bun': {opening_brace}'count': 4, 'tokens': ['b', 'u', 'n']{closing_brace},
       'hugs': {opening_brace}'count': 5, 'tokens': ['h', 'u', 'g', 's', 'ug]']{closing_brace}{closing_brace},</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Em resumo, em uma primeira itera√ß√£o, passamos de um corpus de tokens <code>s, g, h, u, n, p, b</code> para o novo corpus de tokens <code>h, u, n, p, s, g, b, ug</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora realizamos uma segunda itera√ß√£o, obtendo o par de tokens consecutivos que aparecem com mais frequ√™ncia no dicion√°rio.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">copy</span>',
          '',
          '<span class="n">dict_keys</span> <span class="o">=</span> <span class="n">dict_tokens_by_word_appearance</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
          '<span class="n">dict_tokens_by_word_appearance_tmp</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">)</span>',
          '',
          '<span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">dict_keys</span><span class="p">:</span>',
          '    <span class="c1"># Check if the new token is in the word</span>',
          '    <span class="k">if</span> <span class="n">max_consecutive_token</span> <span class="ow">in</span> <span class="n">key</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Token </span><span class="si">{</span><span class="n">max_consecutive_token</span><span class="si">}</span><span class="s2"> is in the word </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '        <span class="c1"># Add the new token to the word tokens</span>',
          '        <span class="n">dict_tokens_by_word_appearance_tmp</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">"tokens"</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">)</span>',
          '',
          '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"New tokens of the word </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">dict_tokens_by_word_appearance_tmp</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s1">\'tokens\'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Initial tokens by word appearance: </span><span class="si">{</span><span class="n">dict_tokens_by_word_appearance</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"New tokens by word appearance: "</span><span class="p">)</span>',
          '<span class="n">dict_tokens_by_word_appearance_tmp</span>',
          '</span><span class="k">def</span> <span class="nf">update_tokens_by_word_appearance</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">max_consecutive_token</span><span class="p">):</span>',
          '    <span class="n">dict_tokens_by_word_appearance_tmp</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">)</span>',
          '    <span class="n">dict_keys</span> <span class="o">=</span> <span class="n">dict_tokens_by_word_appearance_tmp</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
          '',
          '    <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">dict_keys</span><span class="p">:</span>',
          '        <span class="c1"># Check if the new token is in the word</span>',
          '        <span class="k">if</span> <span class="n">max_consecutive_token</span> <span class="ow">in</span> <span class="n">key</span><span class="p">:</span>',
          '            <span class="c1"># Add the new token to the word tokens</span>',
          '            <span class="n">dict_tokens_by_word_appearance_tmp</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="s2">"tokens"</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">)</span>',
          '',
          '    <span class="k">return</span> <span class="n">dict_tokens_by_word_appearance_tmp</span>',
          '</span><span class="n">dict_tokens_by_word_appearance</span> <span class="o">=</span> <span class="n">update_tokens_by_word_appearance</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">max_consecutive_token</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"New tokens by word appearance: "</span><span class="p">)</span>',
          '<span class="n">dict_tokens_by_word_appearance</span>',
          '</span><span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="n">get_consecutive_tokens_with_max_frequency</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">new_corpus_tokens</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Consecutive token with maximum frequency: </span><span class="si">{</span><span class="n">max_consecutive_token</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Token ug is in the word hug',
          'New tokens of the word hug: [\'h\', \'u\', \'g\', \'ug\']',
          'Token ug is in the word pug',
          'New tokens of the word pug: [\'p\', \'u\', \'g\', \'ug\']',
          'Token ug is in the word hugs',
          'New tokens of the word hugs: [\'h\', \'u\', \'g\', \'s\', \'ug\']',
          'Initial tokens by word appearance: {\'hug\': {\'count\': 10, \'tokens\': [\'h\', \'u\', \'g\']}, \'pug\': {\'count\': 5, \'tokens\': [\'p\', \'u\', \'g\']}, \'pun\': {\'count\': 12, \'tokens\': [\'p\', \'u\', \'n\']}, \'bun\': {\'count\': 4, \'tokens\': [\'b\', \'u\', \'n\']}, \'hugs\': {\'count\': 5, \'tokens\': [\'h\', \'u\', \'g\', \'s\']}}',
          'New tokens by word appearance: ',
          'New tokens by word appearance: ',
          'Consecutive token with maximum frequency: pu',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtemos o novo corpus de tokens</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">corpus_tokens</span> <span class="o">=</span> <span class="n">get_new_corpus_tokens</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">,</span> <span class="n">new_corpus_tokens</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Initial corpus tokens: </span><span class="si">{</span><span class="n">new_corpus_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"New corpus tokens: </span><span class="si">{</span><span class="n">corpus_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Initial corpus tokens: {\'p\', \'n\', \'ug\', \'g\', \'b\', \'u\', \'s\', \'h\'}',
          'New corpus tokens: {\'p\', \'n\', \'pu\', \'u\', \'s\', \'h\', \'ug\', \'g\', \'b\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>E temos o novo dicion√°rio mostrando as palavras, os tokens e o n√∫mero de vezes que eles aparecem.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">dict_tokens_by_word_appearance</span> <span class="o">=</span> <span class="n">update_tokens_by_word_appearance</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">max_consecutive_token</span><span class="p">)</span>
      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"New tokens by word appearance: "</span><span class="p">)</span>
      <span class="n">dict_tokens_by_word_appearance</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>New tokens by word appearance: 
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[37]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'hug': {opening_brace}'count': 10, 'tokens': ['h', 'u', 'g', 'ug']{closing_brace},
       'pug': {opening_brace}'count': 5, 'tokens': ['p', 'u', 'g', 'ug', 'pu']{closing_brace},
       'pun': {opening_brace}'count': 12, 'tokens': ['p', 'u', 'n', 'pu']{closing_brace},
       'bun': {opening_brace}'count': 4, 'tokens': ['b', 'u', 'n']{closing_brace},
       'hugs': {opening_brace}'count': 5, 'tokens': ['h', 'u', 'g', 's', 'ug]']{closing_brace}{closing_brace},</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora, podemos continuar at√© termos um corpus de tokens com o tamanho desejado. Vamos criar um corpus de 15 tokens.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dict_tokens_by_word_appearance</span> <span class="o">=</span> <span class="n">update_tokens_by_word_appearance</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">max_consecutive_token</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"New tokens by word appearance: "</span><span class="p">)</span>',
          '<span class="n">dict_tokens_by_word_appearance</span>',
          '</span><span class="n">len_corpus_tokens</span> <span class="o">=</span> <span class="mi">15</span>',
          '',
          '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">len_corpus_tokens</span><span class="p">:</span>',
          '    <span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="n">get_consecutive_tokens_with_max_frequency</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">corpus_tokens</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Consecutive token with maximum frequency: </span><span class="si">{</span><span class="n">max_consecutive_token</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '    <span class="c1"># If there are no more consecutive tokens break the loop</span>',
          '    <span class="k">if</span> <span class="n">max_consecutive_token</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>',
          '        <span class="k">break</span>',
          '',
          '    <span class="n">corpus_tokens</span> <span class="o">=</span> <span class="n">get_new_corpus_tokens</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">,</span> <span class="n">corpus_tokens</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"New corpus tokens: </span><span class="si">{</span><span class="n">corpus_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '    <span class="n">dict_tokens_by_word_appearance</span> <span class="o">=</span> <span class="n">update_tokens_by_word_appearance</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">max_consecutive_token</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"New tokens by word appearance: </span><span class="si">{</span><span class="n">dict_tokens_by_word_appearance</span><span class="si">}</span><span class="se">\\n</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'New tokens by word appearance: ',
          'Consecutive token with maximum frequency: un',
          'New corpus tokens: {\'p\', \'n\', \'pu\', \'un\', \'u\', \'s\', \'h\', \'ug\', \'g\', \'b\'}',
          'New tokens by word appearance: {\'hug\': {\'count\': 10, \'tokens\': [\'h\', \'u\', \'g\', \'ug\']}, \'pug\': {\'count\': 5, \'tokens\': [\'p\', \'u\', \'g\', \'ug\', \'pu\']}, \'pun\': {\'count\': 12, \'tokens\': [\'p\', \'u\', \'n\', \'pu\', \'un\']}, \'bun\': {\'count\': 4, \'tokens\': [\'b\', \'u\', \'n\', \'un\']}, \'hugs\': {\'count\': 5, \'tokens\': [\'h\', \'u\', \'g\', \'s\', \'ug\']}}',
          'Consecutive token with maximum frequency: hu',
          'New corpus tokens: {\'p\', \'hu\', \'n\', \'pu\', \'un\', \'u\', \'s\', \'h\', \'ug\', \'g\', \'b\'}',
          'New tokens by word appearance: {\'hug\': {\'count\': 10, \'tokens\': [\'h\', \'u\', \'g\', \'ug\', \'hu\']}, \'pug\': {\'count\': 5, \'tokens\': [\'p\', \'u\', \'g\', \'ug\', \'pu\']}, \'pun\': {\'count\': 12, \'tokens\': [\'p\', \'u\', \'n\', \'pu\', \'un\']}, \'bun\': {\'count\': 4, \'tokens\': [\'b\', \'u\', \'n\', \'un\']}, \'hugs\': {\'count\': 5, \'tokens\': [\'h\', \'u\', \'g\', \'s\', \'ug\', \'hu\']}}',
          'Consecutive token with maximum frequency: gug',
          'New corpus tokens: {\'p\', \'hu\', \'n\', \'pu\', \'un\', \'gug\', \'u\', \'s\', \'h\', \'ug\', \'g\', \'b\'}',
          'New tokens by word appearance: {\'hug\': {\'count\': 10, \'tokens\': [\'h\', \'u\', \'g\', \'ug\', \'hu\']}, \'pug\': {\'count\': 5, \'tokens\': [\'p\', \'u\', \'g\', \'ug\', \'pu\']}, \'pun\': {\'count\': 12, \'tokens\': [\'p\', \'u\', \'n\', \'pu\', \'un\']}, \'bun\': {\'count\': 4, \'tokens\': [\'b\', \'u\', \'n\', \'un\']}, \'hugs\': {\'count\': 5, \'tokens\': [\'h\', \'u\', \'g\', \'s\', \'ug\', \'hu\']}}',
          'Consecutive token with maximum frequency: ughu',
          'New corpus tokens: {\'p\', \'hu\', \'n\', \'pu\', \'un\', \'gug\', \'u\', \'s\', \'h\', \'ughu\', \'ug\', \'g\', \'b\'}',
          'New tokens by word appearance: {\'hug\': {\'count\': 10, \'tokens\': [\'h\', \'u\', \'g\', \'ug\', \'hu\']}, \'pug\': {\'count\': 5, \'tokens\': [\'p\', \'u\', \'g\', \'ug\', \'pu\']}, \'pun\': {\'count\': 12, \'tokens\': [\'p\', \'u\', \'n\', \'pu\', \'un\']}, \'bun\': {\'count\': 4, \'tokens\': [\'b\', \'u\', \'n\', \'un\']}, \'hugs\': {\'count\': 5, \'tokens\': [\'h\', \'u\', \'g\', \'s\', \'ug\', \'hu\']}}',
          'Consecutive token with maximum frequency: npu',
          'New corpus tokens: {\'p\', \'hu\', \'n\', \'npu\', \'pu\', \'un\', \'gug\', \'u\', \'s\', \'h\', \'ughu\', \'ug\', \'g\', \'b\'}',
          'New tokens by word appearance: {\'hug\': {\'count\': 10, \'tokens\': [\'h\', \'u\', \'g\', \'ug\', \'hu\']}, \'pug\': {\'count\': 5, \'tokens\': [\'p\', \'u\', \'g\', \'ug\', \'pu\']}, \'pun\': {\'count\': 12, \'tokens\': [\'p\', \'u\', \'n\', \'pu\', \'un\']}, \'bun\': {\'count\': 4, \'tokens\': [\'b\', \'u\', \'n\', \'un\']}, \'hugs\': {\'count\': 5, \'tokens\': [\'h\', \'u\', \'g\', \'s\', \'ug\', \'hu\']}}',
          'Consecutive token with maximum frequency: puun',
          'New corpus tokens: {\'p\', \'hu\', \'n\', \'npu\', \'pu\', \'un\', \'gug\', \'puun\', \'u\', \'s\', \'h\', \'ughu\', \'ug\', \'g\', \'b\'}',
          'New tokens by word appearance: {\'hug\': {\'count\': 10, \'tokens\': [\'h\', \'u\', \'g\', \'ug\', \'hu\']}, \'pug\': {\'count\': 5, \'tokens\': [\'p\', \'u\', \'g\', \'ug\', \'pu\']}, \'pun\': {\'count\': 12, \'tokens\': [\'p\', \'u\', \'n\', \'pu\', \'un\']}, \'bun\': {\'count\': 4, \'tokens\': [\'b\', \'u\', \'n\', \'un\']}, \'hugs\': {\'count\': 5, \'tokens\': [\'h\', \'u\', \'g\', \'s\', \'ug\', \'hu\']}}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora que j√° vimos como treinar o tokenizador BPE, vamos trein√°-lo do zero para consolidar nosso conhecimento.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">corpus_words</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"hug"</span><span class="p">,</span> <span class="s2">"pug"</span><span class="p">,</span> <span class="s2">"pun"</span><span class="p">,</span> <span class="s2">"bun"</span><span class="p">,</span> <span class="s2">"hugs"</span><span class="p">]</span>',
          '',
          '<span class="c1"># Concatenate all the words in the corpus</span>',
          '<span class="n">initial_corpus_tokens</span> <span class="o">=</span> <span class="s2">""</span>',
          '<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">corpus_words</span><span class="p">:</span>',
          '    <span class="n">initial_corpus_tokens</span> <span class="o">+=</span> <span class="n">word</span>',
          '',
          '<span class="c1"># Convert the concatenated string to a set of tokens to get unique tokens</span>',
          '<span class="n">corpus_tokens</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">initial_corpus_tokens</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Corpus words: </span><span class="si">{</span><span class="n">corpus_words</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Initial corpus tokens: </span><span class="si">{</span><span class="n">corpus_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Number of initial corpus tokens: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Corpus words: [\'hug\', \'pug\', \'pun\', \'bun\', \'hugs\']',
          'Initial corpus tokens: {\'p\', \'n\', \'u\', \'s\', \'h\', \'g\', \'b\'}',
          'Number of initial corpus tokens: 7',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">corpus</span> <span class="o">=</span> <span class="p">[</span>',
          '    <span class="s2">"hug hug hug pun pun bun hugs"</span><span class="p">,</span>',
          '    <span class="s2">"hug hug pug pug pun pun hugs"</span><span class="p">,</span>',
          '    <span class="s2">"hug hug pug pug pun pun pun pun hugs"</span><span class="p">,</span>',
          '    <span class="s2">"pug pun pun pun bun hugs"</span><span class="p">,</span>',
          '    <span class="s2">"hug hug hug pun bun bun hugs"</span><span class="p">,</span>',
          '<span class="p">]</span>',
          '',
          '<span class="n">num_hug</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">num_pug</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">num_pun</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">num_bun</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">num_hugs</span> <span class="o">=</span> <span class="mi">0</span>',
          '',
          '<span class="k">for</span> <span class="n">sentence</span> <span class="ow">in</span> <span class="n">corpus</span><span class="p">:</span>',
          '    <span class="n">words</span> <span class="o">=</span> <span class="n">sentence</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">" "</span><span class="p">)</span>',
          '    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>',
          '        <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">"hug"</span><span class="p">:</span>',
          '            <span class="n">num_hug</span> <span class="o">+=</span> <span class="mi">1</span>',
          '        <span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">"pug"</span><span class="p">:</span>',
          '            <span class="n">num_pug</span> <span class="o">+=</span> <span class="mi">1</span>',
          '        <span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">"pun"</span><span class="p">:</span>',
          '            <span class="n">num_pun</span> <span class="o">+=</span> <span class="mi">1</span>',
          '        <span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">"bun"</span><span class="p">:</span>',
          '            <span class="n">num_bun</span> <span class="o">+=</span> <span class="mi">1</span>',
          '        <span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s2">"hugs"</span><span class="p">:</span>',
          '            <span class="n">num_hugs</span> <span class="o">+=</span> <span class="mi">1</span>',
          '',
          '<span class="n">dict_tokens_by_word_appearance</span> <span class="o">=</span> <span class="p">{</span>',
          '    <span class="s2">"hug"</span><span class="p">:</span>',
          '        <span class="p">{</span>',
          '            <span class="s2">"count"</span><span class="p">:</span> <span class="n">num_hug</span><span class="p">,</span>',
          '            <span class="s2">"tokens"</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">"hug"</span><span class="p">],</span>',
          '        <span class="p">},</span>',
          '    <span class="s2">"pug"</span><span class="p">:</span>',
          '        <span class="p">{</span>',
          '            <span class="s2">"count"</span><span class="p">:</span> <span class="n">num_pug</span><span class="p">,</span>',
          '            <span class="s2">"tokens"</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">"pug"</span><span class="p">],</span>',
          '        <span class="p">},</span>',
          '    <span class="s2">"pun"</span><span class="p">:</span>',
          '        <span class="p">{</span>',
          '            <span class="s2">"count"</span><span class="p">:</span> <span class="n">num_pun</span><span class="p">,</span>',
          '            <span class="s2">"tokens"</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">"pun"</span><span class="p">],</span>',
          '        <span class="p">},</span>',
          '    <span class="s2">"bun"</span><span class="p">:</span>',
          '        <span class="p">{</span>',
          '            <span class="s2">"count"</span><span class="p">:</span> <span class="n">num_bun</span><span class="p">,</span>',
          '            <span class="s2">"tokens"</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">"bun"</span><span class="p">],</span>',
          '        <span class="p">},</span>',
          '    <span class="s2">"hugs"</span><span class="p">:</span>',
          '        <span class="p">{</span>',
          '            <span class="s2">"count"</span><span class="p">:</span> <span class="n">num_hugs</span><span class="p">,</span>',
          '            <span class="s2">"tokens"</span><span class="p">:</span> <span class="p">[</span><span class="n">character</span> <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="s2">"hugs"</span><span class="p">],</span>',
          '        <span class="p">},</span>',
          '<span class="p">}</span>',
          '',
          '<span class="n">dict_tokens_by_word_appearance</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'hug\': {\'count\': 10, \'tokens\': [\'h\', \'u\', \'g\']},',
          ' \'pug\': {\'count\': 5, \'tokens\': [\'p\', \'u\', \'g\']},',
          ' \'pun\': {\'count\': 12, \'tokens\': [\'p\', \'u\', \'n\']},',
          ' \'bun\': {\'count\': 4, \'tokens\': [\'b\', \'u\', \'n\']},',
          ' \'hugs\': {\'count\': 5, \'tokens\': [\'h\', \'u\', \'g\', \'s\']}}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>N√≥s o treinamos do zero para obter um corpus de 15 tokens.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">len_corpus_tokens</span> <span class="o">=</span> <span class="mi">15</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Initial corpus tokens: (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">)</span><span class="si">}</span><span class="s2">) </span><span class="si">{</span><span class="n">corpus_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">len_corpus_tokens</span><span class="p">:</span>',
          '    <span class="n">max_consecutive_token</span> <span class="o">=</span> <span class="n">get_consecutive_tokens_with_max_frequency</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">corpus_tokens</span><span class="p">)</span>',
          '',
          '    <span class="c1"># If there are no more consecutive tokens break the loop</span>',
          '    <span class="k">if</span> <span class="n">max_consecutive_token</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>',
          '        <span class="k">break</span>',
          '',
          '    <span class="n">corpus_tokens</span> <span class="o">=</span> <span class="n">get_new_corpus_tokens</span><span class="p">(</span><span class="n">max_consecutive_token</span><span class="p">,</span> <span class="n">corpus_tokens</span><span class="p">)</span>',
          '',
          '    <span class="n">dict_tokens_by_word_appearance</span> <span class="o">=</span> <span class="n">update_tokens_by_word_appearance</span><span class="p">(</span><span class="n">dict_tokens_by_word_appearance</span><span class="p">,</span> <span class="n">max_consecutive_token</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"New corpus tokens: (</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">)</span><span class="si">}</span><span class="s2">) </span><span class="si">{</span><span class="n">corpus_tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Initial corpus tokens: (7) {\'p\', \'n\', \'u\', \'s\', \'h\', \'g\', \'b\'}',
          'New corpus tokens: (15) {\'p\', \'hu\', \'n\', \'npu\', \'pu\', \'un\', \'gug\', \'puun\', \'u\', \'s\', \'h\', \'ughu\', \'ug\', \'g\', \'b\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Tokeniza%C3%A7%C3%A3o">Tokeniza√ß√£o<a class="anchor-link" href="#Tokeniza%C3%A7%C3%A3o"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 10" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se agora quis√©ssemos tokenizar, primeiro ter√≠amos que criar um vocabul√°rio, ou seja, atribuir um ID a cada token.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">vocab</span> <span class="o">=</span> <span class="p">{opening_brace}{closing_brace}</span>
      <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">token</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">):</span>
          <span class="n">vocab</span><span class="p">[</span><span class="n">token</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
      
      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Vocabulary: "</span><span class="p">)</span>
      <span class="n">vocab</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>Vocabulary: 
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[54]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'p': 0,
       'hu': 1,
       'sug': 2,
       'npu': 3,
       'ugpu': 4,
       'gug': 5,
       'u': 6,
       'ug': 7,
       'ughu': 8,
       'n': 9,
       'pu': 10,
       'un': 11,
       'puun': 12,
       's': 13,
       'h': 14,
       'gs': 15,
       'g': 16,
       'b': 17}</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>N√≥s o colocamos em uma fun√ß√£o</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">vocab</span> <span class="o">=</span> <span class="p">{}</span>',
      '      <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">token</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">):</span>',
      '          <span class="n">vocab</span><span class="p">[</span><span class="n">token</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>',
      '      ',
      '      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Vocabulary: "</span><span class="p">)</span>',
      '      <span class="n">vocab</span>',
      '<span></span><span class="k">def</span> <span class="nf">get_vocabulary</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">):</span>',
      '          <span class="n">vocab</span> <span class="o">=</span> <span class="p">{}</span>',
      '          <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">token</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">):</span>',
      '              <span class="n">vocab</span><span class="p">[</span><span class="n">token</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>',
      '          <span class="k">return</span> <span class="n">vocab</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>










      
      <section class="section-block-markdown-cell">
      <p>Compromissos corretos</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">vocab</span> <span class="o">=</span> <span class="n">get_vocabulary</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">)</span>
      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Vocabulary: "</span><span class="p">)</span>
      <span class="n">vocab</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>Vocabulary: 
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[56]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'p': 0,
       'hu': 1,
       'sug': 2,
       'npu': 3,
       'ugpu': 4,
       'gug': 5,
       'u': 6,
       'ug': 7,
       'ughu': 8,
       'n': 9,
       'pu': 10,
       'un': 11,
       'puun': 12,
       's': 13,
       'h': 14,
       'gs': 15,
       'g': 16,
       'b': 17}</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se agora quisermos tokenizar a palavra <code>bug</code>, podemos fazer o seguinte</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">vocab</span> <span class="o">=</span> <span class="p">{}</span>',
          '<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">token</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">):</span>',
          '    <span class="n">vocab</span><span class="p">[</span><span class="n">token</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Vocabulary: "</span><span class="p">)</span>',
          '<span class="n">vocab</span>',
          '</span><span class="k">def</span> <span class="nf">get_vocabulary</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">):</span>',
          '    <span class="n">vocab</span> <span class="o">=</span> <span class="p">{}</span>',
          '    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">token</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">):</span>',
          '        <span class="n">vocab</span><span class="p">[</span><span class="n">token</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>',
          '    <span class="k">return</span> <span class="n">vocab</span>',
          '</span><span class="n">vocab</span> <span class="o">=</span> <span class="n">get_vocabulary</span><span class="p">(</span><span class="n">corpus_tokens</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Vocabulary: "</span><span class="p">)</span>',
          '<span class="n">vocab</span>',
          '</span><span class="n">word</span> <span class="o">=</span> <span class="s1">\'bug\'</span>',
          '',
          '<span class="c1"># Get the maximum length of tokens</span>',
          '<span class="n">max_len</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">token</span><span class="p">)</span> <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">vocab</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Maximum length of tokens: </span><span class="si">{</span><span class="n">max_len</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="c1"># Create a empty list of tokens</span>',
          '<span class="n">tokens</span> <span class="o">=</span> <span class="p">[]</span>',
          '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>',
          '    <span class="c1"># Flag to check if the token is found</span>',
          '    <span class="n">found</span> <span class="o">=</span> <span class="kc">False</span>',
          '',
          '    <span class="c1"># Iterate over the maximum length of tokens from max_len to 0</span>',
          '    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_len</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>',
          '        <span class="c1"># Get the prefix of the word</span>',
          '        <span class="n">prefix</span> <span class="o">=</span> <span class="n">word</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Prefix: </span><span class="si">{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '        <span class="c1"># Check if the prefix is in the vocabulary</span>',
          '        <span class="k">if</span> <span class="n">prefix</span> <span class="ow">in</span> <span class="n">vocab</span><span class="p">:</span>',
          '            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"prefix </span><span class="si">{</span><span class="n">prefix</span><span class="si">}</span><span class="s2"> is in the vocabulary"</span><span class="p">)</span>',
          '            <span class="n">tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">prefix</span><span class="p">)</span>',
          '            <span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">:]</span>',
          '            <span class="n">found</span> <span class="o">=</span> <span class="kc">True</span>',
          '            <span class="k">break</span>',
          '    ',
          '    <span class="c1"># if not found:</span>',
          '    <span class="c1">#     tokens.append(\'&lt;UNK&gt;\')</span>',
          '    <span class="c1">#     word = word[1:]</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Tokens: </span><span class="si">{</span><span class="n">tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Vocabulary: ',
          'Vocabulary: ',
          'Maximum length of tokens: 4',
          'Prefix: bug',
          'Prefix: bug',
          'Prefix: bu',
          'Prefix: b',
          'prefix b is in the vocabulary',
          'Prefix: ug',
          'prefix ug is in the vocabulary',
          'Tokens: [\'b\', \'ug\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Mas se agora quisermos tokenizar a palavra <code>mug</code>, n√£o poderemos, porque o caractere <code>m</code> n√£o est√° no vocabul√°rio, ent√£o o tokenizaremos com o token <code>&lt;UNK&gt;</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">word</span> <span class="o">=</span> <span class="s1">\'mug\'</span>',
          '',
          '<span class="c1"># Get the maximum length of tokens</span>',
          '<span class="n">max_len</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">token</span><span class="p">)</span> <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">vocab</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Maximum length of tokens: </span><span class="si">{</span><span class="n">max_len</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="c1"># Create a empty list of tokens</span>',
          '<span class="n">tokens</span> <span class="o">=</span> <span class="p">[]</span>',
          '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>',
          '    <span class="c1"># Flag to check if the token is found</span>',
          '    <span class="n">found</span> <span class="o">=</span> <span class="kc">False</span>',
          '',
          '    <span class="c1"># Iterate over the maximum length of tokens from max_len to 0</span>',
          '    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_len</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>',
          '        <span class="c1"># Get the prefix of the word</span>',
          '        <span class="n">prefix</span> <span class="o">=</span> <span class="n">word</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Prefix: </span><span class="si">{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '        <span class="c1"># Check if the prefix is in the vocabulary</span>',
          '        <span class="k">if</span> <span class="n">prefix</span> <span class="ow">in</span> <span class="n">vocab</span><span class="p">:</span>',
          '            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"prefix </span><span class="si">{</span><span class="n">prefix</span><span class="si">}</span><span class="s2"> is in the vocabulary"</span><span class="p">)</span>',
          '            <span class="n">tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">prefix</span><span class="p">)</span>',
          '            <span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">:]</span>',
          '            <span class="n">found</span> <span class="o">=</span> <span class="kc">True</span>',
          '            <span class="k">break</span>',
          '',
          '    <span class="k">if</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>',
          '        <span class="n">tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">\'&lt;UNK&gt;\'</span><span class="p">)</span>',
          '        <span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Tokens: </span><span class="si">{</span><span class="n">tokens</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Maximum length of tokens: 4',
          'Prefix: mug',
          'Prefix: mug',
          'Prefix: mu',
          'Prefix: m',
          'Prefix: ug',
          'prefix ug is in the vocabulary',
          'Tokens: [\'&lt;UNK&gt;\', \'ug\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>N√≥s o colocamos em uma fun√ß√£o</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span> <span class="nf">tokenize_word</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">vocab</span><span class="p">):</span>',
      '          <span class="c1"># Get the maximum length of tokens</span>',
      '          <span class="n">max_len</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">token</span><span class="p">)</span> <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">vocab</span><span class="p">)</span>',
      '      ',
      '          <span class="c1"># Create a empty list of tokens</span>',
      '          <span class="n">tokens</span> <span class="o">=</span> <span class="p">[]</span>',
      '          <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>',
      '              <span class="c1"># Flag to check if the token is found</span>',
      '              <span class="n">found</span> <span class="o">=</span> <span class="kc">False</span>',
      '      ',
      '              <span class="c1"># Iterate over the maximum length of tokens from max_len to 0</span>',
      '              <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_len</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>',
      '                  <span class="c1"># Get the prefix of the word</span>',
      '                  <span class="n">prefix</span> <span class="o">=</span> <span class="n">word</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span>',
      '      ',
      '                  <span class="c1"># Check if the prefix is in the vocabulary</span>',
      '                  <span class="k">if</span> <span class="n">prefix</span> <span class="ow">in</span> <span class="n">vocab</span><span class="p">:</span>',
      '                      <span class="n">tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">prefix</span><span class="p">)</span>',
      '                      <span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">:]</span>',
      '                      <span class="n">found</span> <span class="o">=</span> <span class="kc">True</span>',
      '                      <span class="k">break</span>',
      '      ',
      '              <span class="k">if</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>',
      '                  <span class="n">tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">\'&lt;UNK&gt;\'</span><span class="p">)</span>',
      '                  <span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>',
      '      ',
      '          <span class="k">return</span> <span class="n">tokens</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
































      
      <section class="section-block-markdown-cell">
      <p>Verificamos se est√° tudo bem</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">tokenize_word</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">vocab</span><span class="p">):</span>',
          '    <span class="c1"># Get the maximum length of tokens</span>',
          '    <span class="n">max_len</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">token</span><span class="p">)</span> <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">vocab</span><span class="p">)</span>',
          '',
          '    <span class="c1"># Create a empty list of tokens</span>',
          '    <span class="n">tokens</span> <span class="o">=</span> <span class="p">[]</span>',
          '    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>',
          '        <span class="c1"># Flag to check if the token is found</span>',
          '        <span class="n">found</span> <span class="o">=</span> <span class="kc">False</span>',
          '',
          '        <span class="c1"># Iterate over the maximum length of tokens from max_len to 0</span>',
          '        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_len</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>',
          '            <span class="c1"># Get the prefix of the word</span>',
          '            <span class="n">prefix</span> <span class="o">=</span> <span class="n">word</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span>',
          '',
          '            <span class="c1"># Check if the prefix is in the vocabulary</span>',
          '            <span class="k">if</span> <span class="n">prefix</span> <span class="ow">in</span> <span class="n">vocab</span><span class="p">:</span>',
          '                <span class="n">tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">prefix</span><span class="p">)</span>',
          '                <span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">:]</span>',
          '                <span class="n">found</span> <span class="o">=</span> <span class="kc">True</span>',
          '                <span class="k">break</span>',
          '',
          '        <span class="k">if</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>',
          '            <span class="n">tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">\'&lt;UNK&gt;\'</span><span class="p">)</span>',
          '            <span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>',
          '',
          '    <span class="k">return</span> <span class="n">tokens</span>',
          '</span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Tokenization of the word \'bug\': </span><span class="si">{</span><span class="n">tokenize_word</span><span class="p">(</span><span class="s1">\'bug\'</span><span class="p">,</span><span class="w"> </span><span class="n">vocab</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Tokenization of the word \'mug\': </span><span class="si">{</span><span class="n">tokenize_word</span><span class="p">(</span><span class="s1">\'mug\'</span><span class="p">,</span><span class="w"> </span><span class="n">vocab</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Tokenization of the word \'bug\': [\'b\', \'ug\']',
          'Tokenization of the word \'mug\': [\'&lt;UNK&gt;\', \'ug\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Visualizador-de-tokens">Visualizador de tokens<a class="anchor-link" href="#Visualizador-de-tokens"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 11" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora que sabemos como funciona um tokenizador BPE, vamos ver como o visualizador <a href="https://huggingface.co/spaces/Xenova/the-tokenizer-playground" target="_blank" rel="nofollow noreferrer">the-tokenizer-playground</a> se pareceria com os tokens de qualquer frase</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <iframe frameborder="0" height="450" src="https://xenova-the-tokenizer-playground.static.hf.space" width="100%"></iframe>
      </section>
      






    </div>

  </section>

</PostLayout>
