---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'ChromaDB';
const end_url = 'chromadb';
const description = 'Descubra como o ChromaDB redefine a pesquisa vetorial e o gerenciamento de dados para aplicativos de IA, com pesquisas de similaridade ultrarrápidas e precisas em espaços de alta dimensão';
const keywords = 'chromadb, pesquisa vetorial, banco de dados vetorial, pesquisa de similaridade vetorial, dados vetoriais, gerenciamento de dados vetoriais, pesquisa de dados vetoriais, mecanismo de pesquisa de dados vetoriais, ferramenta de pesquisa de dados vetoriais, plataforma de pesquisa de dados vetoriais, software de pesquisa de dados vetoriais, serviço de pesquisa de dados vetoriais, biblioteca de pesquisa de dados vetoriais, sistema de pesquisa de dados vetoriais, solução de pesquisa de dados vetoriais, produto de pesquisa de dados vetoriais, aplicativo de pesquisa de dados vetoriais, API de pesquisa de dados vetoriais, SDK de pesquisa de dados vetoriais, estrutura de pesquisa de dados vetoriais, tecnologia de pesquisa de dados vetoriais, empresa de pesquisa de dados vetoriais, startup de pesquisa de dados vetoriais';
const languaje = 'PT';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/chromadb_dalle3.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1024
    image_height=1024
    image_extension=webp
    article_date=2024-02-18+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Croma"><h2>Croma</h2></a>
      <a class="anchor-link" href="#Instala%C3%A7%C3%A3o"><h2>Instalação</h2></a>
      <a class="anchor-link" href="#Uso-r%C3%A1pido"><h2>Uso rápido</h2></a>
      <a class="anchor-link" href="#Bancos-de-dados-persistentes"><h2>Bancos de dados persistentes</h2></a>
      <a class="anchor-link" href="#Cole%C3%A7%C3%B5es"><h2>Coleções</h2></a>
      <a class="anchor-link" href="#Criar-cole%C3%A7%C3%B5es"><h3>Criar coleções</h3></a>
      <a class="anchor-link" href="#Recuperar-cole%C3%A7%C3%B5es"><h3>Recuperar coleções</h3></a>
      <a class="anchor-link" href="#Recuperar-ou-criar-cole%C3%A7%C3%B5es"><h3>Recuperar ou criar coleções</h3></a>
      <a class="anchor-link" href="#Excluir-cole%C3%A7%C3%B5es"><h3>Excluir coleções</h3></a>
      <a class="anchor-link" href="#Obter-itens-de-cole%C3%A7%C3%B5es"><h3>Obter itens de coleções</h3></a>
      <a class="anchor-link" href="#Obter-o-n%C3%BAmero-total-de-itens-nas-cole%C3%A7%C3%B5es"><h3>Obter o número total de itens nas coleções</h3></a>
      <a class="anchor-link" href="#Alterar-a-fun%C3%A7%C3%A3o-de-similaridade"><h3>Alterar a função de similaridade</h3></a>
      <a class="anchor-link" href="#Adicionar-dados-%C3%A0-cole%C3%A7%C3%A3o"><h3>Adicionar dados à coleção</h3></a>
      <a class="anchor-link" href="#Adicionar-documentos"><h4>Adicionar documentos</h4></a>
      <a class="anchor-link" href="#Adicionar-incorpora%C3%A7%C3%B5es"><h4>Adicionar incorporações</h4></a>
      <a class="anchor-link" href="#Adicionar-documentos-e-embeddings"><h4>Adicionar documentos e embeddings</h4></a>
      <a class="anchor-link" href="#Consultas"><h3>Consultas</h3></a>
      <a class="anchor-link" href="#Consultas-por-documentos"><h4>Consultas por documentos</h4></a>
      <a class="anchor-link" href="#V%C3%A1rias-consultas-ao-mesmo-tempo"><h4>Várias consultas ao mesmo tempo</h4></a>
      <a class="anchor-link" href="#Consultas-para-incorpora%C3%A7%C3%B5es"><h4>Consultas para incorporações</h4></a>
      <a class="anchor-link" href="#Recuperar-documentos-por-ID."><h3>Recuperar documentos por <code>ID</code>.</h3></a>
      <a class="anchor-link" href="#Filtragem"><h3>Filtragem</h3></a>
      <a class="anchor-link" href="#Filtragem-por-metadados"><h4>Filtragem por metadados</h4></a>
      <a class="anchor-link" href="#Filtragem-por-conte%C3%BAdo-do-documento"><h4>Filtragem por conteúdo do documento</h4></a>
      <a class="anchor-link" href="#Atualizar-dados"><h3>Atualizar dados</h3></a>
      <a class="anchor-link" href="#Atualizar-ou-adicionar-dados"><h3>Atualizar ou adicionar dados</h3></a>
      <a class="anchor-link" href="#Excluir-dados"><h3>Excluir dados</h3></a>
      <a class="anchor-link" href="#Embeddings"><h2>Embeddings</h2></a>
      <a class="anchor-link" href="#Multimodalidade"><h2>Multimodalidade</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Bancos-de-dados-vetoriais">Bancos de dados vetoriais<a class="anchor-link" href="#Bancos-de-dados-vetoriais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 60" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vimos na postagem <a href="https://www.maximofn.com/embeddings">embeddings</a> que os embeddings são uma forma de representar palavras em um espaço vetorial. Nesta postagem, veremos como podemos armazenar esses embeddings em bancos de dados vetoriais e como podemos fazer consultas a eles.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Este caderno foi traduzido automaticamente para torná-lo acessível a mais pessoas, por favor me avise se você vir algum erro de digitação..</p>
      <p>Quando temos uma consulta, podemos criar a incorporação da consulta, pesquisar no banco de dados de vetores as incorporações que mais se aproximam da consulta e retornar os documentos que correspondem a essas incorporações ou uma explicação desses documentos.</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="banco de dados vetorial" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/vector_database.svg"/></p>
      <p>Ou seja, vamos gerar um banco de dados de informações, vamos criar embeddings dessas informações e vamos armazená-las em um banco de dados vetorial. Então, quando um usuário fizer uma consulta, converteremos a consulta em embeddings, pesquisaremos no banco de dados os embeddings com a maior similaridade e retornaremos os documentos que correspondem a esses embeddings.</p>
      <p>Além dos documentos, outras informações podem ser armazenadas no banco de dados, que chamaremos de metadados. Por exemplo, se estivermos trabalhando com um conjunto de itens de notícias, podemos armazenar o título, a data, o autor etc. do item de notícias.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Croma">Croma<a class="anchor-link" href="#Croma"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 61" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Nesta postagem, vamos analisar o <a href="https://www.trychroma.com/" target="_blank" rel="nofollow noreferrer">crhoma</a>, pois ele é o <a href="https://blog.langchain.dev/langchain-state-of-ai-2023/#most-used-vectorstores">banco de dados de vetores</a> mais usado, como pode ser visto neste relatório <a href="https://blog.langchain.dev/langchain-state-of-ai-2023">langchain state of ai 2023</a>.</p>
      <p>Vectorstores mais usados](<a href="https://blog.langchain.dev/content/images/size/w1000/2023/12/Top-vectorstores--1-.png" target="_blank" rel="nofollow noreferrer">https://blog.langchain.dev/content/images/size/w1000/2023/12/Top-vectorstores--1-.png</a>)</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Instala%C3%A7%C3%A3o">Instalação<a class="anchor-link" href="#Instala%C3%A7%C3%A3o"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 62" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Portanto, para instalar o chroma com o conda, você precisa fazer o seguinte</p>
      <div class="highlight"><pre><span></span>conda<span class="w"> </span>install<span class="w"> </span>conda-forge::chromadb
      <span class="sb">```</span>
      
      Ou<span class="w"> </span>se<span class="w"> </span>você<span class="w"> </span>quiser<span class="w"> </span>instalar<span class="w"> </span>com<span class="w"> </span>o<span class="w"> </span>pip
      
      <span class="sb">````</span>bash
      pip<span class="w"> </span>install<span class="w"> </span>chromadb
      <span class="sb">```</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Uso-r%C3%A1pido">Uso rápido<a class="anchor-link" href="#Uso-r%C3%A1pido"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 63" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para uma aplicação rápida, primeiro importamos o chroma</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">chromadb</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Em seguida, criamos um cliente chroma.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">chromadb</span>',
      '<span></span><span class="n">chroma_client</span> <span class="o">=</span> <span class="n">chromadb</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Criamos uma coleção. Uma coleção é o local onde as incorporações, as incorporações e os metadados serão armazenados.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">chromadb</span>',
      '<span></span><span class="n">chroma_client</span> <span class="o">=</span> <span class="n">chromadb</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span>',
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">"my_collection"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Como você pode ver, é exibida uma mensagem indicando que nenhuma função de embeddings foi introduzida e, portanto, o padrão será <code>all-MiniLM-L6-v2</code>, que é semelhante ao modelo <code>paraphrase-MiniLM-L6-v2</code> que usamos na postagem <a href="https://maximofn.com/embeddings/">embeddings</a>.</p>
      <p>Falaremos mais sobre isso mais tarde, mas podemos escolher como gerar os embeddings.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora, adicionamos documentos, IDs e metadados à coleção.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">chromadb</span>',
      '<span></span><span class="n">chroma_client</span> <span class="o">=</span> <span class="n">chromadb</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span>',
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">"my_collection"</span><span class="p">)</span>',
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
      '          <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">"This is a python docs"</span><span class="p">,</span> <span class="s2">"This is JavaScript docs"</span><span class="p">],</span>',
      '          <span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Python source"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"JavaScript source"</span><span class="p">}],</span>',
      '          <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id1"</span><span class="p">,</span> <span class="s2">"id2"</span><span class="p">]</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>










      
      <section class="section-block-markdown-cell">
      <p>Agora podemos fazer uma consulta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">chromadb</span>',
      '<span></span><span class="n">chroma_client</span> <span class="o">=</span> <span class="n">chromadb</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span>',
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">"my_collection"</span><span class="p">)</span>',
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
      '          <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">"This is a python docs"</span><span class="p">,</span> <span class="s2">"This is JavaScript docs"</span><span class="p">],</span>',
      '          <span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Python source"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"JavaScript source"</span><span class="p">}],</span>',
      '          <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id1"</span><span class="p">,</span> <span class="s2">"id2"</span><span class="p">]</span>',
      '      <span class="p">)</span>',
      '<span></span><span class="n">results</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '          <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"This is a query of Python"</span><span class="p">],</span>',
      '          <span class="n">n_results</span><span class="o">=</span><span class="mi">2</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>









      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">chromadb</span>',
          '</span><span class="n">chroma_client</span> <span class="o">=</span> <span class="n">chromadb</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span>',
          '</span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">"my_collection"</span><span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
          '    <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">"This is a python docs"</span><span class="p">,</span> <span class="s2">"This is JavaScript docs"</span><span class="p">],</span>',
          '    <span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Python source"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"JavaScript source"</span><span class="p">}],</span>',
          '    <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id1"</span><span class="p">,</span> <span class="s2">"id2"</span><span class="p">]</span>',
          '<span class="p">)</span>',
          '</span><span class="n">results</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
          '    <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"This is a query of Python"</span><span class="p">],</span>',
          '    <span class="n">n_results</span><span class="o">=</span><span class="mi">2</span>',
          '<span class="p">)</span>',
          '</span><span class="n">results</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'ids\': [[\'id1\', \'id2\']],',
          ' \'distances\': [[0.6205940246582031, 1.4631636142730713]],',
          ' \'metadatas\': [[{\'source\': \'Python source\'}, {\'source\': \'JavaScript source\'}]],',
          ' \'embeddings\': None,',
          ' \'documents\': [[\'This is a python docs\', \'This is JavaScript docs\']],',
          ' \'uris\': None,',
          ' \'data\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, a distância para id1 é menor do que a distância para id2, portanto, parece que o documento 1 é mais adequado para responder à consulta.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Bancos-de-dados-persistentes">Bancos de dados persistentes<a class="anchor-link" href="#Bancos-de-dados-persistentes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 64" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O banco de dados que criamos anteriormente é temporário e, assim que fecharmos o notebook, ele desaparecerá. Portanto, para criar um banco de dados persistente, é necessário passar para o chroma o caminho onde ele será salvo.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro, vamos criar a pasta onde salvaremos o banco de dados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>',
      '      ',
      '      <span class="n">chroma_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s2">"chromadb"</span><span class="p">)</span>',
      '      <span class="n">chroma_path</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>









      
      <section class="section-block-markdown-cell">
      <p>Agora, criamos um cliente na pasta que criamos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>',
      '      ',
      '      <span class="n">chroma_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s2">"chromadb"</span><span class="p">)</span>',
      '      <span class="n">chroma_path</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span></span><span class="n">chroma_client_persistent</span> <span class="o">=</span> <span class="n">chromadb</span><span class="o">.</span><span class="n">PersistentClient</span><span class="p">(</span><span class="n">path</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">chroma_path</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h2 id="Cole%C3%A7%C3%B5es">Coleções<a class="anchor-link" href="#Cole%C3%A7%C3%B5es"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 65" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Criar-cole%C3%A7%C3%B5es">Criar coleções<a class="anchor-link" href="#Criar-cole%C3%A7%C3%B5es"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 66" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ao criar uma coleção, um nome deve ser especificado. O nome deve ter as seguintes considerações:</p>
      <ul>
      <li>O comprimento do nome deve ter entre 3 e 63 caracteres.</li>
      <li>O nome deve começar e terminar com uma letra minúscula ou dígito e pode conter pontos finais, hífens e sublinhados no meio.</li>
      <li>O nome não deve conter dois dois pontos consecutivos.</li>
      <li>O nome não deve ser um endereço IP válido.</li>
      </ul>
      <p>Também podemos atribuir a ele uma função de incorporação. Se não for atribuída uma função, o padrão será a função <code>all-MiniLM-L6-v2</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>',
      '      ',
      '      <span class="n">chroma_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s2">"chromadb"</span><span class="p">)</span>',
      '      <span class="n">chroma_path</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span></span><span class="n">chroma_client_persistent</span> <span class="o">=</span> <span class="n">chromadb</span><span class="o">.</span><span class="n">PersistentClient</span><span class="p">(</span><span class="n">path</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">chroma_path</span><span class="p">))</span>',
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">"my_other_collection"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Como você pode ver, uma segunda coleção foi criada para o mesmo cliente <code>chroma_client</code>, portanto, para um único cliente, podemos ter várias coleções.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Recuperar-cole%C3%A7%C3%B5es">Recuperar coleções<a class="anchor-link" href="#Recuperar-cole%C3%A7%C3%B5es"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 67" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos recuperar uma coleção de um cliente, podemos fazer isso com o método <code>get_collection</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>',
      '      ',
      '      <span class="n">chroma_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s2">"chromadb"</span><span class="p">)</span>',
      '      <span class="n">chroma_path</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span></span><span class="n">chroma_client_persistent</span> <span class="o">=</span> <span class="n">chromadb</span><span class="o">.</span><span class="n">PersistentClient</span><span class="p">(</span><span class="n">path</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">chroma_path</span><span class="p">))</span>',
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">"my_other_collection"</span><span class="p">)</span>',
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"my_collection"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h3 id="Recuperar-ou-criar-cole%C3%A7%C3%B5es">Recuperar ou criar coleções<a class="anchor-link" href="#Recuperar-ou-criar-cole%C3%A7%C3%B5es"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 68" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos obter coleções e, se elas não existirem, criá-las com o método <code>get_or_create_collection</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>',
      '      ',
      '      <span class="n">chroma_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s2">"chromadb"</span><span class="p">)</span>',
      '      <span class="n">chroma_path</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span></span><span class="n">chroma_client_persistent</span> <span class="o">=</span> <span class="n">chromadb</span><span class="o">.</span><span class="n">PersistentClient</span><span class="p">(</span><span class="n">path</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">chroma_path</span><span class="p">))</span>',
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">"my_other_collection"</span><span class="p">)</span>',
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"my_collection"</span><span class="p">)</span>',
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_or_create_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"my_tird_collection"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h3 id="Excluir-cole%C3%A7%C3%B5es">Excluir coleções<a class="anchor-link" href="#Excluir-cole%C3%A7%C3%B5es"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 69" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos excluir uma coleção com o método <code>delete_collection</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>',
      '      ',
      '      <span class="n">chroma_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s2">"chromadb"</span><span class="p">)</span>',
      '      <span class="n">chroma_path</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span></span><span class="n">chroma_client_persistent</span> <span class="o">=</span> <span class="n">chromadb</span><span class="o">.</span><span class="n">PersistentClient</span><span class="p">(</span><span class="n">path</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">chroma_path</span><span class="p">))</span>',
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">"my_other_collection"</span><span class="p">)</span>',
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"my_collection"</span><span class="p">)</span>',
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_or_create_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"my_tird_collection"</span><span class="p">)</span>',
      '<span></span><span class="n">chroma_client</span><span class="o">.</span><span class="n">delete_collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">"my_tird_collection"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h3 id="Obter-itens-de-cole%C3%A7%C3%B5es">Obter itens de coleções<a class="anchor-link" href="#Obter-itens-de-cole%C3%A7%C3%B5es"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 70" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos obter os primeiros 10 itens da coleção com o método <code>peek</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>',
          '',
          '<span class="n">chroma_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s2">"chromadb"</span><span class="p">)</span>',
          '<span class="n">chroma_path</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
          '</span><span class="n">chroma_client_persistent</span> <span class="o">=</span> <span class="n">chromadb</span><span class="o">.</span><span class="n">PersistentClient</span><span class="p">(</span><span class="n">path</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">chroma_path</span><span class="p">))</span>',
          '</span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">"my_other_collection"</span><span class="p">)</span>',
          '</span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"my_collection"</span><span class="p">)</span>',
          '</span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_or_create_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"my_tird_collection"</span><span class="p">)</span>',
          '</span><span class="n">chroma_client</span><span class="o">.</span><span class="n">delete_collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">"my_tird_collection"</span><span class="p">)</span>',
          '</span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"my_collection"</span><span class="p">)</span>',
          '<span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'ids\': [\'id1\', \'id2\'],',
          ' \'embeddings\': [[-0.06924048811197281,',
          '   0.061624377965927124,',
          '   -0.090973399579525,',
          '   0.013923337683081627,',
          '   0.006247623357921839,',
          '   -0.1078396588563919,',
          '   -0.012472339905798435,',
          '   0.03485661745071411,',
          '   -0.06300634145736694,',
          '   -0.00880391988903284,',
          '   0.06879935413599014,',
          '   0.0564003586769104,',
          '   0.07040536403656006,',
          '   -0.020754728466272354,',
          '   -0.04048658534884453,',
          '   -0.006666888482868671,',
          '   -0.0953674241900444,',
          '   0.049781784415245056,',
          '   0.021780474111437798,',
          '   -0.06344643980264664,',
          '   0.06119797006249428,',
          '   0.0834411084651947,',
          '   -0.034758951514959335,',
          '   0.0029120452236384153,',
          '   ...',
          '   -0.013378280214965343]],',
          ' \'metadatas\': [{\'source\': \'Python source\'}, {\'source\': \'JavaScript source\'}],',
          ' \'documents\': [\'This is a python docs\', \'This is JavaScript docs\'],',
          ' \'uris\': None,',
          ' \'data\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Nesse caso, apenas dois foram obtidos, porque nossa coleção tem apenas dois documentos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se você quiser obter outro número de itens, poderá especificá-lo com o argumento <code>limit</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">(</span><span class="n">limit</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'ids\': [\'id1\'],',
          ' \'embeddings\': [[-0.06924048811197281,',
          '   0.061624377965927124,',
          '   -0.090973399579525,',
          '   0.013923337683081627,',
          '   0.006247623357921839,',
          '   -0.1078396588563919,',
          '   -0.012472339905798435,',
          '   0.03485661745071411,',
          '   -0.06300634145736694,',
          '   -0.00880391988903284,',
          '   0.06879935413599014,',
          '   0.0564003586769104,',
          '   0.07040536403656006,',
          '   -0.020754728466272354,',
          '   -0.04048658534884453,',
          '   -0.006666888482868671,',
          '   -0.0953674241900444,',
          '   0.049781784415245056,',
          '   0.021780474111437798,',
          '   -0.06344643980264664,',
          '   0.06119797006249428,',
          '   0.0834411084651947,',
          '   -0.034758951514959335,',
          '   0.0029120452236384153,',
          '   ...',
          '   0.012315398082137108]],',
          ' \'metadatas\': [{\'source\': \'Python source\'}],',
          ' \'documents\': [\'This is a python docs\'],',
          ' \'uris\': None,',
          ' \'data\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Obter-o-n%C3%BAmero-total-de-itens-nas-cole%C3%A7%C3%B5es">Obter o número total de itens nas coleções<a class="anchor-link" href="#Obter-o-n%C3%BAmero-total-de-itens-nas-cole%C3%A7%C3%B5es"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 71" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos obter o número total de itens na coleção com o método <code>count</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Alterar-a-fun%C3%A7%C3%A3o-de-similaridade">Alterar a função de similaridade<a class="anchor-link" href="#Alterar-a-fun%C3%A7%C3%A3o-de-similaridade"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 72" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Anteriormente, quando fizemos uma consulta, obtivemos a similaridade dos embeddings com nossa consulta, porque, por padrão, em uma coleção, a função de distância é usada, mas podemos especificar qual função de similaridade queremos usar. As possibilidades são</p>
      <ul>
      <li>L2 ao quadrado (<code>l2</code>)</li>
      <li>Produto interno (<code>ip</code>)</li>
      <li>Similaridade de cosseno (<code>cosine</code>)</li>
      </ul>
      <p>Na postagem [Measurement of similarity between embeddings] (<a href="http://maximofn.com/embeddings-similarity/">http://maximofn.com/embeddings-similarity/</a>), vimos a similaridade L2 e cosseno, caso queira saber mais sobre elas.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Portanto, podemos criar coleções com outra função de similaridade com o argumento <code>metadata={opening_brace}"hnsw:space": &lt;function&gt;{closing_brace}</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">"colection_cosine"</span><span class="p">,</span> <span class="n">metadata</span><span class="o">=</span><span class="p">{</span><span class="s2">"hnsw:space"</span><span class="p">:</span> <span class="s2">"cosine"</span><span class="p">})</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h3 id="Adicionar-dados-%C3%A0-cole%C3%A7%C3%A3o">Adicionar dados à coleção<a class="anchor-link" href="#Adicionar-dados-%C3%A0-cole%C3%A7%C3%A3o"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 73" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Adicionar-documentos">Adicionar documentos<a class="anchor-link" href="#Adicionar-documentos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 74" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos examinar os dados que temos na coleção novamente com o método <code>peek</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">"colection_cosine"</span><span class="p">,</span> <span class="n">metadata</span><span class="o">=</span><span class="p">{</span><span class="s2">"hnsw:space"</span><span class="p">:</span> <span class="s2">"cosine"</span><span class="p">})</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'ids\': [],',
          ' \'embeddings\': [],',
          ' \'metadatas\': [],',
          ' \'documents\': [],',
          ' \'uris\': None,',
          ' \'data\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, ela está vazia, porque a última coleção que criamos foi a função de similaridade <code>cosine</code>, mas não adicionamos dados a ela. Vamos ver como é isso, obtendo o nome da coleção</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">name</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'colection_cosine\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Assim, trazemos de volta a primeira coleção que criamos e para a qual inserimos dados.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"my_collection"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Agora podemos adicionar dados à coleção com o método <code>add</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"my_collection"</span><span class="p">)</span>',
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
      '          <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">"This is a Mojo docs"</span><span class="p">,</span> <span class="s2">"This is Rust docs"</span><span class="p">],</span>',
      '          <span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Mojo source"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Rust source"</span><span class="p">}],</span>',
      '          <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id3"</span><span class="p">,</span> <span class="s2">"id4"</span><span class="p">]</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>










      
      <section class="section-block-markdown-cell">
      <p>Como você pode ver, os <code>IDs são consecutivos e não têm o mesmo valor de antes, pois os</code>IDs precisam ser exclusivos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se tentarmos adicionar dados repetindo <code>ID</code>s, ele indicará que já existem dados com esses <code>ID</code>s.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"my_collection"</span><span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
          '    <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">"This is a Mojo docs"</span><span class="p">,</span> <span class="s2">"This is Rust docs"</span><span class="p">],</span>',
          '    <span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Mojo source"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Rust source"</span><span class="p">}],</span>',
          '    <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id3"</span><span class="p">,</span> <span class="s2">"id4"</span><span class="p">]</span>',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
          '    <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">"This is a Pytorch docs"</span><span class="p">,</span> <span class="s2">"This is TensorRT docs"</span><span class="p">],</span>',
          '    <span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Pytorch source"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"TensorRT source"</span><span class="p">}],</span>',
          '    <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id3"</span><span class="p">,</span> <span class="s2">"id4"</span><span class="p">]</span>',
          '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Add of existing embedding ID: id3',
          'Add of existing embedding ID: id4',
          'Insert of existing embedding ID: id3',
          'Insert of existing embedding ID: id4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Não foi possível adicionar os documentos do Pytorch e do TensorRT.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos dar uma olhada nos dados de coleta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'ids\': [\'id1\', \'id2\', \'id3\', \'id4\'],',
          ' \'embeddings\': [[-0.06924048811197281,',
          '   0.061624377965927124,',
          '   -0.090973399579525,',
          '   0.013923337683081627,',
          '   0.006247623357921839,',
          '   -0.1078396588563919,',
          '   -0.012472339905798435,',
          '   0.03485661745071411,',
          '   -0.06300634145736694,',
          '   -0.00880391988903284,',
          '   0.06879935413599014,',
          '   0.0564003586769104,',
          '   0.07040536403656006,',
          '   -0.020754728466272354,',
          '   -0.04048658534884453,',
          '   -0.006666888482868671,',
          '   -0.0953674241900444,',
          '   0.049781784415245056,',
          '   0.021780474111437798,',
          '   -0.06344643980264664,',
          '   0.06119797006249428,',
          '   0.0834411084651947,',
          '   -0.034758951514959335,',
          '   0.0029120452236384153,',
          '   ...',
          '  {\'source\': \'JavaScript source\'},',
          '  {\'source\': \'Mojo source\'},',
          '  {\'source\': \'Rust source\'}],',
          ' \'documents\': [\'This is a python docs\',',
          '  \'This is JavaScript docs\',',
          '  \'This is a Mojo docs\',',
          '  \'This is Rust docs\'],',
          ' \'uris\': None,',
          ' \'data\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como pode ser visto, os conteúdos originais de <code>ID3</code> e <code>ID4</code> foram mantidos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Adicionar-incorpora%C3%A7%C3%B5es">Adicionar incorporações<a class="anchor-link" href="#Adicionar-incorpora%C3%A7%C3%B5es"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 75" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos adicionar embeddings diretamente sem adicionar documentos. No entanto, isso não faz muito sentido, pois se adicionarmos apenas embeddings, quando quisermos fazer uma consulta, não haverá documentos para recuperar.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Obtemos algumas incorporações para criar outras com as mesmas dimensões.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">embedding1</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="s1">\'embeddings\'</span><span class="p">]</span>',
          '<span class="nb">len</span><span class="p">(</span><span class="n">embedding1</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">embedding1</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(1, 384)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos novas incorporações com todos eles para sabermos quais foram criados.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">new_embedding</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">embedding1</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
          '<span class="n">new_embedding</span> <span class="o">=</span> <span class="p">[</span><span class="n">new_embedding</span><span class="p">]</span>',
          '<span class="nb">len</span><span class="p">(</span><span class="n">new_embedding</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">new_embedding</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(1, 384)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora adicionamos os novos embeddings</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
      '          <span class="n">embeddings</span><span class="o">=</span><span class="n">new_embedding</span><span class="p">,</span>',
      '          <span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Only embeddings"</span><span class="p">}],</span>',
      '          <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id5"</span><span class="p">]</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>










      
      <section class="section-block-markdown-cell">
      <p>Vamos dar uma olhada nos dados de coleta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
          '    <span class="n">embeddings</span><span class="o">=</span><span class="n">new_embedding</span><span class="p">,</span>',
          '    <span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Only embeddings"</span><span class="p">}],</span>',
          '    <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id5"</span><span class="p">]</span>',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()[</span><span class="s1">\'embeddings\'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' ...,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O último elemento da condição tem as incorporações que adicionamos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Observação: Se tentarmos adicionar bordados com um tamanho diferente dos que já estão na coleção, ocorrerá um erro.</p>
      </blockquote>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">new_embedding_differetn_size</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">embedding1</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>',
          '<span class="n">new_embedding_differetn_size</span> <span class="o">=</span> <span class="p">[</span><span class="n">new_embedding_differetn_size</span><span class="p">]</span>',
          '<span class="nb">len</span><span class="p">(</span><span class="n">new_embedding_differetn_size</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">new_embedding_differetn_size</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(1, 383)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como você pode ver, a dimensão de incorporação é 383, em vez de 384.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
          '    <span class="n">embeddings</span><span class="o">=</span><span class="n">new_embedding_differetn_size</span><span class="p">,</span>',
          '    <span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"New embeddings different size"</span><span class="p">}],</span>',
          '    <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id6"</span><span class="p">]</span>',
          '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-red-fg">---------------------------------------------------------------------------</span>',
          '<span class="ansi-red-fg">InvalidDimensionException</span>                 Traceback (most recent call last)',
          'Cell <span class="ansi-green-fg">In[28], line 1</span>',
          '<span class="ansi-green-fg">----&gt; 1</span> collection<span style="color: rgb(98,98,98)">.</span>add(',
          '<span class="ansi-green-intense-fg ansi-bold">      2</span>     embeddings<span style="color: rgb(98,98,98)">=</span>new_embedding_differetn_size,',
          '<span class="ansi-green-intense-fg ansi-bold">      3</span>     metadatas<span style="color: rgb(98,98,98)">=</span>[{<span style="color: rgb(175,0,0)">"</span><span style="color: rgb(175,0,0)">source</span><span style="color: rgb(175,0,0)">"</span>: <span style="color: rgb(175,0,0)">"</span><span style="color: rgb(175,0,0)">New embeddings different size</span><span style="color: rgb(175,0,0)">"</span>}],',
          '<span class="ansi-green-intense-fg ansi-bold">      4</span>     ids<span style="color: rgb(98,98,98)">=</span>[<span style="color: rgb(175,0,0)">"</span><span style="color: rgb(175,0,0)">id6</span><span style="color: rgb(175,0,0)">"</span>]',
          '<span class="ansi-green-intense-fg ansi-bold">      5</span> )',
          'File <span class="ansi-green-fg">~/miniforge3/envs/crhomadb/lib/python3.11/site-packages/chromadb/api/models/Collection.py:168</span>, in <span class="ansi-cyan-fg">Collection.add</span><span class="ansi-blue-fg">(self, ids, embeddings, metadatas, documents, images, uris)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    163</span>             <span class="ansi-bold" style="color: rgb(0,135,0)">raise</span> <span class="ansi-bold" style="color: rgb(215,95,95)">ValueError</span>(',
          '<span class="ansi-green-intense-fg ansi-bold">    164</span>                 <span style="color: rgb(175,0,0)">"</span><span style="color: rgb(175,0,0)">You must set a data loader on the collection if loading from URIs.</span><span style="color: rgb(175,0,0)">"</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    165</span>             )',
          '<span class="ansi-green-intense-fg ansi-bold">    166</span>         embeddings <span style="color: rgb(98,98,98)">=</span> <span style="color: rgb(0,135,0)">self</span><span style="color: rgb(98,98,98)">.</span>_embed(<span style="color: rgb(0,135,0)">self</span><span style="color: rgb(98,98,98)">.</span>_data_loader(uris))',
          '<span class="ansi-green-fg">--&gt; 168</span> <span style="color: rgb(0,135,0)">self</span><span style="color: rgb(98,98,98)">.</span>_client<span style="color: rgb(98,98,98)">.</span>_add(ids, <span style="color: rgb(0,135,0)">self</span><span style="color: rgb(98,98,98)">.</span>id, embeddings, metadatas, documents, uris)',
          'File <span class="ansi-green-fg">~/miniforge3/envs/crhomadb/lib/python3.11/site-packages/chromadb/telemetry/opentelemetry/__init__.py:127</span>, in <span class="ansi-cyan-fg">trace_method.&lt;locals&gt;.decorator.&lt;locals&gt;.wrapper</span><span class="ansi-blue-fg">(*args, **kwargs)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    125</span> <span class="ansi-bold" style="color: rgb(0,135,0)">global</span> tracer, granularity',
          '<span class="ansi-green-intense-fg ansi-bold">    126</span> <span class="ansi-bold" style="color: rgb(0,135,0)">if</span> trace_granularity <span style="color: rgb(98,98,98)">&lt;</span> granularity:',
          '<span class="ansi-green-fg">--&gt; 127</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">return</span> f(<span style="color: rgb(98,98,98)">*</span>args, <span style="color: rgb(98,98,98)">*</span><span style="color: rgb(98,98,98)">*</span>kwargs)',
          '<span class="ansi-green-intense-fg ansi-bold">    128</span> <span class="ansi-bold" style="color: rgb(0,135,0)">if</span> <span class="ansi-bold" style="color: rgb(175,0,255)">not</span> tracer:',
          '<span class="ansi-green-intense-fg ansi-bold">    129</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">return</span> f(<span style="color: rgb(98,98,98)">*</span>args, <span style="color: rgb(98,98,98)">*</span><span style="color: rgb(98,98,98)">*</span>kwargs)',
          'File <span class="ansi-green-fg">~/miniforge3/envs/crhomadb/lib/python3.11/site-packages/chromadb/api/segment.py:375</span>, in <span class="ansi-cyan-fg">SegmentAPI._add</span><span class="ansi-blue-fg">(self, ids, collection_id, embeddings, metadatas, documents, uris)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    365</span> records_to_submit <span style="color: rgb(98,98,98)">=</span> []',
          '<span class="ansi-green-intense-fg ansi-bold">    366</span> <span class="ansi-bold" style="color: rgb(0,135,0)">for</span> r <span class="ansi-bold" style="color: rgb(175,0,255)">in</span> _records(',
          '<span class="ansi-green-intense-fg ansi-bold">    367</span>     t<span style="color: rgb(98,98,98)">.</span>Operation<span style="color: rgb(98,98,98)">.</span>ADD,',
          '<span class="ansi-green-intense-fg ansi-bold">    368</span>     ids<span style="color: rgb(98,98,98)">=</span>ids,',
          '<span class="ansi-green-fg">   (...)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    373</span>     uris<span style="color: rgb(98,98,98)">=</span>uris,',
          '<span class="ansi-green-intense-fg ansi-bold">    374</span> ):',
          '<span class="ansi-green-fg">--&gt; 375</span>     <span style="color: rgb(0,135,0)">self</span><span style="color: rgb(98,98,98)">.</span>_validate_embedding_record(coll, r)',
          '<span class="ansi-green-intense-fg ansi-bold">    376</span>     records_to_submit<span style="color: rgb(98,98,98)">.</span>append(r)',
          '<span class="ansi-green-intense-fg ansi-bold">    377</span> <span style="color: rgb(0,135,0)">self</span><span style="color: rgb(98,98,98)">.</span>_producer<span style="color: rgb(98,98,98)">.</span>submit_embeddings(coll[<span style="color: rgb(175,0,0)">"</span><span style="color: rgb(175,0,0)">topic</span><span style="color: rgb(175,0,0)">"</span>], records_to_submit)',
          'File <span class="ansi-green-fg">~/miniforge3/envs/crhomadb/lib/python3.11/site-packages/chromadb/telemetry/opentelemetry/__init__.py:127</span>, in <span class="ansi-cyan-fg">trace_method.&lt;locals&gt;.decorator.&lt;locals&gt;.wrapper</span><span class="ansi-blue-fg">(*args, **kwargs)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    125</span> <span class="ansi-bold" style="color: rgb(0,135,0)">global</span> tracer, granularity',
          '<span class="ansi-green-intense-fg ansi-bold">    126</span> <span class="ansi-bold" style="color: rgb(0,135,0)">if</span> trace_granularity <span style="color: rgb(98,98,98)">&lt;</span> granularity:',
          '<span class="ansi-green-fg">--&gt; 127</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">return</span> f(<span style="color: rgb(98,98,98)">*</span>args, <span style="color: rgb(98,98,98)">*</span><span style="color: rgb(98,98,98)">*</span>kwargs)',
          '<span class="ansi-green-intense-fg ansi-bold">    128</span> <span class="ansi-bold" style="color: rgb(0,135,0)">if</span> <span class="ansi-bold" style="color: rgb(175,0,255)">not</span> tracer:',
          '<span class="ansi-green-intense-fg ansi-bold">    129</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">return</span> f(<span style="color: rgb(98,98,98)">*</span>args, <span style="color: rgb(98,98,98)">*</span><span style="color: rgb(98,98,98)">*</span>kwargs)',
          'File <span class="ansi-green-fg">~/miniforge3/envs/crhomadb/lib/python3.11/site-packages/chromadb/api/segment.py:799</span>, in <span class="ansi-cyan-fg">SegmentAPI._validate_embedding_record</span><span class="ansi-blue-fg">(self, collection, record)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    797</span> add_attributes_to_current_span({<span style="color: rgb(175,0,0)">"</span><span style="color: rgb(175,0,0)">collection_id</span><span style="color: rgb(175,0,0)">"</span>: <span style="color: rgb(0,135,0)">str</span>(collection[<span style="color: rgb(175,0,0)">"</span><span style="color: rgb(175,0,0)">id</span><span style="color: rgb(175,0,0)">"</span>])})',
          '<span class="ansi-green-intense-fg ansi-bold">    798</span> <span class="ansi-bold" style="color: rgb(0,135,0)">if</span> record[<span style="color: rgb(175,0,0)">"</span><span style="color: rgb(175,0,0)">embedding</span><span style="color: rgb(175,0,0)">"</span>]:',
          '<span class="ansi-green-fg">--&gt; 799</span>     <span style="color: rgb(0,135,0)">self</span><span style="color: rgb(98,98,98)">.</span>_validate_dimension(collection, <span style="color: rgb(0,135,0)">len</span>(record[<span style="color: rgb(175,0,0)">"</span><span style="color: rgb(175,0,0)">embedding</span><span style="color: rgb(175,0,0)">"</span>]), update<span style="color: rgb(98,98,98)">=</span><span class="ansi-bold" style="color: rgb(0,135,0)">True</span>)',
          'File <span class="ansi-green-fg">~/miniforge3/envs/crhomadb/lib/python3.11/site-packages/chromadb/telemetry/opentelemetry/__init__.py:127</span>, in <span class="ansi-cyan-fg">trace_method.&lt;locals&gt;.decorator.&lt;locals&gt;.wrapper</span><span class="ansi-blue-fg">(*args, **kwargs)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    125</span> <span class="ansi-bold" style="color: rgb(0,135,0)">global</span> tracer, granularity',
          '<span class="ansi-green-intense-fg ansi-bold">    126</span> <span class="ansi-bold" style="color: rgb(0,135,0)">if</span> trace_granularity <span style="color: rgb(98,98,98)">&lt;</span> granularity:',
          '<span class="ansi-green-fg">--&gt; 127</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">return</span> f(<span style="color: rgb(98,98,98)">*</span>args, <span style="color: rgb(98,98,98)">*</span><span style="color: rgb(98,98,98)">*</span>kwargs)',
          '<span class="ansi-green-intense-fg ansi-bold">    128</span> <span class="ansi-bold" style="color: rgb(0,135,0)">if</span> <span class="ansi-bold" style="color: rgb(175,0,255)">not</span> tracer:',
          '<span class="ansi-green-intense-fg ansi-bold">    129</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">return</span> f(<span style="color: rgb(98,98,98)">*</span>args, <span style="color: rgb(98,98,98)">*</span><span style="color: rgb(98,98,98)">*</span>kwargs)',
          'File <span class="ansi-green-fg">~/miniforge3/envs/crhomadb/lib/python3.11/site-packages/chromadb/api/segment.py:814</span>, in <span class="ansi-cyan-fg">SegmentAPI._validate_dimension</span><span class="ansi-blue-fg">(self, collection, dim, update)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    812</span>         <span style="color: rgb(0,135,0)">self</span><span style="color: rgb(98,98,98)">.</span>_collection_cache[<span style="color: rgb(0,135,0)">id</span>][<span style="color: rgb(175,0,0)">"</span><span style="color: rgb(175,0,0)">dimension</span><span style="color: rgb(175,0,0)">"</span>] <span style="color: rgb(98,98,98)">=</span> dim',
          '<span class="ansi-green-intense-fg ansi-bold">    813</span> <span class="ansi-bold" style="color: rgb(0,135,0)">elif</span> collection[<span style="color: rgb(175,0,0)">"</span><span style="color: rgb(175,0,0)">dimension</span><span style="color: rgb(175,0,0)">"</span>] <span style="color: rgb(98,98,98)">!=</span> dim:',
          '<span class="ansi-green-fg">--&gt; 814</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">raise</span> InvalidDimensionException(',
          '<span class="ansi-green-intense-fg ansi-bold">    815</span>         <span style="color: rgb(175,0,0)">f</span><span style="color: rgb(175,0,0)">"</span><span style="color: rgb(175,0,0)">Embedding dimension </span><span class="ansi-bold" style="color: rgb(175,95,135)">{</span>dim<span class="ansi-bold" style="color: rgb(175,95,135)">}</span><span style="color: rgb(175,0,0)"> does not match collection dimensionality </span><span class="ansi-bold" style="color: rgb(175,95,135)">{</span>collection[<span style="color: rgb(175,0,0)">\'</span><span style="color: rgb(175,0,0)">dimension</span><span style="color: rgb(175,0,0)">\'</span>]<span class="ansi-bold" style="color: rgb(175,95,135)">}</span><span style="color: rgb(175,0,0)">"</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    816</span>     )',
          '<span class="ansi-green-intense-fg ansi-bold">    817</span> <span class="ansi-bold" style="color: rgb(0,135,0)">else</span>:',
          '<span class="ansi-green-intense-fg ansi-bold">    818</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">return</span>',
          '<span class="ansi-red-fg">InvalidDimensionException</span>: Embedding dimension 383 does not match collection dimensionality 384',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Adicionar-documentos-e-embeddings">Adicionar documentos e embeddings<a class="anchor-link" href="#Adicionar-documentos-e-embeddings"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 76" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O Chroma também permite adicionar documentos e embeddings ao mesmo tempo. Portanto, se isso for feito, ele não criará os embeddings do documento.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
      '          <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">"This is a Pytorch docs"</span><span class="p">],</span>',
      '          <span class="n">embeddings</span><span class="o">=</span><span class="n">new_embedding</span><span class="p">,</span>',
      '          <span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Pytorch source"</span><span class="p">}],</span>',
      '          <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id6"</span><span class="p">]</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>











      
      <section class="section-block-markdown-cell">
      <p>Se observarmos os embeddings do último elemento da coleção, veremos que eles são os que adicionamos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
          '    <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">"This is a Pytorch docs"</span><span class="p">],</span>',
          '    <span class="n">embeddings</span><span class="o">=</span><span class="n">new_embedding</span><span class="p">,</span>',
          '    <span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Pytorch source"</span><span class="p">}],</span>',
          '    <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id6"</span><span class="p">]</span>',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()[</span><span class="s1">\'embeddings\'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' ...,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0,',
          ' 1.0]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Consultas">Consultas<a class="anchor-link" href="#Consultas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 77" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Consultas-por-documentos">Consultas por documentos<a class="anchor-link" href="#Consultas-por-documentos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 78" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para fazer uma consulta, usamos o método <code>query</code>. Com o parâmetro <code>n_results</code>, podemos especificar quantos resultados queremos obter.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
          '    <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>',
          '    <span class="n">n_results</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>',
          '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'ids\': [[\'id1\']],',
          ' \'distances\': [[0.5389559268951416]],',
          ' \'metadatas\': [[{\'source\': \'Python source\'}]],',
          ' \'embeddings\': None,',
          ' \'documents\': [[\'This is a python docs\']],',
          ' \'uris\': None,',
          ' \'data\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se, em vez de <code>n_results = 1</code>, definirmos um valor maior, ele retornará mais resultados.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
          <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>
          <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
      <span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[100]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'ids': [['id1', 'id2', 'id4', 'id3', 'id5', 'id6']],
       'distances': [[0.5389559268951416,
         1.5743632316589355,
         1.578398585319519,
         1.59961998462677,
         384.56890869140625,
         384.56890869140625]],
       'metadatas': [[{opening_brace}'source': 'Python source'{closing_brace},
         {opening_brace}'source': 'JavaScript source'{closing_brace},
         {opening_brace}'source': 'Rust source'{closing_brace},
         {opening_brace}'source': 'Mojo source'{closing_brace},
         {opening_brace}'source': 'Only embeddings'{closing_brace},
         {opening_brace}'source': 'Pytorch source'{closing_brace}]],
       'embeddings': None,
       'documents': [['This is a python docs',
         'This is JavaScript docs',
         'This is Rust docs',
         'This is a Mojo docs',
         None,
         'This is a Pytorch docs']],
       'uris': None,
       'data': None{closing_brace}</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos filtrar por um valor de metadados com o argumento <code>where</code>.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
          <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>
          <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
          <span class="n">where</span><span class="o">=</span><span class="p">{opening_brace}</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Python source"</span><span class="p">{closing_brace}</span>
      <span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[100]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'ids': [['id1']],
       'distances': [[0.5389559268951416]],
       'metadatas': [[{opening_brace}'source': 'Python source'{closing_brace}]],
       'embeddings': None,
       'documents': [['This is a python docs']],
       'uris': None,
       'data': None{closing_brace}</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que apenas um resultado já foi retornado</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Também podemos filtrar pelo conteúdo do documento com o argumento <code>where_document</code>.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
          <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>
          <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
          <span class="n">where_document</span><span class="o">=</span><span class="p">{opening_brace}</span><span class="s2">"$contains"</span><span class="p">:</span> <span class="s2">"python"</span><span class="p">{closing_brace}</span>
      <span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[100]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'ids': [['id1']],
       'distances': [[0.5389559268951416]],
       'metadatas': [[{opening_brace}'source': 'Python source'{closing_brace}]],
       'embeddings': None,
       'documents': [['This is a python docs']],
       'uris': None,
       'data': None{closing_brace}</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mais tarde, falaremos mais sobre as possibilidades que temos aqui</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Quando fazemos uma consulta, podemos dizer quais dados queremos que sejam retornados, por exemplo, apenas os embeddings, apenas os metadados ou vários dados, especificando-os em uma lista usando o argumento <code>include</code>.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
          <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>
          <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
          <span class="n">include</span><span class="o">=</span><span class="p">[</span><span class="s2">"documents"</span><span class="p">,</span> <span class="s2">"distances"</span><span class="p">]</span>
      <span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[100]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'ids': [['id1', 'id2', 'id4', 'id3', 'id5', 'id6']],
       'distances': [[0.5389559268951416,
         1.5743632316589355,
         1.578398585319519,
         1.59961998462677,
         384.56890869140625,
         384.56890869140625]],
       'metadatas': None,
       'embeddings': None,
       'documents': [['This is a python docs',
         'This is JavaScript docs',
         'This is Rust docs',
         'This is a Mojo docs',
         None,
         'This is a Pytorch docs']],
       'uris': None,
       'data': None{closing_brace}</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que <code>metadatas</code> agora é <code>None</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="V%C3%A1rias-consultas-ao-mesmo-tempo">Várias consultas ao mesmo tempo<a class="anchor-link" href="#V%C3%A1rias-consultas-ao-mesmo-tempo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 79" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos consultar a coleção várias vezes ao mesmo tempo, passando uma lista para o parâmetro <code>query_texts</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
          '    <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>',
          '    <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
          '    <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>',
          '    <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
          '    <span class="n">where</span><span class="o">=</span><span class="p">{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Python source"</span><span class="p">}</span>',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
          '    <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>',
          '    <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
          '    <span class="n">where_document</span><span class="o">=</span><span class="p">{</span><span class="s2">"$contains"</span><span class="p">:</span> <span class="s2">"python"</span><span class="p">}</span>',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
          '    <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>',
          '    <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
          '    <span class="n">include</span><span class="o">=</span><span class="p">[</span><span class="s2">"documents"</span><span class="p">,</span> <span class="s2">"distances"</span><span class="p">]</span>',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
          '    <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"programming language"</span><span class="p">,</span> <span class="s2">"high level"</span><span class="p">,</span> <span class="s2">"multi propuse"</span><span class="p">],</span>',
          '    <span class="n">n_results</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>',
          '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6',
          'Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6',
          'Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6',
          'Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6',
          '{\'ids\': [[\'id1\'], [\'id1\'], [\'id3\']],',
          ' \'distances\': [[1.152251958847046], [1.654376745223999], [1.6786067485809326]],',
          ' \'metadatas\': [[{\'source\': \'Python source\'}],',
          '  [{\'source\': \'Python source\'}],',
          '  [{\'source\': \'Mojo source\'}]],',
          ' \'embeddings\': None,',
          ' \'documents\': [[\'This is a python docs\'],',
          '  [\'This is a python docs\'],',
          '  [\'This is a Mojo docs\']],',
          ' \'uris\': None,',
          ' \'data\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para cada consulta, ele retornou um resultado</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Isso é muito útil quando o banco de dados está hospedado em um servidor e somos cobrados por cada consulta que fazemos. Portanto, em vez de fazer uma consulta para cada pergunta que temos, fazemos uma consulta com todas as perguntas que temos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Consultas-para-incorpora%C3%A7%C3%B5es">Consultas para incorporações<a class="anchor-link" href="#Consultas-para-incorpora%C3%A7%C3%B5es"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 80" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Quando consultamos os documentos, o que o chroma faz é calcular a incorporação dos <code>textos de consulta</code> e procurar os documentos que mais se assemelham a essa incorporação. Mas se já tivermos a incorporação, podemos fazer a consulta diretamente com a incorporação.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro, vamos obter a incorporação de uma consulta com a mesma função de incorporação das coleções.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">query_texts</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"python language"</span><span class="p">]</span>',
          '<span class="n">query_embeddings</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">_embedding_function</span><span class="p">(</span><span class="n">query_texts</span><span class="p">)</span>',
          '<span class="n">query_embeddings</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[[-0.04816831275820732,',
          '  0.014662696048617363,',
          '  -0.031021444126963615,',
          '  0.008308809250593185,',
          '  -0.07176128774881363,',
          '  -0.10355626791715622,',
          '  0.06690476089715958,',
          '  0.04229631647467613,',
          '  -0.03681119903922081,',
          '  -0.04993892088532448,',
          '  0.03186540678143501,',
          '  0.015252595767378807,',
          '  0.0642094686627388,',
          '  0.018130118027329445,',
          '  0.016300885006785393,',
          '  -0.028082313016057014,',
          '  -0.03994889184832573,',
          '  0.023195551708340645,',
          '  0.004547565709799528,',
          '  -0.11764183640480042,',
          '  0.019792592152953148,',
          '  0.0496944822371006,',
          '  -0.013253907673060894,',
          '  0.03610404208302498,',
          '  0.030529780313372612,',
          '  -0.01815914921462536,',
          '  -0.009753326885402203,',
          '  0.03412770479917526,',
          '  0.03020440600812435,',
          '  ...',
          '  0.02079579420387745,',
          '  -0.00972712505608797,',
          '  0.13462257385253906,',
          '  0.15277136862277985,',
          '  -0.028574923053383827]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora podemos fazer a consulta com a incorporação</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
          '    <span class="n">query_embeddings</span><span class="o">=</span><span class="n">query_embeddings</span><span class="p">,</span>',
          '    <span class="n">n_results</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>',
          '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'ids\': [[\'id1\']],',
          ' \'distances\': [[0.6297433376312256]],',
          ' \'metadatas\': [[{\'source\': \'Python source\'}]],',
          ' \'embeddings\': None,',
          ' \'documents\': [[\'This is a python docs\']],',
          ' \'uris\': None,',
          ' \'data\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como antes, podemos obter mais resultados aumentando o valor do parâmetro <code>n_results</code> e podemos filtrar com os parâmetros <code>where</code> e <code>where_document</code>. Também podemos fazer várias consultas ao mesmo tempo e especificar quais dados queremos retornar com o parâmetro <code>include</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Observação: se tentarmos fazer uma consulta com uma incorporação de uma dimensão diferente das que já estão na coleção, receberemos um erro.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Recuperar-documentos-por-ID.">Recuperar documentos por <code>ID</code>.<a class="anchor-link" href="#Recuperar-documentos-por-ID."><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 81" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se soubermos o <code>ID</code> de um documento, poderemos recuperar o documento com o método <code>get</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">get</span><span class="p">(</span>',
          '    <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id1"</span><span class="p">],</span>',
          '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'ids\': [\'id1\'],',
          ' \'embeddings\': None,',
          ' \'metadatas\': [{\'source\': \'Python source\'}],',
          ' \'documents\': [\'This is a python docs\'],',
          ' \'uris\': None,',
          ' \'data\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Também é possível recuperar vários documentos de uma só vez.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">get</span><span class="p">(</span>',
          '    <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id1"</span><span class="p">,</span> <span class="s2">"id2"</span><span class="p">,</span> <span class="s2">"id3"</span><span class="p">],</span>',
          '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'ids\': [\'id1\', \'id2\', \'id3\'],',
          ' \'embeddings\': None,',
          ' \'metadatas\': [{\'source\': \'Python source\'},',
          '  {\'source\': \'JavaScript source\'},',
          '  {\'source\': \'Mojo source\'}],',
          ' \'documents\': [\'This is a python docs\',',
          '  \'This is JavaScript docs\',',
          '  \'This is a Mojo docs\'],',
          ' \'uris\': None,',
          ' \'data\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como antes, podemos filtrar com os argumentos <code>where</code> e <code>where_document</code>. Também podemos fazer várias consultas ao mesmo tempo e especificar quais dados queremos retornar com o parâmetro <code>include</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Filtragem">Filtragem<a class="anchor-link" href="#Filtragem"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 82" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vimos, você pode filtrar por metadados com o parâmetro <code>where</code> e pelo conteúdo do documento com o parâmetro <code>where_document</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Filtragem-por-metadados">Filtragem por metadados<a class="anchor-link" href="#Filtragem-por-metadados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 83" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como os metadados entrarão em mim como um dicionário</p>
      <div class="highlight"><pre><span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>
          <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">"This is a python docs"</span><span class="p">,</span> <span class="s2">"This is JavaScript docs"</span><span class="p">],</span>
          <span class="n">metadatas</span><span class="o">=</span><span class="p">[{opening_brace}</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Python source"</span><span class="p">{closing_brace},</span> <span class="p">{opening_brace}</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"JavaScript source"</span><span class="p">{closing_brace}],</span>
          <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id1"</span><span class="p">,</span> <span class="s2">"id2"</span><span class="p">]</span>
      <span class="p">)</span>
      <span class="err">```</span>
      
      <span class="n">A</span> <span class="n">primeira</span> <span class="n">coisa</span> <span class="n">que</span> <span class="n">temos</span> <span class="n">de</span> <span class="n">fazer</span> <span class="n">é</span> <span class="n">indicar</span> <span class="n">a</span> <span class="n">chave</span> <span class="n">dos</span> <span class="n">metadados</span> <span class="n">pelos</span> <span class="n">quais</span> <span class="n">queremos</span> <span class="n">filtrar</span><span class="o">.</span> <span class="n">Em</span> <span class="n">seguida</span><span class="p">,</span> <span class="n">temos</span> <span class="n">de</span> <span class="n">colocar</span> <span class="n">um</span> <span class="n">operador</span> <span class="n">e</span> <span class="n">o</span> <span class="n">valor</span>
      
      <span class="err">````</span><span class="n">python</span>
      <span class="p">{opening_brace}</span>
          <span class="s2">"metadata_field"</span><span class="p">:</span> <span class="p">{opening_brace}</span>
              <span class="o">&lt;</span><span class="n">Operador</span><span class="o">&gt;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">Valor</span><span class="o">&gt;.</span>
          <span class="p">{closing_brace}</span>
      <span class="p">{closing_brace}</span>
      <span class="err">```</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Os valores possíveis do oerador são</p>
      <p><strong>$eq</strong> - igual a (string, int, float)
       <strong>$ne</strong> - não é igual a (string, int, float)
       <strong>$gt</strong> - maior que (int, float)
       <strong>$gte</strong> - maior ou igual a (int, float)
       <strong>$lt</strong> - menor que (int, float)
       <strong>$lte</strong> - menor que ou igual a (int, float)</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos dar uma olhada em uma consulta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
          '    <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>',
          '    <span class="n">n_results</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>',
          '    <span class="n">where</span><span class="o">=</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"source"</span><span class="p">:</span> ',
          '        <span class="p">{</span>',
          '            <span class="s2">"$eq"</span><span class="p">:</span> <span class="s2">"Python source"</span>',
          '        <span class="p">}</span>',
          '    <span class="p">}</span>',
          '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'ids\': [[\'id1\']],',
          ' \'distances\': [[0.5389559268951416]],',
          ' \'metadatas\': [[{\'source\': \'Python source\'}]],',
          ' \'embeddings\': None,',
          ' \'documents\': [[\'This is a python docs\']],',
          ' \'uris\': None,',
          ' \'data\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se não colocarmos o operador, o padrão será <code>$eq</code>, ou seja, isto</p>
      <div class="highlight"><pre><span></span><span class="p">{opening_brace}</span>
          <span class="s2">"metadata_field"</span><span class="p">:</span> <span class="p">{opening_brace}</span>
              <span class="o">&lt;</span><span class="s2">"$eq"</span><span class="o">&gt;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;.</span>
          <span class="p">{closing_brace}</span>
      <span class="p">{closing_brace}</span>
      <span class="err">```</span>
      
      <span class="n">É</span> <span class="n">o</span> <span class="n">mesmo</span> <span class="n">que</span> <span class="n">isto</span>
      
      <span class="err">````</span><span class="n">python</span>
      <span class="p">{opening_brace}</span>
          <span class="s2">"metadata_field"</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;.</span>
      <span class="p">{closing_brace}</span>
      <span class="err">```</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Observação**: O Chroma só pesquisará dados que tenham os metadados <code>source</code>; por exemplo, se você pesquisar <code>where={opening_brace}"version": {opening_brace}"$ne": 1{closing_brace}{closing_brace}</code>, ele só retornará dados que tenham uma chave <code>version</code> em seus metadados e que não sejam 1.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Filtragem-por-conte%C3%BAdo-do-documento">Filtragem por conteúdo do documento<a class="anchor-link" href="#Filtragem-por-conte%C3%BAdo-do-documento"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 84" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ao filtrar pelo conteúdo do documento, temos duas chaves possíveis: <code>$contains</code> e <code>$not_contains</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por exemplo, procuramos dados na coleção em que a palavra "python" aparece em seu documento.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
          <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>
          <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
          <span class="n">where_document</span><span class="o">=</span><span class="p">{opening_brace}</span><span class="s2">"$contains"</span><span class="p">:</span> <span class="s2">"python"</span><span class="p">{closing_brace}</span>
      <span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[100]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'ids': [['id1']],
       'distances': [[0.5389559268951416]],
       'metadatas': [[{opening_brace}'source': 'Python source'{closing_brace}]],
       'embeddings': None,
       'documents': [['This is a python docs']],
       'uris': None,
       'data': None{closing_brace}</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>E todos os dados na coleção em que a palavra <code>python</code> não aparece em seu documento</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
          <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>
          <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
          <span class="n">where_document</span><span class="o">=</span><span class="p">{opening_brace}</span><span class="s2">"$not_contains"</span><span class="p">:</span> <span class="s2">"python"</span><span class="p">{closing_brace}</span>
      <span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[100]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'ids': [['id2', 'id4', 'id3', 'id6']],
       'distances': [[1.5743632316589355,
         1.578398585319519,
         1.59961998462677,
         384.56890869140625]],
       'metadatas': [[{opening_brace}'source': 'JavaScript source'{closing_brace},
         {opening_brace}'source': 'Rust source'{closing_brace},
         {opening_brace}'source': 'Mojo source'{closing_brace},
         {opening_brace}'source': 'Pytorch source'{closing_brace}]],
       'embeddings': None,
       'documents': [['This is JavaScript docs',
         'This is Rust docs',
         'This is a Mojo docs',
         'This is a Pytorch docs']],
       'uris': None,
       'data': None{closing_brace}</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Também podemos usar os operadores lógicos <code>$and</code> e <code>$or</code> para fazer consultas mais complexas.</p>
      <div class="highlight"><pre><span></span><span class="p">{opening_brace}</span>
          <span class="s2">"$e"</span><span class="p">:</span> <span class="p">[</span>
              <span class="p">{opening_brace}</span>
                  <span class="o">&lt;</span><span class="n">Operador</span><span class="o">&gt;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">Valor</span><span class="o">&gt;.</span>
              <span class="p">{closing_brace},</span>
              <span class="p">{opening_brace}</span>
                  <span class="o">&lt;</span><span class="n">Operador</span><span class="o">&gt;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">Valor</span><span class="o">&gt;.</span>
              <span class="p">{closing_brace}</span>
      
      <span class="p">{closing_brace}</span>
      <span class="err">```</span>
      
      <span class="err">````</span><span class="n">python</span>
      <span class="p">{opening_brace}</span>
          <span class="s2">"$or"</span><span class="p">:</span> <span class="p">[</span>
              <span class="p">{opening_brace}</span>
                  <span class="o">&lt;</span><span class="n">Operador</span><span class="o">&gt;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">Valor</span><span class="o">&gt;.</span>
              <span class="p">{closing_brace},</span>
              <span class="p">{opening_brace}</span>
                  <span class="o">&lt;</span><span class="n">Operador</span><span class="o">&gt;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">Valor</span><span class="o">&gt;.</span>
              <span class="p">{closing_brace}</span>
      
      <span class="p">{closing_brace}</span>
      <span class="err">```</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por exemplo, pesquisamos todos os documentos que contêm as palavras <code>python</code> e <code>docs</code>.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
          <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>
          <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
          <span class="n">where_document</span><span class="o">=</span>
          <span class="p">{opening_brace}</span>
              <span class="s2">"$and"</span><span class="p">:</span> <span class="p">[</span>
                  <span class="p">{opening_brace}</span><span class="s2">"$contains"</span><span class="p">:</span> <span class="s2">"python"</span><span class="p">{closing_brace},</span>
                  <span class="p">{opening_brace}</span><span class="s2">"$contains"</span><span class="p">:</span> <span class="s2">"docs"</span><span class="p">{closing_brace},</span>
              <span class="p">],</span>
          <span class="p">{closing_brace},</span>
      <span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[100]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'ids': [['id1']],
       'distances': [[0.5389559268951416]],
       'metadatas': [[{opening_brace}'source': 'Python source'{closing_brace}]],
       'embeddings': None,
       'documents': [['This is a python docs']],
       'uris': None,
       'data': None{closing_brace}</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Atualizar-dados">Atualizar dados<a class="anchor-link" href="#Atualizar-dados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 85" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Qualquer item de dados pode ser atualizado com o método update.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '          <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>',
      '          <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
      '          <span class="n">where_document</span><span class="o">=</span><span class="p">{</span><span class="s2">"$contains"</span><span class="p">:</span> <span class="s2">"python"</span><span class="p">}</span>',
      '      <span class="p">)</span>',
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '          <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>',
      '          <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
      '          <span class="n">where_document</span><span class="o">=</span><span class="p">{</span><span class="s2">"$not_contains"</span><span class="p">:</span> <span class="s2">"python"</span><span class="p">}</span>',
      '      <span class="p">)</span>',
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '          <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>',
      '          <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
      '          <span class="n">where_document</span><span class="o">=</span>',
      '          <span class="p">{</span>',
      '              <span class="s2">"$and"</span><span class="p">:</span> <span class="p">[</span>',
      '                  <span class="p">{</span><span class="s2">"$contains"</span><span class="p">:</span> <span class="s2">"python"</span><span class="p">},</span>',
      '                  <span class="p">{</span><span class="s2">"$contains"</span><span class="p">:</span> <span class="s2">"docs"</span><span class="p">},</span>',
      '              <span class="p">],</span>',
      '          <span class="p">},</span>',
      '      <span class="p">)</span>',
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>',
      '          <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id1"</span><span class="p">],</span>',
      '          <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">"This is a updated Python docs"</span><span class="p">]</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>









      
      <section class="section-block-markdown-cell">
      <p>Vamos ver se ela foi atualizada</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
          <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>
          <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
          <span class="n">where_document</span><span class="o">=</span><span class="p">{opening_brace}</span><span class="s2">"$contains"</span><span class="p">:</span> <span class="s2">"Python"</span><span class="p">{closing_brace}</span>
      <span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[100]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'ids': [['id1']],
       'distances': [[0.8247963190078735]],
       'metadatas': [[{opening_brace}'source': 'Python source'{closing_brace}]],
       'embeddings': None,
       'documents': [['This is a updated Python docs']],
       'uris': None,
       'data': None{closing_brace}</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Observação: se você tentar atualizar um <code>ID</code> que não existe, ocorrerá um erro.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Observação: se você tentar atualizar uma incorporação com outra incorporação de tamanho diferente, ocorrerá um erro.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Atualizar-ou-adicionar-dados">Atualizar ou adicionar dados<a class="anchor-link" href="#Atualizar-ou-adicionar-dados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 86" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com o método <code>upsert</code>, podemos atualizar um dado se ele já existir ou adicioná-lo se ele não existir.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '          <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>',
      '          <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
      '          <span class="n">where_document</span><span class="o">=</span><span class="p">{</span><span class="s2">"$contains"</span><span class="p">:</span> <span class="s2">"python"</span><span class="p">}</span>',
      '      <span class="p">)</span>',
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '          <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>',
      '          <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
      '          <span class="n">where_document</span><span class="o">=</span><span class="p">{</span><span class="s2">"$not_contains"</span><span class="p">:</span> <span class="s2">"python"</span><span class="p">}</span>',
      '      <span class="p">)</span>',
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '          <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>',
      '          <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
      '          <span class="n">where_document</span><span class="o">=</span>',
      '          <span class="p">{</span>',
      '              <span class="s2">"$and"</span><span class="p">:</span> <span class="p">[</span>',
      '                  <span class="p">{</span><span class="s2">"$contains"</span><span class="p">:</span> <span class="s2">"python"</span><span class="p">},</span>',
      '                  <span class="p">{</span><span class="s2">"$contains"</span><span class="p">:</span> <span class="s2">"docs"</span><span class="p">},</span>',
      '              <span class="p">],</span>',
      '          <span class="p">},</span>',
      '      <span class="p">)</span>',
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>',
      '          <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id1"</span><span class="p">],</span>',
      '          <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">"This is a updated Python docs"</span><span class="p">]</span>',
      '      <span class="p">)</span>',
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
      '          <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>',
      '          <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
      '          <span class="n">where_document</span><span class="o">=</span><span class="p">{</span><span class="s2">"$contains"</span><span class="p">:</span> <span class="s2">"Python"</span><span class="p">}</span>',
      '      <span class="p">)</span>',
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">upsert</span><span class="p">(</span>',
      '          <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id6"</span><span class="p">],</span>',
      '          <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">"This is a Pytorch docs"</span><span class="p">],</span>',
      '          <span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Pytorch source"</span><span class="p">}],</span>   ',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>










      
      <section class="section-block-markdown-cell">
      <p>Vamos ver se ele foi adicionado à coleção</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
          '    <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>',
          '    <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
          '    <span class="n">where_document</span><span class="o">=</span><span class="p">{</span><span class="s2">"$contains"</span><span class="p">:</span> <span class="s2">"python"</span><span class="p">}</span>',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
          '    <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>',
          '    <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
          '    <span class="n">where_document</span><span class="o">=</span><span class="p">{</span><span class="s2">"$not_contains"</span><span class="p">:</span> <span class="s2">"python"</span><span class="p">}</span>',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
          '    <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>',
          '    <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
          '    <span class="n">where_document</span><span class="o">=</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"$and"</span><span class="p">:</span> <span class="p">[</span>',
          '            <span class="p">{</span><span class="s2">"$contains"</span><span class="p">:</span> <span class="s2">"python"</span><span class="p">},</span>',
          '            <span class="p">{</span><span class="s2">"$contains"</span><span class="p">:</span> <span class="s2">"docs"</span><span class="p">},</span>',
          '        <span class="p">],</span>',
          '    <span class="p">},</span>',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>',
          '    <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id1"</span><span class="p">],</span>',
          '    <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">"This is a updated Python docs"</span><span class="p">]</span>',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>',
          '    <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span>',
          '    <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>',
          '    <span class="n">where_document</span><span class="o">=</span><span class="p">{</span><span class="s2">"$contains"</span><span class="p">:</span> <span class="s2">"Python"</span><span class="p">}</span>',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">upsert</span><span class="p">(</span>',
          '    <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id6"</span><span class="p">],</span>',
          '    <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">"This is a Pytorch docs"</span><span class="p">],</span>',
          '    <span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Pytorch source"</span><span class="p">}],</span>   ',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6',
          'Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6',
          'Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6',
          'Number of requested results 10 is greater than number of elements in index 6, updating n_results = 6',
          '{\'ids\': [\'id1\', \'id2\', \'id3\', \'id4\', \'id5\', \'id6\'],',
          ' \'embeddings\': [[-0.08374718576669693,',
          '   0.01027572900056839,',
          '   -0.04819200187921524,',
          '   0.01758415624499321,',
          '   0.013158757239580154,',
          '   -0.11435151100158691,',
          '   -0.024248722940683365,',
          '   -0.01319972239434719,',
          '   -0.09626100957393646,',
          '   -0.010561048053205013,',
          '   0.09369225800037384,',
          '   0.06017905846238136,',
          '   0.031283188611269,',
          '   0.014855983667075634,',
          '   -0.0015984248602762818,',
          '   0.023238031193614006,',
          '   -0.04709107056260109,',
          '   -0.007838696241378784,',
          '   0.012870412319898605,',
          '   -0.028354981914162636,',
          '   -0.007653804495930672,',
          '   0.09018168598413467,',
          '   0.060235824435949326,',
          '   0.0005205210763961077,',
          '   ...',
          '   0.014388148672878742]],',
          ' \'metadatas\': [{\'source\': \'Python source\'},',
          '  {\'source\': \'JavaScript source\'},',
          '  {\'source\': \'Mojo source\'},',
          '  {\'source\': \'Rust source\'},',
          '  {\'source\': \'Only embeddings\'},',
          '  {\'source\': \'Pytorch source\'}],',
          ' \'documents\': [\'This is a updated Python docs\',',
          '  \'This is JavaScript docs\',',
          '  \'This is a Mojo docs\',',
          '  \'This is Rust docs\',',
          '  None,',
          '  \'This is a Pytorch docs\'],',
          ' \'uris\': None,',
          ' \'data\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que sim</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Excluir-dados">Excluir dados<a class="anchor-link" href="#Excluir-dados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 87" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos excluir dados de uma coleção com o método <code>delete</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Removeremos os dados com <code>ID</code> <code>id5</code>, que é o que adicionamos com sua incorporação de todos os dados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span>',
      '          <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id5"</span><span class="p">]</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>








      
      <section class="section-block-markdown-cell">
      <p>Vamos ver se ele foi removido</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span>',
          '    <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s2">"id5"</span><span class="p">]</span>',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'ids\': [\'id1\', \'id2\', \'id3\', \'id4\', \'id6\'],',
          ' \'embeddings\': [[-0.08374718576669693,',
          '   0.01027572900056839,',
          '   -0.04819200187921524,',
          '   0.01758415624499321,',
          '   0.013158757239580154,',
          '   -0.11435151100158691,',
          '   -0.024248722940683365,',
          '   -0.01319972239434719,',
          '   -0.09626100957393646,',
          '   -0.010561048053205013,',
          '   0.09369225800037384,',
          '   0.06017905846238136,',
          '   0.031283188611269,',
          '   0.014855983667075634,',
          '   -0.0015984248602762818,',
          '   0.023238031193614006,',
          '   -0.04709107056260109,',
          '   -0.007838696241378784,',
          '   0.012870412319898605,',
          '   -0.028354981914162636,',
          '   -0.007653804495930672,',
          '   0.09018168598413467,',
          '   0.060235824435949326,',
          '   0.0005205210763961077,',
          '   ...',
          '   0.07033486664295197,',
          '   0.014388148672878742]],',
          ' \'metadatas\': [{\'source\': \'Python source\'},',
          '  {\'source\': \'JavaScript source\'},',
          '  {\'source\': \'Mojo source\'},',
          '  {\'source\': \'Rust source\'},',
          '  {\'source\': \'Pytorch source\'}],',
          ' \'documents\': [\'This is a updated Python docs\',',
          '  \'This is JavaScript docs\',',
          '  \'This is a Mojo docs\',',
          '  \'This is Rust docs\',',
          '  \'This is a Pytorch docs\'],',
          ' \'uris\': None,',
          ' \'data\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que não é mais</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Embeddings">Embeddings<a class="anchor-link" href="#Embeddings"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 88" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Conforme mencionado acima, podemos usar diferentes funções de embeddings e, se nenhuma for especificada, ele usará <code>all-MiniLM-L6-v2</code>. Na página chroma <a href="https://docs.trychroma.com/docs/embeddings/embedding-functions" target="_blank" rel="nofollow noreferrer">embeddings documentation</a>, podemos ver as diferentes funções de embeddings que podemos usar. Como isso pode mudar e algumas delas são pagas e exigem uma chave de API, explicaremos apenas como usar as do HuggingFace.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro, definimos a função de incorporação</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">chromadb.utils.embedding_functions</span> <span class="k">as</span> <span class="nn">embedding_functions</span>',
      '      ',
      '      <span class="n">huggingface_ef</span> <span class="o">=</span> <span class="n">embedding_functions</span><span class="o">.</span><span class="n">HuggingFaceEmbeddingFunction</span><span class="p">(</span>',
      '          <span class="n">api_key</span><span class="o">=</span><span class="s2">"YOUR_API_KEY"</span><span class="p">,</span>',
      '          <span class="n">model_name</span><span class="o">=</span><span class="s2">"sentence-transformers/all-mpnet-base-v2"</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>











      
      <section class="section-block-markdown-cell">
      <p>No meu caso, utilizo o <code>sentence-transformers/all-mpnet-base-v2</code>, que é o mais baixado dos <code>sentence-transformers</code> no momento em que escrevo esta postagem.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para adicionar agora a função de incorporação à coleção, precisamos adicionar o argumento <code>metadata={opening_brace}"embedding": &lt;function&gt;{closing_brace}</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">chromadb.utils.embedding_functions</span> <span class="k">as</span> <span class="nn">embedding_functions</span>',
      '      ',
      '      <span class="n">huggingface_ef</span> <span class="o">=</span> <span class="n">embedding_functions</span><span class="o">.</span><span class="n">HuggingFaceEmbeddingFunction</span><span class="p">(</span>',
      '          <span class="n">api_key</span><span class="o">=</span><span class="s2">"YOUR_API_KEY"</span><span class="p">,</span>',
      '          <span class="n">model_name</span><span class="o">=</span><span class="s2">"sentence-transformers/all-mpnet-base-v2"</span>',
      '      <span class="p">)</span>',
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span>',
      '          <span class="n">name</span><span class="o">=</span><span class="s2">"colection_huggingface"</span><span class="p">,</span>',
      '          <span class="n">embedding_function</span><span class="o">=</span><span class="n">huggingface_ef</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>









      
      <section class="section-block-markdown-cell">
      <p>Podemos verificar se adicionamos a nova função de incorporação calculando as incorporações de uma palavra.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">chromadb.utils.embedding_functions</span> <span class="k">as</span> <span class="nn">embedding_functions</span>',
          '',
          '<span class="n">huggingface_ef</span> <span class="o">=</span> <span class="n">embedding_functions</span><span class="o">.</span><span class="n">HuggingFaceEmbeddingFunction</span><span class="p">(</span>',
          '    <span class="n">api_key</span><span class="o">=</span><span class="s2">"YOUR_API_KEY"</span><span class="p">,</span>',
          '    <span class="n">model_name</span><span class="o">=</span><span class="s2">"sentence-transformers/all-mpnet-base-v2"</span>',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span>',
          '    <span class="n">name</span><span class="o">=</span><span class="s2">"colection_huggingface"</span><span class="p">,</span>',
          '    <span class="n">embedding_function</span><span class="o">=</span><span class="n">huggingface_ef</span>',
          '<span class="p">)</span>',
          '</span><span class="n">embedding</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">_embedding_function</span><span class="p">([</span><span class="s2">"python"</span><span class="p">])</span>',
          '<span class="nb">len</span><span class="p">(</span><span class="n">embedding</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">embedding</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(1, 768)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O comprimento da incorporação é de 768</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se agora calcularmos a incorporação com a função de incorporação da coleção anterior</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"my_collection"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">get_collection</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"my_collection"</span><span class="p">)</span>',
          '</span><span class="n">embedding</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">_embedding_function</span><span class="p">([</span><span class="s2">"python"</span><span class="p">])</span>',
          '<span class="nb">len</span><span class="p">(</span><span class="n">embedding</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">embedding</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(1, 384)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que agora o comprimento da incorporação é 384, ou seja, usamos uma nova função de incorporação antes.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Multimodalidade">Multimodalidade<a class="anchor-link" href="#Multimodalidade"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 89" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos adicionar embeddings de imagem, pois o chroma tem o <a href="https://github.com/mlfoundations/open_clip" target="_blank" rel="nofollow noreferrer">OpenCLIP</a> incorporado. O <a href="https://github.com/mlfoundations/open_clip">OpenCLIP</a> é uma implementação de código aberto do <a href="https://github.com/openai/CLIP">CLIP</a> (Contrastive Language-Image Pre-Training), que é uma rede neural OpenAI capaz de fornecer uma descrição de uma imagem.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para usar o OpenCLIP, temos que instalá-lo com o pip</p>
      <div class="highlight"><pre><span></span>pip<span class="w"> </span>install<span class="w"> </span>open-clip-torch
      <span class="sb">```</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Depois de instalado, podemos usá-lo para criar embeddings da seguinte imagem</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="chroma db - python mixture" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/chromadb_dalle3.webp" width="1024" height="1024"/></p>
      <p>Eu o tenho em meu caminho local <code>../images/chromadb_dalle3.webp</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">chromadb.utils.embedding_functions</span> <span class="kn">import</span>  <span class="n">OpenCLIPEmbeddingFunction</span>',
          '',
          '<span class="n">embedding_function</span> <span class="o">=</span> <span class="n">OpenCLIPEmbeddingFunction</span><span class="p">()</span>',
          '<span class="n">image</span> <span class="o">=</span> <span class="s2">"../images/chromadb_dalle3.webp"</span>',
          '<span class="n">embedding</span> <span class="o">=</span> <span class="n">embedding_function</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>',
          '<span class="nb">len</span><span class="p">(</span><span class="n">embedding</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">embedding</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(30, 512)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, ele cria uma incorporação de tamanho 30x512.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O Chroma também vem com um carregador de imagens.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">chromadb.utils.data_loaders</span> <span class="kn">import</span> <span class="n">ImageLoader</span>',
          '<span class="n">data_loader</span> <span class="o">=</span> <span class="n">ImageLoader</span><span class="p">()</span>',
          '<span class="n">data</span> <span class="o">=</span> <span class="n">data_loader</span><span class="o">.</span><span class="n">_load_image</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>',
          '<span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">data</span><span class="o">.</span><span class="n">shape</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(numpy.ndarray, (1024, 1024, 3))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Portanto, podemos criar uma coleção multimodal com essa função de incorporação e o carregador de imagens.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span>',
      '          <span class="n">name</span><span class="o">=</span><span class="s2">"multimodal_collection"</span><span class="p">,</span>',
      '          <span class="n">embedding_function</span><span class="o">=</span><span class="n">embedding_function</span><span class="p">,</span>',
      '          <span class="n">data_loader</span><span class="o">=</span><span class="n">data_loader</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>










      
      <section class="section-block-markdown-cell">
      <p>E podemos adicionar os embeddings das imagens a ele.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span>',
      '          <span class="n">name</span><span class="o">=</span><span class="s2">"multimodal_collection"</span><span class="p">,</span>',
      '          <span class="n">embedding_function</span><span class="o">=</span><span class="n">embedding_function</span><span class="p">,</span>',
      '          <span class="n">data_loader</span><span class="o">=</span><span class="n">data_loader</span>',
      '      <span class="p">)</span>',
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
      '          <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s1">\'id1\'</span><span class="p">],</span>',
      '          <span class="n">images</span><span class="o">=</span><span class="p">[</span><span class="n">image</span><span class="p">]</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>









      
      <section class="section-block-markdown-cell">
      <p>Vamos ver o que ele salvou</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span> <span class="o">=</span> <span class="n">chroma_client</span><span class="o">.</span><span class="n">create_collection</span><span class="p">(</span>',
          '    <span class="n">name</span><span class="o">=</span><span class="s2">"multimodal_collection"</span><span class="p">,</span>',
          '    <span class="n">embedding_function</span><span class="o">=</span><span class="n">embedding_function</span><span class="p">,</span>',
          '    <span class="n">data_loader</span><span class="o">=</span><span class="n">data_loader</span>',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
          '    <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s1">\'id1\'</span><span class="p">],</span>',
          '    <span class="n">images</span><span class="o">=</span><span class="p">[</span><span class="n">image</span><span class="p">]</span>',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'ids\': [\'id1\'],',
          ' \'embeddings\': [[-0.014372998848557472,',
          '   0.0063015008345246315,',
          '   -0.03794914484024048,',
          '   -0.028725482523441315,',
          '   -0.014304812066257,',
          '   -0.04323698952794075,',
          '   0.008670451119542122,',
          '   -0.016066772863268852,',
          '   -0.02365742437541485,',
          '   0.07881983369588852,',
          '   0.022775636985898018,',
          '   0.004407387692481279,',
          '   0.058205753564834595,',
          '   -0.02389293536543846,',
          '   -0.027586588636040688,',
          '   0.05778728798031807,',
          '   -0.2631031572818756,',
          '   0.044124454259872437,',
          '   0.010588622651994228,',
          '   -0.035578884184360504,',
          '   -0.041719693690538406,',
          '   -0.0033654430881142616,',
          '   -0.04731074720621109,',
          '   -0.0019943572115153074,',
          '   ...',
          '   0.04397008568048477,',
          '   0.04396628588438034]],',
          ' \'metadatas\': [None],',
          ' \'documents\': [None],',
          ' \'uris\': None,',
          ' \'data\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O Chroma não armazena as imagens, apenas os embeddings, portanto, para não perder a relação entre os embeddings e as imagens, podemos salvar o caminho para as imagens nos metadados. Vamos usar o método <code>update</code> para adicionar o caminho à imagem</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>',
      '          <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s1">\'id1\'</span><span class="p">],</span>',
      '          <span class="n">images</span><span class="o">=</span><span class="p">[</span><span class="n">image</span><span class="p">],</span>',
      '          <span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">"source"</span><span class="p">:</span> <span class="n">image</span><span class="p">}]</span>',
      '      <span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>










      
      <section class="section-block-markdown-cell">
      <p>Se voltarmos e olharmos para o que a coleção tem reservado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>',
          '    <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s1">\'id1\'</span><span class="p">],</span>',
          '    <span class="n">images</span><span class="o">=</span><span class="p">[</span><span class="n">image</span><span class="p">],</span>',
          '    <span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">"source"</span><span class="p">:</span> <span class="n">image</span><span class="p">}]</span>',
          '<span class="p">)</span>',
          '</span><span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'ids\': [\'id1\'],',
          ' \'embeddings\': [[-0.014372998848557472,',
          '   0.0063015008345246315,',
          '   -0.03794914484024048,',
          '   -0.028725482523441315,',
          '   -0.014304812066257,',
          '   -0.04323698952794075,',
          '   0.008670451119542122,',
          '   -0.016066772863268852,',
          '   -0.02365742437541485,',
          '   0.07881983369588852,',
          '   0.022775636985898018,',
          '   0.004407387692481279,',
          '   0.058205753564834595,',
          '   -0.02389293536543846,',
          '   -0.027586588636040688,',
          '   0.05778728798031807,',
          '   -0.2631031572818756,',
          '   0.044124454259872437,',
          '   0.010588622651994228,',
          '   -0.035578884184360504,',
          '   -0.041719693690538406,',
          '   -0.0033654430881142616,',
          '   -0.04731074720621109,',
          '   -0.0019943572115153074,',
          '   ...',
          '   0.04397008568048477,',
          '   0.04396628588438034]],',
          ' \'metadatas\': [{\'source\': \'../images/chromadb_dalle3.webp\'}],',
          ' \'documents\': [None],',
          ' \'uris\': None,',
          ' \'data\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como a coleção é multimodal, podemos adicionar documentos a ela como antes.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">collection</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>',
          '    <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s1">\'id2\'</span><span class="p">,</span> <span class="s1">\'id3\'</span><span class="p">],</span>',
          '    <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="s2">"This is a python docs"</span><span class="p">,</span> <span class="s2">"This is JavaScript docs"</span><span class="p">],</span>',
          '    <span class="n">metadatas</span><span class="o">=</span><span class="p">[{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"Python source"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"source"</span><span class="p">:</span> <span class="s2">"JavaScript source"</span><span class="p">}]</span>',
          '<span class="p">)</span>',
          '<span class="n">collection</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'ids\': [\'id1\', \'id2\', \'id3\'],',
          ' \'embeddings\': [[-0.014372998848557472,',
          '   0.0063015008345246315,',
          '   -0.03794914484024048,',
          '   -0.028725482523441315,',
          '   -0.014304812066257,',
          '   -0.04323698952794075,',
          '   0.008670451119542122,',
          '   -0.016066772863268852,',
          '   -0.02365742437541485,',
          '   0.07881983369588852,',
          '   0.022775636985898018,',
          '   0.004407387692481279,',
          '   0.058205753564834595,',
          '   -0.02389293536543846,',
          '   -0.027586588636040688,',
          '   0.05778728798031807,',
          '   -0.2631031572818756,',
          '   0.044124454259872437,',
          '   0.010588622651994228,',
          '   -0.035578884184360504,',
          '   -0.041719693690538406,',
          '   -0.0033654430881142616,',
          '   -0.04731074720621109,',
          '   -0.0019943572115153074,',
          '   ...',
          '   -0.061795610934495926,',
          '   -0.02433035336434841]],',
          ' \'metadatas\': [{\'source\': \'../images/chromadb_dalle3.webp\'},',
          '  {\'source\': \'Python source\'},',
          '  {\'source\': \'JavaScript source\'}],',
          ' \'documents\': [None, \'This is a python docs\', \'This is JavaScript docs\'],',
          ' \'uris\': None,',
          ' \'data\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por fim, podemos fazer consultas com texto</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
          <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="s2">"persona trabajando en una mesa"</span><span class="p">],</span>
      <span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>WARNING:chromadb.segment.impl.vector.local_hnsw:Number of requested results 10 is greater than number of elements in index 3, updating n_results = 3
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[59]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'ids': [['id2', 'id1', 'id3']],
       'distances': [[1.1276676654815674, 1.1777206659317017, 1.2047353982925415]],
       'metadatas': [[{opening_brace}'source': 'Python source'{closing_brace},
         {opening_brace}'source': '../images/chromadb_dalle3.webp'{closing_brace},
         {opening_brace}'source': 'JavaScript source'{closing_brace}]],
       'embeddings': None,
       'documents': [['This is a python docs', None, 'This is JavaScript docs']],
       'uris': None,
       'data': None{closing_brace}</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com o texto, não obtivemos a imagem como o primeiro resultado, se eu seguir a documentação do python</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mas também podemos criá-las com imagens. Neste caso, vou fazer isso com esta imagem</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="chroma logo" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/chromadb_elegant.webp" width="1024" height="1024"/></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">query_image</span> <span class="o">=</span> <span class="s2">"https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/chromadb_elegant.webp"</span>
      <span class="n">collection</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
          <span class="n">query_images</span><span class="o">=</span><span class="p">[</span><span class="n">query_image</span><span class="p">],</span>
      <span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>WARNING:chromadb.segment.impl.vector.local_hnsw:Number of requested results 10 is greater than number of elements in index 3, updating n_results = 3
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[60]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'ids': [['id1', 'id2', 'id3']],
       'distances': [[0.6684874296188354, 0.9450105428695679, 1.0639115571975708]],
       'metadatas': [[{opening_brace}'source': '../images/chromadb_dalle3.webp'{closing_brace},
         {opening_brace}'source': 'Python source'{closing_brace},
         {opening_brace}'source': 'JavaScript source'{closing_brace}]],
       'embeddings': None,
       'documents': [[None, 'This is a python docs', 'This is JavaScript docs']],
       'uris': None,
       'data': None{closing_brace}</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora, ele apresenta como primeiro resultado a imagem que salvamos</p>
      </section>
      






    </div>

  </section>

</PostLayout>
