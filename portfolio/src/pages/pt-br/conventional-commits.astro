---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Conventional commits';
const end_url = 'conventional-commits';
const description = 'üò† Seus commits parecem escritos em uma l√≠ngua alien√≠gena? üëΩ Junte-se ao clube! üòÖ Aprenda Conventional Commits em Python e pare de tortura sua equipe com mensagens enigm√°ticas. git-changelog e commitizen ser√£o seus novos melhores amigos. ü§ù';
const keywords = 'conventional commits, commitizen, git-changelog, changelog, git, gitmoji, vscode, plugin, conventional commit';
const languaje = 'PT';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/conventional-commits.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=686
    image_height=386
    image_extension=webp
    article_date=2024-10-16+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#O que sao os conventional commits?"><h2>O que s√£o os conventional commits?</h2></a>
      <a class="anchor-link" href="#Formato das Mensagens de Commit"><h3>Formato das Mensagens de Commit</h3></a>
      <a class="anchor-link" href="#Tipo type"><h4>Tipo <code>type</code></h4></a>
      <a class="anchor-link" href="#√Çmbito scope"><h4>√Çmbito <code>scope</code></h4></a>
      <a class="anchor-link" href="#Descri√ß√£o description"><h4>Descri√ß√£o <code>description</code></h4></a>
      <a class="anchor-link" href="#Corpo body"><h4>Corpo <code>body</code></h4></a>
      <a class="anchor-link" href="#Rodap√© footer"><h4>Rodap√© <code>footer</code></h4></a>
      <a class="anchor-link" href="#Beneficios dos Conventional Commits"><h3>Benef√≠cios dos Conventional Commits</h3></a>
      <a class="anchor-link" href="#Exemplos praticos"><h3>Exemplos pr√°ticos</h3></a>
      <a class="anchor-link" href="#Ferramentas para construir mensagens que atendam aos conventional commits"><h2>Ferramentas para construir mensagens que atendam aos conventional commits</h2></a>
      <a class="anchor-link" href="#Commitizen"><h3>Commitizen</h3></a>
      <a class="anchor-link" href="#Plugin Conventional Commit do vscode"><h3>Plugin Conventional Commit do vscode</h3></a>
      <a class="anchor-link" href="#Ferramentas para verificar que se segue a convencao de conventional commits"><h2>Ferramentas para verificar que se segue a conven√ß√£o de conventional commits</h2></a>
      <a class="anchor-link" href="#Ferramentas para criar changelogs a partir de conventional commits"><h2>Ferramentas para criar changelogs a partir de conventional commits</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Aviso: Este post foi traduzido para o portugu√™s usando um modelo de tradu√ß√£o autom√°tica. Por favor, me avise se encontrar algum erro.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Este post foi criado a partir do <a href="https://www.youtube.com/watch?v=SigVVJmUGv8" target="_blank" rel="nofollow noreferrer">v√≠deo</a> de <a href="https://x.com/carlosazaustre">Carlos Azaustre</a>, s√≥ que como ele explica como fazer tudo com ferramentas de JavaScript, h√° muita gente desenvolvedora de Python que n√£o tem o Node.js instalado, por isso fiz uma vers√£o do mesmo, mas tudo com ferramentas de Python.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="O que sao os conventional commits?">O que s√£o os conventional commits?<a class="anchor-link" href="#O que sao os conventional commits?"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 31" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A integra√ß√£o com ferramentas de gerenciamento de altera√ß√µes e releases.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Formato das Mensagens de Commit">Formato das Mensagens de Commit<a class="anchor-link" href="#Formato das Mensagens de Commit"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 32" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Um mensagem de commit em Conventional Commits segue um formato espec√≠fico:</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-git">&lt;tipo&gt;[escopo opcional]: &lt;descri√ß√£o&gt;<br><br>[corpo opcional]<br><br>[rodap√©(s) opcional(is)]</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos v√™-lo com mais detalhes</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Tipo type">Tipo <code>type</code><a class="anchor-link" href="#Tipo type"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 33" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O tipo de commit indica a natureza da mudan√ßa. Alguns tipos comuns s√£o:</p>
      <ul>
        <li><strong>fix</strong>: √â utilizado para corre√ß√£o de bugs.</li>
        <li><strong>feat</strong>: Utiliza-se para novas funcionalidades.</li>
        <li><strong>docs</strong>: Utiliza-se para altera√ß√µes na documenta√ß√£o.</li>
        <li><strong>estilo</strong>: Utiliza-se para altera√ß√µes que n√£o afetam o significado do c√≥digo (por exemplo, formata√ß√£o, remo√ß√£o de espa√ßos em branco).</li>
        <li><strong>refatorar</strong>: √â utilizado para altera√ß√µes no c√≥digo que nem melhoram nem pioram a funcionalidade, como reorganizar o c√≥digo.</li>
        <li><strong>perf</strong>: Utiliza-se para mudan√ßas que melhoram o desempenho.</li>
        <li><strong>teste</strong>: Utilizado para adicionar ou atualizar testes.</li>
        <li><strong>chore</strong>: Utilizado para altera√ß√µes no processo ou nas ferramentas de desenvolvimento.</li>
        <li><strong>ci</strong>: Utiliza-se para altera√ß√µes nos arquivos de configura√ß√£o de integra√ß√£o cont√≠nua.</li>
        <li><strong>build</strong>: Utilizado para altera√ß√µes que afetam o sistema de compila√ß√£o ou depend√™ncias externas.</li>
        <li><strong>revert</strong>: √â utilizado para reverter um commit anterior.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="√Çmbito scope">√Çmbito <code>scope</code><a class="anchor-link" href="#√Çmbito scope"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 34" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O escopo √© opcional e √© utilizado para especificar a parte do projeto que foi modificada. Por exemplo, se voc√™ est√° trabalhando em um componente espec√≠fico de uma aplica√ß√£o web, o escopo poderia ser o nome do componente.</p>
      <p>Exemplo:</p>
      <div class='highlight'><pre><code class="language-git">fix(auth): corrigir problema de autentica√ß√£o</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Descri√ß√£o description">Descri√ß√£o <code>description</code><a class="anchor-link" href="#Descri√ß√£o description"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 35" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A descri√ß√£o √© uma breve explica√ß√£o da altera√ß√£o. Deve ser concisa e clara, e fornecer contexto suficiente para entender o prop√≥sito do commit.</p>
      <p>Exemplo:</p>
      <div class='highlight'><pre><code class="language-git">fix(auth): corrigir erro de autentica√ß√£o na p√°gina de login</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Corpo body">Corpo <code>body</code><a class="anchor-link" href="#Corpo body"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 36" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O corpo √© opcional e √© utilizado para fornecer mais detalhes sobre a mudan√ßa. Aqui voc√™ pode incluir motiva√ß√µes para a mudan√ßa e contraste com a implementa√ß√£o anterior.</p>
      <p>Exemplo:</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-git">fix(auth): corrigir erro de autentica√ß√£o na p√°gina de login<br><br>O token de acesso estava expirando antes do esperado devido a um erro no c√°lculo da data de expira√ß√£o. Isso foi corrigido ajustando a l√≥gica de c√°lculo.</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Rodap√© footer">Rodap√© <code>footer</code><a class="anchor-link" href="#Rodap√© footer"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 37" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O rodap√© √© opcional e √© utilizado para refer√™ncias adicionais, como n√∫meros de issues fechadas ou commits relacionados.</p>
      <p>Exemplo:</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-git">fix(auth): corrigir erro de autentica√ß√£o na p√°gina de login<br><br>O token de acesso estava expirando antes do esperado devido a um erro no c√°lculo da data de expira√ß√£o. Isso foi corrigido ajustando a l√≥gica de c√°lculo.<br>Fecha #123</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Beneficios dos Conventional Commits">Benef√≠cios dos Conventional Commits<a class="anchor-link" href="#Beneficios dos Conventional Commits"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 38" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <ul>
        <li><strong>Clareza e Consist√™ncia</strong>: As mensagens de commit padronizadas s√£o mais f√°ceis de entender e acompanhar, o que melhora a colabora√ß√£o em equipes de desenvolvimento.</li>
        <li><strong>Gera√ß√£o Autom√°tica de Notas de Vers√£o</strong>: Ferramentas podem ser usadas para gerar notas de vers√£o automaticamente com base nas mensagens de commit.</li>
        <li><strong>Integra√ß√£o com Ferramentas de Gest√£o de Mudan√ßas</strong>: Muitas ferramentas de desenvolvimento e gest√£o de projetos podem se integrar com Conventional Commits para automatizar tarefas como a gera√ß√£o de changelogs e a gest√£o de releases.</li>
        <li><strong>Hist√≥rico Estruturado de Altera√ß√µes</strong>: O hist√≥rico de altera√ß√µes torna-se mais estruturado e f√°cil de navegar, facilitando a revis√£o de altera√ß√µes e a depura√ß√£o de problemas.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Exemplos praticos">Exemplos pr√°ticos<a class="anchor-link" href="#Exemplos praticos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 39" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Exemplo 1: Corre√ß√£o de um Bug</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-git">fix(api): corrigir erro na valida√ß√£o do usu√°rio<br><br>O ponto de extremidade de registro de usu√°rios estava permitindo registros com endere√ßos de e-mail inv√°lidos. Foi adicionada uma valida√ß√£o adicional para garantir que os endere√ßos de e-mail sejam v√°lidos.<br><br>Fecha #456</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Exemplo 2: Adicionar um novo recurso</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-git">feat(api): adicionar ponto final de recupera√ß√£o de senha<br><br>Implementou um novo endpoint que permite aos usu√°rios solicitar um link de recupera√ß√£o de senha. O link √© enviado para o endere√ßo de e-mail registrado.<br><br>Fecha #789</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Exemplo 3: Melhoria da documenta√ß√£o</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-git">docs: atualizar guia de contribui√ß√£o<br><br>Atualizadas as instru√ß√µes de configura√ß√£o para o ambiente de desenvolvimento e adicionada uma se√ß√£o sobre execu√ß√£o de testes.<br><br>Fecha #101</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Ferramentas para construir mensagens que atendam aos conventional commits">Ferramentas para construir mensagens que atendam aos conventional commits<a class="anchor-link" href="#Ferramentas para construir mensagens que atendam aos conventional commits"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 40" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Embora tenhamos visto como criar mensagens de commit atrav√©s de conventional commits, √© bastante poss√≠vel que cometamos erros, por isso podemos usar ferramentas que nos guiem na cria√ß√£o dessas mensagens. Vamos ver duas: <code>commitizen</code> e o plugin <code>Conventional Commits</code> do vscode.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Commitizen">Commitizen<a class="anchor-link" href="#Commitizen"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 41" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para us√°-la, primeiro vou criar uma pasta nova na qual vou iniciar um reposit√≥rio do Git.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">mkdir</span> <span class="o">~/</span><span class="n">comitizen_folder</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">cd</span> <span class="o">~/</span><span class="n">comitizen_folder</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">init</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'hint: Using &#x27;master&#x27; as the name for the initial branch. This default branch name',
          'hint: is subject to change. To configure the initial branch name to use in all',
          'hint: of your new repositories, which will suppress this warning, call:',
          'hint:',
          'hint: 	git config --global init.defaultBranch &amp;lt;name&amp;gt;',
          'hint:',
          'hint: Names commonly chosen instead of &#x27;master&#x27; are &#x27;main&#x27;, &#x27;trunk&#x27; and',
          'hint: &#x27;development&#x27;. The just-created branch can be renamed via this command:',
          'hint:',
          'hint: 	git branch -m &amp;lt;name&amp;gt;',
          'Initialized empty Git repository in /home/maximofernandez/comitizen_folder/.git/',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora eu instalo <code>commitizen</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="o">--</span><span class="n">user</span> <span class="o">-</span><span class="n">U</span> <span class="n">commitizen</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Collecting commitizen',
          '&#x20;&#x20;Downloading commitizen-3.29.1-py3-none-any.whl.metadata (7.6 kB)',
          'Collecting argcomplete&amp;lt;3.6,&amp;gt;=1.12.1 (from commitizen)',
          '&#x20;&#x20;Downloading argcomplete-3.5.1-py3-none-any.whl.metadata (16 kB)',
          'Requirement already satisfied: charset-normalizer&amp;lt;4,&amp;gt;=2.1.0 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from commitizen) (3.3.2)',
          'Requirement already satisfied: colorama&amp;lt;0.5.0,&amp;gt;=0.4.1 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from commitizen) (0.4.6)',
          'Collecting decli&amp;lt;0.7.0,&amp;gt;=0.6.0 (from commitizen)',
          '&#x20;&#x20;Downloading decli-0.6.2-py3-none-any.whl.metadata (17 kB)',
          'Requirement already satisfied: jinja2&amp;gt;=2.10.3 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from commitizen) (3.1.4)',
          'Requirement already satisfied: packaging&amp;gt;=19 in /home/maximofernandez/.local/lib/python3.12/site-packages (from commitizen) (24.1)',
          'Requirement already satisfied: pyyaml&amp;gt;=3.08 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from commitizen) (6.0.2)',
          'Collecting questionary&amp;lt;3.0,&amp;gt;=2.0 (from commitizen)',
          '&#x20;&#x20;Downloading questionary-2.0.1-py3-none-any.whl.metadata (5.4 kB)',
          'Collecting termcolor&amp;lt;3,&amp;gt;=1.1 (from commitizen)',
          '&#x20;&#x20;Downloading termcolor-2.5.0-py3-none-any.whl.metadata (6.1 kB)',
          'Collecting tomlkit&amp;lt;1.0.0,&amp;gt;=0.5.3 (from commitizen)',
          '&#x20;&#x20;Downloading tomlkit-0.13.2-py3-none-any.whl.metadata (2.7 kB)',
          'Requirement already satisfied: MarkupSafe&amp;gt;=2.0 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from jinja2&amp;gt;=2.10.3-&amp;gt;commitizen) (2.1.5)',
          'Collecting prompt_toolkit&amp;lt;=3.0.36,&amp;gt;=2.0 (from questionary&amp;lt;3.0,&amp;gt;=2.0-&amp;gt;commitizen)',
          '&#x20;&#x20;Downloading prompt_toolkit-3.0.36-py3-none-any.whl.metadata (7.0 kB)',
          'Requirement already satisfied: wcwidth in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from prompt_toolkit&amp;lt;=3.0.36,&amp;gt;=2.0-&amp;gt;questionary&amp;lt;3.0,&amp;gt;=2.0-&amp;gt;commitizen) (0.2.13)',
          'Downloading commitizen-3.29.1-py3-none-any.whl (71 kB)',
          'Downloading argcomplete-3.5.1-py3-none-any.whl (43 kB)',
          'Downloading decli-0.6.2-py3-none-any.whl (7.9 kB)',
          'Downloading questionary-2.0.1-py3-none-any.whl (34 kB)',
          'Downloading termcolor-2.5.0-py3-none-any.whl (7.8 kB)',
          'Downloading tomlkit-0.13.2-py3-none-any.whl (37 kB)',
          'Downloading prompt_toolkit-3.0.36-py3-none-any.whl (386 kB)',
          'Installing collected packages: tomlkit, termcolor, prompt_toolkit, decli, argcomplete, questionary, commitizen',
          'ERROR: pip&#x27;s dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.',
          'ipython 8.27.0 requires prompt-toolkit&amp;lt;3.1.0,&amp;gt;=3.0.41, but you have prompt-toolkit 3.0.36 which is incompatible.',
          'Successfully installed argcomplete-3.5.1 commitizen-3.29.1 decli-0.6.2 prompt_toolkit-3.0.36 questionary-2.0.1 termcolor-2.5.0 tomlkit-0.13.2',
          'Note: you may need to restart the kernel to use updated packages.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Verificamos a instala√ß√£o</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cz</span> <span class="n">version</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '3.29.1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Crio um novo arquivo na pasta em que inicializei o reposit√≥rio do Git e o adiciono √† √°rea de staging.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="o">~/</span><span class="n">comitizen_folder</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">README</span><span class="o">.</span><span class="n">md</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">README</span><span class="o">.</span><span class="n">md</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se eu fizer <code>git status</code> verei que o arquivo est√° na √°rea de staged e que agora devo fazer um commit.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="o">~/</span><span class="n">comitizen_folder</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'On branch master',
          'No commits yet',
          'Changes to be committed:',
          '&#x20;&#x20;(use &quot;git rm --cached &amp;lt;file&amp;gt;...&quot; to unstage)',
          'new file:   README.md',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>√â hora de criar um commit com <code>commitizen</code>. Para isso, executamos <code>cz commit</code> e aparecer√° um assistente para criar o commit.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="o">~/</span><span class="n">comitizen_folder</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">cz</span> <span class="n">commit</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '? Select the type of change you are committing docs: Documentation only changes',
          '? What is the scope of this change? (class or file name): (press [enter] to skip)',
          'readme',
          '? Write a short and imperative summary of the code changes: (lower case and no period)',
          'First innit, create readme',
          '? Provide additional contextual information about the code changes: (press [enter] to skip)',
          'This is the first commit, I create a empty readme',
          '? Is this a BREAKING CHANGE? Correlates with MAJOR in SemVer No',
          '? Footer. Information about Breaking Changes and reference issues that this commit closes: (press [enter] to skip)',
          'docs(readme): First innit, create readme',
          'This is the first commit, I create a empty readme',
          '[master (root-commit) 4f646d4] docs(readme): First innit, create readme',
          '1 file changed, 0 insertions(+), 0 deletions(-)',
          'create mode 100644 README.md',
          'Commit successful!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pronto, j√° temos nosso primeiro commit criado com <code>commitizen</code> que segue as regras de <code>Conventional Commits</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Plugin Conventional Commit do vscode">Plugin Conventional Commit do vscode<a class="anchor-link" href="#Plugin Conventional Commit do vscode"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 42" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora vamos fazer o mesmo com o plugin do VSCode <a href="https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits" target="_blank" rel="nofollow noreferrer">Conventional Commit</a></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro, √© necess√°rio instalar o plugin e, uma vez instalado, pressionamos <code>Ctrl + Shift + P</code> e escrevemos <code>Conventional Commit</code>, pressionamos <code>Enter</code> e aparecer√° um assistente para criar o commit.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para mim o uso deste plugin tem duas vantagens em rela√ß√£o ao <code>commitizen</code></p>
      <ul>
        <li>A primeira √© que nos permite adicionar emojis de <a href="https://gitmoji.dev/" target="_blank" rel="nofollow noreferrer">gitmoji</a>. O que, se n√£o abusarmos dos emojis e usarmos apenas alguns, torna mais f√°cil identificar o tipo de commit ao visualizar o hist√≥rico.* A segunda √© que ela mant√©m os escopos <code>scopes</code> que voc√™ usou, ent√£o novos escopos n√£o s√£o criados, mas sim reutilizados os que j√° foram usados.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Ferramentas para verificar que se segue a convencao de conventional commits">Ferramentas para verificar que se segue a conven√ß√£o de conventional commits<a class="anchor-link" href="#Ferramentas para verificar que se segue a convencao de conventional commits"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 43" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vimos como criar mensagens de commit que sigam a conven√ß√£o de <code>conventional commits</code>, mas uma boa pr√°tica √© criar uma ferramenta para verificar se o commit criado segue a conven√ß√£o, especialmente quando se trabalha em equipe.</p>
      <p>H√° ferramentas que nos permitem fazer isso, como <code>pre-commit</code>, mas o que elas fazem √© modificar os hooks do git, ent√£o vamos fazer n√≥s mesmos e usar <code>commitizen</code> para nos ajudar a validar a mensagem de commit.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>J√° instalamos <code>commitizen</code>, ent√£o vamos ver como podemos us√°-lo para verificar uma mensagem de commit.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro criamos um arquivo chamado <code>commit-msg</code> na pasta <code>.git/hooks</code> e damos permiss√µes de execu√ß√£o. Dentro dos hooks do Git h√° <a href="https://git-scm.com/docs/githooks#_hooks" target="_blank" rel="nofollow noreferrer">v√°rios tipos de arquivos</a> que podem ser usados para diferentes tarefas, neste caso vamos usar <code>commit-msg</code> que √© executado logo antes da cria√ß√£o do commit.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="o">~/</span><span class="n">comitizen_folder</span><span class="o">/.</span><span class="n">git</span><span class="o">/</span><span class="n">hooks</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">commit</span><span class="o">-</span><span class="n">msg</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">commit</span><span class="o">-</span><span class="n">msg</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora adicionamos o seguinte c√≥digo ao arquivo <code>commit-msg</code></p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">#!/bin/sh<br>Este script valida a mensagem do commit usando commitizen<br><br>COMMIT_MSG_FILE=$1<br>cz check --commit-msg-file $COMMIT_MSG_FILE</code></pre></div>
            </section>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="o">~/</span><span class="n">comitizen_folder</span><span class="o">/.</span><span class="n">git</span><span class="o">/</span><span class="n">hooks</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> \\',
      '<span class="n">echo</span> <span class="s1">&#39;#!/bin/sh&#39;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">commit</span><span class="o">-</span><span class="n">msg</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> \\',
      '<span class="n">echo</span> <span class="s1">&#39;# Este script valida el mensaje del commit usando commitizen&#39;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">commit</span><span class="o">-</span><span class="n">msg</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> \\',
      '<span class="n">echo</span> <span class="s1">&#39; &#39;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">commit</span><span class="o">-</span><span class="n">msg</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> \\',
      '<span class="n">echo</span> <span class="s1">&#39;COMMIT_MSG_FILE=$1&#39;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">commit</span><span class="o">-</span><span class="n">msg</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> \\',
      '<span class="n">echo</span> <span class="s1">&#39;cz check --commit-msg-file $COMMIT_MSG_FILE&#39;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">commit</span><span class="o">-</span><span class="n">msg</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Uma vez feito, tentamos fazer um commit com uma mensagem incorreta. Primeiro, modificamos o README e o adicionamos √† √°rea de staging.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="o">~/</span><span class="n">comitizen_folder</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s1">&#39;.&#39;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">README</span><span class="o">.</span><span class="n">md</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">README</span><span class="o">.</span><span class="n">md</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora fazemos um commit com uma mensagem incorreta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="o">~/</span><span class="n">comitizen_folder</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Add dot to README&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'commit validation: failed!',
          'please enter a commit message in the commitizen format.',
          'commit &quot;&quot;: &quot;Add dot to README&quot;',
          'pattern: (?s)(build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert|bump)(\(\S+\))?!?:( [^\n\r]+)((\n\n.*)|(\s*))?$',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora fazemos um commit com uma mensagem correta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="o">~/</span><span class="n">comitizen_folder</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;docs(readme): :memo: Add dot to README&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Commit validation: successful!',
          '[master d488656] docs(readme): :memo: Add dot to README',
          '1 file changed, 1 insertion(+), 1 deletion(-)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Nos validou o commit corretamente, portanto, se olharmos o hist√≥rico de commits, veremos que o commit com a mensagem incorreta n√£o foi criado e o commit com a mensagem correta sim.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="o">~/</span><span class="n">comitizen_folder</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'commit d488656297c7cb448a25dd33a008cb5ce1e14e83 (HEAD -&amp;gt; master)',
          'Author: MaximoFN &amp;lt;maximofn@gmail.com&amp;gt;',
          'Date:   Tue Oct 8 11:22:19 2024 +0200',
          '&#x20;&#x20;&#x20;&#x20;docs(readme): :memo: Add dot to README',
          'commit fb518c2b903a259b2e44972e88aabf5656f97be9',
          'Author: MaximoFN &amp;lt;maximofn@gmail.com&amp;gt;',
          'Date:   Tue Oct 8 10:57:41 2024 +0200',
          '&#x20;&#x20;&#x20;&#x20;docs(readme): :memo: Update readme',
          '&#x20;&#x20;&#x20;&#x20;',
          '&#x20;&#x20;&#x20;&#x20;Update readme with text conventional commits',
          'commit 4f646d45047a45b549243efbfde9e331d45e23f1',
          'Author: MaximoFN &amp;lt;maximofn@gmail.com&amp;gt;',
          'Date:   Tue Oct 8 10:48:07 2024 +0200',
          '&#x20;&#x20;&#x20;&#x20;docs(readme): First innit, create readme',
          '&#x20;&#x20;&#x20;&#x20;',
          '&#x20;&#x20;&#x20;&#x20;This is the first commit, I create a empty readme',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Ferramentas para criar changelogs a partir de conventional commits">Ferramentas para criar changelogs a partir de conventional commits<a class="anchor-link" href="#Ferramentas para criar changelogs a partir de conventional commits"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 44" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como temos os commits escritos seguindo a mesma conven√ß√£o, podemos criar um changelog automaticamente com <code>git-changelog</code>. Instalamos as depend√™ncias</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="n">git</span><span class="o">-</span><span class="n">changelog</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Collecting git-changelog',
          '&#x20;&#x20;Downloading git_changelog-2.5.2-py3-none-any.whl.metadata (5.4 kB)',
          'Collecting appdirs&amp;gt;=1.4 (from git-changelog)',
          '&#x20;&#x20;Downloading appdirs-1.4.4-py2.py3-none-any.whl.metadata (9.0 kB)',
          'Requirement already satisfied: Jinja2&amp;gt;=2.10 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from git-changelog) (3.1.4)',
          'Requirement already satisfied: packaging&amp;gt;=24.0 in /home/maximofernandez/.local/lib/python3.12/site-packages (from git-changelog) (24.1)',
          'Collecting semver&amp;gt;=2.13 (from git-changelog)',
          '&#x20;&#x20;Downloading semver-3.0.2-py3-none-any.whl.metadata (5.0 kB)',
          'Requirement already satisfied: MarkupSafe&amp;gt;=2.0 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from Jinja2&amp;gt;=2.10-&amp;gt;git-changelog) (2.1.5)',
          'Downloading git_changelog-2.5.2-py3-none-any.whl (32 kB)',
          'Downloading appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)',
          'Downloading semver-3.0.2-py3-none-any.whl (17 kB)',
          'Installing collected packages: appdirs, semver, git-changelog',
          'Successfully installed appdirs-1.4.4 git-changelog-2.5.2 semver-3.0.2',
          'Note: you may need to restart the kernel to use updated packages.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora podemos criar um changelog com <code>git-changelog</code>. Como criamos alguns commits muito simples, o changelog ser√° muito simples.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="o">~/</span><span class="n">comitizen_folder</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span><span class="o">-</span><span class="n">changelog</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '# Changelog',
          'All notable changes to this project will be documented in this file.',
          'The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)',
          'and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).',
          '&amp;lt;!-- insertion marker --&amp;gt;',
          '## Unreleased',
          '&amp;lt;small&amp;gt;[Compare with latest]()&amp;lt;/small&amp;gt;',
          '&amp;lt;!-- insertion marker --&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Tamb√©m podemos pedir-lhe que o escreva num arquivo e muitas mais op√ß√µes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span><span class="o">-</span><span class="n">changelog</span> <span class="o">-</span><span class="n">h</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'usage: git-changelog [--config-file [PATH ...]] [-b] [-B VERSION] [-n SCHEME]',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[-h] [-i] [-g REGEX] [-m MARKER] [-o FILE] [-p PROVIDER]',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[-r] [-R] [-I FILE] [-c CONVENTION] [-s SECTIONS]',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[-t TEMPLATE] [-T] [-E] [-Z] [-F RANGE] [-j KEY=VALUE]',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[-V] [--debug-info]',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[REPOSITORY]',
          'Automatic Changelog generator using Jinja2 templates.',
          'This tool parses your commit messages to extract useful data',
          'that is then rendered using Jinja2 templates, for example to',
          'a changelog file formatted in Markdown.',
          'Each Git tag will be treated as a version of your project.',
          'Each version contains a set of commits, and will be an entry',
          'in your changelog. Commits in each version will be grouped',
          'by sections, depending on the commit convention you follow.',
          '### Conventions',
          '#### Basic',
          '*Default sections:*',
          '- add: Added',
          '- fix: Fixed',
          '- change: Changed',
          '- remove: Removed',
          '*Additional sections:*',
          '- merge: Merged',
          '- doc: Documented',
          '#### Angular',
          '*Default sections:*',
          '- feat: Features',
          '- fix: Bug Fixes',
          '- revert: Reverts',
          '- ref, refactor: Code Refactoring',
          '- perf: Performance Improvements',
          '*Additional sections:*',
          '- build: Build',
          '- chore: Chore',
          '- ci: Continuous Integration',
          '- deps: Dependencies',
          '- doc, docs: Docs',
          '- style: Style',
          '- test, tests: Tests',
          '#### ConventionalCommit',
          '*Default sections:*',
          '- feat: Features',
          '- fix: Bug Fixes',
          '- revert: Reverts',
          '- ref, refactor: Code Refactoring',
          '- perf: Performance Improvements',
          '*Additional sections:*',
          '- build: Build',
          '- chore: Chore',
          '- ci: Continuous Integration',
          '- deps: Dependencies',
          '- doc, docs: Docs',
          '- style: Style',
          '- test, tests: Tests',
          'positional arguments:',
          '&#x20;&#x20;REPOSITORY            The repository path, relative or absolute. Default:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;current working directory.',
          'options:',
          '&#x20;&#x20;--config-file [PATH ...]',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;Configuration file(s).',
          '&#x20;&#x20;-b, --bump-latest     Deprecated, use --bump=auto instead. Guess the new',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;latest version by bumping the previous one based on',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;the set of unreleased commits. For example, if a',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;commit contains breaking changes, bump the major',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;number (or the minor number for 0.x versions). Else if',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;there are new features, bump the minor number. Else',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;just bump the patch number. Default: unset (false).',
          '&#x20;&#x20;-B VERSION, --bump VERSION',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;Specify the bump from latest version for the set of',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;unreleased commits. Can be one of `auto`, `major`,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;`minor`, `patch` or a valid SemVer version (eg.',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1.2.3). For both SemVer and PEP 440 versioning schemes',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;(see -n), `auto` will bump the major number if a',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;commit contains breaking changes (or the minor number',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;for 0.x versions, see -Z), else the minor number if',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;there are new features, else the patch number.',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;Default: unset (false).',
          '&#x20;&#x20;-n SCHEME, --versioning SCHEME',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;Versioning scheme to use when bumping and comparing',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;versions. The selected scheme will impact the values',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;accepted by the `--bump` option. Supported: `pep440`,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;`semver`. PEP 440 provides the following bump',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;strategies: `auto`, `epoch`, `release`, `major`,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;`minor`, `micro`, `patch`, `pre`, `alpha`, `beta`,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;`candidate`, `post`, `dev`. Values `auto`, `major`,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;`minor`, `micro` can be suffixed with one of `+alpha`,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;`+beta`, `+candidate`, and/or `+dev`. Values `alpha`,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;`beta` and `candidate` can be suffixed with `+dev`.',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;Examples: `auto+alpha`, `major+beta+dev`, `micro+dev`,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;`candidate+dev`, etc.. SemVer provides the following',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;bump strategies: `auto`, `major`, `minor`, `patch`,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;`release`. See the docs for more information. Default:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;unset (`semver`).',
          '&#x20;&#x20;-h, --help            Show this help message and exit.',
          '&#x20;&#x20;-i, --in-place        Insert new entries (versions missing from changelog)',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;in-place. An output file must be specified. With',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;custom templates, you can pass two additional',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;arguments: `--version-regex` and `--marker-line`. When',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;writing in-place, an `in_place` variable will be',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;injected in the Jinja context, allowing to adapt the',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;generated contents (for example to skip changelog',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;headers or footers). Default: unset (false).',
          '&#x20;&#x20;-g REGEX, --version-regex REGEX',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A regular expression to match versions in the existing',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;changelog (used to find the latest release) when',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;writing in-place. The regular expression must be a',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;Python regex with a `version` named group. Default:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;`^## \[(?P&amp;lt;version&amp;gt;v?[^\]]+)`.',
          '&#x20;&#x20;-m MARKER, --marker-line MARKER',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A marker line at which to insert new entries (versions',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;missing from changelog). If two marker lines are',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;present in the changelog, the contents between those',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;two lines will be overwritten (useful to update an',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x27;Unreleased&#x27; entry for example). Default: `&amp;lt;!--',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;insertion marker --&amp;gt;`.',
          '&#x20;&#x20;-o FILE, --output FILE',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;Output to given file. Default: standard output.',
          '&#x20;&#x20;-p PROVIDER, --provider PROVIDER',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;Explicitly specify the repository provider. Default:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;unset.',
          '&#x20;&#x20;-r, --parse-refs      Parse provider-specific references in commit messages',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;(GitHub/GitLab/Bitbucket issues, PRs, etc.). Default:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;unset (false).',
          '&#x20;&#x20;-R, --release-notes   Output release notes to stdout based on the last entry',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;in the changelog. Default: unset (false).',
          '&#x20;&#x20;-I FILE, --input FILE',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;Read from given file when creating release notes.',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;Default: `CHANGELOG.md`.',
          '&#x20;&#x20;-c CONVENTION, --convention CONVENTION, --commit-style CONVENTION, --style CONVENTION',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;The commit convention to match against. Default:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;`basic`.',
          '&#x20;&#x20;-s SECTIONS, --sections SECTIONS',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;A comma-separated list of sections to render. See the',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;available sections for each supported convention in',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;the description. Default: unset (None).',
          '&#x20;&#x20;-t TEMPLATE, --template TEMPLATE',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;The Jinja2 template to use. Prefix it with `path:` to',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;specify the path to a Jinja templated file. Default:',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;`keepachangelog`.',
          '&#x20;&#x20;-T, --trailers, --git-trailers',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;Parse Git trailers in the commit message. See',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;https://git-scm.com/docs/git-interpret-trailers.',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;Default: unset (false).',
          '&#x20;&#x20;-E, --omit-empty-versions',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;Omit empty versions from the output. Default: unset',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;(false).',
          '&#x20;&#x20;-Z, --no-zerover      By default, breaking changes on a 0.x don&#x27;t bump the',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;major version, maintaining it at 0. With this option,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;a breaking change will bump a 0.x version to 1.0.',
          '&#x20;&#x20;-F RANGE, --filter-commits RANGE',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;The Git revision-range filter to use (e.g.',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;`v1.2.0..`). Default: no filter.',
          '&#x20;&#x20;-j KEY=VALUE, --jinja-context KEY=VALUE',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;Pass additional key/value pairs to the template.',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;Option can be used multiple times. The key/value pairs',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;are accessible as &#x27;jinja_context&#x27; in the template.',
          '&#x20;&#x20;-V, --version         Show the current version of the program and exit.',
          '&#x20;&#x20;--debug-info          Print debug information.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>J√° poder√≠amos gerar changelogs facilmente a partir dos commits que seguem a conven√ß√£o de <code>conventional commits</code>. Al√©m disso, podemos adicion√°-lo a um pipeline de CI/CD para que seja gerado automaticamente em cada release.</p>
      </section>







    </div>

  </section>

</PostLayout>
