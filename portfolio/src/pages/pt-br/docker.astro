---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Docker';
const end_url = 'docker';
const description = 'üê≥ Crie quantos ambientes de desenvolvimento voc√™ quiser com o Docker. Chega de Funciona na minha m√°quina';
const keywords = 'docker, tutorial, desenvolvimento, ambientes';
const languaje = 'PT';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/docker.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1316
    image_height=1126
    image_extension=webp
    article_date=2023-01-22+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Contenedores"><h2>Contenedores</h2></a>
      <a class="anchor-link" href="#Hello-world"><h3>Hello world</h3></a>
      <a class="anchor-link" href="#El-modo-iteractivo"><h3>El modo iteractivo</h3></a>
      <a class="anchor-link" href="#Ciclo-de-vida-de-un-contenedor"><h3>Ciclo de vida de un contenedor</h3></a>
      <a class="anchor-link" href="#Contenedores-de-un-solo-uso"><h3>Contenedores de un solo uso</h3></a>
      <a class="anchor-link" href="#Exponer-contenedores-al-mundo-exterior"><h3>Exponer contenedores al mundo exterior</h3></a>
      <a class="anchor-link" href="#Datos-en-Docker"><h2>Datos en Docker</h2></a>
      <a class="anchor-link" href="#Bind-mounts"><h3>Bind mounts</h3></a>
      <a class="anchor-link" href="#Vol%C3%BAmenes"><h3>Vol√∫menes</h3></a>
      <a class="anchor-link" href="#Insertar-y-extraer-archivos-de-un-contenedor"><h3>Insertar y extraer archivos de un contenedor</h3></a>
      <a class="anchor-link" href="#Im%C3%A1genes"><h2>Im√°genes</h2></a>
      <a class="anchor-link" href="#Conceptos-fundamentales"><h3>Conceptos fundamentales</h3></a>
      <a class="anchor-link" href="#Crear-im%C3%A1genes-mediante-Dockerfile"><h3>Crear im√°genes mediante <code>Dockerfile</code></h3></a>
      <a class="anchor-link" href="#El-sistema-de-capas"><h3>El sistema de capas</h3></a>
      <a class="anchor-link" href="#B%C3%BAsqueda-en-docker-hub"><h3>B√∫squeda en docker hub</h3></a>
      <a class="anchor-link" href="#Uso-de-docker-para-crear-aplicaciones"><h2>Uso de docker para crear aplicaciones</h2></a>
      <a class="anchor-link" href="#Exposici%C3%B3n-de-puertos"><h3>Exposici√≥n de puertos</h3></a>
      <a class="anchor-link" href="#Reuso-del-cach%C3%A9-de-capas-al-compilar"><h3>Reuso del cach√© de capas al compilar</h3></a>
      <a class="anchor-link" href="#Escribir-correctamente-un-Dockerfile"><h3>Escribir correctamente un Dockerfile</h3></a>
      <a class="anchor-link" href="#Copiar-el-c%C3%B3digo-antes-de-la-ejecuci%C3%B3n"><h4>Copiar el c√≥digo antes de la ejecuci√≥n</h4></a>
      <a class="anchor-link" href="#Copiar-solo-el-c%C3%B3digo-nesario"><h4>Copiar solo el c√≥digo nesario</h4></a>
      <a class="anchor-link" href="#Actualizar-repositorios-e-instalar-python-en-la-misma-l%C3%ADnea"><h4>Actualizar repositorios e instalar python en la misma l√≠nea</h4></a>
      <a class="anchor-link" href="#No-instalar-ssh"><h4>No instalar ssh</h4></a>
      <a class="anchor-link" href="#Usar---no-install-recommends"><h4>Usar <code>--no-install-recommends</code></h4></a>
      <a class="anchor-link" href="#Borrar-lista-de-repositorios-actualizados"><h4>Borrar lista de repositorios actualizados</h4></a>
      <a class="anchor-link" href="#Usar-una-imagen-de-Python"><h4>Usar una imagen de Python</h4></a>
      <a class="anchor-link" href="#Especificar-la-imagen-de-Python"><h4>Especificar la imagen de Python</h4></a>
      <a class="anchor-link" href="#Elegir-un-tag-peque%C3%B1o"><h4>Elegir un tag peque√±o</h4></a>
      <a class="anchor-link" href="#Indicar-el-workspace"><h4>Indicar el workspace</h4></a>
      <a class="anchor-link" href="#Indicar-el-workspace"><h4>Indicar el workspace</h4></a>
      <a class="anchor-link" href="#C%C3%B3digo-compartido-en-una-carpeta-bind-mount"><h3>C√≥digo compartido en una carpeta <code>bind mount</code></h3></a>
      <a class="anchor-link" href="#Conectar-contenedores-por-red"><h3>Conectar contenedores por red</h3></a>
      <a class="anchor-link" href="#Uso-de-GPUs"><h2>Uso de GPUs</h2></a>
      <a class="anchor-link" href="#Configurar-el-repositorio-y-la-llave-GPG"><h3>Configurar el repositorio y la llave GPG</h3></a>
      <a class="anchor-link" href="#Instalaci%C3%B3n-de-nvidia-container-toolkit"><h3>Instalaci√≥n de <code>nvidia container toolkit</code></h3></a>
      <a class="anchor-link" href="#Reinicio-de-docker"><h3>Reinicio de docker</h3></a>
      <a class="anchor-link" href="#Uso-de-GPUs"><h3>Uso de GPUs</h3></a>
      <a class="anchor-link" href="#Docker-compose"><h2>Docker compose</h2></a>
      <a class="anchor-link" href="#Docker-compose-vs-docker-compose"><h3>Docker compose vs docker-compose</h3></a>
      <a class="anchor-link" href="#Docker-compose"><h3>Docker compose</h3></a>
      <a class="anchor-link" href="#Como-nombra-docker-compose-los-contenedores"><h3>Como nombra docker compose los contenedores</h3></a>
      <a class="anchor-link" href="#Logs-en-docker-compose"><h3>Logs en docker compose</h3></a>
      <a class="anchor-link" href="#Exec-servicios"><h3>Exec servicios</h3></a>
      <a class="anchor-link" href="#Parando-docker-compose"><h3>Parando docker compose</h3></a>
      <a class="anchor-link" href="#Docker-compose-como-herramienta-de-desarrollo"><h3>Docker compose como herramienta de desarrollo</h3></a>
      <a class="anchor-link" href="#Exposici%C3%B3n-de-puertos-en-docker-compose"><h3>Exposici√≥n de puertos en docker compose</h3></a>
      <a class="anchor-link" href="#Docker-compose-en-equipo---docker-override"><h3>Docker compose en equipo - docker override</h3></a>
      <a class="anchor-link" href="#Docker-compose-restart"><h3>Docker compose restart</h3></a>
      <a class="anchor-link" href="#Docker-avanzado"><h2>Docker avanzado</h2></a>
      <a class="anchor-link" href="#Administrar-ambiente-de-trabajo"><h3>Administrar ambiente de trabajo</h3></a>
      <a class="anchor-link" href="#Borrado-de-contenedores-apagados"><h4>Borrado de contenedores apagados</h4></a>
      <a class="anchor-link" href="#Borrado-de-todos-los-contenedores"><h4>Borrado de todos los contenedores</h4></a>
      <a class="anchor-link" href="#Borrado-de-todo"><h4>Borrado de todo</h4></a>
      <a class="anchor-link" href="#Uso-de-recursos-del-host-por-parte-de-contenedores"><h3>Uso de recursos del host por parte de contenedores</h3></a>
      <a class="anchor-link" href="#Deteniendo-contenedores-correctamente:-SHELL-vs-EXEC"><h3>Deteniendo contenedores correctamente: SHELL vs EXEC</h3></a>
      <a class="anchor-link" href="#Contenedores-ejecutables"><h3>Contenedores ejecutables</h3></a>
      <a class="anchor-link" href="#El-contexto-de-build"><h3>El contexto de <code>build</code></h3></a>
      <a class="anchor-link" href="#Multi-stage-build"><h3>Multi-stage build</h3></a>
      <a class="anchor-link" href="#Multi-arch-builds"><h3>Multi arch builds</h3></a>
      <a class="anchor-link" href="#Escritura-correcta-de-Dockerfiles-avanzado"><h3>Escritura correcta de Dockerfiles avanzado</h3></a>
      <a class="anchor-link" href="#Diferencia-entre-RUN,-CMD-y-ENTRYPOINT"><h3>Diferencia entre RUN, CMD y ENTRYPOINT</h3></a>
      <a class="anchor-link" href="#RUN"><h4>RUN</h4></a>
      <a class="anchor-link" href="#CMD"><h4>CMD</h4></a>
      <a class="anchor-link" href="#ENTRYPOINT"><h4>ENTRYPOINT</h4></a>
      <a class="anchor-link" href="#Cambios-en-un-contenedor"><h3>Cambios en un contenedor</h3></a>
      <a class="anchor-link" href="#Docker-en-docker"><h3>Docker en docker</h3></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Docker">Docker<a class="anchor-link" href="#Docker"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 134" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Aviso: Este post foi traduzido para o portugu√™s usando um modelo de tradu√ß√£o autom√°tica. Por favor, me avise se encontrar algum erro.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Contenedores">Contenedores<a class="anchor-link" href="#Contenedores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 135" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Hello-world">Hello world<a class="anchor-link" href="#Hello-world"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 136" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ejecutar el primer contenedor tipo Hello world con el comando <code>docker run hello-world</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>hello-world
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>Unable to find image 'hello-world:latest' locally
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>latest: Pulling from library/hello-world
      
      85e32844: Pull complete 457kB/2.457kBBDigest: sha256:dcba6daec718f547568c562956fa47e1b03673dd010fe6ee58ca806767031d1c
      Status: Downloaded newer image for hello-world:latest
      
      Hello from Docker!
      This message shows that your installation appears to be working correctly.
      
      To generate this message, Docker took the following steps:
       1. The Docker client contacted the Docker daemon.
       2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
          (amd64)
       3. The Docker daemon created a new container from that image which runs the
          executable that produces the output you are currently reading.
       4. The Docker daemon streamed that output to the Docker client, which sent it
          to your terminal.
      
      To try something more ambitious, you can run an Ubuntu container with:
       $ docker run -it ubuntu bash
      
      Share images, automate workflows, and more with a free Docker ID:
       https://hub.docker.com/
      
      For more examples and ideas, visit:
       https://docs.docker.com/get-started/
      
      </pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como no tenemos el contenedor guardado en local, docker lo descarga de docker hub. Si ahora volvemos a ejecutar el contenedor, ya no aparecer√° el primer mensaje, en el que indica que se est√° descargando</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>hello-world',
          '</span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>hello-world',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Unable to find image \'hello-world:latest\' locally',
          'Hello from Docker!',
          'This message shows that your installation appears to be working correctly.',
          'To generate this message, Docker took the following steps:',
          ' 1. The Docker client contacted the Docker daemon.',
          ' 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.',
          '    (amd64)',
          ' 3. The Docker daemon created a new container from that image which runs the',
          '    executable that produces the output you are currently reading.',
          ' 4. The Docker daemon streamed that output to the Docker client, which sent it',
          '    to your terminal.',
          'To try something more ambitious, you can run an Ubuntu container with:',
          ' $ docker run -it ubuntu bash',
          'Share images, automate workflows, and more with a free Docker ID:',
          ' https://hub.docker.com/',
          'For more examples and ideas, visit:',
          ' https://docs.docker.com/get-started/',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para ver los contenedores que est√°n corriendo ejecutar <code>docker ps</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos no hay ning√∫n contenedor abierto. Pero sin embargo, si ejecutamos <code>docker ps -a</code> (<code>all</code>) vemos que si aparecen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE         COMMAND    CREATED          STATUS                      PORTS     NAMES',
          '1efb51bbbf38   hello-world   "/hello"   10 seconds ago   Exited (0) 9 seconds ago              strange_thompson',
          '5f5705e7603e   hello-world   "/hello"   15 seconds ago   Exited (0) 14 seconds ago             laughing_jang',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que aparecen dos contenedores llamados <code>hello-world</code> que son los dos que hemos ejecutado antes. Por tanto cada vez que ejecutamos el comando <code>run</code>, docker crea un nuevo contenedor, no ejecuta uno que ya exista</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos tener m√°s informaci√≥n de uno de los dos contenedores podemos ejecutar <code>docker inspect &lt;id&gt;</code>, donde <code>&lt;id&gt;</code> corresponde a la ID del docker que se ha mostrado en la lista anterior</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>inspect<span class="w"> </span>1efb51bbbf38',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[',
          '    {',
          '        "Id": "1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e",',
          '        "Created": "2023-09-04T03:59:17.795499354Z",',
          '        "Path": "/hello",',
          '        "Args": [],',
          '        "State": {',
          '            "Status": "exited",',
          '            "Running": false,',
          '            "Paused": false,',
          '            "Restarting": false,',
          '            "OOMKilled": false,',
          '            "Dead": false,',
          '            "Pid": 0,',
          '            "ExitCode": 0,',
          '            "Error": "",',
          '            "StartedAt": "2023-09-04T03:59:18.406663026Z",',
          '            "FinishedAt": "2023-09-04T03:59:18.406181184Z"',
          '        },',
          '        "Image": "sha256:9c7a54a9a43cca047013b82af109fe963fde787f63f9e016fdc3384500c2823d",',
          '        "ResolvConfPath": "/var/lib/docker/containers/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e/resolv.conf",',
          '        "HostnamePath": "/var/lib/docker/containers/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e/hostname",',
          '        "HostsPath": "/var/lib/docker/containers/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e/hosts",',
          '        "LogPath": "/var/lib/docker/containers/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e-json.log",',
          '        "Name": "/strange_thompson",',
          '        ...',
          '            }',
          '        }',
          '    }',
          ']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como acordarnos de IDs es complicado para nosotros, docker asigna nombres a los contenedores para facilitarnos la vida. As√≠ en la lista anterior, la √∫ltima columna corresponde al nombre que ha asignado docker a cada contenedor, de modo que si ahora ejecutamos <code>docker inspect &lt;name&gt;</code> obtendremos la misma informaci√≥n que con la ID</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vuelvo a ejecutar <code>docker ps -a</code> para volver a ver la lista</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE         COMMAND    CREATED         STATUS                     PORTS     NAMES',
          '1efb51bbbf38   hello-world   "/hello"   2 minutes ago   Exited (0) 2 minutes ago             strange_thompson',
          '5f5705e7603e   hello-world   "/hello"   2 minutes ago   Exited (0) 2 minutes ago             laughing_jang',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y ahora ejecuto <code>docker inspect &lt;name&gt;</code> para ver la informaci√≥n del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>inspect<span class="w"> </span>strange_thompson',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[',
          '    {',
          '        "Id": "1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e",',
          '        "Created": "2023-09-04T03:59:17.795499354Z",',
          '        "Path": "/hello",',
          '        "Args": [],',
          '        "State": {',
          '            "Status": "exited",',
          '            "Running": false,',
          '            "Paused": false,',
          '            "Restarting": false,',
          '            "OOMKilled": false,',
          '            "Dead": false,',
          '            "Pid": 0,',
          '            "ExitCode": 0,',
          '            "Error": "",',
          '            "StartedAt": "2023-09-04T03:59:18.406663026Z",',
          '            "FinishedAt": "2023-09-04T03:59:18.406181184Z"',
          '        },',
          '        "Image": "sha256:9c7a54a9a43cca047013b82af109fe963fde787f63f9e016fdc3384500c2823d",',
          '        "ResolvConfPath": "/var/lib/docker/containers/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e/resolv.conf",',
          '        "HostnamePath": "/var/lib/docker/containers/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e/hostname",',
          '        "HostsPath": "/var/lib/docker/containers/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e/hosts",',
          '        "LogPath": "/var/lib/docker/containers/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e/1efb51bbbf38917affd1b5871db8e658ebfe0b2efa5ead17545680b7866f682e-json.log",',
          '        "Name": "/strange_thompson",',
          '        ...',
          '            }',
          '        }',
          '    }',
          ']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pero por qu√© con <code>docker ps</code> no vemos ning√∫n contenedor y con <code>docker ps -a</code> s√≠. Esto es porque <code>docker ps</code> solo muestra los contenedores que est√°n corriendo, mientras que <code>docker ps -a</code> muestra todos los contenedores, los que est√°n corriendo y los que est√°n apagados</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos crear un contenedor asign√°ndole un nombre nosotros mediante el comando <code>docker run --name &lt;name&gt; hello-world</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>--name<span class="w"> </span>hello_world<span class="w"> </span>hello-world',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hello from Docker!',
          'This message shows that your installation appears to be working correctly.',
          'To generate this message, Docker took the following steps:',
          ' 1. The Docker client contacted the Docker daemon.',
          ' 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.',
          '    (amd64)',
          ' 3. The Docker daemon created a new container from that image which runs the',
          '    executable that produces the output you are currently reading.',
          ' 4. The Docker daemon streamed that output to the Docker client, which sent it',
          '    to your terminal.',
          'To try something more ambitious, you can run an Ubuntu container with:',
          ' $ docker run -it ubuntu bash',
          'Share images, automate workflows, and more with a free Docker ID:',
          ' https://hub.docker.com/',
          'For more examples and ideas, visit:',
          ' https://docs.docker.com/get-started/',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Esto ser√° m√°s c√≥modo para nosotros, ya que podremos controlar nosotros los nombres de los contenedores</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora queremos crear otro contenedor con el mismo nombre no podremos, porque docker no permite que se dupliquen los nombres de los contenedores. De modo que si queremos renombrar el contenedor podemos usar el comando <code>docker rename &lt;old name&gt; &lt;new name&gt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>docker<span class="w"> </span>rename<span class="w"> </span>hello_world<span class="w"> </span>hello_world2',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Tenemos ahora un mont√≥n de contenedores iguales. As√≠ que si queremos borrar alguno tenemos que usar el comando <code>docker rm &lt;id&gt;</code> √≥ <code>docker rm &lt;name&gt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rename<span class="w"> </span>hello_world<span class="w"> </span>hello_world2',
          '</span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE         COMMAND    CREATED         STATUS                     PORTS     NAMES',
          'f432c9c2ca21   hello-world   "/hello"   9 seconds ago   Exited (0) 8 seconds ago             hello_world2',
          '1efb51bbbf38   hello-world   "/hello"   4 minutes ago   Exited (0) 4 minutes ago             strange_thompson',
          '5f5705e7603e   hello-world   "/hello"   4 minutes ago   Exited (0) 4 minutes ago             laughing_jang',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>hello_world2',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'hello_world2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si volvemos a ver la lista de contenedores, el contenedor <code>hello_world2</code> ya no estar√°</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE         COMMAND    CREATED         STATUS                     PORTS     NAMES',
          '1efb51bbbf38   hello-world   "/hello"   5 minutes ago   Exited (0) 5 minutes ago             strange_thompson',
          '5f5705e7603e   hello-world   "/hello"   5 minutes ago   Exited (0) 5 minutes ago             laughing_jang',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos borrar todos los contenedores, podemos hacerlo uno a uno, pero como es muy pesado, podemos borrar todos mediante el comando <code>docker container prune</code>. Este comando elimina solo los contenedores que est√©n parados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>container<span class="w"> </span>prune',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'WARNING! This will remove all stopped containers.',
          'Are you sure you want to continue? [y/N] y',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Docker pregunta si est√°s seguro, y si le dices que s√≠, borra todos. Si ahora listo todos los contenedores no aparece ninguno</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="El-modo-iteractivo">El modo iteractivo<a class="anchor-link" href="#El-modo-iteractivo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 137" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ejecutar un ubuntu mediante el comando <code>docker run ubuntu</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>ubuntu',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Unable to find image \'ubuntu:latest\' locally',
          'latest: Pulling from library/ubuntu',
          'Digest: sha256:20fa2d7bb4de7723f542be5923b06c4d704370f0390e4ae9e1c833c8785644c1[1A',
          'Status: Downloaded newer image for ubuntu:latest',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos ahora ha tardado m√°s en descargar. Si listamos los contenedores mediante el comando <code>docker ps</code> vemos que no aparece el contenedor que acabamos de crear, es decir, no est√° corriendo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Listamos ahora todos los contenedores</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED         STATUS                     PORTS     NAMES',
          'da16b3a85178   ubuntu    "bash"    4 seconds ago   Exited (0) 3 seconds ago             hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que el estado del contenedor es <code>Exited (0)</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si nos fijamos en comando del contenedor aparece <code>bash</code> y junto al estado <code>Exited (0)</code> nos indica que ha arrancado Ubuntu, ha ejecutado su <em>bash</em>, ha terminado la ejecuci√≥n y ha devuelto un 0. Esto pasa porque al bash de Ubuntu no se le ha dicho nada que hacer. Para solucionar esto, ahora vamos a ejecutar el contenedor mediante el comando <code>docker run -it ubuntu</code>, con <code>it</code> lo que le estamos indicando es que lo queremos ejecutar en modo iterativo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>-it<span class="w"> </span>ubuntu',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'root@5b633e9d838f:/#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora vemos que estamos dentro del bash de ubuntu. Si ejecutamos el comando <code>cat /etc/lsb-release</code> podemos ver la distribuci√≥n de Ubuntu</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>root@5b633e9d838f:/#<span class="w"> </span>cat<span class="w"> </span>/etc/lsb-release',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'DISTRIB_ID=Ubuntu',
          'DISTRIB_RELEASE=22.04',
          'DISTRIB_CODENAME=jammy',
          'DISTRIB_DESCRIPTION="Ubuntu 22.04.1 LTS"',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si abrimos otra terminal y vemos la lista de contenedores, ahora si aparecer√° el contenedor corriendo Ubuntu</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED         STATUS         PORTS     NAMES',
          '5b633e9d838f   ubuntu    "bash"    3 minutes ago   Up 3 minutes             funny_mirzakhani',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos el contenedor con Ubuntu y en su estado podemos ver <code>UP</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si vemos ahora la lista de todos los contenedores, veremos que aparecen los dos contenedores con Ubuntu, el primero apagado y el segundo el que est√° corriendo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED         STATUS                     PORTS     NAMES',
          '5b633e9d838f   ubuntu    "bash"    3 minutes ago   Up 3 minutes                         funny_mirzakhani',
          'da16b3a85178   ubuntu    "bash"    3 minutes ago   Exited (0) 3 minutes ago             hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si volvemos a la terminal donde ten√≠amos Ubuntu corriendo dentro de un docker, si escribimos <code>exit</code> saldremos de Ubuntu.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>root@5b633e9d838f:/#<span class="w"> </span>exit',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'exit',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ejecutamos <code>docker ps</code> el contenedor ya no aparece</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pero si ejecuto <code>docker ps -a</code> s√≠ que aparece. Esto quiere decir que el contenedor se apag√≥</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED         STATUS                      PORTS     NAMES',
          '5b633e9d838f   ubuntu    "bash"    4 minutes ago   Exited (0) 27 seconds ago             funny_mirzakhani',
          'da16b3a85178   ubuntu    "bash"    4 minutes ago   Exited (0) 4 minutes ago              hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Esto ocurre porque al escribir <code>exit</code>, en realidad lo estamos escribiendo en la consola del bash de Ubuntu, lo que significa que que estamos terminando el proceso bash de Ubuntu.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Ciclo-de-vida-de-un-contenedor">Ciclo de vida de un contenedor<a class="anchor-link" href="#Ciclo-de-vida-de-un-contenedor"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 138" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En docker, cuando el proceso principal de un contenedor se termina, se apaga el contenedor. Dentro de un contenedor pueden ejecutarse varios procesos, pero solo cuando se termina el proceso principal se apaga el contenedor</p>
      <p>Por tanto, si queremos correr un contenedor que no se apague cuando finalice un proceso, debemos hacer que su proceso principal no se termine. En este caso, que no finalice bash</p>
      <p>Si queremos ejecutar un contenedor con ubuntu, pero que no finalice cuando termine el proceso de bash lo podemos hacer de la siguiente manera</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>--name<span class="w"> </span>alwaysup<span class="w"> </span>-d<span class="w"> </span>ubuntu<span class="w"> </span>tail<span class="w"> </span>-f<span class="w"> </span>/dev/null',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'ce4d60427dcd4b326d15aa832b816c209761d6b4e067a016bb75bf9366c37054',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Lo que hacemos es primero darle el nombre <code>alwaysup</code>, en segundo lugar pasarle la opci√≥n <code>-d</code> (<code>detach</code>) para que el contenedor se ejecute en segundo plano y por √∫ltimo le decimos el proceso principal que queremos que se ejecute en el contenedor, que en este caso es <code>tail -f /dev/null</code> que equivale a un comando <code>nop</code></p>
      <p>Esto nos devolver√° la ID del contenedor, pero no estaremos dentro de ubuntu como pasaba antes</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora vemos la lista de contenedores que se est√°n ejecutando aparece el contenedor que acabamos de crear</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS          PORTS     NAMES',
          'ce4d60427dcd   ubuntu    "tail -f /dev/null"   18 seconds ago   Up 17 seconds             alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como ya tenemos un contenedor corriendo siempre, podemos conectarnos al el mediante el comando <code>exec</code>. Le decimos el nombre o la ID del contenedor y le pasamos el proceso que queremos que se ejecuta. Adem√°s pasamos la opci√≥n <code>-it</code> para decirle que sea iteractivo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span><span class="nb">exec</span><span class="w"> </span>-it<span class="w"> </span>alwaysup<span class="w"> </span>bash',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'root@ce4d60427dcd:/#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora volvemos a estar dentro de ubuntu. Si ejecutamos el commando <code>ps -aux</code> podemos ver una lista de los procesos que se est√°n ejecutando dentro de ubuntu.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ps<span class="w"> </span>-aux',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND',
          'root           1  0.0  0.0   2820  1048 ?        Ss   13:04   0:00 tail -f /dev/null',
          'root           7  0.0  0.0   4628  3796 pts/0    Ss   13:04   0:00 bash',
          'root          15  0.0  0.0   7060  1556 pts/0    R+   13:05   0:00 ps -aux',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos solo tres procesos, el <code>ps -aux</code>, el <code>bash</code> y el <code>tail -f /dev/null</code></p>
      <p>Este contenedor va a estar siempre encendido mientras el proceso <code>tail -f /dev/null</code> siga corriendo</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si salimos del contenedor con el comando <code>exit</code> y ejecutamos el comando <code>docker ps</code> vemos que el contenedor sigue encendido</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>exit',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'exit',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED         STATUS         PORTS     NAMES',
          'ce4d60427dcd   ubuntu    "tail -f /dev/null"   2 minutes ago   Up 2 minutes             alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para poder finalizar el proceso y poder apagar el contenedor debemos usar el comando <code>docker stop &lt;name&gt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>stop<span class="w"> </span>alwaysup',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora volvemos a listar los contenedores encendidos ya no aparece el contenedor con Ubuntu</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y si listamos todos los contenedores, aparece el contenedor con Ubuntu, y su estado <code>Exited</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS                            PORTS     NAMES',
          'ce4d60427dcd   ubuntu    "tail -f /dev/null"   14 minutes ago   Exited (137) About a minute ago             alwaysup',
          '5b633e9d838f   ubuntu    "bash"                19 minutes ago   Exited (0) 15 minutes ago                   funny_mirzakhani',
          'da16b3a85178   ubuntu    "bash"                20 minutes ago   Exited (0) 20 minutes ago                   hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Tambien podemos pausar un contenedor mediante el comando <code>docker pause &lt;name&gt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>--name<span class="w"> </span>alwaysup<span class="w"> </span>-d<span class="w"> </span>ubuntu<span class="w"> </span>tail<span class="w"> </span>-f<span class="w"> </span>/dev/null',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '8282eaf9dc3604fa94df206b2062287409cc92cbcd203f1a018742b5c171c9e4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora lo pausamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>pause<span class="w"> </span>alwaysup',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si volvemos a ver todos los contenedores, vemos que el contenedor con Ubuntu est√° pausado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS                       PORTS     NAMES',
          '8282eaf9dc36   ubuntu    "tail -f /dev/null"   41 seconds ago   Up 41 seconds (Paused)                 alwaysup',
          '5b633e9d838f   ubuntu    "bash"                19 minutes ago   Exited (0) 15 minutes ago              funny_mirzakhani',
          'da16b3a85178   ubuntu    "bash"                20 minutes ago   Exited (0) 20 minutes ago              hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Contenedores-de-un-solo-uso">Contenedores de un solo uso<a class="anchor-link" href="#Contenedores-de-un-solo-uso"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 139" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si a la hora de ejecutar un contenedor, ponemos la opci√≥n <code>--rm</code>, ese contenedor se va a borrar cuando termine de ejecutarse.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>--rm<span class="w"> </span>--name<span class="w"> </span>autoremove<span class="w"> </span>ubuntu:latest',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Si ahora vemos qu√© contenedores tenemos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>--rm<span class="w"> </span>--name<span class="w"> </span>autoremove<span class="w"> </span>ubuntu:latest',
          '</span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que no est√° el contenedor que acabamos de crear</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Exponer-contenedores-al-mundo-exterior">Exponer contenedores al mundo exterior<a class="anchor-link" href="#Exponer-contenedores-al-mundo-exterior"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 140" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear un nuevo contenedor con un servidor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>-d<span class="w"> </span>--name<span class="w"> </span>proxy<span class="w"> </span>nginx',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Unable to find image \'nginx:latest\' locally',
          'latest: Pulling from library/nginx',
          'f1ad4ce1: Pulling fs layer ',
          'b079d0f8: Pulling fs layer ',
          '5fbbebc6: Pulling fs layer ',
          'ffdd25f4: Pulling fs layer ',
          '32c8fba2: Pulling fs layer ',
          '24b8ba39: Pull complete 393kB/1.393kBB[5ADigest: sha256:2888a97f7c7d498bbcc47ede1ad0f6ced07d72dfd181071dde051863f1f79d7b',
          'Status: Downloaded newer image for nginx:latest',
          '1a530e04f14be082811b72ea8b6ea5a95dad3037301ee8a1351a0108ff8d3b30',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Esto crea un servidor, vamos a volver a listar los contenedores que est√°n corriendo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND                  CREATED        STATUS                  PORTS     NAMES',
          '1a530e04f14b   nginx     "/docker-entrypoint.‚Ä¶"   1 second ago   Up Less than a second   80/tcp    proxy',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora aparece una nueva columna con el puerto, y nos dice que el servidor que acabamos de crear est√° en el puerto <code>80</code> bajo el protocolo <code>tcp</code>.</p>
      <p>Si abrimos un navegador e intentamos conectarnos al servidor mediante <code>http://localhost:80</code> no conseguimos conectar. Esto es porque cada contenedor tiene su propia interfaz de red. Es decir, el servidor est√° escuchando en el puerto <code>80</code> del contenedor, pero nosotros estamos intentando conectar al puerto <code>80</code> del host</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Paramos el contenedor para relanzarlo de otra forma</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>stop<span class="w"> </span>proxy',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'proxy',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si listamos los contenedores no aparece corriendo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Lo borramos para volver a crearlo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>proxy',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'proxy',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si listamos todos los contenedores ya no est√°</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS                       PORTS     NAMES',
          'ce4d60427dcd   ubuntu    "tail -f /dev/null"   19 minutes ago   Exited (137) 5 minutes ago             alwaysup',
          '5b633e9d838f   ubuntu    "bash"                24 minutes ago   Exited (0) 20 minutes ago              funny_mirzakhani',
          'da16b3a85178   ubuntu    "bash"                24 minutes ago   Exited (0) 24 minutes ago              hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para volver a crear el contenedor con el servidor y poderlo ver desde el host, tenemos que usar la opci√≥n <code>-p</code> (<code>publish</code>), indicando en primer lugar el puerto en el que queremos verlo en el host y a continuaci√≥n el puerto del contenedor, es decir, <code>-p &lt;ip host&gt;:&lt;ip conteiner&gt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>-d<span class="w"> </span>--name<span class="w"> </span>proxy<span class="w"> </span>-p<span class="w"> </span><span class="m">8080</span>:80<span class="w"> </span>nginx',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'c199235e42f76a30266f6e1af972e0a59811806eb3d3a9afdd873f6fa1785eae',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Listamos los contenedores</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                   NAMES',
          'c199235e42f7   nginx     "/docker-entrypoint.‚Ä¶"   22 seconds ago   Up 21 seconds   0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp   proxy',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que el puerto del contenedor es <code>0.0.0.0:8080-&gt;80/tcp</code>. Si ahora vamos a un navegador e introducimos <code>0.0.0.0:8080</code> podremos acceder al servidor del contenedor</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al listar los contenedores, en la columna <code>PORTS</code> indica <code>0.0.0.0:8080-&gt;80/tcp</code>, lo que nos ayuda a ver la relaci√≥n de puertos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para ver los logs del contenedor, mediante el comando <code>docker logs &lt;name&gt;</code> puedo ver los logs del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>logs<span class="w"> </span>proxy',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration',
          '/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/',
          '/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh',
          '10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf',
          '10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf',
          '/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh',
          '/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh',
          '/docker-entrypoint.sh: Configuration complete; ready for start up',
          '2022/09/13 13:24:06 [notice] 1#1: using the "epoll" event method',
          '2022/09/13 13:24:06 [notice] 1#1: nginx/1.23.1',
          '2022/09/13 13:24:06 [notice] 1#1: built by gcc 10.2.1 20210110 (Debian 10.2.1-6) ',
          '2022/09/13 13:24:06 [notice] 1#1: OS: Linux 5.15.0-46-generic',
          '2022/09/13 13:24:06 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576',
          '2022/09/13 13:24:06 [notice] 1#1: start worker processes',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 31',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 32',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 33',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 34',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 35',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 36',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 37',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 38',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 39',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 40',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 41',
          '...',
          '172.17.0.1 - - [13/Sep/2022:13:24:40 +0000] "GET /favicon.ico HTTP/1.1" 404 555 "http://0.0.0.0:8080/" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36" "-"',
          '172.17.0.1 - - [13/Sep/2022:13:25:00 +0000] "\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03\xE2\x19V$Zqi\'\xD7\xFC[\x80\xEF\xBA\xE5\xC7\xE8\xF7&amp;3nS\xEB\xC9\xEC\x91\xC2\xD8\xD1\x89\x9E\xBE \xC7?\xE1\xFA\x04a\x1C\xCE\x90\x0F\x8F\x98u\xE3/\xD8RfOH\xEC\x92+\x93\x5C\xBB\xB1\xBF\xD2m\xB09\x00 \xFA\xFA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93\x9A\x9A\x00\x00\x00\x00\x00\x0E\x00\x0C\x00\x00\x09localhost\x00\x17\x00\x00\xFF\x01\x00\x01\x00\x00" 400 157 "-" "-" "-"',
          '172.17.0.1 - - [13/Sep/2022:13:25:00 +0000] "\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03)\x9A\x8FbC\xD9m\xF1\x86\xEBd\x22\xCF\xC4E\x87#~L\xC1\x84\x7F\xB5\x91k\x98\xABl\xEE\x1E[0 \xD0\xD2`\x85\xC6\x8B\x85R\x8B\x87\xEAq{P\xF2\xFB\xE2\xA8\x9DI\xF4tH\x99\x13\x10~\xCA1-|\x8E\x00 \xEA\xEA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93" 400 157 "-" "-" "-"',
          '172.17.0.1 - - [13/Sep/2022:13:26:28 +0000] "GET / HTTP/1.1" 304 0 "-" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36" "-"',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora puedo ver todas las peticiones que se le han hecho al servidor. Pero si quiero ver los logs en tiempo real, mediante <code>docker logs -f &lt;name&gt;</code> lo puedo hacer</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>logs<span class="w"> </span>-f<span class="w"> </span>proxy',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora puedo ver los logs en tiempo real. Para salir introducir <code>CTRL+C</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como puede llegar un momento en el que haya muchos logs, si solo quieres los √∫ltimos logs, mediante la opci√≥n <code>--tail &lt;num&gt;</code> puedo ver los √∫ltimos <code>&lt;num&gt;</code> logs. Si a√±ado la opci√≥n <code>-f</code> estaremos viendo siempre los √∫ltimos <code>&lt;num&gt;</code> logs</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>logs<span class="w"> </span>--tail<span class="w"> </span><span class="m">10</span><span class="w"> </span>proxy',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 41',
          '2022/09/13 13:24:06 [notice] 1#1: start worker process 42',
          '172.17.0.1 - - [13/Sep/2022:13:24:16 +0000] "\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03\x01E\x14\x8E\xB6\x0BEg\xF3\xC9\x9A\x19\x9C\xCA\xEC\xA7y#3\x92\x05\x95\xDCQ\x07\x19\x1D\xEF\xEA$\xBF# \x0B\x83\xF7-,s\x1B!r\xEA|\xAE\xDF\xA1\x9DLZ\xAA4y\xB3t\xAB\xC0\xCE_\xB8\xE7\xFF\'\xCF\x86\x00 \xEA\xEA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93\x8A\x8A\x00\x00\x00\x00\x00\x0E\x00\x0C\x00\x00\x09localhost\x00\x17\x00\x00\xFF\x01\x00\x01\x00\x00" 400 157 "-" "-" "-"',
          '172.17.0.1 - - [13/Sep/2022:13:24:16 +0000] "\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03}\xA9Dr{\x8C;\x90z\x82\xAD\xBC\x8Az\xC2x\xDF\x1E\x9A\xE6l?\xA7\xE0DoK\x91\'g\xBB\xB5 %\xBB\xFD\xD9\x82?\xDB\x80\xB3T\xF6cJ\xF7\xE5\xC2\xD2\x11\xBC\xA2\x1F\x90\x14\xA3\xEB\xBD=R\xBC\x83\x89\x85\x00 \xCA\xCA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93\x9A\x9A\x00\x00\x00\x00\x00\x0E\x00\x0C\x00\x00\x09localhost\x00\x17\x00\x00\xFF\x01\x00\x01\x00\x00" 400 157 "-" "-" "-"',
          '172.17.0.1 - - [13/Sep/2022:13:24:39 +0000] "GET / HTTP/1.1" 200 615 "-" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36" "-"',
          '2022/09/13 13:24:40 [error] 34#34: *3 open() "/usr/share/nginx/html/favicon.ico" failed (2: No such file or directory), client: 172.17.0.1, server: localhost, request: "GET /favicon.ico HTTP/1.1", host: "0.0.0.0:8080", referrer: "http://0.0.0.0:8080/"',
          '172.17.0.1 - - [13/Sep/2022:13:24:40 +0000] "GET /favicon.ico HTTP/1.1" 404 555 "http://0.0.0.0:8080/" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36" "-"',
          '172.17.0.1 - - [13/Sep/2022:13:25:00 +0000] "\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03\xE2\x19V$Zqi\'\xD7\xFC[\x80\xEF\xBA\xE5\xC7\xE8\xF7&amp;3nS\xEB\xC9\xEC\x91\xC2\xD8\xD1\x89\x9E\xBE \xC7?\xE1\xFA\x04a\x1C\xCE\x90\x0F\x8F\x98u\xE3/\xD8RfOH\xEC\x92+\x93\x5C\xBB\xB1\xBF\xD2m\xB09\x00 \xFA\xFA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93\x9A\x9A\x00\x00\x00\x00\x00\x0E\x00\x0C\x00\x00\x09localhost\x00\x17\x00\x00\xFF\x01\x00\x01\x00\x00" 400 157 "-" "-" "-"',
          '172.17.0.1 - - [13/Sep/2022:13:25:00 +0000] "\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03)\x9A\x8FbC\xD9m\xF1\x86\xEBd\x22\xCF\xC4E\x87#~L\xC1\x84\x7F\xB5\x91k\x98\xABl\xEE\x1E[0 \xD0\xD2`\x85\xC6\x8B\x85R\x8B\x87\xEAq{P\xF2\xFB\xE2\xA8\x9DI\xF4tH\x99\x13\x10~\xCA1-|\x8E\x00 \xEA\xEA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93" 400 157 "-" "-" "-"',
          '172.17.0.1 - - [13/Sep/2022:13:26:28 +0000] "GET / HTTP/1.1" 304 0 "-" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36" "-"',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si adem√°s a√±adimos la opci√≥n <code>-t</code> podemos ver la fecha y hora de cada log, de esta manera si hemos tenido un problema, podemos saber en qu√© momento ha ocurrido</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>logs<span class="w"> </span>--tail<span class="w"> </span>-t<span class="w"> </span><span class="m">10</span><span class="w"> </span>proxy',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2022-09-13T13:24:06.573362728Z 2022/09/13 13:24:06 [notice] 1#1: start worker process 41',
          '2022-09-13T13:24:06.651127107Z 2022/09/13 13:24:06 [notice] 1#1: start worker process 42',
          '2022-09-13T13:24:16.651160189Z 172.17.0.1 - - [13/Sep/2022:13:24:16 +0000] "\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03\x01E\x14\x8E\xB6\x0BEg\xF3\xC9\x9A\x19\x9C\xCA\xEC\xA7y#3\x92\x05\x95\xDCQ\x07\x19\x1D\xEF\xEA$\xBF# \x0B\x83\xF7-,s\x1B!r\xEA|\xAE\xDF\xA1\x9DLZ\xAA4y\xB3t\xAB\xC0\xCE_\xB8\xE7\xFF\'\xCF\x86\x00 \xEA\xEA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93\x8A\x8A\x00\x00\x00\x00\x00\x0E\x00\x0C\x00\x00\x09localhost\x00\x17\x00\x00\xFF\x01\x00\x01\x00\x00" 400 157 "-" "-" "-"',
          '2022-09-13T13:24:16.116817914Z 172.17.0.1 - - [13/Sep/2022:13:24:16 +0000] "\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03}\xA9Dr{\x8C;\x90z\x82\xAD\xBC\x8Az\xC2x\xDF\x1E\x9A\xE6l?\xA7\xE0DoK\x91\'g\xBB\xB5 %\xBB\xFD\xD9\x82?\xDB\x80\xB3T\xF6cJ\xF7\xE5\xC2\xD2\x11\xBC\xA2\x1F\x90\x14\xA3\xEB\xBD=R\xBC\x83\x89\x85\x00 \xCA\xCA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93\x9A\x9A\x00\x00\x00\x00\x00\x0E\x00\x0C\x00\x00\x09localhost\x00\x17\x00\x00\xFF\x01\x00\x01\x00\x00" 400 157 "-" "-" "-"',
          '2022-09-13T13:24:39.117398081Z 172.17.0.1 - - [13/Sep/2022:13:24:39 +0000] "GET / HTTP/1.1" 200 615 "-" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36" "-"',
          '2022-09-13T13:24:39.117412408Z 2022/09/13 13:24:40 [error] 34#34: *3 open() "/usr/share/nginx/html/favicon.ico" failed (2: No such file or directory), client: 172.17.0.1, server: localhost, request: "GET /favicon.ico HTTP/1.1", host: "0.0.0.0:8080", referrer: "http://0.0.0.0:8080/"',
          '2022-09-13T13:24:40.117419389Z 172.17.0.1 - - [13/Sep/2022:13:24:40 +0000] "GET /favicon.ico HTTP/1.1" 404 555 "http://0.0.0.0:8080/" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36" "-"',
          '2022-09-13T13:25:00.117434249Z 172.17.0.1 - - [13/Sep/2022:13:25:00 +0000] "\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03\xE2\x19V$Zqi\'\xD7\xFC[\x80\xEF\xBA\xE5\xC7\xE8\xF7&amp;3nS\xEB\xC9\xEC\x91\xC2\xD8\xD1\x89\x9E\xBE \xC7?\xE1\xFA\x04a\x1C\xCE\x90\x0F\x8F\x98u\xE3/\xD8RfOH\xEC\x92+\x93\x5C\xBB\xB1\xBF\xD2m\xB09\x00 \xFA\xFA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93\x9A\x9A\x00\x00\x00\x00\x00\x0E\x00\x0C\x00\x00\x09localhost\x00\x17\x00\x00\xFF\x01\x00\x01\x00\x00" 400 157 "-" "-" "-"',
          '2022-09-13T13:25:00.223560881Z 172.17.0.1 - - [13/Sep/2022:13:25:00 +0000] "\x16\x03\x01\x02\x00\x01\x00\x01\xFC\x03\x03)\x9A\x8FbC\xD9m\xF1\x86\xEBd\x22\xCF\xC4E\x87#~L\xC1\x84\x7F\xB5\x91k\x98\xABl\xEE\x1E[0 \xD0\xD2`\x85\xC6\x8B\x85R\x8B\x87\xEAq{P\xF2\xFB\xE2\xA8\x9DI\xF4tH\x99\x13\x10~\xCA1-|\x8E\x00 \xEA\xEA\x13\x01\x13\x02\x13\x03\xC0+\xC0/\xC0,\xC00\xCC\xA9\xCC\xA8\xC0\x13\xC0\x14\x00\x9C\x00\x9D\x00/\x005\x01\x00\x01\x93" 400 157 "-" "-" "-"',
          '2022-09-13T13:26:25.223596738Z 172.17.0.1 - - [13/Sep/2022:13:26:28 +0000] "GET / HTTP/1.1" 304 0 "-" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36" "-"',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Paramos y borramos el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>-f<span class="w"> </span>proxy',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'proxy',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS                        PORTS     NAMES',
          'ce4d60427dcd   ubuntu    "tail -f /dev/null"   26 minutes ago   Exited (137) 13 minutes ago             alwaysup',
          '5b633e9d838f   ubuntu    "bash"                31 minutes ago   Exited (0) 27 minutes ago               funny_mirzakhani',
          'da16b3a85178   ubuntu    "bash"                32 minutes ago   Exited (0) 32 minutes ago               hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Datos-en-Docker">Datos en Docker<a class="anchor-link" href="#Datos-en-Docker"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 141" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Bind-mounts">Bind mounts<a class="anchor-link" href="#Bind-mounts"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 142" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver los contenedores que tenemos parados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS                        PORTS     NAMES',
          'ce4d60427dcd   ubuntu    "tail -f /dev/null"   26 minutes ago   Exited (137) 13 minutes ago             alwaysup',
          '5b633e9d838f   ubuntu    "bash"                31 minutes ago   Exited (0) 28 minutes ago               funny_mirzakhani',
          'da16b3a85178   ubuntu    "bash"                32 minutes ago   Exited (0) 32 minutes ago               hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a borrar los dos de ubuntu en los que su comando principal es la bash y vamos a dejar el que dejamos una no operaci√≥n</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>funny_mirzakhani',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'funny_mirzakhani',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'hardcore_kare',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS                        PORTS     NAMES',
          'ce4d60427dcd   ubuntu    "tail -f /dev/null"   27 minutes ago   Exited (137) 14 minutes ago             alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a volver a ejecutar el contenedor de ubuntu que hemos dejado, esto se hace mediante el comando <code>start</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>start<span class="w"> </span>alwaysup',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Nos metemos otra vez dentro de el</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span><span class="nb">exec</span><span class="w"> </span>-it<span class="w"> </span>alwaysup<span class="w"> </span>bash',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'root@ce4d60427dcd:/#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En el contenedor, puedo crear una nueva carpeta que se llame <code>dockerfolder</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>mkdir<span class="w"> </span>dockerfolder',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si listamos los archivos aparecer√° la nueva carpeta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'bin  boot  dev  dockerfolder  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si salimos del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>exit',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'exit',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y lo borramos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>-f<span class="w"> </span>alwaysup',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si listamos todos los contenedores ya no aparece el √∫ltimo que hemos creado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a volver a hacer todo, pero primero vamos a crear una carpeta en el host en la que compartiremos los datos con el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>dockerHostFolder',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Vemos que dentro de la carpeta no hay nada</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>dockerHostFolder',
      '<span></span><span class="o">!</span>ls<span class="w"> </span>dockerHostFolder',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Ahora obtenemos nuestra ruta absoluta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>mkdir<span class="w"> </span>dockerHostFolder',
          '</span><span class="o">!</span>ls<span class="w"> </span>dockerHostFolder',
          '</span><span class="o">!</span>pwd',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '/home/wallabot/Documentos/web/portafolio/posts',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Volvemos a crear el contenedor pero a√±adiendo la opci√≥n <code>-v</code> (<code>bind mount</code>). A continuaci√≥n se a√±ade la ruta absoluta de la carpeta del host y la ruta absoluta de la carpeta en el contenedor, <code>-v &lt;host path&gt;:&lt;container path&gt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>-d<span class="w"> </span>--name<span class="w"> </span>alwaysup<span class="w"> </span>-v<span class="w"> </span>~/Documentos/web/portafolio/posts/dockerHostFolder:/dockerContainerFolder<span class="w"> </span>ubuntu<span class="w"> </span>tail<span class="w"> </span>-f<span class="w"> </span>/dev/null',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '4ede4512c293bdcc155e9c8e874dfb4a28e5163f4d5c7ddda24ad2863f28921b',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Entramos al contenedor, listamos los archivos y ya aparece la carpeta que hab√≠amos creado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span><span class="nb">exec</span><span class="w"> </span>-it<span class="w"> </span>alwaysup<span class="w"> </span>bash',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'root@4ede4512c293:/#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">root</span><span class="o">@</span><span class="mi">4</span><span class="n">ede4512c293</span><span class="p">:</span><span class="o">/</span><span class="c1"># ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'bin   dev                    etc   lib    lib64   media  opt   root  sbin  sys  usr',
          'boot  dockerContainerFolder  home  lib32  libx32  mnt    proc  run   srv   tmp  var',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos al directorio del contenedor que hemos compartido, creamos un archivo y salimos del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">root</span><span class="o">@</span><span class="mi">4</span><span class="n">ede4512c293</span><span class="p">:</span><span class="o">/</span><span class="c1"># cd dockerContainerFolder</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">root</span><span class="o">@</span><span class="mi">4</span><span class="n">ede4512c293</span><span class="p">:</span><span class="o">/</span><span class="n">dockerContainerFolder</span><span class="c1"># touch bindFile.txt</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">root</span><span class="o">@</span><span class="mi">4</span><span class="n">ede4512c293</span><span class="p">:</span><span class="o">/</span><span class="n">dockerContainerFolder</span><span class="c1"># exit</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'exit',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos qu√© hay dentro de la carpeta compartida</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ls<span class="w"> </span>dockerHostFolder',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'bindFile.txt',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pero es m√°s, si borramos el contenedor, el archivo sigue ah√≠</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>-f<span class="w"> </span>alwaysup',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ls<span class="w"> </span>dockerHostFolder',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'bindFile.txt',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si vuelvo a crear un contenedor compartiendo las carpetas, todos los archivos estar√°n en el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>-d<span class="w"> </span>--name<span class="w"> </span>alwaysup<span class="w"> </span>-v<span class="w"> </span>~/Documentos/web/portafolio/posts/dockerHostFolder:/dockerContainerFolder<span class="w"> </span>ubuntu<span class="w"> </span>tail<span class="w"> </span>-f<span class="w"> </span>/dev/null',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '6c021d37ea29d8b23fe5cd4968baa446085ae1756682f65340288b4c851c362d',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span><span class="nb">exec</span><span class="w"> </span>-it<span class="w"> </span>alwaysup<span class="w"> </span>bash',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'root@6c021d37ea29:/#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>root@6c021d37ea29:/#<span class="w"> </span>ls<span class="w"> </span>dockerContainerFolder/',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'bindFile.txt:/#',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Eliminamos el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>-f<span class="w"> </span>alwaysup',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Vol%C3%BAmenes">Vol√∫menes<a class="anchor-link" href="#Vol%C3%BAmenes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 143" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Los vol√∫menes se crearon como una evoluci√≥n de los <code>bind mounts</code> para dar m√°s seguridad. Podemos listar todos los vol√∫menes de docker mediante <code>docker volume ls</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>volume<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'DRIVER    VOLUME NAME',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear un nuevo volumen para el contenedor de ubuntu, para ello usamos el comando <code>docker volume create &lt;volume name&gt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>volume<span class="w"> </span>create<span class="w"> </span>ubuntuVolume',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'ubuntuVolume',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si volvemos a listar los vol√∫menes aparecer√° el que acabamos de crear</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>volume<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'DRIVER    VOLUME NAME',
          'local     ubuntuVolume',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Sin embargo no aparece como una carpeta en el sistema de archivos del host. Con <code>ls -d */</code> listamos todas las carpetas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ls<span class="w"> </span>-d<span class="w"> </span>*/',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dockerHostFolder/  __pycache__/',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a volver a crear un contenedor, pero ahora lo creamos con el volumen que acabamos de crear con la opci√≥n <code>--mount</code>, indicando el volumen fuente mediante <code>src=&lt;volume name&gt;</code> (si el volumen no existiese, docker lo crear√≠a), a continuaci√≥n el destino separado por una <code>,</code>, <code>dst=&lt;container path&gt;</code>, es decir <code>--mount src=&lt;volume name&gt;,dst=&lt;container path&gt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>-d<span class="w"> </span>--name<span class="w"> </span>alwaysup<span class="w"> </span>--mount<span class="w"> </span><span class="nv">src</span><span class="o">=</span>ubuntuVolume,dst<span class="o">=</span>/dockerVolumeFolder<span class="w"> </span>ubuntu<span class="w"> </span>tail<span class="w"> </span>-f<span class="w"> </span>/dev/null',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '42cdcddf4e46dc298a87b0570115e0b2fc900cb4c6db5eea22a61409b8cb271d',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Una vez creado podemos ver los vol√∫menes del contenedor mediante el comando <code>inspect</code> y filtrando por <code>'{opening_brace}{opening_brace}.Mounts{closing_brace}{closing_brace}'</code></p>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span>inspect<span class="w"> </span>--format<span class="w"> </span><span class="s1">'{opening_brace}{opening_brace}.Mounts{closing_brace}{closing_brace}'</span><span class="w"> </span>alwaysup<span class="w"> </span>
      <span class="o">[</span>
      <span class="w">    </span><span class="o">{opening_brace}</span>
      <span class="w">        </span>volume<span class="w"> </span>ubuntuVolume<span class="w"> </span>/var/lib/docker/volumes/ubuntuVolume/_data<span class="w"> </span>/dockerVolumeFolder<span class="w"> </span><span class="nb">local</span><span class="w"> </span>z<span class="w"> </span><span class="nb">true</span><span class="w"> </span>
      <span class="w">    </span><span class="o">{closing_brace}</span>
      <span class="o">]</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que el volumen se llama <code>ubuntuVolume</code> y ademas podemos ver la ruta d√≥nde est√° guardado, en este caso en <code>/var/lib/docker/volumes/ubuntuVolume/_data</code>. Hacemos lo mismo que antes, nos metemos en el contenedor, creamos un archivo en la ruta del volumen, salimos y vemos en el host si se ha creado</p>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span><span class="nb">exec</span><span class="w"> </span>-it<span class="w"> </span>alwaysup<span class="w"> </span>bash
      root@42cdcddf4e46:/#<span class="w"> </span>touch<span class="w"> </span>dockerVolumeFolder/volumeFile.txt
      root@42cdcddf4e46:/#<span class="w"> </span><span class="nb">exit</span>
      </pre></div>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>sudo<span class="w"> </span>ls<span class="w"> </span>/var/lib/docker/volumes/ubuntuVolume/_data
      volumeFile.txt
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Est√° el archivo creado</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Insertar-y-extraer-archivos-de-un-contenedor">Insertar y extraer archivos de un contenedor<a class="anchor-link" href="#Insertar-y-extraer-archivos-de-un-contenedor"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 144" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primero vamos a crear un archivo que queremos copiar dentro de un contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>touch<span class="w"> </span>dockerHostFolder/text.txt',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Entramos en el contenedor</p>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span><span class="nb">exec</span><span class="w"> </span>-it<span class="w"> </span>alwaysup<span class="w"> </span>bash
      root@42cdcddf4e46:/#
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos una nueva carpeta donde vamos a copiar el archivo y salimos</p>
      <div class="highlight"><pre><span></span>root@42cdcddf4e46:/#<span class="w"> </span>mkdir<span class="w"> </span>folderToCopy
      root@42cdcddf4e46:/#<span class="w"> </span>ls
      bin<span class="w">  </span>boot<span class="w">  </span>dev<span class="w">  </span>dockerVolumeFolder<span class="w">  </span>etc<span class="w">  </span>folderToCopy<span class="w">  </span>home<span class="w">  </span>lib<span class="w">  </span>lib32<span class="w">  </span>lib64<span class="w">  </span>libx32<span class="w">  </span>media<span class="w">  </span>mnt<span class="w">  </span>opt<span class="w">  </span>proc<span class="w">  </span>root<span class="w">  </span>run<span class="w">  </span>sbin<span class="w">  </span>srv<span class="w">  </span>sys<span class="w">  </span>tmp<span class="w">  </span>usr<span class="w">  </span>var
      root@42cdcddf4e46:/#<span class="w"> </span><span class="nb">exit</span>
      <span class="nb">exit</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Copiamos dentro del contenedor el archivo mediante el comando <code>cp</code>, indicando el archivo que quiero copiar, el contenedor donde lo queremos copiar y la ruta dentro del contenedor, <code>docker cp &lt;file&gt; &lt;container&gt;:&lt;container path&gt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>touch<span class="w"> </span>dockerHostFolder/text.txt',
      '<span></span><span class="o">!</span>docker<span class="w"> </span>cp<span class="w"> </span>dockerHostFolder/text.txt<span class="w"> </span>alwaysup:/folderToCopy',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Volvemos a entrar al contenedor y comprobamos que est√° el archivo</p>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span><span class="nb">exec</span><span class="w"> </span>-it<span class="w"> </span>alwaysup<span class="w"> </span>bash
      root@42cdcddf4e46:/#<span class="w"> </span>ls<span class="w"> </span>folderToCopy/
      text.txt
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Salimos del contenedor</p>
      <div class="highlight"><pre><span></span>/#<span class="w"> </span><span class="nb">exit</span>
      <span class="nb">exit</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora vamos a extraer el archivo del contenedor y lo vamos a guardar en el host con otro nombre, para ello usamos el comando otra vez el comando <code>cp</code>, pero indicando ahora el contenedor, la ruta del archivo en el contenedor y la ruta y nombre del que queremos que tenga el archivo en el host, <code>docker cp &lt;container&gt;:&lt;docker file path&gt; &lt;host file path&gt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>touch<span class="w"> </span>dockerHostFolder/text.txt',
      '<span></span><span class="o">!</span>docker<span class="w"> </span>cp<span class="w"> </span>dockerHostFolder/text.txt<span class="w"> </span>alwaysup:/folderToCopy',
      '<span></span><span class="o">!</span>docker<span class="w"> </span>cp<span class="w"> </span>alwaysup:/folderToCopy/text.txt<span class="w"> </span>dockerHostFolder/fileExtract.txt',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Vemos que est√° en el host</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>touch<span class="w"> </span>dockerHostFolder/text.txt',
          '</span><span class="o">!</span>docker<span class="w"> </span>cp<span class="w"> </span>dockerHostFolder/text.txt<span class="w"> </span>alwaysup:/folderToCopy',
          '</span><span class="o">!</span>docker<span class="w"> </span>cp<span class="w"> </span>alwaysup:/folderToCopy/text.txt<span class="w"> </span>dockerHostFolder/fileExtract.txt',
          '</span><span class="o">!</span>ls<span class="w"> </span>dockerHostFolder',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'bindFile.txt  fileExtract.txt  text.txt',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Aunque el contenedor est√© parado tambi√©n se pueden copiar archivos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por √∫ltimo borramos el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>-f<span class="w"> </span>alwaysup',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Im%C3%A1genes">Im√°genes<a class="anchor-link" href="#Im%C3%A1genes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 145" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Conceptos-fundamentales">Conceptos fundamentales<a class="anchor-link" href="#Conceptos-fundamentales"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 146" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Las im√°genes son los archivos ("plantillas") con toda la configuraci√≥n para crear un contenedor. Cada vez que creamos un contenedor se crea a partir de una imagen. Cuando cre√°bamos contenedores nuevos, la primera vez sal√≠a un mensaje diciendo que no ten√≠amos la imagen y que iba a descargarla. En docker hub existen multitud de im√°genes con todo tipo de m√°quinas, pero para un entorno de desarrollo muy espec√≠fico podemos crear nuestra propia plantilla para pas√°rsela a alguien y trabaje en un contenedor con la misma configuraci√≥n que el nuestro</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver todas las im√°genes que tenemos guardadas en nuestro ordenador mediante el comand <code>docker image ls</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>image<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'REPOSITORY    TAG       IMAGE ID       CREATED         SIZE',
          'nginx         latest    2d389e545974   8 hours ago     142MB',
          'ubuntu        latest    2dc39ba059dc   11 days ago     77.8MB',
          'hello-world   latest    feb5d9fea6a5   11 months ago   13.3kB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver los tama√±os, y podemos ver como la de <code>nginx</code> ocupa mucho y por eso tard√≥ m√°s en descargarse que el resto</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Otra columna que podemos ver es la de <code>TAG</code>, esto indica la versi√≥n de la imagen. En todas pone <code>latest</code>, esto quiere decir que es la √∫ltima. Es decir, en el momento de descarg√°rnosla nos hemos descargado la √∫ltima versi√≥n que hay en docker hub. Esto en un entorno de desarrollo no es √≥ptimo, porque nosotros podemos descargarnos una imagen de ubuntu, y si no especificamos versi√≥n se baja la √∫ltima, por ejemplo la 20.04. Pero despu√©s de un tiempo alguien puede querer desarrollar contigo y descargarse esa imagen, pero al no especificar la versi√≥n se descargar√° otra vez la √∫ltima, que en su caso puede ser la 22.04. Esto puede dar lugar a problemas y a que cosas que a una de las personas le funcione y a la otra no</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver todas las im√°genes que hay en docker hub llendo a <code>https://hub.docker.com/</code>. Ah√≠ podr√°s buscar la imagen que mejor se adapte al proyecto que quieras hacer. Si navegamos a la image de Ubuntu, por ejemplo, podemos ver las versiones (<code>tags</code>) de las im√°genes.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a descargarnos, <strong>pero no ejecutar</strong> una imagen. Para ello usamos el comando <code>docker pull &lt;hub&gt; &lt;image name&gt;:&lt;tag&gt;</code>. Si no indicamos el hub, lo descargar√° de docker hub por defecto, pero podemos indicar otro, por ejemplo uno privado de nuestra organizaci√≥n. Tambi√©n, si no indicamos el tag, por defecto bajar√° la √∫ltima versi√≥n</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>pull<span class="w"> </span>ubuntu:20.04',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '20.04: Pulling from library/ubuntu',
          'Digest: sha256:35ab2bf57814e9ff49e365efd5a5935b6915eede5c7f8581e9e1b85e0eecbe16[1A',
          'Status: Downloaded newer image for ubuntu:20.04',
          'docker.io/library/ubuntu:20.04',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si volvemos a listar las im√°genes, vemos que ahora tenemos dos im√°genes de ubuntu, una con el tag <code>20.04</code> y otra con el tag <code>latest</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>image<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'REPOSITORY    TAG       IMAGE ID       CREATED         SIZE',
          'nginx         latest    2d389e545974   8 hours ago     142MB',
          'ubuntu        latest    2dc39ba059dc   11 days ago     77.8MB',
          'ubuntu        20.04     a0ce5a295b63   11 days ago     72.8MB',
          'hello-world   latest    feb5d9fea6a5   11 months ago   13.3kB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Crear-im%C3%A1genes-mediante-Dockerfile">Crear im√°genes mediante <code>Dockerfile</code><a class="anchor-link" href="#Crear-im%C3%A1genes-mediante-Dockerfile"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 147" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos un directorio en el host llamado <code>dockerImages</code> para trabajar en el</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>dockerImages',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Creamos un archivo <code>Dockerfile</code> con el que crearemos una imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>dockerImages',
      '<span></span><span class="o">!</span>touch<span class="w"> </span>dockerImages/Dockerfile',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Abrirmos el archivo creado con nuestro editor preferido y escribimos los siguiente:</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu:latest</span>
      </pre></div>
      <p>Esto le dice a docker que cree la imagen a raiz de la imagen <code>latest</code> de ubuntu</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A continuaci√≥n escribimos un comando que se va a ejecutar en tiempo de compilaci√≥n</p>
      <div class="highlight"><pre><span></span><span class="k">RUN</span><span class="w"> </span>touch<span class="w"> </span>/test.txt
      </pre></div>
      <p>Esto quiere decir que cuando se compile el <code>Dockefile</code> se ejecutar√° ese comando, pero no cuando se corra el contenedor de la imagen</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al final el <code>Dockerfile</code> queda as√≠:</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu:latest</span>
      <span class="w">    </span>RUN<span class="w"> </span>touch<span class="w"> </span>/test.txt
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Compilamos el <code>Dockerfile</code> mediante el comando <code>build</code>, con la opci√≥n <code>-t</code> podemos darle un <code>tag</code>. Por √∫ltimo hay que indicarle la ruta del contexto de <code>build</code>, m√°s adelante explicaremos esto</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>mkdir<span class="w"> </span>dockerImages',
          '</span><span class="o">!</span>touch<span class="w"> </span>dockerImages/Dockerfile',
          '</span><span class="o">!</span>docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>ubuntu:test<span class="w"> </span>./dockerImages',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  2.048kB',
          'Step 1/2 : FROM ubuntu:latest',
          ' ---&gt; 2dc39ba059dc',
          'Step 2/2 : RUN touch /test.txt',
          ' ---&gt; Using cache',
          ' ---&gt; a78cf3ea16d8',
          'Successfully built a78cf3ea16d8',
          'Successfully tagged ubuntu:test',
          'Use \'docker scan\' to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos se compila en 2 pasos, cada uno tiene una <code>id</code>, cada uno de esos <code>id</code>s son capas de la imagen, esto tambi√©n lo veremos m√°s adelante</p>
      <p>Volvemos a ver las im√°genes que tenemos guardadas en nuestro ordenador y aparece la que acabamos de crear</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>image<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'REPOSITORY    TAG       IMAGE ID       CREATED         SIZE',
          'ubuntu        test      a78cf3ea16d8   8 minutes ago   77.8MB',
          'nginx         latest    2d389e545974   8 hours ago     142MB',
          'ubuntu        latest    2dc39ba059dc   11 days ago     77.8MB',
          'ubuntu        20.04     a0ce5a295b63   11 days ago     72.8MB',
          'hello-world   latest    feb5d9fea6a5   11 months ago   13.3kB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Corremos el contenedor a partir de la imagen que acabamos de crear</p>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span>run<span class="w"> </span>-it<span class="w"> </span>ubuntu:test
      root@b57b9d4eedeb:/#
      </pre></div>
      <p>Entramos en el bash del contenedor. Como dijimos, el comando RUN se ejecutaba en tiempo de compilaci√≥n de la imagen, por lo que el archivo que hemos pedido que se creara deber√≠a estar en nuestro contenedor</p>
      <div class="highlight"><pre><span></span>root@b57b9d4eedeb:/#<span class="w"> </span>ls
      bin<span class="w">  </span>boot<span class="w">  </span>dev<span class="w">  </span>etc<span class="w">  </span>home<span class="w">  </span>lib<span class="w">  </span>lib32<span class="w">  </span>lib64<span class="w">  </span>libx32<span class="w">  </span>media<span class="w">  </span>mnt<span class="w">  </span>opt<span class="w">  </span>proc<span class="w">  </span>root<span class="w">  </span>run<span class="w">  </span>sbin<span class="w">  </span>srv<span class="w">  </span>sys<span class="w">  </span>test.txt<span class="w">  </span>tmp<span class="w">  </span>usr<span class="w">  </span>var
      </pre></div>
      <p>Es importante entender que ese archivo se cre√≥ cuando se construy√≥ la imagen, es decir, la imagen del contenedor ya tiene ese archivo. No se crea cuando se lanza el contenedor</p>
      <p>Salimos del contenedor</p>
      <div class="highlight"><pre><span></span>root@b57b9d4eedeb:/#<span class="w"> </span><span class="nb">exit</span>
      <span class="nb">exit</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como ya tenemos una imagen la podr√≠amos subir al hub de docker, pero vamos a volver a listar las im√°genes antes de eso</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>image<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'REPOSITORY    TAG       IMAGE ID       CREATED          SIZE',
          'ubuntu        test      a78cf3ea16d8   20 minutes ago   77.8MB',
          'nginx         latest    2d389e545974   8 hours ago      142MB',
          'ubuntu        latest    2dc39ba059dc   11 days ago      77.8MB',
          'ubuntu        20.04     a0ce5a295b63   11 days ago      72.8MB',
          'hello-world   latest    feb5d9fea6a5   11 months ago    13.3kB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si vemos nos est√° diciendo que la imagen que acabamos de crear pertenece al repositorio de ubuntu, pero nosotros no tenemos acceso al repositorio de ubuntu, por lo que en docker hub nos tenemos que hacer una cuenta para poder subir la imagen a nuestro repositorio. En mi caso, mi repositorio se llama <code>maximofn</code>, por lo que cambio el repositorio de la imagen mediante el comando <code>tag</code>, indic√°ndole la imagen a la que queremos cambiar de repositorio y el nuevo repositorio. En el nuevo repositorio se suele indicar el nombre del repositorio seguido del tipo de imagen y el tag, en mi caso <code>maximofn/ubuntu:test</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>docker<span class="w"> </span>tag<span class="w"> </span>ubuntu:test<span class="w"> </span>maximofn/ubuntu:test',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Si ahora volvemos a listar las im√°genes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>tag<span class="w"> </span>ubuntu:test<span class="w"> </span>maximofn/ubuntu:test',
          '</span><span class="o">!</span>docker<span class="w"> </span>image<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'REPOSITORY        TAG       IMAGE ID       CREATED          SIZE',
          'ubuntu            test      a78cf3ea16d8   24 minutes ago   77.8MB',
          'maximofn/ubuntu   test      a78cf3ea16d8   24 minutes ago   77.8MB',
          'nginx             latest    2d389e545974   8 hours ago      142MB',
          'ubuntu            latest    2dc39ba059dc   11 days ago      77.8MB',
          'ubuntu            20.04     a0ce5a295b63   11 days ago      72.8MB',
          'hello-world       latest    feb5d9fea6a5   11 months ago    13.3kB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora debemos loggearnos dentro de docker hub para poder subir la imagen, para ello usamos el comando <code>login</code></p>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span>login
      Login<span class="w"> </span>with<span class="w"> </span>your<span class="w"> </span>Docker<span class="w"> </span>ID<span class="w"> </span>to<span class="w"> </span>push<span class="w"> </span>and<span class="w"> </span>pull<span class="w"> </span>images<span class="w"> </span>from<span class="w"> </span>Docker<span class="w"> </span>Hub.<span class="w"> </span>If<span class="w"> </span>you<span class="w"> </span><span class="k">do</span><span class="w"> </span>not<span class="w"> </span>have<span class="w"> </span>a<span class="w"> </span>Docker<span class="w"> </span>ID,<span class="w"> </span>head<span class="w"> </span>over<span class="w"> </span>to<span class="w"> </span>https://hub.docker.com<span class="w"> </span>to<span class="w"> </span>create<span class="w"> </span>one.
      Username:<span class="w"> </span>maximofn
      Password:
      
      Login<span class="w"> </span>Succeeded
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora podemos subir la imagen mediante el comando <code>push</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>push<span class="w"> </span>maximofn/ubuntu:test',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'The push refers to repository [docker.io/maximofn/ubuntu]',
          '06994357: Preparing ',
          '06994357: Pushed  from library/ubuntu test: digest: sha256:318d83fc3c35ff930d695b0dc1c5ad1b0ea54e1ec6e3478b8ca85c05fd793c4e size: 735',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ha subido solo la primera capa, la segunda, como la use a raiz de la imagen de ubuntu, lo que hace es colocar un puntero a esa imagen para no tener capas subidas m√°s de una vez</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hay que tener en cuenta que este repositorio es p√∫blico, por lo que no debes subir im√°genes con datos sensibles. Adem√°s, si una imagen no tiene uso en 6 meses ser√° borrada</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="El-sistema-de-capas">El sistema de capas<a class="anchor-link" href="#El-sistema-de-capas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 148" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mediante el comando <code>history</code> podemos ver las capas de una imagen. Si vemos las capas de la imagen que acabamos de crear usamos <code>docker history ubuntu:test</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span><span class="nb">history</span><span class="w"> </span>ubuntu:test',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'IMAGE          CREATED        CREATED BY                                      SIZE      COMMENT',
          'a78cf3ea16d8   3 minutes ago  /bin/sh -c touch /test.txt                      0B        ',
          '2dc39ba059dc   12 days ago    /bin/sh -c #(nop)  CMD ["bash"]                 0B        ',
          '&lt;missing&gt;      12 days ago    /bin/sh -c #(nop) ADD file:a7268f82a86219801‚Ä¶   77.8MB    ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que la primera capa tiene el comando que hemos introducido en el <code>Dockerfile</code>, adem√°s dice que ha sido creada hace 3 minutos. Sin embargo, el resto de capas fueron creadas hace 12 d√≠as, y son las capas de la imagen de ubuntu de la que nos hemos basado</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al <code>Dockerfile</code> que hemos creado antes le a√±adimos la l√≠nea</p>
      <div class="highlight"><pre><span></span><span class="k">RUN</span><span class="w"> </span>rm<span class="w"> </span>/test.txt
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al final el <code>Dockerfile</code> queda as√≠:</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu:latest</span>
      <span class="w">    </span>RUN<span class="w"> </span>touch<span class="w"> </span>/test.txt
      <span class="w">    </span>RUN<span class="w"> </span>rm<span class="w"> </span>/test.txt
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si volvemos a compilar, vemos qu√© pasa</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>ubuntu:test<span class="w"> </span>./dockerImages',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  2.048kB',
          'Step 1/3 : FROM ubuntu:latest',
          ' ---&gt; 2dc39ba059dc',
          'Step 2/3 : RUN touch /test.txt',
          ' ---&gt; Using cache',
          ' ---&gt; a78cf3ea16d8',
          'Step 3/3 : RUN rm /test.txt',
          ' ---&gt; Running in c2e6887f2025',
          'Removing intermediate container c2e6887f2025',
          ' ---&gt; 313243a9b573',
          'Successfully built 313243a9b573',
          'Successfully tagged ubuntu:test',
          'Use \'docker scan\' to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos hay una capa m√°s con la nueva l√≠nea que hemos agregado. Si volvemos a ver las capas de la imagen con <code>history</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span><span class="nb">history</span><span class="w"> </span>ubuntu:test',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'IMAGE          CREATED              CREATED BY                                      SIZE      COMMENT',
          '313243a9b573   About a minute ago   /bin/sh -c rm /test.txt                         0B        ',
          'a78cf3ea16d8   3 minutes ago        /bin/sh -c touch /test.txt                      0B        ',
          '2dc39ba059dc   12 days ago          /bin/sh -c #(nop)  CMD ["bash"]                 0B        ',
          '&lt;missing&gt;      12 days ago          /bin/sh -c #(nop) ADD file:a7268f82a86219801‚Ä¶   77.8MB    ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que las primeras capas son iguales que antes y ha a√±adido una nueva capa con el nuevo comando</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="B%C3%BAsqueda-en-docker-hub">B√∫squeda en docker hub<a class="anchor-link" href="#B%C3%BAsqueda-en-docker-hub"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 149" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>No hace flata meterse en la p√°gina de docker hub para buscar im√°genes, se puede hacer desde la terminal. Para ello usamos el comando <code>docker search &lt;image name&gt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>search<span class="w"> </span>ubuntu',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'NAME                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED',
          'ubuntu                           Ubuntu is a Debian-based Linux operating sys‚Ä¶   16425     [OK]       ',
          'websphere-liberty                WebSphere Liberty multi-architecture images ‚Ä¶   297       [OK]       ',
          'open-liberty                     Open Liberty multi-architecture images based‚Ä¶   62        [OK]       ',
          'neurodebian                      NeuroDebian provides neuroscience research s‚Ä¶   104       [OK]       ',
          'ubuntu-debootstrap               DEPRECATED; use "ubuntu" instead                52        [OK]       ',
          'ubuntu-upstart                   DEPRECATED, as is Upstart (find other proces‚Ä¶   115       [OK]       ',
          'ubuntu/nginx                     Nginx, a high-performance reverse proxy &amp; we‚Ä¶   98                   ',
          'ubuntu/squid                     Squid is a caching proxy for the Web. Long-t‚Ä¶   66                   ',
          'ubuntu/cortex                    Cortex provides storage for Prometheus. Long‚Ä¶   4                    ',
          'ubuntu/apache2                   Apache, a secure &amp; extensible open-source HT‚Ä¶   60                   ',
          'ubuntu/kafka                     Apache Kafka, a distributed event streaming ‚Ä¶   35                   ',
          'ubuntu/mysql                     MySQL open source fast, stable, multi-thread‚Ä¶   53                   ',
          'ubuntu/bind9                     BIND 9 is a very flexible, full-featured DNS‚Ä¶   62                   ',
          'ubuntu/prometheus                Prometheus is a systems and service monitori‚Ä¶   51                   ',
          'ubuntu/zookeeper                 ZooKeeper maintains configuration informatio‚Ä¶   12                   ',
          'ubuntu/postgres                  PostgreSQL is an open source object-relation‚Ä¶   31                   ',
          'ubuntu/redis                     Redis, an open source key-value store. Long-‚Ä¶   19                   ',
          'ubuntu/grafana                   Grafana, a feature rich metrics dashboard &amp; ‚Ä¶   9                    ',
          'ubuntu/memcached                 Memcached, in-memory keyvalue store for smal‚Ä¶   5                    ',
          'ubuntu/dotnet-aspnet             Chiselled Ubuntu runtime image for ASP.NET a‚Ä¶   11                   ',
          'ubuntu/dotnet-deps               Chiselled Ubuntu for self-contained .NET &amp; A‚Ä¶   11                   ',
          'ubuntu/prometheus-alertmanager   Alertmanager handles client alerts from Prom‚Ä¶   9                    ',
          'ubuntu/dotnet-runtime            Chiselled Ubuntu runtime image for .NET apps‚Ä¶   10                   ',
          'ubuntu/cassandra                 Cassandra, an open source NoSQL distributed ‚Ä¶   2                    ',
          'ubuntu/telegraf                  Telegraf collects, processes, aggregates &amp; w‚Ä¶   4                    ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Uso-de-docker-para-crear-aplicaciones">Uso de docker para crear aplicaciones<a class="anchor-link" href="#Uso-de-docker-para-crear-aplicaciones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 150" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Exposici%C3%B3n-de-puertos">Exposici√≥n de puertos<a class="anchor-link" href="#Exposici%C3%B3n-de-puertos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 151" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Antes vimos como pod√≠amos vincular un puerto de un contenedor a un puerto del ordenador (<code>-p 8080:80</code>). Pero para que eso sea posible, a la hora de crear la imagen hay que exponer el puerto, esto se hace a√±adiendo al Dockerfile la linea <code>EXPOSE &lt;port&gt;</code>, en el caso de antes</p>
      <div class="highlight"><pre><span></span><span class="k">EXPOSE</span><span class="w"> </span><span class="s">80</span>
      </pre></div>
      <p>O usar im√°genes como base que ya tengan puertos expuestos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Reuso-del-cach%C3%A9-de-capas-al-compilar">Reuso del cach√© de capas al compilar<a class="anchor-link" href="#Reuso-del-cach%C3%A9-de-capas-al-compilar"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 152" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Cuando compilamos una imagen, si alguna de las capas que hemos definido ya han sido compiladas antes, docker lo detecta y las usa, no las vuelve a compilar. Si volvemos a compilar la imagen que hemos definido en el <code>Dockerfile</code> ahora tardar√° muy poco, porque todas las capas ya est√°n compiladas y docker no las vuelve a compilar</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>ubuntu:test<span class="w"> </span>./dockerImages',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  2.048kB',
          'Step 1/3 : FROM ubuntu:latest',
          ' ---&gt; 2dc39ba059dc',
          'Step 2/3 : RUN touch /test.txt',
          ' ---&gt; Using cache',
          ' ---&gt; a78cf3ea16d8',
          'Step 3/3 : RUN rm /test.txt',
          ' ---&gt; Using cache',
          ' ---&gt; 313243a9b573',
          'Successfully built 313243a9b573',
          'Successfully tagged ubuntu:test',
          'Use \'docker scan\' to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En la segunda y tercera capa aparece el texto <code>Using cache</code></p>
      <p>Como esto es un cuaderno Jupyter a la hora de ejecutar las celdas te da la informaci√≥n del tiempo que tardan en ejecutarse, la vez anterior que compil√© la imagen tard√≥ 1,4 segundos, mientras que ahora ha tardado 0,5 segundos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pero si ahora cambio el Dockerfile, y en la primera l√≠nea, donde dec√≠a que nos bas√°bamos en la √∫ltima versi√≥n de ubuntu y cambiamos a la versi√≥n 20.04</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu:20.04</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al final el <code>Dockerfile</code> queda as√≠:</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu:20.04</span>
      <span class="w">    </span>RUN<span class="w"> </span>touch<span class="w"> </span>/test.txt
      <span class="w">    </span>RUN<span class="w"> </span>rm<span class="w"> </span>/test.txt
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si volvemos a compilar tardar√° mucho m√°s</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>ubuntu:test<span class="w"> </span>./dockerImages',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  2.048kB',
          'Step 1/3 : FROM ubuntu:20.04',
          ' ---&gt; a0ce5a295b63',
          'Step 2/3 : RUN touch /test.txt',
          ' ---&gt; Running in a40fe8df2c0d',
          'Removing intermediate container a40fe8df2c0d',
          ' ---&gt; 0bb9b452c11f',
          'Step 3/3 : RUN rm /test.txt',
          ' ---&gt; Running in 2e14919f3685',
          'Removing intermediate container 2e14919f3685',
          ' ---&gt; fdc248fa833b',
          'Successfully built fdc248fa833b',
          'Successfully tagged ubuntu:test',
          'Use \'docker scan\' to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ha tardado 1,9 segundos y ya no aparece el texto <code>Using cache</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al cambiar la primera capa, docker vuelve a compilar todas las capas. Esto puede ser un problema porque a la hora de desarrollar c√≥digo se puede dar el siguiente caso</p>
      <ul>
      <li>Desarrollamos el c√≥digo en nuestro ordenador</li>
      <li>Al construir la imagen copiamos todo el c√≥digo de nuestro ordenador al contenedor</li>
      <li>Luego le pedimos a la imagen que instale las librer√≠as necesarias</li>
      </ul>
      <p>Esto puede hacer que al cambiar cualquier parte del c√≥digo, al tener que volver a compilar la imagen, la capa en la que se instalan las librer√≠as se tenga que volver a compilar, ya que ha cambiado una capa anterior</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para solucionar esto la idea ser√≠a que a la hora de crear la imagen, primero pidamos que se instalen las librer√≠as y luego que se copie el c√≥digo de nuestro ordenador al contenedor. As√≠ cada vez que cambiemos el c√≥digo y volvamos a compilar la imagen, solo se recompilar√° la capa en la que se copia el c√≥digo, por lo que la compilaci√≥n ser√° m√°s r√°pida</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podr√°s pensar, que es mejor compartir una carpeta entre el host y el contenedor (<code>bind mount</code>) donde tendremos el c√≥digo y as√≠ no hace falta volver a compilar la imagen cada vez que cambiemo el c√≥digo. Y la respuesta es que es verdad, solo he puesto este ejemplo porque es muy f√°cil de entender, pero es para escenificar que a la hora de crear im√°genes hay que pensar bien de manera que si hace falta volver a compilarla, recompile el m√≠nimo n√∫mero de capas</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Escribir-correctamente-un-Dockerfile">Escribir correctamente un Dockerfile<a class="anchor-link" href="#Escribir-correctamente-un-Dockerfile"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 153" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como hemos visto Docker no vuelve a compilar capas de un Dockerfile si ya las ha compilado antes, por lo que las carga de cache. Vamos a ver c√≥mo tiene que ser la forma correcta de escribir un Dockerfile para aprovecharnos de esto</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a partir de este Dockerfile para ir comentando posibles correcciones</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu</span>
      <span class="k">COPY</span><span class="w"> </span>./sourceCode<span class="w"> </span>/sourceCode
      <span class="k">RUN</span><span class="w"> </span>apt-get<span class="w"> </span>update
      <span class="k">RUN</span><span class="w"> </span>apt-get<span class="w"> </span>install<span class="w"> </span>-y<span class="w"> </span>python3<span class="w"> </span>ssh
      <span class="k">CMD</span><span class="w"> </span><span class="p">[</span><span class="s2">"python3"</span><span class="p">,</span><span class="w"> </span><span class="s2">"/sourceCode/sourceApp/app.py"</span><span class="p">]</span>
      </pre></div>
      <p>Como se puede ver se parte de una imagen de ubuntu, se copia la carpeta con el c√≥digo, se actualizan los repositorios, se instala python, se instala atmbi√©n ssh y se corre la aplicaci√≥n</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Copiar-el-c%C3%B3digo-antes-de-la-ejecuci%C3%B3n">Copiar el c√≥digo antes de la ejecuci√≥n<a class="anchor-link" href="#Copiar-el-c%C3%B3digo-antes-de-la-ejecuci%C3%B3n"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 154" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como hemos dicho antes, si primero copiamos el c√≥digo y luego instalamos python, cada vez que hagamos un cambio en el c√≥digo y compilemos la imagen la compilar√° entera, pero si copiamos el c√≥digo despu√©s de instalar python, cada vez que cambiemos el c√≥digo y compilemos la imagen, solo compilar√° desde la copia del c√≥digo y no volver√° a instalar python, por lo que el Dockerfile deber√≠a pasar a ser as√≠</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu</span>
      <span class="k">RUN</span><span class="w"> </span>apt-get<span class="w"> </span>update
      <span class="k">RUN</span><span class="w"> </span>apt-get<span class="w"> </span>install<span class="w"> </span>-y<span class="w"> </span>python3<span class="w"> </span>ssh
      <span class="k">COPY</span><span class="w"> </span>./sourceCode<span class="w"> </span>/sourceCode
      <span class="k">CMD</span><span class="w"> </span><span class="p">[</span><span class="s2">"python3"</span><span class="p">,</span><span class="w"> </span><span class="s2">"/sourceCode/sourceApp/app.py"</span><span class="p">]</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Copiar-solo-el-c%C3%B3digo-nesario">Copiar solo el c√≥digo nesario<a class="anchor-link" href="#Copiar-solo-el-c%C3%B3digo-nesario"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 155" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Estamos copiando la carpeta con todo el c√≥digo, pero a lo mejor dentro tenemos c√≥digo que no necesitamos, por lo que hay que copiar solo el c√≥digo que deverdad necesitemos para aplicaci√≥n, de esta manera la imagen ocupar√° menos memoria. De modo que el Dockerfile quedar√≠a as√≠</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu</span>
      <span class="k">RUN</span><span class="w"> </span>apt-get<span class="w"> </span>update
      <span class="k">RUN</span><span class="w"> </span>apt-get<span class="w"> </span>install<span class="w"> </span>-y<span class="w"> </span>python3<span class="w"> </span>ssh
      <span class="k">COPY</span><span class="w"> </span>./sourceCode/sourceApp<span class="w"> </span>/sourceCode/sourceApp
      <span class="k">CMD</span><span class="w"> </span><span class="p">[</span><span class="s2">"python3"</span><span class="p">,</span><span class="w"> </span><span class="s2">"/sourceCode/sourceApp/app.py"</span><span class="p">]</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Actualizar-repositorios-e-instalar-python-en-la-misma-l%C3%ADnea">Actualizar repositorios e instalar python en la misma l√≠nea<a class="anchor-link" href="#Actualizar-repositorios-e-instalar-python-en-la-misma-l%C3%ADnea"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 156" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Estamos actualizando los repositorios en una l√≠ea y en otra instalando python3. Pero puede darse el caso que en la linea en la que instalamos python3 adem√°s a√±adamos pip3, sin embargo, como la l√≠nea anterior, en la que se actualizan los repositorios, como no cambia, no se volver√° a compilar, al estar cacheada. Por lo que puede pasar que en los repositorios que hab√≠amos actualizado no est√©n los necesarios para pip3. Por lo que hay que poner las dos acciones an una sola l√≠nea</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu</span>
      <span class="k">RUN</span><span class="w"> </span>apt-get<span class="w"> </span>update<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>apt-get<span class="w"> </span>install<span class="w"> </span>-y<span class="w"> </span>python3<span class="w"> </span>ssh
      <span class="k">COPY</span><span class="w"> </span>./sourceCode/sourceApp<span class="w"> </span>/sourceCode/sourceApp
      <span class="k">CMD</span><span class="w"> </span><span class="p">[</span><span class="s2">"python3"</span><span class="p">,</span><span class="w"> </span><span class="s2">"/sourceCode/sourceApp/app.py"</span><span class="p">]</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="No-instalar-ssh">No instalar ssh<a class="anchor-link" href="#No-instalar-ssh"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 157" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hab√≠amos instalado ssh en la imagen para poder debuggear en caso de necesitarlo, pero eso hace que la imagen ocupe m√°s memoria. En caso de necesitar debuggear, deber√≠amos entrar en el contenedor, instalar ssh y a continuaci√≥n debuggear. Por lo que quitamos las instalaci√≥n de ssh</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu</span>
      <span class="k">RUN</span><span class="w"> </span>apt-get<span class="w"> </span>update<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>apt-get<span class="w"> </span>install<span class="w"> </span>-y<span class="w"> </span>python3
      <span class="k">COPY</span><span class="w"> </span>./sourceCode/sourceApp<span class="w"> </span>/sourceCode/sourceApp
      <span class="k">CMD</span><span class="w"> </span><span class="p">[</span><span class="s2">"python3"</span><span class="p">,</span><span class="w"> </span><span class="s2">"/sourceCode/sourceApp/app.py"</span><span class="p">]</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Usar---no-install-recommends">Usar <code>--no-install-recommends</code><a class="anchor-link" href="#Usar---no-install-recommends"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 158" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Cuando instalamos algo en Ubuntu te instala paquetes recomendados, pero que no necesitamos, por lo que la imagen ocupa m√°s espacio. As√≠ que para evitarlo a√±adimos a la instalaci√≥n <code>--no-install-recommends</code></p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu</span>
      <span class="k">RUN</span><span class="w"> </span>apt-get<span class="w"> </span>update<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>apt-get<span class="w"> </span>install<span class="w"> </span>-y<span class="w"> </span>python3<span class="w"> </span>--no-install-recommends
      <span class="k">COPY</span><span class="w"> </span>./sourceCode/sourceApp<span class="w"> </span>/sourceCode/sourceApp
      <span class="k">CMD</span><span class="w"> </span><span class="p">[</span><span class="s2">"python3"</span><span class="p">,</span><span class="w"> </span><span class="s2">"/sourceCode/sourceApp/app.py"</span><span class="p">]</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Borrar-lista-de-repositorios-actualizados">Borrar lista de repositorios actualizados<a class="anchor-link" href="#Borrar-lista-de-repositorios-actualizados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 159" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hemos actualizado la lista de repositorios y hemos instalado python, pero una vez hecho ya no necesitamos la lista de repositorios actualizados, porque lo √∫nico que har√°n ser√° que la imagen ocupe m√°s, de modo que los eliminamos despu√©s de instaar python y en su misma l√≠nea</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu</span>
      <span class="k">RUN</span><span class="w"> </span>apt-get<span class="w"> </span>update<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>apt-get<span class="w"> </span>install<span class="w"> </span>-y<span class="w"> </span>python3<span class="w"> </span>--no-install-recommends<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>rm<span class="w"> </span>-rf<span class="w"> </span>/var/lib/apt/lists/*
      <span class="k">COPY</span><span class="w"> </span>./sourceCode/sourceApp<span class="w"> </span>/sourceCode/sourceApp
      <span class="k">CMD</span><span class="w"> </span><span class="p">[</span><span class="s2">"python3"</span><span class="p">,</span><span class="w"> </span><span class="s2">"/sourceCode/sourceApp/app.py"</span><span class="p">]</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Usar-una-imagen-de-Python">Usar una imagen de Python<a class="anchor-link" href="#Usar-una-imagen-de-Python"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 160" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Todo lo que hemos hecho de actualizar la lista de paquetes e instalar python no es necesario, ya que ya existen im√°genes de python sobre Ubuntu, que seguramente tambi√©n han seguido buenas pr√°cticas, que incluso lo hayan hecho mejor que nosotros y que ha sido escaneada en busca de vulnerabilidades por Docker Hub. Por lo que quitamos todo eso y partimos de una imagen de Python</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">python</span>
      <span class="k">COPY</span><span class="w"> </span>./sourceCode/sourceApp<span class="w"> </span>/sourceCode/sourceApp
      <span class="k">CMD</span><span class="w"> </span><span class="p">[</span><span class="s2">"python3"</span><span class="p">,</span><span class="w"> </span><span class="s2">"/sourceCode/sourceApp/app.py"</span><span class="p">]</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Especificar-la-imagen-de-Python">Especificar la imagen de Python<a class="anchor-link" href="#Especificar-la-imagen-de-Python"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 161" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al no especificar la imagen de python se est√° bajando la √∫ltima, pero en funci√≥n de cuando construyas el contenedor se puede bajar una u otra, por lo que hay que a√±adir el tag con la versi√≥n de Python que se quiere</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">python:3.9.18</span>
      <span class="k">COPY</span><span class="w"> </span>./sourceCode/sourceApp<span class="w"> </span>/sourceCode/sourceApp
      <span class="k">CMD</span><span class="w"> </span><span class="p">[</span><span class="s2">"python3"</span><span class="p">,</span><span class="w"> </span><span class="s2">"/sourceCode/sourceApp/app.py"</span><span class="p">]</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Elegir-un-tag-peque%C3%B1o">Elegir un tag peque√±o<a class="anchor-link" href="#Elegir-un-tag-peque%C3%B1o"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 162" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hemos elegido el tag <code>3.9.18</code>, pero esa versi√≥n de python tiene un mont√≥n de librer√≠as que posiblemente no las necesitemos, por lo que podemos usar las versiones <code>3.9.18-slim</code> que tiene muchas menos librer√≠as instaladas, o la veris√≥n <code>3.9.18-alphine</code> que es una versi√≥n de python sobre alpine y no sobre Ubuntu. Alpine es una distribuci√≥n de Linux muy ligera que tiene muy pocos paquetes instalados y que se suele usar mucho en contenedores Docker para que ocupen muy poco espacio</p>
      <p>La imagen de python <code>3.9.18</code> ocupa 997 MB, la <code>3.9.18-slim</code> ocupa 126 MB y la <code>3.9.18-alpine</code> ocupa 47.8 MB</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">python:3.9.18-alpine</span>
      <span class="k">COPY</span><span class="w"> </span>./sourceCode/sourceApp<span class="w"> </span>/sourceCode/sourceApp
      <span class="k">CMD</span><span class="w"> </span><span class="p">[</span><span class="s2">"python3"</span><span class="p">,</span><span class="w"> </span><span class="s2">"/sourceCode/sourceApp/app.py"</span><span class="p">]</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Indicar-el-workspace">Indicar el workspace<a class="anchor-link" href="#Indicar-el-workspace"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 163" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En vez de indicar la ruta de la imagen <code>/sourceCode/sourceApp</code> establecemos que dicha ruta sea el workspace de la imagen. As√≠ cuando copiemos el c√≥digo o ejecutemos la aplicaci√≥n no hace falta indicar la ruta</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">python:3.9.18-alpine</span>
      <span class="k">WORKDIR</span><span class="w"> </span><span class="s">/sourceCode/sourceApp</span>
      <span class="k">COPY</span><span class="w"> </span>./sourceCode/sourceApp<span class="w"> </span>.
      <span class="k">CMD</span><span class="w"> </span><span class="p">[</span><span class="s2">"python3"</span><span class="p">,</span><span class="w"> </span><span class="s2">"app.py"</span><span class="p">]</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Indicar-el-workspace">Indicar el workspace<a class="anchor-link" href="#Indicar-el-workspace"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 164" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En vez de indicar la ruta de la imagen <code>/sourceCode/sourceApp</code> establecemos que dicha ruta sea el workspace de la imagen. As√≠ cuando copiemos el c√≥digo o ejecutemos la aplicaci√≥n no hace falta indicar la ruta</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">python:3.9.18-alpine</span>
      <span class="k">WORKDIR</span><span class="w"> </span><span class="s">/sourceCode/sourceApp</span>
      <span class="k">COPY</span><span class="w"> </span>./sourceCode/sourceApp<span class="w"> </span>.
      <span class="k">CMD</span><span class="w"> </span><span class="p">[</span><span class="s2">"python3"</span><span class="p">,</span><span class="w"> </span><span class="s2">"app.py"</span><span class="p">]</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="C%C3%B3digo-compartido-en-una-carpeta-bind-mount">C√≥digo compartido en una carpeta <code>bind mount</code><a class="anchor-link" href="#C%C3%B3digo-compartido-en-una-carpeta-bind-mount"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 165" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hab√≠amos creado una carpeta llamada <code>dockerHostFolder</code> en la que hab√≠amos compartido archivos entre el host y un contenedor. Dentro adem√°s deber√≠a haber tres archivos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ls<span class="w"> </span>dockerHostFolder',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'bindFile.txt  fileExtract.txt  text.txt',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a aprovechar el archivo <code>text.txt</code> para ver eso. Vamos a ver qu√© hay dentro de <code>text.txt</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>cat<span class="w"> </span>dockerHostFolder/text.txt',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>No hay salida, el archivo est√° vac√≠o. Vamos a crear otra vez un contenedor de ubuntu compartiendo la carpeta <code>dockerHostFolder</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>cat<span class="w"> </span>dockerHostFolder/text.txt',
          '</span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>--name<span class="w"> </span>alwaysup<span class="w"> </span>-d<span class="w"> </span>-v<span class="w"> </span>~/Documentos/web/portafolio/posts/dockerHostFolder:/dockerContainerFolder<span class="w"> </span>ubuntu<span class="w"> </span>tail<span class="w"> </span>-f<span class="w"> </span>/dev/null',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '24adbded61f507cdf7f192eb5e246e43ee3ffafc9944b7c57918eb2d547dff19',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que el contenedor est√° corriendo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS          PORTS     NAMES',
          '24adbded61f5   ubuntu    "tail -f /dev/null"   16 seconds ago   Up 15 seconds             alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Entramos en el contenedor, vemos que est√° <code>text.txt</code> y que est√° vac√≠o</p>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span><span class="nb">exec</span><span class="w"> </span>-it<span class="w"> </span>alwaysup<span class="w"> </span>bash
      root@24adbded61f5:/#<span class="w"> </span>ls<span class="w"> </span>dockerContainerFolder/
      bindFile.txt<span class="w">  </span>fileExtract.txt<span class="w">  </span>text.txt
      root@24adbded61f5:/#<span class="w"> </span>cat<span class="w"> </span>dockerContainerFolder/text.txt<span class="w"> </span>
      root@24adbded61f5:/#
      </pre></div>
      <p>Ahora abrimos en el host el archivo <code>text.txt</code> con el editor de textos que queramos, escribimos <code>Hola mundo</code> y guardamos. Si ahora vemos qu√© hay dentro del archivo en el contenedor veremos el mismo texto</p>
      <div class="highlight"><pre><span></span>root@24adbded61f5:/#<span class="w"> </span>cat<span class="w"> </span>dockerContainerFolder/text.txt<span class="w"> </span>
      Hola<span class="w"> </span>mundo
      </pre></div>
      <p>Ahora editamos el archivo en el contenedor y salimos del contenedor</p>
      <div class="highlight"><pre><span></span>root@24adbded61f5:/#<span class="w"> </span><span class="nb">echo</span><span class="w"> </span>hola<span class="w"> </span>contenedor<span class="w"> </span>&gt;<span class="w"> </span>dockerContainerFolder/text.txt<span class="w"> </span>
      root@24adbded61f5:/#<span class="w"> </span>cat<span class="w"> </span>dockerContainerFolder/text.txt<span class="w"> </span>
      hola<span class="w"> </span>contenedor
      root@24adbded61f5:/#<span class="w"> </span><span class="nb">exit</span>
      <span class="nb">exit</span>
      </pre></div>
      <p>Si miramos el archivo en el host veremos el texto que escribimos en el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>cat<span class="w"> </span>dockerHostFolder/text.txt',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'hola contenedor',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Borramos el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>-f<span class="w"> </span>alwaysup',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'alwaysup',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Conectar-contenedores-por-red">Conectar contenedores por red<a class="anchor-link" href="#Conectar-contenedores-por-red"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 166" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En caso de que queramos tener varios contenedores corriendo y queremos que se comuniquen, podemos hacer que se comuniquen por red. Docker nos da la posibilidad de hacer eso mediante sus redes virtuales</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver qu√© redes tiene docker mediante el comando <code>docker network ls</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>network<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'NETWORK ID     NAME      DRIVER    SCOPE',
          'de6e8b7b737e   bridge    bridge    local',
          'da1f5f6fccc0   host      host      local',
          'd3b0d93993c0   none      null      local',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que por defecto docker tiene tres redes</p>
      <ul>
      <li>bridge: Est√° por retrocompatibilidad con versiones anteriores pero no deber√≠amos usarla ya</li>
      <li>host: Es la red del host</li>
      <li>none: Esta es la que debemos usar si queremos que un contenedor no tenga acceso a internet</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos crear redes nuevas que otros contenedores se puedan conectar a ella, para ello usamos el comando <code>docker network create &lt;name&gt;</code>, para que otros contenedores se puedan conectar adem√°s debemos a√±adir la opci√≥n <code>--attachable</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>network<span class="w"> </span>create<span class="w"> </span>--attachable<span class="w"> </span>myNetwork',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2f6f3ddbfa8642e9f6819aa0965c16339e9e910be7bcf56ebb718fcac324cc27',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos inspeccionarla mediante el comando <code>docker network inspect &lt;name&gt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>network<span class="w"> </span>inspect<span class="w"> </span>myNetwork',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[',
          '    {',
          '        "Name": "myNetwork",',
          '        "Id": "2f6f3ddbfa8642e9f6819aa0965c16339e9e910be7bcf56ebb718fcac324cc27",',
          '        "Created": "2022-09-14T15:20:08.539830161+02:00",',
          '        "Scope": "local",',
          '        "Driver": "bridge",',
          '        "EnableIPv6": false,',
          '        "IPAM": {',
          '            "Driver": "default",',
          '            "Options": {},',
          '            "Config": [',
          '                {',
          '                    "Subnet": "172.18.0.0/16",',
          '                    "Gateway": "172.18.0.1"',
          '                }',
          '            ]',
          '        },',
          '        "Internal": false,',
          '        "Attachable": true,',
          '        "Ingress": false,',
          '        "ConfigFrom": {',
          '            "Network": ""',
          '        },',
          '        "ConfigOnly": false,',
          '        "Containers": {},',
          '        "Options": {},',
          '        "Labels": {}',
          '    }',
          ']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora tenemos que crear dos contenedores para que se puedan comunicar.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear un nuevo contenedor, que llamaremos <code>container1</code>, con una carpeta compartida y que en su interior se va a llamar <code>folder1</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>--name<span class="w"> </span>container1<span class="w"> </span>-d<span class="w"> </span>-v<span class="w"> </span>~/Documentos/web/portafolio/posts/dockerHostFolder:/folder1<span class="w"> </span>ubuntu<span class="w"> </span>tail<span class="w"> </span>-f<span class="w"> </span>/dev/null',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'a5fca8ba1e4ff0a67002f8f1b8cc3cd43185373c2a7e295546f774059ad8dd1a',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora creamos otro contenedor, llamado <code>container2</code>, con otra carpeta compartida, pero que se llame <code>folder2</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>--name<span class="w"> </span>container2<span class="w"> </span>-d<span class="w"> </span>-v<span class="w"> </span>~/Documentos/web/portafolio/posts/dockerHostFolder:/folder2<span class="w"> </span>ubuntu<span class="w"> </span>tail<span class="w"> </span>-f<span class="w"> </span>/dev/null',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '6c8dc18315488ef686f7548516c19b3d716728dd8a173cdb889ec0dd082232f9',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos los contenedores corriendo y vemos que est√°n los dos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED         STATUS         PORTS     NAMES',
          '6c8dc1831548   ubuntu    "tail -f /dev/null"   3 seconds ago   Up 2 seconds             container2',
          'a5fca8ba1e4f   ubuntu    "tail -f /dev/null"   4 seconds ago   Up 3 seconds             container1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora tenemos que conectar los contenedores a la red, para ello usamos el comando <code>docker network connect &lt;network name&gt; &lt;container name&gt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>docker<span class="w"> </span>network<span class="w"> </span>connect<span class="w"> </span>myNetwork<span class="w"> </span>container1',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>docker<span class="w"> </span>network<span class="w"> </span>connect<span class="w"> </span>myNetwork<span class="w"> </span>container1',
      '<span></span><span class="o">!</span>docker<span class="w"> </span>network<span class="w"> </span>connect<span class="w"> </span>myNetwork<span class="w"> </span>container2',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Para comprobar que se han conectado bien podemos inspeccionar la red, pero filtrando por los contenedores conectados</p>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span>network<span class="w"> </span>inspect<span class="w"> </span>--format<span class="w"> </span><span class="s1">'{opening_brace}{opening_brace}.Containers{closing_brace}{closing_brace}'</span><span class="w"> </span>myNetwork<span class="w"> </span>
      map
      <span class="o">[</span>
      <span class="w">    </span>6c8dc18315488ef686f7548516c19b3d716728dd8a173cdb889ec0dd082232f9:
      <span class="w">    </span><span class="o">{opening_brace}</span>
      <span class="w">        </span>container2<span class="w"> </span>
      <span class="w">        </span>f828d211e894f7a5a992ce41a2a0def8e2424e9737fb4e1485fc09cc2d607b69<span class="w"> </span>
      <span class="w">        </span><span class="m">02</span>:42:ac:12:00:03<span class="w"> </span>
      <span class="w">        </span><span class="m">172</span>.18.0.3/16<span class="w"> </span>
      <span class="w">    </span><span class="o">{closing_brace}</span>
      <span class="w">    </span>a5fca8ba1e4ff0a67002f8f1b8cc3cd43185373c2a7e295546f774059ad8dd1a:
      <span class="w">    </span><span class="o">{opening_brace}</span>
      <span class="w">        </span>container1<span class="w"> </span>
      <span class="w">        </span>cff762e6286ebc169804b2a675bbff904102de796751d367c18d4b490c994c45<span class="w"> </span>
      <span class="w">        </span><span class="m">02</span>:42:ac:12:00:02<span class="w"> </span>
      <span class="w">        </span><span class="m">172</span>.18.0.2/16<span class="w"> </span>
      <span class="w">    </span><span class="o">{closing_brace}</span>
      <span class="o">]</span>
      </pre></div>
      <p>Como podemos ver el contenedor <code>container1</code> tiene la IP <code>172.18.0.2</code> y el contenedor <code>container2</code> tiene la IP <code>172.18.0.3</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Nos metemos dentro del contenedor <code>container1</code> e instalamos <code>ping</code></p>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span><span class="nb">exec</span><span class="w"> </span>-it<span class="w"> </span>container1<span class="w"> </span>bash
      root@a5fca8ba1e4f:/#<span class="w"> </span>apt<span class="w"> </span>update
      <span class="w">    </span>...
      root@a5fca8ba1e4f:/#<span class="w"> </span>apt<span class="w"> </span>install<span class="w"> </span>iputils-ping
      <span class="w">    </span>...
      root@a5fca8ba1e4f:/#
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Nos metemos dentro del contenedor <code>container2</code> e instalamos <code>ping</code></p>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span><span class="nb">exec</span><span class="w"> </span>-it<span class="w"> </span>container2<span class="w"> </span>bash
      root@a5fca8ba1e4f:/#<span class="w"> </span>apt<span class="w"> </span>update
      <span class="w">    </span>...
      root@a5fca8ba1e4f:/#<span class="w"> </span>apt<span class="w"> </span>install<span class="w"> </span>iputils-ping
      <span class="w">    </span>...
      root@a5fca8ba1e4f:/#
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora desde el contenedor <code>container1</code> hacemos un ping a la IP <code>172.18.0.3</code>, que pertenece al contenedor <code>container2</code></p>
      <div class="highlight"><pre><span></span>root@a5fca8ba1e4f:/#<span class="w"> </span>ping<span class="w"> </span><span class="m">172</span>.18.0.3
      PING<span class="w"> </span><span class="m">172</span>.18.0.3<span class="w"> </span><span class="o">(</span><span class="m">172</span>.18.0.3<span class="o">)</span><span class="w"> </span><span class="m">56</span><span class="o">(</span><span class="m">84</span><span class="o">)</span><span class="w"> </span>bytes<span class="w"> </span>of<span class="w"> </span>data.
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span><span class="m">172</span>.18.0.3:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.115<span class="w"> </span>ms
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span><span class="m">172</span>.18.0.3:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">2</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.049<span class="w"> </span>ms
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span><span class="m">172</span>.18.0.3:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">3</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.056<span class="w"> </span>ms
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span><span class="m">172</span>.18.0.3:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">4</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.060<span class="w"> </span>ms
      ^C
      ---<span class="w"> </span><span class="m">172</span>.18.0.3<span class="w"> </span>ping<span class="w"> </span>statistics<span class="w"> </span>---
      <span class="m">4</span><span class="w"> </span>packets<span class="w"> </span>transmitted,<span class="w"> </span><span class="m">4</span><span class="w"> </span>received,<span class="w"> </span><span class="m">0</span>%<span class="w"> </span>packet<span class="w"> </span>loss,<span class="w"> </span><span class="nb">time</span><span class="w"> </span>3068ms
      rtt<span class="w"> </span>min/avg/max/mdev<span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span>.049/0.070/0.115/0.026<span class="w"> </span>ms
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Y desde el contenedor <code>container2</code> hacemos un ping a la IP <code>172.18.0.2</code>, que pertenece al contenedor <code>container1</code></p>
      <div class="highlight"><pre><span></span>root@6c8dc1831548:/#<span class="w"> </span>ping<span class="w"> </span><span class="m">172</span>.18.0.2
      PING<span class="w"> </span><span class="m">172</span>.18.0.2<span class="w"> </span><span class="o">(</span><span class="m">172</span>.18.0.2<span class="o">)</span><span class="w"> </span><span class="m">56</span><span class="o">(</span><span class="m">84</span><span class="o">)</span><span class="w"> </span>bytes<span class="w"> </span>of<span class="w"> </span>data.
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span><span class="m">172</span>.18.0.2:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.076<span class="w"> </span>ms
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span><span class="m">172</span>.18.0.2:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">2</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.045<span class="w"> </span>ms
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span><span class="m">172</span>.18.0.2:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">3</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.049<span class="w"> </span>ms
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span><span class="m">172</span>.18.0.2:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">4</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.051<span class="w"> </span>ms
      ^C
      ---<span class="w"> </span><span class="m">172</span>.18.0.2<span class="w"> </span>ping<span class="w"> </span>statistics<span class="w"> </span>---
      <span class="m">4</span><span class="w"> </span>packets<span class="w"> </span>transmitted,<span class="w"> </span><span class="m">4</span><span class="w"> </span>received,<span class="w"> </span><span class="m">0</span>%<span class="w"> </span>packet<span class="w"> </span>loss,<span class="w"> </span><span class="nb">time</span><span class="w"> </span>3074ms
      rtt<span class="w"> </span>min/avg/max/mdev<span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span>.045/0.055/0.076/0.012<span class="w"> </span>ms
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pero hay una cosa mejor que nos permite hacer docker, si no me s√© la IP del contenedor al que me quiero conectar, en vez de escribir su IP puedo escribir su nombre</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora desde el contenedor <code>container1</code> hacemos un ping a la IP <code>container2</code></p>
      <div class="highlight"><pre><span></span>root@a5fca8ba1e4f:/#<span class="w"> </span>ping<span class="w"> </span>container2
      PING<span class="w"> </span>container2<span class="w"> </span><span class="o">(</span><span class="m">172</span>.18.0.3<span class="o">)</span><span class="w"> </span><span class="m">56</span><span class="o">(</span><span class="m">84</span><span class="o">)</span><span class="w"> </span>bytes<span class="w"> </span>of<span class="w"> </span>data.
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span>container2.myNetwork<span class="w"> </span><span class="o">(</span><span class="m">172</span>.18.0.3<span class="o">)</span>:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.048<span class="w"> </span>ms
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span>container2.myNetwork<span class="w"> </span><span class="o">(</span><span class="m">172</span>.18.0.3<span class="o">)</span>:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">2</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.050<span class="w"> </span>ms
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span>container2.myNetwork<span class="w"> </span><span class="o">(</span><span class="m">172</span>.18.0.3<span class="o">)</span>:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">3</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.052<span class="w"> </span>ms
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span>container2.myNetwork<span class="w"> </span><span class="o">(</span><span class="m">172</span>.18.0.3<span class="o">)</span>:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">4</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.053<span class="w"> </span>ms
      ^C
      ---<span class="w"> </span>container2<span class="w"> </span>ping<span class="w"> </span>statistics<span class="w"> </span>---
      <span class="m">4</span><span class="w"> </span>packets<span class="w"> </span>transmitted,<span class="w"> </span><span class="m">4</span><span class="w"> </span>received,<span class="w"> </span><span class="m">0</span>%<span class="w"> </span>packet<span class="w"> </span>loss,<span class="w"> </span><span class="nb">time</span><span class="w"> </span>3071ms
      rtt<span class="w"> </span>min/avg/max/mdev<span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span>.048/0.050/0.053/0.002<span class="w"> </span>ms
      </pre></div>
      <p>Como vemos docker sabe que la IP del contenedor <code>conteiner2</code> es la <code>172.18.0.3</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Y desde el contenedor <code>container2</code> hacemos un ping a la IP <code>container1</code></p>
      <div class="highlight"><pre><span></span>root@6c8dc1831548:/#<span class="w"> </span>ping<span class="w"> </span>container1
      PING<span class="w"> </span>container1<span class="w"> </span><span class="o">(</span><span class="m">172</span>.18.0.2<span class="o">)</span><span class="w"> </span><span class="m">56</span><span class="o">(</span><span class="m">84</span><span class="o">)</span><span class="w"> </span>bytes<span class="w"> </span>of<span class="w"> </span>data.
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span>container1.myNetwork<span class="w"> </span><span class="o">(</span><span class="m">172</span>.18.0.2<span class="o">)</span>:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.051<span class="w"> </span>ms
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span>container1.myNetwork<span class="w"> </span><span class="o">(</span><span class="m">172</span>.18.0.2<span class="o">)</span>:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">2</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.058<span class="w"> </span>ms
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span>container1.myNetwork<span class="w"> </span><span class="o">(</span><span class="m">172</span>.18.0.2<span class="o">)</span>:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">3</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.052<span class="w"> </span>ms
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span>container1.myNetwork<span class="w"> </span><span class="o">(</span><span class="m">172</span>.18.0.2<span class="o">)</span>:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">4</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.056<span class="w"> </span>ms
      ^C
      ---<span class="w"> </span>container1<span class="w"> </span>ping<span class="w"> </span>statistics<span class="w"> </span>---
      <span class="m">4</span><span class="w"> </span>packets<span class="w"> </span>transmitted,<span class="w"> </span><span class="m">4</span><span class="w"> </span>received,<span class="w"> </span><span class="m">0</span>%<span class="w"> </span>packet<span class="w"> </span>loss,<span class="w"> </span><span class="nb">time</span><span class="w"> </span>3057ms
      rtt<span class="w"> </span>min/avg/max/mdev<span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span>.051/0.054/0.058/0.003<span class="w"> </span>ms
      </pre></div>
      <p>Como vemos docker sabe que la IP del contenedor <code>conteiner1</code> es la <code>172.18.0.2</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Salimos de los contenedores y los borramos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>network<span class="w"> </span>connect<span class="w"> </span>myNetwork<span class="w"> </span>container1',
          '</span><span class="o">!</span>docker<span class="w"> </span>network<span class="w"> </span>connect<span class="w"> </span>myNetwork<span class="w"> </span>container2',
          '</span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>-f<span class="w"> </span>container1<span class="w"> </span>container2',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'container1',
          'container2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Borramos tambi√©n la red que hemos creado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>network<span class="w"> </span>rm<span class="w"> </span>myNetwork',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'myNetwork',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Uso-de-GPUs">Uso de GPUs<a class="anchor-link" href="#Uso-de-GPUs"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 167" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para poder usar las GPUs del host dentro de los contenedores docker es necesario realizar los pasos descritos en la p√°gina de instalaci√≥n de <a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html" target="_blank" rel="nofollow noreferrer">Nvidia container toolkit</a></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Configurar-el-repositorio-y-la-llave-GPG">Configurar el repositorio y la llave GPG<a class="anchor-link" href="#Configurar-el-repositorio-y-la-llave-GPG"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 168" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Tenemos que configurar el repositorio de <code>nvidia container toolkit</code> y la llave GPG, para ello ejecutamos el siguiente comando en la consola</p>
      <div class="highlight"><pre><span></span><span class="nv">distribution</span><span class="o">=</span><span class="k">$(</span>.<span class="w"> </span>/etc/os-release<span class="p">;</span><span class="nb">echo</span><span class="w"> </span><span class="nv">$ID$VERSION_ID</span><span class="k">)</span><span class="w"> </span><span class="se">\</span>
      <span class="w">      </span><span class="o">&amp;&amp;</span><span class="w"> </span>curl<span class="w"> </span>-fsSL<span class="w"> </span>https://nvidia.github.io/libnvidia-container/gpgkey<span class="w"> </span><span class="p">|</span><span class="w"> </span>sudo<span class="w"> </span>gpg<span class="w"> </span>--dearmor<span class="w"> </span>-o<span class="w"> </span>/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg<span class="w"> </span><span class="se">\</span>
      <span class="w">      </span><span class="o">&amp;&amp;</span><span class="w"> </span>curl<span class="w"> </span>-s<span class="w"> </span>-L<span class="w"> </span>https://nvidia.github.io/libnvidia-container/<span class="nv">$distribution</span>/libnvidia-container.list<span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="se">\</span>
      <span class="w">            </span>sed<span class="w"> </span><span class="s1">'s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="se">\</span>
      <span class="w">            </span>sudo<span class="w"> </span>tee<span class="w"> </span>/etc/apt/sources.list.d/nvidia-container-toolkit.list
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Instalaci%C3%B3n-de-nvidia-container-toolkit">Instalaci√≥n de <code>nvidia container toolkit</code><a class="anchor-link" href="#Instalaci%C3%B3n-de-nvidia-container-toolkit"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 169" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Una vez hemos actualizado el repositorio y la llave actualizamos los repositorios mediante el comando</p>
      <div class="highlight"><pre><span></span>sudo<span class="w"> </span>apt<span class="w"> </span>update
      </pre></div>
      <p>E instalamos <code>nvidia container toolkit</code></p>
      <div class="highlight"><pre><span></span>sudo<span class="w"> </span>apt<span class="w"> </span>install<span class="w"> </span>-y<span class="w"> </span>nvidia-docker2
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Reinicio-de-docker">Reinicio de docker<a class="anchor-link" href="#Reinicio-de-docker"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 170" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Una vez hemos terminado tenemos que reiniciar el demonio de docker mediante</p>
      <div class="highlight"><pre><span></span>sudo<span class="w"> </span>systemctl<span class="w"> </span>restart<span class="w"> </span>docker
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Uso-de-GPUs">Uso de GPUs<a class="anchor-link" href="#Uso-de-GPUs"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 171" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora que hemos configurado docker para poder usar las GPUs del host dentro de los contenedores lo podemos probar mediante la opci√≥n <code>--gpus all</code>. Si se tiene m√°s de una GPU y solo se quiere usar 1 habr√≠a que especificarlo, pero de momento aqu√≠ solo explicamos como usar todas</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos un contenedor que no se va a ejecutar en segundo plano, sino que lo que va a hecer es ejecutar el comando <code>nvidia-smi</code> para que podamos ver si tiene acceso a las  GPUs</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>--name<span class="w"> </span>container_gpus<span class="w"> </span>--gpus<span class="w"> </span>all<span class="w"> </span>ubuntu<span class="w"> </span>nvidia-smi',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Unable to find image \'ubuntu:latest\' locally',
          'latest: Pulling from library/ubuntu',
          '6a12be2b: Pull complete .54MB/29.54MBBDigest: sha256:aabed3296a3d45cede1dc866a24476c4d7e093aa806263c27ddaadbdce3c1054',
          'Status: Downloaded newer image for ubuntu:latest',
          'Mon Sep  4 07:10:36 2023       ',
          '+-----------------------------------------------------------------------------+',
          '| NVIDIA-SMI 510.39.01    Driver Version: 510.39.01    CUDA Version: 11.6     |',
          '|-------------------------------+----------------------+----------------------+',
          '| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |',
          '| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |',
          '|                               |                      |               MIG M. |',
          '|===============================+======================+======================|',
          '|   0  Quadro T1000        On   | 00000000:01:00.0 Off |                  N/A |',
          '| N/A   44C    P0    15W /  N/A |      9MiB /  4096MiB |      0%      Default |',
          '|                               |                      |                  N/A |',
          '+-------------------------------+----------------------+----------------------+',
          '                                                                               ',
          '+-----------------------------------------------------------------------------+',
          '| Processes:                                                                  |',
          '|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |',
          '|        ID   ID                                                   Usage      |',
          '|=============================================================================|',
          '|    0   N/A  N/A      2545      G                                       4MiB |',
          '|    0   N/A  N/A      3421      G                                       4MiB |',
          '+-----------------------------------------------------------------------------+',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Borramos el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>doker<span class="w"> </span>rm<span class="w"> </span>container_gpus',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h2 id="Docker-compose">Docker compose<a class="anchor-link" href="#Docker-compose"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 172" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Docker-compose-vs-docker-compose">Docker compose vs docker-compose<a class="anchor-link" href="#Docker-compose-vs-docker-compose"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 173" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>docker-compose</code> fue una herramienta que se cre√≥ para ayudar al mantenimiento de im√°genes y contenedores y hab√≠a que instalarla a parte de docker. Sin embargo docker lo incorpor√≥ en sus √∫ltimas versiones y ya no es necesario instalarla, sin embargo, para usarla, en vez de usar el comando <code>docker-compose</code> hay que usar el comando <code>docker compose</code>. En muchos sitios encontrar√°s informaci√≥n con <code>docker-compose</code>, pero al instalar docker ya te vendr√° instalado <code>docker compose</code> por lo que todo lo que se pod√≠a hacer con <code>docker-compose</code> es compatible con <code>docker compose</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Docker-compose">Docker compose<a class="anchor-link" href="#Docker-compose"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 174" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Docker compose es una herramienta de docker que hace todo lo que hemos visto hasta ahora, pero ahorr√°ndonos tiempo y esfuerzo. Editando un archivo <code>.yml</code> podemos decirle a docker compose que cree todos los contenedores que queramos.</p>
      <p>Para usarlo una vez no habr√° mucha diferencia de escribir todos los comandos que vimos antes o escribir el archivo <code>.yml</code> pero cuando quires volver a tener la misma configuraci√≥n de contenedores trabajando, solo con llamar al archivo <code>.yml</code> volver√° a crear toda la configuraci√≥n</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear una carpeta donde guardaremos los archivos de docker compose</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>doker<span class="w"> </span>rm<span class="w"> </span>container_gpus',
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>dockerComposeFiles',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Creamos dentro el archivo <code>.yml</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>doker<span class="w"> </span>rm<span class="w"> </span>container_gpus',
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>dockerComposeFiles',
      '<span></span><span class="o">!</span>touch<span class="w"> </span>dockerComposeFiles/docker-compose.yml',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Un archivo docker compose tiene que empezar por la versi√≥n</p>
      <div class="highlight"><pre><span></span><span class="err">versio</span><span class="kc">n</span><span class="p">:</span><span class="w"> </span><span class="s2">"&lt;v.v&gt;"</span>
      </pre></div>
      <p>En el momento de escribir esto, la √∫ltima versi√≥n es la <code>3.8</code> as√≠ que escribimos esa</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><em>docker-compose.yml</em>:</p>
      <div class="highlight"><pre><span></span><span class="err">versio</span><span class="kc">n</span><span class="p">:</span><span class="w"> </span><span class="s2">"3.8"</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A continuaci√≥n se indican los servicios, que son los contenedores, en cada servicio hay que especificar la imagen y adem√°s se pueden a√±adir otros par√°metros como puertos, variables de entorno, etc</p>
      <div class="highlight"><pre><span></span><span class="err">services</span><span class="p">:</span>
      <span class="w">    </span><span class="err">co</span><span class="kc">nta</span><span class="err">i</span><span class="kc">ner</span><span class="mi">1</span><span class="p">:</span>
      <span class="w">        </span><span class="err">image</span><span class="p">:</span><span class="w"> </span><span class="err">ubu</span><span class="kc">ntu</span>
      
      <span class="w">    </span><span class="err">co</span><span class="kc">nta</span><span class="err">i</span><span class="kc">ner</span><span class="mi">2</span><span class="p">:</span>
      <span class="w">        </span><span class="err">image</span><span class="p">:</span><span class="w"> </span><span class="err">ubu</span><span class="kc">ntu</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El <code>docker-compose.yml</code> quedar√≠a as√≠:</p>
      <div class="highlight"><pre><span></span><span class="err">versio</span><span class="kc">n</span><span class="p">:</span><span class="w"> </span><span class="s2">"3.8"</span>
      
      <span class="w">    </span><span class="err">services</span><span class="p">:</span>
      <span class="w">    </span><span class="err">co</span><span class="kc">nta</span><span class="err">i</span><span class="kc">ner</span><span class="mi">1</span><span class="p">:</span>
      <span class="w">        </span><span class="err">image</span><span class="p">:</span><span class="w"> </span><span class="err">ubu</span><span class="kc">ntu</span>
      
      <span class="w">    </span><span class="err">co</span><span class="kc">nta</span><span class="err">i</span><span class="kc">ner</span><span class="mi">2</span><span class="p">:</span>
      <span class="w">        </span><span class="err">image</span><span class="p">:</span><span class="w"> </span><span class="err">ubu</span><span class="kc">ntu</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Una vez que hemos creado el archivo, en su path, podemos ejecutar todo mediante el comando <code>docker compose up</code>, pero adem√°s a√±adiendo la opci√≥n <code>-d</code> haremos que corra en segundo plano</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>doker<span class="w"> </span>rm<span class="w"> </span>container_gpus',
          '</span><span class="o">!</span>mkdir<span class="w"> </span>dockerComposeFiles',
          '</span><span class="o">!</span>touch<span class="w"> </span>dockerComposeFiles/docker-compose.yml',
          '</span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>dockerComposeFiles<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>docker<span class="w"> </span>compose<span class="w"> </span>up<span class="w"> </span>-d',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[+] Running 1/0',
          '<span class="ansi-blue-fg"> ‚†ø Network dockercomposefiles_default         Created                      0.1s',
          '</span><span class="ansi-white-fg"> ‚†ã Container dockercomposefiles-container2-1  Creating                     0.0s',
          '</span><span class="ansi-white-fg"> ‚†ã Container dockercomposefiles-container1-1  Creating                     0.0s',
          '</span>[+] Running 1/3',
          '<span class="ansi-blue-fg"> ‚†ø Network dockercomposefiles_default         Created                      0.1s',
          '</span><span class="ansi-white-fg"> ‚†ô Container dockercomposefiles-container2-1  Creating                     0.1s',
          '</span><span class="ansi-white-fg"> ‚†ô Container dockercomposefiles-container1-1  Creating                     0.1s',
          '</span>[+] Running 1/3',
          '<span class="ansi-blue-fg"> ‚†ø Network dockercomposefiles_default         Created                      0.1s',
          '</span><span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container2-1  Starting                     0.2s',
          '</span><span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container1-1  Starting                     0.2s',
          '</span>[+] Running 1/3',
          '<span class="ansi-blue-fg"> ‚†ø Network dockercomposefiles_default         Created                      0.1s',
          '</span><span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container2-1  Starting                     0.3s',
          '</span><span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container1-1  Starting                     0.3s',
          '</span>[+] Running 1/3',
          '<span class="ansi-blue-fg"> ‚†ø Network dockercomposefiles_default         Created                      0.1s',
          '</span><span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container2-1  Starting                     0.4s',
          '</span><span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container1-1  Starting                     0.4s',
          '</span>[+] Running 1/3',
          '<span class="ansi-blue-fg"> ‚†ø Network dockercomposefiles_default         Created                      0.1s',
          '</span><span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container2-1  Starting                     0.5s',
          '</span><span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container1-1  Starting                     0.5s',
          '</span>[+] Running 2/3',
          '<span class="ansi-blue-fg"> ‚†ø Network dockercomposefiles_default         Created                      0.1s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container2-1  Started                      0.5s',
          '</span><span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container1-1  Starting                     0.6s',
          '</span><span class="ansi-blue-fg">[+] Running 3/3</span>',
          '<span class="ansi-blue-fg"> ‚†ø Network dockercomposefiles_default         Created                      0.1s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container2-1  Started                      0.5s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Started                      0.7s',
          '</span>',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si nos fijamos ha creado dos contenedores <code>dockercomposefiles-container1-1</code> y <code>dockercomposefiles-container2-1</code> y la red que los une <code>dockercomposefiles_default</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a borrar los dos contenedores</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>-f<span class="w"> </span>dockercomposefiles-container1-1<span class="w"> </span>dockercomposefiles-container2-1',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dockercomposefiles-container1-1',
          'dockercomposefiles-container2-1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y borramos la red que ha creado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>network<span class="w"> </span>rm<span class="w"> </span>dockercomposefiles_default',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dockercomposefiles_default',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a intentar hacer lo que hicimos antes con lo que sabemos hasta ahora. Creamos una nueva imagen que venga con <code>ping</code> instalado</p>
      <p><em>Dockerfile</em>:</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu:20.04</span>
      <span class="w">    </span>RUN<span class="w"> </span>apt<span class="w"> </span>update
      <span class="w">    </span>RUN<span class="w"> </span>apt<span class="w"> </span>install<span class="w"> </span>iputils-ping<span class="w"> </span>-y
      </pre></div>
      <p>Y la compilamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>ubuntu:ping<span class="w"> </span>./dockerImages',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  2.048kB',
          'Step 1/3 : FROM ubuntu:20.04',
          ' ---&gt; a0ce5a295b63',
          'Step 2/3 : RUN apt update',
          ' ---&gt; Running in 3bd5278d39b4',
          '<span class="ansi-red-intense-fg">',
          'WARNING: apt does not have a stable CLI interface. Use with caution in scripts.',
          '</span>Get:1 http://security.ubuntu.com/ubuntu focal-security InRelease [114 kB]',
          'Get:2 http://archive.ubuntu.com/ubuntu focal InRelease [265 kB]',
          'Get:3 http://security.ubuntu.com/ubuntu focal-security/universe amd64 Packages [898 kB]',
          'Get:4 http://archive.ubuntu.com/ubuntu focal-updates InRelease [114 kB]',
          'Get:5 http://archive.ubuntu.com/ubuntu focal-backports InRelease [108 kB]',
          'Get:6 http://archive.ubuntu.com/ubuntu focal/universe amd64 Packages [11.3 MB]',
          'Get:7 http://security.ubuntu.com/ubuntu focal-security/main amd64 Packages [2133 kB]',
          'Get:8 http://security.ubuntu.com/ubuntu focal-security/multiverse amd64 Packages [27.5 kB]',
          'Get:9 http://security.ubuntu.com/ubuntu focal-security/restricted amd64 Packages [1501 kB]',
          'Get:10 http://archive.ubuntu.com/ubuntu focal/main amd64 Packages [1275 kB]',
          'Get:11 http://archive.ubuntu.com/ubuntu focal/restricted amd64 Packages [33.4 kB]',
          'Get:12 http://archive.ubuntu.com/ubuntu focal/multiverse amd64 Packages [177 kB]',
          'Get:13 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 Packages [2594 kB]',
          'Get:14 http://archive.ubuntu.com/ubuntu focal-updates/restricted amd64 Packages [1613 kB]',
          'Get:15 http://archive.ubuntu.com/ubuntu focal-updates/multiverse amd64 Packages [30.2 kB]',
          'Get:16 http://archive.ubuntu.com/ubuntu focal-updates/universe amd64 Packages [1200 kB]',
          'Get:17 http://archive.ubuntu.com/ubuntu focal-backports/universe amd64 Packages [27.4 kB]',
          '...',
          'Successfully built c3d32aa9de02',
          'Successfully tagged ubuntu:ping',
          'Use \'docker scan\' to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Comprobamos que se ha creado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>image<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'REPOSITORY        TAG       IMAGE ID       CREATED              SIZE',
          'ubuntu            ping      c3d32aa9de02   About a minute ago   112MB',
          'maximofn/ubuntu   test      a78cf3ea16d8   25 hours ago         77.8MB',
          'nginx             latest    2d389e545974   33 hours ago         142MB',
          'ubuntu            latest    2dc39ba059dc   12 days ago          77.8MB',
          'ubuntu            20.04     a0ce5a295b63   12 days ago          72.8MB',
          'hello-world       latest    feb5d9fea6a5   11 months ago        13.3kB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Le cambiamos el tag</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>docker<span class="w"> </span>tag<span class="w"> </span>ubuntu:ping<span class="w"> </span>maximofn/ubuntu:ping',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>tag<span class="w"> </span>ubuntu:ping<span class="w"> </span>maximofn/ubuntu:ping',
          '</span><span class="o">!</span>docker<span class="w"> </span>image<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'REPOSITORY        TAG       IMAGE ID       CREATED              SIZE',
          'ubuntu            ping      c3d32aa9de02   About a minute ago   112MB',
          'maximofn/ubuntu   ping      c3d32aa9de02   About a minute ago   112MB',
          'maximofn/ubuntu   test      c3d32aa9de02   About a minute ago   112MB',
          'nginx             latest    2d389e545974   33 hours ago         142MB',
          'ubuntu            latest    2dc39ba059dc   12 days ago          77.8MB',
          'ubuntu            20.04     a0ce5a295b63   12 days ago          72.8MB',
          'hello-world       latest    feb5d9fea6a5   11 months ago        13.3kB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Editamos el archivo docker compose para que coja las im√°genes que acabamos de crear</p>
      <p><em>docker-compose.yml</em>:</p>
      <div class="highlight"><pre><span></span><span class="err">versio</span><span class="kc">n</span><span class="p">:</span><span class="w"> </span><span class="s2">"3.8"</span>
      
      <span class="w">    </span><span class="err">services</span><span class="p">:</span>
      <span class="w">      </span><span class="err">co</span><span class="kc">nta</span><span class="err">i</span><span class="kc">ner</span><span class="mi">1</span><span class="p">:</span>
      <span class="w">        </span><span class="err">image</span><span class="p">:</span><span class="w"> </span><span class="err">maximo</span><span class="kc">fn</span><span class="err">/ubu</span><span class="kc">ntu</span><span class="p">:</span><span class="err">pi</span><span class="kc">n</span><span class="err">g</span>
      
      <span class="w">    </span><span class="err">co</span><span class="kc">nta</span><span class="err">i</span><span class="kc">ner</span><span class="mi">2</span><span class="p">:</span>
      <span class="w">        </span><span class="err">image</span><span class="p">:</span><span class="w"> </span><span class="err">maximo</span><span class="kc">fn</span><span class="err">/ubu</span><span class="kc">ntu</span><span class="p">:</span><span class="err">pi</span><span class="kc">n</span><span class="err">g</span>
      </pre></div>
      <p>Y adem√°s le decimos que ejecute una no operaci√≥n</p>
      <p>El <code>docker-compose.yml</code> quedar√≠a as√≠:</p>
      <div class="highlight"><pre><span></span><span class="err">versio</span><span class="kc">n</span><span class="p">:</span><span class="w"> </span><span class="s2">"3.8"</span>
      
      <span class="w">    </span><span class="err">services</span><span class="p">:</span>
      <span class="w">      </span><span class="err">co</span><span class="kc">nta</span><span class="err">i</span><span class="kc">ner</span><span class="mi">1</span><span class="p">:</span>
      <span class="w">        </span><span class="err">image</span><span class="p">:</span><span class="w"> </span><span class="err">ubu</span><span class="kc">ntu</span>
      <span class="w">        </span><span class="err">comma</span><span class="kc">n</span><span class="err">d</span><span class="p">:</span><span class="w"> </span><span class="kc">ta</span><span class="err">il</span><span class="w"> </span><span class="mi">-</span><span class="kc">f</span><span class="w"> </span><span class="err">/dev/</span><span class="kc">null</span>
      
      <span class="w">    </span><span class="err">co</span><span class="kc">nta</span><span class="err">i</span><span class="kc">ner</span><span class="mi">2</span><span class="p">:</span>
      <span class="w">        </span><span class="err">image</span><span class="p">:</span><span class="w"> </span><span class="err">ubu</span><span class="kc">ntu</span>
      <span class="w">        </span><span class="err">comma</span><span class="kc">n</span><span class="err">d</span><span class="p">:</span><span class="w"> </span><span class="kc">ta</span><span class="err">il</span><span class="w"> </span><span class="mi">-</span><span class="kc">f</span><span class="w"> </span><span class="err">/dev/</span><span class="kc">null</span>
      </pre></div>
      <p>Lo levantamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>dockerComposeFiles<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>docker<span class="w"> </span>compose<span class="w"> </span>up<span class="w"> </span>-d',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[+] Running 0/0',
          '<span class="ansi-white-fg"> ‚†ã Container dockercomposefiles-container1-1  Recreate                     0.1s',
          '</span><span class="ansi-white-fg"> ‚†ã Container dockercomposefiles-container2-1  Recreate                     0.1s',
          '</span>[+] Running 1/2',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '</span><span class="ansi-white-fg"> ‚†ô Container dockercomposefiles-container2-1  Recreate                     0.2s',
          '</span>[+] Running 1/2',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '</span><span class="ansi-white-fg"> ‚†π Container dockercomposefiles-container2-1  Recreate                     0.3s',
          '</span>[+] Running 1/2',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '</span><span class="ansi-white-fg"> ‚†∏ Container dockercomposefiles-container2-1  Recreate                     0.4s',
          '</span>[+] Running 1/2',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '</span><span class="ansi-white-fg"> ‚†º Container dockercomposefiles-container2-1  Recreate                     0.5s',
          '</span>[+] Running 1/2',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '</span><span class="ansi-white-fg"> ‚†¥ Container dockercomposefiles-container2-1  Recreate                     0.6s',
          '</span>[+] Running 1/2',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '</span><span class="ansi-white-fg"> ‚†¶ Container dockercomposefiles-container2-1  Recreate                     0.7s',
          '</span>[+] Running 1/2',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '</span><span class="ansi-white-fg"> ‚†ß Container dockercomposefiles-container2-1  Recreate                     0.8s',
          '</span>[+] Running 1/2',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '</span><span class="ansi-white-fg"> ‚†á Container dockercomposefiles-container2-1  Recreate                     0.9s',
          '</span>[+] Running 1/2',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '</span><span class="ansi-white-fg"> ‚†è Container dockercomposefiles-container2-1  Recreate                     1.0s',
          '</span>[+] Running 1/2',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '</span><span class="ansi-white-fg"> ‚†ã Container dockercomposefiles-container2-1  Recreate                     1.1s',
          '</span>[+] Running 1/2',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '</span><span class="ansi-white-fg"> ‚†ô Container dockercomposefiles-container2-1  Recreate                     1.2s',
          '</span>[+] Running 1/2',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '</span><span class="ansi-white-fg"> ‚†π Container dockercomposefiles-container2-1  Recreate                     1.3s',
          '</span>[+] Running 1/2',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '</span><span class="ansi-white-fg"> ‚†∏ Container dockercomposefiles-container2-1  Recreate                     1.4s',
          '</span>[+] Running 1/2',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Recreated                    0.1s',
          '...',
          '</span><span class="ansi-blue-fg">[+] Running 2/2</span>',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Started                     10.8s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container2-1  Started                     10.9s',
          '</span><span class="ansi-blue-fg">[+] Running 2/2</span>',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Started                     10.8s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container2-1  Started                     10.9s',
          '</span>',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos los contenedores que est√°n corriendo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE                  COMMAND               CREATED          STATUS          PORTS     NAMES',
          '935939e5a75d   maximofn/ubuntu:ping   "tail -f /dev/null"   15 seconds ago   Up 13 seconds             dockercomposefiles-container2-1',
          'f9138d7064dd   maximofn/ubuntu:ping   "tail -f /dev/null"   25 seconds ago   Up 13 seconds             dockercomposefiles-container1-1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Est√°n los dos contenedores corriendo, ahora nos metemos en uno e intentamos hacer <code>ping</code> al otro</p>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span><span class="nb">exec</span><span class="w"> </span>-it<span class="w"> </span>dockercomposefiles-container1-1<span class="w"> </span>bash
      root@f9138d7064dd:/#<span class="w"> </span>ping<span class="w"> </span>dockercomposefiles-container2-1
      PING<span class="w"> </span>dockercomposefiles-container2-1<span class="w"> </span><span class="o">(</span><span class="m">172</span>.21.0.3<span class="o">)</span><span class="w"> </span><span class="m">56</span><span class="o">(</span><span class="m">84</span><span class="o">)</span><span class="w"> </span>bytes<span class="w"> </span>of<span class="w"> </span>data.
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span>dockercomposefiles-container2-1.dockercomposefiles_default<span class="w"> </span><span class="o">(</span><span class="m">172</span>.21.0.3<span class="o">)</span>:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.110<span class="w"> </span>ms
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span>dockercomposefiles-container2-1.dockercomposefiles_default<span class="w"> </span><span class="o">(</span><span class="m">172</span>.21.0.3<span class="o">)</span>:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">2</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.049<span class="w"> </span>ms
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span>dockercomposefiles-container2-1.dockercomposefiles_default<span class="w"> </span><span class="o">(</span><span class="m">172</span>.21.0.3<span class="o">)</span>:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">3</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.049<span class="w"> </span>ms
      <span class="m">64</span><span class="w"> </span>bytes<span class="w"> </span>from<span class="w"> </span>dockercomposefiles-container2-1.dockercomposefiles_default<span class="w"> </span><span class="o">(</span><span class="m">172</span>.21.0.3<span class="o">)</span>:<span class="w"> </span><span class="nv">icmp_seq</span><span class="o">=</span><span class="m">4</span><span class="w"> </span><span class="nv">ttl</span><span class="o">=</span><span class="m">64</span><span class="w"> </span><span class="nv">time</span><span class="o">=</span><span class="m">0</span>.075<span class="w"> </span>ms
      ^C
      ---<span class="w"> </span>dockercomposefiles-container2-1<span class="w"> </span>ping<span class="w"> </span>statistics<span class="w"> </span>---
      <span class="m">4</span><span class="w"> </span>packets<span class="w"> </span>transmitted,<span class="w"> </span><span class="m">4</span><span class="w"> </span>received,<span class="w"> </span><span class="m">0</span>%<span class="w"> </span>packet<span class="w"> </span>loss,<span class="w"> </span><span class="nb">time</span><span class="w"> </span>3068ms
      rtt<span class="w"> </span>min/avg/max/mdev<span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span>.049/0.070/0.110/0.025<span class="w"> </span>ms
      </pre></div>
      <p>Como vemos podemos hacer <code>ping</code>, hemos creado bien la imagen con <code>ping</code> instalado. Adem√°s en el docker compose hemos hecho que se ejecute una no operaci√≥n para que los contenedores est√©n corriendo</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Borramos los dos contenedores y la red que ha creado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>-f<span class="w"> </span>dockercomposefiles-container1-1<span class="w"> </span>dockercomposefiles-container2-1',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dockercomposefiles-container1-1',
          'dockercomposefiles-container2-1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>network<span class="w"> </span>rm<span class="w"> </span>dockercomposefiles_default',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dockercomposefiles_default',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Como-nombra-docker-compose-los-contenedores">Como nombra docker compose los contenedores<a class="anchor-link" href="#Como-nombra-docker-compose-los-contenedores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 175" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si nos fijamos los contenedores que creo docker se llamaban <code>dockercomposefiles-container1-1</code> y <code>dockercomposefiles-container1-1</code>. Esto es porque la carpeta en la que est√° el archivo de docker compose est√° en una carpeta llamada <code>dockerComposeFiles</code>, por eso la primera parte del nombre de los contenedores es <code>dockercomposefiles</code>, a continuaci√≥n aparece el nombre del servicio que le hemos dado en el archivo docker compose (<code>container1</code> y <code>container2</code>) y por √∫ltimo un numero para poder crear m√°s si es necesario</p>
      <p>Similar ocurre con el nombre de la red que ha creado <code>dockercomposefiles_default</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Logs-en-docker-compose">Logs en docker compose<a class="anchor-link" href="#Logs-en-docker-compose"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 176" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ahora a cambiar el archivo docker compose, en las l√≠neas en las que ten√≠amos <code>command: tail -f /dev/null</code>, vamos a poner <code>command: ping 0.0.0.0</code></p>
      <p>Y adem√°s le decimos que ejecute una no operaci√≥n</p>
      <p>El <code>docker-compose.yml</code> quedar√≠a as√≠:</p>
      <div class="highlight"><pre><span></span><span class="err">versio</span><span class="kc">n</span><span class="p">:</span><span class="w"> </span><span class="s2">"3.8"</span>
      
      <span class="w">    </span><span class="err">services</span><span class="p">:</span>
      <span class="w">      </span><span class="err">co</span><span class="kc">nta</span><span class="err">i</span><span class="kc">ner</span><span class="mi">1</span><span class="p">:</span>
      <span class="w">        </span><span class="err">image</span><span class="p">:</span><span class="w"> </span><span class="err">ubu</span><span class="kc">ntu</span>
      <span class="w">        </span><span class="err">comma</span><span class="kc">n</span><span class="err">d</span><span class="p">:</span><span class="w"> </span><span class="err">pi</span><span class="kc">n</span><span class="err">g</span><span class="w"> </span><span class="mf">0.0.0.0</span>
      
      <span class="w">    </span><span class="err">co</span><span class="kc">nta</span><span class="err">i</span><span class="kc">ner</span><span class="mi">2</span><span class="p">:</span>
      <span class="w">        </span><span class="err">image</span><span class="p">:</span><span class="w"> </span><span class="err">ubu</span><span class="kc">ntu</span>
      <span class="w">        </span><span class="err">comma</span><span class="kc">n</span><span class="err">d</span><span class="p">:</span><span class="w"> </span><span class="err">pi</span><span class="kc">n</span><span class="err">g</span><span class="w"> </span><span class="mf">0.0.0.0</span>
      </pre></div>
      <p>Esto lo hacemos para que cada contenedor est√© escupiendo el ping constantemente, as√≠ simulamos unos logs</p>
      <p>Si ejecutamos otra vez el docker compose</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>dockerComposeFiles<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>docker<span class="w"> </span>compose<span class="w"> </span>up<span class="w"> </span>-d',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[+] Running 0/0',
          '<span class="ansi-white-fg"> ‚†ã Container dockercomposefiles-container1-1  Recreate                     0.1s',
          '</span><span class="ansi-white-fg"> ‚†ã Container dockercomposefiles-container2-1  Recreate                     0.1s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†ô Container dockercomposefiles-container1-1  Recreate                     0.2s',
          '</span><span class="ansi-white-fg"> ‚†ô Container dockercomposefiles-container2-1  Recreate                     0.2s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†π Container dockercomposefiles-container1-1  Recreate                     0.3s',
          '</span><span class="ansi-white-fg"> ‚†π Container dockercomposefiles-container2-1  Recreate                     0.3s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†∏ Container dockercomposefiles-container1-1  Recreate                     0.4s',
          '</span><span class="ansi-white-fg"> ‚†∏ Container dockercomposefiles-container2-1  Recreate                     0.4s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†º Container dockercomposefiles-container1-1  Recreate                     0.5s',
          '</span><span class="ansi-white-fg"> ‚†º Container dockercomposefiles-container2-1  Recreate                     0.5s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†¥ Container dockercomposefiles-container1-1  Recreate                     0.6s',
          '</span><span class="ansi-white-fg"> ‚†¥ Container dockercomposefiles-container2-1  Recreate                     0.6s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†¶ Container dockercomposefiles-container1-1  Recreate                     0.7s',
          '</span><span class="ansi-white-fg"> ‚†¶ Container dockercomposefiles-container2-1  Recreate                     0.7s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†ß Container dockercomposefiles-container1-1  Recreate                     0.8s',
          '</span><span class="ansi-white-fg"> ‚†ß Container dockercomposefiles-container2-1  Recreate                     0.8s',
          '</span>[+] Running 0/2',
          '...',
          '<span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container1-1  Starting                    11.0s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container2-1  Started                     11.0s',
          '</span><span class="ansi-blue-fg">[+] Running 2/2</span>',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Started                     11.1s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container2-1  Started                     11.0s',
          '</span>',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora podemos ver los logs de los dos contenedores mediante el comando <code>docker compose logs</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>dockerComposeFiles<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>docker<span class="w"> </span>compose<span class="w"> </span>logs',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>PING 0.0.0.0 (127.0.0.1) 56(84) bytes of data.',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.042 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.025 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.022 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=4 ttl=64 time=0.030 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=5 ttl=64 time=0.021 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=6 ttl=64 time=0.021 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=7 ttl=64 time=0.030 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=8 ttl=64 time=0.028 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=9 ttl=64 time=0.028 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=10 ttl=64 time=0.026 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=11 ttl=64 time=0.028 ms',
          '<span class="ansi-yellow-fg">dockercomposefiles-container1-1  | </span>PING 0.0.0.0 (127.0.0.1) 56(84) bytes of data.',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=12 ttl=64 time=0.027 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=13 ttl=64 time=0.039 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=14 ttl=64 time=0.035 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=15 ttl=64 time=0.034 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=16 ttl=64 time=0.036 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=17 ttl=64 time=0.034 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=18 ttl=64 time=0.036 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=19 ttl=64 time=0.032 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=20 ttl=64 time=0.032 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=21 ttl=64 time=0.033 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=22 ttl=64 time=0.034 ms',
          '<span class="ansi-yellow-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.037 ms',
          '...',
          '<span class="ansi-yellow-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=214 ttl=64 time=0.015 ms',
          '<span class="ansi-yellow-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=215 ttl=64 time=0.021 ms',
          '<span class="ansi-yellow-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=216 ttl=64 time=0.020 ms',
          '<span class="ansi-yellow-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=217 ttl=64 time=0.049 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos podemos ver los logs de los dos contenedores, pero en el caso de querer ver solo los de uno, podemos especificar el <strong>nombre del servicio</strong></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>dockerComposeFiles<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>docker<span class="w"> </span>compose<span class="w"> </span>logs<span class="w"> </span>container1',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>PING 0.0.0.0 (127.0.0.1) 56(84) bytes of data.',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.037 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.025 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.023 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=4 ttl=64 time=0.031 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=5 ttl=64 time=0.034 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=6 ttl=64 time=0.033 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=7 ttl=64 time=0.034 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=8 ttl=64 time=0.022 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=9 ttl=64 time=0.032 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=10 ttl=64 time=0.029 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=11 ttl=64 time=0.031 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=12 ttl=64 time=0.024 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=13 ttl=64 time=0.029 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=14 ttl=64 time=0.032 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=15 ttl=64 time=0.033 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=16 ttl=64 time=0.034 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=17 ttl=64 time=0.028 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=18 ttl=64 time=0.034 ms',
          '...',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=332 ttl=64 time=0.027 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=333 ttl=64 time=0.030 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=334 ttl=64 time=0.033 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container1-1  | </span>64 bytes from 127.0.0.1: icmp_seq=335 ttl=64 time=0.036 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>dockerComposeFiles<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>docker<span class="w"> </span>compose<span class="w"> </span>logs<span class="w"> </span>container2',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>PING 0.0.0.0 (127.0.0.1) 56(84) bytes of data.',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.042 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.025 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.022 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=4 ttl=64 time=0.030 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=5 ttl=64 time=0.021 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=6 ttl=64 time=0.021 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=7 ttl=64 time=0.030 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=8 ttl=64 time=0.028 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=9 ttl=64 time=0.028 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=10 ttl=64 time=0.026 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=11 ttl=64 time=0.028 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=12 ttl=64 time=0.027 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=13 ttl=64 time=0.039 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=14 ttl=64 time=0.035 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=15 ttl=64 time=0.034 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=16 ttl=64 time=0.036 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=17 ttl=64 time=0.034 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=18 ttl=64 time=0.036 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=19 ttl=64 time=0.032 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=20 ttl=64 time=0.032 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=21 ttl=64 time=0.033 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=22 ttl=64 time=0.034 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=23 ttl=64 time=0.035 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=24 ttl=64 time=0.037 ms',
          '...',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=340 ttl=64 time=0.034 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=341 ttl=64 time=0.033 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=342 ttl=64 time=0.034 ms',
          '<span class="ansi-cyan-fg">dockercomposefiles-container2-1  | </span>64 bytes from 127.0.0.1: icmp_seq=343 ttl=64 time=0.036 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos ver los logs continuamente podemos a√±adir la opci√≥n <code>-f</code>, <code>docker compose logs - &lt;service name&gt;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si he hecho un docker compose con m√°s de dos servici√≥n, cuando se quiera ver los logs de varios servicios solo hay ue a√±adir m√°s nombres al comando, <code>docker compose logs &lt;name service 1&gt; &lt;name service 2&gt; ...</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Exec-servicios">Exec servicios<a class="anchor-link" href="#Exec-servicios"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 177" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como hemos visto, mediante el comando <code>exec</code> podemos entrar a un contenedor indicando el nombre del contenedor, el comando que se quiere ejecutar y la opci√≥n <code>-it</code>. Con docker compose esto es m√°s sencillo, ya que solamente es necesario el nombre del servicio y el comando, pero no es necesaria la opci√≥n <code>-it</code> ya que docker compose lo da por supuesto</p>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span>compose<span class="w"> </span><span class="nb">exec</span><span class="w"> </span>container1<span class="w"> </span>bash
      root@a7cf282fe66c:/#
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Parando-docker-compose">Parando docker compose<a class="anchor-link" href="#Parando-docker-compose"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 178" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Cuando hemos terminado de trabajar, con un solo comando (<code>stop</code>), docker compose para todo, no hace falta ir parando uno a uno cada contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>dockerComposeFiles<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>docker<span class="w"> </span>compose<span class="w"> </span>stop',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[+] Running 0/0',
          '<span class="ansi-white-fg"> ‚†ã Container dockercomposefiles-container2-1  Stopping                     0.1s',
          '</span><span class="ansi-white-fg"> ‚†ã Container dockercomposefiles-container1-1  Stopping                     0.1s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†ô Container dockercomposefiles-container2-1  Stopping                     0.2s',
          '</span><span class="ansi-white-fg"> ‚†ô Container dockercomposefiles-container1-1  Stopping                     0.2s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†π Container dockercomposefiles-container2-1  Stopping                     0.3s',
          '</span><span class="ansi-white-fg"> ‚†π Container dockercomposefiles-container1-1  Stopping                     0.3s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†∏ Container dockercomposefiles-container2-1  Stopping                     0.4s',
          '</span><span class="ansi-white-fg"> ‚†∏ Container dockercomposefiles-container1-1  Stopping                     0.4s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†º Container dockercomposefiles-container2-1  Stopping                     0.5s',
          '</span><span class="ansi-white-fg"> ‚†º Container dockercomposefiles-container1-1  Stopping                     0.5s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†¥ Container dockercomposefiles-container2-1  Stopping                     0.6s',
          '</span><span class="ansi-white-fg"> ‚†¥ Container dockercomposefiles-container1-1  Stopping                     0.6s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†¶ Container dockercomposefiles-container2-1  Stopping                     0.7s',
          '</span><span class="ansi-white-fg"> ‚†¶ Container dockercomposefiles-container1-1  Stopping                     0.7s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†ß Container dockercomposefiles-container2-1  Stopping                     0.8s',
          '</span><span class="ansi-white-fg"> ‚†ß Container dockercomposefiles-container1-1  Stopping                     0.8s',
          '...',
          '</span>[+] Running 1/2',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container2-1  Stopped                     10.4s',
          '</span><span class="ansi-white-fg"> ‚†∏ Container dockercomposefiles-container1-1  Stopping                    10.4s',
          '</span><span class="ansi-blue-fg">[+] Running 2/2</span>',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container2-1  Stopped                     10.4s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Stopped                     10.4s',
          '</span>',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver docker compose ha parado los dos contenedores, pero no los ha borrado, ni ha borrado la red</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE                  COMMAND          CREATED          STATUS                        PORTS     NAMES',
          '1e6c1dd9adb2   maximofn/ubuntu:ping   "ping 0.0.0.0"   16 minutes ago   Exited (137) 25 seconds ago             dockercomposefiles-container2-1',
          'a7cf282fe66c   maximofn/ubuntu:ping   "ping 0.0.0.0"   16 minutes ago   Exited (137) 25 seconds ago             dockercomposefiles-container1-1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>network<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'NETWORK ID     NAME                         DRIVER    SCOPE',
          '13cc632147f3   bridge                       bridge    local',
          'd4a2f718cd83   dockercomposefiles_default   bridge    local',
          'da1f5f6fccc0   host                         host      local',
          'd3b0d93993c0   none                         null      local',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Docker-compose-como-herramienta-de-desarrollo">Docker compose como herramienta de desarrollo<a class="anchor-link" href="#Docker-compose-como-herramienta-de-desarrollo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 179" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al igual que vimos antes, para poder desarrollar, lo ideal ser√≠a compartir la carpeta que tiene el c√≥digo con el servicio. Esto con docker compose se hace a√±adiendo la etiqueta <code>volumes</code> al archivo docker compose. Primero tenemos que a√±adirle la ruta de la carpeta donde est√° el codigo en el host y luego la ruta en el contenedor.</p>
      <p><em>docker-compose.yml</em>:</p>
      <div class="highlight"><pre><span></span><span class="err">versio</span><span class="kc">n</span><span class="p">:</span><span class="w"> </span><span class="s2">"3.8"</span>
      
      <span class="w">    </span><span class="err">services</span><span class="p">:</span>
      <span class="w">      </span><span class="err">co</span><span class="kc">nta</span><span class="err">i</span><span class="kc">ner</span><span class="mi">1</span><span class="p">:</span>
      <span class="w">        </span><span class="err">image</span><span class="p">:</span><span class="w"> </span><span class="err">ubu</span><span class="kc">ntu</span>
      <span class="w">        </span><span class="err">comma</span><span class="kc">n</span><span class="err">d</span><span class="p">:</span><span class="w"> </span><span class="err">pi</span><span class="kc">n</span><span class="err">g</span><span class="w"> </span><span class="mf">0.0.0.0</span>
      <span class="w">        </span><span class="err">volumes</span><span class="p">:</span>
      <span class="w">            </span><span class="mi">-</span><span class="w"> </span><span class="err">../dockerHos</span><span class="kc">t</span><span class="err">Folder/</span><span class="p">:</span><span class="err">/dockerCo</span><span class="kc">nta</span><span class="err">i</span><span class="kc">ner</span><span class="err">Folder</span>
      
      <span class="w">    </span><span class="err">co</span><span class="kc">nta</span><span class="err">i</span><span class="kc">ner</span><span class="mi">2</span><span class="p">:</span>
      <span class="w">        </span><span class="err">image</span><span class="p">:</span><span class="w"> </span><span class="err">ubu</span><span class="kc">ntu</span>
      <span class="w">        </span><span class="err">comma</span><span class="kc">n</span><span class="err">d</span><span class="p">:</span><span class="w"> </span><span class="err">pi</span><span class="kc">n</span><span class="err">g</span><span class="w"> </span><span class="mf">0.0.0.0</span>
      </pre></div>
      <p>Como se puede ver, la ruta de la carpeta del host la he puesto relativa</p>
      <p>Si levantamos el docker compose</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>dockerComposeFiles<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>docker<span class="w"> </span>compose<span class="w"> </span>up<span class="w"> </span>-d',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[+] Running 1/0',
          '<span class="ansi-white-fg"> ‚†ã Container dockercomposefiles-container1-1  Recreate                     0.1s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container2-1  Created                      0.0s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container1-1  Starting                     0.2s',
          '</span><span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container2-1  Starting                     0.2s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container1-1  Starting                     0.3s',
          '</span><span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container2-1  Starting                     0.3s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container1-1  Starting                     0.4s',
          '</span><span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container2-1  Starting                     0.4s',
          '</span>[+] Running 1/2',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Started                      0.5s',
          '</span><span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container2-1  Starting                     0.5s',
          '</span><span class="ansi-blue-fg">[+] Running 2/2</span>',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Started                      0.5s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container2-1  Started                      0.6s',
          '</span>',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si entramos dentro del contenedor, podemos ver qu√© hay dentro del archivo text.txt</p>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span>compose<span class="w"> </span><span class="nb">exec</span><span class="w"> </span>container1<span class="w"> </span>bash
      root@c8aae9d619d3:/#<span class="w"> </span>ls<span class="w"> </span>dockerContainerFolder/
      bindFile.txt<span class="w">  </span>fileExtract.txt<span class="w">  </span>text.txt
      root@c8aae9d619d3:/#<span class="w"> </span>cat<span class="w"> </span>dockerContainerFolder/text.txt<span class="w"> </span>
      hola<span class="w"> </span>contenedor
      </pre></div>
      <p>Si ahora lo abrimos en el host, escribimos <code>hola host</code> y volvemos a ver en el contenedor</p>
      <div class="highlight"><pre><span></span>root@c8aae9d619d3:/#<span class="w"> </span>cat<span class="w"> </span>dockerContainerFolder/text.txt<span class="w"> </span>
      hola<span class="w"> </span>host
      </pre></div>
      <p>Y ahora al rev√©s, si lo modificamos en el contenedor</p>
      <div class="highlight"><pre><span></span>root@c8aae9d619d3:/#<span class="w"> </span><span class="nb">echo</span><span class="w"> </span>hola<span class="w"> </span>compose<span class="w"> </span>&gt;<span class="w"> </span>dockerContainerFolder/text.txt
      root@c8aae9d619d3:/#<span class="w"> </span><span class="nb">exit</span>
      <span class="nb">exit</span>
      </pre></div>
      <p>Si lo vemos desde el host debemos obtener <code>hola compose</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>cat<span class="w"> </span>dockerHostFolder/text.txt',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'hola compose',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Exposici%C3%B3n-de-puertos-en-docker-compose">Exposici√≥n de puertos en docker compose<a class="anchor-link" href="#Exposici%C3%B3n-de-puertos-en-docker-compose"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 180" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Tambi√©n podemos configurar los puertos en el archivo de docker compose, mediante la etiqueta <code>ports</code>, indicando el puerto del host y a continuaci√≥n la ip del servicio</p>
      <div class="highlight"><pre><span></span><span class="err">por</span><span class="kc">ts</span><span class="p">:</span>
      <span class="w">    </span><span class="mi">-</span><span class="w"> </span><span class="err">&lt;hos</span><span class="kc">t</span><span class="w"> </span><span class="err">por</span><span class="kc">t</span><span class="err">&gt;</span><span class="p">:</span><span class="err">&lt;service</span><span class="w"> </span><span class="err">por</span><span class="kc">t</span><span class="err">&gt;</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Docker-compose-en-equipo---docker-override">Docker compose en equipo - docker override<a class="anchor-link" href="#Docker-compose-en-equipo---docker-override"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 181" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si somos un grupo de personas desarrollando sobre docker con docker compose, es probable que muchas personas anden cambiando el archivo docker compose, lo cual puede hacer que no se sincronicen bien y hayan conflictos.</p>
      <p>Para solucionar esto docker ofrece una herramienta llamada docker override. De esta manera puede haber un archivo docker compose base y que cada uno lo modifique mediante docker override.</p>
      <p>Para hacer esto, ahora tenemos que crear un archivo llamado <code>docker-compose.override.yml</code> que ser√° el que podremos editar</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>touch<span class="w"> </span>dockerComposeFiles/docker-compose.override.yml',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Si ahora intentamos levantar el docker compose vamos a recibir un error</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>touch<span class="w"> </span>dockerComposeFiles/docker-compose.override.yml',
          '</span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>dockerComposeFiles<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>docker<span class="w"> </span>compose<span class="w"> </span>up<span class="w"> </span>-d',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Top-level object must be a mapping',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y esto es porque docker compose ha detectado que hay un archivo llamado <code>docker-compose.override.yml</code> y que est√° vac√≠o, por lo que vamos a editarlo. El archivo <code>docker-compose.override.yml</code> lo que hace es editar el archivo <code>docker-compose.yml</code>, por lo que si por ejemplo queremos hacer un cambio en el servicio <code>container2</code> para a√±adirle un volumen escribir√≠amos as√≠ el archivo <code>docker-compose.override.yml</code></p>
      <p><em>docker-compose.override.yml</em>:</p>
      <div class="highlight"><pre><span></span><span class="err">versio</span><span class="kc">n</span><span class="p">:</span><span class="w"> </span><span class="s2">"3.8"</span>
      
      <span class="w">    </span><span class="err">services</span><span class="p">:</span>
      <span class="w">    </span><span class="err">co</span><span class="kc">nta</span><span class="err">i</span><span class="kc">ner</span><span class="mi">2</span><span class="p">:</span>
      <span class="w">        </span><span class="err">volumes</span><span class="p">:</span>
      <span class="w">        </span><span class="mi">-</span><span class="w"> </span><span class="err">../dockerHos</span><span class="kc">t</span><span class="err">Folder/</span><span class="p">:</span><span class="err">/dockerOverrideFolder</span>
      </pre></div>
      <p>Date cuenta que la carpeta compartida en el servicio la he llamado <code>dockerOverrideFolder</code>, por lo que vamos a levantar el docker compose y ver si vemos esa carpeta en el contenedor <code>container2</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>dockerComposeFiles<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>docker<span class="w"> </span>compose<span class="w"> </span>up<span class="w"> </span>-d',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[+] Running 1/0',
          '<span class="ansi-white-fg"> ‚†ã Container dockercomposefiles-container2-1  Recreate                     0.1s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Running                      0.0s',
          '</span>[+] Running 1/2',
          '<span class="ansi-white-fg"> ‚†ô Container dockercomposefiles-container2-1  Recreate                     0.2s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Running                      0.0s',
          '</span>[+] Running 1/2',
          '<span class="ansi-white-fg"> ‚†π Container dockercomposefiles-container2-1  Recreate                     0.3s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Running                      0.0s',
          '</span>[+] Running 1/2',
          '<span class="ansi-white-fg"> ‚†∏ Container dockercomposefiles-container2-1  Recreate                     0.4s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Running                      0.0s',
          '</span>[+] Running 1/2',
          '<span class="ansi-white-fg"> ‚†º Container dockercomposefiles-container2-1  Recreate                     0.5s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Running                      0.0s',
          '</span>[+] Running 1/2',
          '<span class="ansi-white-fg"> ‚†¥ Container dockercomposefiles-container2-1  Recreate                     0.6s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Running                      0.0s',
          '</span>[+] Running 1/2',
          '<span class="ansi-white-fg"> ‚†¶ Container dockercomposefiles-container2-1  Recreate                     0.7s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Running                      0.0s',
          '</span>[+] Running 1/2',
          '<span class="ansi-white-fg"> ‚†ß Container dockercomposefiles-container2-1  Recreate                     0.8s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Running                      0.0s',
          '...',
          '</span>[+] Running 1/2',
          '<span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container2-1  Starting                    10.8s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Running                      0.0s',
          '</span><span class="ansi-blue-fg">[+] Running 2/2</span>',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container2-1  Started                     10.8s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Running                      0.0s',
          '</span>',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que ha tardado 10 segundos en montar el servicio <code>container2</code>, eso es porque ha estado aplicando los cambios</p>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span>compose<span class="w"> </span><span class="nb">exec</span><span class="w"> </span>container2<span class="w"> </span>bash
      root@d8777a4e611a:/#<span class="w"> </span>ls<span class="w"> </span>dockerOverrideFolder/
      bindFile.txt<span class="w">  </span>fileExtract.txt<span class="w">  </span>text.txt
      root@d8777a4e611a:/#<span class="w"> </span>cat<span class="w"> </span>dockerOverrideFolder/text.txt<span class="w"> </span>
      hola<span class="w"> </span>compose
      root@d8777a4e611a:/#<span class="w"> </span><span class="nb">exit</span>
      <span class="nb">exit</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Bajamos el compose y borramos los contenedores y la red creada</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>dockerComposeFiles<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>docker<span class="w"> </span>compose<span class="w"> </span>down',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[+] Running 0/0',
          '<span class="ansi-white-fg"> ‚†ã Container dockercomposefiles-container2-1  Stopping                     0.1s',
          '</span><span class="ansi-white-fg"> ‚†ã Container dockercomposefiles-container1-1  Stopping                     0.1s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†ô Container dockercomposefiles-container2-1  Stopping                     0.2s',
          '</span><span class="ansi-white-fg"> ‚†ô Container dockercomposefiles-container1-1  Stopping                     0.2s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†π Container dockercomposefiles-container2-1  Stopping                     0.3s',
          '</span><span class="ansi-white-fg"> ‚†π Container dockercomposefiles-container1-1  Stopping                     0.3s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†∏ Container dockercomposefiles-container2-1  Stopping                     0.4s',
          '</span><span class="ansi-white-fg"> ‚†∏ Container dockercomposefiles-container1-1  Stopping                     0.4s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†º Container dockercomposefiles-container2-1  Stopping                     0.5s',
          '</span><span class="ansi-white-fg"> ‚†º Container dockercomposefiles-container1-1  Stopping                     0.5s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†¥ Container dockercomposefiles-container2-1  Stopping                     0.6s',
          '</span><span class="ansi-white-fg"> ‚†¥ Container dockercomposefiles-container1-1  Stopping                     0.6s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†¶ Container dockercomposefiles-container2-1  Stopping                     0.7s',
          '</span><span class="ansi-white-fg"> ‚†¶ Container dockercomposefiles-container1-1  Stopping                     0.7s',
          '</span>[+] Running 0/2',
          '<span class="ansi-white-fg"> ‚†ß Container dockercomposefiles-container2-1  Stopping                     0.8s',
          '</span><span class="ansi-white-fg"> ‚†ß Container dockercomposefiles-container1-1  Stopping                     0.8s',
          '...',
          '</span><span class="ansi-white-fg"> ‚†∏ Container dockercomposefiles-container2-1  Stopping                    10.4s',
          '</span><span class="ansi-white-fg"> ‚†∏ Container dockercomposefiles-container1-1  Stopping                    10.4s',
          '</span>[+] Running 1/2',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container2-1  Removed                     10.4s',
          '</span><span class="ansi-white-fg"> ‚†ø Container dockercomposefiles-container1-1  Removing                    10.5s',
          '</span><span class="ansi-blue-fg">[+] Running 2/2</span>',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container2-1  Removed                     10.4s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Removed                     10.5s',
          '</span><span class="ansi-white-fg"> ‚†ã Network dockercomposefiles_default         Removing                     0.1s',
          '</span><span class="ansi-blue-fg">[+] Running 3/3</span>',
          '<span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container2-1  Removed                     10.4s',
          '</span><span class="ansi-blue-fg"> ‚†ø Container dockercomposefiles-container1-1  Removed                     10.5s',
          '</span><span class="ansi-blue-fg"> ‚†ø Network dockercomposefiles_default         Removed                      0.2s',
          '</span>',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En este caso, solo con <code>down</code> docker compose ha parado y borrado todo, ya que, como vemos en los contenedores y en la red pone <code>Removed</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Docker-compose-restart">Docker compose restart<a class="anchor-link" href="#Docker-compose-restart"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 182" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A la hora de escribir un docker compose, podemos a√±adir la etiqueta <code>restart</code> para que si el contenedor se cae, se reinicie autom√°ticamente</p>
      <div class="highlight"><pre><span></span><span class="err">res</span><span class="kc">tart</span><span class="p">:</span><span class="w"> </span><span class="err">always</span>
      </pre></div>
      <p>De esta manera, si el contenedor se cae, se reiniciar√° autom√°ticamente. Si queremos que se reinicie solo un n√∫mero de veces, podemos a√±adirle la opci√≥n <code>on-failure</code></p>
      <div class="highlight"><pre><span></span><span class="err">res</span><span class="kc">tart</span><span class="p">:</span><span class="w"> </span><span class="err">o</span><span class="kc">n</span><span class="mi">-</span><span class="kc">fa</span><span class="err">ilure</span><span class="p">:</span><span class="err">&lt;</span><span class="kc">nu</span><span class="err">mber&gt;</span>
      </pre></div>
      <p>Ahora el contenedor se reiniciar√° un n√∫mero de veces, pero si se cae m√°s veces, no se reiniciar√°. Si queremos que se reinicie siempre, podemos a√±adirle la opci√≥n <code>unless-stopped</code></p>
      <div class="highlight"><pre><span></span><span class="err">res</span><span class="kc">tart</span><span class="p">:</span><span class="w"> </span><span class="err">u</span><span class="kc">nless</span><span class="mi">-</span><span class="err">s</span><span class="kc">t</span><span class="err">opped</span>
      </pre></div>
      <p>Ahora el contenedor se reiniciar√° siempre, a no ser que se pare manualmente</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Docker-avanzado">Docker avanzado<a class="anchor-link" href="#Docker-avanzado"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 183" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Administrar-ambiente-de-trabajo">Administrar ambiente de trabajo<a class="anchor-link" href="#Administrar-ambiente-de-trabajo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 184" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Borrado-de-contenedores-apagados">Borrado de contenedores apagados<a class="anchor-link" href="#Borrado-de-contenedores-apagados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 185" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Despu√©s de estar un tiempo desarrollando, podemos tener varios contenedores apagados, pero guardados en el ordenador. Esto al final ocupa memoria, as√≠ que con <code>docker contanier prune</code> podemos eliminar todos los que est√°n parados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>ubuntu',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>ubuntu',
          '</span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED          STATUS                      PORTS     NAMES',
          'effcee24f54a   ubuntu    "bash"    37 seconds ago   Exited (0) 36 seconds ago             musing_rosalind',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span>container<span class="w"> </span>prune<span class="w"> </span>
      WARNING!<span class="w"> </span>This<span class="w"> </span>will<span class="w"> </span>remove<span class="w"> </span>all<span class="w"> </span>stopped<span class="w"> </span>containers.
      Are<span class="w"> </span>you<span class="w"> </span>sure<span class="w"> </span>you<span class="w"> </span>want<span class="w"> </span>to<span class="w"> </span><span class="k">continue</span>?<span class="w"> </span><span class="o">[</span>y/N<span class="o">]</span><span class="w"> </span>y
      Deleted<span class="w"> </span>Containers:
      effcee24f54aab22e34fdea2465b3b7af132d8c627e5432ba3e915a370876977
      
      Total<span class="w"> </span>reclaimed<span class="w"> </span>space:<span class="w"> </span>0B
      </pre></div>
      <p>En este caso hemos ahorrado 0 bytes, pero en el caso de dejar contenedores apagados despu√©s de mucho desarrollo, seguro que el ahorro de memoria ser√° mayor</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Borrado-de-todos-los-contenedores">Borrado de todos los contenedores<a class="anchor-link" href="#Borrado-de-todos-los-contenedores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 186" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En caso de tener contenedores corriendo, podemos matar todos los contenedores mediante otro comando</p>
      <p>El comando <code>docker ps -q</code> nos devuelve la id de todos los contenedores, por lo que con el comando <code>docker rm -f $(docker ps -aq)</code> pararemos y borraremos todos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>-d<span class="w"> </span>ubuntu<span class="w"> </span>tail<span class="w"> </span>-f<span class="w"> </span>/dev/null',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'c22516186ef7e3561fb1ad0d508a914857dbc61274a218f297c4d80b1fc33863',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED              STATUS              PORTS     NAMES',
          'c22516186ef7   ubuntu    "tail -f /dev/null"   About a minute ago   Up About a minute             agitated_knuth',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>-f<span class="w"> </span><span class="k">$(</span>docker<span class="w"> </span>ps<span class="w"> </span>-aq<span class="k">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'c22516186ef7',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Borrado-de-todo">Borrado de todo<a class="anchor-link" href="#Borrado-de-todo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 187" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como hemos visto docker tambi√©n crea redes, im√°genes, vol√∫menes, etc, as√≠ que con el comando <code>docker system prune</code> podemos borrar todos los contenedores parados, todas las redes que no est√©n usadas por al menos un contenedor, las im√°genes repetidas, y lo que haya repetido en la cach√© de compilaci√≥n</p>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span>system<span class="w"> </span>prune<span class="w"> </span>
      WARNING!<span class="w"> </span>This<span class="w"> </span>will<span class="w"> </span>remove:
      <span class="w">  </span>-<span class="w"> </span>all<span class="w"> </span>stopped<span class="w"> </span>containers
      <span class="w">  </span>-<span class="w"> </span>all<span class="w"> </span>networks<span class="w"> </span>not<span class="w"> </span>used<span class="w"> </span>by<span class="w"> </span>at<span class="w"> </span>least<span class="w"> </span>one<span class="w"> </span>container
      <span class="w">  </span>-<span class="w"> </span>all<span class="w"> </span>dangling<span class="w"> </span>images
      <span class="w">  </span>-<span class="w"> </span>all<span class="w"> </span>dangling<span class="w"> </span>build<span class="w"> </span>cache
      
      Are<span class="w"> </span>you<span class="w"> </span>sure<span class="w"> </span>you<span class="w"> </span>want<span class="w"> </span>to<span class="w"> </span><span class="k">continue</span>?<span class="w"> </span><span class="o">[</span>y/N<span class="o">]</span><span class="w"> </span>y
      Total<span class="w"> </span>reclaimed<span class="w"> </span>space:<span class="w"> </span>0B
      </pre></div>
      <p>Al igual que antes, no se ha ahorrado mucho espacio, pero despu√©s de mucho tiempo desarrollando, el ahorro ser√° considerable</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Uso-de-recursos-del-host-por-parte-de-contenedores">Uso de recursos del host por parte de contenedores<a class="anchor-link" href="#Uso-de-recursos-del-host-por-parte-de-contenedores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 188" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por ejemplo a la hora de crear un contenedor, podemos limitar la RAM del host que puede usar mediante la opci√≥n <code>--memory</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>-d<span class="w"> </span>--memory<span class="w"> </span>1g<span class="w"> </span>ubuntu<span class="w"> </span>tail<span class="w"> </span>-f<span class="w"> </span>/dev/null',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'd84888eafe531831ef8915d2270422365adec02678122bf59580e2da782e6972',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pero con <code>docker ps</code> no tenemos acceso a los recursos que est√° consumiendo el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS          PORTS     NAMES',
          'd84888eafe53   ubuntu    "tail -f /dev/null"   35 seconds ago   Up 34 seconds             musing_ritchie',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para ello tenemos el comando <code>docker stats</code></p>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span>stats
      CONTAINER<span class="w"> </span>ID<span class="w">   </span>NAME<span class="w">             </span>CPU<span class="w"> </span>%<span class="w">     </span>MEM<span class="w"> </span>USAGE<span class="w"> </span>/<span class="w"> </span>LIMIT<span class="w">   </span>MEM<span class="w"> </span>%<span class="w">     </span>NET<span class="w"> </span>I/O<span class="w">       </span>BLOCK<span class="w"> </span>I/O<span class="w">   </span>PIDS
      d84888eafe53<span class="w">   </span>musing_ritchie<span class="w">   </span><span class="m">0</span>.00%<span class="w">     </span>540KiB<span class="w"> </span>/<span class="w"> </span>1GiB<span class="w">       </span><span class="m">0</span>.05%<span class="w">     </span><span class="m">5</span>.62kB<span class="w"> </span>/<span class="w"> </span>0B<span class="w">   </span>0B<span class="w"> </span>/<span class="w"> </span>0B<span class="w">     </span><span class="m">1</span>
      </pre></div>
      <p>Esto es muy util si queremos simular un entorno con un l√≠mite de RAM</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Deteniendo-contenedores-correctamente:-SHELL-vs-EXEC">Deteniendo contenedores correctamente: SHELL vs EXEC<a class="anchor-link" href="#Deteniendo-contenedores-correctamente:-SHELL-vs-EXEC"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 189" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como hemos explicado, cuando asignamos un proceso a un contenedor, cuando ese proceso termina, el contenedor se para, pero a veces podemos encontrarnos con problemas con esto. Vamos a crear una nueva carpeta llamada Dockerfile_loop</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>Dockerfile_loop',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Ahora vamos a crear un archivo llamado <code>loop.sh</code> dentro de <code>Dockerfile_loop</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>Dockerfile_loop',
      '<span></span><span class="o">!</span>touch<span class="w"> </span>Dockerfile_loop/loop.sh',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Y vamos a escribir lo siguiente dentro de <code>loop.sh</code></p>
      <div class="highlight"><pre><span></span><span class="ch">#!/usr/bin/env bash</span>
      <span class="nb">trap</span><span class="w"> </span><span class="s2">"exit 0"</span><span class="w"> </span>SIGTERM
      <span class="k">while</span><span class="w"> </span>true<span class="p">;</span><span class="w"> </span><span class="k">do</span><span class="w"> </span>:<span class="p">;</span><span class="w"> </span><span class="k">done</span>
      </pre></div>
      <p>Si yo ejecuto este script en el host se ejcuta hasta que introduzca <code>CTRL+C</code></p>
      <div class="highlight"><pre><span></span>./loop
      <span class="w"> </span>^C
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora vamos a crear un archivo <code>Dockerfile</code> dentro de <code>Dockerfile_loop</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>Dockerfile_loop',
      '<span></span><span class="o">!</span>touch<span class="w"> </span>Dockerfile_loop/loop.sh',
      '<span></span><span class="o">!</span>touch<span class="w"> </span>Dockerfile_loop/Dockerfile',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p><em>Dockerfile</em>:</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu:trusty</span>
      <span class="k">COPY</span><span class="w"> </span><span class="o">[</span><span class="s2">"loop.sh"</span>,<span class="w"> </span><span class="s2">"/"</span><span class="o">]</span>
      <span class="k">CMD</span><span class="w"> </span>/loop.sh
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear una imagen basada en ubuntu que copia el script dentro y lo ejecuta, y el script se ejecuta hasta que recibe la se√±al <code>SIGTERM</code> del sistema operativo. Compilamos la imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>mkdir<span class="w"> </span>Dockerfile_loop',
          '</span><span class="o">!</span>touch<span class="w"> </span>Dockerfile_loop/loop.sh',
          '</span><span class="o">!</span>touch<span class="w"> </span>Dockerfile_loop/Dockerfile',
          '</span><span class="o">!</span>docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>ubuntu:loop<span class="w"> </span>./Dockerfile_loop',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  3.072kB',
          'Step 1/3 : FROM ubuntu:trusty',
          ' ---&gt; 13b66b487594',
          'Step 2/3 : COPY ["loop.sh", "/"]',
          ' ---&gt; 89f2bbd25a88',
          'Step 3/3 : CMD /loop.sh',
          ' ---&gt; Running in ff52569c35fd',
          'Removing intermediate container ff52569c35fd',
          ' ---&gt; feb091e4efa3',
          'Successfully built feb091e4efa3',
          'Successfully tagged ubuntu:loop',
          'Use \'docker scan\' to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ejecutamos el contenedor</p>
      <div class="highlight"><pre><span></span>docker<span class="w"> </span>run<span class="w"> </span>-d<span class="w"> </span>--name<span class="w"> </span>looper<span class="w"> </span>ubuntu:loop<span class="w"> </span>bash
      </pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>-d<span class="w"> </span>--name<span class="w"> </span>looper<span class="w"> </span>ubuntu:loop',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '8a28f8cc9892213c4e0603dfdde320edf52c091b82c60510083549a391cd6645',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Comprobamos y vemos que el contenedor est√° corriendo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE         COMMAND                 CREATED         STATUS         PORTS     NAMES',
          '8a28f8cc9892   ubuntu:loop   "/bin/sh -c /loop.sh"   4 seconds ago   Up 3 seconds             looper',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Intentamos parar el contenedor con <code>docker stop looper</code>. Docker stop trata de parar el contenedor envi√°ndole la se√±al <code>SIGTERM</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%time</span>',
          '<span class="err">!</span><span class="n">docker</span> <span class="n">stop</span> <span class="n">looper</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'looper',
          'CPU times: user 89.2 ms, sys: 21.7 ms, total: 111 ms',
          'Wall time: 10.6 s',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Esto ha tardado unos 10 segundos en detenerse, cuando tendr√≠a que ser inmediato. Esto es porque <code>stop</code> ha mandado la orden <code>SIGTERM</code> para que se parara el contenedor, pero como no paraba, al rato le ha mandado un <code>SIGKILL</code> para forzar que se detenga. Vemos aver que pasa, si listamos los contenedores</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE         COMMAND                 CREATED          STATUS                       PORTS     NAMES',
          '8a28f8cc9892   ubuntu:loop   "/bin/sh -c /loop.sh"   23 seconds ago   Exited (137) 2 seconds ago             looper',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que la se√±al de <code>Exited</code> es <code>137</code>, eso quivale a SIGKILL, es decir, docker tuvo que forzar el apagado.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a borrar el contenedor y a volverlo a correr</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>looper',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'looper',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>-d<span class="w"> </span>--name<span class="w"> </span>looper<span class="w"> </span>ubuntu:loop',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '84bc37f944d270be5f84a952968db2b8cf5372c61146d29383468198ceed18fd',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora intentamos parar el contenedor con <code>docker kill looper</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%time</span>',
          '<span class="err">!</span><span class="n">docker</span> <span class="n">kill</span> <span class="n">looper</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'looper',
          'CPU times: user 9.1 ms, sys: 857 ¬µs, total: 9.96 ms',
          'Wall time: 545 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que el tiempo son unos 500 ms, es decir, docker lo ha parado en un momento envi√°ndole la orde <code>SIGKILL</code>. Porque <code>kill</code> no manda <code>SIGTERM</code> y si en un tiempo no se ha parado el contenedor manda <code>SIGKILL</code>, lo que hace es mandar <code>SIGKILL</code> desde el inicio.</p>
      <p>Si vemos los contenedores, vemos que la se√±al de salida es la misma, <code>137</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE         COMMAND                 CREATED         STATUS                       PORTS     NAMES',
          '84bc37f944d2   ubuntu:loop   "/bin/sh -c /loop.sh"   6 seconds ago   Exited (137) 2 seconds ago             looper',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Esta no es la manera correcta de apagar un contenedor, porque cuando queramos apagar el contenedor habr√≠a que hacerlo mediante la se√±al <code>SIGTERM</code>, para que este termine de procesar lo que estuviese haciendo y luego se apague</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si borramos el contenedor y lo volvemos a correr</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>looper',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'looper',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>-d<span class="w"> </span>--name<span class="w"> </span>looper<span class="w"> </span>ubuntu:loop',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'b9d9f370cc0de7569eb09d0a85cd67e8ea6babc0754a517ccba5c5057f5cc50e',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora vemos los procesos que se est√°n ejecutando dentro del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span><span class="nb">exec</span><span class="w"> </span>looper<span class="w"> </span>ps<span class="w"> </span>-ef',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'UID          PID    PPID  C STIME TTY          TIME CMD',
          'root           1       0  0 14:05 ?        00:00:00 /bin/sh -c /loop.sh',
          'root           7       1 93 14:05 ?        00:00:02 bash /loop.sh',
          'root           8       0  0 14:05 ?        00:00:00 ps -ef',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>En realidad el proceso principal, el 1, no es <code>/loop.sh</code> sino que es <code>/bin/sh -c /loop.sh</code>, es decir, es un proceso hijo del <code>shell</code>. Por lo que cuando llegaba la se√±al <code>SIGTERM</code> le llegaba a <code>shell</code>, pero este no se lo manda a sus procesos hijos, por eso no le llegaba a <code>loop.sh</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para que no pase esto hay que cambiar el <code>Dockerfile</code> a lo siguiente</p>
      <p><em>Dockerfile</em>:</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu:trusty</span>
      <span class="k">COPY</span><span class="w"> </span><span class="o">[</span><span class="s2">"loop.sh"</span>,<span class="w"> </span><span class="s2">"/"</span><span class="o">]</span>
      <span class="k">CMD</span><span class="w"> </span><span class="p">[</span><span class="s2">"/loop.sh"</span><span class="p">]</span><span class="w">    </span>#<span class="w"> </span>antes<span class="w"> </span>era<span class="w"> </span>CMD<span class="w"> </span>/loop.sh
      </pre></div>
      <p>Esta forma se llama <code>exec form</code>, mientras que la anterior se llama <code>shell form</code>, de manera que de la anterior forma corre el proceso como un hijo del <code>shell</code>, mientras que de la forma <code>exec form</code> ejecuta el proceso que le digamos. As√≠ que borramos el contenedor, volvemos a compilar y volvemos a hacer correr el contenedor con la imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>-f<span class="w"> </span>looper',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'looper',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>ubuntu:loop<span class="w"> </span>./Dockerfile_loop',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  3.072kB',
          'Step 1/3 : FROM ubuntu:trusty',
          ' ---&gt; 13b66b487594',
          'Step 2/3 : COPY ["loop.sh", "/"]',
          ' ---&gt; Using cache',
          ' ---&gt; 89f2bbd25a88',
          'Step 3/3 : CMD ["/loop.sh"]',
          ' ---&gt; Running in 6b8d92fcd57c',
          'Removing intermediate container 6b8d92fcd57c',
          ' ---&gt; 35a7bb2b1892',
          'Successfully built 35a7bb2b1892',
          'Successfully tagged ubuntu:loop',
          'Use \'docker scan\' to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>-d<span class="w"> </span>--name<span class="w"> </span>looper<span class="w"> </span>ubuntu:loop',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '850ae70c071426850b28428ac60dcbf875c6d35d9b7cc66c17cf391a23392965',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora veo los procesos dentro del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span><span class="nb">exec</span><span class="w"> </span>looper<span class="w"> </span>ps<span class="w"> </span>-ef',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'UID          PID    PPID  C STIME TTY          TIME CMD',
          'root           1       0 88 14:14 ?        00:00:02 bash /loop.sh',
          'root           7       0  0 14:14 ?        00:00:00 ps -ef',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora s√≠ veo que el proceso principal, el 1, es <code>/loop.sh</code></p>
      <p>Si ahora pruebo a parar el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%time</span>',
          '<span class="err">!</span><span class="n">docker</span> <span class="n">stop</span> <span class="n">looper</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'looper',
          'CPU times: user 989 ¬µs, sys: 7.55 ms, total: 8.54 ms',
          'Wall time: 529 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que tarda ms. V√©mos el c√≥digo con el que par√≥</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps<span class="w"> </span>-a',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE         COMMAND      CREATED              STATUS                      PORTS     NAMES',
          '850ae70c0714   ubuntu:loop   "/loop.sh"   About a minute ago   Exited (0) 33 seconds ago             looper',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Contenedores-ejecutables">Contenedores ejecutables<a class="anchor-link" href="#Contenedores-ejecutables"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 190" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos un binario que corra como un ejecutable, en el <code>dockerfile</code> hay que especificar el comando en <code>ENTRYPOINT</code> y los par√°metros del comando en <code>CMD</code>, vamos a verlo</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear una nueva carpeta donde guardaremos el <code>Dockerfile</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>dockerfile_ping',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Ahora creamos un Dockerfile dentro</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>dockerfile_ping',
      '<span></span><span class="o">!</span>touch<span class="w"> </span>dockerfile_ping/Dockerfile',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Escribimos dentro del Dockerfile lo siguiente</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu:trusty</span>
      <span class="k">ENTRYPOINT</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"/bin/ping"</span><span class="p">,</span><span class="w"> </span><span class="s2">"-c"</span><span class="p">,</span><span class="w"> </span><span class="s2">"3"</span><span class="w"> </span><span class="p">]</span>
      <span class="k">CMD</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"localhost"</span><span class="w"> </span><span class="p">]</span>
      </pre></div>
      <p>Compilamos la imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>mkdir<span class="w"> </span>dockerfile_ping',
          '</span><span class="o">!</span>touch<span class="w"> </span>dockerfile_ping/Dockerfile',
          '</span><span class="o">!</span>docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>ubuntu:ping<span class="w"> </span>./dockerfile_ping',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  3.072kB',
          'Step 1/3 : FROM ubuntu:trusty',
          ' ---&gt; 13b66b487594',
          'Step 2/3 : ENTRYPOINT [ "/bin/ping", "-c", "3" ]',
          ' ---&gt; Using cache',
          ' ---&gt; 1cebcfb542b1',
          'Step 3/3 : CMD [ "localhost" ]',
          ' ---&gt; Using cache',
          ' ---&gt; 04ddc3de52a2',
          'Successfully built 04ddc3de52a2',
          'Successfully tagged ubuntu:ping',
          'Use \'docker scan\' to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora corremos la imagen sin pasarle un par√°metro, el contenedor se har√° un ping a s√≠ mismo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>--name<span class="w"> </span>ping_localhost<span class="w"> </span>ubuntu:ping',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'PING localhost (127.0.0.1) 56(84) bytes of data.',
          '64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.041 ms',
          '64 bytes from localhost (127.0.0.1): icmp_seq=2 ttl=64 time=0.058 ms',
          '64 bytes from localhost (127.0.0.1): icmp_seq=3 ttl=64 time=0.054 ms',
          '--- localhost ping statistics ---',
          '3 packets transmitted, 3 received, 0% packet loss, time 2027ms',
          'rtt min/avg/max/mdev = 0.041/0.051/0.058/0.007 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pero si ahora le pasamos un par√°metro, har√° ping a la direcci√≥n que le digamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>--name<span class="w"> </span>ping_google<span class="w"> </span>ubuntu:ping<span class="w"> </span>google.com',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'PING google.com (216.58.209.78) 56(84) bytes of data.',
          '64 bytes from waw02s06-in-f14.1e100.net (216.58.209.78): icmp_seq=1 ttl=111 time=3.93 ms',
          '64 bytes from waw02s06-in-f14.1e100.net (216.58.209.78): icmp_seq=2 ttl=111 time=6.80 ms',
          '64 bytes from waw02s06-in-f14.1e100.net (216.58.209.78): icmp_seq=3 ttl=111 time=6.92 ms',
          '--- google.com ping statistics ---',
          '3 packets transmitted, 3 received, 0% packet loss, time 2002ms',
          'rtt min/avg/max/mdev = 3.930/5.886/6.920/1.383 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Borramos los contenedores</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>ping_localhost<span class="w"> </span>ping_google',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'ping_localhost',
          'ping_google',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="El-contexto-de-build">El contexto de <code>build</code><a class="anchor-link" href="#El-contexto-de-build"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 191" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear una carpeta llamada <code>dockerfile_contexto</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>dokerfile_contexto',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Ahora creamos en ella dos archivos, un <code>test.txt</code> y el <code>Dockerfile</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>dokerfile_contexto',
      '<span></span><span class="o">!</span>touch<span class="w"> </span>dokerfile_contexto/Dockerfile<span class="w"> </span>dokerfile_contexto/text.txt',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Modificamos el Dockerfile y ponemos lo siguiente</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu:trusty</span>
      <span class="k">COPY</span><span class="w"> </span><span class="o">[</span><span class="s2">"."</span>,<span class="w"> </span><span class="s2">"/"</span><span class="o">]</span>
      </pre></div>
      <p>Esto lo que va a hacer es que va a copiar dentro de la imagen, todo lo que tenga en la carpeta en la que se encuentra el <code>Dockerfile</code>. Compilamos la imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>mkdir<span class="w"> </span>dokerfile_contexto',
          '</span><span class="o">!</span>touch<span class="w"> </span>dokerfile_contexto/Dockerfile<span class="w"> </span>dokerfile_contexto/text.txt',
          '</span><span class="o">!</span>docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>ubuntu:contexto<span class="w"> </span>./dokerfile_contexto',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon   2.56kB',
          'Step 1/2 : FROM ubuntu:trusty',
          ' ---&gt; 13b66b487594',
          'Step 2/2 : COPY [".", "/"]',
          ' ---&gt; 3ab79fdce389',
          'Successfully built 3ab79fdce389',
          'Successfully tagged ubuntu:contexto',
          'Use \'docker scan\' to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver qu√© hay dentro del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>--name<span class="w"> </span>ls<span class="w"> </span>ubuntu:contexto<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Dockerfile',
          'bin',
          'boot',
          'dev',
          'etc',
          'home',
          'lib',
          'lib64',
          'media',
          'mnt',
          'opt',
          'proc',
          'root',
          'run',
          'sbin',
          'srv',
          'sys',
          'text.txt',
          'tmp',
          'usr',
          'var',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos est√° el archivo <code>text.txt</code>. Pero al puede que dentro de la carpeta que est√° en el mismo directorio que el <code>Dockerfile</code> haya archivos o carpetas que no queremos que se copien en la imagen, por la raz√≥n que sea, as√≠ que al igual que en git tenemos el <code>.gitignore</code>, en docker tenemos el <code>.dockerignore</code>, donde metemos los archivos o carpetas que no queremos que a la hora de compilar se tengan en cuenta</p>
      <p>As√≠ que creamos un archivo <code>.dockerignore</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>touch<span class="w"> </span>dokerfile_contexto/.dockerignore',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Y dentro a√±adimos el <code>text.txt</code>, y de paso el <code>Dockerfile</code> que no lo necesitamos dentro de la imagen</p>
      <p><em>.dockerignore</em>:</p>
      <pre><code>Dockerfile
      text.txt</code></pre>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Borramos el contenedor que hab√≠amos creado, volvemos a compilar y vemos qu√© hay dentro del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>touch<span class="w"> </span>dokerfile_contexto/.dockerignore',
          '</span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'ls',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>ubuntu:contexto<span class="w"> </span>./dokerfile_contexto',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Sending build context to Docker daemon  3.072kB',
          'Step 1/2 : FROM ubuntu:trusty',
          ' ---&gt; 13b66b487594',
          'Step 2/2 : COPY [".", "/"]',
          ' ---&gt; 7a6689546da4',
          'Successfully built 7a6689546da4',
          'Successfully tagged ubuntu:contexto',
          'Use \'docker scan\' to run Snyk tests against images to find vulnerabilities and learn how to fix them',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>--name<span class="w"> </span>ls<span class="w"> </span>ubuntu:contexto<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'bin',
          'boot',
          'dev',
          'etc',
          'home',
          'lib',
          'lib64',
          'media',
          'mnt',
          'opt',
          'proc',
          'root',
          'run',
          'sbin',
          'srv',
          'sys',
          'tmp',
          'usr',
          'var',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que ahora no est√°n ni <code>Dockerfile</code>, ni <code>text.txt</code>. Borramos el contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>rm<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'ls',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Multi-stage-build">Multi-stage build<a class="anchor-link" href="#Multi-stage-build"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 192" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al final de un desarrollo no queremos que todo el c√≥digo est√© en la imagen que se va a mandar a producci√≥n.</p>
      <p>Podemos dividir el <code>dockerfile</code> en dos, por ejemplo, el <code>developer.Dockerfile</code> y el <code>production.Dockerfile</code>, donde en desarrollo habr√° m√°s cosas que en el de producci√≥n. A la hora de compilarlos, mediante la opci√≥n <code>-f</code> elegimos el <code>dockerfile</code> que queremos usar</p>
      <div class="highlight"><pre><span></span>docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>&lt;tag&gt;<span class="w"> </span>-f<span class="w"> </span>developer.Dockerfile
      docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>&lt;tag&gt;<span class="w"> </span>-f<span class="w"> </span>production.Dockerfile
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pero para no tener que crear dos archivos <code>Dockerfile</code>, docker cre√≥ el <code>multi stage buils</code>. Con un solo <code>Dockerfile</code> vamos a solucionar el problema</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos la carpeta donde vamos a guardar el <code>Dockerfile</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>docker_multi_stage',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Y dentro creamos el archivo <code>Dockerfile</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>docker_multi_stage',
      '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>docker_multi_stage<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>touch<span class="w"> </span>Dockerfile',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Editamos el archivo metiendo lo siguiente</p>
      <div class="highlight"><pre><span></span><span class="c"># Etapa 1: Generar el ejecutable con Python basado en Alpine</span>
      <span class="k">FROM</span><span class="w"> </span><span class="s">python:3.9-alpine</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s">build-stage</span>
      <span class="k">WORKDIR</span><span class="w"> </span><span class="s">/app</span>
      <span class="c"># Instalar dependencias para PyInstaller</span>
      <span class="k">RUN</span><span class="w"> </span>apk<span class="w"> </span>add<span class="w"> </span>--no-cache<span class="w"> </span>gcc<span class="w"> </span>musl-dev<span class="w"> </span>libc-dev
      <span class="c"># Generar hello.py</span>
      <span class="k">RUN</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s1">'print("Hello from Alpine!")'</span><span class="w"> </span>&gt;<span class="w"> </span>hello.py
      <span class="c"># Instalar PyInstaller</span>
      <span class="k">RUN</span><span class="w"> </span>pip<span class="w"> </span>install<span class="w"> </span>pyinstaller
      <span class="c"># Usar PyInstaller para crear un ejecutable independiente</span>
      <span class="k">RUN</span><span class="w"> </span>pyinstaller<span class="w"> </span>--onefile<span class="w"> </span>hello.py
      
      <span class="c"># Etapa 2: Ejecutar el ejecutable en una imagen de Alpine</span>
      <span class="k">FROM</span><span class="w"> </span><span class="s">alpine:latest</span>
      <span class="k">WORKDIR</span><span class="w"> </span><span class="s">/app</span>
      <span class="c"># Copiar el ejecutable desde la etapa de build</span>
      <span class="k">COPY</span><span class="w"> </span>--from<span class="o">=</span>build-stage<span class="w"> </span>/app/dist/hello<span class="w"> </span>.
      <span class="c"># Comando por defecto para ejecutar el ejecutable</span>
      <span class="k">CMD</span><span class="w"> </span><span class="p">[</span><span class="s2">"./hello"</span><span class="p">]</span>
      </pre></div>
      <p>Como se puede ver el <code>Dockerfile</code> est√° dividido en dos, por un lado se trabaja sobre la imagen <code>python:3.9-alpine</code> que se llama como <code>build-stage</code>. Y por otro lado trabajamos sobre la imagen <code>alpine:latest</code>, que es una imagen de linux muy ligera y se utiliza mucho en producci√≥n</p>
      <p>Lo compilamos</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="o">!</span>docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>maximofn/multistagebuild:latest<span class="w"> </span>./docker_multi_stage
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>[+] Building 0.0s (0/2)                                          docker:default
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>[+] Building 0.2s (4/6)                                          docker:default
      <span class="ansi-blue-fg"> =&gt; [internal] load build definition from Dockerfile                       0.0s
      </span><span class="ansi-blue-fg"> =&gt; =&gt; transferring dockerfile: 722B                                       0.0s
      </span><span class="ansi-blue-fg"> =&gt; [internal] load .dockerignore                                          0.0s
      </span><span class="ansi-blue-fg"> =&gt; =&gt; transferring context: 2B                                            0.0s
      </span> =&gt; [internal] load metadata for docker.io/library/alpine:latest           0.1s
       =&gt; [internal] load metadata for docker.io/library/python:3.9-alpine       0.1s
      ...
      <span class="ansi-blue-fg"> =&gt; CACHED [stage-1 3/3] COPY --from=build-stage /app/dist/hello .         0.0s
      </span><span class="ansi-blue-fg"> =&gt; exporting to image                                                     0.0s
      </span><span class="ansi-blue-fg"> =&gt; =&gt; exporting layers                                                    0.0s
      </span><span class="ansi-blue-fg"> =&gt; =&gt; writing image sha256:7fb090d1495d00e892118b6bc3c03400b63a435fd4703  0.0s
      </span><span class="ansi-blue-fg"> =&gt; =&gt; naming to docker.io/maximofn/multistagebuild:latest                 0.0s
      </span></pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora hacemos vemos las im√°genes que tenemos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>mkdir<span class="w"> </span>docker_multi_stage',
          '</span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>docker_multi_stage<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>touch<span class="w"> </span>Dockerfile',
          '</span><span class="o">!</span>docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>maximofn/multistagebuild:latest<span class="w"> </span>./docker_multi_stage',
          '</span><span class="o">!</span>docker<span class="w"> </span>image<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[+] Building 0.0s (0/2)                                          docker:default',
          'REPOSITORY                 TAG       IMAGE ID       CREATED         SIZE',
          'maximofn/multistagebuild   latest    7fb090d1495d   8 minutes ago   13.6MB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver la imagen que acabamos de crear y que solo pesa 13.6 MB. Vamos a bajarnos la imagen de Python para ver cuanto pesa</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>pull<span class="w"> </span>python:3.9-alpine',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '3.9-alpine: Pulling from library/python',
          'a8db6415: Already exists ',
          'd5e70e42: Already exists ',
          '3fe96417: Already exists ',
          'aa4dddbb: Already exists ',
          '518be9f7: Already exists Digest: sha256:6e508b43604ff9a81907ec17405c9ad5c13664e45a5affa2206af128818c7486',
          'Status: Downloaded newer image for python:3.9-alpine',
          'docker.io/library/python:3.9-alpine',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>image<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'REPOSITORY                 TAG          IMAGE ID       CREATED         SIZE',
          'maximofn/multistagebuild   latest       7fb090d1495d   9 minutes ago   13.6MB',
          'python                     3.9-alpine   6946662f018b   9 days ago      47.8MB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que mientras nuestra imagen pesa solo 13.6 MB, la de python con la que ha construido la aplicaci√≥n pesa 47.8 MB. Por lo que podemos sacar dos conclusiones, con la primera imagen, la de python, ha construido la aplicaci√≥n, ha generado el ejecutable y ese ejecutable es el que usamos en la segunda imagen, la de alpine. Adem√°s podemos ver que aunque la primera imagen que usa es la de python no se descarga en nuestro sistema, ya que la hemos tenido que descargar nosotros</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pues ya solo queda probarlo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>--rm<span class="w"> </span>--name<span class="w"> </span>multi_stage_build<span class="w"> </span>maximofn/multistagebuild',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hello from Alpine!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Funciona!</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Multi-arch-builds">Multi arch builds<a class="anchor-link" href="#Multi-arch-builds"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 193" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Supongamos que queremos hacer una imagen que queremos que se pueda ejecutar en un ordenador y en una raspberry, el ordenador probablemente tenga un micro con arquitectura AMD64, mientras que la raspberry tiene un micro con arquitectura ARM. Por lo que no podemos crear la misma imagen para los dos, es decir, cuando creamos una imagen la creamos con un <code>Dockerfile</code> que suele empezar as√≠</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">...</span>
      </pre></div>
      <p>Por lo que el <code>Dockerfile</code> de la imagen del ordenador podr√≠a empezar as√≠</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">ubuntu:latest</span>
      </pre></div>
      <p>Mientras que el de la raspberry podr√≠a empezar as√≠</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">arm64v8/ubuntu:latest</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Tendr√≠amos que crear dos archivos <code>Dockerfile</code> compilarlos y en el ordenador usar una imagen y en la raspebrry usar otra</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para evitar tener que ver la arquitectura del ordenador y ver qu√© imagen tenemos que usar Docker creo los <code>manifest</code>, que como su nombre indica es un manifiesto que indica en funci√≥n de qu√© arquitectura de micro tengamos usa una imagen u otra</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As√≠ que vamos a ver c√≥mo hacer esto</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>En primer lugar creamos una carpeta donde vamos a crear nuestros archivos <code>Dockerfile</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>docker_multi_arch',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Ahora creamos los dos dockerfiles</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>docker_multi_arch',
      '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>docker_multi_arch<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>touch<span class="w"> </span>Dockerfile_arm64<span class="w"> </span>Dockerfile_amd64',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Escribimos del <code>Dockerfile</code> para AMD64</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>docker_multi_arch',
      '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>docker_multi_arch<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>touch<span class="w"> </span>Dockerfile_arm64<span class="w"> </span>Dockerfile_amd64',
      '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>docker_multi_arch<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"FROM ubuntu:20.04"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>Dockerfile_amd64<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"CMD echo \'Hello from amd64\'"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>Dockerfile_amd64',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>docker_multi_arch',
      '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>docker_multi_arch<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>touch<span class="w"> </span>Dockerfile_arm64<span class="w"> </span>Dockerfile_amd64',
      '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>docker_multi_arch<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"FROM ubuntu:20.04"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>Dockerfile_amd64<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"CMD echo \'Hello from amd64\'"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>Dockerfile_amd64',
      '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>docker_multi_arch<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"FROM arm64v8/ubuntu:latest"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>Dockerfile_arm<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"CMD echo \'Hello from ARM\'"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>Dockerfile_arm',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Ahora compilamos las dos im√°genes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>mkdir<span class="w"> </span>docker_multi_arch',
          '</span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>docker_multi_arch<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>touch<span class="w"> </span>Dockerfile_arm64<span class="w"> </span>Dockerfile_amd64',
          '</span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>docker_multi_arch<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"FROM ubuntu:20.04"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>Dockerfile_amd64<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"CMD echo \'Hello from amd64\'"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>Dockerfile_amd64',
          '</span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>docker_multi_arch<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"FROM arm64v8/ubuntu:latest"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>Dockerfile_arm<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">"CMD echo \'Hello from ARM\'"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>Dockerfile_arm',
          '</span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>docker_multi_arch<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>maximofn/multiarch:arm<span class="w"> </span>-f<span class="w"> </span>Dockerfile_arm<span class="w"> </span>.',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[+] Building 0.0s (0/1)                                          docker:default',
          '[+] Building 0.2s (2/3)                                          docker:default',
          '<span class="ansi-blue-fg"> =&gt; [internal] load build definition from Dockerfile_amd64                 0.1s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; transferring dockerfile: 89B                                        0.0s',
          '</span><span class="ansi-blue-fg"> =&gt; [internal] load .dockerignore                                          0.1s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; transferring context: 2B                                            0.0s',
          '</span> =&gt; [internal] load metadata for docker.io/library/ubuntu:20.04            0.1s',
          '[+] Building 0.3s (2/3)                                          docker:default',
          '<span class="ansi-blue-fg"> =&gt; [internal] load build definition from Dockerfile_amd64                 0.1s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; transferring dockerfile: 89B                                        0.0s',
          '</span><span class="ansi-blue-fg"> =&gt; [internal] load .dockerignore                                          0.1s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; transferring context: 2B                                            0.0s',
          '</span> =&gt; [internal] load metadata for docker.io/library/ubuntu:20.04            0.2s',
          '[+] Building 0.5s (2/3)                                          docker:default',
          '<span class="ansi-blue-fg"> =&gt; [internal] load build definition from Dockerfile_amd64                 0.1s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; transferring dockerfile: 89B                                        0.0s',
          '</span><span class="ansi-blue-fg"> =&gt; [internal] load .dockerignore                                          0.1s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; transferring context: 2B                                            0.0s',
          '</span> =&gt; [internal] load metadata for docker.io/library/ubuntu:20.04            0.4s',
          '[+] Building 0.6s (2/3)                                          docker:default',
          '<span class="ansi-blue-fg"> =&gt; [internal] load build definition from Dockerfile_amd64                 0.1s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; transferring dockerfile: 89B                                        0.0s',
          '</span><span class="ansi-blue-fg"> =&gt; [internal] load .dockerignore                                          0.1s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; transferring context: 2B                                            0.0s',
          '</span> =&gt; [internal] load metadata for docker.io/library/ubuntu:20.04            0.5s',
          '...',
          '<span class="ansi-blue-fg"> =&gt; =&gt; transferring context: 2B                                            0.0s',
          '</span><span class="ansi-blue-fg"> =&gt; [internal] load build definition from Dockerfile_arm                   0.0s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; transferring dockerfile: 94B                                        0.0s',
          '</span><span class="ansi-blue-fg"> =&gt; [internal] load metadata for docker.io/arm64v8/ubuntu:latest           1.8s',
          '</span><span class="ansi-blue-fg"> =&gt; [auth] arm64v8/ubuntu:pull token for registry-1.docker.io              0.0s',
          '</span><span class="ansi-blue-fg"> =&gt; CACHED [1/1] FROM docker.io/arm64v8/ubuntu:latest@sha256:94d12db896d0  0.0s',
          '</span><span class="ansi-blue-fg"> =&gt; exporting to image                                                     0.0s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; exporting layers                                                    0.0s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; writing image sha256:a9732c1988756dc8e836fd96e5c9512e349c97ea5af46  0.0s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; naming to docker.io/maximofn/multiarch:arm                          0.0s',
          '</span>',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver que tenemos las ods im√°genes compiladas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>image<span class="w"> </span>ls',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'REPOSITORY           TAG       IMAGE ID       CREATED       SIZE',
          'maximofn/multiarch   arm       a9732c198875   4 weeks ago   69.2MB',
          'maximofn/multiarch   amd64     5b612c83025f   6 weeks ago   72.8MB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que hemos compilado las dos im√°genes. Para poder crear un manifest, primero tenemos que subir las im√°genes a docker hub, as√≠ que las subimos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>push<span class="w"> </span>maximofn/multiarch:amd64',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'The push refers to repository [docker.io/maximofn/multiarch]',
          '82bdeb5f: Mounted from library/ubuntu amd64: digest: sha256:30e820f2a11a24ad4d8fb624ae485f7c1bcc299e8cfc72c88adce1acd0447e1d size: 529',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="o">!</span>docker<span class="w"> </span>push<span class="w"> </span>maximofn/multiarch:arm
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>The push refers to repository [docker.io/maximofn/multiarch]
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>
      eda53374: Layer already exists arm: digest: sha256:6ec5a0752d49d3805061314147761bf25b5ff7430ce143adf34b70d4eda15fb8 size: 529
      </pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si me voy a mi docker hub puedo ver que mi imagen <code>maximofn/multiarch</code> tiene los tags <code>amd64</code> y <code>arm</code></p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="docker_multi_arch_tags" src="https://maximofn.com/wp-content/uploads/2023/09/docker_multi_arch_tags.png" width="1272" height="526"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora vamos a crear el <code>manifest</code> basado en estas dos im√°genes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>push<span class="w"> </span>maximofn/multiarch:arm',
          '</span><span class="o">!</span>docker<span class="w"> </span>manifest<span class="w"> </span>create<span class="w"> </span>maximofn/multiarch:latest<span class="w"> </span>maximofn/multiarch:amd64<span class="w"> </span>maximofn/multiarch:arm',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'The push refers to repository [docker.io/maximofn/multiarch]',
          'Created manifest list docker.io/maximofn/multiarch:latest',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Una vez creado, tenemos que indicar las arquitecturas de las CPUs a las que corresponde cada uno</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>docker<span class="w"> </span>manifest<span class="w"> </span>annotate<span class="w"> </span>maximofn/multiarch:latest<span class="w"> </span>maximofn/multiarch:amd64<span class="w"> </span>--os<span class="w"> </span>linux<span class="w"> </span>--arch<span class="w"> </span>amd64',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>manifest<span class="w"> </span>annotate<span class="w"> </span>maximofn/multiarch:latest<span class="w"> </span>maximofn/multiarch:amd64<span class="w"> </span>--os<span class="w"> </span>linux<span class="w"> </span>--arch<span class="w"> </span>amd64',
          '</span><span class="o">!</span>docker<span class="w"> </span>manifest<span class="w"> </span>annotate<span class="w"> </span>maximofn/multiarch:latest<span class="w"> </span>maximofn/multiarch:arm64<span class="w"> </span>--os<span class="w"> </span>linux<span class="w"> </span>--arch<span class="w"> </span>arm64',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'manifest for image maximofn/multiarch:arm64 does not exist in maximofn/multiarch:latest',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Una vez creado y anotado podemos subir el <code>manifest</code> a docker hub</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>manifest<span class="w"> </span>push<span class="w"> </span>maximofn/multiarch:latest',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'sha256:1ea28e9a04867fe0e0d8b0efa455ce8e4e29e7d9fd4531412b75dbd0325e9304',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora vuelvo a mirar los tags que tiene mi imagen <code>maximofn/multiarch</code> veo tambi√©n la de <code>latest</code></p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="docker_multi_arch_tags_manifest" src="https://maximofn.com/wp-content/uploads/2023/09/docker_multi_arch_tags_manifest.png" width="1272" height="568"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ahora, tanto si quiero usar mi imagen desde una m√°quina con CPU AMD64 o CPU ARM con hacer <code>FROM maximofn/multiarch:latest</code>, docker comprobar√° la arquitectura de la CPU y bajar√° el tag <code>amd64</code> o el tag <code>arm</code>. Vamos a verlo, si desde mi ordenador ejecuto la imagen obtengo</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>maximofn/multiarch:latest
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>Unable to find image 'maximofn/multiarch:latest' locally
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>latest: Pulling from maximofn/multiarch
      Digest: sha256:7cef0de10f7fa2b3b0dca0fbf398d1f48af17a0bbc5b9beca701d7c427c9fd84
      Status: Downloaded newer image for maximofn/multiarch:latest
      Hello from amd64
      </pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como no la tiene se la baja y luego aparece el texto <code>Hello from amd64</code>, ya que la CPU de mi ordenador tiene una arquitectura AMD64</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si ahora me conecto por ssh a una raspberry pi y pruebo lo mismo obtengo</p>
      <div class="highlight"><pre><span></span>raspiberry@raspberrypi:~<span class="w"> </span>$<span class="w"> </span>docker<span class="w"> </span>run<span class="w"> </span>maximofn/multiarch:latest
      <span class="w">    </span>Unable<span class="w"> </span>to<span class="w"> </span>find<span class="w"> </span>image<span class="w"> </span><span class="s1">'maximofn/multiarch:latest'</span><span class="w"> </span>locally
      <span class="w">    </span>latest:<span class="w"> </span>Pulling<span class="w"> </span>from<span class="w"> </span>maximofn/multiarch
      <span class="w">    </span>Digest:<span class="w"> </span>sha256:1ea28e9a04867fe0e0d8b0efa455ce8e4e29e7d9fd4531412b75dbd0325e9304
      <span class="w">    </span>Status:<span class="w"> </span>Downloaded<span class="w"> </span>newer<span class="w"> </span>image<span class="w"> </span><span class="k">for</span><span class="w"> </span>maximofn/multiarch:latest
      <span class="w">    </span>Hello<span class="w"> </span>from<span class="w"> </span>ARM
      </pre></div>
      <p>Aparece <code>Hello from ARM</code> ya que la raspberry tiene un micro con arquitectura ARM</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver cada m√°quina se ha bajado la imagen que necesitaba</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Escritura-correcta-de-Dockerfiles-avanzado">Escritura correcta de Dockerfiles avanzado<a class="anchor-link" href="#Escritura-correcta-de-Dockerfiles-avanzado"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 194" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ya vimos la manera de escribir correctamente dockerfiles, pero hay una cosa m√°s que podemos hacer ahora que conocemos el multi-stage build y es crear un contenedor para crear el ejecutable y otro m√°s peque√±o para ejecutarlo</p>
      <p>Llegamos a la conclusi√≥n de que un buen dockerfile pod√≠a ser este</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">python:3.9.18-alpine</span>
      <span class="k">WORKDIR</span><span class="w"> </span><span class="s">/sourceCode/sourceApp</span>
      <span class="k">COPY</span><span class="w"> </span>./sourceCode/sourceApp<span class="w"> </span>.
      <span class="k">CMD</span><span class="w"> </span><span class="p">[</span><span class="s2">"python3"</span><span class="p">,</span><span class="w"> </span><span class="s2">"app.py"</span><span class="p">]</span>
      </pre></div>
      <p>Vamos a crear ahora un ejecutable en un contenedor builder y en otro m√°s peque√±o lo ejecutamos</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">python:3.9.18-alpine</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s">builder</span>
      <span class="k">WORKDIR</span><span class="w"> </span><span class="s">/sourceCode/sourceApp</span>
      <span class="k">RUN</span><span class="w"> </span>apk<span class="w"> </span>add<span class="w"> </span>--no-cache<span class="w"> </span>gcc<span class="w"> </span>musl-dev<span class="w"> </span>libc-dev<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>pip<span class="w"> </span>install<span class="w"> </span>pyinstaller
      <span class="k">COPY</span><span class="w"> </span>./sourceCode/sourceApp<span class="w"> </span>.
      <span class="k">RUN</span><span class="w"> </span>pyinstaller<span class="w"> </span>--onefile<span class="w"> </span>app.py
      
      <span class="k">FROM</span><span class="w"> </span><span class="s">alpine:3.18.3</span>
      <span class="k">WORKDIR</span><span class="w"> </span><span class="s">/sourceCode/sourceApp</span>
      <span class="k">COPY</span><span class="w"> </span>--from<span class="o">=</span>builder<span class="w"> </span>/sourceCode/sourceApp/dist/app<span class="w"> </span>.
      <span class="k">CMD</span><span class="w"> </span><span class="p">[</span><span class="s2">"./app"</span><span class="p">]</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Creamos el c√≥digo de python en la ruta necesaria</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>maximofn/multiarch:latest',
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>multistagebuild/sourceCode',
      '      <span class="o">!</span>mkdir<span class="w"> </span>multistagebuild/sourceCode/sourceApp',
      '      <span class="o">!</span>touch<span class="w"> </span>multistagebuild/sourceCode/sourceApp/app.py',
      '      <span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s1">\'print("Hello from Alpine!")\'</span><span class="w"> </span>&gt;<span class="w"> </span>multistagebuild/sourceCode/sourceApp/app.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>









      
      <section class="section-block-markdown-cell">
      <p>Ahora compilamos la imagen</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>maximofn/multiarch:latest',
          '</span><span class="o">!</span>mkdir<span class="w"> </span>multistagebuild/sourceCode',
          '<span class="o">!</span>mkdir<span class="w"> </span>multistagebuild/sourceCode/sourceApp',
          '<span class="o">!</span>touch<span class="w"> </span>multistagebuild/sourceCode/sourceApp/app.py',
          '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s1">\'print("Hello from Alpine!")\'</span><span class="w"> </span>&gt;<span class="w"> </span>multistagebuild/sourceCode/sourceApp/app.py',
          '</span><span class="o">!</span>docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>maximofn/multistagebuild:alpine-3.18.3<span class="w"> </span>./multistagebuild',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Unable to find image \'maximofn/multiarch:latest\' locally',
          '[+] Building 0.0s (0/0)                                          docker:default',
          '[+] Building 0.0s (0/1)                                          docker:default',
          '[+] Building 0.2s (3/5)                                          docker:default',
          '<span class="ansi-blue-fg"> =&gt; [internal] load build definition from Dockerfile                       0.1s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; transferring dockerfile: 357B                                       0.0s',
          '</span><span class="ansi-blue-fg"> =&gt; [internal] load .dockerignore                                          0.1s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; transferring context: 2B                                            0.0s',
          '</span> =&gt; [internal] load metadata for docker.io/library/alpine:3.18.3           0.1s',
          ' =&gt; [internal] load metadata for docker.io/library/python:3.9.18-alpine    0.1s',
          '<span class="ansi-blue-fg"> =&gt; [auth] library/alpine:pull token for registry-1.docker.io              0.0s',
          '</span>[+] Building 0.3s (3/5)                                          docker:default',
          '<span class="ansi-blue-fg"> =&gt; [internal] load build definition from Dockerfile                       0.1s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; transferring dockerfile: 357B                                       0.0s',
          '</span><span class="ansi-blue-fg"> =&gt; [internal] load .dockerignore                                          0.1s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; transferring context: 2B                                            0.0s',
          '</span> =&gt; [internal] load metadata for docker.io/library/alpine:3.18.3           0.2s',
          ' =&gt; [internal] load metadata for docker.io/library/python:3.9.18-alpine    0.2s',
          '<span class="ansi-blue-fg"> =&gt; [auth] library/alpine:pull token for registry-1.docker.io              0.0s',
          '</span>[+] Building 0.5s (4/6)                                          docker:default',
          '<span class="ansi-blue-fg"> =&gt; [internal] load build definition from Dockerfile                       0.1s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; transferring dockerfile: 357B                                       0.0s',
          '</span><span class="ansi-blue-fg"> =&gt; [internal] load .dockerignore                                          0.1s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; transferring context: 2B                                            0.0s',
          '</span> =&gt; [internal] load metadata for docker.io/library/alpine:3.18.3           0.4s',
          '...',
          '<span class="ansi-blue-fg"> =&gt; exporting to image                                                     0.1s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; exporting layers                                                    0.1s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; writing image sha256:8a22819145c6fee17e138e818610ccf46d7e13c786825  0.0s',
          '</span><span class="ansi-blue-fg"> =&gt; =&gt; naming to docker.io/maximofn/multistagebuild:alpine-3.18.3          0.0s',
          '</span>',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>La ejecutamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>--rm<span class="w"> </span>--name<span class="w"> </span>multi_stage_build<span class="w"> </span>maximofn/multistagebuild:alpine-3.18.3',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hello from Alpine!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>La imagen <code>maximofn/multistagebuild:alpine-3.18.3</code> solo pesa 13.6 MB</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Diferencia-entre-RUN,-CMD-y-ENTRYPOINT">Diferencia entre RUN, CMD y ENTRYPOINT<a class="anchor-link" href="#Diferencia-entre-RUN,-CMD-y-ENTRYPOINT"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 195" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="RUN">RUN<a class="anchor-link" href="#RUN"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 196" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El comando <code>RUN</code> es el m√°s sencillo, simplemente ejecuta un comando en el momento de la compilaci√≥n de la imagen. Por ejemplo, si queremos instalar un paquete en la imagen, lo hacemos mediante <code>RUN</code>.</p>
      <p>Por tanto, importante, <code>RUN</code> se ejecuta en el momento de la compilaci√≥n de la imagen, no cuando se ejecuta el contenedor</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="CMD">CMD<a class="anchor-link" href="#CMD"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 197" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El comando <code>CMD</code> es el comando que se ejecuta cuando se ejecuta el contenedor. Por ejemplo, si queremos que el contenedor ejecute un comando cuando se ejecute, lo hacemos mediante <code>CMD</code>. Por ejemplo, si tenemos una aplicaci√≥n de python en un contenedor, con <code>CMD</code> podemos indicarle que cuando se ejecute el contenedor ejecute la aplicaci√≥n de python.</p>
      <p>De esta manera, cuando se levante el contenedor, se ejecutar√° la aplicaci√≥n de python. Es decir si hacemos <code>docker run &lt;image&gt;</code> se ejecutar√° la aplicaci√≥n de python. Pero <code>CMD</code> nos permite sobreescribir el comando que se ejecuta cuando se levanta el contenedor, por ejemplo, si hacemos <code>docker run &lt;image&gt; bash</code> se ejecutar√° <code>bash</code> en vez de la aplicaci√≥n de python</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="ENTRYPOINT">ENTRYPOINT<a class="anchor-link" href="#ENTRYPOINT"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 198" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El comando <code>ENTRYPOINT</code> es similar al comando <code>CMD</code>, pero con una diferencia, y es que <code>ENTRYPOINT</code> no est√° pensado para sobreescribirse. Es decir, si tenemos una aplicaci√≥n de python en un contenedor, con <code>ENTRYPOINT</code> podemos indicarle que cuando se ejecute el contenedor ejecute la aplicaci√≥n de python. Pero si hacemos <code>docker run &lt;image&gt; bash</code> se ejecutar√° la aplicaci√≥n de python, no <code>bash</code>.</p>
      <p>Un uso muy com√∫n de <code>ENTRYPOINT</code> es cuando queremos que el contenedor sea un ejecutable, por ejemplo, si queremos que el contenedor sea un ejecutable de una versi√≥n de python que no tenemos en nuestro host, porque por ejemplo queremos probar la nueva versi√≥n de python que ha salido podemos hacer</p>
      <div class="highlight"><pre><span></span><span class="k">FROM</span><span class="w"> </span><span class="s">python:3.9.18-alpine</span>
      <span class="k">ENTRYPOINT</span><span class="w"> </span><span class="p">[</span><span class="s2">"python3"</span><span class="p">]</span>
      </pre></div>
      <p>De esta manera, cuando se levante el contenedor, se ejecutar√° python. Es decir si hacemos <code>docker run &lt;image&gt;</code> se ejecutar√° python. Pero <code>ENTRYPOINT</code> nos permite sobreescribir el comando que se ejecuta cuando se levanta el contenedor, por ejemplo, si hacemos <code>docker run &lt;image&gt; myapp.py</code> se ejecutar√° <code>python3 myapp.py</code> dentro del contenedor. As√≠ podemos probar nuestra aplicaci√≥n de python en la nueva versi√≥n de python</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Cambios-en-un-contenedor">Cambios en un contenedor<a class="anchor-link" href="#Cambios-en-un-contenedor"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 199" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Con <code>docker diff</code> podemos ver las diferencias que hay entre el contenedor y la imagen, lo que es lo mismo la diferencia en el contenedor de cuando se cre√≥ y ahora</p>
      <p>Vamos a correr un contenedor y dentro creamos un archivo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>--rm<span class="w"> </span>-it<span class="w"> </span>--name<span class="w"> </span>ubuntu-20.04<span class="w"> </span>ubuntu:20.04<span class="w"> </span>bash',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'root@895a19aef124:/# touch file.txt',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora podemos ver la diferencia</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>diff<span class="w"> </span>ubuntu-20.04',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'C /root',
          'A /root/.bash_history',
          'A /file.txt',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p><code>A</code> significa que se ha a√±adido, <code>C</code> significa que se ha cambiado y <code>D</code> significa que se ha borrado</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Docker-en-docker">Docker en docker<a class="anchor-link" href="#Docker-en-docker"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 200" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Supongamos que tenemos contenedores que necesitan levantar o apagar otros contenedores. Esto se logra de la siguiente manera</p>
      <p>Dado que el linux todo es un archivo y el host se comunica con docker mediante un socket. Por lo que para linux, ese socket es un archivo. As√≠ que un contenedor le montamos ese socket como un archivo podr√° hablar con docker</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primero vamos a montar un contenedor con ubuntu</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>run<span class="w"> </span>-d<span class="w"> </span>--name<span class="w"> </span>ubuntu<span class="w"> </span>ubuntu:latest<span class="w"> </span>tail<span class="w"> </span>-f<span class="w"> </span>/dev/null',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '144091e4a3325c9068064ff438f8865b40f944af5ce649c7156ca55a3453e423',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a montar el contenedor que va a poder hablar con docker montando la carpeta <code>/var/run/docker.sock</code></p>
      <div class="highlight"><pre><span></span>$<span class="w"> </span>docker<span class="w"> </span>run<span class="w"> </span>-it<span class="w"> </span>--rm<span class="w"> </span>--name<span class="w"> </span>main<span class="w"> </span>-v<span class="w"> </span>/var/run/docker.sock:/var/run/docker.sock<span class="w"> </span>docker:19.03.12
      /<span class="w"> </span><span class="c1">#</span>
      </pre></div>
      <p>Nos hemos metido dentro de un contenedor, y si dentro ejecutamos <code>docker ps</code></p>
      <div class="highlight"><pre><span></span><span class="c1"># docker ps</span>
      CONTAINER<span class="w"> </span>ID<span class="w">        </span>IMAGE<span class="w">               </span>COMMAND<span class="w">                  </span>CREATED<span class="w">             </span>STATUS<span class="w">              </span>PORTS<span class="w">               </span>NAMES
      9afb778d6c20<span class="w">        </span>docker:19.03.12<span class="w">     </span><span class="s2">"docker-entrypoint.s‚Ä¶"</span><span class="w">   </span><span class="m">3</span><span class="w"> </span>seconds<span class="w"> </span>ago<span class="w">       </span>Up<span class="w"> </span><span class="m">2</span><span class="w"> </span>seconds<span class="w">                            </span>main
      144091e4a332<span class="w">        </span>ubuntu:latest<span class="w">       </span><span class="s2">"tail -f /dev/null"</span><span class="w">      </span><span class="m">19</span><span class="w"> </span>seconds<span class="w"> </span>ago<span class="w">      </span>Up<span class="w"> </span><span class="m">18</span><span class="w"> </span>seconds<span class="w">                           </span>ubuntu
      </pre></div>
      <p>Como podemos ver, dentro del docker podemos ver los contenedores del host</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos correr un nuevo contenedor</p>
      <div class="highlight"><pre><span></span><span class="c1"># docker run -d --name ubuntu_from_main ubuntu:latest tail -f /dev/null</span>
      362654a72bb0fb047c13968707a6f16b87fed7ce051eb5c1a146b15828589a1a
      /<span class="w"> </span><span class="c1">#</span>
      </pre></div>
      <p>Y si volvemos a ver los contenedores</p>
      <div class="highlight"><pre><span></span><span class="c1"># docker ps</span>
      CONTAINER<span class="w"> </span>ID<span class="w">        </span>IMAGE<span class="w">               </span>COMMAND<span class="w">                  </span>CREATED<span class="w">              </span>STATUS<span class="w">              </span>PORTS<span class="w">               </span>NAMES
      362654a72bb0<span class="w">        </span>ubuntu:latest<span class="w">       </span><span class="s2">"tail -f /dev/null"</span><span class="w">      </span><span class="m">3</span><span class="w"> </span>seconds<span class="w"> </span>ago<span class="w">        </span>Up<span class="w"> </span><span class="m">3</span><span class="w"> </span>seconds<span class="w">                            </span>ubuntu_from_main
      9afb778d6c20<span class="w">        </span>docker:19.03.12<span class="w">     </span><span class="s2">"docker-entrypoint.s‚Ä¶"</span><span class="w">   </span>About<span class="w"> </span>a<span class="w"> </span>minute<span class="w"> </span>ago<span class="w">   </span>Up<span class="w"> </span>About<span class="w"> </span>a<span class="w"> </span>minute<span class="w">                       </span>main
      144091e4a332<span class="w">        </span>ubuntu:latest<span class="w">       </span><span class="s2">"tail -f /dev/null"</span><span class="w">      </span><span class="m">2</span><span class="w"> </span>minutes<span class="w"> </span>ago<span class="w">        </span>Up<span class="w"> </span>About<span class="w"> </span>a<span class="w"> </span>minute<span class="w">                       </span>ubuntu
      </pre></div>
      <p>Pero si ahora ejecutamos una nueva terminal del host veremos el contenedor creado desde dentro del contenedor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>docker<span class="w"> </span>ps',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'CONTAINER ID   IMAGE             COMMAND                  CREATED              STATUS              PORTS     NAMES',
          '362654a72bb0   ubuntu:latest     "tail -f /dev/null"      About a minute ago   Up About a minute             ubuntu_from_main',
          '9afb778d6c20   docker:19.03.12   "docker-entrypoint.s‚Ä¶"   3 minutes ago        Up 3 minutes                  main',
          '144091e4a332   ubuntu:latest     "tail -f /dev/null"      3 minutes ago        Up 3 minutes                  ubuntu',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Todo lo que hagamos desde el contenedor <code>main</code> se ver√° reflejado en el host</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Esto tiene la ventaja de que podemos instalar programas en un contenedor que tiene acceso al host para no tener que instalarlos en el host. Por ejemplo <a href="https://github.com/wagoodman/dive" target="_blank" rel="nofollow noreferrer">dive</a> es una herramienta para explorar contenedores, pero si no la quieres instalar en el host la puedes instalar en un contenedor con acceso al host, as√≠ desde ese contenedro <code>main</code> puedes explorar el resto de contenedores sin tener que instalarla en el host</p>
      </section>
      






    </div>

  </section>

</PostLayout>
