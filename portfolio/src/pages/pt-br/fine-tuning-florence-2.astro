---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Fine tuning Florence-2';
const end_url = 'fine-tuning-florence-2';
const description = 'Voc√™ j√° tem o Florence-2 em seu radar, mas agora quer lev√°-lo para o pr√≥ximo n√≠vel! üöÄ √â hora de fazer o ajuste fino! üíª Nesta postagem, vou orient√°-lo passo a passo no processo de adapta√ß√£o desse modelo multimodal √†s suas necessidades espec√≠ficas. üìä Desde a prepara√ß√£o dos seus dados at√© a configura√ß√£o dos hiperpar√¢metros, mostrarei como obter o m√°ximo do Florence-2. üí° Com PyTorch e Python, faremos com que esse modelo atenda √†s suas necessidades e se torne sua ferramenta confi√°vel para resolver tarefas de linguagem e vis√£o. üìà Portanto, prepare-se para levar seu modelo ao pr√≥ximo n√≠vel e fazer o Florence-2 brilhar em toda a sua gl√≥ria! ‚ú®';
const keywords = 'florence 2, ajuste fino, modelo multimodal, pytorch, python';
const languaje = 'PT';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/Florence-2_fine_tuning_thumnail.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1080
    image_height=778
    image_extension=webp
    article_date=2024-07-18+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Ajuste-fino-para-o-documento-VQA"><h2>Ajuste fino para o documento VQA</h2></a>
      <a class="anchor-link" href="#Conjunto-de-dados"><h3>Conjunto de dados</h3></a>
      <a class="anchor-link" href="#Ajuste-fino"><h3>Ajuste fino</h3></a>
      <a class="anchor-link" href="#Teste-o-modelo-ajustado"><h3>Teste o modelo ajustado</h3></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Ajuste-fino-de-Florence-2">Ajuste fino de Florence-2<a class="anchor-link" href="#Ajuste-fino-de-Florence-2"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 10" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Na postagem <a href="https://www.maximofn.com/florence-2/">Florence-2</a>, j√° explicamos o modelo Florence-2 e como us√°-lo. Portanto, nesta postagem, veremos como ajust√°-lo.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Este caderno foi traduzido automaticamente para torn√°-lo acess√≠vel a mais pessoas, por favor me avise se voc√™ vir algum erro de digita√ß√£o..</p>
      <h2 id="Ajuste-fino-para-o-documento-VQA">Ajuste fino para o documento VQA<a class="anchor-link" href="#Ajuste-fino-para-o-documento-VQA"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 11" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Esse ajuste fino se baseia na postagem de <a href="https://huggingface.co/merve" target="_blank" rel="nofollow noreferrer">Merve Noyan</a>, <a href="https://huggingface.co/andito">Andres Marafioti</a> e <a href="https://huggingface.co/SkalskiP">Piotr Skalski</a>, <a href="https://huggingface.co/blog/finetune-florence2">Fine-tuning Florence-2 - Microsoft's Cutting-edge Vision Language Models</a>, na qual eles explicam que, embora esse m√©todo seja muito completo, ele n√£o permite consultas em documentos, portanto, eles fazem um novo treinamento com o conjunto de dados <a href="https://huggingface.co/datasets/HuggingFaceM4/DocumentVQA">DocumentVQA</a>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Conjunto-de-dados">Conjunto de dados<a class="anchor-link" href="#Conjunto-de-dados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 12" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro, baixamos o conjunto de dados. Deixei a vari√°vel <code>dataset_percentage</code> para o caso de voc√™ n√£o querer fazer o download de tudo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">datasets</span> <span class="kn">import</span> <span class="n">load_dataset</span>',
          '',
          '<span class="n">dataset_percentage</span> <span class="o">=</span> <span class="mi">100</span>',
          '<span class="n">data_train</span> <span class="o">=</span> <span class="n">load_dataset</span><span class="p">(</span><span class="s2">"HuggingFaceM4/DocumentVQA"</span><span class="p">,</span> <span class="n">split</span><span class="o">=</span><span class="sa">f</span><span class="s2">"train[:</span><span class="si">{</span><span class="n">dataset_percentage</span><span class="si">}</span><span class="s2">%]"</span><span class="p">)</span>',
          '<span class="n">data_validation</span> <span class="o">=</span> <span class="n">load_dataset</span><span class="p">(</span><span class="s2">"HuggingFaceM4/DocumentVQA"</span><span class="p">,</span> <span class="n">split</span><span class="o">=</span><span class="sa">f</span><span class="s2">"validation[:</span><span class="si">{</span><span class="n">dataset_percentage</span><span class="si">}</span><span class="s2">%]"</span><span class="p">)</span>',
          '<span class="n">data_test</span> <span class="o">=</span> <span class="n">load_dataset</span><span class="p">(</span><span class="s2">"HuggingFaceM4/DocumentVQA"</span><span class="p">,</span> <span class="n">split</span><span class="o">=</span><span class="sa">f</span><span class="s2">"test[:</span><span class="si">{</span><span class="n">dataset_percentage</span><span class="si">}</span><span class="s2">%]"</span><span class="p">)</span>',
          '',
          '<span class="n">data_train</span><span class="p">,</span> <span class="n">data_validation</span><span class="p">,</span> <span class="n">data_test</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(Dataset({',
          '     features: [\'questionId\', \'question\', \'question_types\', \'image\', \'docId\', \'ucsf_document_id\', \'ucsf_document_page_no\', \'answers\'],',
          '     num_rows: 39463',
          ' }),',
          ' Dataset({',
          '     features: [\'questionId\', \'question\', \'question_types\', \'image\', \'docId\', \'ucsf_document_id\', \'ucsf_document_page_no\', \'answers\'],',
          '     num_rows: 5349',
          ' }),',
          ' Dataset({',
          '     features: [\'questionId\', \'question\', \'question_types\', \'image\', \'docId\', \'ucsf_document_id\', \'ucsf_document_page_no\', \'answers\'],',
          '     num_rows: 5188',
          ' }))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos um subconjunto do conjunto de dados caso voc√™ queira tornar o treinamento mais r√°pido; no meu caso, uso 100% dos dados.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">percentage</span> <span class="o">=</span> <span class="mi">1</span>',
          '',
          '<span class="n">subset_data_train</span> <span class="o">=</span> <span class="n">data_train</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data_train</span><span class="p">)</span> <span class="o">*</span> <span class="n">percentage</span><span class="p">)))</span>',
          '<span class="n">subset_data_validation</span> <span class="o">=</span> <span class="n">data_validation</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data_validation</span><span class="p">)</span> <span class="o">*</span> <span class="n">percentage</span><span class="p">)))</span>',
          '<span class="n">subset_data_test</span> <span class="o">=</span> <span class="n">data_test</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data_test</span><span class="p">)</span> <span class="o">*</span> <span class="n">percentage</span><span class="p">)))</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"train dataset length: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">subset_data_train</span><span class="p">)</span><span class="si">}</span><span class="s2">, validation dataset length: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">subset_data_validation</span><span class="p">)</span><span class="si">}</span><span class="s2">, test dataset length: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">subset_data_test</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'train dataset length: 39463, validation dataset length: 5349, test dataset length: 5188',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Tamb√©m instanciamos o modelo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">AutoModelForCausalLM</span><span class="p">,</span> <span class="n">AutoProcessor</span>',
      '      <span class="kn">import</span> <span class="nn">torch</span>',
      '      ',
      '      <span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s2">"cuda"</span> <span class="k">if</span> <span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="s2">"cpu"</span><span class="p">)</span>',
      '      ',
      '      <span class="n">checkpoints</span> <span class="o">=</span> <span class="s1">\'microsoft/Florence-2-base-ft\'</span>',
      '      <span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">checkpoints</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '      <span class="n">processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">checkpoints</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>













      
      <section class="section-block-markdown-cell">
      <p>Como na postagem <a href="https://www.maximofn.com/florence-2/">Florence-2</a>, criamos uma fun√ß√£o para solicitar respostas ao modelo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">AutoModelForCausalLM</span><span class="p">,</span> <span class="n">AutoProcessor</span>',
      '      <span class="kn">import</span> <span class="nn">torch</span>',
      '      ',
      '      <span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s2">"cuda"</span> <span class="k">if</span> <span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="s2">"cpu"</span><span class="p">)</span>',
      '      ',
      '      <span class="n">checkpoints</span> <span class="o">=</span> <span class="s1">\'microsoft/Florence-2-base-ft\'</span>',
      '      <span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">checkpoints</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '      <span class="n">processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">checkpoints</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span></span><span class="k">def</span> <span class="nf">create_prompt</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>',
      '          <span class="k">if</span> <span class="n">text_input</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>',
      '              <span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span>',
      '          <span class="k">else</span><span class="p">:</span>',
      '              <span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span> <span class="o">+</span> <span class="n">text_input</span>',
      '          <span class="k">return</span> <span class="n">prompt</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>











      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">AutoModelForCausalLM</span><span class="p">,</span> <span class="n">AutoProcessor</span>',
      '      <span class="kn">import</span> <span class="nn">torch</span>',
      '      ',
      '      <span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s2">"cuda"</span> <span class="k">if</span> <span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="s2">"cpu"</span><span class="p">)</span>',
      '      ',
      '      <span class="n">checkpoints</span> <span class="o">=</span> <span class="s1">\'microsoft/Florence-2-base-ft\'</span>',
      '      <span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">checkpoints</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '      <span class="n">processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">checkpoints</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span></span><span class="k">def</span> <span class="nf">create_prompt</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>',
      '          <span class="k">if</span> <span class="n">text_input</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>',
      '              <span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span>',
      '          <span class="k">else</span><span class="p">:</span>',
      '              <span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span> <span class="o">+</span> <span class="n">text_input</span>',
      '          <span class="k">return</span> <span class="n">prompt</span>',
      '<span></span><span class="k">def</span> <span class="nf">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="s2">"cpu"</span><span class="p">):</span>',
      '          <span class="c1"># Create prompt</span>',
      '          <span class="n">prompt</span> <span class="o">=</span> <span class="n">create_prompt</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '      ',
      '          <span class="c1"># Ensure the image is in RGB mode</span>',
      '          <span class="k">if</span> <span class="n">image</span><span class="o">.</span><span class="n">mode</span> <span class="o">!=</span> <span class="s2">"RGB"</span><span class="p">:</span>',
      '              <span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s2">"RGB"</span><span class="p">)</span>',
      '      ',
      '          <span class="c1"># Get inputs</span>',
      '          <span class="n">inputs</span> <span class="o">=</span> <span class="n">processor</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span> <span class="n">images</span><span class="o">=</span><span class="n">image</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">"pt"</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '      ',
      '          <span class="c1"># Get outputs</span>',
      '          <span class="n">generated_ids</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span>',
      '            <span class="n">input_ids</span><span class="o">=</span><span class="n">inputs</span><span class="p">[</span><span class="s2">"input_ids"</span><span class="p">],</span>',
      '            <span class="n">pixel_values</span><span class="o">=</span><span class="n">inputs</span><span class="p">[</span><span class="s2">"pixel_values"</span><span class="p">],</span>',
      '            <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span>',
      '            <span class="n">early_stopping</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
      '            <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
      '            <span class="n">num_beams</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>',
      '          <span class="p">)</span>',
      '      ',
      '          <span class="c1"># Decode the generated IDs</span>',
      '          <span class="n">generated_text</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">batch_decode</span><span class="p">(</span><span class="n">generated_ids</span><span class="p">,</span> <span class="n">skip_special_tokens</span><span class="o">=</span><span class="kc">False</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>',
      '      ',
      '          <span class="c1"># Post-process the generated text</span>',
      '          <span class="n">parsed_answer</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">post_process_generation</span><span class="p">(</span>',
      '              <span class="n">generated_text</span><span class="p">,</span> ',
      '              <span class="n">task</span><span class="o">=</span><span class="n">task_prompt</span><span class="p">,</span> ',
      '              <span class="n">image_size</span><span class="o">=</span><span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>',
      '          <span class="p">)</span>',
      '      ',
      '          <span class="k">return</span> <span class="n">parsed_answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>





































      
      <section class="section-block-markdown-cell">
      <p>Testamos o modelo com 3 documentos do conjunto de dados, com a tarefa <code>DocVQA</code> para ver se conseguimos algo.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;DocVQA&gt;"</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">'What do you see in this image?'</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">'image'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>
        <span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">'image'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'&lt;DocVQA&gt;': 'docvQA'{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-20.webp" width="350" height="350" alt="image fine-tuning-florence-2 1" loading="lazy">
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'&lt;DocVQA&gt;': 'docvQA'{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-21.webp" width="350" height="350" alt="image fine-tuning-florence-2 2" loading="lazy">
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'&lt;DocVQA&gt;': 'DocVQA&gt;'{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-22.webp" width="350" height="350" alt="image fine-tuning-florence-2 3" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"DocVQA"</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">'What do you see in this image?'</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">'image'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>
        <span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">'image'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'DocVQA': 'unanswerable'{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-23.webp" width="350" height="350" alt="image fine-tuning-florence-2 4" loading="lazy">
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'DocVQA': 'unanswerable'{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-24.webp" width="350" height="350" alt="image fine-tuning-florence-2 5" loading="lazy">
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'DocVQA': '499150498'{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-25.webp" width="350" height="350" alt="image fine-tuning-florence-2 6" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que as respostas n√£o s√£o boas</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora tentamos a tarefa <code>OCR</code>.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;OCR&gt;"</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">'image'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>
        <span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">'image'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'&lt;OCR&gt;': 'ConfidentialDATE:11/8/18RJT FR APPROVALBUBJECT: Rl gdasPROPOSED RELEASE DATE:for responseFOR RELEASE TO!CONTRACT: P. CARTERROUTE TO!NameIntiifnPeggy CarterAce11/fesMura PayneDavid Fishhel037Tom Gisis Com-Diane BarrowsEd BlackmerTow KuckerReturn to Peggy Carter, PR, 16 Raynolds BuildingLLS. 2015Source: https://www.industrydocuments.ucsf.edu/docs/xnbl0037'{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-26.webp" width="350" height="350" alt="image fine-tuning-florence-2 7" loading="lazy">
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'&lt;OCR&gt;': 'ConfidentialDATE:11/8/18RJT FR APPROVALBUBJECT: Rl gdasPROPOSED RELEASE DATE:for responseFOR RELEASE TO!CONTRACT: P. CARTERROUTE TO!NameIntiifnPeggy CarterAce11/fesMura PayneDavid Fishhel037Tom Gisis Com-Diane BarrowsEd BlackmerTow KuckerReturn to Peggy Carter, PR, 16 Raynolds BuildingLLS. 2015Source: https://www.industrydocuments.ucsf.edu/docs/xnbl0037'{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-27.webp" width="350" height="350" alt="image fine-tuning-florence-2 8" loading="lazy">
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'&lt;OCR&gt;': 'BSABROWN &amp; WILLIAMSON JOBACCO CORPORATIONRESEARCH &amp; DEVELOPMENTINTERNAL CORRESPONDENCETO:R. H. HoneycuttCC:C.J. CookFROM:May 9, 1995SUBJECT: Review of Existing Brainstorming Ideas/43The major function of the Product Innovation Ideas is developed marketable novel productsthat would be profile of the manufacturer and sell. Novel is defined as: a new kind, or differentfrom anything seen in known before, Innovation things as something is available. The products mayintroduced and the most technologies, materials and know, available to give a uniquetaste or tok.The first task of the product innovation was was an easy-view review and then a list ofexisting brainstorming ideas. These were group was used for two major categories that may differapparance and lerato,Ideas are grouped into two major products that may offercategories include a combination print of the above, flowers, and packaged and brand directions.ApparanceThis category is used in a novel cigarette constructions that yield visually different products withminimal changes in smokecigarette.Two cigarettes in one.Multi-plug in your.C-Switch menthol or non non smoking cigarette.E-Switch with ORPORated perforations to enable smoke to separate unburned section forfuture smoking.Tout smoking.Bobace section 30 mm.Novelcigarette constructions and permit a significant reduction in tobacco weight whilemaintaining fast smoking mechanics and visual reduction for tobacco weight.higher basis weight paper, potential reduction for cigarette weight.Easter or in an ebony agent for tobacco, e.g. starch.Colored tow and cigarette papers; seasonal promotions, eg. pastel colored cigarettes forEaster and in an Ebony brand containing a mixture of all black (black paper and tow)and all white cigarettes.499150498Source: https://www.industrydocuments.ucs.edu/docs/mxj0037'{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-28.webp" width="350" height="350" alt="image fine-tuning-florence-2 9" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Recebemos o texto dos documentos, mas n√£o o assunto dos documentos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por fim, tentamos as tarefas <code>CAPTION</code>.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;CAPTION&gt;"</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">'image'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;DETAILED_CAPTION&gt;"</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">'image'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;MORE_DETAILED_CAPTION&gt;"</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">'image'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>
        <span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">'image'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'&lt;CAPTION&gt;': 'A certificate is stamped with the date of 18/18.'{closing_brace}
      {opening_brace}'&lt;DETAILED_CAPTION&gt;': 'In this image we can see a paper with some text on it.'{closing_brace}
      {opening_brace}'&lt;MORE_DETAILED_CAPTION&gt;': 'A letter is written in black ink on a white paper. The letters are written in a cursive language. The letter is addressed to peggy carter. '{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-29.webp" width="350" height="350" alt="image fine-tuning-florence-2 10" loading="lazy">
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'&lt;CAPTION&gt;': 'A certificate is stamped with the date of 18/18.'{closing_brace}
      {opening_brace}'&lt;DETAILED_CAPTION&gt;': 'In this image we can see a paper with some text on it.'{closing_brace}
      {opening_brace}'&lt;MORE_DETAILED_CAPTION&gt;': 'A letter is written in black ink on a white paper. The letters are written in a cursive language. The letter is addressed to peggy carter. '{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-210.webp" width="350" height="350" alt="image fine-tuning-florence-2 11" loading="lazy">
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'&lt;CAPTION&gt;': "a paper that says 'brown &amp; williamson tobacco corporation research &amp; development' on it"{closing_brace}
      {opening_brace}'&lt;DETAILED_CAPTION&gt;': 'In this image we can see a paper with some text on it.'{closing_brace}
      {opening_brace}'&lt;MORE_DETAILED_CAPTION&gt;': 'The image is a page from a book titled "Brown &amp; Williamson Jobacco Corporation Research &amp; Development".  The page is white and has black text.  The title of the page is "R. H. Honeycutt" at the top.  There is a logo of the company BSA in the top right corner.  A paragraph is written in black text below the title.'{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-211.webp" width="350" height="350" alt="image fine-tuning-florence-2 12" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Essas respostas tamb√©m n√£o funcionar√£o, portanto, vamos fazer o ajuste fino.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Ajuste-fino">Ajuste fino<a class="anchor-link" href="#Ajuste-fino"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 13" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro, criamos um conjunto de dados Pytorch.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">AutoModelForCausalLM</span><span class="p">,</span> <span class="n">AutoProcessor</span>',
      '      <span class="kn">import</span> <span class="nn">torch</span>',
      '      ',
      '      <span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s2">"cuda"</span> <span class="k">if</span> <span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="s2">"cpu"</span><span class="p">)</span>',
      '      ',
      '      <span class="n">checkpoints</span> <span class="o">=</span> <span class="s1">\'microsoft/Florence-2-base-ft\'</span>',
      '      <span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">checkpoints</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '      <span class="n">processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">checkpoints</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span></span><span class="k">def</span> <span class="nf">create_prompt</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>',
      '          <span class="k">if</span> <span class="n">text_input</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>',
      '              <span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span>',
      '          <span class="k">else</span><span class="p">:</span>',
      '              <span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span> <span class="o">+</span> <span class="n">text_input</span>',
      '          <span class="k">return</span> <span class="n">prompt</span>',
      '<span></span><span class="k">def</span> <span class="nf">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="s2">"cpu"</span><span class="p">):</span>',
      '          <span class="c1"># Create prompt</span>',
      '          <span class="n">prompt</span> <span class="o">=</span> <span class="n">create_prompt</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '      ',
      '          <span class="c1"># Ensure the image is in RGB mode</span>',
      '          <span class="k">if</span> <span class="n">image</span><span class="o">.</span><span class="n">mode</span> <span class="o">!=</span> <span class="s2">"RGB"</span><span class="p">:</span>',
      '              <span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s2">"RGB"</span><span class="p">)</span>',
      '      ',
      '          <span class="c1"># Get inputs</span>',
      '          <span class="n">inputs</span> <span class="o">=</span> <span class="n">processor</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span> <span class="n">images</span><span class="o">=</span><span class="n">image</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">"pt"</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '      ',
      '          <span class="c1"># Get outputs</span>',
      '          <span class="n">generated_ids</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span>',
      '            <span class="n">input_ids</span><span class="o">=</span><span class="n">inputs</span><span class="p">[</span><span class="s2">"input_ids"</span><span class="p">],</span>',
      '            <span class="n">pixel_values</span><span class="o">=</span><span class="n">inputs</span><span class="p">[</span><span class="s2">"pixel_values"</span><span class="p">],</span>',
      '            <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span>',
      '            <span class="n">early_stopping</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
      '            <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
      '            <span class="n">num_beams</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>',
      '          <span class="p">)</span>',
      '      ',
      '          <span class="c1"># Decode the generated IDs</span>',
      '          <span class="n">generated_text</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">batch_decode</span><span class="p">(</span><span class="n">generated_ids</span><span class="p">,</span> <span class="n">skip_special_tokens</span><span class="o">=</span><span class="kc">False</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>',
      '      ',
      '          <span class="c1"># Post-process the generated text</span>',
      '          <span class="n">parsed_answer</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">post_process_generation</span><span class="p">(</span>',
      '              <span class="n">generated_text</span><span class="p">,</span> ',
      '              <span class="n">task</span><span class="o">=</span><span class="n">task_prompt</span><span class="p">,</span> ',
      '              <span class="n">image_size</span><span class="o">=</span><span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>',
      '          <span class="p">)</span>',
      '      ',
      '          <span class="k">return</span> <span class="n">parsed_answer</span>',
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;DocVQA&gt;"</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">\'What do you see in this image?\'</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '        <span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"DocVQA"</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">\'What do you see in this image?\'</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '        <span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;OCR&gt;"</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '        <span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;CAPTION&gt;"</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;DETAILED_CAPTION&gt;"</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;MORE_DETAILED_CAPTION&gt;"</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '        <span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
      '<span></span><span class="kn">from</span> <span class="nn">torch.utils.data</span> <span class="kn">import</span> <span class="n">Dataset</span>',
      '      ',
      '      <span class="k">class</span> <span class="nc">DocVQADataset</span><span class="p">(</span><span class="n">Dataset</span><span class="p">):</span>',
      '          <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>',
      '              <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>',
      '      ',
      '          <span class="k">def</span> <span class="fm">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '              <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>',
      '      ',
      '          <span class="k">def</span> <span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>',
      '              <span class="n">example</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>',
      '              <span class="n">question</span> <span class="o">=</span> <span class="s2">"&lt;DocVQA&gt;"</span> <span class="o">+</span> <span class="n">example</span><span class="p">[</span><span class="s1">\'question\'</span><span class="p">]</span>',
      '              <span class="n">first_answer</span> <span class="o">=</span> <span class="n">example</span><span class="p">[</span><span class="s1">\'answers\'</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>',
      '              <span class="n">image</span> <span class="o">=</span> <span class="n">example</span><span class="p">[</span><span class="s1">\'image\'</span><span class="p">]</span>',
      '              <span class="k">if</span> <span class="n">image</span><span class="o">.</span><span class="n">mode</span> <span class="o">!=</span> <span class="s2">"RGB"</span><span class="p">:</span>',
      '                  <span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s2">"RGB"</span><span class="p">)</span>',
      '              <span class="k">return</span> <span class="n">question</span><span class="p">,</span> <span class="n">first_answer</span><span class="p">,</span> <span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






















      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">AutoModelForCausalLM</span><span class="p">,</span> <span class="n">AutoProcessor</span>',
      '      <span class="kn">import</span> <span class="nn">torch</span>',
      '      ',
      '      <span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s2">"cuda"</span> <span class="k">if</span> <span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="s2">"cpu"</span><span class="p">)</span>',
      '      ',
      '      <span class="n">checkpoints</span> <span class="o">=</span> <span class="s1">\'microsoft/Florence-2-base-ft\'</span>',
      '      <span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">checkpoints</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '      <span class="n">processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">checkpoints</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span></span><span class="k">def</span> <span class="nf">create_prompt</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>',
      '          <span class="k">if</span> <span class="n">text_input</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>',
      '              <span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span>',
      '          <span class="k">else</span><span class="p">:</span>',
      '              <span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span> <span class="o">+</span> <span class="n">text_input</span>',
      '          <span class="k">return</span> <span class="n">prompt</span>',
      '<span></span><span class="k">def</span> <span class="nf">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="s2">"cpu"</span><span class="p">):</span>',
      '          <span class="c1"># Create prompt</span>',
      '          <span class="n">prompt</span> <span class="o">=</span> <span class="n">create_prompt</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '      ',
      '          <span class="c1"># Ensure the image is in RGB mode</span>',
      '          <span class="k">if</span> <span class="n">image</span><span class="o">.</span><span class="n">mode</span> <span class="o">!=</span> <span class="s2">"RGB"</span><span class="p">:</span>',
      '              <span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s2">"RGB"</span><span class="p">)</span>',
      '      ',
      '          <span class="c1"># Get inputs</span>',
      '          <span class="n">inputs</span> <span class="o">=</span> <span class="n">processor</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span> <span class="n">images</span><span class="o">=</span><span class="n">image</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">"pt"</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '      ',
      '          <span class="c1"># Get outputs</span>',
      '          <span class="n">generated_ids</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span>',
      '            <span class="n">input_ids</span><span class="o">=</span><span class="n">inputs</span><span class="p">[</span><span class="s2">"input_ids"</span><span class="p">],</span>',
      '            <span class="n">pixel_values</span><span class="o">=</span><span class="n">inputs</span><span class="p">[</span><span class="s2">"pixel_values"</span><span class="p">],</span>',
      '            <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span>',
      '            <span class="n">early_stopping</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
      '            <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
      '            <span class="n">num_beams</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>',
      '          <span class="p">)</span>',
      '      ',
      '          <span class="c1"># Decode the generated IDs</span>',
      '          <span class="n">generated_text</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">batch_decode</span><span class="p">(</span><span class="n">generated_ids</span><span class="p">,</span> <span class="n">skip_special_tokens</span><span class="o">=</span><span class="kc">False</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>',
      '      ',
      '          <span class="c1"># Post-process the generated text</span>',
      '          <span class="n">parsed_answer</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">post_process_generation</span><span class="p">(</span>',
      '              <span class="n">generated_text</span><span class="p">,</span> ',
      '              <span class="n">task</span><span class="o">=</span><span class="n">task_prompt</span><span class="p">,</span> ',
      '              <span class="n">image_size</span><span class="o">=</span><span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>',
      '          <span class="p">)</span>',
      '      ',
      '          <span class="k">return</span> <span class="n">parsed_answer</span>',
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;DocVQA&gt;"</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">\'What do you see in this image?\'</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '        <span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"DocVQA"</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">\'What do you see in this image?\'</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '        <span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;OCR&gt;"</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '        <span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;CAPTION&gt;"</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;DETAILED_CAPTION&gt;"</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;MORE_DETAILED_CAPTION&gt;"</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '        <span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
      '<span></span><span class="kn">from</span> <span class="nn">torch.utils.data</span> <span class="kn">import</span> <span class="n">Dataset</span>',
      '      ',
      '      <span class="k">class</span> <span class="nc">DocVQADataset</span><span class="p">(</span><span class="n">Dataset</span><span class="p">):</span>',
      '          <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>',
      '              <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>',
      '      ',
      '          <span class="k">def</span> <span class="fm">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '              <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>',
      '      ',
      '          <span class="k">def</span> <span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>',
      '              <span class="n">example</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>',
      '              <span class="n">question</span> <span class="o">=</span> <span class="s2">"&lt;DocVQA&gt;"</span> <span class="o">+</span> <span class="n">example</span><span class="p">[</span><span class="s1">\'question\'</span><span class="p">]</span>',
      '              <span class="n">first_answer</span> <span class="o">=</span> <span class="n">example</span><span class="p">[</span><span class="s1">\'answers\'</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>',
      '              <span class="n">image</span> <span class="o">=</span> <span class="n">example</span><span class="p">[</span><span class="s1">\'image\'</span><span class="p">]</span>',
      '              <span class="k">if</span> <span class="n">image</span><span class="o">.</span><span class="n">mode</span> <span class="o">!=</span> <span class="s2">"RGB"</span><span class="p">:</span>',
      '                  <span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s2">"RGB"</span><span class="p">)</span>',
      '              <span class="k">return</span> <span class="n">question</span><span class="p">,</span> <span class="n">first_answer</span><span class="p">,</span> <span class="n">image</span>',
      '<span></span><span class="n">train_dataset</span> <span class="o">=</span> <span class="n">DocVQADataset</span><span class="p">(</span><span class="n">subset_data_train</span><span class="p">)</span>',
      '      <span class="n">val_dataset</span> <span class="o">=</span> <span class="n">DocVQADataset</span><span class="p">(</span><span class="n">subset_data_validation</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>







      
      <section class="section-block-markdown-cell">
      <p>Vamos ver isso</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">AutoModelForCausalLM</span><span class="p">,</span> <span class="n">AutoProcessor</span>',
          '<span class="kn">import</span> <span class="nn">torch</span>',
          '',
          '<span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s2">"cuda"</span> <span class="k">if</span> <span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="s2">"cpu"</span><span class="p">)</span>',
          '',
          '<span class="n">checkpoints</span> <span class="o">=</span> <span class="s1">\'microsoft/Florence-2-base-ft\'</span>',
          '<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">checkpoints</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
          '<span class="n">processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">checkpoints</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
          '</span><span class="k">def</span> <span class="nf">create_prompt</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>',
          '    <span class="k">if</span> <span class="n">text_input</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>',
          '        <span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span>',
          '    <span class="k">else</span><span class="p">:</span>',
          '        <span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span> <span class="o">+</span> <span class="n">text_input</span>',
          '    <span class="k">return</span> <span class="n">prompt</span>',
          '</span><span class="k">def</span> <span class="nf">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="s2">"cpu"</span><span class="p">):</span>',
          '    <span class="c1"># Create prompt</span>',
          '    <span class="n">prompt</span> <span class="o">=</span> <span class="n">create_prompt</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
          '',
          '    <span class="c1"># Ensure the image is in RGB mode</span>',
          '    <span class="k">if</span> <span class="n">image</span><span class="o">.</span><span class="n">mode</span> <span class="o">!=</span> <span class="s2">"RGB"</span><span class="p">:</span>',
          '        <span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s2">"RGB"</span><span class="p">)</span>',
          '',
          '    <span class="c1"># Get inputs</span>',
          '    <span class="n">inputs</span> <span class="o">=</span> <span class="n">processor</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span> <span class="n">images</span><span class="o">=</span><span class="n">image</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">"pt"</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
          '',
          '    <span class="c1"># Get outputs</span>',
          '    <span class="n">generated_ids</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span>',
          '      <span class="n">input_ids</span><span class="o">=</span><span class="n">inputs</span><span class="p">[</span><span class="s2">"input_ids"</span><span class="p">],</span>',
          '      <span class="n">pixel_values</span><span class="o">=</span><span class="n">inputs</span><span class="p">[</span><span class="s2">"pixel_values"</span><span class="p">],</span>',
          '      <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span>',
          '      <span class="n">early_stopping</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
          '      <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
          '      <span class="n">num_beams</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>',
          '    <span class="p">)</span>',
          '',
          '    <span class="c1"># Decode the generated IDs</span>',
          '    <span class="n">generated_text</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">batch_decode</span><span class="p">(</span><span class="n">generated_ids</span><span class="p">,</span> <span class="n">skip_special_tokens</span><span class="o">=</span><span class="kc">False</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>',
          '',
          '    <span class="c1"># Post-process the generated text</span>',
          '    <span class="n">parsed_answer</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">post_process_generation</span><span class="p">(</span>',
          '        <span class="n">generated_text</span><span class="p">,</span> ',
          '        <span class="n">task</span><span class="o">=</span><span class="n">task_prompt</span><span class="p">,</span> ',
          '        <span class="n">image_size</span><span class="o">=</span><span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>',
          '    <span class="p">)</span>',
          '',
          '    <span class="k">return</span> <span class="n">parsed_answer</span>',
          '</span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;DocVQA&gt;"</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">\'What do you see in this image?\'</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
          '  <span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
          '</span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"DocVQA"</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">\'What do you see in this image?\'</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
          '  <span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
          '</span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;OCR&gt;"</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
          '  <span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
          '</span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;CAPTION&gt;"</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;DETAILED_CAPTION&gt;"</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;MORE_DETAILED_CAPTION&gt;"</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
          '  <span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">\'image\'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
          '</span><span class="kn">from</span> <span class="nn">torch.utils.data</span> <span class="kn">import</span> <span class="n">Dataset</span>',
          '',
          '<span class="k">class</span> <span class="nc">DocVQADataset</span><span class="p">(</span><span class="n">Dataset</span><span class="p">):</span>',
          '    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>',
          '        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>',
          '',
          '    <span class="k">def</span> <span class="fm">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>',
          '',
          '    <span class="k">def</span> <span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>',
          '        <span class="n">example</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>',
          '        <span class="n">question</span> <span class="o">=</span> <span class="s2">"&lt;DocVQA&gt;"</span> <span class="o">+</span> <span class="n">example</span><span class="p">[</span><span class="s1">\'question\'</span><span class="p">]</span>',
          '        <span class="n">first_answer</span> <span class="o">=</span> <span class="n">example</span><span class="p">[</span><span class="s1">\'answers\'</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>',
          '        <span class="n">image</span> <span class="o">=</span> <span class="n">example</span><span class="p">[</span><span class="s1">\'image\'</span><span class="p">]</span>',
          '        <span class="k">if</span> <span class="n">image</span><span class="o">.</span><span class="n">mode</span> <span class="o">!=</span> <span class="s2">"RGB"</span><span class="p">:</span>',
          '            <span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s2">"RGB"</span><span class="p">)</span>',
          '        <span class="k">return</span> <span class="n">question</span><span class="p">,</span> <span class="n">first_answer</span><span class="p">,</span> <span class="n">image</span>',
          '</span><span class="n">train_dataset</span> <span class="o">=</span> <span class="n">DocVQADataset</span><span class="p">(</span><span class="n">subset_data_train</span><span class="p">)</span>',
          '<span class="n">val_dataset</span> <span class="o">=</span> <span class="n">DocVQADataset</span><span class="p">(</span><span class="n">subset_data_validation</span><span class="p">)</span>',
          '</span><span class="n">train_dataset</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'&lt;DocVQA&gt;\': \'docvQA\'}',
          '{\'DocVQA\': \'unanswerable\'}',
          '{\'&lt;OCR&gt;\': \'ConfidentialDATE:11/8/18RJT FR APPROVALBUBJECT: Rl gdasPROPOSED RELEASE DATE:for responseFOR RELEASE TO!CONTRACT: P. CARTERROUTE TO!NameIntiifnPeggy CarterAce11/fesMura PayneDavid Fishhel037Tom Gisis Com-Diane BarrowsEd BlackmerTow KuckerReturn to Peggy Carter, PR, 16 Raynolds BuildingLLS. 2015Source: https://www.industrydocuments.ucsf.edu/docs/xnbl0037\'}',
          '{\'&lt;CAPTION&gt;\': \'A certificate is stamped with the date of 18/18.\'}',
          '{\'&lt;DETAILED_CAPTION&gt;\': \'In this image we can see a paper with some text on it.\'}',
          '{\'&lt;MORE_DETAILED_CAPTION&gt;\': \'A letter is written in black ink on a white paper. The letters are written in a cursive language. The letter is addressed to peggy carter. \'}',
          '(\'&lt;DocVQA&gt;what is the date mentioned in this letter?\',',
          ' \'1/8/93\',',
          ' &lt;PIL.Image.Image image mode=RGB size=1695x2025&gt;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">data_train</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'questionId\': 337,',
          ' \'question\': \'what is the date mentioned in this letter?\',',
          ' \'question_types\': [\'handwritten\', \'form\'],',
          ' \'image\': &lt;PIL.PngImagePlugin.PngImageFile image mode=L size=1695x2025&gt;,',
          ' \'docId\': 279,',
          ' \'ucsf_document_id\': \'xnbl0037\',',
          ' \'ucsf_document_page_no\': \'1\',',
          ' \'answers\': [\'1/8/93\']}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos um carregador de dados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">os</span>',
      '      <span class="kn">from</span> <span class="nn">torch.utils.data</span> <span class="kn">import</span> <span class="n">DataLoader</span>',
      '      <span class="kn">from</span> <span class="nn">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>',
      '      <span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="p">(</span><span class="n">AdamW</span><span class="p">,</span> <span class="n">AutoProcessor</span><span class="p">,</span> <span class="n">get_scheduler</span><span class="p">)</span>',
      '      ',
      '      <span class="k">def</span> <span class="nf">collate_fn</span><span class="p">(</span><span class="n">batch</span><span class="p">):</span>',
      '          <span class="n">questions</span><span class="p">,</span> <span class="n">answers</span><span class="p">,</span> <span class="n">images</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">batch</span><span class="p">)</span>',
      '          <span class="n">inputs</span> <span class="o">=</span> <span class="n">processor</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">questions</span><span class="p">),</span> <span class="n">images</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">images</span><span class="p">),</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">"pt"</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '          <span class="k">return</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">answers</span>',
      '      ',
      '      <span class="c1"># Create DataLoader</span>',
      '      <span class="n">batch_size</span> <span class="o">=</span> <span class="mi">8</span>',
      '      <span class="n">num_workers</span> <span class="o">=</span> <span class="mi">0</span>',
      '      ',
      '      <span class="n">train_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">train_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">collate_fn</span><span class="o">=</span><span class="n">collate_fn</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="n">num_workers</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '      <span class="n">val_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">val_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">collate_fn</span><span class="o">=</span><span class="n">collate_fn</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="n">num_workers</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>





















      
      <section class="section-block-markdown-cell">
      <p>Vamos dar uma olhada em um exemplo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">os</span>',
      '      <span class="kn">from</span> <span class="nn">torch.utils.data</span> <span class="kn">import</span> <span class="n">DataLoader</span>',
      '      <span class="kn">from</span> <span class="nn">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>',
      '      <span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="p">(</span><span class="n">AdamW</span><span class="p">,</span> <span class="n">AutoProcessor</span><span class="p">,</span> <span class="n">get_scheduler</span><span class="p">)</span>',
      '      ',
      '      <span class="k">def</span> <span class="nf">collate_fn</span><span class="p">(</span><span class="n">batch</span><span class="p">):</span>',
      '          <span class="n">questions</span><span class="p">,</span> <span class="n">answers</span><span class="p">,</span> <span class="n">images</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">batch</span><span class="p">)</span>',
      '          <span class="n">inputs</span> <span class="o">=</span> <span class="n">processor</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">questions</span><span class="p">),</span> <span class="n">images</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">images</span><span class="p">),</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">"pt"</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '          <span class="k">return</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">answers</span>',
      '      ',
      '      <span class="c1"># Create DataLoader</span>',
      '      <span class="n">batch_size</span> <span class="o">=</span> <span class="mi">8</span>',
      '      <span class="n">num_workers</span> <span class="o">=</span> <span class="mi">0</span>',
      '      ',
      '      <span class="n">train_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">train_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">collate_fn</span><span class="o">=</span><span class="n">collate_fn</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="n">num_workers</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '      <span class="n">val_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">val_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">collate_fn</span><span class="o">=</span><span class="n">collate_fn</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="n">num_workers</span><span class="p">)</span>',
      '<span></span><span class="n">sample</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="nb">iter</span><span class="p">(</span><span class="n">train_loader</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">os</span>',
          '<span class="kn">from</span> <span class="nn">torch.utils.data</span> <span class="kn">import</span> <span class="n">DataLoader</span>',
          '<span class="kn">from</span> <span class="nn">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>',
          '<span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="p">(</span><span class="n">AdamW</span><span class="p">,</span> <span class="n">AutoProcessor</span><span class="p">,</span> <span class="n">get_scheduler</span><span class="p">)</span>',
          '',
          '<span class="k">def</span> <span class="nf">collate_fn</span><span class="p">(</span><span class="n">batch</span><span class="p">):</span>',
          '    <span class="n">questions</span><span class="p">,</span> <span class="n">answers</span><span class="p">,</span> <span class="n">images</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">batch</span><span class="p">)</span>',
          '    <span class="n">inputs</span> <span class="o">=</span> <span class="n">processor</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">questions</span><span class="p">),</span> <span class="n">images</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">images</span><span class="p">),</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">"pt"</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
          '    <span class="k">return</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">answers</span>',
          '',
          '<span class="c1"># Create DataLoader</span>',
          '<span class="n">batch_size</span> <span class="o">=</span> <span class="mi">8</span>',
          '<span class="n">num_workers</span> <span class="o">=</span> <span class="mi">0</span>',
          '',
          '<span class="n">train_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">train_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">collate_fn</span><span class="o">=</span><span class="n">collate_fn</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="n">num_workers</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
          '<span class="n">val_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">val_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">collate_fn</span><span class="o">=</span><span class="n">collate_fn</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="n">num_workers</span><span class="p">)</span>',
          '</span><span class="n">sample</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="nb">iter</span><span class="p">(</span><span class="n">train_loader</span><span class="p">))</span>',
          '</span><span class="n">sample</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '({\'input_ids\': tensor([[    0, 41552, 42291,   846,  1864,   250, 15698, 12375,    16,     5,',
          '           3383,     9,   331,     9,  2042,   116,     2,     1,     1,     1,',
          '              1,     1,     1],',
          '         [    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '          11968,   196,   205, 22922,   346, 17487,     2,     1,     1,     1,',
          '              1,     1,     1],',
          '         [    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '           1229,    13,   403,   690,   116,     2,     1,     1,     1,     1,',
          '              1,     1,     1],',
          '         [    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '           5480,  1280,   116,     2,     1,     1,     1,     1,     1,     1,',
          '              1,     1,     1],',
          '         [    0, 41552, 42291,   846,  1864,   250, 15698, 12196,    16,     5,',
          '           1842,   346,    13,    20,  4680, 41828, 42237,     8, 30147, 17487,',
          '              2,     1,     1],',
          '         [    0, 41552, 42291,   846,  1864,   250, 15698,   560,    61,   675,',
          '            473,    42,  1013,   266,  9943,     7,   116,     2,     1,     1,',
          '              1,     1,     1],',
          '         [    0, 41552, 42291,   846,  1864,   250, 15698, 12196,    16,     5,',
          '           1280,     9, 39432,   642,  6228,  2394,  2801,    11,     5,   576,',
          '            266, 17487,     2],',
          '         [    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,  1982,',
          '             11,     5,  6655,  2325,    23,     5,   299,   235,     9,     5,',
          '           3780,   116,     2]]), \'attention_mask\': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],',
          '         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],',
          '         ...',
          '         \'97.00\',',
          '  \'123\',',
          '  \'1 January 1979 - 31 December 1979\',',
          '  \'$2,720.14\',',
          '  \'GPI\'))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A amostra bruta cont√©m muitas informa√ß√µes, portanto, vamos dar uma olhada no comprimento da amostra.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">sample</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtemos um comprimento de 2 porque temos a entrada para o modelo e a resposta.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">sample_inputs</span> <span class="o">=</span> <span class="n">sample</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
      '      <span class="n">sample_answers</span> <span class="o">=</span> <span class="n">sample</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>







      
      <section class="section-block-markdown-cell">
      <p>Vemos a entrada</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">sample_inputs</span> <span class="o">=</span> <span class="n">sample</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
          '<span class="n">sample_answers</span> <span class="o">=</span> <span class="n">sample</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
          '</span><span class="n">sample_inputs</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'input_ids\': tensor([[    0, 41552, 42291,   846,  1864,   250, 15698, 12375,    16,     5,',
          '          3383,     9,   331,     9,  2042,   116,     2,     1,     1,     1,',
          '             1,     1,     1],',
          '        [    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '         11968,   196,   205, 22922,   346, 17487,     2,     1,     1,     1,',
          '             1,     1,     1],',
          '        [    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '          1229,    13,   403,   690,   116,     2,     1,     1,     1,     1,',
          '             1,     1,     1],',
          '        [    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '          5480,  1280,   116,     2,     1,     1,     1,     1,     1,     1,',
          '             1,     1,     1],',
          '        [    0, 41552, 42291,   846,  1864,   250, 15698, 12196,    16,     5,',
          '          1842,   346,    13,    20,  4680, 41828, 42237,     8, 30147, 17487,',
          '             2,     1,     1],',
          '        [    0, 41552, 42291,   846,  1864,   250, 15698,   560,    61,   675,',
          '           473,    42,  1013,   266,  9943,     7,   116,     2,     1,     1,',
          '             1,     1,     1],',
          '        [    0, 41552, 42291,   846,  1864,   250, 15698, 12196,    16,     5,',
          '          1280,     9, 39432,   642,  6228,  2394,  2801,    11,     5,   576,',
          '           266, 17487,     2],',
          '        [    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,  1982,',
          '            11,     5,  6655,  2325,    23,     5,   299,   235,     9,     5,',
          '          3780,   116,     2]]), \'attention_mask\': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],',
          '        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],',
          '        ...',
          '        [ 2.6400,  2.6400,  2.6400,  ...,  1.3502,  0.7925,  1.3502],',
          '          [ 2.6400,  2.6400,  2.6400,  ...,  0.9319,  1.4025,  0.8448],',
          '          [ 2.6400,  2.6400,  2.6400,  ...,  1.0365,  1.2282,  0.8099]]]])}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A entrada bruta tamb√©m tem informa√ß√µes demais, ent√£o vamos dar uma olhada nas chaves.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">sample_inputs</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dict_keys([\'input_ids\', \'attention_mask\', \'pixel_values\'])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, temos o <code>input_ids</code> e o <code>attention_mask</code> que correspondem ao texto de entrada e os <code>pixel_values</code> que correspondem √† imagem. Vamos dar uma olhada no tamanho de cada um</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">sample_inputs</span><span class="p">[</span><span class="s1">\'input_ids\'</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">sample_inputs</span><span class="p">[</span><span class="s1">\'attention_mask\'</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">sample_inputs</span><span class="p">[</span><span class="s1">\'pixel_values\'</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(torch.Size([8, 23]), torch.Size([8, 23]), torch.Size([8, 3, 768, 768]))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Em <code>input_ids</code> e <code>attention_mask</code>, cada elemento tem 28 tokens e, em <code>pixel_values</code>, cada elemento tem 3 canais, 768 pixels de altura e 768 pixels de largura.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos agora dar uma olhada nas respostas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">sample_answers</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'JAMES A. RHODES\',',
          ' \'1-800-992-3284\',',
          ' \'$50,000\',',
          ' \'97.00\',',
          ' \'123\',',
          ' \'1 January 1979 - 31 December 1979\',',
          ' \'$2,720.14\',',
          ' \'GPI\')',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtivemos 8 respostas, pelo mesmo motivo de antes, porque quando criamos o carregador de dados, definimos um tamanho de lote de 8.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">sample_answers</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '8',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos uma fun√ß√£o para fazer o ajuste fino</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span> <span class="nf">train_model</span><span class="p">(</span><span class="n">train_loader</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">processor</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">lr</span><span class="o">=</span><span class="mf">1e-6</span><span class="p">):</span>',
      '          <span class="n">optimizer</span> <span class="o">=</span> <span class="n">AdamW</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="n">lr</span><span class="p">)</span>',
      '          <span class="n">num_training_steps</span> <span class="o">=</span> <span class="n">epochs</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)</span>',
      '          <span class="n">lr_scheduler</span> <span class="o">=</span> <span class="n">get_scheduler</span><span class="p">(</span>',
      '              <span class="n">name</span><span class="o">=</span><span class="s2">"linear"</span><span class="p">,</span>',
      '              <span class="n">optimizer</span><span class="o">=</span><span class="n">optimizer</span><span class="p">,</span>',
      '              <span class="n">num_warmup_steps</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>',
      '              <span class="n">num_training_steps</span><span class="o">=</span><span class="n">num_training_steps</span><span class="p">,</span>',
      '          <span class="p">)</span>',
      '      ',
      '          <span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">epochs</span><span class="p">):</span>',
      '      ',
      '              <span class="c1"># Training phase</span>',
      '              <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\n</span><span class="s2">Training Epoch </span><span class="si">{</span><span class="n">epoch</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">epochs</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      '              <span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>',
      '              <span class="n">train_loss</span> <span class="o">=</span> <span class="mi">0</span>',
      '              <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>',
      '              <span class="k">for</span> <span class="n">batch</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">train_loader</span><span class="p">,</span> <span class="n">desc</span><span class="o">=</span><span class="sa">f</span><span class="s2">"Training Epoch </span><span class="si">{</span><span class="n">epoch</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">epochs</span><span class="si">}</span><span class="s2">"</span><span class="p">):</span>',
      '                  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
      '                  <span class="n">inputs</span><span class="p">,</span> <span class="n">answers</span> <span class="o">=</span> <span class="n">batch</span>',
      '      ',
      '                  <span class="n">input_ids</span> <span class="o">=</span> <span class="n">inputs</span><span class="p">[</span><span class="s2">"input_ids"</span><span class="p">]</span>',
      '                  <span class="n">pixel_values</span> <span class="o">=</span> <span class="n">inputs</span><span class="p">[</span><span class="s2">"pixel_values"</span><span class="p">]</span>',
      '                  <span class="n">labels</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">tokenizer</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">answers</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">"pt"</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">return_token_type_ids</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span><span class="o">.</span><span class="n">input_ids</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '      ',
      '                  <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">input_ids</span><span class="o">=</span><span class="n">input_ids</span><span class="p">,</span> <span class="n">pixel_values</span><span class="o">=</span><span class="n">pixel_values</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">labels</span><span class="p">)</span>',
      '                  <span class="n">loss</span> <span class="o">=</span> <span class="n">outputs</span><span class="o">.</span><span class="n">loss</span>',
      '      ',
      '                  <span class="n">loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span>',
      '                  <span class="n">optimizer</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>',
      '                  <span class="n">lr_scheduler</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>',
      '                  <span class="n">optimizer</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span>',
      '      ',
      '                  <span class="n">train_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>',
      '      ',
      '              <span class="n">avg_train_loss</span> <span class="o">=</span> <span class="n">train_loss</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)</span>',
      '              <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Average Training Loss: </span><span class="si">{</span><span class="n">avg_train_loss</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      '      ',
      '              <span class="c1"># Validation phase</span>',
      '              <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>',
      '              <span class="n">val_loss</span> <span class="o">=</span> <span class="mi">0</span>',
      '              <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>',
      '                  <span class="k">for</span> <span class="n">batch</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">val_loader</span><span class="p">,</span> <span class="n">desc</span><span class="o">=</span><span class="sa">f</span><span class="s2">"Validation Epoch </span><span class="si">{</span><span class="n">epoch</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">epochs</span><span class="si">}</span><span class="s2">"</span><span class="p">):</span>',
      '                      <span class="n">inputs</span><span class="p">,</span> <span class="n">answers</span> <span class="o">=</span> <span class="n">batch</span>',
      '      ',
      '                      <span class="n">input_ids</span> <span class="o">=</span> <span class="n">inputs</span><span class="p">[</span><span class="s2">"input_ids"</span><span class="p">]</span>',
      '                      <span class="n">pixel_values</span> <span class="o">=</span> <span class="n">inputs</span><span class="p">[</span><span class="s2">"pixel_values"</span><span class="p">]</span>',
      '                      <span class="n">labels</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">tokenizer</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">answers</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">"pt"</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">return_token_type_ids</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span><span class="o">.</span><span class="n">input_ids</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '      ',
      '                      <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">input_ids</span><span class="o">=</span><span class="n">input_ids</span><span class="p">,</span> <span class="n">pixel_values</span><span class="o">=</span><span class="n">pixel_values</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">labels</span><span class="p">)</span>',
      '                      <span class="n">loss</span> <span class="o">=</span> <span class="n">outputs</span><span class="o">.</span><span class="n">loss</span>',
      '      ',
      '                      <span class="n">val_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>',
      '      ',
      '              <span class="n">avg_val_loss</span> <span class="o">=</span> <span class="n">val_loss</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">val_loader</span><span class="p">)</span>',
      '              <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Average Validation Loss: </span><span class="si">{</span><span class="n">avg_val_loss</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>





























































      
      <section class="section-block-markdown-cell">
      <p>Treinamos</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">train_model</span><span class="p">(</span><span class="n">train_loader</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">processor</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">lr</span><span class="o">=</span><span class="mf">1e-6</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>
      Training Epoch 1/3
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Training Epoch 1/3: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 4933/4933 [2:45:28&lt;00:00,  2.01s/it]
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>Average Training Loss: 1.153514638062836
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Validation Epoch 1/3: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 669/669 [13:52&lt;00:00,  1.24s/it]
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>Average Validation Loss: 0.7698153616646124
      
      Training Epoch 2/3
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Training Epoch 2/3: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 4933/4933 [2:42:51&lt;00:00,  1.98s/it]
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>Average Training Loss: 0.6530420315007687
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Validation Epoch 2/3: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 669/669 [13:48&lt;00:00,  1.24s/it]
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>Average Validation Loss: 0.725301219375946
      
      Training Epoch 3/3
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Training Epoch 3/3: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 4933/4933 [2:42:52&lt;00:00,  1.98s/it]
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>Average Training Loss: 0.5878197003753292
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Validation Epoch 3/3: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 669/669 [13:45&lt;00:00,  1.23s/it]</pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>Average Validation Loss: 0.716769086751079
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>
      </pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Teste-o-modelo-ajustado">Teste o modelo ajustado<a class="anchor-link" href="#Teste-o-modelo-ajustado"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 14" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora testamos o modelo em alguns documentos do conjunto de testes.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;DocVQA&gt;"</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">'What do you see in this image?'</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_test</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">'image'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>
        <span class="n">display</span><span class="p">(</span><span class="n">data_test</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">'image'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'&lt;DocVQA&gt;': 'CAGR 19%'{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-212.webp" width="350" height="350" alt="image fine-tuning-florence-2 13" loading="lazy">
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'&lt;DocVQA&gt;': 'memorandum'{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-213.webp" width="350" height="350" alt="image fine-tuning-florence-2 14" loading="lazy">
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'&lt;DocVQA&gt;': '14000'{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-214.webp" width="350" height="350" alt="image fine-tuning-florence-2 15" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que ele nos fornece informa√ß√µes</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora vamos testar o conjunto de teste novamente para comparar com o que obtivemos antes de come√ßarmos.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">"&lt;DocVQA&gt;"</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">'What do you see in this image?'</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">'image'</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>
        <span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">'image'</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'&lt;DocVQA&gt;': 'Confidential'{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-215.webp" width="350" height="350" alt="image fine-tuning-florence-2 16" loading="lazy">
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'&lt;DocVQA&gt;': 'Confidential'{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-216.webp" width="350" height="350" alt="image fine-tuning-florence-2 17" loading="lazy">
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>{opening_brace}'&lt;DocVQA&gt;': 'Brown &amp; Williamson Tobacco Corporation Research &amp; Development'{closing_brace}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/fine-tuning-florence-217.webp" width="350" height="350" alt="image fine-tuning-florence-2 18" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ele n√£o apresenta resultados muito bons, mas treinamos apenas 3 √©pocas. Embora possa ser aprimorado com mais treinamento, o que voc√™ pode ver √© que, quando usamos a tag de tarefa <code>&lt;DocVQA&gt;</code> antes, n√£o receb√≠amos resposta, mas agora recebemos.</p>
      </section>
      






    </div>

  </section>

</PostLayout>
