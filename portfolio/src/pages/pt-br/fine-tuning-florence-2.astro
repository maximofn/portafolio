---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Fine tuning Florence-2';
const end_url = 'fine-tuning-florence-2';
const description = 'Voc√™ j√° tem o Florence-2 em seu radar, mas agora quer lev√°-lo para o pr√≥ximo n√≠vel! üöÄ √â hora de fazer o ajuste fino! üíª Nesta postagem, vou orient√°-lo passo a passo no processo de adapta√ß√£o desse modelo multimodal √†s suas necessidades espec√≠ficas. üìä Desde a prepara√ß√£o dos seus dados at√© a configura√ß√£o dos hiperpar√¢metros, mostrarei como obter o m√°ximo do Florence-2. üí° Com PyTorch e Python, faremos com que esse modelo atenda √†s suas necessidades e se torne sua ferramenta confi√°vel para resolver tarefas de linguagem e vis√£o. üìà Portanto, prepare-se para levar seu modelo ao pr√≥ximo n√≠vel e fazer o Florence-2 brilhar em toda a sua gl√≥ria! ‚ú®';
const keywords = 'florence 2, ajuste fino, modelo multimodal, pytorch, python';
const languaje = 'PT';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/Florence-2_fine_tuning_thumnail.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1080
    image_height=778
    image_extension=webp
    article_date=2024-07-18+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Ajuste fino para VQA de documentos"><h2>Ajuste fino para VQA de documentos</h2></a>
      <a class="anchor-link" href="#Conjunto de Dados"><h3>Conjunto de Dados</h3></a>
      <a class="anchor-link" href="#Ajuste fino"><h3>Ajuste fino</h3></a>
      <a class="anchor-link" href="#Testar o modelo fine tuned"><h3>Testar o modelo fine tuned</h3></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Aviso: Este post foi traduzido para o portugu√™s usando um modelo de tradu√ß√£o autom√°tica. Por favor, me avise se encontrar algum erro.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>No post <a href="https://maximofn.com/florence-2/">Florence-2</a> j√° explicamos o modelo Florence-2 e vimos como us√°-lo. Ent√£o, neste post vamos ver como fazer o fine tuning dele.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Ajuste fino para VQA de documentos">Ajuste fino para VQA de documentos<a class="anchor-link" href="#Ajuste fino para VQA de documentos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 11" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Este fine tuning est√° baseado no post de <a href="https://huggingface.co/merve" target="_blank" rel="nofollow noreferrer">Merve Noyan</a>, <a href="https://huggingface.co/andito">Andres Marafioti</a> e <a href="https://huggingface.co/SkalskiP">Piotr Skalski</a>, <a href="https://huggingface.co/blog/finetune-florence2">Fine-tuning Florence-2 - Microsoft's Cutting-edge Vision Language Models</a>, no qual explicam que, embora este m√©todo seja muito completo, n√£o permite fazer perguntas sobre documentos, ent√£o fazem um reentrenamento com o dataset <a href="https://huggingface.co/datasets/HuggingFaceM4/DocumentVQA">DocumentVQA</a></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Conjunto de Dados">Conjunto de Dados<a class="anchor-link" href="#Conjunto de Dados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 12" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Em primeiro lugar, baixamos o dataset. Deixo a vari√°vel <code>dataset_percentage</code> caso voc√™ n√£o queira baixar tudo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">datasets</span><span class="w"> </span><span class="kn">import</span> <span class="n">load_dataset</span>',
      '<span class="w"> </span>',
      '<span class="n">dataset_percentage</span> <span class="o">=</span> <span class="mi">100</span>',
      '<span class="n">data_train</span> <span class="o">=</span> <span class="n">load_dataset</span><span class="p">(</span><span class="s2">&quot;HuggingFaceM4/DocumentVQA&quot;</span><span class="p">,</span> <span class="n">split</span><span class="o">=</span><span class="sa">f</span><span class="s2">&quot;train[:</span><span class="si">{</span><span class="n">dataset_percentage</span><span class="si">}</span><span class="s2">%]&quot;</span><span class="p">)</span>',
      '<span class="n">data_validation</span> <span class="o">=</span> <span class="n">load_dataset</span><span class="p">(</span><span class="s2">&quot;HuggingFaceM4/DocumentVQA&quot;</span><span class="p">,</span> <span class="n">split</span><span class="o">=</span><span class="sa">f</span><span class="s2">&quot;validation[:</span><span class="si">{</span><span class="n">dataset_percentage</span><span class="si">}</span><span class="s2">%]&quot;</span><span class="p">)</span>',
      '<span class="n">data_test</span> <span class="o">=</span> <span class="n">load_dataset</span><span class="p">(</span><span class="s2">&quot;HuggingFaceM4/DocumentVQA&quot;</span><span class="p">,</span> <span class="n">split</span><span class="o">=</span><span class="sa">f</span><span class="s2">&quot;test[:</span><span class="si">{</span><span class="n">dataset_percentage</span><span class="si">}</span><span class="s2">%]&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">data_train</span><span class="p">,</span> <span class="n">data_validation</span><span class="p">,</span> <span class="n">data_test</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(Dataset(&#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;features: [&#x27;questionId&#x27;, &#x27;question&#x27;, &#x27;question_types&#x27;, &#x27;image&#x27;, &#x27;docId&#x27;, &#x27;ucsf_document_id&#x27;, &#x27;ucsf_document_page_no&#x27;, &#x27;answers&#x27;],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;num_rows: 39463',
          '&#x7D;),',
          'Dataset(&#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;features: [&#x27;questionId&#x27;, &#x27;question&#x27;, &#x27;question_types&#x27;, &#x27;image&#x27;, &#x27;docId&#x27;, &#x27;ucsf_document_id&#x27;, &#x27;ucsf_document_page_no&#x27;, &#x27;answers&#x27;],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;num_rows: 5349',
          '&#x7D;),',
          'Dataset(&#x7B;',
          '&#x20;&#x20;&#x20;&#x20;&#x20;features: [&#x27;questionId&#x27;, &#x27;question&#x27;, &#x27;question_types&#x27;, &#x27;image&#x27;, &#x27;docId&#x27;, &#x27;ucsf_document_id&#x27;, &#x27;ucsf_document_page_no&#x27;, &#x27;answers&#x27;],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;num_rows: 5188',
          '&#x7D;))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um subset do dataset se voc√™ quiser fazer o treinamento mais r√°pido, no meu caso eu uso 100% dos dados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">percentage</span> <span class="o">=</span> <span class="mi">1</span>',
      '<span class="w"> </span>',
      '<span class="n">subset_data_train</span> <span class="o">=</span> <span class="n">data_train</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data_train</span><span class="p">)</span> <span class="o">*</span> <span class="n">percentage</span><span class="p">)))</span>',
      '<span class="n">subset_data_validation</span> <span class="o">=</span> <span class="n">data_validation</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data_validation</span><span class="p">)</span> <span class="o">*</span> <span class="n">percentage</span><span class="p">)))</span>',
      '<span class="n">subset_data_test</span> <span class="o">=</span> <span class="n">data_test</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data_test</span><span class="p">)</span> <span class="o">*</span> <span class="n">percentage</span><span class="p">)))</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;train dataset length: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">subset_data_train</span><span class="p">)</span><span class="si">}</span><span class="s2">, validation dataset length: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">subset_data_validation</span><span class="p">)</span><span class="si">}</span><span class="s2">, test dataset length: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">subset_data_test</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'train dataset length: 39463, validation dataset length: 5349, test dataset length: 5188',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Instanciamos tamb√©m o modelo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">transformers</span><span class="w"> </span><span class="kn">import</span> <span class="n">AutoModelForCausalLM</span><span class="p">,</span> <span class="n">AutoProcessor</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">torch</span>',
      '<span class="w"> </span>',
      '<span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s2">&quot;cuda&quot;</span> <span class="k">if</span> <span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="s2">&quot;cpu&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">checkpoints</span> <span class="o">=</span> <span class="s1">&#39;microsoft/Florence-2-base-ft&#39;</span>',
      '<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">checkpoints</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '<span class="n">processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">checkpoints</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Assim como no post <a href="https://maximofn.com/florence-2/">Florence-2</a> criamos uma fun√ß√£o para pedir respostas ao modelo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">create_prompt</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="n">text_input</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span>',
      '<span class="w">    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span> <span class="o">+</span> <span class="n">text_input</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">prompt</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="s2">&quot;cpu&quot;</span><span class="p">):</span>',
      '<span class="w">    </span><span class="c1"># Create prompt</span>',
      '<span class="w">    </span><span class="n">prompt</span> <span class="o">=</span> <span class="n">create_prompt</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Ensure the image is in RGB mode</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="n">image</span><span class="o">.</span><span class="n">mode</span> <span class="o">!=</span> <span class="s2">&quot;RGB&quot;</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s2">&quot;RGB&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Get inputs</span>',
      '<span class="w">    </span><span class="n">inputs</span> <span class="o">=</span> <span class="n">processor</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span> <span class="n">images</span><span class="o">=</span><span class="n">image</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">&quot;pt&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Get outputs</span>',
      '<span class="w">    </span><span class="n">generated_ids</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span>',
      '<span class="w">      </span><span class="n">input_ids</span><span class="o">=</span><span class="n">inputs</span><span class="p">[</span><span class="s2">&quot;input_ids&quot;</span><span class="p">],</span>',
      '<span class="w">      </span><span class="n">pixel_values</span><span class="o">=</span><span class="n">inputs</span><span class="p">[</span><span class="s2">&quot;pixel_values&quot;</span><span class="p">],</span>',
      '<span class="w">      </span><span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span>',
      '<span class="w">      </span><span class="n">early_stopping</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
      '<span class="w">      </span><span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
      '<span class="w">      </span><span class="n">num_beams</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>',
      '<span class="w">    </span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Decode the generated IDs</span>',
      '<span class="w">    </span><span class="n">generated_text</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">batch_decode</span><span class="p">(</span><span class="n">generated_ids</span><span class="p">,</span> <span class="n">skip_special_tokens</span><span class="o">=</span><span class="kc">False</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Post-process the generated text</span>',
      '<span class="w">    </span><span class="n">parsed_answer</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">post_process_generation</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">generated_text</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">task</span><span class="o">=</span><span class="n">task_prompt</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">image_size</span><span class="o">=</span><span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>',
      '<span class="w">    </span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">parsed_answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Testamos o modelo com 3 documentos do conjunto de dados, com a tarefa <code>DocVQA</code> para ver se obtemos algo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">&quot;&amp;lt;DocVQA&amp;gt;&quot;</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">&#39;What do you see in this image?&#39;</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '<span class="w">  </span><span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;docvQA&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;docvQA&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;DocVQA&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">&quot;DocVQA&quot;</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">&#39;What do you see in this image?&#39;</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '<span class="w">  </span><span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;DocVQA&#x27;: &#x27;unanswerable&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;DocVQA&#x27;: &#x27;unanswerable&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;DocVQA&#x27;: &#x27;499150498&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que as respostas n√£o s√£o boas.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Testamos agora com a tarefa <code>OCR</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">&quot;&amp;lt;OCR&amp;gt;&quot;</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '<span class="w">  </span><span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;OCR&amp;gt;&#x27;: &#x27;ConfidentialDATE:11/8/18RJT FR APPROVALBUBJECT: Rl gdasPROPOSED RELEASE DATE:for responseFOR RELEASE TO!CONTRACT: P. CARTERROUTE TO!NameIntiifnPeggy CarterAce11/fesMura PayneDavid Fishhel037Tom Gisis Com-Diane BarrowsEd BlackmerTow KuckerReturn to Peggy Carter, PR, 16 Raynolds BuildingLLS. 2015Source: https://www.industrydocuments.ucsf.edu/docs/xnbl0037&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;OCR&amp;gt;&#x27;: &#x27;ConfidentialDATE:11/8/18RJT FR APPROVALBUBJECT: Rl gdasPROPOSED RELEASE DATE:for responseFOR RELEASE TO!CONTRACT: P. CARTERROUTE TO!NameIntiifnPeggy CarterAce11/fesMura PayneDavid Fishhel037Tom Gisis Com-Diane BarrowsEd BlackmerTow KuckerReturn to Peggy Carter, PR, 16 Raynolds BuildingLLS. 2015Source: https://www.industrydocuments.ucsf.edu/docs/xnbl0037&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;OCR&amp;gt;&#x27;: &#x27;BSABROWN &amp;amp; WILLIAMSON JOBACCO CORPORATIONRESEARCH &amp;amp; DEVELOPMENTINTERNAL CORRESPONDENCETO:R. H. HoneycuttCC:C.J. CookFROM:May 9, 1995SUBJECT: Review of Existing Brainstorming Ideas/43The major function of the Product Innovation Ideas is developed marketable novel productsthat would be profile of the manufacturer and sell. Novel is defined as: a new kind, or differentfrom anything seen in known before, Innovation things as something is available. The products mayintroduced and the most technologies, materials and know, available to give a uniquetaste or tok.The first task of the product innovation was was an easy-view review and then a list ofexisting brainstorming ideas. These were group was used for two major categories that may differapparance and lerato,Ideas are grouped into two major products that may offercategories include a combination print of the above, flowers, and packaged and brand directions.ApparanceThis category is used in a novel cigarette constructions that yield visually different products withminimal changes in smokecigarette.Two cigarettes in one.Multi-plug in your.C-Switch menthol or non non smoking cigarette.E-Switch with ORPORated perforations to enable smoke to separate unburned section forfuture smoking.Tout smoking.Bobace section 30 mm.Novelcigarette constructions and permit a significant reduction in tobacco weight whilemaintaining fast smoking mechanics and visual reduction for tobacco weight.higher basis weight paper, potential reduction for cigarette weight.Easter or in an ebony agent for tobacco, e.g. starch.Colored tow and cigarette papers; seasonal promotions, eg. pastel colored cigarettes forEaster and in an Ebony brand containing a mixture of all black (black paper and tow)and all white cigarettes.499150498Source: https://www.industrydocuments.ucs.edu/docs/mxj0037&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtemos o texto dos documentos, mas n√£o do que tratam os documentos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por √∫ltimo, provamos com as tarefas <code>CAPTION</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">&quot;&amp;lt;CAPTION&amp;gt;&quot;</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">&quot;&amp;lt;DETAILED_CAPTION&amp;gt;&quot;</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">&quot;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&quot;</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '<span class="w">  </span><span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;CAPTION&amp;gt;&#x27;: &#x27;A certificate is stamped with the date of 18/18.&#x27;&#x7D;',
          '&#x7B;&#x27;&amp;lt;DETAILED_CAPTION&amp;gt;&#x27;: &#x27;In this image we can see a paper with some text on it.&#x27;&#x7D;',
          '&#x7B;&#x27;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#x27;: &#x27;A letter is written in black ink on a white paper. The letters are written in a cursive language. The letter is addressed to peggy carter. &#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;CAPTION&amp;gt;&#x27;: &#x27;A certificate is stamped with the date of 18/18.&#x27;&#x7D;',
          '&#x7B;&#x27;&amp;lt;DETAILED_CAPTION&amp;gt;&#x27;: &#x27;In this image we can see a paper with some text on it.&#x27;&#x7D;',
          '&#x7B;&#x27;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#x27;: &#x27;A letter is written in black ink on a white paper. The letters are written in a cursive language. The letter is addressed to peggy carter. &#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;CAPTION&amp;gt;&#x27;: &quot;a paper that says &#x27;brown &amp;amp; williamson tobacco corporation research &amp;amp; development&#x27; on it&quot;&#x7D;',
          '&#x7B;&#x27;&amp;lt;DETAILED_CAPTION&amp;gt;&#x27;: &#x27;In this image we can see a paper with some text on it.&#x27;&#x7D;',
          '&#x7B;&#x27;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#x27;: &#x27;The image is a page from a book titled &quot;Brown &amp;amp; Williamson Jobacco Corporation Research &amp;amp; Development&quot;.  The page is white and has black text.  The title of the page is &quot;R. H. Honeycutt&quot; at the top.  There is a logo of the company BSA in the top right corner.  A paragraph is written in black text below the title.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos realizar o ajuste fino (fine tuning) ent√£o. Aqui est√° a tradu√ß√£o:</p>
      <p>Tamb√©m n√£o aceitamos essas respostas, ent√£o vamos fazer o fine tuning.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Ajuste fino">Ajuste fino<a class="anchor-link" href="#Ajuste fino"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 13" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro criamos um dataset do Pytorch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">torch.utils.data</span><span class="w"> </span><span class="kn">import</span> <span class="n">Dataset</span>',
      '<span class="w"> </span>',
      '<span class="k">class</span><span class="w"> </span><span class="nc">DocVQADataset</span><span class="p">(</span><span class="n">Dataset</span><span class="p">):</span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>',
      '<span class="w">        </span><span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">def</span><span class="w"> </span><span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>',
      '<span class="w">        </span><span class="n">example</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>',
      '<span class="w">        </span><span class="n">question</span> <span class="o">=</span> <span class="s2">&quot;&amp;lt;DocVQA&amp;gt;&quot;</span> <span class="o">+</span> <span class="n">example</span><span class="p">[</span><span class="s1">&#39;question&#39;</span><span class="p">]</span>',
      '<span class="w">        </span><span class="n">first_answer</span> <span class="o">=</span> <span class="n">example</span><span class="p">[</span><span class="s1">&#39;answers&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w">        </span><span class="n">image</span> <span class="o">=</span> <span class="n">example</span><span class="p">[</span><span class="s1">&#39;image&#39;</span><span class="p">]</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">image</span><span class="o">.</span><span class="n">mode</span> <span class="o">!=</span> <span class="s2">&quot;RGB&quot;</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s2">&quot;RGB&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="k">return</span> <span class="n">question</span><span class="p">,</span> <span class="n">first_answer</span><span class="p">,</span> <span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">train_dataset</span> <span class="o">=</span> <span class="n">DocVQADataset</span><span class="p">(</span><span class="n">subset_data_train</span><span class="p">)</span>',
      '<span class="n">val_dataset</span> <span class="o">=</span> <span class="n">DocVQADataset</span><span class="p">(</span><span class="n">subset_data_validation</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a v√™-lo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">train_dataset</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(&#x27;&amp;lt;DocVQA&amp;gt;what is the date mentioned in this letter?&#x27;,',
          '&#x27;1/8/93&#x27;,',
          '&amp;lt;PIL.Image.Image image mode=RGB size=1695x2025&amp;gt;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">data_train</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;questionId&#x27;: 337,',
          '&#x27;question&#x27;: &#x27;what is the date mentioned in this letter?&#x27;,',
          '&#x27;question_types&#x27;: [&#x27;handwritten&#x27;, &#x27;form&#x27;],',
          '&#x27;image&#x27;: &amp;lt;PIL.PngImagePlugin.PngImageFile image mode=L size=1695x2025&amp;gt;,',
          '&#x27;docId&#x27;: 279,',
          '&#x27;ucsf_document_id&#x27;: &#x27;xnbl0037&#x27;,',
          '&#x27;ucsf_document_page_no&#x27;: &#x27;1&#x27;,',
          '&#x27;answers&#x27;: [&#x27;1/8/93&#x27;]&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos um DataLoader</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">os</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">torch.utils.data</span><span class="w"> </span><span class="kn">import</span> <span class="n">DataLoader</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">tqdm</span><span class="w"> </span><span class="kn">import</span> <span class="n">tqdm</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">transformers</span><span class="w"> </span><span class="kn">import</span> <span class="p">(</span><span class="n">AdamW</span><span class="p">,</span> <span class="n">AutoProcessor</span><span class="p">,</span> <span class="n">get_scheduler</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">collate_fn</span><span class="p">(</span><span class="n">batch</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">questions</span><span class="p">,</span> <span class="n">answers</span><span class="p">,</span> <span class="n">images</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">batch</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">inputs</span> <span class="o">=</span> <span class="n">processor</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">questions</span><span class="p">),</span> <span class="n">images</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">images</span><span class="p">),</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">&quot;pt&quot;</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">answers</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create DataLoader</span>',
      '<span class="n">batch_size</span> <span class="o">=</span> <span class="mi">8</span>',
      '<span class="n">num_workers</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="w"> </span>',
      '<span class="n">train_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">train_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">collate_fn</span><span class="o">=</span><span class="n">collate_fn</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="n">num_workers</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      '<span class="n">val_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">val_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">collate_fn</span><span class="o">=</span><span class="n">collate_fn</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="n">num_workers</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver um exemplo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">sample</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="nb">iter</span><span class="p">(</span><span class="n">train_loader</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">sample</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(&#x7B;&#x27;input_ids&#x27;: tensor([[    0, 41552, 42291,   846,  1864,   250, 15698, 12375,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;3383,     9,   331,     9,  2042,   116,     2,     1,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;11968,   196,   205, 22922,   346, 17487,     2,     1,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1229,    13,   403,   690,   116,     2,     1,     1,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;5480,  1280,   116,     2,     1,     1,     1,     1,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698, 12196,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1842,   346,    13,    20,  4680, 41828, 42237,     8, 30147, 17487,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;2,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,   560,    61,   675,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;473,    42,  1013,   266,  9943,     7,   116,     2,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698, 12196,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1280,     9, 39432,   642,  6228,  2394,  2801,    11,     5,   576,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;266, 17487,     2],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,  1982,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;11,     5,  6655,  2325,    23,     5,   299,   235,     9,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;3780,   116,     2]]), &#x27;attention_mask&#x27;: tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;...',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x27;97.00&#x27;,',
          '&#x20;&#x20;&#x27;123&#x27;,',
          '&#x20;&#x20;&#x27;1 January 1979 - 31 December 1979&#x27;,',
          '&#x20;&#x20;&#x27;$2,720.14&#x27;,',
          '&#x20;&#x20;&#x27;GPI&#x27;))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A amostra bruta √© muita informa√ß√£o, ent√£o vamos ver o comprimento da amostra</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">sample</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtemos uma comprimento de 2 porque temos a entrada do modelo e a resposta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">sample_inputs</span> <span class="o">=</span> <span class="n">sample</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="n">sample_answers</span> <span class="o">=</span> <span class="n">sample</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos a entrada</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">sample_inputs</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;input_ids&#x27;: tensor([[    0, 41552, 42291,   846,  1864,   250, 15698, 12375,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;3383,     9,   331,     9,  2042,   116,     2,     1,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;11968,   196,   205, 22922,   346, 17487,     2,     1,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1229,    13,   403,   690,   116,     2,     1,     1,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;5480,  1280,   116,     2,     1,     1,     1,     1,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698, 12196,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1842,   346,    13,    20,  4680, 41828, 42237,     8, 30147, 17487,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;2,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,   560,    61,   675,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;473,    42,  1013,   266,  9943,     7,   116,     2,     1,     1,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1,     1,     1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698, 12196,    16,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;1280,     9, 39432,   642,  6228,  2394,  2801,    11,     5,   576,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;266, 17487,     2],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[    0, 41552, 42291,   846,  1864,   250, 15698,  2264,    16,  1982,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;11,     5,  6655,  2325,    23,     5,   299,   235,     9,     5,',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;3780,   116,     2]]), &#x27;attention_mask&#x27;: tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;...',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[ 2.6400,  2.6400,  2.6400,  ...,  1.3502,  0.7925,  1.3502],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[ 2.6400,  2.6400,  2.6400,  ...,  0.9319,  1.4025,  0.8448],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[ 2.6400,  2.6400,  2.6400,  ...,  1.0365,  1.2282,  0.8099]]]])&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A entrada em bruto tamb√©m tem muita informa√ß√£o, ent√£o vamos ver as keys</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">sample_inputs</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'dict_keys([&#x27;input_ids&#x27;, &#x27;attention_mask&#x27;, &#x27;pixel_values&#x27;])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, temos os <code>input_ids</code> e os <code>attention_mask</code>, que correspondem ao texto de entrada, e os <code>pixel_values</code>, que correspondem √† imagem. Vamos ver a dimens√£o de cada um.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">sample_inputs</span><span class="p">[</span><span class="s1">&#39;input_ids&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">sample_inputs</span><span class="p">[</span><span class="s1">&#39;attention_mask&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">sample_inputs</span><span class="p">[</span><span class="s1">&#39;pixel_values&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(torch.Size([8, 23]), torch.Size([8, 23]), torch.Size([8, 3, 768, 768]))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Em todos h√° 8 elementos, porque ao criar o dataloader colocamos um batch size de 8. Nos <code>input_ids</code> e <code>attention_mask</code> cada elemento tem 28 tokens e nos <code>pixel_values</code> cada elemento tem 3 canais, 768 pixels de altura e 768 pixels de largura</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos agora ver as respostas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">sample_answers</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(&#x27;JAMES A. RHODES&#x27;,',
          '&#x27;1-800-992-3284&#x27;,',
          '&#x27;$50,000&#x27;,',
          '&#x27;97.00&#x27;,',
          '&#x27;123&#x27;,',
          '&#x27;1 January 1979 - 31 December 1979&#x27;,',
          '&#x27;$2,720.14&#x27;,',
          '&#x27;GPI&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtivemos 8 respostas, pelo mesmo motivo de antes, pois ao criar o dataloader definimos um batch size de 8</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">sample_answers</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '8',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos uma fun√ß√£o para fazer o fine tuning</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">train_model</span><span class="p">(</span><span class="n">train_loader</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">processor</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">lr</span><span class="o">=</span><span class="mf">1e-6</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">optimizer</span> <span class="o">=</span> <span class="n">AdamW</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="n">lr</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">num_training_steps</span> <span class="o">=</span> <span class="n">epochs</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">lr_scheduler</span> <span class="o">=</span> <span class="n">get_scheduler</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;linear&quot;</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">optimizer</span><span class="o">=</span><span class="n">optimizer</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">num_warmup_steps</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">num_training_steps</span><span class="o">=</span><span class="n">num_training_steps</span><span class="p">,</span>',
      '<span class="w">    </span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">epochs</span><span class="p">):</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="c1"># Training phase</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Training Epoch </span><span class="si">{</span><span class="n">epoch</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">epochs</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>',
      '<span class="w">        </span><span class="n">train_loss</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="w">        </span><span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>',
      '<span class="w">        </span><span class="k">for</span> <span class="n">batch</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">train_loader</span><span class="p">,</span> <span class="n">desc</span><span class="o">=</span><span class="sa">f</span><span class="s2">&quot;Training Epoch </span><span class="si">{</span><span class="n">epoch</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">epochs</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">):</span>',
      '<span class="w">            </span><span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">            </span><span class="n">inputs</span><span class="p">,</span> <span class="n">answers</span> <span class="o">=</span> <span class="n">batch</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">input_ids</span> <span class="o">=</span> <span class="n">inputs</span><span class="p">[</span><span class="s2">&quot;input_ids&quot;</span><span class="p">]</span>',
      '<span class="w">            </span><span class="n">pixel_values</span> <span class="o">=</span> <span class="n">inputs</span><span class="p">[</span><span class="s2">&quot;pixel_values&quot;</span><span class="p">]</span>',
      '<span class="w">            </span><span class="n">labels</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">tokenizer</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">answers</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">&quot;pt&quot;</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">return_token_type_ids</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span><span class="o">.</span><span class="n">input_ids</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">input_ids</span><span class="o">=</span><span class="n">input_ids</span><span class="p">,</span> <span class="n">pixel_values</span><span class="o">=</span><span class="n">pixel_values</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">labels</span><span class="p">)</span>',
      '<span class="w">            </span><span class="n">loss</span> <span class="o">=</span> <span class="n">outputs</span><span class="o">.</span><span class="n">loss</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">optimizer</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">lr_scheduler</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>',
      '<span class="w">            </span><span class="n">optimizer</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">            </span><span class="n">train_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="n">avg_train_loss</span> <span class="o">=</span> <span class="n">train_loss</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Average Training Loss: </span><span class="si">{</span><span class="n">avg_train_loss</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="c1"># Validation phase</span>',
      '<span class="w">        </span><span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>',
      '<span class="w">        </span><span class="n">val_loss</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="w">        </span><span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>',
      '<span class="w">            </span><span class="k">for</span> <span class="n">batch</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">val_loader</span><span class="p">,</span> <span class="n">desc</span><span class="o">=</span><span class="sa">f</span><span class="s2">&quot;Validation Epoch </span><span class="si">{</span><span class="n">epoch</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">epochs</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">):</span>',
      '<span class="w">                </span><span class="n">inputs</span><span class="p">,</span> <span class="n">answers</span> <span class="o">=</span> <span class="n">batch</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="n">input_ids</span> <span class="o">=</span> <span class="n">inputs</span><span class="p">[</span><span class="s2">&quot;input_ids&quot;</span><span class="p">]</span>',
      '<span class="w">                </span><span class="n">pixel_values</span> <span class="o">=</span> <span class="n">inputs</span><span class="p">[</span><span class="s2">&quot;pixel_values&quot;</span><span class="p">]</span>',
      '<span class="w">                </span><span class="n">labels</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">tokenizer</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">answers</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">&quot;pt&quot;</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">return_token_type_ids</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span><span class="o">.</span><span class="n">input_ids</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">input_ids</span><span class="o">=</span><span class="n">input_ids</span><span class="p">,</span> <span class="n">pixel_values</span><span class="o">=</span><span class="n">pixel_values</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">labels</span><span class="p">)</span>',
      '<span class="w">                </span><span class="n">loss</span> <span class="o">=</span> <span class="n">outputs</span><span class="o">.</span><span class="n">loss</span>',
      '<span class="w"> </span>',
      '<span class="w">                </span><span class="n">val_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="n">avg_val_loss</span> <span class="o">=</span> <span class="n">val_loss</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">val_loader</span><span class="p">)</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Average Validation Loss: </span><span class="si">{</span><span class="n">avg_val_loss</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Treinamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">train_model</span><span class="p">(</span><span class="n">train_loader</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">processor</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">lr</span><span class="o">=</span><span class="mf">1e-6</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Training Epoch 1/3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Training Epoch 1/3: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 4933/4933 [2:45:28&amp;lt;00:00,  2.01s/it]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Average Training Loss: 1.153514638062836',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Validation Epoch 1/3: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 669/669 [13:52&amp;lt;00:00,  1.24s/it]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Average Validation Loss: 0.7698153616646124',
          'Training Epoch 2/3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Training Epoch 2/3: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 4933/4933 [2:42:51&amp;lt;00:00,  1.98s/it]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Average Training Loss: 0.6530420315007687',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Validation Epoch 2/3: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 669/669 [13:48&amp;lt;00:00,  1.24s/it]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Average Validation Loss: 0.725301219375946',
          'Training Epoch 3/3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Training Epoch 3/3: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 4933/4933 [2:42:52&amp;lt;00:00,  1.98s/it]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Average Training Loss: 0.5878197003753292',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Validation Epoch 3/3: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 669/669 [13:45&amp;lt;00:00,  1.23s/it]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'Average Validation Loss: 0.716769086751079',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[

        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Testar o modelo fine tuned">Testar o modelo fine tuned<a class="anchor-link" href="#Testar o modelo fine tuned"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 14" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Testamos agora o modelo em alguns documentos do conjunto de teste</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">&quot;&amp;lt;DocVQA&amp;gt;&quot;</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">&#39;What do you see in this image?&#39;</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_test</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '<span class="w">  </span><span class="n">display</span><span class="p">(</span><span class="n">data_test</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;CAGR 19%&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;memorandum&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;14000&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que nos d√° informa√ß√£o</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos agora a voltar a testar sobre o conjunto de teste, para comparar com o que sa√≠a antes de treinar</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="o">=</span><span class="s2">&quot;&amp;lt;DocVQA&amp;gt;&quot;</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="s1">&#39;What do you see in this image?&#39;</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">],</span> <span class="n">device</span><span class="o">=</span><span class="n">model</span><span class="o">.</span><span class="n">device</span><span class="p">))</span>',
      '<span class="w">  </span><span class="n">display</span><span class="p">(</span><span class="n">data_train</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s1">&#39;image&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">resize</span><span class="p">([</span><span class="mi">350</span><span class="p">,</span> <span class="mi">350</span><span class="p">]))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;Confidential&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;Confidential&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DocVQA&amp;gt;&#x27;: &#x27;Brown &amp;amp; Williamson Tobacco Corporation Research &amp;amp; Development&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=L size=350x350&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>N√£o d√° muito bons resultados, mas s√≥ treinamos por 3 epochs. Embora pudesse melhorar treinando mais, o que se pode ver √© que quando antes us√°vamos a tag de tarefa <code>&#x3C;DocVQA&#x3E;</code> n√£o obt√≠nhamos resposta, mas agora sim.</p>
      </section>







    </div>

  </section>

</PostLayout>
