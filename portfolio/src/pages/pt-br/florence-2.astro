---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Florence-2';
const end_url = 'florence-2';
const description = 'Aten√ß√£o a todos üö®! Temos um novo rei na cidade üëë! Florence-2, o modelo multimodal que est√° revolucionando o jogo da intelig√™ncia artificial. ü§Ø Com apenas 200 milh√µes de par√¢metros em sua vers√£o b√°sica (ou 700 milh√µes em sua vers√£o grande, para aqueles que querem tudo üí•), esse modelo est√° varrendo os benchmarks, superando modelos com 10 e 100 vezes mais par√¢metros ü§Ø. √â como ter um canivete su√≠√ßo em seu kit de ferramentas de IA! üó°Ô∏è Modifique o prompt e pronto, o Florence-2 se adapta a qualquer tarefa que voc√™ precisar. üîß Em resumo, o Florence-2 √© o novo modelo SOTA (State-Of-The-Art) em MLLM (Multimodal Language Models) e voc√™ n√£o pode perd√™-lo. üöÄ Vamos ver que outras surpresas essa fera nos reserva! ü§î';
const keywords = 'florence 2, florence-2, microsoft, multimodal, slm, mllm, smlm';
const languaje = 'PT';
const image_path = 'https://images.maximofn.com/Florence-2_thumnail.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1920
    image_height=1440
    image_extension=webp
    article_date=2024-06-23+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Artigo"><h2>Artigo</h2></a>
      <a class="anchor-link" href="#Resumo do artigo"><h2>Resumo do artigo</h2></a>
      <a class="anchor-link" href="#Arquitetura"><h2>Arquitetura</h2></a>
      <a class="anchor-link" href="#Codificador de visao"><h3>Codificador de vis√£o</h3></a>
      <a class="anchor-link" href="#Codificador-decodificador multimodal"><h3>Codificador-decodificador multimodal</h3></a>
      <a class="anchor-link" href="#Objetivo de otimizacao"><h3>Objetivo de otimiza√ß√£o</h3></a>
      <a class="anchor-link" href="#Conjunto de Dados"><h2>Conjunto de Dados</h2></a>
      <a class="anchor-link" href="#Coleta das imagens"><h3>Coleta das imagens</h3></a>
      <a class="anchor-link" href="#Etiquetagem das imagens"><h3>Etiquetagem das imagens</h3></a>
      <a class="anchor-link" href="#Treinamento"><h2>Treinamento</h2></a>
      <a class="anchor-link" href="#Resultados"><h2>Resultados</h2></a>
      <a class="anchor-link" href="#Avaliacao zero-shot"><h3>Avalia√ß√£o zero-shot</h3></a>
      <a class="anchor-link" href="#Modelo generalista com dados supervisionados publicos"><h3>Modelo generalista com dados supervisionados p√∫blicos</h3></a>
      <a class="anchor-link" href="#Modelos disponiveis"><h2>Modelos dispon√≠veis</h2></a>
      <a class="anchor-link" href="#Tarefas definidas pelo prompt"><h2>Tarefas definidas pelo prompt</h2></a>
      <a class="anchor-link" href="#Uso de Florence-2 grande"><h2>Uso de Florence-2 grande</h2></a>
      <a class="anchor-link" href="#Tarefas sem prompts adicionais"><h3>Tarefas sem prompts adicionais</h3></a>
      <a class="anchor-link" href="#Legenda"><h4>Legenda</h4></a>
      <a class="anchor-link" href="#Proposta de regiao"><h4>Proposta de regi√£o</h4></a>
      <a class="anchor-link" href="#Deteccao de objetos"><h4>Detec√ß√£o de objetos</h4></a>
      <a class="anchor-link" href="#Legenda da regiao densa"><h4>Legenda da regi√£o densa</h4></a>
      <a class="anchor-link" href="#Tarefas com prompts adicionais"><h3>Tarefas com prompts adicionais</h3></a>
      <a class="anchor-link" href="#Anchoragem de Frases"><h4>Anchoragem de Frases</h4></a>
      <a class="anchor-link" href="#Segmentacao de expressao referencial"><h4>Segmenta√ß√£o de express√£o referencial</h4></a>
      <a class="anchor-link" href="#Regiao para segmentacao"><h4>Regi√£o para segmenta√ß√£o</h4></a>
      <a class="anchor-link" href="#Deteccao de vocabulario aberto"><h4>Detec√ß√£o de vocabul√°rio aberto</h4></a>
      <a class="anchor-link" href="#Regiao para categoria"><h4>Regi√£o para categoria</h4></a>
      <a class="anchor-link" href="#Regiao para descricao"><h4>Regi√£o para descri√ß√£o</h4></a>
      <a class="anchor-link" href="#Tarefas OCR"><h3>Tarefas OCR</h3></a>
      <a class="anchor-link" href="#OCR"><h4>OCR</h4></a>
      <a class="anchor-link" href="#OCR com regiao"><h4>OCR com regi√£o</h4></a>
      <a class="anchor-link" href="#Uso do Florence-2 large fine tuning"><h2>Uso do Florence-2 large fine tuning</h2></a>
      <a class="anchor-link" href="#Tarefas sem prompts adicionais"><h3>Tarefas sem prompts adicionais</h3></a>
      <a class="anchor-link" href="#Legenda"><h4>Legenda</h4></a>
      <a class="anchor-link" href="#Proposta de regiao"><h4>Proposta de regi√£o</h4></a>
      <a class="anchor-link" href="#Deteccao de objetos"><h4>Detec√ß√£o de objetos</h4></a>
      <a class="anchor-link" href="#Legenda da regiao densa"><h4>Legenda da regi√£o densa</h4></a>
      <a class="anchor-link" href="#Tarefas com prompts adicionais"><h3>Tarefas com prompts adicionais</h3></a>
      <a class="anchor-link" href="#Anchoragem de Frase"><h4>Anchoragem de Frase</h4></a>
      <a class="anchor-link" href="#Segmentacao de expressao de referencia"><h4>Segmenta√ß√£o de express√£o de refer√™ncia</h4></a>
      <a class="anchor-link" href="#Regiao para segmentacao"><h4>Regi√£o para segmenta√ß√£o</h4></a>
      <a class="anchor-link" href="#Deteccao de vocabulario aberto"><h4>Detec√ß√£o de vocabul√°rio aberto</h4></a>
      <a class="anchor-link" href="#Regiao para categoria"><h4>Regi√£o para categoria</h4></a>
      <a class="anchor-link" href="#Regiao para descricao"><h4>Regi√£o para descri√ß√£o</h4></a>
      <a class="anchor-link" href="#Tarefas OCR"><h3>Tarefas OCR</h3></a>
      <a class="anchor-link" href="#OCR"><h4>OCR</h4></a>
      <a class="anchor-link" href="#OCR com regiao"><h4>OCR com regi√£o</h4></a>
      <a class="anchor-link" href="#Uso de Florence-2 base"><h2>Uso de Florence-2 base</h2></a>
      <a class="anchor-link" href="#Tarefas sem prompts adicionais"><h3>Tarefas sem prompts adicionais</h3></a>
      <a class="anchor-link" href="#Legenda"><h4>Legenda</h4></a>
      <a class="anchor-link" href="#Proposta de regiao"><h4>Proposta de regi√£o</h4></a>
      <a class="anchor-link" href="#Deteccao de objetos"><h4>Detec√ß√£o de objetos</h4></a>
      <a class="anchor-link" href="#Legenda da regiao densa"><h4>Legenda da regi√£o densa</h4></a>
      <a class="anchor-link" href="#Tarefas com prompts adicionais"><h3>Tarefas com prompts adicionais</h3></a>
      <a class="anchor-link" href="#Anchoragem de Frase"><h4>Anchoragem de Frase</h4></a>
      <a class="anchor-link" href="#Segmentacao de expressao de referencia"><h4>Segmenta√ß√£o de express√£o de refer√™ncia</h4></a>
      <a class="anchor-link" href="#Regiao para segmentacao"><h4>Regi√£o para segmenta√ß√£o</h4></a>
      <a class="anchor-link" href="#Deteccao de vocabulario aberto"><h4>Detec√ß√£o de vocabul√°rio aberto</h4></a>
      <a class="anchor-link" href="#Regiao para categoria"><h4>Regi√£o para categoria</h4></a>
      <a class="anchor-link" href="#Regiao para descricao"><h4>Regi√£o para descri√ß√£o</h4></a>
      <a class="anchor-link" href="#Tarefas OCR"><h3>Tarefas OCR</h3></a>
      <a class="anchor-link" href="#OCR"><h4>OCR</h4></a>
      <a class="anchor-link" href="#OCR com regiao"><h4>OCR com regi√£o</h4></a>
      <a class="anchor-link" href="#Uso do Florence-2 base fine tuning"><h2>Uso do Florence-2 base fine tuning</h2></a>
      <a class="anchor-link" href="#Tarefas sem prompts adicionais"><h3>Tarefas sem prompts adicionais</h3></a>
      <a class="anchor-link" href="#Legenda"><h4>Legenda</h4></a>
      <a class="anchor-link" href="#Proposta de regiao"><h4>Proposta de regi√£o</h4></a>
      <a class="anchor-link" href="#Deteccao de objetos"><h4>Detec√ß√£o de objetos</h4></a>
      <a class="anchor-link" href="#Legenda da regiao densa"><h4>Legenda da regi√£o densa</h4></a>
      <a class="anchor-link" href="#Tarefas com prompts adicionais"><h3>Tarefas com prompts adicionais</h3></a>
      <a class="anchor-link" href="#Ancoragem de Frase"><h4>Ancoragem de Frase</h4></a>
      <a class="anchor-link" href="#Segmentacao de expressao de referencia"><h4>Segmenta√ß√£o de express√£o de refer√™ncia</h4></a>
      <a class="anchor-link" href="#Regiao para segmentacao"><h4>Regi√£o para segmenta√ß√£o</h4></a>
      <a class="anchor-link" href="#Deteccao de vocabulario aberto"><h4>Detec√ß√£o de vocabul√°rio aberto</h4></a>
      <a class="anchor-link" href="#Regiao para categoria"><h4>Regi√£o para categoria</h4></a>
      <a class="anchor-link" href="#Regiao para descricao"><h4>Regi√£o para descri√ß√£o</h4></a>
      <a class="anchor-link" href="#Tarefas OCR"><h3>Tarefas OCR</h3></a>
      <a class="anchor-link" href="#OCR"><h4>OCR</h4></a>
      <a class="anchor-link" href="#OCR com regiao"><h4>OCR com regi√£o</h4></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Aviso: Este post foi traduzido para o portugu√™s usando um modelo de tradu√ß√£o autom√°tica. Por favor, me avise se encontrar algum erro.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Artigo">Artigo<a class="anchor-link" href="#Artigo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 161" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><a href="https://arxiv.org/abs/2311.06242" target="_blank" rel="nofollow noreferrer">Florence-2: Avan√ßando uma Representa√ß√£o Unificada para uma Variedade de Tarefas de Vis√£o</a> √© o paper do Florence-2.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Resumo do artigo">Resumo do artigo<a class="anchor-link" href="#Resumo do artigo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 162" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Florence-2 √© um modelo fundacional de vis√£o com uma representa√ß√£o unificada, baseado em prompts, para uma variedade de tarefas de vis√£o e vis√£o-linguagem.</p>
      <p>Os modelos grandes existentes de vis√£o s√£o bons no aprendizado por transfer√™ncia, mas t√™m dificuldades em realizar uma diversidade de tarefas com instru√ß√µes simples. O Florence-2 foi projetado para aceitar prompts de texto como instru√ß√µes de tarefas e gerar resultados na forma de texto, detec√ß√£o de objetos, grounding (relacionar palavras ou frases de linguagem natural com regi√µes espec√≠ficas de uma imagem) ou segmenta√ß√£o.</p>
      <p>Para poder treinar o modelo, criaram o conjunto de dados FLD-5B, que tem 5,4 bilh√µes de anota√ß√µes visuais completas em 126 milh√µes de imagens. Este conjunto de dados foi treinado por dois m√≥dulos de processamento eficientes.</p>
      <p>O primeiro m√≥dulo utiliza modelos especializados para anotar imagens de forma colaborativa e aut√¥noma, em vez do m√©todo de anota√ß√£o √∫nica e manual. M√∫ltiplos modelos trabalham juntos para chegar a um consenso, que lembra o conceito da sabedoria das multid√µes, garantindo uma compreens√£o da imagem mais confi√°vel e imparcial.O segundo m√≥dulo refinam e filtra iterativamente essas anota√ß√µes automatizadas utilizando modelos fundamentais bem treinados.</p>
      <p>O modelo √© capaz de realizar uma variedade de tarefas, como a detec√ß√£o de objetos, a legenda e o grounding, tudo dentro de um √∫nico modelo. A ativa√ß√£o da tarefa √© alcan√ßada atrav√©s de prompts de texto</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para desenvolver um modelo b√°sico de vis√£o vers√°til. Para isso, o m√©todo de treinamento do modelo incorpora tr√™s objetivos de aprendizado diferentes, cada um dos quais aborda um n√≠vel diferente de granularidade e compreens√£o sem√¢ntica:</p>
      <ul>
        <li><strong>As tarefas de compreens√£o ao n√≠vel da imagem</strong> capturam a sem√¢ntica de alto n√≠vel e promovem uma compreens√£o abrangente das imagens atrav√©s de descri√ß√µes lingu√≠sticas. Permitem que o modelo compreenda o contexto geral de uma imagem e capture as rela√ß√µes sem√¢nticas e os nuances contextuais no dom√≠nio da linguagem. As tarefas exemplares incluem a classifica√ß√£o de imagens, a legenda e a resposta a perguntas visuais.</li>
        <li><strong>As tarefas de reconhecimento a n√≠vel de regi√£o/pixel</strong> facilitam a localiza√ß√£o detalhada de objetos e entidades dentro das imagens, capturando as rela√ß√µes entre os objetos e seu contexto espacial. As tarefas incluem a detec√ß√£o de objetos, a segmenta√ß√£o e a compreens√£o de express√µes de refer√™ncia.</li>
        <li><strong>As tarefas de alinhamento visual-sem√¢ntico de gr√£o fino</strong> exigem uma compreens√£o de gr√£o fino tanto do texto quanto da imagem. Envolve localizar as regi√µes da imagem que correspondem √†s frases de texto, como objetos, atributos ou rela√ß√µes. Essas tarefas desafiam a capacidade de capturar os detalhes locais das entidades visuais e seus contextos sem√¢nticos, bem como as intera√ß√µes entre os elementos textuais e visuais.</li>
      </ul>
      <p>Ao combinar esses tr√™s objetivos de aprendizado em um quadro de aprendizado multitarefa, o modelo aprende a lidar com diferentes n√≠veis de detalhe e compreens√£o sem√¢ntica.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Arquitetura">Arquitetura<a class="anchor-link" href="#Arquitetura"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 163" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O modelo emprega uma arquitetura de sequ√™ncia para sequ√™ncia (seq2seq), que integra um codificador de imagem e um codificador-decodificador multimodal</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/Florence-2_architecture-2.webp" alt="Arquitetura Florence-2">
      <p>Como o modelo receber√° imagens e prompts, ele possui um codificador de imagem para obter os embeddings da imagem. Por outro lado, os prompts s√£o passados por um tokenizador e embedding de texto e localiza√ß√£o. Os embeddings da imagem e do prompt s√£o concatenados e passam por um transformer para obter os tokens do texto de sa√≠da e a localiza√ß√£o na imagem. Finalmente, eles passam por um decodificador de texto e localiza√ß√£o para obter os resultados.</p>
      <p>O codificador-decodificador (transformer) do texto mais as posi√ß√µes √© chamado de codificador-decodificador multimodal.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ao estender o vocabul√°rio do tokenizador para incluir tokens de localiza√ß√£o, permite-se que o modelo processe informa√ß√µes espec√≠ficas da regi√£o do objeto em um formato de aprendizado unificado, ou seja, por meio de um √∫nico modelo. Isso elimina a necessidade de projetar cabe√ßas espec√≠ficas para diferentes tarefas e permite uma abordagem mais focada nos dados.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criaram 2 modelos, Florence-2 Base e Florence-2 Large. Florence-2 Base tem 232B de par√¢metros e Florence-2 Large tem 771B de par√¢metros. Cada um tem esses tamanhos.</p>
      <table>
        <thead>
          <tr>
            <th>Modelo</th>
            <th>Codificador de Imagem (DaViT)</th>
            <th>Codificador de Imagem (DaViT)</th>
            <th>Codificador de Imagem (DaViT)</th>
            <th>Codificador de Imagem (DaViT)</th>
            <th>Codificador-Decodificador (Transformer)</th>
            <th>Codificador-Decodificador (Transformer)</th>
            <th>Codificador-Decodificador (Transformer)</th>
            <th>Codificador-Decodificador (Transformer)</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td></td>
            <td>dimens√µes</td>
            <td>blocos</td>
            <td>cabe√ßas/grupos</td>
            <td>#par√¢metros</td>
            <td>camadas do codificador</td>
            <td>camadas do decodificador</td>
            <td>dimens√µes</td>
            <td>#par√¢metros</td>
          </tr>
          <tr>
            <td>Florence-2-B</td>
            <td>[128, 256, 512, 1024]</td>
            <td>[1, 1, 9, 1]</td>
            <td>[4, 8, 16, 32]</td>
            <td>90M</td>
            <td>6</td>
            <td>6</td>
            <td>768</td>
            <td>140M</td>
          </tr>
          <tr>
            <td>Florence-2-L</td>
            <td>[256, 512, 1024, 2048]</td>
            <td>[1, 1, 9, 1]</td>
            <td>[8, 16, 32, 64]</td>
            <td>360M</td>
            <td>12</td>
            <td>12</td>
            <td>1024</td>
            <td>410M</td>
          </tr>
        </tbody>
      </table>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Codificador de visao">Codificador de vis√£o<a class="anchor-link" href="#Codificador de visao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 164" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Usaram DaViT como codificador de vis√£o. Processa uma imagem de entrada para embeddings visuais aplanados (N<sub>v</sub>√óD<sub>v</sub>), onde N<sub>v</sub> e D<sub>v</sub> representam o n√∫mero de embeddings e a dimens√£o dos embeddings visuais, respectivamente.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Codificador-decodificador multimodal">Codificador-decodificador multimodal<a class="anchor-link" href="#Codificador-decodificador multimodal"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 165" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Utilizaram uma arquitetura transformer padr√£o para processar os embeddings visuais e de linguagem</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Objetivo de otimizacao">Objetivo de otimiza√ß√£o<a class="anchor-link" href="#Objetivo de otimizacao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 166" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Dada uma entrada x (combina√ß√£o da imagem e do prompt), e o objetivo y, eles utilizaram o modelagem de linguagem padr√£o com perda de entropia cruzada para todas as tarefas.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Conjunto de Dados">Conjunto de Dados<a class="anchor-link" href="#Conjunto de Dados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 167" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criaram o conjunto de dados FLD-5B que inclui 126 milh√µes de imagens, 500 milh√µes de anota√ß√µes de texto e 1,3 bilh√£o de anota√ß√µes de texto-regi√£o, e 3,6 bilh√µes de anota√ß√µes de texto-frase-regi√£o em diferentes tarefas.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Coleta das imagens">Coleta das imagens<a class="anchor-link" href="#Coleta das imagens"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 168" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para recolher as imagens, foram utilizadas imagens dos conjuntos de dados ImageNet-22k, Object 365, Open Images, Conceptual Captions e LAION.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Etiquetagem das imagens">Etiquetagem das imagens<a class="anchor-link" href="#Etiquetagem das imagens"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 169" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O objetivo principal √© gerar anota√ß√µes que possam ser √∫teis para o aprendizado multitarefa de forma eficaz. Para isso, criaram tr√™s categorias de anota√ß√µes: texto, pares de texto-regi√£o e tr√≠ades de texto-frase-regi√£o.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/Florence-2_Image_annotations.webp" alt="Florence-2 Image annotations">
      <p>O fluxo de trabalho de anota√ß√£o de dados consiste em tr√™s fases: (1) anota√ß√£o inicial utilizando modelos especializados, (2) filtragem de dados para corrigir erros e eliminar anota√ß√µes irrelevantes, e (3) um processo iterativo para o refinamento de dados.</p>
      <ul>
        <li><strong>Anota√ß√£o inicial com modelos especializados</strong>. Usaram etiquetas sint√©ticas obtidas de modelos especializados. Estes modelos especializados s√£o uma combina√ß√£o de modelos fora de linha treinados em uma variedade de conjuntos de dados dispon√≠veis publicamente e servi√ßos online hospedados em plataformas na nuvem. Eles est√£o especificamente projetados para se destacar na anota√ß√£o de seus respectivos tipos de anota√ß√£o. Certos conjuntos de dados de imagens cont√™m anota√ß√µes parciais. Por exemplo, Object 365 j√° inclui caixas delimitadoras anotadas por humanos e as categorias correspondentes como anota√ß√µes de texto-regi√£o. Nessas situa√ß√µes, eles mesclaram as anota√ß√µes pr√©-existentes com as etiquetas sint√©ticas geradas pelos modelos especializados.</li>
      </ul>
      <ul>
        <li><strong>Filtragem e melhoria de dados</strong>. As anota√ß√µes iniciais obtidas dos modelos especializados s√£o suscet√≠veis a ru√≠do e imprecis√£o. Por isso, implementaram um processo de filtragem. Ele se concentra principalmente em dois tipos de dados nas anota√ß√µes: dados de texto e de regi√£o. Em rela√ß√£o √†s anota√ß√µes textuais, desenvolveram uma ferramenta de an√°lise baseada no SpaCy para extrair objetos, atributos e a√ß√µes. Filtraram textos que cont√™m objetos excessivos, pois tendem a introduzir ru√≠do e podem n√£o refletir com precis√£o o conte√∫do real nas imagens. Al√©m disso, avaliaram a complexidade das a√ß√µes e dos objetos medindo seu grau de n√≥ na √°rvore de an√°lise de depend√™ncias. Conservaram textos com uma certa complexidade m√≠nima para garantir a riqueza dos conceitos visuais nas imagens. Em rela√ß√£o √†s anota√ß√µes de regi√£o, eliminaram os quadros ruidosos abaixo de um limiar de pontua√ß√£o de confian√ßa. Tamb√©m empregaram a supress√£o n√£o m√°xima para reduzir os quadros delimitadores redundantes ou sobrepostos.</li>
      </ul>
      <ul>
        <li><strong>Refinamento iterativo de dados</strong>. Usando as anota√ß√µes iniciais filtradas, treinaram um modelo multitasca que processa sequ√™ncias de dados.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Treinamento">Treinamento<a class="anchor-link" href="#Treinamento"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 170" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <ul>
        <li>Para o treinamento eles usaram <a href="https://www.fast.ai/posts/2018-07-02-adam-weight-decay.html" target="_blank" rel="nofollow noreferrer">AdamW</a> como otimizador, que √© uma variante do Adam que inclui a regulariza√ß√£o L2 nos pesos.</li>
        <li>Utilizaram um decaimento na taxa de aprendizado do <a href="https://www.linkedin.com/pulse/learning-rate-cosine-decay-warmup-hold-period-karel-becerra-fppye/" target="_blank" rel="nofollow noreferrer">coseno</a>. O valor m√°ximo da taxa de aprendizado foi definido como 1e-4 e um warmup linear de 5000 steps.</li>
        <li>Eles usaram [Deep-Speed] e precis√£o mista para acelerar o treinamento.* Eles usaram um tamanho de lote (batch size) de 2048 para Florence-2 Base e 3072 para Florence-2 Large.</li>
        <li>Eles fizeram um primeiro treinamento com imagens de tamanho 184x184 com todas as imagens do dataset e depois um ajuste de resolu√ß√£o com imagens de 768x768 com 500 milh√µes de imagens para o modelo base e 100 milh√µes de imagens para o modelo large.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Resultados">Resultados<a class="anchor-link" href="#Resultados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 171" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Avaliacao zero-shot">Avalia√ß√£o zero-shot<a class="anchor-link" href="#Avaliacao zero-shot"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 172" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para tarefas zero-shot obtiveram estes resultados</p>
      <table>
        <thead>
          <tr>
            <th>M√©todo</th>
            <th>#par√¢metros</th>
            <th style="text-align: center;">COCO Cap.</th>
            <th style="text-align: center;">COCO Cap.</th>
            <th style="text-align: center;">NoCaps</th>
            <th style="text-align: center;">TextCaps</th>
            <th style="text-align: center;">COCO Det.</th>
            <th style="text-align: center;">Flickr30k</th>
            <th style="text-align: center;">Refcoco</th>
            <th style="text-align: center;">Refcoco+</th>
            <th style="text-align: center;">Refcocog</th>
            <th style="text-align: center;">Refcoco RES</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td></td>
            <td></td>
            <td style="text-align: center;">teste</td>
            <td style="text-align: center;">val</td>
            <td style="text-align: center;">val</td>
            <td style="text-align: center;">val</td>
            <td style="text-align: center;">val2017</td>
            <td style="text-align: center;">teste</td>
            <td style="text-align: center;">teste-A</td>
            <td style="text-align: center;">teste-B</td>
            <td style="text-align: center;">val</td>
            <td style="text-align: center;">teste-A</td>
          </tr>
          <tr>
            <td></td>
            <td></td>
            <td style="text-align: center;">CIDEr</td>
            <td style="text-align: center;">CIDEr</td>
            <td style="text-align: center;">CIDEr</td>
            <td style="text-align: center;">CIDEr</td>
            <td style="text-align: center;">mAP</td>
            <td style="text-align: center;">R@1</td>
            <td style="text-align: center;">Accuracy</td>
            <td style="text-align: center;">Accuracy</td>
            <td style="text-align: center;">Accuracy</td>
            <td style="text-align: center;">mIoU</td>
          </tr>
          <tr>
            <td>Flamingo [2]</td>
            <td>80B</td>
            <td style="text-align: center;">84,3</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
          </tr>
          <tr>
            <td>Florence-2-B</td>
            <td>0,23B</td>
            <td style="text-align: center;">133,0</td>
            <td style="text-align: center;">118,7</td>
            <td style="text-align: center;">70,1</td>
            <td style="text-align: center;">34,7</td>
            <td style="text-align: center;">34,7</td>
            <td style="text-align: center;">83,6</td>
            <td style="text-align: center;">53,9</td>
            <td style="text-align: center;">58,4</td>
            <td style="text-align: center;">49,7</td>
            <td style="text-align: center;">51,5</td>
          </tr>
          <tr>
            <td>Florence-2-L</td>
            <td>0,77B</td>
            <td style="text-align: center;">135,6</td>
            <td style="text-align: center;">120,8</td>
            <td style="text-align: center;">72,8</td>
            <td style="text-align: center;">37,5</td>
            <td style="text-align: center;">37,5</td>
            <td style="text-align: center;">84,4</td>
            <td style="text-align: center;">56,3</td>
            <td style="text-align: center;">61,6</td>
            <td style="text-align: center;">51,4</td>
            <td style="text-align: center;">53,6</td>
          </tr>
        </tbody>
      </table>
      <p>Como se pode ver, o Florence-2, tanto a vers√£o base quanto a longa, supera modelos um e dois ordens de magnitude maiores.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Modelo generalista com dados supervisionados publicos">Modelo generalista com dados supervisionados p√∫blicos<a class="anchor-link" href="#Modelo generalista com dados supervisionados publicos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 173" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ajustaram os modelos Florence-2 adicionando uma cole√ß√£o de conjuntos de dados p√∫blicos que cobrem tarefas em n√≠vel de imagem, regi√£o e pixel. Os resultados podem ser vistos nas tabelas a seguir.</p>
      <p>Desempenho em tarefas de legendagem e VQA:</p>
      <table>
        <thead>
          <tr>
            <th>M√©todo</th>
            <th>#par√¢metros</th>
            <th style="text-align: center;">COCO Caption</th>
            <th style="text-align: center;">NoCaps</th>
            <th style="text-align: center;">TextCaps</th>
            <th style="text-align: center;">VQAv2</th>
            <th style="text-align: center;">TextVQA</th>
            <th style="text-align: center;">VizWiz VQA</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td></td>
            <td></td>
            <td style="text-align: center;">Teste de Karpathy</td>
            <td style="text-align: center;">val</td>
            <td style="text-align: center;">val</td>
            <td style="text-align: center;">test-dev</td>
            <td style="text-align: center;">test-dev</td>
            <td style="text-align: center;">test-dev</td>
          </tr>
          <tr>
            <td></td>
            <td></td>
            <td style="text-align: center;">CIDEr</td>
            <td style="text-align: center;">CIDEr</td>
            <td style="text-align: center;">CIDEr</td>
            <td style="text-align: center;">Acc</td>
            <td style="text-align: center;">Acc</td>
            <td style="text-align: center;">Acc</td>
          </tr>
          <tr>
            <td>**Modelos Especializados**</td>
            <td></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
          </tr>
          <tr>
            <td>CoCa [92]</td>
            <td>2,1B</td>
            <td style="text-align: center;">143,6</td>
            <td style="text-align: center;">122,4</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">82,3</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
          </tr>
          <tr>
            <td>BLIP-2 [44]</td>
            <td>7,8B</td>
            <td style="text-align: center;">144,5</td>
            <td style="text-align: center;">121,6</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">82,2</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
          </tr>
          <tr>
            <td>GIT2 [78]</td>
            <td>5,1B</td>
            <td style="text-align: center;">145</td>
            <td style="text-align: center;">126,9</td>
            <td style="text-align: center;">148,6</td>
            <td style="text-align: center;">81,7</td>
            <td style="text-align: center;">67,3</td>
            <td style="text-align: center;">71,0</td>
          </tr>
          <tr>
            <td>Flamingo [2]</td>
            <td>80B</td>
            <td style="text-align: center;">138,1</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">82,0</td>
            <td style="text-align: center;">54,1</td>
            <td style="text-align: center;">65,7</td>
          </tr>
          <tr>
            <td>PaLI [15]</td>
            <td>17B</td>
            <td style="text-align: center;">149,1</td>
            <td style="text-align: center;">**127,0**</td>
            <td style="text-align: center;">160,0</td>
            <td style="text-align: center;">84,3</td>
            <td style="text-align: center;">58,8 / 73,1‚ñ≥</td>
            <td style="text-align: center;">71,6 / 74,4‚ñ≥</td>
          </tr>
          <tr>
            <td>PaLI-X [12]</td>
            <td>55B</td>
            <td style="text-align: center;">**149,2**</td>
            <td style="text-align: center;">126,3</td>
            <td style="text-align: center;">**147 / 163,7**</td>
            <td style="text-align: center;">**86,0**</td>
            <td style="text-align: center;">**71,4 / 80,8‚ñ≥**</td>
            <td style="text-align: center;">**70,9 / 74,6‚ñ≥**</td>
          </tr>
          <tr>
            <td>**Modelos Generalistas**</td>
            <td></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
          </tr>
          <tr>
            <td>Unified-IO [55]</td>
            <td>2,9B</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">100</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">77,9</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">57,4</td>
          </tr>
          <tr>
            <td>Florence-2-B</td>
            <td>0,23B</td>
            <td style="text-align: center;">140,0</td>
            <td style="text-align: center;">116,7</td>
            <td style="text-align: center;">143,9</td>
            <td style="text-align: center;">79,7</td>
            <td style="text-align: center;">63,6</td>
            <td style="text-align: center;">63,6</td>
          </tr>
          <tr>
            <td>Florence-2-L</td>
            <td>0,77B</td>
            <td style="text-align: center;">143,3</td>
            <td style="text-align: center;">124,9</td>
            <td style="text-align: center;">151,1</td>
            <td style="text-align: center;">81,7</td>
            <td style="text-align: center;">73,5</td>
            <td style="text-align: center;">72,6</td>
          </tr>
        </tbody>
      </table>
      <p>‚ñ≥ Indica que se usou OCR externo como entrada</p>
      <p>Desempenho em tarefas a n√≠vel de regi√£o e pixel:</p>
      <table>
        <thead>
          <tr>
            <th>M√©todo</th>
            <th>#par√¢metros</th>
            <th style="text-align: center;">COCO Det.</th>
            <th style="text-align: center;">Flickr30k</th>
            <th style="text-align: center;">Refcoco</th>
            <th style="text-align: center;">Refcoco+</th>
            <th style="text-align: center;">Refcocog</th>
            <th style="text-align: center;">Refcoco RES</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td></td>
            <td></td>
            <td style="text-align: center;">val2017</td>
            <td style="text-align: center;">test</td>
            <td style="text-align: center;">test-A</td>
            <td style="text-align: center;">test-B</td>
            <td style="text-align: center;">val</td>
            <td style="text-align: center;">test-A</td>
          </tr>
          <tr>
            <td></td>
            <td></td>
            <td style="text-align: center;">mAP</td>
            <td style="text-align: center;">R@1</td>
            <td style="text-align: center;">Acur√°cia</td>
            <td style="text-align: center;">Acur√°cia</td>
            <td style="text-align: center;">Acur√°cia</td>
            <td style="text-align: center;">mIoU</td>
          </tr>
          <tr>
            <td>**Modelos Especializados**</td>
            <td></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
          </tr>
          <tr>
            <td>SeqTR [99]</td>
            <td>-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">83,7</td>
            <td style="text-align: center;">86,5</td>
            <td style="text-align: center;">81,2</td>
            <td style="text-align: center;">71,5</td>
          </tr>
          <tr>
            <td>PolyFormer [49]</td>
            <td>-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">90,4</td>
            <td style="text-align: center;">92,9</td>
            <td style="text-align: center;">87,2</td>
            <td style="text-align: center;">85,0</td>
          </tr>
          <tr>
            <td>UNINEXT [84]</td>
            <td>0,74B</td>
            <td style="text-align: center;">**60,6**</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">92,6</td>
            <td style="text-align: center;">94,3</td>
            <td style="text-align: center;">91,5</td>
            <td style="text-align: center;">85,2</td>
          </tr>
          <tr>
            <td>Ferret [90]</td>
            <td>13B</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">89,5</td>
            <td style="text-align: center;">92,4</td>
            <td style="text-align: center;">84,4</td>
            <td style="text-align: center;">82,8</td>
          </tr>
          <tr>
            <td>**Modelos Generalistas**</td>
            <td></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;"></td>
          </tr>
          <tr>
            <td>UniTAB [88]</td>
            <td>-</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">**88,6**</td>
            <td style="text-align: center;">91,1</td>
            <td style="text-align: center;">83,8</td>
            <td style="text-align: center;">81,0</td>
            <td style="text-align: center;">85,4</td>
          </tr>
          <tr>
            <td>Florence-2-B</td>
            <td>0,23B</td>
            <td style="text-align: center;">41,4</td>
            <td style="text-align: center;">84,0</td>
            <td style="text-align: center;">92,6</td>
            <td style="text-align: center;">94,8</td>
            <td style="text-align: center;">91,5</td>
            <td style="text-align: center;">86,8</td>
          </tr>
          <tr>
            <td>Florence-2-L</td>
            <td>0,77B</td>
            <td style="text-align: center;">43,4</td>
            <td style="text-align: center;">85,2</td>
            <td style="text-align: center;">**93,4**</td>
            <td style="text-align: center;">**95,3**</td>
            <td style="text-align: center;">**92,0**</td>
            <td style="text-align: center;">**88,3**</td>
          </tr>
        </tbody>
      </table>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Resultados da detec√ß√£o de objetos COCO e segmenta√ß√£o de inst√¢ncias</p>
      <table>
        <thead>
          <tr>
            <th>Backbone</th>
            <th style="text-align: center;">Pr√©-treino</th>
            <th style="text-align: center;">Mask R-CNN</th>
            <th style="text-align: center;">Mask R-CNN</th>
            <th style="text-align: center;">DINO</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td></td>
            <td style="text-align: center;"></td>
            <td style="text-align: center;">APb</td>
            <td style="text-align: center;">APm</td>
            <td style="text-align: center;">AP</td>
          </tr>
          <tr>
            <td>ViT-B</td>
            <td style="text-align: center;">MAE, IN-1k</td>
            <td style="text-align: center;">51,6</td>
            <td style="text-align: center;">45,9</td>
            <td style="text-align: center;">55,0</td>
          </tr>
          <tr>
            <td>Swin-B</td>
            <td style="text-align: center;">Sup IN-1k</td>
            <td style="text-align: center;">50,2</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">53,4</td>
          </tr>
          <tr>
            <td>Swin-B</td>
            <td style="text-align: center;">SimMIM [83]</td>
            <td style="text-align: center;">52,3</td>
            <td style="text-align: center;">-</td>
            <td style="text-align: center;">-</td>
          </tr>
          <tr>
            <td>FocalAtt-B</td>
            <td style="text-align: center;">Sup IN-1k</td>
            <td style="text-align: center;">49,0</td>
            <td style="text-align: center;">43,7</td>
            <td style="text-align: center;">-</td>
          </tr>
          <tr>
            <td>FocalNet-B</td>
            <td style="text-align: center;">Sup IN-1k</td>
            <td style="text-align: center;">49,8</td>
            <td style="text-align: center;">44,1</td>
            <td style="text-align: center;">54,4</td>
          </tr>
          <tr>
            <td>ConvNeXt v1-B</td>
            <td style="text-align: center;">Sup IN-1k</td>
            <td style="text-align: center;">50,3</td>
            <td style="text-align: center;">44,9</td>
            <td style="text-align: center;">52,6</td>
          </tr>
          <tr>
            <td>ConvNeXt v2-B</td>
            <td style="text-align: center;">Sup IN-1k</td>
            <td style="text-align: center;">51,0</td>
            <td style="text-align: center;">45,6</td>
            <td style="text-align: center;">-</td>
          </tr>
          <tr>
            <td>ConvNeXt v2-B</td>
            <td style="text-align: center;">FCMAE</td>
            <td style="text-align: center;">52,9</td>
            <td style="text-align: center;">46,6</td>
            <td style="text-align: center;">-</td>
          </tr>
          <tr>
            <td>DaViT-B</td>
            <td style="text-align: center;">Florence-2</td>
            <td style="text-align: center;">**53,6**</td>
            <td style="text-align: center;">**46,4**</td>
            <td style="text-align: center;">**59,2**</td>
          </tr>
        </tbody>
      </table>
      <p>Detec√ß√£o de Objetos COCO usando Mask R-CNN e DINO</p>
      <table>
        <thead>
          <tr>
            <th>Pr√©-treinamento</th>
            <th>Est√°gios congelados</th>
            <th>Mask R-CNN</th>
            <th>Mask R-CNN</th>
            <th>DINO</th>
            <th>UperNet</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td></td>
            <td></td>
            <td>APb</td>
            <td>APm</td>
            <td>AP</td>
            <td>mloU</td>
          </tr>
          <tr>
            <td>Sup IN1k</td>
            <td>n/a</td>
            <td>46,7</td>
            <td>42,0</td>
            <td>53,7</td>
            <td>49</td>
          </tr>
          <tr>
            <td>UniCL [87]</td>
            <td>n/a</td>
            <td>50,4</td>
            <td>45,0</td>
            <td>57,3</td>
            <td>53,6</td>
          </tr>
          <tr>
            <td>Florence-2</td>
            <td>n/a</td>
            <td>**53,6**</td>
            <td>**46,4**</td>
            <td>**59,2**</td>
            <td>**54,9**</td>
          </tr>
          <tr>
            <td>Florence-2</td>
            <td>[1]</td>
            <td>**53,6**</td>
            <td>46,3</td>
            <td>**59,2**</td>
            <td>54,1</td>
          </tr>
          <tr>
            <td>Florence-2</td>
            <td>[1, 2]</td>
            <td>53,3</td>
            <td>46,1</td>
            <td>59,0</td>
            <td>54,4</td>
          </tr>
          <tr>
            <td>Florence-2</td>
            <td>[1, 2, 3]</td>
            <td>49,5</td>
            <td>42,9</td>
            <td>56,7</td>
            <td>49,6</td>
          </tr>
          <tr>
            <td>Florence-2</td>
            <td>[1, 2, 3, 4]</td>
            <td>48.3</td>
            <td>44.5</td>
            <td>56.1</td>
            <td>45.9</td>
          </tr>
        </tbody>
      </table>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Resultados de segmenta√ß√£o sem√¢ntica ADE20K</p>
      <table>
        <thead>
          <tr>
            <th>Backbone</th>
            <th>Pretrain</th>
            <th>mIoU</th>
            <th>ms-mIoU</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>ViT-B [24]</td>
            <td>Sup IN-1k</td>
            <td>47,4</td>
            <td>-</td>
          </tr>
          <tr>
            <td>ViT-B [24]</td>
            <td>MAE IN-1k</td>
            <td>48,1</td>
            <td>-</td>
          </tr>
          <tr>
            <td>ViT-B [4]</td>
            <td>BEiT</td>
            <td>53,6</td>
            <td>54,1</td>
          </tr>
          <tr>
            <td>ViT-B [59]</td>
            <td>BEiTv2 IN-1k</td>
            <td>53,1</td>
            <td>-</td>
          </tr>
          <tr>
            <td>ViT-B [59]</td>
            <td>BEiTv2 IN-22k</td>
            <td>53,5</td>
            <td>-</td>
          </tr>
          <tr>
            <td>Swin-B [51]</td>
            <td>Sup IN-1k</td>
            <td>48,1</td>
            <td>49,7</td>
          </tr>
          <tr>
            <td>Swin-B [51]</td>
            <td>SimMIM [83]</td>
            <td>-</td>
            <td>52.8</td>
          </tr>
          <tr>
            <td>FocalAtt-B [86]</td>
            <td>Sup IN-1k</td>
            <td>49,0</td>
            <td>50,5</td>
          </tr>
          <tr>
            <td>FocalNet-B [85]</td>
            <td>Sup IN-1k</td>
            <td>50,5</td>
            <td>51,4</td>
          </tr>
          <tr>
            <td>ConvNeXt v1-B [52]</td>
            <td>Sup IN-1k</td>
            <td>-</td>
            <td>49,9</td>
          </tr>
          <tr>
            <td>ConvNeXt v2-B [81]</td>
            <td>Sup IN-1k</td>
            <td>-</td>
            <td>50,5</td>
          </tr>
          <tr>
            <td>ConvNeXt v2-B [81]</td>
            <td>FCMAE</td>
            <td>-</td>
            <td>52,1</td>
          </tr>
          <tr>
            <td>DaViT-B [20]</td>
            <td>Florence-2</td>
            <td>**54,9**</td>
            <td>**55,5**</td>
          </tr>
        </tbody>
      </table>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se ver como o Florence-2 n√£o √© o melhor em algumas das tarefas, embora seja em outras, mas est√° ao n√≠vel dos melhores modelos para cada tarefa, tendo um ou dois ordens de magnitude menos de par√¢metros do que os outros modelos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Modelos disponiveis">Modelos dispon√≠veis<a class="anchor-link" href="#Modelos disponiveis"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 174" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Na <a href="https://huggingface.co/collections/microsoft/florence-6669f44df0d87d9c3bfb76de" target="_blank" rel="nofollow noreferrer">cole√ß√£o</a> de modelos Florence-2 da Microsoft no Hugging Face, podem ser encontrados os modelos <a href="https://huggingface.co/microsoft/Florence-2-large">Florence-2-large</a>, <a href="https://huggingface.co/microsoft/Florence-2-base">Florence-2-base</a>, <a href="https://huggingface.co/microsoft/Florence-2-large-ft">Florence-2-large-ft</a> e <a href="https://huggingface.co/microsoft/Florence-2-base-ft">Florence-2-base-ft</a>.</p>
      <p>J√° vimos a diferen√ßa entre large e base, large √© um modelo com 771B de par√¢metros e base com 232B de par√¢metros. Os modelos com <code>-ft</code> s√£o os modelos que foram ajustados em algumas tarefas.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Tarefas definidas pelo prompt">Tarefas definidas pelo prompt<a class="anchor-link" href="#Tarefas definidas pelo prompt"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 175" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vimos, o Florence-2 √© um modelo que recebe uma imagem e um prompt, portanto, com base no prompt, o modelo realizar√° uma tarefa ou outra. A seguir, s√£o mostrados os prompts que podem ser usados para cada tarefa.</p>
      <table>
        <thead>
          <tr>
            <th>Tarefa</th>
            <th>Tipo de Anota√ß√£o</th>
            <th>Entrada do Prompt</th>
            <th>Sa√≠da</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Legenda</td>
            <td>Texto</td>
            <td>Imagem, texto</td>
            <td>Texto</td>
          </tr>
          <tr>
            <td>Legenda detalhada</td>
            <td>Texto</td>
            <td>Imagem, texto</td>
            <td>Texto</td>
          </tr>
          <tr>
            <td>Legenda mais detalhada</td>
            <td>Texto</td>
            <td>Imagem, texto</td>
            <td>Texto</td>
          </tr>
          <tr>
            <td>Proposta de regi√£o</td>
            <td>Regi√£o</td>
            <td>Imagem, texto</td>
            <td>Regi√£o</td>
          </tr>
          <tr>
            <td>Detec√ß√£o de objetos</td>
            <td>Regi√£o-Texto</td>
            <td>Imagem, texto</td>
            <td>Texto, regi√£o</td>
          </tr>
          <tr>
            <td>Legenda de regi√£o densa</td>
            <td>Regi√£o-Texto</td>
            <td>Imagem, texto</td>
            <td>Texto, regi√£o</td>
          </tr>
          <tr>
            <td>Segmenta√ß√£o de express√£o de refer√™ncia</td>
            <td>Regi√£o-Texto</td>
            <td>Imagem, texto</td>
            <td>Texto, regi√£o</td>
          </tr>
          <tr>
            <td>Regi√£o para segmenta√ß√£o</td>
            <td>Regi√£o-Texto</td>
            <td>Imagem, texto</td>
            <td>Texto, regi√£o</td>
          </tr>
          <tr>
            <td>Detec√ß√£o de vocabul√°rio aberto</td>
            <td>Regi√£o-Texto</td>
            <td>Imagem, texto</td>
            <td>Texto, regi√£o</td>
          </tr>
          <tr>
            <td>Regi√£o para categoria</td>
            <td>Regi√£o-Texto</td>
            <td>Imagem, texto, regi√£o</td>
            <td>Texto</td>
          </tr>
          <tr>
            <td>Regi√£o para descri√ß√£o</td>
            <td>Regi√£o-Texto</td>
            <td>Imagem, texto, regi√£o</td>
            <td>Texto</td>
          </tr>
          <tr>
            <td>OCR</td>
            <td>Texto</td>
            <td>Imagem, texto</td>
            <td>Texto</td>
          </tr>
          <tr>
            <td>OCR com regi√£o</td>
            <td>Regi√£o-Texto</td>
            <td>Imagem, texto</td>
            <td>Texto, regi√£o</td>
          </tr>
        </tbody>
      </table>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Uso de Florence-2 grande">Uso de Florence-2 grande<a class="anchor-link" href="#Uso de Florence-2 grande"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 176" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro importamos as bibliotecas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">transformers</span><span class="w"> </span><span class="kn">import</span> <span class="n">AutoProcessor</span><span class="p">,</span> <span class="n">AutoModelForCausalLM</span>',
      '<span class="kn">from</span><span class="w"> </span><span class="nn">PIL</span><span class="w"> </span><span class="kn">import</span> <span class="n">Image</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">requests</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">copy</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">time</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos o modelo e o processador</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">model_id</span> <span class="o">=</span> <span class="s1">&#39;microsoft/Florence-2-large&#39;</span>',
      '<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s1">&#39;cuda&#39;</span><span class="p">)</span>',
      '<span class="n">processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos uma fun√ß√£o para construir o prompt</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">create_prompt</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="n">text_input</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span>',
      '<span class="w">    </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">prompt</span> <span class="o">=</span> <span class="n">task_prompt</span> <span class="o">+</span> <span class="n">text_input</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">prompt</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora uma fun√ß√£o para gerar a sa√≠da</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>',
      '<span class="w">    </span><span class="c1"># Create prompt</span>',
      '<span class="w">    </span><span class="n">prompt</span> <span class="o">=</span> <span class="n">create_prompt</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Get inputs</span>',
      '<span class="w">    </span><span class="n">inputs</span> <span class="o">=</span> <span class="n">processor</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span> <span class="n">images</span><span class="o">=</span><span class="n">image</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">&quot;pt&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s1">&#39;cuda&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Get outputs</span>',
      '<span class="w">    </span><span class="n">generated_ids</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span>',
      '<span class="w">      </span><span class="n">input_ids</span><span class="o">=</span><span class="n">inputs</span><span class="p">[</span><span class="s2">&quot;input_ids&quot;</span><span class="p">],</span>',
      '<span class="w">      </span><span class="n">pixel_values</span><span class="o">=</span><span class="n">inputs</span><span class="p">[</span><span class="s2">&quot;pixel_values&quot;</span><span class="p">],</span>',
      '<span class="w">      </span><span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span>',
      '<span class="w">      </span><span class="n">early_stopping</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
      '<span class="w">      </span><span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
      '<span class="w">      </span><span class="n">num_beams</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>',
      '<span class="w">    </span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Decode the generated IDs</span>',
      '<span class="w">    </span><span class="n">generated_text</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">batch_decode</span><span class="p">(</span><span class="n">generated_ids</span><span class="p">,</span> <span class="n">skip_special_tokens</span><span class="o">=</span><span class="kc">False</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Post-process the generated text</span>',
      '<span class="w">    </span><span class="n">parsed_answer</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="n">post_process_generation</span><span class="p">(</span>',
      '<span class="w">        </span><span class="n">generated_text</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">task</span><span class="o">=</span><span class="n">task_prompt</span><span class="p">,</span>',
      '<span class="w">        </span><span class="n">image_size</span><span class="o">=</span><span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>',
      '<span class="w">    </span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">parsed_answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtemos uma imagem sobre a qual vamos testar o modelo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers/tasks/car.jpg?download=true&quot;</span>',
      '<span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span>',
      '<span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tarefas sem prompts adicionais">Tarefas sem prompts adicionais<a class="anchor-link" href="#Tarefas sem prompts adicionais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 177" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Legenda">Legenda<a class="anchor-link" href="#Legenda"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 178" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 284.60 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;CAPTION&amp;gt;&#x27;: &#x27;A green car parked in front of a yellow building.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;DETAILED_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 491.69 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DETAILED_CAPTION&amp;gt;&#x27;: &#x27;The image shows a blue Volkswagen Beetle parked in front of a yellow building with two brown doors, surrounded by trees and a clear blue sky.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 1011.38 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#x27;: &#x27;The image shows a vintage Volkswagen Beetle car parked on a cobblestone street in front of a yellow building with two wooden doors. The car is painted in a bright turquoise color and has a sleek, streamlined design. It has two doors on either side of the car, one on top of the other, and a small window on the front. The building appears to be old and dilapidated, with peeling paint and crumbling walls. The sky is blue and there are trees in the background.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Proposta de regiao">Proposta de regi√£o<a class="anchor-link" href="#Proposta de regiao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 179" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>√â uma detec√ß√£o de objetos, mas nesse caso n√£o retorna as classes dos objetos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vamos a obter caixas delimitadoras, primeiro vamos a criar uma fun√ß√£o para desenh√°-las na imagem.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">matplotlib.pyplot</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nn">plt</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">matplotlib.patches</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nn">patches</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>',
      '<span class="w">   </span><span class="c1"># Create a figure and axes  </span>',
      '<span class="w">    </span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>',
      '<span class="w">      </span>',
      '<span class="w">    </span><span class="c1"># Display the image  </span>',
      '<span class="w">    </span><span class="n">ax</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>',
      '<span class="w">      </span>',
      '<span class="w">    </span><span class="c1"># Plot each bounding box  </span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">bbox</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;bboxes&#39;</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;labels&#39;</span><span class="p">]):</span>',
      '<span class="w">        </span><span class="c1"># Unpack the bounding box coordinates  </span>',
      '<span class="w">        </span><span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">y2</span> <span class="o">=</span> <span class="n">bbox</span>',
      '<span class="w">        </span><span class="c1"># Create a Rectangle patch  </span>',
      '<span class="w">        </span><span class="n">rect</span> <span class="o">=</span> <span class="n">patches</span><span class="o">.</span><span class="n">Rectangle</span><span class="p">((</span><span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">),</span> <span class="n">x2</span><span class="o">-</span><span class="n">x1</span><span class="p">,</span> <span class="n">y2</span><span class="o">-</span><span class="n">y1</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">facecolor</span><span class="o">=</span><span class="s1">&#39;none&#39;</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># Add the rectangle to the Axes  </span>',
      '<span class="w">        </span><span class="n">ax</span><span class="o">.</span><span class="n">add_patch</span><span class="p">(</span><span class="n">rect</span><span class="p">)</span>',
      '<span class="w">        </span><span class="c1"># Annotate the label  </span>',
      '<span class="w">        </span><span class="n">plt</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;white&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">bbox</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">facecolor</span><span class="o">=</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">))</span>',
      '<span class="w">      </span>',
      '<span class="w">    </span><span class="c1"># Remove the axis ticks and labels  </span>',
      '<span class="w">    </span><span class="n">ax</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s1">&#39;off&#39;</span><span class="p">)</span>',
      '<span class="w">      </span>',
      '<span class="w">    </span><span class="c1"># Show the plot  </span>',
      '<span class="w">    </span><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_PROPOSAL&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 439.41 ms',
          '&#x7B;&#x27;&amp;lt;REGION_PROPOSAL&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[33.599998474121094, 159.59999084472656, 596.7999877929688, 371.7599792480469], [454.0799865722656, 96.23999786376953, 580.7999877929688, 261.8399963378906], [449.5999755859375, 276.239990234375, 554.5599975585938, 370.3199768066406], [91.19999694824219, 280.0799865722656, 198.0800018310547, 370.3199768066406], [224.3199920654297, 85.19999694824219, 333.7599792480469, 164.39999389648438], [274.239990234375, 178.8000030517578, 392.0, 228.239990234375], [165.44000244140625, 178.8000030517578, 264.6399841308594, 230.63999938964844]], &#x27;labels&#x27;: [&#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Deteccao de objetos">Detec√ß√£o de objetos<a class="anchor-link" href="#Deteccao de objetos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 180" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Neste caso, ele retorna as classes dos objetos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OD&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 385.74 ms',
          '&#x7B;&#x27;&amp;lt;OD&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[33.599998474121094, 159.59999084472656, 596.7999877929688, 371.7599792480469], [454.0799865722656, 96.23999786376953, 580.7999877929688, 261.8399963378906], [224.95999145507812, 86.15999603271484, 333.7599792480469, 164.39999389648438], [449.5999755859375, 276.239990234375, 554.5599975585938, 370.3199768066406], [91.19999694824219, 280.0799865722656, 198.0800018310547, 370.3199768066406]], &#x27;labels&#x27;: [&#x27;car&#x27;, &#x27;door&#x27;, &#x27;door&#x27;, &#x27;wheel&#x27;, &#x27;wheel&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Legenda da regiao densa">Legenda da regi√£o densa<a class="anchor-link" href="#Legenda da regiao densa"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 181" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;DENSE_REGION_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 434.88 ms',
          '&#x7B;&#x27;&amp;lt;DENSE_REGION_CAPTION&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[33.599998474121094, 159.59999084472656, 596.7999877929688, 371.7599792480469], [454.0799865722656, 96.72000122070312, 580.1599731445312, 261.8399963378906], [449.5999755859375, 276.239990234375, 554.5599975585938, 370.79998779296875], [91.83999633789062, 280.0799865722656, 198.0800018310547, 370.79998779296875], [224.95999145507812, 86.15999603271484, 333.7599792480469, 164.39999389648438]], &#x27;labels&#x27;: [&#x27;turquoise Volkswagen Beetle&#x27;, &#x27;wooden double doors with metal handles&#x27;, &#x27;wheel&#x27;, &#x27;wheel&#x27;, &#x27;door&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tarefas com prompts adicionais">Tarefas com prompts adicionais<a class="anchor-link" href="#Tarefas com prompts adicionais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 182" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Anchoragem de Frases">Anchoragem de Frases<a class="anchor-link" href="#Anchoragem de Frases"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 183" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;CAPTION_TO_PHRASE_GROUNDING&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;A green car parked in front of a yellow building.&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 327.24 ms',
          '&#x7B;&#x27;&amp;lt;CAPTION_TO_PHRASE_GROUNDING&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.23999786376953, 159.1199951171875, 582.0800170898438, 374.6399841308594], [1.5999999046325684, 4.079999923706055, 639.0399780273438, 305.03997802734375]], &#x27;labels&#x27;: [&#x27;A green car&#x27;, &#x27;a yellow building&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Segmentacao de expressao referencial">Segmenta√ß√£o de express√£o referencial<a class="anchor-link" href="#Segmentacao de expressao referencial"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 184" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vamosos a obter m√°scaras de segmenta√ß√£o, vamos criar uma fun√ß√£o para pint√°-las na imagem.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">PIL</span><span class="w"> </span><span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">ImageDraw</span><span class="p">,</span> <span class="n">ImageFont</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">random</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">numpy</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nn">np</span>',
      '<span class="w"> </span>',
      '<span class="n">colormap</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span><span class="s1">&#39;orange&#39;</span><span class="p">,</span><span class="s1">&#39;green&#39;</span><span class="p">,</span><span class="s1">&#39;purple&#39;</span><span class="p">,</span><span class="s1">&#39;brown&#39;</span><span class="p">,</span><span class="s1">&#39;pink&#39;</span><span class="p">,</span><span class="s1">&#39;gray&#39;</span><span class="p">,</span><span class="s1">&#39;olive&#39;</span><span class="p">,</span><span class="s1">&#39;cyan&#39;</span><span class="p">,</span><span class="s1">&#39;red&#39;</span><span class="p">,</span>',
      '<span class="w">            </span><span class="s1">&#39;lime&#39;</span><span class="p">,</span><span class="s1">&#39;indigo&#39;</span><span class="p">,</span><span class="s1">&#39;violet&#39;</span><span class="p">,</span><span class="s1">&#39;aqua&#39;</span><span class="p">,</span><span class="s1">&#39;magenta&#39;</span><span class="p">,</span><span class="s1">&#39;coral&#39;</span><span class="p">,</span><span class="s1">&#39;gold&#39;</span><span class="p">,</span><span class="s1">&#39;tan&#39;</span><span class="p">,</span><span class="s1">&#39;skyblue&#39;</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">draw_polygons</span><span class="p">(</span><span class="n">input_image</span><span class="p">,</span> <span class="n">prediction</span><span class="p">,</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;  </span>',
      '<span class="sd">    Draws segmentation masks with polygons on an image.  </span>',
      '<span class="sd">  </span>',
      '<span class="sd">    Parameters:  </span>',
      '<span class="sd">    - input_image: Path to the image file.  </span>',
      '<span class="sd">    - prediction: Dictionary containing &#39;polygons&#39; and &#39;labels&#39; keys.  </span>',
      '<span class="sd">                  &#39;polygons&#39; is a list of lists, each containing vertices of a polygon.  </span>',
      '<span class="sd">                  &#39;labels&#39; is a list of labels corresponding to each polygon.  </span>',
      '<span class="sd">    - fill_mask: Boolean indicating whether to fill the polygons with color.  </span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Copy the input image to draw on</span>',
      '<span class="w">    </span><span class="n">image</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">input_image</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w">    </span><span class="c1"># Load the image  </span>',
      '<span class="w">    </span><span class="n">draw</span> <span class="o">=</span> <span class="n">ImageDraw</span><span class="o">.</span><span class="n">Draw</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>',
      '<span class="w">   </span>',
      '<span class="w">    </span><span class="c1"># Set up scale factor if needed (use 1 if not scaling)  </span>',
      '<span class="w">    </span><span class="n">scale</span> <span class="o">=</span> <span class="mi">1</span>',
      '<span class="w">      </span>',
      '<span class="w">    </span><span class="c1"># Iterate over polygons and labels  </span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">polygons</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">prediction</span><span class="p">[</span><span class="s1">&#39;polygons&#39;</span><span class="p">],</span> <span class="n">prediction</span><span class="p">[</span><span class="s1">&#39;labels&#39;</span><span class="p">]):</span>',
      '<span class="w">        </span><span class="n">color</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">colormap</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">fill_color</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">colormap</span><span class="p">)</span> <span class="k">if</span> <span class="n">fill_mask</span> <span class="k">else</span> <span class="kc">None</span>',
      '<span class="w">          </span>',
      '<span class="w">        </span><span class="k">for</span> <span class="n">_polygon</span> <span class="ow">in</span> <span class="n">polygons</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">_polygon</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">_polygon</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">_polygon</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">3</span><span class="p">:</span>',
      '<span class="w">                </span><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Invalid polygon:&#39;</span><span class="p">,</span> <span class="n">_polygon</span><span class="p">)</span>',
      '<span class="w">                </span><span class="k">continue</span>',
      '<span class="w">              </span>',
      '<span class="w">            </span><span class="n">_polygon</span> <span class="o">=</span> <span class="p">(</span><span class="n">_polygon</span> <span class="o">*</span> <span class="n">scale</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>',
      '<span class="w">              </span>',
      '<span class="w">            </span><span class="c1"># Draw the polygon  </span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">fill_mask</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">draw</span><span class="o">.</span><span class="n">polygon</span><span class="p">(</span><span class="n">_polygon</span><span class="p">,</span> <span class="n">outline</span><span class="o">=</span><span class="n">color</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">fill_color</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">else</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">draw</span><span class="o">.</span><span class="n">polygon</span><span class="p">(</span><span class="n">_polygon</span><span class="p">,</span> <span class="n">outline</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>',
      '<span class="w">              </span>',
      '<span class="w">            </span><span class="c1"># Draw the label text  </span>',
      '<span class="w">            </span><span class="n">draw</span><span class="o">.</span><span class="n">text</span><span class="p">((</span><span class="n">_polygon</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">8</span><span class="p">,</span> <span class="n">_polygon</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span><span class="p">),</span> <span class="n">label</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>',
      '<span class="w">  </span>',
      '<span class="w">    </span><span class="c1"># Save or display the image  </span>',
      '<span class="w">    </span><span class="c1">#image.show()  # Display the image  </span>',
      '<span class="w">    </span><span class="n">display</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REFERRING_EXPRESSION_SEGMENTATION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;a green car&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_polygons</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">],</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 4854.74 ms',
          '&#x7B;&#x27;&amp;lt;REFERRING_EXPRESSION_SEGMENTATION&amp;gt;&#x27;: &#x7B;&#x27;polygons&#x27;: [[[180.8000030517578, 180.72000122070312, 182.72000122070312, 180.72000122070312, 187.83999633789062, 177.83999633789062, 189.75999450683594, 177.83999633789062, 192.95999145507812, 175.9199981689453, 194.87998962402344, 175.9199981689453, 198.0800018310547, 174.0, 200.63999938964844, 173.0399932861328, 203.83999633789062, 172.0800018310547, 207.0399932861328, 170.63999938964844, 209.59999084472656, 169.67999267578125, 214.0800018310547, 168.72000122070312, 217.9199981689453, 167.75999450683594, 221.75999450683594, 166.8000030517578, 226.239990234375, 165.83999633789062, 230.72000122070312, 164.87998962402344, 237.1199951171875, 163.9199981689453, 244.1599884033203, 162.95999145507812, 253.1199951171875, 162.0, 265.2799987792969, 161.0399932861328, 312.6399841308594, 161.0399932861328, 328.6399841308594, 162.0, 337.6000061035156, 162.95999145507812, 344.6399841308594, 163.9199981689453, 349.7599792480469, 164.87998962402344, 353.6000061035156, 165.83999633789062, 358.0799865722656, 166.8000030517578, 361.91998291015625, 167.75999450683594, 365.7599792480469, 168.72000122070312, 369.6000061035156, 169.67999267578125, 372.79998779296875, 170.63999938964844, 374.7200012207031, 172.0800018310547, 377.91998291015625, 174.95999145507812, 379.8399963378906, 177.83999633789062, 381.7599792480469, 180.72000122070312, 383.67999267578125, 183.59999084472656, 385.6000061035156, 186.95999145507812, 387.5199890136719, 189.83999633789062, 388.79998779296875, 192.72000122070312, 390.7200012207031, 194.63999938964844, 392.0, 197.51998901367188, 393.91998291015625, 200.87998962402344, 395.8399963378906, 203.75999450683594, 397.7599792480469, 206.63999938964844, 399.67999267578125, 209.51998901367188, 402.8800048828125, 212.87998962402344, 404.79998779296875, 212.87998962402344, 406.7200012207031, 213.83999633789062, 408.6399841308594, 215.75999450683594, 408.6399841308594, 217.67999267578125, 410.55999755859375, 219.59999084472656, 412.47998046875, 220.55999755859375, 431.03997802734375, 220.55999755859375, 431.67999267578125, 221.51998901367188, 443.8399963378906, 222.47999572753906, 457.91998291015625, 222.47999572753906, 466.8799743652344, 223.44000244140625, 473.91998291015625, 224.87998962402344, 479.67999267578125, 225.83999633789062, 486.0799865722656, 226.79998779296875, 491.1999816894531, 227.75999450683594, 495.03997802734375, 228.72000122070312, 498.8799743652344, 229.67999267578125, 502.0799865722656, 230.63999938964844, 505.2799987792969, 231.59999084472656, 507.8399963378906, 232.55999755859375, 511.03997802734375, 233.51998901367188, 514.239990234375, 234.47999572753906, 516.7999877929688, 235.4399871826172, 520.0, 237.36000061035156, 521.9199829101562, 237.36000061035156, 534.0800170898438, 243.59999084472656, 537.2799682617188, 245.51998901367188, 541.1199951171875, 249.36000061035156, 544.9599609375, 251.75999450683594, 548.1599731445312, 252.72000122070312, 551.3599853515625, 253.67999267578125, 553.2799682617188, 253.67999267578125, 556.47998046875, 255.59999084472656, 558.3999633789062, 255.59999084472656, 567.3599853515625, 260.3999938964844, 569.2799682617188, 260.3999938964844, 571.2000122070312, 261.3599853515625, 573.1199951171875, 263.2799987792969, 574.3999633789062, 265.67999267578125, 574.3999633789062, 267.6000061035156, 573.1199951171875, 268.55999755859375, 572.47998046875, 271.44000244140625, 572.47998046875, 281.5199890136719, 573.1199951171875, 286.32000732421875, 574.3999633789062, 287.2799987792969, 575.0399780273438, 290.6399841308594, 576.3200073242188, 293.5199890136719, 576.3200073242188, 309.3599853515625, 576.3200073242188, 312.239990234375, 576.3200073242188, 314.1600036621094, 577.5999755859375, 315.1199951171875, 578.239990234375, 318.47998046875, 578.239990234375, 320.3999938964844, 576.3200073242188, 321.3599853515625, 571.2000122070312, 322.32000732421875, 564.1599731445312, 323.2799987792969, 555.2000122070312, 323.2799987792969, 553.2799682617188, 325.1999816894531, 553.2799682617188, 333.3599853515625, 552.0, 337.1999816894531, 551.3599853515625, 340.0799865722656, 550.0800170898438, 343.44000244140625, 548.1599731445312, 345.3599853515625, 546.8800048828125, 348.239990234375, 544.9599609375, 351.1199951171875, 543.0399780273438, 354.47998046875, 534.0800170898438, 363.1199951171875, 530.8800048828125, 365.03997802734375, 525.1199951171875, 368.3999938964844, 521.9199829101562, 369.3599853515625, 518.0800170898438, 370.3199768066406, 496.9599914550781, 370.3199768066406, 491.1999816894531, 369.3599853515625, 488.0, 368.3999938964844, 484.79998779296875, 367.44000244140625, 480.9599914550781, 365.03997802734375, 477.7599792480469, 363.1199951171875, 475.1999816894531, 361.1999816894531, 464.9599914550781, 351.1199951171875, 463.03997802734375, 348.239990234375, 461.1199951171875, 345.3599853515625, 459.8399963378906, 343.44000244140625, 459.8399963378906, 341.03997802734375, 457.91998291015625, 338.1600036621094, 457.91998291015625, 336.239990234375, 456.6399841308594, 334.32000732421875, 454.7200012207031, 332.3999938964844, 452.79998779296875, 333.3599853515625, 448.9599914550781, 337.1999816894531, 447.03997802734375, 338.1600036621094, 426.55999755859375, 337.1999816894531, 424.0, 337.1999816894531, 422.7200012207031, 338.1600036621094, 419.5199890136719, 339.1199951171875, 411.8399963378906, 339.1199951171875, 410.55999755859375, 338.1600036621094, 379.8399963378906, 337.1999816894531, 376.0, 337.1999816894531, 374.7200012207031, 338.1600036621094, 365.7599792480469, 337.1999816894531, 361.91998291015625, 337.1999816894531, 360.6399841308594, 338.1600036621094, 351.67999267578125, 337.1999816894531, 347.8399963378906, 337.1999816894531, 346.55999755859375, 338.1600036621094, 340.79998779296875, 337.1999816894531, 337.6000061035156, 337.1999816894531, 336.9599914550781, 338.1600036621094, 328.6399841308594, 337.1999816894531, 323.5199890136719, 337.1999816894531, 322.8800048828125, 338.1600036621094, 314.55999755859375, 337.1999816894531, 310.7200012207031, 337.1999816894531, 309.44000244140625, 338.1600036621094, 301.7599792480469, 337.1999816894531, 298.55999755859375, 337.1999816894531, 297.91998291015625, 338.1600036621094, 289.6000061035156, 337.1999816894531, 287.67999267578125, 337.1999816894531, 286.3999938964844, 338.1600036621094, 279.3599853515625, 337.1999816894531, 275.5199890136719, 337.1999816894531, 274.239990234375, 338.1600036621094, 267.1999816894531, 337.1999816894531, 265.2799987792969, 337.1999816894531, 264.6399841308594, 338.1600036621094, 256.32000732421875, 337.1999816894531, 254.39999389648438, 337.1999816894531, 253.1199951171875, 338.1600036621094, 246.0800018310547, 337.1999816894531, 244.1599884033203, 337.1999816894531, 243.51998901367188, 338.1600036621094, 235.1999969482422, 337.1999816894531, 232.0, 337.1999816894531, 231.36000061035156, 338.1600036621094, 223.0399932861328, 337.1999816894531, 217.9199981689453, 337.1999816894531, 217.27999877929688, 338.1600036621094, 214.0800018310547, 339.1199951171875, 205.1199951171875, 339.1199951171875, 201.9199981689453, 338.1600036621094, 200.0, 337.1999816894531, 198.0800018310547, 335.2799987792969, 196.1599884033203, 334.32000732421875, 194.239990234375, 334.32000732421875, 191.67999267578125, 336.239990234375, 191.0399932861328, 338.1600036621094, 191.0399932861328, 340.0799865722656, 189.1199951171875, 343.44000244140625, 189.1199951171875, 345.3599853515625, 187.83999633789062, 347.2799987792969, 185.9199981689453, 349.1999816894531, 184.63999938964844, 352.0799865722656, 182.72000122070312, 355.44000244140625, 180.8000030517578, 358.3199768066406, 176.95999145507812, 362.1600036621094, 173.75999450683594, 364.0799865722656, 170.55999755859375, 366.0, 168.63999938964844, 367.44000244140625, 166.0800018310547, 368.3999938964844, 162.87998962402344, 369.3599853515625, 159.67999267578125, 370.3199768066406, 152.63999938964844, 371.2799987792969, 131.52000427246094, 371.2799987792969, 127.68000030517578, 370.3199768066406, 124.47999572753906, 369.3599853515625, 118.7199935913086, 366.0, 115.5199966430664, 364.0799865722656, 111.68000030517578, 361.1999816894531, 106.55999755859375, 356.3999938964844, 104.63999938964844, 353.03997802734375, 103.36000061035156, 350.1600036621094, 101.43999481201172, 348.239990234375, 100.79999542236328, 346.32000732421875, 99.5199966430664, 343.44000244140625, 99.5199966430664, 340.0799865722656, 98.23999786376953, 337.1999816894531, 96.31999969482422, 335.2799987792969, 94.4000015258789, 334.32000732421875, 87.36000061035156, 334.32000732421875, 81.5999984741211, 335.2799987792969, 80.31999969482422, 336.239990234375, 74.55999755859375, 337.1999816894531, 66.23999786376953, 337.1999816894531, 64.31999969482422, 335.2799987792969, 53.439998626708984, 335.2799987792969, 50.23999786376953, 334.32000732421875, 48.31999969482422, 333.3599853515625, 47.03999710083008, 331.44000244140625, 47.03999710083008, 329.03997802734375, 48.31999969482422, 327.1199951171875, 50.23999786376953, 325.1999816894531, 50.23999786376953, 323.2799987792969, 43.20000076293945, 322.32000732421875, 40.0, 321.3599853515625, 38.07999801635742, 320.3999938964844, 37.439998626708984, 318.47998046875, 36.15999984741211, 312.239990234375, 36.15999984741211, 307.44000244140625, 38.07999801635742, 305.5199890136719, 40.0, 304.55999755859375, 43.20000076293945, 303.6000061035156, 46.39999771118164, 302.6399841308594, 53.439998626708984, 301.67999267578125, 66.23999786376953, 301.67999267578125, 68.15999603271484, 299.2799987792969, 69.43999481201172, 297.3599853515625, 69.43999481201172, 293.5199890136719, 68.15999603271484, 292.55999755859375, 67.5199966430664, 287.2799987792969, 67.5199966430664, 277.67999267578125, 68.15999603271484, 274.32000732421875, 69.43999481201172, 272.3999938964844, 73.27999877929688, 268.55999755859375, 75.19999694824219, 267.6000061035156, 78.4000015258789, 266.6399841308594, 80.31999969482422, 266.6399841308594, 82.23999786376953, 264.7200012207031, 81.5999984741211, 260.3999938964844, 81.5999984741211, 258.47998046875, 83.5199966430664, 257.5199890136719, 87.36000061035156, 257.5199890136719, 89.27999877929688, 256.55999755859375, 96.31999969482422, 249.36000061035156, 96.31999969482422, 248.39999389648438, 106.55999755859375, 237.36000061035156, 110.39999389648438, 233.51998901367188, 112.31999969482422, 231.59999084472656, 120.63999938964844, 223.44000244140625, 123.83999633789062, 221.51998901367188, 126.39999389648438, 220.55999755859375, 129.59999084472656, 218.63999938964844, 132.8000030517578, 216.72000122070312, 136.63999938964844, 213.83999633789062, 141.75999450683594, 209.51998901367188, 148.8000030517578, 202.8000030517578, 153.9199981689453, 198.95999145507812, 154.55999755859375, 198.95999145507812, 157.75999450683594, 196.55999755859375, 161.59999084472656, 193.67999267578125, 168.63999938964844, 186.95999145507812, 171.83999633789062, 186.0, 173.75999450683594, 183.59999084472656, 178.87998962402344, 181.67999267578125, 180.8000030517578, 179.75999450683594]]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Regiao para segmentacao">Regi√£o para segmenta√ß√£o<a class="anchor-link" href="#Regiao para segmentacao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 185" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_SEGMENTATION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_702&amp;gt;&amp;lt;loc_575&amp;gt;&amp;lt;loc_866&amp;gt;&amp;lt;loc_772&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_polygons</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">],</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 1246.26 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_SEGMENTATION&amp;gt;&#x27;: &#x7B;&#x27;polygons&#x27;: [[[468.79998779296875, 288.239990234375, 472.6399841308594, 285.3599853515625, 475.8399963378906, 283.44000244140625, 477.7599792480469, 282.47998046875, 479.67999267578125, 282.47998046875, 482.8799743652344, 280.55999755859375, 485.44000244140625, 279.6000061035156, 488.6399841308594, 278.6399841308594, 491.8399963378906, 277.67999267578125, 497.5999755859375, 276.7200012207031, 511.67999267578125, 276.7200012207031, 514.8800048828125, 277.67999267578125, 518.0800170898438, 278.6399841308594, 520.6400146484375, 280.55999755859375, 522.5599975585938, 280.55999755859375, 524.47998046875, 282.47998046875, 527.6799926757812, 283.44000244140625, 530.8800048828125, 285.3599853515625, 534.0800170898438, 287.2799987792969, 543.0399780273438, 296.3999938964844, 544.9599609375, 299.2799987792969, 546.8800048828125, 302.1600036621094, 548.7999877929688, 306.47998046875, 548.7999877929688, 308.3999938964844, 550.719970703125, 311.2799987792969, 552.0, 314.1600036621094, 552.6400146484375, 318.47998046875, 552.6400146484375, 333.3599853515625, 552.0, 337.1999816894531, 550.719970703125, 340.0799865722656, 550.0800170898438, 343.44000244140625, 548.7999877929688, 345.3599853515625, 546.8800048828125, 347.2799987792969, 545.5999755859375, 350.1600036621094, 543.6799926757812, 353.03997802734375, 541.760009765625, 356.3999938964844, 536.0, 362.1600036621094, 532.7999877929688, 364.0799865722656, 529.5999755859375, 366.0, 527.6799926757812, 366.9599914550781, 525.760009765625, 366.9599914550781, 522.5599975585938, 369.3599853515625, 518.0800170898438, 370.3199768066406, 495.67999267578125, 370.3199768066406, 489.91998291015625, 369.3599853515625, 486.7200012207031, 368.3999938964844, 483.5199890136719, 366.9599914550781, 479.67999267578125, 365.03997802734375, 476.47998046875, 363.1199951171875, 473.91998291015625, 361.1999816894531, 465.5999755859375, 353.03997802734375, 462.3999938964844, 349.1999816894531, 460.47998046875, 346.32000732421875, 458.55999755859375, 342.47998046875, 457.91998291015625, 339.1199951171875, 456.6399841308594, 336.239990234375, 455.3599853515625, 333.3599853515625, 454.7200012207031, 329.5199890136719, 454.7200012207031, 315.1199951171875, 455.3599853515625, 310.32000732421875, 456.6399841308594, 306.47998046875, 457.91998291015625, 303.1199951171875, 459.8399963378906, 300.239990234375, 459.8399963378906, 298.32000732421875, 460.47998046875, 296.3999938964844, 462.3999938964844, 293.5199890136719, 465.5999755859375, 289.1999816894531]]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Deteccao de vocabulario aberto">Detec√ß√£o de vocabul√°rio aberto<a class="anchor-link" href="#Deteccao de vocabulario aberto"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 186" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vamosos a obter dicion√°rios com bounding boxes, juntamente com suas etiquetas, vamos criar uma fun√ß√£o para formatar os dados e poder reutilizar a fun√ß√£o de desenhar bounding boxes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">convert_to_od_format</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>',
      '<span class="w">    </span><span class="sd">&quot;&quot;&quot;  </span>',
      '<span class="sd">    Converts a dictionary with &#39;bboxes&#39; and &#39;bboxes_labels&#39; into a dictionary with separate &#39;bboxes&#39; and &#39;labels&#39; keys.  </span>',
      '<span class="sd">  </span>',
      '<span class="sd">    Parameters:  </span>',
      '<span class="sd">    - data: The input dictionary with &#39;bboxes&#39;, &#39;bboxes_labels&#39;, &#39;polygons&#39;, and &#39;polygons_labels&#39; keys.  </span>',
      '<span class="sd">  </span>',
      '<span class="sd">    Returns:  </span>',
      '<span class="sd">    - A dictionary with &#39;bboxes&#39; and &#39;labels&#39; keys formatted for object detection results.  </span>',
      '<span class="sd">    &quot;&quot;&quot;</span>',
      '<span class="w">    </span><span class="c1"># Extract bounding boxes and labels  </span>',
      '<span class="w">    </span><span class="n">bboxes</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;bboxes&#39;</span><span class="p">,</span> <span class="p">[])</span>',
      '<span class="w">    </span><span class="n">labels</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;bboxes_labels&#39;</span><span class="p">,</span> <span class="p">[])</span>',
      '<span class="w">      </span>',
      '<span class="w">    </span><span class="c1"># Construct the output format  </span>',
      '<span class="w">    </span><span class="n">od_results</span> <span class="o">=</span> <span class="p">{</span>',
      '<span class="w">        </span><span class="s1">&#39;bboxes&#39;</span><span class="p">:</span> <span class="n">bboxes</span><span class="p">,</span>',
      '<span class="w">        </span><span class="s1">&#39;labels&#39;</span><span class="p">:</span> <span class="n">labels</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w">      </span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">od_results</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OPEN_VOCABULARY_DETECTION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;a green car&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">bbox_results</span>  <span class="o">=</span> <span class="n">convert_to_od_format</span><span class="p">(</span><span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">bbox_results</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 256.23 ms',
          '&#x7B;&#x27;&amp;lt;OPEN_VOCABULARY_DETECTION&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.23999786376953, 158.63999938964844, 582.0800170898438, 374.1600036621094]], &#x27;bboxes_labels&#x27;: [&#x27;a green car&#x27;], &#x27;polygons&#x27;: [], &#x27;polygons_labels&#x27;: []&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Regiao para categoria">Regi√£o para categoria<a class="anchor-link" href="#Regiao para categoria"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 187" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_CATEGORY&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 231.91 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_CATEGORY&amp;gt;&#x27;: &#x27;car&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Regiao para descricao">Regi√£o para descri√ß√£o<a class="anchor-link" href="#Regiao para descricao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 188" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_DESCRIPTION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 269.62 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_DESCRIPTION&amp;gt;&#x27;: &#x27;turquoise Volkswagen Beetle&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tarefas OCR">Tarefas OCR<a class="anchor-link" href="#Tarefas OCR"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 189" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Usamos uma nova imagem</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://ecx.images-amazon.com/images/I/51UUzBDAMsL.jpg?download=true&quot;</span>',
      '<span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s1">&#39;RGB&#39;</span><span class="p">)</span>',
      '<span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=RGB size=403x500&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="OCR">OCR<a class="anchor-link" href="#OCR"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 190" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OCR&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 424.52 ms',
          '&#x7B;&#x27;&amp;lt;OCR&amp;gt;&#x27;: &#x27;CUDAFOR ENGINEERSAn Introduction to High-PerformanceParallel ComputingDUANE STORTIMETE YURTOGLU&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="OCR com regiao">OCR com regi√£o<a class="anchor-link" href="#OCR com regiao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 191" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vamosos obter o texto do OCR e suas regi√µes, vamos criar uma fun√ß√£o para pint√°-los na imagem</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">draw_ocr_bboxes</span><span class="p">(</span><span class="n">input_image</span><span class="p">,</span> <span class="n">prediction</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">image</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">input_image</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">scale</span> <span class="o">=</span> <span class="mi">1</span>',
      '<span class="w">    </span><span class="n">draw</span> <span class="o">=</span> <span class="n">ImageDraw</span><span class="o">.</span><span class="n">Draw</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">bboxes</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">prediction</span><span class="p">[</span><span class="s1">&#39;quad_boxes&#39;</span><span class="p">],</span> <span class="n">prediction</span><span class="p">[</span><span class="s1">&#39;labels&#39;</span><span class="p">]</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">box</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">bboxes</span><span class="p">,</span> <span class="n">labels</span><span class="p">):</span>',
      '<span class="w">        </span><span class="n">color</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">colormap</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">new_box</span> <span class="o">=</span> <span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">box</span><span class="p">)</span> <span class="o">*</span> <span class="n">scale</span><span class="p">)</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>',
      '<span class="w">        </span><span class="n">draw</span><span class="o">.</span><span class="n">polygon</span><span class="p">(</span><span class="n">new_box</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">outline</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">draw</span><span class="o">.</span><span class="n">text</span><span class="p">((</span><span class="n">new_box</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="mi">8</span><span class="p">,</span> <span class="n">new_box</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">2</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="s2">&quot;</span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">label</span><span class="p">),</span>',
      '<span class="w">                    </span><span class="n">align</span><span class="o">=</span><span class="s2">&quot;right&quot;</span><span class="p">,</span>',
      '<span class="w">        </span>',
      '<span class="w">                    </span><span class="n">fill</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">display</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OCR_WITH_REGION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_ocr_bboxes</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 758.95 ms',
          '&#x7B;&#x27;&amp;lt;OCR_WITH_REGION&amp;gt;&#x27;: &#x7B;&#x27;quad_boxes&#x27;: [[167.0435028076172, 50.25, 375.7974853515625, 50.25, 375.7974853515625, 114.75, 167.0435028076172, 114.75], [144.8784942626953, 120.75, 375.7974853515625, 120.75, 375.7974853515625, 149.25, 144.8784942626953, 149.25], [115.86249542236328, 165.25, 376.6034851074219, 166.25, 376.6034851074219, 184.25, 115.86249542236328, 183.25], [239.9864959716797, 184.25, 376.6034851074219, 186.25, 376.6034851074219, 204.25, 239.9864959716797, 202.25], [266.1814880371094, 441.25, 376.6034851074219, 441.25, 376.6034851074219, 456.25, 266.1814880371094, 456.25], [252.0764923095703, 460.25, 376.6034851074219, 460.25, 376.6034851074219, 475.25, 252.0764923095703, 475.25]], &#x27;labels&#x27;: [&#x27;&amp;lt;/s&amp;gt;CUDA&#x27;, &#x27;FOR ENGINEERS&#x27;, &#x27;An Introduction to High-Performance&#x27;, &#x27;Parallel Computing&#x27;, &#x27;DUANE STORTI&#x27;, &#x27;METE YURTOGLU&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=RGB size=403x500&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Uso do Florence-2 large fine tuning">Uso do Florence-2 large fine tuning<a class="anchor-link" href="#Uso do Florence-2 large fine tuning"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 192" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos o modelo e o processador</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">model_id</span> <span class="o">=</span> <span class="s1">&#39;microsoft/Florence-2-large-ft&#39;</span>',
      '<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s1">&#39;cuda&#39;</span><span class="p">)</span>',
      '<span class="n">processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a obter a imagem do carro</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers/tasks/car.jpg?download=true&quot;</span>',
      '<span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span>',
      '<span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tarefas sem prompts adicionais">Tarefas sem prompts adicionais<a class="anchor-link" href="#Tarefas sem prompts adicionais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 193" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Legenda">Legenda<a class="anchor-link" href="#Legenda"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 194" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 292.35 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;CAPTION&amp;gt;&#x27;: &#x27;A green car parked in front of a yellow building.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;DETAILED_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 437.06 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DETAILED_CAPTION&amp;gt;&#x27;: &#x27;In this image we can see a car on the road. In the background there is a building with doors. At the top of the image there are trees.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 779.38 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#x27;: &#x27;A light blue Volkswagen Beetle is parked in front of a building. The building is yellow and has two brown doors on it. The door on the right is closed and the one on the left is closed. The car is parked on a paved sidewalk.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Proposta de regiao">Proposta de regi√£o<a class="anchor-link" href="#Proposta de regiao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 195" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>√â uma detec√ß√£o de objetos, mas nesse caso n√£o retorna as classes dos objetos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_PROPOSAL&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 255.08 ms',
          '&#x7B;&#x27;&amp;lt;REGION_PROPOSAL&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 161.0399932861328, 596.7999877929688, 370.79998779296875]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Deteccao de objetos">Detec√ß√£o de objetos<a class="anchor-link" href="#Deteccao de objetos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 196" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Neste caso, ele retorna as classes dos objetos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OD&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 245.54 ms',
          '&#x7B;&#x27;&amp;lt;OD&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 161.51998901367188, 596.7999877929688, 370.79998779296875]], &#x27;labels&#x27;: [&#x27;car&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Legenda da regiao densa">Legenda da regi√£o densa<a class="anchor-link" href="#Legenda da regiao densa"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 197" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;DENSE_REGION_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 282.75 ms',
          '&#x7B;&#x27;&amp;lt;DENSE_REGION_CAPTION&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 161.51998901367188, 596.7999877929688, 370.79998779296875]], &#x27;labels&#x27;: [&#x27;turquoise Volkswagen Beetle&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tarefas com prompts adicionais">Tarefas com prompts adicionais<a class="anchor-link" href="#Tarefas com prompts adicionais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 198" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Anchoragem de Frase">Anchoragem de Frase<a class="anchor-link" href="#Anchoragem de Frase"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 199" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;CAPTION_TO_PHRASE_GROUNDING&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;A green car parked in front of a yellow building.&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 305.79 ms',
          '&#x7B;&#x27;&amp;lt;CAPTION_TO_PHRASE_GROUNDING&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 159.59999084472656, 598.719970703125, 374.6399841308594], [1.5999999046325684, 4.079999923706055, 639.0399780273438, 304.0799865722656]], &#x27;labels&#x27;: [&#x27;A green car&#x27;, &#x27;a yellow building&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Segmentacao de expressao de referencia">Segmenta√ß√£o de express√£o de refer√™ncia<a class="anchor-link" href="#Segmentacao de expressao de referencia"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 200" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REFERRING_EXPRESSION_SEGMENTATION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;a green car&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_polygons</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">],</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 745.87 ms',
          '&#x7B;&#x27;&amp;lt;REFERRING_EXPRESSION_SEGMENTATION&amp;gt;&#x27;: &#x7B;&#x27;polygons&#x27;: [[[178.239990234375, 184.0800018310547, 256.32000732421875, 161.51998901367188, 374.7200012207031, 170.63999938964844, 408.0, 220.0800018310547, 480.9599914550781, 225.36000061035156, 539.2000122070312, 247.9199981689453, 573.760009765625, 266.6399841308594, 575.6799926757812, 289.1999816894531, 598.0800170898438, 293.5199890136719, 596.1599731445312, 309.8399963378906, 576.9599609375, 309.8399963378906, 576.9599609375, 321.3599853515625, 554.5599975585938, 322.32000732421875, 547.5199584960938, 354.47998046875, 525.1199951171875, 369.8399963378906, 488.0, 369.8399963378906, 463.67999267578125, 354.47998046875, 453.44000244140625, 332.8800048828125, 446.3999938964844, 340.0799865722656, 205.1199951171875, 340.0799865722656, 196.1599884033203, 334.79998779296875, 182.0800018310547, 361.67999267578125, 148.8000030517578, 370.79998779296875, 121.27999877929688, 369.8399963378906, 98.87999725341797, 349.1999816894531, 93.75999450683594, 332.8800048828125, 64.31999969482422, 339.1199951171875, 41.91999816894531, 334.79998779296875, 48.959999084472656, 326.6399841308594, 36.79999923706055, 321.3599853515625, 34.880001068115234, 303.6000061035156, 66.23999786376953, 301.67999267578125, 68.15999603271484, 289.1999816894531, 68.15999603271484, 268.55999755859375, 81.5999984741211, 263.2799987792969, 116.15999603271484, 227.27999877929688]]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Regiao para segmentacao">Regi√£o para segmenta√ß√£o<a class="anchor-link" href="#Regiao para segmentacao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 201" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_SEGMENTATION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_702&amp;gt;&amp;lt;loc_575&amp;gt;&amp;lt;loc_866&amp;gt;&amp;lt;loc_772&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_polygons</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">],</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 358.71 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_SEGMENTATION&amp;gt;&#x27;: &#x7B;&#x27;polygons&#x27;: [[[468.1600036621094, 292.0799865722656, 495.67999267578125, 276.239990234375, 523.2000122070312, 279.6000061035156, 546.8800048828125, 297.8399963378906, 555.8399658203125, 324.7200012207031, 548.7999877929688, 351.6000061035156, 529.5999755859375, 369.3599853515625, 493.7599792480469, 371.7599792480469, 468.1600036621094, 359.2799987792969, 449.5999755859375, 334.79998779296875]]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Deteccao de vocabulario aberto">Detec√ß√£o de vocabul√°rio aberto<a class="anchor-link" href="#Deteccao de vocabulario aberto"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 202" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OPEN_VOCABULARY_DETECTION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;a green car&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">bbox_results</span>  <span class="o">=</span> <span class="n">convert_to_od_format</span><span class="p">(</span><span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">bbox_results</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 245.96 ms',
          '&#x7B;&#x27;&amp;lt;OPEN_VOCABULARY_DETECTION&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 159.59999084472656, 598.719970703125, 374.6399841308594]], &#x27;bboxes_labels&#x27;: [&#x27;a green car&#x27;], &#x27;polygons&#x27;: [], &#x27;polygons_labels&#x27;: []&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Regiao para categoria">Regi√£o para categoria<a class="anchor-link" href="#Regiao para categoria"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 203" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_CATEGORY&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 246.42 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_CATEGORY&amp;gt;&#x27;: &#x27;car&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Regiao para descricao">Regi√£o para descri√ß√£o<a class="anchor-link" href="#Regiao para descricao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 204" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_DESCRIPTION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 280.67 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_DESCRIPTION&amp;gt;&#x27;: &#x27;turquoise Volkswagen Beetle&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tarefas OCR">Tarefas OCR<a class="anchor-link" href="#Tarefas OCR"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 205" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Usamos uma nova imagem</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://ecx.images-amazon.com/images/I/51UUzBDAMsL.jpg?download=true&quot;</span>',
      '<span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s1">&#39;RGB&#39;</span><span class="p">)</span>',
      '<span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=RGB size=403x500&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="OCR">OCR<a class="anchor-link" href="#OCR"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 206" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OCR&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 444.77 ms',
          '&#x7B;&#x27;&amp;lt;OCR&amp;gt;&#x27;: &#x27;CUDAFOR ENGINEERSAn Introduction to High-PerformanceParallel ComputingDUANE STORTIMETE YURTOGLU&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="OCR com regiao">OCR com regi√£o<a class="anchor-link" href="#OCR com regiao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 207" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OCR_WITH_REGION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_ocr_bboxes</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 771.91 ms',
          '&#x7B;&#x27;&amp;lt;OCR_WITH_REGION&amp;gt;&#x27;: &#x7B;&#x27;quad_boxes&#x27;: [[167.0435028076172, 50.25, 375.7974853515625, 50.25, 375.7974853515625, 114.75, 167.0435028076172, 114.75], [144.47549438476562, 121.25, 375.7974853515625, 121.25, 375.7974853515625, 149.25, 144.47549438476562, 149.25], [115.86249542236328, 166.25, 376.6034851074219, 166.25, 376.6034851074219, 183.75, 115.86249542236328, 183.25], [239.9864959716797, 184.75, 376.6034851074219, 186.25, 376.6034851074219, 203.75, 239.9864959716797, 201.75], [265.77850341796875, 441.25, 376.6034851074219, 441.25, 376.6034851074219, 456.25, 265.77850341796875, 456.25], [251.67349243164062, 460.25, 376.6034851074219, 460.25, 376.6034851074219, 474.75, 251.67349243164062, 474.75]], &#x27;labels&#x27;: [&#x27;&amp;lt;/s&amp;gt;CUDA&#x27;, &#x27;FOR ENGINEERS&#x27;, &#x27;An Introduction to High-Performance&#x27;, &#x27;Parallel Computing&#x27;, &#x27;DUANE STORTI&#x27;, &#x27;METE YURTOGLU&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=RGB size=403x500&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Uso de Florence-2 base">Uso de Florence-2 base<a class="anchor-link" href="#Uso de Florence-2 base"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 208" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos o modelo e o processador</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">model_id</span> <span class="o">=</span> <span class="s1">&#39;microsoft/Florence-2-base&#39;</span>',
      '<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s1">&#39;cuda&#39;</span><span class="p">)</span>',
      '<span class="n">processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a obter a imagem do carro</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers/tasks/car.jpg?download=true&quot;</span>',
      '<span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span>',
      '<span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tarefas sem prompts adicionais">Tarefas sem prompts adicionais<a class="anchor-link" href="#Tarefas sem prompts adicionais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 209" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Legenda">Legenda<a class="anchor-link" href="#Legenda"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 210" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 158.48 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;CAPTION&amp;gt;&#x27;: &#x27;A green car parked in front of a yellow building.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;DETAILED_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 271.37 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DETAILED_CAPTION&amp;gt;&#x27;: &#x27;The image shows a green car parked in front of a yellow building with two brown doors. The car is on the road and the sky is visible in the background.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 476.14 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#x27;: &#x27;The image shows a vintage Volkswagen Beetle car parked on a cobblestone street in front of a yellow building with two wooden doors. The car is a light blue color with a white stripe running along the side. It has two large, round wheels with silver rims. The building appears to be old and dilapidated, with peeling paint and crumbling walls. The sky is blue and there are trees in the background.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Proposta de regiao">Proposta de regi√£o<a class="anchor-link" href="#Proposta de regiao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 211" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>√â uma detec√ß√£o de objetos, mas nesse caso n√£o retorna as classes dos objetos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_PROPOSAL&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 235.72 ms',
          '&#x7B;&#x27;&amp;lt;REGION_PROPOSAL&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.23999786376953, 160.0800018310547, 596.7999877929688, 372.239990234375], [453.44000244140625, 95.75999450683594, 581.4400024414062, 262.79998779296875], [450.239990234375, 276.7200012207031, 555.2000122070312, 370.79998779296875], [91.83999633789062, 280.55999755859375, 198.0800018310547, 370.79998779296875], [224.95999145507812, 86.63999938964844, 333.7599792480469, 164.87998962402344], [273.6000061035156, 178.8000030517578, 392.0, 228.72000122070312], [166.0800018310547, 179.27999877929688, 264.6399841308594, 230.63999938964844]], &#x27;labels&#x27;: [&#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Deteccao de objetos">Detec√ß√£o de objetos<a class="anchor-link" href="#Deteccao de objetos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 212" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Neste caso, ele retorna as classes dos objetos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OD&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 190.37 ms',
          '&#x7B;&#x27;&amp;lt;OD&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 160.0800018310547, 597.4400024414062, 372.239990234375], [454.7200012207031, 96.23999786376953, 581.4400024414062, 262.79998779296875], [452.1600036621094, 276.7200012207031, 555.2000122070312, 370.79998779296875], [93.75999450683594, 280.55999755859375, 198.72000122070312, 371.2799987792969]], &#x27;labels&#x27;: [&#x27;car&#x27;, &#x27;door&#x27;, &#x27;wheel&#x27;, &#x27;wheel&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Legenda da regiao densa">Legenda da regi√£o densa<a class="anchor-link" href="#Legenda da regiao densa"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 213" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;DENSE_REGION_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 242.62 ms',
          '&#x7B;&#x27;&amp;lt;DENSE_REGION_CAPTION&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 160.0800018310547, 597.4400024414062, 372.239990234375], [454.0799865722656, 95.75999450683594, 582.0800170898438, 262.79998779296875], [450.8800048828125, 276.7200012207031, 555.8399658203125, 370.79998779296875], [92.47999572753906, 280.55999755859375, 199.36000061035156, 370.79998779296875], [225.59999084472656, 87.1199951171875, 334.3999938964844, 164.39999389648438]], &#x27;labels&#x27;: [&#x27;turquoise Volkswagen Beetle&#x27;, &#x27;wooden door with metal handle and lock&#x27;, &#x27;wheel&#x27;, &#x27;wheel&#x27;, &#x27;door&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tarefas com prompts adicionais">Tarefas com prompts adicionais<a class="anchor-link" href="#Tarefas com prompts adicionais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 214" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Anchoragem de Frase">Anchoragem de Frase<a class="anchor-link" href="#Anchoragem de Frase"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 215" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;CAPTION_TO_PHRASE_GROUNDING&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;A green car parked in front of a yellow building.&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 183.85 ms',
          '&#x7B;&#x27;&amp;lt;CAPTION_TO_PHRASE_GROUNDING&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 159.1199951171875, 582.719970703125, 375.1199951171875], [0.3199999928474426, 0.23999999463558197, 639.0399780273438, 305.5199890136719]], &#x27;labels&#x27;: [&#x27;A green car&#x27;, &#x27;a yellow building&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Segmentacao de expressao de referencia">Segmenta√ß√£o de express√£o de refer√™ncia<a class="anchor-link" href="#Segmentacao de expressao de referencia"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 216" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REFERRING_EXPRESSION_SEGMENTATION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;a green car&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_polygons</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">],</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 2531.89 ms',
          '&#x7B;&#x27;&amp;lt;REFERRING_EXPRESSION_SEGMENTATION&amp;gt;&#x27;: &#x7B;&#x27;polygons&#x27;: [[[178.87998962402344, 182.1599884033203, 180.8000030517578, 182.1599884033203, 185.9199981689453, 178.8000030517578, 187.83999633789062, 178.8000030517578, 191.0399932861328, 176.87998962402344, 192.95999145507812, 176.87998962402344, 196.1599884033203, 174.95999145507812, 198.72000122070312, 174.0, 201.9199981689453, 173.0399932861328, 205.1199951171875, 172.0800018310547, 207.67999267578125, 170.63999938964844, 212.1599884033203, 169.67999267578125, 216.0, 168.72000122070312, 219.83999633789062, 167.75999450683594, 223.67999267578125, 166.8000030517578, 228.1599884033203, 165.83999633789062, 233.9199981689453, 164.87998962402344, 240.95999145507812, 163.9199981689453, 249.9199981689453, 162.95999145507812, 262.0799865722656, 162.0, 313.2799987792969, 162.0, 329.2799987792969, 162.95999145507812, 338.239990234375, 163.9199981689453, 344.0, 164.87998962402344, 349.1199951171875, 165.83999633789062, 352.9599914550781, 166.8000030517578, 357.44000244140625, 167.75999450683594, 361.2799987792969, 168.72000122070312, 365.1199951171875, 169.67999267578125, 368.9599914550781, 170.63999938964844, 372.1600036621094, 172.0800018310547, 374.0799865722656, 173.0399932861328, 377.2799987792969, 175.9199981689453, 379.1999816894531, 178.8000030517578, 381.1199951171875, 182.1599884033203, 383.03997802734375, 185.0399932861328, 384.9599914550781, 187.9199981689453, 386.239990234375, 190.8000030517578, 388.1600036621094, 192.72000122070312, 389.44000244140625, 196.0800018310547, 391.3599853515625, 198.95999145507812, 393.2799987792969, 201.83999633789062, 395.1999816894531, 204.72000122070312, 397.1199951171875, 208.0800018310547, 400.3199768066406, 210.95999145507812, 404.1600036621094, 213.83999633789062, 407.3599853515625, 214.79998779296875, 409.2799987792969, 216.72000122070312, 409.2799987792969, 219.1199951171875, 411.1999816894531, 221.0399932861328, 428.47998046875, 221.0399932861328, 429.1199951171875, 222.0, 441.2799987792969, 222.95999145507812, 455.3599853515625, 222.95999145507812, 464.3199768066406, 223.9199981689453, 471.3599853515625, 224.87998962402344, 477.1199951171875, 225.83999633789062, 482.239990234375, 226.79998779296875, 487.3599853515625, 227.75999450683594, 491.1999816894531, 228.72000122070312, 495.03997802734375, 230.1599884033203, 498.239990234375, 231.1199951171875, 502.0799865722656, 232.0800018310547, 505.2799987792969, 233.0399932861328, 508.47998046875, 234.0, 511.03997802734375, 234.95999145507812, 514.239990234375, 236.87998962402344, 516.1599731445312, 236.87998962402344, 519.3599853515625, 238.79998779296875, 521.2799682617188, 238.79998779296875, 527.0399780273438, 242.1599884033203, 528.9599609375, 244.0800018310547, 532.1599731445312, 245.0399932861328, 535.3599853515625, 246.95999145507812, 537.9199829101562, 248.87998962402344, 541.1199951171875, 252.239990234375, 543.0399780273438, 253.1999969482422, 546.239990234375, 254.1599884033203, 549.4400024414062, 254.1599884033203, 552.0, 255.1199951171875, 555.2000122070312, 257.0400085449219, 557.1199951171875, 257.0400085449219, 559.0399780273438, 258.0, 560.9599609375, 259.91998291015625, 564.1599731445312, 260.8800048828125, 566.0800170898438, 260.8800048828125, 568.0, 261.8399963378906, 569.9199829101562, 263.7599792480469, 571.2000122070312, 266.1600036621094, 571.8399658203125, 269.0400085449219, 573.1199951171875, 272.8800048828125, 573.1199951171875, 283.91998291015625, 573.760009765625, 290.1600036621094, 575.0399780273438, 292.0799865722656, 576.9599609375, 294.0, 578.8800048828125, 294.0, 582.0800170898438, 294.0, 591.0399780273438, 294.0, 592.9599609375, 294.9599914550781, 594.8800048828125, 296.8800048828125, 596.1599731445312, 298.79998779296875, 596.1599731445312, 307.91998291015625, 594.8800048828125, 309.8399963378906, 592.9599609375, 310.79998779296875, 578.8800048828125, 310.79998779296875, 576.9599609375, 312.7200012207031, 576.9599609375, 319.91998291015625, 575.0399780273438, 321.8399963378906, 571.2000122070312, 322.79998779296875, 564.1599731445312, 323.7599792480469, 555.2000122070312, 323.7599792480469, 553.2799682617188, 325.67999267578125, 552.0, 328.55999755859375, 552.0, 335.7599792480469, 551.3599853515625, 339.6000061035156, 550.0800170898438, 342.9599914550781, 548.1599731445312, 346.79998779296875, 546.239990234375, 349.67999267578125, 544.3200073242188, 352.55999755859375, 541.1199951171875, 356.8800048828125, 534.0800170898438, 363.6000061035156, 530.239990234375, 366.47998046875, 526.3999633789062, 368.3999938964844, 523.2000122070312, 369.8399963378906, 520.0, 370.79998779296875, 496.9599914550781, 370.79998779296875, 491.1999816894531, 369.8399963378906, 487.3599853515625, 368.3999938964844, 484.1600036621094, 367.44000244140625, 480.3199768066406, 365.5199890136719, 477.1199951171875, 363.6000061035156, 473.2799987792969, 360.7200012207031, 466.239990234375, 353.5199890136719, 464.3199768066406, 350.6399841308594, 462.3999938964844, 347.7599792480469, 461.1199951171875, 345.8399963378906, 460.47998046875, 342.9599914550781, 459.1999816894531, 339.6000061035156, 458.55999755859375, 336.7200012207031, 457.2799987792969, 333.8399963378906, 457.2799987792969, 331.91998291015625, 455.3599853515625, 330.0, 453.44000244140625, 331.91998291015625, 453.44000244140625, 333.8399963378906, 452.1600036621094, 335.7599792480469, 450.239990234375, 337.67999267578125, 448.3199768066406, 338.6399841308594, 423.3599853515625, 338.6399841308594, 422.0799865722656, 339.6000061035156, 418.239990234375, 340.55999755859375, 414.3999938964844, 340.55999755859375, 412.47998046875, 342.9599914550781, 412.47998046875, 344.8800048828125, 411.1999816894531, 346.79998779296875, 409.2799987792969, 344.8800048828125, 409.2799987792969, 342.9599914550781, 407.3599853515625, 340.55999755859375, 405.44000244140625, 339.6000061035156, 205.75999450683594, 339.6000061035156, 205.1199951171875, 338.6399841308594, 201.9199981689453, 337.67999267578125, 198.72000122070312, 336.7200012207031, 196.1599884033203, 336.7200012207031, 194.239990234375, 338.6399841308594, 192.95999145507812, 340.55999755859375, 192.95999145507812, 342.9599914550781, 191.67999267578125, 344.8800048828125, 189.75999450683594, 347.7599792480469, 187.83999633789062, 350.6399841308594, 185.9199981689453, 353.5199890136719, 184.0, 356.8800048828125, 180.8000030517578, 360.7200012207031, 176.95999145507812, 364.55999755859375, 173.75999450683594, 366.47998046875, 169.9199981689453, 368.3999938964844, 166.72000122070312, 369.8399963378906, 162.87998962402344, 370.79998779296875, 155.83999633789062, 371.7599792480469, 130.87998962402344, 371.7599792480469, 127.04000091552734, 370.79998779296875, 123.83999633789062, 369.8399963378906, 120.0, 367.44000244140625, 116.79999542236328, 365.5199890136719, 113.5999984741211, 363.6000061035156, 105.91999816894531, 355.91998291015625, 104.0, 352.55999755859375, 102.07999420166016, 349.67999267578125, 100.79999542236328, 347.7599792480469, 100.15999603271484, 344.8800048828125, 98.87999725341797, 341.5199890136719, 98.87999725341797, 338.6399841308594, 98.23999786376953, 336.7200012207031, 96.31999969482422, 334.79998779296875, 93.1199951171875, 334.79998779296875, 91.83999633789062, 335.7599792480469, 86.08000183105469, 336.7200012207031, 75.83999633789062, 336.7200012207031, 75.19999694824219, 337.67999267578125, 70.08000183105469, 338.6399841308594, 66.87999725341797, 338.6399841308594, 64.95999908447266, 336.7200012207031, 63.03999710083008, 335.7599792480469, 52.15999984741211, 335.7599792480469, 48.959999084472656, 334.79998779296875, 47.03999710083008, 333.8399963378906, 45.119998931884766, 331.91998291015625, 45.119998931884766, 330.0, 47.03999710083008, 327.6000061035156, 47.03999710083008, 325.67999267578125, 45.119998931884766, 323.7599792480469, 43.20000076293945, 322.79998779296875, 40.0, 322.79998779296875, 38.07999801635742, 321.8399963378906, 36.15999984741211, 319.91998291015625, 34.880001068115234, 317.03997802734375, 34.880001068115234, 309.8399963378906, 36.15999984741211, 307.91998291015625, 38.07999801635742, 306.0, 40.0, 305.03997802734375, 43.84000015258789, 304.0799865722656, 63.03999710083008, 304.0799865722656, 64.95999908447266, 303.1199951171875, 66.87999725341797, 301.1999816894531, 68.15999603271484, 298.79998779296875, 68.79999542236328, 295.91998291015625, 68.79999542236328, 293.0400085449219, 68.15999603271484, 292.0799865722656, 66.87999725341797, 289.1999816894531, 66.87999725341797, 278.1600036621094, 68.15999603271484, 274.79998779296875, 68.79999542236328, 272.8800048828125, 72.0, 270.0, 73.91999816894531, 269.0400085449219, 77.1199951171875, 268.0799865722656, 80.95999908447266, 268.0799865722656, 82.87999725341797, 266.1600036621094, 80.95999908447266, 262.79998779296875, 80.95999908447266, 260.8800048828125, 82.87999725341797, 258.9599914550781, 84.79999542236328, 258.0, 88.0, 258.0, 89.91999816894531, 257.0400085449219, 91.83999633789062, 255.1199951171875, 91.83999633789062, 254.1599884033203, 95.04000091552734, 249.83999633789062, 105.91999816894531, 238.79998779296875, 107.83999633789062, 236.87998962402344, 109.75999450683594, 234.95999145507812, 118.7199935913086, 225.83999633789062, 121.91999816894531, 223.9199981689453, 123.83999633789062, 222.95999145507812, 125.75999450683594, 222.95999145507812, 127.68000030517578, 222.0, 130.87998962402344, 220.0800018310547, 134.72000122070312, 216.72000122070312, 139.83999633789062, 212.87998962402344, 144.95999145507812, 208.0800018310547, 150.0800018310547, 203.75999450683594, 153.9199981689453, 200.87998962402344, 157.75999450683594, 198.0, 159.0399932861328, 198.0, 162.87998962402344, 195.1199951171875, 168.0, 189.83999633789062, 171.83999633789062, 186.95999145507812, 175.0399932861328, 186.0, 176.95999145507812, 184.0800018310547]]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Regiao para segmentacao">Regi√£o para segmenta√ß√£o<a class="anchor-link" href="#Regiao para segmentacao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 217" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_SEGMENTATION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_702&amp;gt;&amp;lt;loc_575&amp;gt;&amp;lt;loc_866&amp;gt;&amp;lt;loc_772&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_polygons</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">],</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 653.99 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_SEGMENTATION&amp;gt;&#x27;: &#x7B;&#x27;polygons&#x27;: [[[470.7200012207031, 288.239990234375, 473.91998291015625, 286.32000732421875, 477.1199951171875, 284.3999938964844, 479.03997802734375, 283.44000244140625, 480.9599914550781, 283.44000244140625, 484.1600036621094, 281.5199890136719, 486.7200012207031, 280.55999755859375, 489.91998291015625, 279.6000061035156, 493.7599792480469, 278.1600036621094, 500.79998779296875, 277.1999816894531, 511.03997802734375, 277.1999816894531, 514.8800048828125, 278.1600036621094, 518.0800170898438, 279.6000061035156, 520.6400146484375, 281.5199890136719, 522.5599975585938, 281.5199890136719, 524.47998046875, 283.44000244140625, 527.6799926757812, 284.3999938964844, 530.8800048828125, 286.32000732421875, 534.719970703125, 289.1999816894531, 543.0399780273438, 297.3599853515625, 544.9599609375, 300.239990234375, 546.8800048828125, 303.1199951171875, 548.7999877929688, 307.44000244140625, 550.0800170898438, 310.32000732421875, 550.719970703125, 313.1999816894531, 552.0, 317.03997802734375, 552.0, 334.32000732421875, 550.719970703125, 338.1600036621094, 550.0800170898438, 341.03997802734375, 548.7999877929688, 343.91998291015625, 546.8800048828125, 348.239990234375, 544.9599609375, 351.1199951171875, 543.0399780273438, 354.0, 532.7999877929688, 364.0799865722656, 529.5999755859375, 366.0, 527.6799926757812, 366.9599914550781, 524.47998046875, 367.91998291015625, 521.9199829101562, 368.8800048828125, 518.0800170898438, 369.8399963378906, 496.9599914550781, 369.8399963378906, 489.91998291015625, 368.8800048828125, 486.7200012207031, 367.91998291015625, 484.1600036621094, 366.9599914550781, 480.9599914550781, 366.0, 479.03997802734375, 365.03997802734375, 475.8399963378906, 363.1199951171875, 472.0, 360.239990234375, 466.8799743652344, 354.9599914550781, 463.67999267578125, 351.1199951171875, 461.7599792480469, 348.239990234375, 459.8399963378906, 343.91998291015625, 458.55999755859375, 341.03997802734375, 457.91998291015625, 338.1600036621094, 456.6399841308594, 335.2799987792969, 456.0, 330.9599914550781, 454.7200012207031, 326.1600036621094, 454.7200012207031, 318.9599914550781, 456.0, 313.1999816894531, 456.6399841308594, 309.3599853515625, 457.91998291015625, 306.47998046875, 458.55999755859375, 303.1199951171875, 461.7599792480469, 297.3599853515625, 463.67999267578125, 294.47998046875]]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Deteccao de vocabulario aberto">Detec√ß√£o de vocabul√°rio aberto<a class="anchor-link" href="#Deteccao de vocabulario aberto"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 218" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OPEN_VOCABULARY_DETECTION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;a green car&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">bbox_results</span>  <span class="o">=</span> <span class="n">convert_to_od_format</span><span class="p">(</span><span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">bbox_results</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 138.76 ms',
          '&#x7B;&#x27;&amp;lt;OPEN_VOCABULARY_DETECTION&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 158.63999938964844, 582.0800170898438, 374.1600036621094]], &#x27;bboxes_labels&#x27;: [&#x27;a green car&#x27;], &#x27;polygons&#x27;: [], &#x27;polygons_labels&#x27;: []&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Regiao para categoria">Regi√£o para categoria<a class="anchor-link" href="#Regiao para categoria"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 219" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_CATEGORY&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 130.24 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_CATEGORY&amp;gt;&#x27;: &#x27;car&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Regiao para descricao">Regi√£o para descri√ß√£o<a class="anchor-link" href="#Regiao para descricao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 220" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_DESCRIPTION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 149.88 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_DESCRIPTION&amp;gt;&#x27;: &#x27;mint green Volkswagen Beetle&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tarefas OCR">Tarefas OCR<a class="anchor-link" href="#Tarefas OCR"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 221" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Usamos uma nova imagem</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://ecx.images-amazon.com/images/I/51UUzBDAMsL.jpg?download=true&quot;</span>',
      '<span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s1">&#39;RGB&#39;</span><span class="p">)</span>',
      '<span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=RGB size=403x500&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="OCR">OCR<a class="anchor-link" href="#OCR"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 222" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OCR&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 231.77 ms',
          '&#x7B;&#x27;&amp;lt;OCR&amp;gt;&#x27;: &#x27;CUDAFOR ENGINEERSAn Introduction to High-PerformanceParallel ComputingDUANE STORTIMETE YURTOGLU&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="OCR com regiao">OCR com regi√£o<a class="anchor-link" href="#OCR com regiao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 223" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OCR_WITH_REGION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_ocr_bboxes</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 425.63 ms',
          '&#x7B;&#x27;&amp;lt;OCR_WITH_REGION&amp;gt;&#x27;: &#x7B;&#x27;quad_boxes&#x27;: [[167.0435028076172, 50.25, 374.9914855957031, 50.25, 374.9914855957031, 114.25, 167.0435028076172, 114.25], [144.8784942626953, 120.75, 374.9914855957031, 120.75, 374.9914855957031, 148.75, 144.8784942626953, 148.75], [115.86249542236328, 165.25, 376.20050048828125, 165.25, 376.20050048828125, 183.75, 115.86249542236328, 182.75], [239.9864959716797, 184.75, 376.20050048828125, 185.75, 376.20050048828125, 202.75, 239.9864959716797, 201.75], [266.1814880371094, 440.75, 376.20050048828125, 440.75, 376.20050048828125, 455.75, 266.1814880371094, 455.75], [251.67349243164062, 459.75, 376.20050048828125, 459.75, 376.20050048828125, 474.25, 251.67349243164062, 474.25]], &#x27;labels&#x27;: [&#x27;&amp;lt;/s&amp;gt;CUDA&#x27;, &#x27;FOR ENGINEERS&#x27;, &#x27;An Introduction to High-Performance&#x27;, &#x27;Parallel Computing&#x27;, &#x27;DUANE STORTI&#x27;, &#x27;METE YURTOGLU&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=RGB size=403x500&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Uso do Florence-2 base fine tuning">Uso do Florence-2 base fine tuning<a class="anchor-link" href="#Uso do Florence-2 base fine tuning"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 224" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos o modelo e o processador</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">model_id</span> <span class="o">=</span> <span class="s1">&#39;microsoft/Florence-2-base-ft&#39;</span>',
      '<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s1">&#39;cuda&#39;</span><span class="p">)</span>',
      '<span class="n">processor</span> <span class="o">=</span> <span class="n">AutoProcessor</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a obter a imagem do carro</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers/tasks/car.jpg?download=true&quot;</span>',
      '<span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span>',
      '<span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tarefas sem prompts adicionais">Tarefas sem prompts adicionais<a class="anchor-link" href="#Tarefas sem prompts adicionais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 225" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Legenda">Legenda<a class="anchor-link" href="#Legenda"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 226" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 176.65 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;CAPTION&amp;gt;&#x27;: &#x27;A green car parked in front of a yellow building.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;DETAILED_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 246.26 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;DETAILED_CAPTION&amp;gt;&#x27;: &#x27;In this image we can see a car on the road. In the background there is a wall with doors. At the top of the image there is sky.&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="n">answer</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 259.87 ms',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x7B;&#x27;&amp;lt;MORE_DETAILED_CAPTION&amp;gt;&#x27;: &#x27;There is a light green car parked in front of a yellow building. There are two brown doors on the building behind the car. There is a brick sidewalk under the car on the ground. &#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Proposta de regiao">Proposta de regi√£o<a class="anchor-link" href="#Proposta de regiao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 227" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>√â uma detec√ß√£o de objetos, mas neste caso n√£o retorna as classes dos objetos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_PROPOSAL&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 120.69 ms',
          '&#x7B;&#x27;&amp;lt;REGION_PROPOSAL&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 160.55999755859375, 598.0800170898438, 371.2799987792969]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Deteccao de objetos">Detec√ß√£o de objetos<a class="anchor-link" href="#Deteccao de objetos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 228" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Neste caso, ele retorna as classes dos objetos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OD&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 199.46 ms',
          '&#x7B;&#x27;&amp;lt;OD&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 160.55999755859375, 598.0800170898438, 371.7599792480469], [454.7200012207031, 96.72000122070312, 581.4400024414062, 262.32000732421875], [453.44000244140625, 276.7200012207031, 554.5599975585938, 370.79998779296875], [93.1199951171875, 280.55999755859375, 197.44000244140625, 371.2799987792969]], &#x27;labels&#x27;: [&#x27;car&#x27;, &#x27;door&#x27;, &#x27;wheel&#x27;, &#x27;wheel&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Legenda da regiao densa">Legenda da regi√£o densa<a class="anchor-link" href="#Legenda da regiao densa"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 229" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;DENSE_REGION_CAPTION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 210.33 ms',
          '&#x7B;&#x27;&amp;lt;DENSE_REGION_CAPTION&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[35.52000045776367, 160.55999755859375, 598.0800170898438, 371.2799987792969], [454.0799865722656, 276.7200012207031, 553.9199829101562, 370.79998779296875], [94.4000015258789, 280.55999755859375, 196.1599884033203, 371.2799987792969]], &#x27;labels&#x27;: [&#x27;turquoise volkswagen beetle&#x27;, &#x27;wheel&#x27;, &#x27;wheel&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tarefas com prompts adicionais">Tarefas com prompts adicionais<a class="anchor-link" href="#Tarefas com prompts adicionais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 230" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Ancoragem de Frase">Ancoragem de Frase<a class="anchor-link" href="#Ancoragem de Frase"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 231" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;CAPTION_TO_PHRASE_GROUNDING&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;A green car parked in front of a yellow building.&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 168.37 ms',
          '&#x7B;&#x27;&amp;lt;CAPTION_TO_PHRASE_GROUNDING&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 159.1199951171875, 598.0800170898438, 375.1199951171875], [0.3199999928474426, 0.23999999463558197, 639.0399780273438, 304.0799865722656]], &#x27;labels&#x27;: [&#x27;A green car&#x27;, &#x27;a yellow building&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Segmentacao de expressao de referencia">Segmenta√ß√£o de express√£o de refer√™ncia<a class="anchor-link" href="#Segmentacao de expressao de referencia"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 232" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REFERRING_EXPRESSION_SEGMENTATION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;a green car&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_polygons</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">],</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 395.38 ms',
          '&#x7B;&#x27;&amp;lt;REFERRING_EXPRESSION_SEGMENTATION&amp;gt;&#x27;: &#x7B;&#x27;polygons&#x27;: [[[180.8000030517578, 179.27999877929688, 237.75999450683594, 163.44000244140625, 333.1199951171875, 162.47999572753906, 374.7200012207031, 172.55999755859375, 407.3599853515625, 219.59999084472656, 477.7599792480469, 223.9199981689453, 540.47998046875, 248.87998962402344, 576.3200073242188, 264.7200012207031, 576.3200073242188, 292.55999755859375, 598.719970703125, 292.55999755859375, 598.719970703125, 311.7599792480469, 577.5999755859375, 311.7599792480469, 577.5999755859375, 321.8399963378906, 553.9199829101562, 325.1999816894531, 546.239990234375, 355.44000244140625, 523.8399658203125, 371.2799987792969, 477.7599792480469, 367.91998291015625, 456.6399841308594, 342.0, 452.1600036621094, 338.6399841308594, 201.27999877929688, 338.6399841308594, 187.83999633789062, 358.79998779296875, 162.87998962402344, 371.2799987792969, 121.27999877929688, 371.2799987792969, 98.87999725341797, 348.7200012207031, 94.4000015258789, 331.91998291015625, 66.23999786376953, 338.6399841308594, 39.36000061035156, 331.91998291015625, 47.03999710083008, 325.1999816894531, 34.880001068115234, 321.8399963378906, 34.880001068115234, 305.03997802734375, 66.23999786376953, 299.2799987792969, 67.5199966430664, 269.0400085449219, 82.87999725341797, 269.0400085449219, 82.87999725341797, 258.9599914550781, 120.0, 222.95999145507812]]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Regiao para segmentacao">Regi√£o para segmenta√ß√£o<a class="anchor-link" href="#Regiao para segmentacao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 233" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_SEGMENTATION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_702&amp;gt;&amp;lt;loc_575&amp;gt;&amp;lt;loc_866&amp;gt;&amp;lt;loc_772&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_polygons</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">],</span> <span class="n">fill_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 279.46 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_SEGMENTATION&amp;gt;&#x27;: &#x7B;&#x27;polygons&#x27;: [[[464.3199768066406, 292.0799865722656, 482.239990234375, 280.55999755859375, 504.0, 276.239990234375, 521.9199829101562, 280.55999755859375, 539.8399658203125, 292.0799865722656, 551.3599853515625, 308.8800048828125, 555.8399658203125, 325.67999267578125, 551.3599853515625, 341.5199890136719, 546.8800048828125, 354.9599914550781, 537.9199829101562, 365.03997802734375, 521.9199829101562, 371.7599792480469, 499.5199890136719, 371.7599792480469, 483.5199890136719, 368.3999938964844, 470.0799865722656, 361.67999267578125, 461.1199951171875, 351.6000061035156, 456.6399841308594, 339.1199951171875, 449.5999755859375, 332.3999938964844, 454.0799865722656, 318.9599914550781, 456.6399841308594, 305.5199890136719]]], &#x27;labels&#x27;: [&#x27;&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Deteccao de vocabulario aberto">Detec√ß√£o de vocabul√°rio aberto<a class="anchor-link" href="#Deteccao de vocabulario aberto"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 234" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OPEN_VOCABULARY_DETECTION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;a green car&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">bbox_results</span>  <span class="o">=</span> <span class="n">convert_to_od_format</span><span class="p">(</span><span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
      '<span class="n">plot_bbox</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">bbox_results</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 134.53 ms',
          '&#x7B;&#x27;&amp;lt;OPEN_VOCABULARY_DETECTION&amp;gt;&#x27;: &#x7B;&#x27;bboxes&#x27;: [[34.880001068115234, 159.1199951171875, 597.4400024414062, 374.6399841308594]], &#x27;bboxes_labels&#x27;: [&#x27;a green car&#x27;], &#x27;polygons&#x27;: [], &#x27;polygons_labels&#x27;: []&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Regiao para categoria">Regi√£o para categoria<a class="anchor-link" href="#Regiao para categoria"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 235" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_CATEGORY&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 131.88 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_CATEGORY&amp;gt;&#x27;: &#x27;car&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Regiao para descricao">Regi√£o para descri√ß√£o<a class="anchor-link" href="#Regiao para descricao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 236" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;REGION_TO_DESCRIPTION&amp;gt;&#39;</span>',
      '<span class="n">text_input</span><span class="o">=</span><span class="s2">&quot;&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&quot;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">,</span> <span class="n">text_input</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 136.35 ms',
          '&#x7B;&#x27;&amp;lt;REGION_TO_DESCRIPTION&amp;gt;&#x27;: &#x27;car&amp;lt;loc_52&amp;gt;&amp;lt;loc_332&amp;gt;&amp;lt;loc_932&amp;gt;&amp;lt;loc_774&amp;gt;&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tarefas OCR">Tarefas OCR<a class="anchor-link" href="#Tarefas OCR"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 237" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Usamos uma nova imagem</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://ecx.images-amazon.com/images/I/51UUzBDAMsL.jpg?download=true&quot;</span>',
      '<span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s1">&#39;RGB&#39;</span><span class="p">)</span>',
      '<span class="n">image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=RGB size=403x500&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="OCR">OCR<a class="anchor-link" href="#OCR"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 238" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OCR&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 227.62 ms',
          '&#x7B;&#x27;&amp;lt;OCR&amp;gt;&#x27;: &#x27;CUDAFOR ENGINEERSAn Introduction to High-PerformanceParallel ComputingDUANE STORYIMETE YURTOGLU&#x27;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="OCR com regiao">OCR com regi√£o<a class="anchor-link" href="#OCR com regiao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 239" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">task_prompt</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;OCR_WITH_REGION&amp;gt;&#39;</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="n">answer</span> <span class="o">=</span> <span class="n">generate_answer</span><span class="p">(</span><span class="n">task_prompt</span><span class="p">)</span>',
      '<span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Time taken: </span><span class="si">{</span><span class="p">(</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>',
      '<span class="n">draw_ocr_bboxes</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">answer</span><span class="p">[</span><span class="n">task_prompt</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Time taken: 428.51 ms',
          '&#x7B;&#x27;&amp;lt;OCR_WITH_REGION&amp;gt;&#x27;: &#x7B;&#x27;quad_boxes&#x27;: [[167.44650268554688, 50.25, 374.9914855957031, 50.25, 374.9914855957031, 114.25, 167.44650268554688, 114.25], [144.8784942626953, 121.25, 374.9914855957031, 120.75, 374.9914855957031, 148.75, 144.8784942626953, 149.25], [115.4594955444336, 165.75, 376.6034851074219, 165.75, 376.6034851074219, 183.75, 115.4594955444336, 183.75], [239.9864959716797, 184.75, 376.6034851074219, 185.75, 376.6034851074219, 203.75, 239.9864959716797, 202.25], [266.1814880371094, 441.25, 376.20050048828125, 441.25, 376.20050048828125, 456.25, 266.1814880371094, 456.25], [251.67349243164062, 459.75, 376.20050048828125, 459.75, 376.20050048828125, 474.75, 251.67349243164062, 474.75]], &#x27;labels&#x27;: [&#x27;&amp;lt;/s&amp;gt;CUDA&#x27;, &#x27;FOR ENGINEERS&#x27;, &#x27;An Introduction to High-Performance&#x27;, &#x27;Parallel Computing&#x27;, &#x27;DUANE STORYI&#x27;, &#x27;METE YURTOGLU&#x27;]&#x7D;&#x7D;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;PIL.Image.Image image mode=RGB size=403x500&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>

















    </div>

  </section>

</PostLayout>
