---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Git';
const end_url = 'git';
const description = 'Voc√™ reescreveu aquele c√≥digo que levou horas para ser feito? N√£o entre em p√¢nico! Com o GIT, diga adeus ao Ops, apaguei. Junte-se a mim nesta aventura e aprenda a brincar com as vers√µes como um astro da programa√ß√£o. üé∏ üíæ #GITeRoll';
const keywords = 'git, controle de vers√µes, versionamento, git tags, git branches, git reset, git checkout';
const languaje = 'PT';
const image_path = 'https://images.maximofn.com/Git.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1268
    image_height=664
    image_extension=webp
    article_date=2023-04-23+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Introducao"><h2>Introdu√ß√£o</h2></a>
      <a class="anchor-link" href="#As areas do git"><h2>As √°reas do git</h2></a>
      <a class="anchor-link" href="#Instalar git"><h2>Instalar git</h2></a>
      <a class="anchor-link" href="#Configuracao inicial"><h2>Configura√ß√£o inicial</h2></a>
      <a class="anchor-link" href="#Configuracao do nome e do email"><h3>Configura√ß√£o do nome e do email</h3></a>
      <a class="anchor-link" href="#Configurar o editor padrao"><h3>Configurar o editor padr√£o</h3></a>
      <a class="anchor-link" href="#Verificar configuracao do git"><h3>Verificar configura√ß√£o do git</h3></a>
      <a class="anchor-link" href="#Controle de versoes localmente"><h2>Controle de vers√µes localmente</h2></a>
      <a class="anchor-link" href="#Inicializar um novo reposit√≥rio (git init)"><h3>Inicializar um novo reposit√≥rio (<code>git init</code>)</h3></a>
      <a class="anchor-link" href="#Criar novos arquivos"><h3>Criar novos arquivos</h3></a>
      <a class="anchor-link" href="#Desfazer a criacao de um novo arquivo"><h3>Desfazer a cria√ß√£o de um novo arquivo</h3></a>
      <a class="anchor-link" href="#git clean"><h4><code>git clean</code></h4></a>
      <a class="anchor-link" href="#Adicionar um arquivo √† √°rea de staged (git add)"><h3>Adicionar um arquivo √† √°rea de staged (<code>git add</code>)</h3></a>
      <a class="anchor-link" href="#Retirar um arquivo da √°rea staged (git reset)"><h3>Retirar um arquivo da √°rea staged (<code>git reset</code>)</h3></a>
      <a class="anchor-link" href="#Commit (git commit)"><h3>Commit (<code>git commit</code>)</h3></a>
      <a class="anchor-link" href="#Commit pulando add (git commit -a -m ou git commit -am)"><h4>Commit pulando add (<code>git commit -a -m</code> ou <code>git commit -am</code>)</h4></a>
      <a class="anchor-link" href="#Modificar um arquivo ao qual foi feito commit"><h3>Modificar um arquivo ao qual foi feito commit</h3></a>
      <a class="anchor-link" href="#Ver altera√ß√µes em um arquivo (git diff &#x3C;arquivo&#x3E;)"><h3>Ver altera√ß√µes em um arquivo (<code>git diff &#x3C;arquivo&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Desfazer modifica√ß√µes em um arquivo (git restore &#x3C;arquivo&#x3E;)"><h3>Desfazer modifica√ß√µes em um arquivo (<code>git restore &#x3C;arquivo&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Hist√≥rico de altera√ß√µes (git log)"><h3>Hist√≥rico de altera√ß√µes (<code>git log</code>)</h3></a>
      <a class="anchor-link" href="#CABECALHO"><h3>CABE√áALHO</h3></a>
      <a class="anchor-link" href="#Modificar um commit (git commit --amend)"><h3>Modificar um commit (<code>git commit --amend</code>)</h3></a>
      <a class="anchor-link" href="#Modificar a mensagem de commit"><h4>Modificar a mensagem de commit</h4></a>
      <a class="anchor-link" href="#Adicionar arquivos ao ultimo commit"><h4>Adicionar arquivos ao √∫ltimo commit</h4></a>
      <a class="anchor-link" href="#Desfazer um commit (git reset HEAD~1)"><h3>Desfazer um commit (<code>git reset HEAD~1</code>)</h3></a>
      <a class="anchor-link" href="#Desfazer um commit mantendo as altera√ß√µes (git reset --soft HEAD~1)"><h4>Desfazer um commit mantendo as altera√ß√µes (<code>git reset --soft HEAD~1</code>)</h4></a>
      <a class="anchor-link" href="#Desfazer um commit descartando as altera√ß√µes (git reset --hard HEAD~1)"><h4>Desfazer um commit descartando as altera√ß√µes (<code>git reset --hard HEAD~1</code>)</h4></a>
      <a class="anchor-link" href="#Modificar um commit remoto (git push --force)"><h3>Modificar um commit remoto (<code>git push --force</code>)</h3></a>
      <a class="anchor-link" href="#Modificar um commit remoto (git push --force-with-lease)"><h3>Modificar um commit remoto (<code>git push --force-with-lease</code>)</h3></a>
      <a class="anchor-link" href="#Ignorar arquivos (.gitignore)"><h3>Ignorar arquivos (<code>.gitignore</code>)</h3></a>
      <a class="anchor-link" href="#Quais arquivos adicionar ao .gitignore?"><h4>Quais arquivos adicionar ao <code>.gitignore</code>?</h4></a>
      <a class="anchor-link" href="#Como ignorar sempre os mesmos arquivos?"><h4>Como ignorar sempre os mesmos arquivos?</h4></a>
      <a class="anchor-link" href="#Remover um arquivo de um commit"><h3>Remover um arquivo de um commit</h3></a>
      <a class="anchor-link" href="#Excluir o arquivo e criar um novo commit"><h4>Excluir o arquivo e criar um novo commit</h4></a>
      <a class="anchor-link" href="#Desfazer o commit e cria-lo novamente sem o arquivo"><h4>Desfazer o commit e cri√°-lo novamente sem o arquivo</h4></a>
      <a class="anchor-link" href="#Hist√≥rico de altera√ß√µes de um arquivo (git log &#x3C;arquivo&#x3E;)"><h3>Hist√≥rico de altera√ß√µes de um arquivo (<code>git log &#x3C;arquivo&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Ver modifica√ß√µes de um arquivo em um ponto espec√≠fico do hist√≥rico (git show &#x3C;hash&#x3E; &#x3C;arquivo&#x3E; ou git diff &#x3C;arquivo&#x3E;)"><h3>Ver modifica√ß√µes de um arquivo em um ponto espec√≠fico do hist√≥rico (<code>git show &#x3C;hash&#x3E; &#x3C;arquivo&#x3E;</code> ou <code>git diff &#x3C;arquivo&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Viagem ao passado (git reset --hard &#x3C;hash&#x3E; ou git reset --soft &#x3C;hash&#x3E;)"><h3>Viagem ao passado (<code>git reset --hard &#x3C;hash&#x3E;</code> ou <code>git reset --soft &#x3C;hash&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Volta ao futuro (git reflog)"><h3>Volta ao futuro (<code>git reflog</code>)</h3></a>
      <a class="anchor-link" href="#Pesquisa em arquivos (git grep &#x3C;palavra&#x3E;)"><h3>Pesquisa em arquivos (<code>git grep &#x3C;palavra&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Busca em commits (git log -S &#x3C;palavra&#x3E;)"><h3>Busca em commits (<code>git log -S &#x3C;palavra&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Ramas"><h2>Ramas</h2></a>
      <a class="anchor-link" href="#Criar uma branch (git branch &#x3C;nome-da-branch&#x3E;)"><h3>Criar uma branch (<code>git branch &#x3C;nome-da-branch&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Listar ramos (git branch)"><h3>Listar ramos (<code>git branch</code>)</h3></a>
      <a class="anchor-link" href="#Renomear ramos, adeus √† ramo master (git branch -m &#x3C;nome antigo&#x3E; &#x3C;novo nome&#x3E;)"><h3>Renomear ramos, adeus √† ramo <code>master</code> (<code>git branch -m &#x3C;nome antigo&#x3E; &#x3C;novo nome&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Mudar de ramo (git switch &#x3C;branch&#x3E;)"><h3>Mudar de ramo (<code>git switch &#x3C;branch&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Obter a branch em que estamos (git branch --show-current)"><h3>Obter a branch em que estamos (<code>git branch --show-current</code>)</h3></a>
      <a class="anchor-link" href="#Lista de ramas mais recentes (git branch --sort=-committerdate)"><h3>Lista de ramas mais recentes (<code>git branch --sort=-committerdate</code>)</h3></a>
      <a class="anchor-link" href="#O comando preterido git checkout"><h3>O comando preterido <code>git checkout</code></h3></a>
      <a class="anchor-link" href="#Fundindo branches (git merge)"><h3>Fundindo branches (<code>git merge</code>)</h3></a>
      <a class="anchor-link" href="#Avanco rapido"><h4>Avan√ßo r√°pido</h4></a>
      <a class="anchor-link" href="#Sem avanco rapido ou mesclagem verdadeira"><h4>Sem avan√ßo r√°pido ou mesclagem verdadeira</h4></a>
      <a class="anchor-link" href="#Squash"><h4>Squash</h4></a>
      <a class="anchor-link" href="#Conflitos ao mesclar"><h3>Conflitos ao mesclar</h3></a>
      <a class="anchor-link" href="#Criamos um conflito"><h4>Criamos um conflito</h4></a>
      <a class="anchor-link" href="#Resolver um conflito"><h4>Resolver um conflito</h4></a>
      <a class="anchor-link" href="#Remover ramos"><h3>Remover ramos</h3></a>
      <a class="anchor-link" href="#Excluir branches mescladas (git branch -d &#x3C;branch&#x3E;)"><h4>Excluir branches mescladas (<code>git branch -d &#x3C;branch&#x3E;</code>)</h4></a>
      <a class="anchor-link" href="#Excluir branches que n√£o foram mesclados com a branch principal (git branch -D &#x3C;branch&#x3E;)"><h4>Excluir branches que n√£o foram mesclados com a branch principal (<code>git branch -D &#x3C;branch&#x3E;</code>)</h4></a>
      <a class="anchor-link" href="#Trabalhando com repositorios remotos"><h2>Trabalhando com reposit√≥rios remotos</h2></a>
      <a class="anchor-link" href="#Clonar um reposit√≥rio remoto (git clone &#x3C;reposit√≥rio&#x3E;)"><h3>Clonar um reposit√≥rio remoto (<code>git clone &#x3C;reposit√≥rio&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Vincular um repositorio local a um remoto"><h3>Vincular um reposit√≥rio local a um remoto</h3></a>
      <a class="anchor-link" href="#Enviar as altera√ß√µes de um reposit√≥rio local para um reposit√≥rio remoto (git push)"><h3>Enviar as altera√ß√µes de um reposit√≥rio local para um reposit√≥rio remoto (<code>git push</code>)</h3></a>
      <a class="anchor-link" href="#Baixar as altera√ß√µes de um reposit√≥rio remoto para um reposit√≥rio local (git pull)"><h3>Baixar as altera√ß√µes de um reposit√≥rio remoto para um reposit√≥rio local (<code>git pull</code>)</h3></a>
      <a class="anchor-link" href="#Sincronizar as branches remotas e locais"><h3>Sincronizar as branches remotas e locais</h3></a>
      <a class="anchor-link" href="#Alias"><h2>Alias</h2></a>
      <a class="anchor-link" href="#Alias de comandos existentes de git"><h3>Alias de comandos existentes de git</h3></a>
      <a class="anchor-link" href="#Alias de comandos que nao sao do git"><h3>Alias de comandos que n√£o s√£o do git</h3></a>
      <a class="anchor-link" href="#Lista com todos os aliases"><h3>Lista com todos os aliases</h3></a>
      <a class="anchor-link" href="#Armazenamento tempor√°rio (git stash)"><h2>Armazenamento tempor√°rio (<code>git stash</code>)</h2></a>
      <a class="anchor-link" href="#Tudo para o stash (git stash -u -a)"><h3>Tudo para o stash (<code>git stash -u -a</code>)</h3></a>
      <a class="anchor-link" href="#Lista de dep√≥sitos (git stash list)"><h3>Lista de dep√≥sitos (<code>git stash list</code>)</h3></a>
      <a class="anchor-link" href="#Armazenamento com descri√ß√£o (git stash push -m &#x3C;descri√ß√£o&#x3E;)"><h3>Armazenamento com descri√ß√£o (<code>git stash push -m &#x3C;descri√ß√£o&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Recuperar o √∫ltimo stash (git stash pop)"><h3>Recuperar o √∫ltimo stash (<code>git stash pop</code>)</h3></a>
      <a class="anchor-link" href="#Remover um stash (git stash drop &#x3C;posi√ß√£o&#x3E;)"><h3>Remover um stash (<code>git stash drop &#x3C;posi√ß√£o&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Remover todos os stashes (git stash clear)"><h3>Remover todos os stashes (<code>git stash clear</code>)</h3></a>
      <a class="anchor-link" href="#Tags"><h2>Tags</h2></a>
      <a class="anchor-link" href="#Criar uma nova tag (git tag -a &#x3C;nome_da_tag&#x3E; -m &quot;&#x3C;mensagem&#x3E;&quot;)"><h3>Criar uma nova tag (<code>git tag -a &#x3C;nome_da_tag&#x3E; -m &quot;&#x3C;mensagem&#x3E;&quot;</code>)</h3></a>
      <a class="anchor-link" href="#Lista de tags (git tag)"><h3>Lista de tags (<code>git tag</code>)</h3></a>
      <a class="anchor-link" href="#Criar uma tag a partir de um commit antigo (git tag -a &#x3C;nome_da_tag&#x3E; -m &quot;&#x3C;mensagem&#x3E;&quot; &#x3C;hash&#x3E;)"><h3>Criar uma tag a partir de um commit antigo (<code>git tag -a &#x3C;nome_da_tag&#x3E; -m &quot;&#x3C;mensagem&#x3E;&quot; &#x3C;hash&#x3E;</code>)</h3></a>
      <a class="anchor-link" href="#Mudar entre tags (git reset --hard &#x3C;tag&#x3E; ou git reset --soft &#x3C;tag&#x3E;)"><h3>Mudar entre tags (<code>git reset --hard &#x3C;tag&#x3E;</code> ou <code>git reset --soft &#x3C;tag&#x3E;</code>)</h3></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Aviso: Este post foi traduzido para o portugu√™s usando um modelo de tradu√ß√£o autom√°tica. Por favor, me avise se encontrar algum erro.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Introducao">Introdu√ß√£o<a class="anchor-link" href="#Introducao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 165" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Git √© um software de controle de vers√µes criado por Linus Torvalds, que o desenvolveu para ter um bom controle de vers√µes ao desenvolver o kernel do Linux.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="As areas do git">As √°reas do git<a class="anchor-link" href="#As areas do git"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 166" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Git tem tr√™s √°reas, embora tamb√©m se possa considerar uma quarta.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/git-states.webp" alt="git states">
      <ul>
        <li>A primeira √© nosso espa√ßo de trabalho, onde temos todo o nosso c√≥digo. Aqui, quando modificamos ou criamos um arquivo, ele passa a estar como n√£o rastreado, ent√£o precisamos mov√™-lo para a √°rea de <code>staged</code></li>
        <li>A segunda √°rea √© a de <code>staged</code>. Aqui os arquivos que hav√≠amos modificado ou criado e que estavam n√£o *trackeados* passam a estar trackeados, ou seja, git faz um acompanhamento. Aqui enviaremos os arquivos para a pr√≥xima √°rea de <code>head</code></li>
        <li>A terceira √°rea √© a de <code>head</code>. Nela registramos uma vers√£o do nosso c√≥digo. Dessa forma, registrando vers√µes podemos voltar a vers√µes anteriores se necess√°rio. A vers√£o registrada do nosso c√≥digo pode ser enviada para um servidor de modo que seja acess√≠vel por v√°rias pessoas.</li>
        <li>As tr√™s √°reas anteriores correspondem ao trabalho local, mas h√° uma √°rea adicional e √© a de <code>remote server</code>. Aqui, o que fazemos √© enviar a vers√£o gravada do nosso c√≥digo para um servidor, de modo que tenhamos acesso ao c√≥digo de qualquer lugar ou que mais pessoas tenham acesso.</li>
      </ul>
      <p>Para fazer um s√≠mil, √© como um cen√°rio em que voc√™ vai tirar uma foto. Primeiro, voc√™ tem seus arquivos modificados, ent√£o os que quer imortalizar voc√™ envia para a √°rea de <code>staged</code>, ou seja, o palco. No momento em que enviou todos os arquivos que considera, tira a foto, portanto, envia todos os arquivos para a √°rea de <code>head</code>. Dessa forma, voc√™ pode ir tirando muitas fotos conforme o c√≥digo evolui, de maneira que pode ter um √°lbum de fotos com a evolu√ß√£o do c√≥digo. Por fim, voc√™ pode enviar essa foto para um servidor para que seja acess√≠vel por mais pessoas, ou seja, os envia para a √°rea de <code>remote server</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Instalar git">Instalar git<a class="anchor-link" href="#Instalar git"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 167" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Em maioria das distribui√ß√µes Linux, o Git j√° vem instalado. Podemos verificar isso usando <code>git --version</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="o">--</span><span class="n">version</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'git version 2.25.1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se voc√™ n√£o tiver ou quiser atualizar a vers√£o do git, basta executar <code>sudo apt update</code> e em seguida <code>sudo apt install git</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">sudo</span> <span class="n">apt</span> <span class="n">update</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">sudo</span> <span class="n">apt</span> <span class="n">install</span> <span class="n">git</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[sudo] password for maximo.fernandez@AEROESPACIAL.SENER:',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a verificar a vers√£o</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="o">--</span><span class="n">version</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'git version 2.25.1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>No meu caso, eu j√° tinha a √∫ltima vers√£o.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Configuracao inicial">Configura√ß√£o inicial<a class="anchor-link" href="#Configuracao inicial"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 168" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Configuracao do nome e do email">Configura√ß√£o do nome e do email<a class="anchor-link" href="#Configuracao do nome e do email"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 169" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Antes de come√ßar a usar o git √© recomend√°vel que fa√ßa algumas configura√ß√µes m√≠nimas, como o nome de usu√°rio e o email. Esta informa√ß√£o ser√° exibida quando for mostrado quem fez altera√ß√µes no c√≥digo. Para fazer isso, √© necess√°rio executar</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">git config --global user.name "&lt;nome de usu√°rio&gt;"<br>git config --global user.email "&lt;email&gt;"</code></pre></div>
            </section>
      <p>No meu caso, eu colocaria</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">git config --global user.name "MaximoFN"<br>git config --global user.email "user@example.com"</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como se pode ver, a flag <code>--global</code> serve para alterar a configura√ß√£o global do git. No entanto, se em um reposit√≥rio espec√≠fico voc√™ precisa fornecer outros dados, basta navegar at√© o reposit√≥rio e remover a flag <code>--global</code> dos comandos anteriores.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">git config user.name "&lt;nome do usu√°rio&gt;"<br>git config user.email "&lt;email&gt;"</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Configurar o editor padrao">Configurar o editor padr√£o<a class="anchor-link" href="#Configurar o editor padrao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 170" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Quando explicarmos o que s√£o os <code>commit</code>s veremos que em uma das op√ß√µes pode nos abrir um navegador. Por padr√£o, o git tentar√° usar <code>vim</code>, mas dado que n√£o √© um editor muito simples de usar, podemos modific√°-lo. A seguir, mostramos como fazer isso com alguns editores comuns.</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-bash">git config --global core.editor "code"  # vscode como editor<br>git config --global core.editor "atom"  # Atom como editor<br>git config --global core.editor "subl"  # Sublime Text como editor<br>git config --global core.editor "nano"  # Nano como editor</code></pre></div>
            </section>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Verificar configuracao do git">Verificar configura√ß√£o do git<a class="anchor-link" href="#Verificar configuracao do git"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 171" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para verificar a configura√ß√£o do git, podemos usar <code>git config --list</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'user.name=maximofn',
          'user.email=user@example.com',
          'user.user=maximofn',
          'http.sslverify=true',
          'core.repositoryformatversion=0',
          'core.filemode=true',
          'core.bare=false',
          'core.logallrefupdates=true',
          'remote.origin.url=https://github.com/maximofn/portafolio.git',
          'remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*',
          'branch.main.remote=origin',
          'branch.main.merge=refs/heads/main',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos usar os flags <code>--global</code>, <code>--local</code> e <code>--system</code> para ver apenas a configura√ß√£o global, local (se existir) e do sistema (se existir).</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="o">--</span><span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'user.name=maximofn',
          'user.email=user@example.com',
          'user.user=maximofn',
          'http.sslverify=true',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">local</span> <span class="o">--</span><span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'core.repositoryformatversion=0',
          'core.filemode=true',
          'core.bare=false',
          'core.logallrefupdates=true',
          'remote.origin.url=https://github.com/maximofn/portafolio.git',
          'remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*',
          'branch.main.remote=origin',
          'branch.main.merge=refs/heads/main',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">system</span> <span class="o">--</span><span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'fatal: unable to read config file &#x27;/etc/gitconfig&#x27;: No such file or directory',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>No existe configura√ß√£o de sistema no meu caso</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quiser saber apenas o valor de um par√¢metro da configura√ß√£o, basta inserir <code>git config &#x3C;parameter&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'maximofn',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Controle de versoes localmente">Controle de vers√µes localmente<a class="anchor-link" href="#Controle de versoes localmente"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 172" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Inicializar um novo reposit√≥rio (git init)">Inicializar um novo reposit√≥rio (<code>git init</code>)<a class="anchor-link" href="#Inicializar um novo reposit√≥rio (git init)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 173" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>H√° duas maneiras de inicializar um novo reposit√≥rio fazendo</p>
      <ul>
        <li>Uma √© fazendo <code>git init <nome do reposit√≥rio></code>. Isso criar√° uma nova pasta com o nome do reposit√≥rio.</li>
        <li>Outra √© navegar at√© a pasta onde queremos criar um reposit√≥rio e fazer <code>git init</code></li>
      </ul>
      <p>Vou criar um novo reposit√≥rio</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">init</span> <span class="n">notebook_git</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Inicializado repositorio Git vac√≠o en /home/wallabot/Documentos/web/portafolio/posts/notebook_git/.git/',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se agora fizermos <code>ls</code> veremos que foi criada uma nova pasta chamada <code>notebook_git</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">ls</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">notebook_git</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'notebook_git',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>N√≥s nos movemos para ela</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora dentro da pasta temos duas maneiras de saber que o reposit√≥rio foi criado, uma fazendo <code>ls -a</code> que mostrar√° todos os arquivos e veremos que h√° uma pasta chamada <code>.git</code>. A outra maneira √© fazendo <code>git status</code> que nos dir√° o estado do reposit√≥rio.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '.  ..  .git',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'No hay commits todav√≠a',
          'no hay nada para confirmar (crea/copia archivos y usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como estamos em um notebook, cada c√©lula tem seu <code>path</code> no <code>path</code> do notebook, por isso as duas vezes tive que fazer <code>cd notebook_git &amp;&amp;</code>, para mudar para a pasta com o reposit√≥rio que acabamos de criar.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se agora eu testar <code>git status</code> em outro <code>path</code> onde n√£o tenha sido inicializado um reposit√≥rio, isso resultar√° em um erro.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="o">~/</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'fatal: no es un repositorio git (ni ninguno de los directorios superiores): .git',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Criar novos arquivos">Criar novos arquivos<a class="anchor-link" href="#Criar novos arquivos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 174" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>No momento em que inicializamos um reposit√≥rio, podemos come√ßar a criar novos arquivos, ent√£o criamos um e vemos o que acontece.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Hello World&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">hello</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se agora executarmos <code>git status</code>, veremos que aparece</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'No hay commits todav√≠a',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se ser√° confirmado)',
          'hello.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se pode ver agora nos est√° dizendo que o arquivo <code>hello.py</code> n√£o tem acompanhamento. Ou seja, temos que adicionar <code>hello.py</code> √† √°rea de <code>staged</code>, que lembramos ser como o palco onde vamos colocar tudo o que mais tarde faremos um instant√¢neo.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Desfazer a criacao de um novo arquivo">Desfazer a cria√ß√£o de um novo arquivo<a class="anchor-link" href="#Desfazer a criacao de um novo arquivo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 175" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Neste caso, como s√£o arquivos que o Git ainda n√£o est√° acompanhando, ou seja, que ainda n√£o est√£o na √°rea de <code>staged</code>, ter√≠amos tr√™s maneiras de fazer isso.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <ul>
        <li>Apagando-o simplesmente: Como o git ainda n√£o est√° seguindo o arquivo, podemos fazer <code>rm hello.py</code> e pronto.</li>
        <li>Excluindo-o com um comando do Git: Antes exclu√≠mos com <code>rm</code>, mas pode ser que voc√™ esteja em um sistema que n√£o tenha o comando <code>rm</code>. Portanto, nesse caso, pode-se usar o comando do Git <code>git rm hello.py</code>* Por √∫ltimo, podemos usar <code>git clean</code>. Este √© √∫til, por exemplo, quando h√° muitos arquivos novos, e assim, em um √∫nico comando, removemos todos.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="git clean"><code>git clean</code><a class="anchor-link" href="#git clean"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 176" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se executarmos <code>git clean</code> sem nenhum argumento, receberemos um erro.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">clean</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'fatal: clean.requireForce default en true y ninguno de -i, -n, ni -f entregado; rehusando el clean',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ele nos diz que √© necess√°rio adicionar um desses flags <code>-n</code>, <code>-i</code> ou <code>-f</code>. Al√©m disso, vamos ver o flag <code>-d</code>.</p>
      <ul>
        <li><code>-n</code> (execu√ß√£o simulada): Ditar√° quais arquivos ser√£o exclu√≠dos, mas n√£o os excluir√°</li>
        <li><code>-i</code>: Perguntar√° por cada arquivo que vai ser apagado* <code>-f</code>: For√ßar√° a exclus√£o dos arquivos</li>
        <li><code>-d</code>: Tamb√©m excluir√° pastas</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos testar, primeiro fazemos <code>git clean -n</code> para saber quais arquivos seriam deletados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">clean</span> <span class="o">-</span><span class="n">n</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Ser√° borrado hello.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora fazemos <code>git clean -f</code> para que ele apague, j√° que concordamos em apag√°-lo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">clean</span> <span class="o">-</span><span class="n">f</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Borrando hello.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, ele apagou <code>hello.py</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Adicionar um arquivo √† √°rea de staged (git add)">Adicionar um arquivo √† √°rea de staged (<code>git add</code>)<a class="anchor-link" href="#Adicionar um arquivo √† √°rea de staged (git add)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 177" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a criar um arquivo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Hola mundo&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a fazer um <code>git status</code> para verificar que temos o arquivo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'No hay commits todav√≠a',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se ser√° confirmado)',
          'hola.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que temos o arquivo <code>hola.py</code> mas o git n√£o est√° fazendo um acompanhamento. Al√©m disso, vemos que ele ajuda e diz <code>use &quot;git add&quot; para fazer o acompanhamento</code></p>
      <p>A sintaxe √© a seguinte <code>git add &#x3C;arquivo&#x3E;</code>, mas podemos faz√™-lo de v√°rias maneiras</p>
      <ul>
        <li>Se quisermos adicionar mais de um arquivo, podemos fazer isso colocando todos os arquivos que desejamos adicionar √† √°rea de staged, separados por um espa√ßo: <code>git add <arquivo1> <arquivo2> <arquivo3></code></li>
        <li>Se quisermos adicionar todos os arquivos do mesmo formato, por exemplo, se quisermos adicionar todos os arquivos de Python seria <code>git add *.py</code></li>
        <li>Se quisermos adicionar todos os arquivos de uma pasta <code>git add <folder>/</code></li>
        <li>Se quisermos adicionar todos os arquivos temos tr√™s maneiras: <code>git add --all</code>, <code>git add -A</code> ou <code>git add .</code></li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a adicionar o novo arquivo criado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um <code>git status</code> para ver o que aconteceu</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'No hay commits todav√≠a',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git rm --cached &amp;lt;archivo&amp;gt;...&quot; para sacar del √°rea de stage)',
          'nuevos archivos: hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, nos diz que temos um novo arquivo ao qual ele faz o acompanhamento e que est√° pendente de ser confirmado <code>hola.py</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Retirar um arquivo da √°rea staged (git reset)">Retirar um arquivo da √°rea staged (<code>git reset</code>)<a class="anchor-link" href="#Retirar um arquivo da √°rea staged (git reset)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 178" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Caso adicionemos um arquivo √† √°rea de staged e quisermos remov√™-lo, temos que usar <code>git reset &#x3C;arquivo&#x3E;</code>, vamos ver isso.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos e adicionamos √† √°rea de stage um novo arquivo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Este no&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">adios</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">adios</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos <code>git status</code> para verificar que est√° na √°rea de stage</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'No hay commits todav√≠a',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git rm --cached &amp;lt;archivo&amp;gt;...&quot; para sacar del √°rea de stage)',
          'nuevos archivos: adios.py',
          'nuevos archivos: hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, est√£o <code>hola.py</code> e <code>adios.py</code>, ent√£o usamos <code>git reset adios.py</code> para remov√™-lo da √°rea de staged</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="n">adios</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um <code>git status</code> para verificar que saiu</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'No hay commits todav√≠a',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git rm --cached &amp;lt;archivo&amp;gt;...&quot; para sacar del √°rea de stage)',
          'nuevos archivos: hola.py',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se ser√° confirmado)',
          'adios.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que <code>adios.py</code> j√° n√£o tem acompanhamento por parte do git, foi removido da √°rea de stage.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos <code>git clean -f</code> para apag√°-lo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">clean</span> <span class="o">-</span><span class="n">f</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Borrando adios.py',
          'En la rama master',
          'No hay commits todav√≠a',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git rm --cached &amp;lt;archivo&amp;gt;...&quot; para sacar del √°rea de stage)',
          'nuevos archivos: hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Commit (git commit)">Commit (<code>git commit</code>)<a class="anchor-link" href="#Commit (git commit)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 179" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se voltarmos ao s√≠mil em que dissemos que a √°rea de staged era o palco onde envi√°vamos os arquivos aos quais quer√≠amos tirar uma foto, agora √© hora de tirar a foto para imortalizar o estado atual. Isso √© fazer um <code>commit</code></p>
      <p>Desta forma, registra-se o estado atual do c√≥digo, assim, com cada commit, teremos um registro da evolu√ß√£o do c√≥digo. Assim como em um √°lbum de fotos, com cada foto vamos tendo um registro da evolu√ß√£o do que colocamos em cena.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como na hora de fazer o commit est√° sendo registrado a mudan√ßa do c√≥digo, o git n√£o permite fazer o commit sem um coment√°rio m√≠nimo. Portanto, h√° duas maneiras de fazer commit</p>
      <ul>
        <li><code>git commit</code> desta forma, ser√° aberto o editor que tivermos configurado no git. Se n√£o tivermos configurado um editor padr√£o, ser√° aberto <code>vi</code>. Se quisermos mudar a configura√ß√£o do editor, podemos fazer, por exemplo, <code>git config --global core.editor "code"</code> ou <code>git config core.editor "code"</code> para definir o vscode como o editor padr√£o de forma global ou local.</li>
        <li><code>git commit -m "Mensagem de commit"</code>. Dessa forma adicionamos a mensagem diretamente</li>
      </ul>
      <p>Ao fazer o commit da primeira forma, podemos ter uma primeira linha que ser√° o t√≠tulo do commit e v√°rias linhas adicionais onde se explica com mais detalhes. Se quisermos poder fazer isso com a flag <code>-m</code>, basta adicionar v√°rios flags <code>-m</code> seguidos: <code>git commit -m &quot;T√≠tulo do commit&quot; -m &quot;Primeira linha explicando mais&quot; -m &quot;Segunda linha explicando mais&quot;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Uma vez que fizemos o commit, isso salvar√° um registro da mudan√ßa do nosso reposit√≥rio de maneira local. Ainda n√£o nos conectamos com um servidor remoto.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos tentar fazer o commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Primer commit, hola.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master (commit-ra√≠z) 1c95e4f] Primer commit, hola.py',
          '1 file changed, 1 insertion(+)',
          'create mode 100644 hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'nada para hacer commit, el √°rbol de trabajo est√° limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que nos diz que n√£o h√° nada novo, temos todo o nosso reposit√≥rio totally controlado.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Commit pulando add (git commit -a -m ou git commit -am)">Commit pulando add (<code>git commit -a -m</code> ou <code>git commit -am</code>)<a class="anchor-link" href="#Commit pulando add (git commit -a -m ou git commit -am)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 180" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>No caso de querermos levar todos os arquivos que modificamos para a √°rea de staged e depois fazer um commit, podemos fazer tudo isso em um √∫nico passo usando <code>git commit -a -m &quot;mensagem&quot;</code>, <code>git commit --all -m &quot;mensagem&quot;</code> ou <code>git commit -am &quot;mensagem&quot;</code></p>
      <blockquote>
      <p>Nota: Isso s√≥ √© v√°lido se um arquivo for modificado. Se o arquivo for novo e o git n√£o estiver fazendo acompanhamento, isso n√£o √© v√°lido.</p>
      </blockquote>
      <p>Vamos ver um exemplo, vamos modificar <code>hola.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;He a√±adido una nueva linea&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos fazer um <code>git status</code> para nos assegurar</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios no rastreados para el commit:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para actualizar lo que ser√° confirmado)',
          '&#x20;&#x20;(usa &quot;git restore &amp;lt;archivo&amp;gt;...&quot; para descartar los cambios en el directorio de trabajo)',
          'modificados:     hola.py',
          'sin cambios agregados al commit (usa &quot;git add&quot; y/o &quot;git commit -a&quot;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que na pr√≥pria ajuda do git j√° nos sugere usar <code>git commit -a</code>, ent√£o vamos fazer isso.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;Segundo commit, hola.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master 6e99e73] Segundo commit, hola.py',
          '1 file changed, 1 insertion(+)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos novamente um <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'nada para hacer commit, el √°rbol de trabajo est√° limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>N√£o h√° nada para fazer commit, j√° foi feito o commit da altera√ß√£o</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Modificar um arquivo ao qual foi feito commit">Modificar um arquivo ao qual foi feito commit<a class="anchor-link" href="#Modificar um arquivo ao qual foi feito commit"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 181" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como enquanto desenvolvemos estamos modificando arquivos, pode ser que em algum arquivo ao qual j√° fizemos commit o modifiquemos. No nosso caso, vamos adicionar uma linha a <code>hola.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;He a√±adido una tercera linea&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">cat</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'print(&#x27;Hola mundo&#x27;)',
          'print(&#x27;He a√±adido una nueva linea&#x27;)',
          'print(&#x27;He a√±adido una tercera linea&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se fizermos <code>git status</code> veremos que <code>hola.py</code> tem modifica√ß√µes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios no rastreados para el commit:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para actualizar lo que ser√° confirmado)',
          '&#x20;&#x20;(usa &quot;git restore &amp;lt;archivo&amp;gt;...&quot; para descartar los cambios en el directorio de trabajo)',
          'modificados:     hola.py',
          'sin cambios agregados al commit (usa &quot;git add&quot; y/o &quot;git commit -a&quot;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Ver altera√ß√µes em um arquivo (git diff &#x3C;arquivo&#x3E;)">Ver altera√ß√µes em um arquivo (<code>git diff &#x3C;arquivo&#x3E;</code>)<a class="anchor-link" href="#Ver altera√ß√µes em um arquivo (git diff &#x3C;arquivo&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 182" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Talvez tenhamos passado um tempo desenvolvendo desde o √∫ltimo commit e n√£o saibamos quais modifica√ß√µes fizemos, para isso usamos <code>git diff &#x3C;arquivo&#x3E;</code> que nos dir√° as mudan√ßas que fizemos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">diff</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'diff --git a/hola.py b/hola.py',
          'index 91dee80..fba0d22 100644',
          '--- a/hola.py',
          '+++ b/hola.py',
          '@@ -1,2 +1,3 @@',
          'print(&#x27;Hola mundo&#x27;)',
          'print(&#x27;He a√±adido una nueva linea&#x27;)',
          '+print(&#x27;He a√±adido una tercera linea&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Embora n√£o seja muito intuitivo, podemos ver que adicionamos a √∫ltima linha em <code>hola.py</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Desfazer modifica√ß√µes em um arquivo (git restore &#x3C;arquivo&#x3E;)">Desfazer modifica√ß√µes em um arquivo (<code>git restore &#x3C;arquivo&#x3E;</code>)<a class="anchor-link" href="#Desfazer modifica√ß√µes em um arquivo (git restore &#x3C;arquivo&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 183" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se as altera√ß√µes que fizemos n√£o nos agradarem e quisermos remov√™-las, podemos fazer <code>git restore &#x3C;arquivo&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">restore</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver o que aconteceu com um <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'nada para hacer commit, el √°rbol de trabajo est√° limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que se han descartado os cambios em <code>hola.py</code> desde o √∫ltimo commit</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Hist√≥rico de altera√ß√µes (git log)">Hist√≥rico de altera√ß√µes (<code>git log</code>)<a class="anchor-link" href="#Hist√≥rico de altera√ß√µes (git log)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 184" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com o git podemos ver o hist√≥rico de todas as mudan√ßas que fomos commitando, para isso usamos <code>git log</code>. √â como se coloc√°ssemos a revisar nosso √°lbum de fotos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'commit 6e99e73cf0c5474078cc9f328ee6a54fb9ffb169 (HEAD -&amp;gt; master)',
          'Author: maximofn &amp;lt;user@example.com&amp;gt;',
          'Date:   Sun Apr 16 02:29:04 2023 +0200',
          '&#x20;&#x20;&#x20;&#x20;Segundo commit, hola.py',
          'commit 1c95e4fd8388ceedee368e0121c4b0ef4900c2ac',
          'Author: maximofn &amp;lt;user@example.com&amp;gt;',
          'Date:   Sun Apr 16 02:28:44 2023 +0200',
          '&#x20;&#x20;&#x20;&#x20;Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver o hist√≥rico de mudan√ßas, temos que l√™-lo de baixo para cima.</p>
      <p>Primeiro vemos o commit com a mensagem <code>Primeiro commit, hola.py</code>, podemos ver a data, o autor e o hash, que √© seu identificador √∫nico.</p>
      <p>A seguir vemos o segundo commit com a mensagem <code>Segundo commit, hola.py</code>, com sua data, autor e hash. Al√©m disso, mostra onde est√° o <code>HEAD</code> e em qual branch estamos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>SeÊàë‰ª¨ÂèØ‰ª•‰ΩøÁî®Ê†áÂøó‰ª•‰∏çÂêåÁöÑÊñπÂºèËé∑Âèñ‰ø°ÊÅØÔºå‰ΩÜÊ†πÊçÆÊàë‰ª¨‰ΩøÁî®ÁöÑÊ†áÂøóÔºåÊüê‰∫õÊñπÂºèÂèØËÉΩÊõ¥ÈÄÇÂêàÊàë‰ª¨„ÄÇ‰∏ãË°®ÊòæÁ§∫‰∫Ü‰∏Ä‰∫õÊúâÁî®ÁöÑÊ†áÂøóÔºö</p>
      <p>Note: The above sentence is not translated to Portuguese as requested, here's the correct translation:</p>
      <p>Se usarmos flags, podemos obter informa√ß√µes de maneiras diferentes, mas dependendo das flags que usarmos, algumas podem ser mais adequadas. A seguir, s√£o mostradas algumas flags √∫teis:</p>
      <ul>
        <li><code>git log --oneline</code>: Mostra os commits em uma √∫nica linha, com o hash abreviado e a mensagem do commit.</li>
        <li><code>git log --graph</code>: Mostra um gr√°fico de texto da hist√≥ria do reposit√≥rio, incluindo ramos e fus√µes.</li>
        <li><code>git log --decorate</code>: Mostra as refer√™ncias (ramos, tags, HEAD, etc.) no log juntamente com o commit para o qual elas apontam.</li>
        <li><code>git log --author="<autor>"</code>: Filtra o hist√≥rico de commits para mostrar apenas aqueles realizados por um autor espec√≠fico.</li>
        <li><code>git log --since="&lt;data&gt;"</code>: Mostra os commits realizados desde uma data espec√≠fica. Voc√™ pode usar diferentes formatos de data, como "1 week ago" ou "2023-01-01".</li>
        <li><code>git log --until="&lt;data&gt;"</code>: Mostra os commits realizados at√© uma data espec√≠fica.</li>
        <li><code>git log <rama></code>: Mostra os commits de uma ramifica√ß√£o espec√≠fica.* <code>git log <commit1>..<commit2></code>: Mostra os commits que est√£o no intervalo entre dois commits espec√≠ficos.</li>
        <li><code>git log --grep="<palavra>"</code>: Procura nos mensagens de commit por uma palavra ou frase espec√≠fica.</li>
        <li><code>git log -p</code>: Mostra as diferen√ßas (em forma de patch) introduzidas em cada commit.</li>
        <li><code>git log -n <n√∫mero></code>: Mostra os √∫ltimos n√∫mero de commits. Por exemplo, git log -n 5 mostrar√° os √∫ltimos 5 commits.</li>
        <li><code>git log --stat</code>: Mostra as estat√≠sticas de altera√ß√µes em arquivos para cada commit, como o n√∫mero de linhas adicionadas e removidas.</li>
      </ul>
      <p>Por exemplo, uma maneira confort√°vel de ver o hist√≥rico √© usar <code>git log --graph --oneline --decorate</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 6e99e73 (HEAD -&amp;gt; master) Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que, em vez de nos dar o hash inteiro, nos d√° apenas alguns n√∫meros. Isso ocorre porque, por enquanto, o reposit√≥rio tem t√£o pouca hist√≥ria que esses poucos n√∫meros s√£o suficientes. Se quisermos voltar ao ponto anterior, em vez de introduzir o hash inteiro (<code>7c448f69e30ab1b5783f5cf9ee3ae5bc362ecd4d</code>), bastaria introduzir apenas <code>7c448f6</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mais tarde falaremos sobre as branches, mas agora vamos ver o que √© o <code>HEAD</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="CABECALHO">CABE√áALHO<a class="anchor-link" href="#CABECALHO"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 185" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Enquanto desenvolv√≠amos, conseguimos fazer altera√ß√µes e commit√°-las, ou seja, fomos preenchendo o √°lbum de fotos do nosso c√≥digo. <code>HEAD</code> √© a posi√ß√£o no √°lbum em que estamos.</p>
      <p>Normalmente √© a √∫ltima posi√ß√£o de todos os commits.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos saber em qual ponto estamos, podemos fazer isso atrav√©s de <code>git rev-parse HEAD</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">rev</span><span class="o">-</span><span class="n">parse</span> <span class="n">HEAD</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '6e99e73cf0c5474078cc9f328ee6a54fb9ffb169',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como pode ser visto, o hash obtido coincide com o √∫ltimo obtido ao fazer <code>git log</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'commit 6e99e73cf0c5474078cc9f328ee6a54fb9ffb169 (HEAD -&amp;gt; master)',
          'Author: maximofn &amp;lt;user@example.com&amp;gt;',
          'Date:   Sun Apr 16 02:29:04 2023 +0200',
          '&#x20;&#x20;&#x20;&#x20;Segundo commit, hola.py',
          'commit 1c95e4fd8388ceedee368e0121c4b0ef4900c2ac',
          'Author: maximofn &amp;lt;user@example.com&amp;gt;',
          'Date:   Sun Apr 16 02:28:44 2023 +0200',
          '&#x20;&#x20;&#x20;&#x20;Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Modificar um commit (git commit --amend)">Modificar um commit (<code>git commit --amend</code>)<a class="anchor-link" href="#Modificar um commit (git commit --amend)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 186" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos querer modificar um commit, porque queremos mudar a mensagem, ou porque queremos adicionar mais arquivos ao commit, ent√£o veremos os dois casos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Modificar a mensagem de commit">Modificar a mensagem de commit<a class="anchor-link" href="#Modificar a mensagem de commit"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 187" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se apenas quisermos modificar a mensagem, o que temos que fazer √© <code>git commit --amend -m &quot;Nova mensagem&quot;</code>, vejamos um exemplo, vamos modificar <code>hola.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Esta es la tercera linea&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios no rastreados para el commit:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para actualizar lo que ser√° confirmado)',
          '&#x20;&#x20;(usa &quot;git restore &amp;lt;archivo&amp;gt;...&quot; para descartar los cambios en el directorio de trabajo)',
          'modificados:     hola.py',
          'sin cambios agregados al commit (usa &quot;git add&quot; y/o &quot;git commit -a&quot;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Efetivamente vemos que <code>hola.py</code> tem modifica√ß√µes, de modo que fazemos um commit com essas modifica√ß√µes.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;Tercer commot, hola.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master 60e2ffd] Tercer commot, hola.py',
          '1 file changed, 1 insertion(+)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver o hist√≥rico de commits</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 60e2ffd (HEAD -&amp;gt; master) Tercer commot, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>**Oh n√£o!** escrevemos <code>commot</code> em vez de <code>commit</code>, ent√£o vamos modificar a mensagem</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">--</span><span class="n">amend</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Tercer commit, hola.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master c4930d7] Tercer commit, hola.py',
          'Date: Sun Apr 16 02:29:59 2023 +0200',
          '1 file changed, 1 insertion(+)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a ver o hist√≥rico</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* c4930d7 (HEAD -&amp;gt; master) Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que agora est√° bem.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Adicionar arquivos ao ultimo commit">Adicionar arquivos ao √∫ltimo commit<a class="anchor-link" href="#Adicionar arquivos ao ultimo commit"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 188" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suponhamos que esquecemos de adicionar um arquivo ao √∫ltimo commit, simplesmente fazemos um <code>git add</code> com esse arquivo e fazemos <code>git commit --amend -m &quot;mensagem&quot;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a criar dois arquivos novos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Este es el archivo 1&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Este es el archivo 2&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo2</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora fazemos commit apenas de um</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Commit con el archivo 1&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master 285b243] Commit con el archivo 1',
          '1 file changed, 1 insertion(+)',
          'create mode 100644 archivo1.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se ser√° confirmado)',
          'archivo2.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 285b243 (HEAD -&amp;gt; master) Commit con el archivo 1',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, nos esquecemos do arquivo 2, ent√£o modificamos o commit e adicionamos o arquivo 2</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo2</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">--</span><span class="n">amend</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Commit con los archivos 1 y 2&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master 04ebd1f] Commit con los archivos 1 y 2',
          'Date: Sun Apr 16 02:30:26 2023 +0200',
          '2 files changed, 2 insertions(+)',
          'create mode 100644 archivo1.py',
          'create mode 100644 archivo2.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'nada para hacer commit, el √°rbol de trabajo est√° limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 04ebd1f (HEAD -&amp;gt; master) Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora o √∫ltimo commit tem os dois novos arquivos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Desfazer um commit (git reset HEAD~1)">Desfazer um commit (<code>git reset HEAD~1</code>)<a class="anchor-link" href="#Desfazer um commit (git reset HEAD~1)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 189" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com este comando, dizemos ao git para voltar uma posi√ß√£o no hist√≥rico de commits. H√° duas op√ß√µes: <code>--soft</code>, que n√£o apagar√° as altera√ß√µes que tenhamos feito, e <code>--hard</code>, que o far√°.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Desfazer um commit mantendo as altera√ß√µes (git reset --soft HEAD~1)">Desfazer um commit mantendo as altera√ß√µes (<code>git reset --soft HEAD~1</code>)<a class="anchor-link" href="#Desfazer um commit mantendo as altera√ß√µes (git reset --soft HEAD~1)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 190" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a criar um novo arquivo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Este es el archivo 3&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo3</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se ser√° confirmado)',
          'archivo3.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um commit adicionando este arquivo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo3</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Commit con el archivos 3&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master 6dc7be6] Commit con el archivos 3',
          '1 file changed, 1 insertion(+)',
          'create mode 100644 archivo3.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 6dc7be6 (HEAD -&amp;gt; master) Commit con el archivos 3',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que no o √∫ltimo commit se encontra <code>arquivo3.py</code>, vamos a eliminar o commit mantendo <code>arquivo3.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">soft</span> <span class="n">HEAD</span><span class="o">~</span><span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos agora um <code>git log</code> para ver se o √∫ltimo commit foi removido.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 04ebd1f (HEAD -&amp;gt; master) Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Efetivamente, vemos que foi removido o √∫ltimo commit</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um <code>git status</code> para ver se foi preservado o <code>arquivo3.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del √°rea de stage)',
          'nuevos archivos: archivo3.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Manteve-se</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Desfazer um commit descartando as altera√ß√µes (git reset --hard HEAD~1)">Desfazer um commit descartando as altera√ß√µes (<code>git reset --hard HEAD~1</code>)<a class="anchor-link" href="#Desfazer um commit descartando as altera√ß√µes (git reset --hard HEAD~1)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 191" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Temos <code>arquivo3.py</code> que criamos e est√° na √°rea de stage</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del √°rea de stage)',
          'nuevos archivos: archivo3.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Portanto, fazemos um commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Commit con el archivo 3&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master 0147d65] Commit con el archivo 3',
          '1 file changed, 1 insertion(+)',
          'create mode 100644 archivo3.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um <code>git log</code> para verificar que h√° um commit com este arquivo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 0147d65 (HEAD -&amp;gt; master) Commit con el archivo 3',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Efetivamente h√° um commit adicionando <code>arquivo3.py</code>. Agora removemos este commit descartando <code>arquivo3.py</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="n">HEAD</span><span class="o">~</span><span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'HEAD est√° ahora en 04ebd1f Commit con los archivos 1 y 2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um <code>git log</code> para verificar que foi removido o √∫ltimo commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 04ebd1f (HEAD -&amp;gt; master) Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O commit com <code>arquivo3.py</code> foi removido, agora fazemos um <code>git status</code> para verificar o que aconteceu com <code>arquivo3.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'nada para hacer commit, el √°rbol de trabajo est√° limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>N√£o aparece <code>arquivo3.py</code> como um arquivo ao qual devemos fazer commit, vamos verificar se ele foi realmente exclu√≠do por completo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">archivo3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Efetivamente, o <code>arquivo3.py</code> foi removido do sistema de arquivos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Modificar um commit remoto (git push --force)">Modificar um commit remoto (<code>git push --force</code>)<a class="anchor-link" href="#Modificar um commit remoto (git push --force)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 192" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Embora veremos mais adiante como sincronizarmo-nos com reposit√≥rios remotos, no caso de ter feito um commit, t√™-lo subido a um reposit√≥rio remoto (<code>git push</code>) e t√™-lo modificado localmente (porque modificou a mensagem ou desfez o commit), para reverter as altera√ß√µes no reposit√≥rio remoto voc√™ precisa fazer <code>git push --force</code></p>
      <blockquote>
      <p>**Cuidado!**: Este comando modifica o hist√≥rico do reposit√≥rio remoto, ent√£o pode afetar o resto das pessoas que estejam trabalhando com esse reposit√≥rio. Use este comando com muito cuidado e seguran√ßa. √â melhor ter um hist√≥rico de commits no qual primeiro est√° o commit em que voc√™ colocou a descri√ß√£o errada e depois o novo commit com a nova descri√ß√£o correta, do que ficar modificando o hist√≥rico.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Modificar um commit remoto (git push --force-with-lease)">Modificar um commit remoto (<code>git push --force-with-lease</code>)<a class="anchor-link" href="#Modificar um commit remoto (git push --force-with-lease)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 193" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se voc√™ est√° convencido de alterar o hist√≥rico, pelo menos use <code>git push --force-with-lease</code>, que n√£o modificar√° os commits que tenham sido feitos posteriormente.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Ignorar arquivos (.gitignore)">Ignorar arquivos (<code>.gitignore</code>)<a class="anchor-link" href="#Ignorar arquivos (.gitignore)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 194" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suponhamos que temos um arquivo com <code>API key</code>s, este arquivo na verdade n√£o queremos que seja salvo no reposit√≥rio, porque se depois compartilharmos este reposit√≥rio, qualquer pessoa teria acesso a essas chaves, por isso √© necess√°rio dizer ao git para n√£o fazer o acompanhamento deste arquivo</p>
      <p>Isso √© feito com o arquivo <code>.gitignore</code>, nele adicionamos o caminho dos arquivos ou diret√≥rios que n√£o queremos que o git fa√ßa o acompanhamento.</p>
      <p>Vamos v√™-lo</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos o arquivo com as chaves</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">api_keys</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se fazemos <code>git status</code> vemos que o Git o considera</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se ser√° confirmado)',
          'api_keys.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se n√£o fizermos nada, pode ser que um dia fa√ßamos um <code>git add .</code> e o incluamos no reposit√≥rio, ent√£o, por seguran√ßa, temos que dizer ao git para n√£o seguir este arquivo. Para isso, criamos o <code>.gitignore</code> adicionando este arquivo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;api_keys.py&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">.</span><span class="n">gitignore</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver o que acontece se agora fizermos <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se ser√° confirmado)',
          '.gitignore',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que o git deixou de considerar <code>api_keys.py</code>, mas ainda considera <code>.gitignore</code>, ent√£o fazemos um commit para adicionar <code>.gitignore</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="o">.</span><span class="n">gitignore</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;A√±adido .gitignore&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master 0b09cfa] A√±adido .gitignore',
          '1 file changed, 1 insertion(+)',
          'create mode 100644 .gitignore',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Quais arquivos adicionar ao .gitignore?">Quais arquivos adicionar ao <code>.gitignore</code>?<a class="anchor-link" href="#Quais arquivos adicionar ao .gitignore?"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 195" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <ul>
        <li>Arquivos que tenham credenciais ou chaves de API (voc√™ n√£o deveria envi√°-los para o reposit√≥rio, simplesmente injete-os por vari√°vel de ambiente)</li>
        <li>Pastas de configura√ß√£o do seu editor (<code>/.vscode</code>)</li>
        <li>Arquivos de registro (log files)</li>
        <li>Arquivos do sistema como <code>.DS_Store</code>* Pastas geradas com arquivos est√°ticos ou compila√ß√µes como <code>/dist</code> ou <code>/build</code></li>
        <li>Depend√™ncias que podem ser baixadas (<code>/node_modules</code>)</li>
        <li>Cobertura do teste (<code>/coverage</code>)</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Como ignorar sempre os mesmos arquivos?">Como ignorar sempre os mesmos arquivos?<a class="anchor-link" href="#Como ignorar sempre os mesmos arquivos?"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 196" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se seu IDE sempre gera os mesmos arquivos de configura√ß√£o, seria bom poder dizer ao git para sempre ignorar esses arquivos. Para isso, criamos um <code>.gitignore</code> global.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">touch</span> <span class="o">~/.</span><span class="n">gitignore_global</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>No meu caso, vou adicionar o diret√≥rio <code>__pycache__/</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">echo</span> <span class="s2">&quot;__pycache__/&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">~/.</span><span class="n">gitignore_global</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora temos que indicar ao Git que esse √© o nosso <code>.gitignore</code> global</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">core</span><span class="o">.</span><span class="n">excludesfile</span> <span class="o">~/.</span><span class="n">gitignore_global</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pronto, o diret√≥rio <code>__pycache__/</code> sempre ser√° ignorado</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O GitHub tem um <a href="https://github.com/github/gitignore" target="_blank" rel="nofollow noreferrer">reposit√≥rio</a> com <code>.gitignore</code>s para muitas linguagens, eu me baseei no <a href="https://github.com/github/gitignore/blob/main/Python.gitignore">deste</a> para Python.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Remover um arquivo de um commit">Remover um arquivo de um commit<a class="anchor-link" href="#Remover um arquivo de um commit"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 197" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver como remover um arquivo de um commit que fizemos. Primeiro criamos dois arquivos e fazemos commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Este es el archivo 4&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo4</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Este es el archivo 5&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo5</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um commit com os dois arquivos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo4</span><span class="o">.</span><span class="n">py</span> <span class="n">archivo5</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Commit con los archivos 4 y 5&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master e3153a5] Commit con los archivos 4 y 5',
          '2 files changed, 2 insertions(+)',
          'create mode 100644 archivo4.py',
          'create mode 100644 archivo5.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* e3153a5 (HEAD -&amp;gt; master) Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A partir de aqui h√° duas op√ß√µes para remover um arquivo de um commit:</p>
      <ul>
        <li>Excluir o arquivo e criar um novo commit* Desfazer o commit e cri√°-lo novamente sem o arquivo</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Excluir o arquivo e criar um novo commit">Excluir o arquivo e criar um novo commit<a class="anchor-link" href="#Excluir o arquivo e criar um novo commit"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 198" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suponhamos que queremos eliminar o arquivo <code>arquivo5.py</code>, ent√£o o removemos com <code>git rm arquivo5.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">rm</span> <span class="n">archivo5</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'rm &#x27;archivo5.py&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos fazer um <code>git status</code> para ver o que acontece</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del √°rea de stage)',
          'borrados:        archivo5.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, foi exclu√≠do <code>archivo5.py</code>. Agora criamos um novo commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Eliminado archivo5.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master ea615a9] Eliminado archivo5.py',
          '1 file changed, 1 deletion(-)',
          'delete mode 100644 archivo5.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* ea615a9 (HEAD -&amp;gt; master) Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Desfazer o commit e cria-lo novamente sem o arquivo">Desfazer o commit e cri√°-lo novamente sem o arquivo<a class="anchor-link" href="#Desfazer o commit e cria-lo novamente sem o arquivo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 199" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a criar dois arquivos e fazer um commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Este es el archivo 6&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo6</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;Este es el archivo 7&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo7</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se ser√° confirmado)',
          'archivo6.py',
          'archivo7.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo6</span><span class="o">.</span><span class="n">py</span> <span class="n">archivo7</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Commit con los archivos 6 y 7&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master d6dc485] Commit con los archivos 6 y 7',
          '2 files changed, 2 insertions(+)',
          'create mode 100644 archivo6.py',
          'create mode 100644 archivo7.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* d6dc485 (HEAD -&amp;gt; master) Commit con los archivos 6 y 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro desfazemos o √∫ltimo commit com <code>git reset --soft HEAD~1</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">soft</span> <span class="n">HEAD</span><span class="o">~</span><span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um <code>git status</code> para ver o que ocorreu</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del √°rea de stage)',
          'nuevos archivos: archivo6.py',
          'nuevos archivos: archivo7.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que desfizemos o commit, mas os dois arquivos se encontram na √°rea de staged, portanto, para remover um dos arquivos do commit, primeiro √© necess√°rio remov√™-lo da √°rea de staged. Para isso, fazemos <code>git reset arquivo6.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="n">archivo6</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos novamente um <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del √°rea de stage)',
          'nuevos archivos: archivo7.py',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se ser√° confirmado)',
          'archivo6.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que <code>arquivo7.py</code> est√° na √°rea de staged, enquanto <code>arquivo6.py</code> j√° n√£o est√°. Agora podemos apagar o arquivo 6, para isso usamos <code>git clean</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">clean</span> <span class="o">-</span><span class="n">n</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Ser√° borrado archivo6.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">clean</span> <span class="o">-</span><span class="n">f</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Borrando archivo6.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos novamente um <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama master',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del √°rea de stage)',
          'nuevos archivos: archivo7.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos <code>arquivo.py</code> j√° n√£o est√°, ent√£o podemos fazer um novo commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Commit con el archivo 7&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[master 4bb9d75] Commit con el archivo 7',
          '1 file changed, 1 insertion(+)',
          'create mode 100644 archivo7.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 4bb9d75 (HEAD -&amp;gt; master) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Removemos o √∫ltimo commit e o substitu√≠mos por um novo, removendo o arquivo que quer√≠amos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Hist√≥rico de altera√ß√µes de um arquivo (git log &#x3C;arquivo&#x3E;)">Hist√≥rico de altera√ß√µes de um arquivo (<code>git log &#x3C;arquivo&#x3E;</code>)<a class="anchor-link" href="#Hist√≥rico de altera√ß√µes de um arquivo (git log &#x3C;arquivo&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 200" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Embora antes tenhamos visto como podemos ver o hist√≥rico do reposit√≥rio com <code>git log</code>, pode ser que n√£o nos interesse o hist√≥rico de todo o reposit√≥rio. Pode ser que tenhamos um bug em um arquivo de c√≥digo que no in√≠cio n√£o t√≠nhamos, por isso √© poss√≠vel que queiramos ver apenas o hist√≥rico desse arquivo. Para isso, usamos <code>git log &#x3C;arquivo&#x3E;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro vemos os arquivos que temos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'api_keys.py  archivo1.py  archivo2.py  archivo4.py  archivo7.py  hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Suponhamos que queremos ver apenas as mudan√ßas em <code>hola.py</code>, ent√£o fazemos <code>git log hola.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que aparecem muitos menos resultados do que se tiv√©ssemos feito <code>git log</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 4bb9d75 (HEAD -&amp;gt; master) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Ver modifica√ß√µes de um arquivo em um ponto espec√≠fico do hist√≥rico (git show &#x3C;hash&#x3E; &#x3C;arquivo&#x3E; ou git diff &#x3C;arquivo&#x3E;)">Ver modifica√ß√µes de um arquivo em um ponto espec√≠fico do hist√≥rico (<code>git show &#x3C;hash&#x3E; &#x3C;arquivo&#x3E;</code> ou <code>git diff &#x3C;arquivo&#x3E;</code>)<a class="anchor-link" href="#Ver modifica√ß√µes de um arquivo em um ponto espec√≠fico do hist√≥rico (git show &#x3C;hash&#x3E; &#x3C;arquivo&#x3E; ou git diff &#x3C;arquivo&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 201" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suponhamos que j√° sabemos em qual ponto uma altera√ß√£o foi feita no arquivo que cont√©m um bug, ent√£o agora queremos saber quais altera√ß√µes foram feitas para descobrir o que pode estar causando o bug. Para isso, podemos usar <code>git show &#x3C;hash&#x3E; &#x3C;arquivo&#x3E;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver quais mudan√ßas ocorreram em <code>hola.py</code> no hash <code>c4930d7</code>, ou seja, quando foi feito o terceiro commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">show</span> <span class="n">c4930d7</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'commit c4930d7267c3f8df389ab0cb1bda0b5fceabb5c2',
          'Author: maximofn &amp;lt;user@example.com&amp;gt;',
          'Date:   Sun Apr 16 02:29:59 2023 +0200',
          '&#x20;&#x20;&#x20;&#x20;Tercer commit, hola.py',
          'diff --git a/hola.py b/hola.py',
          'index 91dee80..33bdb99 100644',
          '--- a/hola.py',
          '+++ b/hola.py',
          '@@ -1,2 +1,3 @@',
          'print(&#x27;Hola mundo&#x27;)',
          'print(&#x27;He a√±adido una nueva linea&#x27;)',
          '+print(&#x27;Esta es la tercera linea&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A maneira de ver as mudan√ßas no git n√£o √© muito intuitiva, mas podemos ver que foi adicionada a linha <code>print(&#x27;Esta √© a terceira linha&#x27;)</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Outra maneira de ver altera√ß√µes √© com <code>git diff</code>, temos duas op√ß√µes, podemos ver as altera√ß√µes do arquivo no momento atual em rela√ß√£o a um ponto espec√≠fico do hist√≥rico, para isso fazemos <code>git diff &#x3C;hash&#x3E; &#x3C;arquivo&#x3E;</code>.</p>
      <p>Por exemplo, se quisermos ver as mudan√ßas de <code>hola.py</code> desde quando foi feito o primeiro commit (hash <code>1c95e4f</code>) at√© a situa√ß√£o atual, devemos inserir (<code>git diff 1c95e4f hola.py</code>)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">diff</span> <span class="mi">1</span><span class="n">c95e4f</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'diff --git a/hola.py b/hola.py',
          'index f140969..33bdb99 100644',
          '--- a/hola.py',
          '+++ b/hola.py',
          '@@ -1 +1,3 @@',
          'print(&#x27;Hola mundo&#x27;)',
          '+print(&#x27;He a√±adido una nueva linea&#x27;)',
          '+print(&#x27;Esta es la tercera linea&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Mas se quisermos ver a diferen√ßa entre um ponto espec√≠fico do hist√≥rico e outro ponto espec√≠fico, temos que introduzir os hashes dos dois momentos, ou seja <code>git diff &#x3C;hash1&#x3E; &#x3C;hash2&#x3E; &#x3C;arquivo&#x3E;</code></p>
      <p>Se quisermos ver as mudan√ßas de <code>hola.py</code> entre o segundo commit (hash <code>6e99e73</code>) e o primeiro commit (hash <code>1c95e4f</code>), ter√≠amos que introduzir <code>git diff 1c95e4f 6e99e73 hola.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">diff</span> <span class="mi">1</span><span class="n">c95e4f</span> <span class="mf">6e99</span><span class="n">e73</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'diff --git a/hola.py b/hola.py',
          'index f140969..91dee80 100644',
          '--- a/hola.py',
          '+++ b/hola.py',
          '@@ -1 +1,2 @@',
          'print(&#x27;Hola mundo&#x27;)',
          '+print(&#x27;He a√±adido una nueva linea&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O anterior nos mostra as mudan√ßas do segundo commit em rela√ß√£o ao primeiro, mas se o que queremos s√£o as mudan√ßas do primeiro commit em rela√ß√£o ao segundo, basta colocar os hashes ao contr√°rio de como os colocamos, ou seja <code>git diff 6e99e73 1c95e4f hola.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">diff</span> <span class="mf">6e99</span><span class="n">e73</span> <span class="mi">1</span><span class="n">c95e4f</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'diff --git a/hola.py b/hola.py',
          'index 91dee80..f140969 100644',
          '--- a/hola.py',
          '+++ b/hola.py',
          '@@ -1,2 +1 @@',
          'print(&#x27;Hola mundo&#x27;)',
          '-print(&#x27;He a√±adido una nueva linea&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Viagem ao passado (git reset --hard &#x3C;hash&#x3E; ou git reset --soft &#x3C;hash&#x3E;)">Viagem ao passado (<code>git reset --hard &#x3C;hash&#x3E;</code> ou <code>git reset --soft &#x3C;hash&#x3E;</code>)<a class="anchor-link" href="#Viagem ao passado (git reset --hard &#x3C;hash&#x3E; ou git reset --soft &#x3C;hash&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 202" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Imaginemos que encontramos que tudo o que fizemos ap√≥s gerar o bug n√£o serve e temos que voltar a trabalhar a partir desse ponto, podemos voltar a uma posi√ß√£o do hist√≥rico por meio de <code>git reset --hard &#x3C;hash&#x3E;</code> (isso n√£o manter√° as altera√ß√µes) ou <code>git reset --soft &#x3C;hash&#x3E;</code> (isso sim manter√° as altera√ß√µes).</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro vejamos o hist√≥rico</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 4bb9d75 (HEAD -&amp;gt; master) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Suponhamos que queremos voltar ao momento em que fizemos o terceiro commit (hash <code>c4930d7</code>), al√©m disso, fazemos isso sem manter as altera√ß√µes, ou seja, todas as modifica√ß√µes que fizemos depois ser√£o apagadas, fazemos <code>git reset --hard c4930d7</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro fazemos <code>ls</code> para ver os arquivos que temos agora</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'api_keys.py  archivo1.py  archivo2.py  archivo4.py  archivo7.py  hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ao terceiro commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="n">c4930d7</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'HEAD est√° ahora en c4930d7 Tercer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se fazemos <code>ls</code> veremos que j√° n√£o temos nem <code>archivo1.py</code>, nem <code>archivo2.py</code>, nem <code>archivo4.py</code>, nem <code>archivo7.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'api_keys.py  hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Volta ao futuro (git reflog)">Volta ao futuro (<code>git reflog</code>)<a class="anchor-link" href="#Volta ao futuro (git reflog)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 203" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suponhamos que nos arrependemos e queremos voltar ao ponto onde est√°vamos, ao √∫ltimo punto no hist√≥rico. Uma maneira seria fazer <code>git reset --hard &#x3C;hash&#x3E;</code>. Mas imaginemos que n√£o sabemos o hash, porque n√£o fizemos <code>git log</code> antes e se o fizermos agora s√≥ nos d√° informa√ß√£o do hist√≥rico at√© o terceiro commit.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* c4930d7 (HEAD -&amp;gt; master) Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Aqui o que podemos fazer √© <code>git reflog</code>, que nos dar√° um hist√≥rico incluindo os saltos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reflog</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'c4930d7 (HEAD -&amp;gt; master) HEAD@&#x7B;0&#x7D;: reset: moving to c4930d7',
          '4bb9d75 HEAD@&#x7B;1&#x7D;: commit: Commit con el archivo 7',
          'ea615a9 HEAD@&#x7B;2&#x7D;: reset: moving to HEAD~1',
          'd6dc485 HEAD@&#x7B;3&#x7D;: commit: Commit con los archivos 6 y 7',
          'ea615a9 HEAD@&#x7B;4&#x7D;: commit: Eliminado archivo5.py',
          'e3153a5 HEAD@&#x7B;5&#x7D;: commit: Commit con los archivos 4 y 5',
          '0b09cfa HEAD@&#x7B;6&#x7D;: commit: A√±adido .gitignore',
          '04ebd1f HEAD@&#x7B;7&#x7D;: reset: moving to HEAD~1',
          '0147d65 HEAD@&#x7B;8&#x7D;: commit: Commit con el archivo 3',
          '04ebd1f HEAD@&#x7B;9&#x7D;: reset: moving to HEAD~1',
          '6dc7be6 HEAD@&#x7B;10&#x7D;: commit: Commit con el archivos 3',
          '04ebd1f HEAD@&#x7B;11&#x7D;: commit (amend): Commit con los archivos 1 y 2',
          '285b243 HEAD@&#x7B;12&#x7D;: commit: Commit con el archivo 1',
          'c4930d7 (HEAD -&amp;gt; master) HEAD@&#x7B;13&#x7D;: commit (amend): Tercer commit, hola.py',
          '60e2ffd HEAD@&#x7B;14&#x7D;: commit: Tercer commot, hola.py',
          '6e99e73 HEAD@&#x7B;15&#x7D;: commit: Segundo commit, hola.py',
          '1c95e4f HEAD@&#x7B;16&#x7D;: commit (initial): Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que nos diz que est√°vamos no commit com hash <code>4bb9d75</code>, ou seja, o √∫ltimo commit que fizemos, e de l√° fomos at√© o commit com hash <code>c4930d7</code>, que se voc√™ reparar, √© o mesmo hash do commit com mensagem <code>Tercer commit, hola.py</code>. Portanto, j√° sabemos o hash do √∫ltimo commit, o <code>4bb9d75</code>, assim para voltar √† posi√ß√£o do √∫ltimo commit fazemos <code>git reset --hard 4bb9d75</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="mi">4</span><span class="n">bb9d75</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'HEAD est√° ahora en 4bb9d75 Commit con el archivo 7',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se agora voltarmos a fazer um log</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 4bb9d75 (HEAD -&amp;gt; master) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que efectivamente estamos na posi√ß√£o do √∫ltimo commit, *voltamos para o futuro*</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Pesquisa em arquivos (git grep &#x3C;palavra&#x3E;)">Pesquisa em arquivos (<code>git grep &#x3C;palavra&#x3E;</code>)<a class="anchor-link" href="#Pesquisa em arquivos (git grep &#x3C;palavra&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 204" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos procurar em arquivos, podemos faz√™-lo com o comando <code>git grep</code>. Como no reposit√≥rio que estamos construindo √© muito pequeno e tem poucos arquivos, vamos baixar um novo por meio de um comando que veremos com mais detalhes posteriormente.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">facebookresearch</span><span class="o">/</span><span class="n">segment</span><span class="o">-</span><span class="n">anything</span><span class="o">.</span><span class="n">git</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Clonando en &#x27;segment-anything&#x27;...',
          'remote: Enumerating objects: 279, done.',
          'remote: Counting objects: 100% (181/181), done.',
          'remote: Compressing objects: 100% (77/77), done.',
          'remote: Total 279 (delta 116), reused 104 (delta 104), pack-reused 98',
          'Recibiendo objetos: 100% (279/279), 18.31 MiB | 21.25 MiB/s, listo.',
          'Resolviendo deltas: 100% (140/140), listo.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O reposit√≥rio que baixamos √© o do c√≥digo-fonte do SAM, uma rede neural da Meta para segmentar qualquer objeto. Entramos na pasta do reposit√≥rio e procuramos, por exemplo, quantas vezes a palavra <code>softmax</code> foi escrita.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">segment</span><span class="o">-</span><span class="n">anything</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">grep</span> <span class="n">softmax</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'segment_anything/modeling/image_encoder.py:        attn = attn.softmax(dim=-1)',
          'segment_anything/modeling/transformer.py:        attn = torch.softmax(attn, dim=-1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que se escreveu nos arquivos <code>segment_anything/modeling/image_encoder.py</code> e <code>segment_anything/modeling/transformer.py</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos saber em quais linhas dos arquivos foi escrito, usamos a flag <code>-n</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">segment</span><span class="o">-</span><span class="n">anything</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">grep</span> <span class="o">-</span><span class="n">n</span> <span class="n">softmax</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'segment_anything/modeling/image_encoder.py:236:        attn = attn.softmax(dim=-1)',
          'segment_anything/modeling/transformer.py:233:        attn = torch.softmax(attn, dim=-1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos contar quantas vezes uma palavra aparece, podemos usar a flag <code>-c</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">segment</span><span class="o">-</span><span class="n">anything</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">grep</span> <span class="o">-</span><span class="n">c</span> <span class="n">softmax</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'segment_anything/modeling/image_encoder.py:1',
          'segment_anything/modeling/transformer.py:1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>E vemos que aparece uma vez em cada arquivo</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>E nos diz que est√£o nas linhas 236 e 233, respectivamente.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Busca em commits (git log -S &#x3C;palavra&#x3E;)">Busca em commits (<code>git log -S &#x3C;palavra&#x3E;</code>)<a class="anchor-link" href="#Busca em commits (git log -S &#x3C;palavra&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 205" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos buscar no hist√≥rico de commits, podemos usar o comando <code>git log -S &#x3C;palavra&#x3E;</code>. Por exemplo, busquemos no hist√≥rico de commits do reposit√≥rio que baixamos anteriormente a palavra <code>fix</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">segment</span><span class="o">-</span><span class="n">anything</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">-</span><span class="n">S</span> <span class="s2">&quot;collab&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'commit 2780a301de4483e5c46edb230ea781556159c658',
          'Author: Eric Mintun &amp;lt;eric.mintun@gmail.com&amp;gt;',
          'Date:   Mon Apr 10 10:50:17 2023 -0700',
          '&#x20;&#x20;&#x20;&#x20;Fix typo in notebook &#x27;using_collab&#x27;-&amp;gt;&#x27;using_colab&#x27; in other two notebooks.',
          'commit 2c11ea23525970ac288f23dc74b203bcbfb4cc6a',
          'Author: jp-x-g &amp;lt;jpxg-dev@protonmail.com&amp;gt;',
          'Date:   Thu Apr 6 20:00:04 2023 -0700',
          '&#x20;&#x20;&#x20;&#x20;fix parameter name',
          '&#x20;&#x20;&#x20;&#x20;',
          '&#x20;&#x20;&#x20;&#x20;&quot;using_collab&quot; does not appear in subsequent text, replacing with &quot;using_colab&quot;',
          'commit b47d02d68c308672751be29742fcef02a86e2f02',
          'Author: Eric Mintun &amp;lt;eric.mintun@gmail.com&amp;gt;',
          'Date:   Wed Apr 5 06:13:09 2023 -0700',
          '&#x20;&#x20;&#x20;&#x20;Fix broken links in notebook Colab setup.',
          'commit 571794162e0887c15d12b809505b902c7bf8b4db',
          'Author: Eric Mintun &amp;lt;eric.mintun@gmail.com&amp;gt;',
          'Date:   Tue Apr 4 22:25:49 2023 -0700',
          '&#x20;&#x20;&#x20;&#x20;Initial commit',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Apagamos a pasta do SAM</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">rm</span> <span class="o">-</span><span class="n">r</span> <span class="n">segment</span><span class="o">-</span><span class="n">anything</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Ramas">Ramas<a class="anchor-link" href="#Ramas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 206" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/GIT-Branchand-its-Operations.webp" alt="branches">
      <p>O uso de branches √© muito √∫til, pois podemos come√ßar a desenvolver um novo recurso sem ter que modificar o c√≥digo original</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Criar uma branch (git branch &#x3C;nome-da-branch&#x3E;)">Criar uma branch (<code>git branch &#x3C;nome-da-branch&#x3E;</code>)<a class="anchor-link" href="#Criar uma branch (git branch &#x3C;nome-da-branch&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 207" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>**Nota**: Antes de tudo, √© preciso dizer que para criar uma branch em um reposit√≥rio deve haver pelo menos um commit. Se tentarmos criar uma branch antes de fazer o primeiro commit, receberemos um erro.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para criar uma branch usamos o comando <code>git branch &#x3C;nome da branch&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="n">new_branch</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Listar ramos (git branch)">Listar ramos (<code>git branch</code>)<a class="anchor-link" href="#Listar ramos (git branch)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 208" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos nossa primeira branch, podemos verificar todas as branches criadas apenas escrevendo <code>git branch</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* master',
          '&#x20;&#x20;new_branch',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Al√©m de listar, ele indica com um asterisco <code>*</code> em qual ramo estamos, neste caso na ramo <code>master</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Renomear ramos, adeus √† ramo master (git branch -m &#x3C;nome antigo&#x3E; &#x3C;novo nome&#x3E;)">Renomear ramos, adeus √† ramo <code>master</code> (<code>git branch -m &#x3C;nome antigo&#x3E; &#x3C;novo nome&#x3E;</code>)<a class="anchor-link" href="#Renomear ramos, adeus √† ramo master (git branch -m &#x3C;nome antigo&#x3E; &#x3C;novo nome&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 209" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hist√≥ricamente no git a ramifica√ß√£o principal era chamada de <code>master</code>, mas isso tem conota√ß√µes hist√≥ricas negativas devido ao conceito de <code>master-slave</code> (<code>maestro-escravo</code>), em raz√£o do sofrimento que muitas pessoas enfrentaram. Por isso, agora a ramifica√ß√£o principal costuma ser denominada <code>main</code>, ent√£o para renome√°-la usamos <code>git branch -m master main</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">m</span> <span class="n">master</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Listamos as ramas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* main',
          '&#x20;&#x20;new_branch',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, conseguimos mudar o nome da branch principal de <code>master</code> para <code>main</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Mudar de ramo (git switch &#x3C;branch&#x3E;)">Mudar de ramo (<code>git switch &#x3C;branch&#x3E;</code>)<a class="anchor-link" href="#Mudar de ramo (git switch &#x3C;branch&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 210" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos mudar de branch, basta escrever <code>git switch &#x3C;nome da branch&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">new_branch</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;new_branch&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver em qual ramo estamos com <code>git branch</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;main',
          '* new_branch',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, mudamos de branch para new_branch</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos criar e mudar para uma branch em um √∫nico comando, podemos usar <code>git switch -c &#x3C;nome da branch&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="o">-</span><span class="n">c</span> <span class="n">new_branch2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a nueva rama &#x27;new_branch2&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver em qual branch estamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;main',
          '&#x20;&#x20;new_branch',
          '* new_branch2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>N√≥s criamos e mudamos de branch com um √∫nico comando</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Obter a branch em que estamos (git branch --show-current)">Obter a branch em que estamos (<code>git branch --show-current</code>)<a class="anchor-link" href="#Obter a branch em que estamos (git branch --show-current)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 211" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vimos at√© agora com <code>git branch</code> podemos obter uma lista de todas as ramas e ainda ver em qual estamos atualmente, mas no caso de termos uma grande quantidade de ramas, algo que pode acontecer em uma equipe de trabalho com muita gente, √© bom obter apenas a rama e n√£o uma lista de todas. Para isso usamos <code>git branch --show-current</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'new_branch2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Lista de ramas mais recentes (git branch --sort=-committerdate)">Lista de ramas mais recentes (<code>git branch --sort=-committerdate</code>)<a class="anchor-link" href="#Lista de ramas mais recentes (git branch --sort=-committerdate)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 212" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Em caso de ter muitas branches, talvez seja interessante saber quais s√£o as mais recentes para ver quais foram as √∫ltimas criadas e onde deve estar o √∫ltimo desenvolvimento. Para isso, usamos <code>git branch --sort=-committerdate</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">sort</span><span class="o">=-</span><span class="n">committerdate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* new_branch2',
          '&#x20;&#x20;new_branch',
          '&#x20;&#x20;main',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, as ordenou em ordem inversa √† que foram criadas.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="O comando preterido git checkout">O comando preterido <code>git checkout</code><a class="anchor-link" href="#O comando preterido git checkout"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 213" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>At√© recentemente, o comando para criar ramifica√ß√µes e alternar entre elas era <code>git checkout</code>, mas este comando n√£o fazia apenas isso, tamb√©m restaurava o diret√≥rio de trabalho. No entanto, isso vai contra a filosofia do Linux, por isso foram criados os comandos <code>git branch</code>, <code>git switch</code> e <code>git restore</code> para dividir essa funcionalidade.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Fundindo branches (git merge)">Fundindo branches (<code>git merge</code>)<a class="anchor-link" href="#Fundindo branches (git merge)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 214" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como dissem, criar branches √© muito √∫til para desenvolver novas funcionalidades sem afetar o resto da equipe. Mas quando elas est√£o conclu√≠das, √© necess√°rio lev√°-las para a branch principal, para isso usamos o comando <code>git merge &#x3C;branch&#x3E;</code></p>
      <blockquote>
      <p>**Importante**: Temos que estar na branch que vai adotar as mudan√ßas, ou seja, se quisermos mesclar as mudan√ßas realizadas na branch <code>new_branch2</code> na branch <code>main</code>, primeiro temos que nos certificar de estar na branch <code>main</code></p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro verificamos em qual branch estamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'new_branch2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Eliminamos <code>arquivo7.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">rm</span> <span class="n">archivo7</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'rm &#x27;archivo7.py&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um commit com as mudan√ßas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;Eliminado archivo7.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[new_branch2 5168f78] Eliminado archivo7.py',
          '1 file changed, 1 deletion(-)',
          'delete mode 100644 archivo7.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se fazemos um <code>ls</code> vemos que <code>arquivo7.py</code> j√° n√£o est√°</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">archivo7</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos um novo arquivo e fazemos um commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">archivo8</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo8</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Commit con el archivo 8&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[new_branch2 564ccfb] Commit con el archivo 8',
          '1 file changed, 0 insertions(+), 0 deletions(-)',
          'create mode 100644 archivo8.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fizemos dois commits novos nesta branch, vamos ver com <code>git log</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 564ccfb (HEAD -&amp;gt; new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch, main) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Mudamos para a branch principal</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;main&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se agora fizermos de novo <code>ls</code> veremos que <code>arquivo7.py</code> sim est√°</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">archivo7</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'archivo7.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fusamos as branches, trazendo as mudan√ßas de <code>new_branch2</code> para <code>main</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">new_branch2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Actualizando 4bb9d75..564ccfb',
          'Fast-forward',
          'archivo7.py | 1 -',
          'archivo8.py | 0',
          '2 files changed, 1 deletion(-)',
          'delete mode 100644 archivo7.py',
          'create mode 100644 archivo8.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama main',
          'nada para hacer commit, el √°rbol de trabajo est√° limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que ao fazer o merge n√£o √© necess√°rio fazer nenhum commit, vejamos com um <code>git log</code> o que aconteceu.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 564ccfb (HEAD -&amp;gt; main, new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que o commit da branch <code>new_branch2</code> foi incorporado a esta branch</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Avanco rapido">Avan√ßo r√°pido<a class="anchor-link" href="#Avanco rapido"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 215" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Neste caso criamos uma nova branch, a principal n√£o √© afetada e apenas modificamos a nova, realizando v√°rios commits. Portanto, ao unir a nova na principal, todos os commits feitos na nova ser√£o vis√≠veis. Para realizar este tipo de merge, escrevemos <code>git merge --ff-only &#x3C;branch&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1">### Este c√≥digo es para crear el gr√°fico de las ramas, no es necesario para el curso</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">graphviz</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Crear el gr√°fico con la direcci√≥n de las flechas de izquierda a derecha</span>',
      '<span class="n">orin</span> <span class="o">=</span> <span class="n">graphviz</span><span class="o">.</span><span class="n">Digraph</span><span class="p">(</span><span class="s1">&#39;G&#39;</span><span class="p">,</span> <span class="n">graph_attr</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;rankdir&#39;</span><span class="p">:</span> <span class="s1">&#39;LR&#39;</span><span class="p">})</span>',
      '<span class="n">fast_foward</span> <span class="o">=</span> <span class="n">graphviz</span><span class="o">.</span><span class="n">Digraph</span><span class="p">(</span><span class="s1">&#39;G&#39;</span><span class="p">,</span> <span class="n">graph_attr</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;rankdir&#39;</span><span class="p">:</span> <span class="s1">&#39;LR&#39;</span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar nodos (pelotas) A, B, C y D en la rama principal</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;transparent&#39;</span><span class="p">)</span>',
      '<span class="n">fast_foward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">fast_foward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">fast_foward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">fast_foward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar nodos (pelotas) X e Y en la rama secundaria</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>',
      '<span class="n">fast_foward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;magenta&#39;</span><span class="p">)</span>',
      '<span class="n">fast_foward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;magenta&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar flechas entre los nodos en la rama principal</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;AB&#39;</span><span class="p">,</span> <span class="s1">&#39;BC&#39;</span><span class="p">,</span> <span class="s1">&#39;CD&#39;</span><span class="p">])</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edge</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;transparent&#39;</span><span class="p">)</span>  <span class="c1"># Hacer la flecha de C a D transparente</span>',
      '<span class="n">fast_foward</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;AB&#39;</span><span class="p">,</span> <span class="s1">&#39;BC&#39;</span><span class="p">,</span> <span class="s1">&#39;CD&#39;</span><span class="p">,</span> <span class="s1">&#39;DX&#39;</span><span class="p">,</span> <span class="s1">&#39;XY&#39;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar flechas entre los nodos en la rama secundaria</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;DX&#39;</span><span class="p">,</span> <span class="s1">&#39;XY&#39;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Mostrar el diagrama de flujo en la celda de c√≥digo de Jupyter Notebook</span>',
      '<span class="n">display</span><span class="p">(</span><span class="n">orin</span><span class="p">)</span>',
      '<span class="n">display</span><span class="p">(</span><span class="n">fast_foward</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;graphviz.graphs.Digraph at 0x7f58f80c09a0&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;graphviz.graphs.Digraph at 0x7f58f9203fa0&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos primeiro a verificar que estamos na branch principal</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'main',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos uma nova branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="n">branch_fast_forward</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Mudamos para ela</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">branch_fast_forward</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;branch_fast_forward&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'branch_fast_forward',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver o log</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span> <span class="o">--</span><span class="nb">all</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 564ccfb (HEAD -&amp;gt; branch_fast_forward, new_branch2, main) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ok, estamos em um branch criado a partir do principal com todo o seu hist√≥rico de logs, fazemos dois novos commits</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">rm</span> <span class="n">archivo4</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;Eliminado archivo4.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'rm &#x27;archivo4.py&#x27;',
          '[branch_fast_forward 4484e70] Eliminado archivo4.py',
          '1 file changed, 1 deletion(-)',
          'delete mode 100644 archivo4.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">rm</span> <span class="n">hola</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;Eliminado hola.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'rm &#x27;hola.py&#x27;',
          '[branch_fast_forward 94149fc] Eliminado hola.py',
          '1 file changed, 3 deletions(-)',
          'delete mode 100644 hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um novo log para ver o que foi criado nesta nova branch.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 94149fc (HEAD -&amp;gt; branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2, main) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>ComoÊàë‰ª¨ÂèØ‰ª•ÁúãÂà∞ÔºåÊúÄÂêé‰∏§‰∏™Êèê‰∫§ÊòØÊàë‰ª¨ÂàõÂª∫ÁöÑÔºåÊàë‰ª¨ÂèØ‰ª•Ê£ÄÊü•Ëøô‰∫õÊèê‰∫§‰∏çÂú®‰∏ªÂàÜÊîØ‰∏äÔºà‰∏∫Ê≠§ÊàëÊåáÂÆöË¶ÅÂú® <code>main</code> ÂàÜÊîØ‰∏äËøõË°åÊìç‰ΩúÔºâ</p>
      <p>Note: The provided translation is in Chinese instead of Portuguese. Here is the correct Portuguese translation:</p>
      <p>Como podemos ver, os dois √∫ltimos commits s√£o aqueles que criamos e podemos verificar que esses commits n√£o est√£o na branch principal (para isso especifico que seja feito sobre a branch <code>main</code>)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="n">main</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 564ccfb (new_branch2, main) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora vamos para a branch <code>main</code> fazer o merge.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;main&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por √∫ltimo, fazemos o merge do tipo fast forward</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">merge</span> <span class="o">--</span><span class="n">ff</span><span class="o">-</span><span class="n">only</span> <span class="n">branch_fast_forward</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Actualizando 564ccfb..94149fc',
          'Fast-forward',
          'archivo4.py | 1 -',
          'hola.py     | 3 ---',
          '2 files changed, 4 deletions(-)',
          'delete mode 100644 archivo4.py',
          'delete mode 100644 hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O merge foi feito, vamos ver o que aconteceu com o log na branch <code>main</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 94149fc (HEAD -&amp;gt; main, branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se v√™, foram mantidos os dois commits realizados na branch <code>branch_fast_forward</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Sem avanco rapido ou mesclagem verdadeira">Sem avan√ßo r√°pido ou mesclagem verdadeira<a class="anchor-link" href="#Sem avanco rapido ou mesclagem verdadeira"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 216" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Neste caso, criamos uma nova branch, a principal n√£o foi tocada e modificamos a nova, realizando v√°rios commits. Em seguida, realizamos um commit na principal. Portanto, ao unir a nova na principal, ser√° visto um √∫nico commit na nova. Para fazer este tipo de merge, escrevemos <code>git merge &#x3C;branch&#x3E; --no-ff</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1">### Este c√≥digo es para crear el gr√°fico de las ramas, no es necesario para el curso</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">graphviz</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Crear el gr√°fico con la direcci√≥n de las flechas de izquierda a derecha</span>',
      '<span class="n">orin</span> <span class="o">=</span> <span class="n">graphviz</span><span class="o">.</span><span class="n">Digraph</span><span class="p">(</span><span class="s1">&#39;G&#39;</span><span class="p">,</span> <span class="n">graph_attr</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;rankdir&#39;</span><span class="p">:</span> <span class="s1">&#39;LR&#39;</span><span class="p">})</span>',
      '<span class="n">not_fast_forward</span> <span class="o">=</span> <span class="n">graphviz</span><span class="o">.</span><span class="n">Digraph</span><span class="p">(</span><span class="s1">&#39;G&#39;</span><span class="p">,</span> <span class="n">graph_attr</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;rankdir&#39;</span><span class="p">:</span> <span class="s1">&#39;LR&#39;</span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar nodos (pelotas) A, B, C y D en la rama principal</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;transparent&#39;</span><span class="p">)</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar nodos (pelotas) X e Y en la rama secundaria</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar nodo (pelota) M en la rama principal</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;M&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;M&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;magenta&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar flechas entre los nodos en la rama principal</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;AB&#39;</span><span class="p">,</span> <span class="s1">&#39;BC&#39;</span><span class="p">,</span> <span class="s1">&#39;CD&#39;</span><span class="p">])</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edge</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;transparent&#39;</span><span class="p">)</span>  <span class="c1"># Hacer la flecha de C a D transparente</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;AB&#39;</span><span class="p">,</span> <span class="s1">&#39;BC&#39;</span><span class="p">,</span> <span class="s1">&#39;CD&#39;</span><span class="p">,</span> <span class="s1">&#39;DE&#39;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar flechas entre los nodos en la rama secundaria</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;DX&#39;</span><span class="p">,</span> <span class="s1">&#39;XY&#39;</span><span class="p">])</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;DX&#39;</span><span class="p">,</span> <span class="s1">&#39;XY&#39;</span><span class="p">,</span> <span class="s1">&#39;YM&#39;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar flechas de la rama principal al nodo M</span>',
      '<span class="n">not_fast_forward</span><span class="o">.</span><span class="n">edge</span><span class="p">(</span><span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="s1">&#39;M&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Mostrar el diagrama de flujo en la celda de c√≥digo de Jupyter Notebook</span>',
      '<span class="n">display</span><span class="p">(</span><span class="n">orin</span><span class="p">)</span>',
      '<span class="n">display</span><span class="p">(</span><span class="n">not_fast_forward</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;graphviz.graphs.Digraph at 0x7f58f80c2fb0&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;graphviz.graphs.Digraph at 0x7f58f80c2230&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos primeiro a verificar que estamos na branch principal</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'main',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos uma nova branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="n">branch_no_fast_forward</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Mudamos para ela</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">branch_no_fast_forward</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;branch_no_fast_forward&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'branch_no_fast_forward',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Claro, estamos em um branch criado a partir do principal com todo o seu hist√≥rico de logs, fazemos dois novos commits.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">file1</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">file1</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;file1&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[branch_no_fast_forward e4e23c9] file1',
          '1 file changed, 0 insertions(+), 0 deletions(-)',
          'create mode 100644 file1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">file2</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">file2</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;file2&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[branch_no_fast_forward 8df3429] file2',
          '1 file changed, 0 insertions(+), 0 deletions(-)',
          'create mode 100644 file2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um novo log para ver o que foi criado nesta nova branch.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 8df3429 (HEAD -&amp;gt; branch_no_fast_forward) file2',
          '* e4e23c9 file1',
          '* 94149fc (main, branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, os dois √∫ltimos commits s√£o os que criamos e podemos verificar que esses commits n√£o est√£o na branch principal (para isso especifico que seja feito sobre a branch <code>main</code>).</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="n">main</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 94149fc (main, branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora vamos para o branch <code>main</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;main&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos um novo commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">file3</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">file3</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;file3&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[main 8bdf4d8] file3',
          '1 file changed, 0 insertions(+), 0 deletions(-)',
          'create mode 100644 file3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por √∫ltimo, fazemos o merge do tipo n√£o fast forward</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">branch_no_fast_forward</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">ff</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'ommit. comenzando con &#x27;#&#x27; ser√°n ignoradas, y un mensaje vac√≠o abortasaria esta&amp;gt;# especialmente si esto fusiona un upstream actualizado en una rama de t√≥pico. /home/wallabot/Documentos/web/portafolio/posts/notebook_git/.git/MERGE_MSG   [ l√≠nea 1/7 (14%), col 1/48 (2%), car 0/301 (0%) ]             [ P√°rrafo justificado ]...llabot/Documentos/web/portafolio/posts/notebook_git/.git/MERGE_MSG Modificado',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, nos abre o editor para introduzir uma mensagem de commit e uma mensagem por padr√£o. Aceitamos a mensagem e vemos o que aconteceu.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama main',
          'nada para hacer commit, el √°rbol de trabajo est√° limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '*   274529c (HEAD -&amp;gt; main) Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'api_keys.py  archivo1.py  archivo2.py  archivo8.py  file1  file2  file3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, foi criado um novo commit com as mudan√ßas da nova branch na branch principal.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Squash">Squash<a class="anchor-link" href="#Squash"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 217" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Neste tipo de fus√£o, todos os commits de uma nova ramifica√ß√£o s√£o reunidos em um √∫nico commit na ramifica√ß√£o principal. Para isso, escrevemos <code>git merge &#x3C;rama&#x3E; --squash</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1">### Este c√≥digo es para crear el gr√°fico de las ramas, no es necesario para el curso</span>',
      '<span class="w"> </span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">graphviz</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Crear el gr√°fico con la direcci√≥n de las flechas de izquierda a derecha</span>',
      '<span class="n">orin</span> <span class="o">=</span> <span class="n">graphviz</span><span class="o">.</span><span class="n">Digraph</span><span class="p">(</span><span class="s1">&#39;G&#39;</span><span class="p">,</span> <span class="n">graph_attr</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;rankdir&#39;</span><span class="p">:</span> <span class="s1">&#39;LR&#39;</span><span class="p">})</span>',
      '<span class="n">squash</span> <span class="o">=</span> <span class="n">graphviz</span><span class="o">.</span><span class="n">Digraph</span><span class="p">(</span><span class="s1">&#39;G&#39;</span><span class="p">,</span> <span class="n">graph_attr</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;rankdir&#39;</span><span class="p">:</span> <span class="s1">&#39;LR&#39;</span><span class="p">})</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar nodos (pelotas) A, B, C y D en la rama principal</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;transparent&#39;</span><span class="p">)</span>',
      '<span class="n">squash</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">squash</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">squash</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="n">squash</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar nodos (pelotas) X e Y en la rama secundaria</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Y&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar nodo (pelota) M en la rama principal</span>',
      '<span class="n">squash</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="s1">&#39;M&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;M&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;magenta&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar flechas entre los nodos en la rama principal</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;AB&#39;</span><span class="p">,</span> <span class="s1">&#39;BC&#39;</span><span class="p">,</span> <span class="s1">&#39;CD&#39;</span><span class="p">])</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edge</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;transparent&#39;</span><span class="p">)</span>  <span class="c1"># Hacer la flecha de C a D transparente</span>',
      '<span class="n">squash</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;AB&#39;</span><span class="p">,</span> <span class="s1">&#39;BC&#39;</span><span class="p">,</span> <span class="s1">&#39;CD&#39;</span><span class="p">,</span> <span class="s1">&#39;DM&#39;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Agregar flechas entre los nodos en la rama secundaria</span>',
      '<span class="n">orin</span><span class="o">.</span><span class="n">edges</span><span class="p">([</span><span class="s1">&#39;DX&#39;</span><span class="p">,</span> <span class="s1">&#39;XY&#39;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Mostrar el diagrama de flujo en la celda de c√≥digo de Jupyter Notebook</span>',
      '<span class="n">display</span><span class="p">(</span><span class="n">orin</span><span class="p">)</span>',
      '<span class="n">display</span><span class="p">(</span><span class="n">squash</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;graphviz.graphs.Digraph at 0x7f58f80e6470&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;graphviz.graphs.Digraph at 0x7f58f80e6f80&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos primeiro a verificar que estamos na branch principal</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'main',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos uma nova branch</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="n">branch_squash</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Mudamos para ela</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">branch_squash</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;branch_squash&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'branch_squash',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver o log</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span> <span class="o">--</span><span class="nb">all</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '*   274529c (HEAD -&amp;gt; branch_squash, main) Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ok, estamos em um branch criado a partir do principal com todo o seu hist√≥rico de logs, fazemos tr√™s novos commits</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">rm</span> <span class="n">file1</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;Eliminado file1&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'rm &#x27;file1&#x27;',
          '[branch_squash 767b632] Eliminado file1',
          '1 file changed, 0 insertions(+), 0 deletions(-)',
          'delete mode 100644 file1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">rm</span> <span class="n">file2</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;Eliminado file2&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'rm &#x27;file2&#x27;',
          '[branch_squash a47f771] Eliminado file2',
          '1 file changed, 0 insertions(+), 0 deletions(-)',
          'delete mode 100644 file2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">rm</span> <span class="n">file3</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;Eliminado file3&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'rm &#x27;file3&#x27;',
          '[branch_squash 85f8c9f] Eliminado file3',
          '1 file changed, 0 insertions(+), 0 deletions(-)',
          'delete mode 100644 file3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um novo log para ver o que foi criado nesta nova branch.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 85f8c9f (HEAD -&amp;gt; branch_squash) Eliminado file3',
          '* a47f771 Eliminado file2',
          '* 767b632 Eliminado file1',
          '*   274529c (main) Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, os tr√™s √∫ltimos commits s√£o os que criamos e podemos verificar que esses commits n√£o est√£o na branch principal (para isso especifico que seja feito sobre a branch <code>main</code>)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="n">main</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '*   274529c (main) Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora vamos para a branch <code>main</code> para fazer o merge.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;main&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos o merge do tipo squash</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">branch_squash</span> <span class="o">--</span><span class="n">squash</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Actualizando 274529c..85f8c9f',
          'Fast-forward',
          'Commit de aplastamiento -- no actualizando HEAD',
          'file1 | 0',
          'file2 | 0',
          'file3 | 0',
          '3 files changed, 0 insertions(+), 0 deletions(-)',
          'delete mode 100644 file1',
          'delete mode 100644 file2',
          'delete mode 100644 file3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O merge foi feito, vamos ver o que aconteceu com o log na branch <code>main</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '*   274529c (HEAD -&amp;gt; main) Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As altera√ß√µes feitas n√£o est√£o aparecendo na branch, vamos fazer um <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama main',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del √°rea de stage)',
          'borrados:        file1',
          'borrados:        file2',
          'borrados:        file3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que temos que fazer o commit com a fus√£o. Isso √© porque o git n√£o sabe qual mensagem colocar e nos deixa fazer isso, ent√£o o fazemos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Merge squash de los commits de la rama branch_squash&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[main 52acb97] Merge squash de los commits de la rama branch_squash',
          '3 files changed, 0 insertions(+), 0 deletions(-)',
          'delete mode 100644 file1',
          'delete mode 100644 file2',
          'delete mode 100644 file3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos novamente um <code>git log</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 52acb97 (HEAD -&amp;gt; main) Merge squash de los commits de la rama branch_squash',
          '*   274529c Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Conflitos ao mesclar">Conflitos ao mesclar<a class="anchor-link" href="#Conflitos ao mesclar"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 218" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Quando branches s√£o mescladas, pode acontecer que o mesmo arquivo tenha sido modificado em v√°rias branches. Isso √© comum em projetos onde v√°rias pessoas est√£o desenvolvendo, ent√£o vamos ver como resolver isso.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Criamos um conflito">Criamos um conflito<a class="anchor-link" href="#Criamos um conflito"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 219" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Verificamos que estamos na branch <code>main</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'main',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos uma nova branch a partir desta.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="n">rama_con_conflicto</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Adicionamos uma linha ao arquivo <code>arquivo1.py</code>, lembrando que estamos na branch <code>main</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;rama main&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">cat</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'print(&#x27;Este es el archivo 1&#x27;)',
          'print(&#x27;rama main&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p><code>arquivo1.py</code> foi modificado, fazemos um commit</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;archivo1.py en rama main&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[main 53f909b] archivo1.py en rama main',
          '1 file changed, 1 insertion(+)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora vamos para o branch <code>rama_con_conflicto</code> e adicionamos uma nova linha a <code>archivo1.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">rama_con_conflicto</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;rama_con_conflicto&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'rama_con_conflicto',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;rama rama_con_conflicto&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">cat</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'print(&#x27;Este es el archivo 1&#x27;)',
          'print(&#x27;rama rama_con_conflicto&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, <code>arquivo1.py</code> n√£o √© igual na branch <code>main</code> e na branch <code>rama_con_conflicto</code>. Fazemos um commit com a modifica√ß√£o de <code>arquivo1.py</code> na branch <code>rama_con_conflicto</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;archivo1.py en rama rama_con_conflicto&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[rama_con_conflicto 32851c3] archivo1.py en rama rama_con_conflicto',
          '1 file changed, 1 insertion(+)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos para o branch <code>main</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;main&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">current</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'main',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um merge da branch <code>rama_con_conflicto</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">rama_con_conflicto</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Auto-fusionando archivo1.py',
          'CONFLICTO (contenido): Conflicto de fusi√≥n en archivo1.py',
          'Fusi√≥n autom√°tica fall√≥; arregle los conflictos y luego realice un commit con el resultado.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ao fazer o merge, j√° somos avisados de que h√° um conflito em <code>archivo1.py</code> e que n√£o foi poss√≠vel realizar o merge. Fazemos um <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama main',
          'Tienes rutas no fusionadas.',
          '&#x20;&#x20;(arregla los conflictos y ejecuta &quot;git commit&quot;',
          '&#x20;&#x20;(usa &quot;git merge --abort&quot; para abortar la fusion)',
          'Rutas no fusionadas:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para marcar una resoluci√≥n)',
          'modificados por ambos:  archivo1.py',
          'sin cambios agregados al commit (usa &quot;git add&quot; y/o &quot;git commit -a&quot;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Diz-nos o mesmo, mas nos d√° mais informa√ß√µes, diz-nos que podemos abortar a fus√£o com <code>git merge --abort</code>. Mas em vez disso, vamos resolv√™-lo.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Resolver um conflito">Resolver um conflito<a class="anchor-link" href="#Resolver um conflito"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 220" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>No nosso caso, sabemos onde est√° o problema, mas em caso de n√£o saber, atrav√©s do <code>git diff</code> podemos encontrar o problema.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">diff</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'diff --cc archivo1.py',
          'index 8b4bf58,b5c003c..0000000',
          '--- a/archivo1.py',
          '+++ b/archivo1.py',
          '@@@ -1,2 -1,2 +1,6 @@@',
          '&#x20;&#x20;print(&#x27;Este es el archivo 1&#x27;)',
          '++&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD',
          '+print(&#x27;rama main&#x27;)',
          '++=======',
          '+ print(&#x27;rama rama_con_conflicto&#x27;)',
          '++&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; rama_con_conflicto',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p><code>git diff</code> est√° nos dizendo que o problema est√° na √∫ltima linha. A vers√£o do arquivo da branch <code>HEAD</code> (na qual estamos atualmente <code>main</code>) tem <code>print(&#x27;rama main&#x27;)</code> na √∫ltima linha, enquanto a vers√£o da branch <code>rama_con_conflicto</code> tem <code>print(&#x27;rama rama_con_conflicto&#x27;)</code> na √∫ltima linha. Ent√£o, √© preciso abrir o arquivo com qualquer editor e resolver isso.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ap√≥s editar o arquivo com meu editor de c√≥digo, removi todas as linhas desnecess√°rias e ficou assim</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">cat</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'print(&#x27;Este es el archivo 1&#x27;)',
          'print(&#x27;rama main&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora fazemos um <code>git status</code> para ver o que temos a fazer</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama main',
          'Tienes rutas no fusionadas.',
          '&#x20;&#x20;(arregla los conflictos y ejecuta &quot;git commit&quot;',
          '&#x20;&#x20;(usa &quot;git merge --abort&quot; para abortar la fusion)',
          'Rutas no fusionadas:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para marcar una resoluci√≥n)',
          'modificados por ambos:  archivo1.py',
          'sin cambios agregados al commit (usa &quot;git add&quot; y/o &quot;git commit -a&quot;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Diz que temos o arquivo <code>arquivo1.py</code> com modifica√ß√µes, portanto o adicionamos √† √°rea de <code>staged</code> e depois fazemos um commit.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo1</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;archivo1.py con el merge resuelto&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[main 679bb49] archivo1.py con el merge resuelto',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a fazer um <code>git status</code> para ver se foi resolvido.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama main',
          'nada para hacer commit, el √°rbol de trabajo est√° limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Parece que foi resolvido, fazemos um <code>git log</code> para verificar.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">oneline</span> <span class="o">--</span><span class="n">decorate</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '*   679bb49 (HEAD -&amp;gt; main) archivo1.py con el merge resuelto',
          '|\\',
          '| * 32851c3 (rama_con_conflicto) archivo1.py en rama rama_con_conflicto',
          '* | 53f909b archivo1.py en rama main',
          '|/',
          '* 52acb97 Merge squash de los commits de la rama branch_squash',
          '*   274529c Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Remover ramos">Remover ramos<a class="anchor-link" href="#Remover ramos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 221" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A ideia de uma branch √© abri-la para desenvolver uma nova funcionalidade ou caracter√≠stica de maneira que n√£o afete o resto da equipe de desenvolvimento. Portanto, quando isso for alcan√ßado, ela √© mesclada com a branch principal. Assim, ap√≥s a fus√£o, j√° n√£o faz sentido manter a branch, ent√£o ela deve ser exclu√≠da, mas isso ser√° feito de uma maneira diferente se a branch foi ou n√£o mesclada com a principal.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Excluir branches mescladas (git branch -d &#x3C;branch&#x3E;)">Excluir branches mescladas (<code>git branch -d &#x3C;branch&#x3E;</code>)<a class="anchor-link" href="#Excluir branches mescladas (git branch -d &#x3C;branch&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 222" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para eliminar uma ramifica√ß√£o que j√° foi mesclada com a principal, basta fazer <code>git branch -d &#x3C;rama&#x3E;</code> ou <code>git branch --delete &#x3C;rama&#x3E;</code>. Vamos eliminar a √∫ltima ramifica√ß√£o que criamos e mesclamos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">d</span> <span class="n">rama_con_conflicto</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Eliminada la rama rama_con_conflicto (era 32851c3).',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se agora listarmos todas as branches, podemos ver que j√° n√£o teremos <code>rama_con_conflicto</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x20;&#x20;branch_fast_forward',
          '&#x20;&#x20;branch_no_fast_forward',
          '&#x20;&#x20;branch_squash',
          '* main',
          '&#x20;&#x20;new_branch',
          '&#x20;&#x20;new_branch2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Excluir branches que n√£o foram mesclados com a branch principal (git branch -D &#x3C;branch&#x3E;)">Excluir branches que n√£o foram mesclados com a branch principal (<code>git branch -D &#x3C;branch&#x3E;</code>)<a class="anchor-link" href="#Excluir branches que n√£o foram mesclados com a branch principal (git branch -D &#x3C;branch&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 223" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se tentarmos fazer o mesmo que antes com uma branch que nunca foi mesclada com outra, obteremos um erro</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a criar uma nova branch, vamos fazer um commit e n√£o vamos mescl√°-la.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="n">branch_sin_fusion</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">branch_sin_fusion</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;branch_sin_fusion&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">file4</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">file4</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;file4&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[branch_sin_fusion 9506b0a] file4',
          '1 file changed, 0 insertions(+), 0 deletions(-)',
          'create mode 100644 file4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;main&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Com tudo o que aprendemos at√© agora, podemos ver que o que fizemos foi criar uma nova branch, mudar para ela, criar um novo arquivo, fazer um commit e voltar para a branch <code>main</code>. Agora vamos tentar deletar essa nova branch.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">d</span> <span class="n">branch_sin_fusion</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'error: La rama &#x27;branch_sin_fusion&#x27; no ha sido fusionada completamente.',
          'Si est√°s seguro de querer borrarla, ejecuta &#x27;git branch -D branch_sin_fusion&#x27;.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, nos diz que <code>branch_sem_fusao</code> n√£o foi mesclada e, portanto, n√£o foi exclu√≠da. Se temos certeza de querer exclu√≠-la, precisamos fazer <code>git branch -D branch_sem_fusao</code>, ent√£o o fazemos para exclu√≠-la.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">D</span> <span class="n">branch_sin_fusion</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Eliminada la rama branch_sin_fusion (era 9506b0a).',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora sim, foi removido.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Trabalhando com repositorios remotos">Trabalhando com reposit√≥rios remotos<a class="anchor-link" href="#Trabalhando com repositorios remotos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 224" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Quando desenvolvemos software, geralmente n√£o o fazemos sozinhos, mas trabalhamos em equipe. Por isso, n√£o faz sentido ter um reposit√≥rio local do Git; √© melhor ter um reposit√≥rio remoto com o qual todos possam trabalhar e compartilhar os avan√ßos.</p>
      <blockquote>
      <p>Nota: O objetivo deste post √© explicar git. Para a conex√£o com reposit√≥rios remotos vou explic√°-lo usando o GitHub, pois √© o servi√ßo de hospedagem de reposit√≥rios git mais utilizado, mas n√£o vou aprofundar no GitHub.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Clonar um reposit√≥rio remoto (git clone &#x3C;reposit√≥rio&#x3E;)">Clonar um reposit√≥rio remoto (<code>git clone &#x3C;reposit√≥rio&#x3E;</code>)<a class="anchor-link" href="#Clonar um reposit√≥rio remoto (git clone &#x3C;reposit√≥rio&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 225" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se come√ßarmos a trabalhar em um reposit√≥rio que j√° foi criado, o primeiro passo √© clon√°-lo. Para isso, usamos <code>git clone &#x3C;repositorio&#x3E;</code>, onde <code>&#x3C;repositorio&#x3E;</code> pode ser uma URL ou um endere√ßo SSH. Como atualmente os grandes modelos de linguagem e o ChatGPT est√£o muito em voga, vamos clonar um reposit√≥rio opensource criado pela comunidade, <a href="https://github.com/LAION-AI/Open-Assistant" target="_blank" rel="nofollow noreferrer">Open-Assistant</a>, para isso faremos <code>git clone https://github.com/LAION-AI/Open-Assistant</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">LAION</span><span class="o">-</span><span class="n">AI</span><span class="o">/</span><span class="n">Open</span><span class="o">-</span><span class="n">Assistant</span><span class="o">.</span><span class="n">git</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Clonando en &#x27;Open-Assistant&#x27;...',
          'remote: Enumerating objects: 29769, done.',
          'remote: Counting objects: 100% (673/673), done.',
          'remote: Compressing objects: 100% (310/310), done.',
          'remote: Total 29769 (delta 398), reused 577 (delta 354), pack-reused 29096',
          'Recibiendo objetos: 100% (29769/29769), 33.61 MiB | 29.29 MiB/s, listo.',
          'Resolviendo deltas: 100% (19967/19967), listo.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Isso cria a pasta <code>Open-Assistant</code> com todo o c√≥digo do reposit√≥rio, podemos entrar dentro e ver todo o c√≥digo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">Open</span><span class="o">-</span><span class="n">Assistant</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'ansible		 deploy		      model	      safety',
          'assets		 discord-bots	      notebooks       scripts',
          'backend		 docker		      oasst-data      setup.cfg',
          'CODEOWNERS	 docker-compose.yaml  oasst-shared    text-frontend',
          'CONTRIBUTING.md  docs		      pyproject.toml  website',
          'copilot		 inference	      README.md',
          'data		 LICENSE	      redis.conf',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Excluo a pasta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">rm</span> <span class="o">-</span><span class="n">r</span> <span class="n">Open</span><span class="o">-</span><span class="n">Assistant</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Vincular um repositorio local a um remoto">Vincular um reposit√≥rio local a um remoto<a class="anchor-link" href="#Vincular um repositorio local a um remoto"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 226" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se ocorrer o contr√°rio, se primeiro come√ßarmos a desenvolver localmente e depois quisermos sincroniz√°-lo com um reposit√≥rio remoto, temos que fazer o seguinte</p>
      <ul>
        <li>Primeiro crie um reposit√≥rio remoto vazio, no meu caso criei o reposit√≥rio <code>notebook_git</code> no GitHub que deletarei mais tarde</li>
        <li>Obter a URL do reposit√≥rio ou endere√ßo SSH</li>
        <li>Sincroniz√°-los atrav√©s de <code>git remote add origin &lt;URL&gt;</code></li>
      </ul>
      <p>O reposit√≥rio vazio que criei no GitHub parece assim</p>
      <p>!<a href="https://images.maximofn.com/notebook_git_repo.webp" target="_blank" rel="nofollow noreferrer">notebook git repo</a></p>
      <p>No meu caso, vou usar o endere√ßo SSH que √© <code>git@github.com:maximofn/notebook_git.git</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">remote</span> <span class="n">add</span> <span class="n">origin</span> <span class="n">git</span><span class="nd">@github</span><span class="o">.</span><span class="n">com</span><span class="p">:</span><span class="n">maximofn</span><span class="o">/</span><span class="n">notebook_git</span><span class="o">.</span><span class="n">git</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>J√° est√£o vinculados, mas para garantir podemos fazer <code>git remote -v</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">remote</span> <span class="o">-</span><span class="n">v</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'origin	git@github.com:maximofn/notebook_git.git (fetch)',
          'origin	git@github.com:maximofn/notebook_git.git (push)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Enviar as altera√ß√µes de um reposit√≥rio local para um reposit√≥rio remoto (git push)">Enviar as altera√ß√µes de um reposit√≥rio local para um reposit√≥rio remoto (<code>git push</code>)<a class="anchor-link" href="#Enviar as altera√ß√µes de um reposit√≥rio local para um reposit√≥rio remoto (git push)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 227" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como dissem, eles est√£o vinculados, mas se eu for ao meu reposit√≥rio no GitHub, ainda parece assim</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/notebook_git_repo.webp" alt="notebook git repo">
      <p>Est√£o vinculados o reposit√≥rio local e o remoto, mas agora √© necess√°rio enviar todas as altera√ß√µes do reposit√≥rio local para o remoto. Para isso, seria necess√°rio usar <code>git push origin &#x3C;rama local&#x3E;:&#x3C;rama remota&#x3E;</code>, ou seja, como nossa ramo principal se chama <code>main</code> e a ramo principal no GitHub se chama <code>main</code>, seria necess√°rio fazer <code>git push origin main:main</code>.</p>
      <p>Se voc√™ se lembra, o Git por padr√£o chamava a branch principal de <code>master</code>, mas o GitHub chama por padr√£o a branch principal de <code>main</code>. Portanto, se cada pessoa nomear suas branches no reposit√≥rio local de maneira diferente, √© necess√°rio especificar qual branch local escreve em qual branch remota.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pode configurar a conex√£o padr√£o entre branches no git, para isso √© necess√°rio fazer <code>git push --set-upstream origin main</code>. Isso estabelece uma rela√ß√£o entre a branch local <code>main</code> e a branch remota <code>main</code>. Uma vez feita essa rela√ß√£o, basta fazer <code>git push</code> para enviar as altera√ß√µes feitas localmente para o servidor remoto.</p>
      <p>Ent√£o estabelecemos a conex√£o entre as branches.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">push</span> <span class="o">--</span><span class="nb">set</span><span class="o">-</span><span class="n">upstream</span> <span class="n">origin</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Enumerando objetos: 51, listo.',
          'Contando objetos: 100% (51/51), listo.',
          'Compresi√≥n delta usando hasta 12 hilos',
          'Comprimiendo objetos: 100% (38/38), listo.',
          'Escribiendo objetos: 100% (51/51), 4.21 KiB | 2.11 MiB/s, listo.',
          'Total 51 (delta 18), reusado 0 (delta 0)',
          'remote: Resolving deltas: 100% (18/18), done.',
          'To github.com:maximofn/notebook_git.git',
          '* [new branch]      main -&amp;gt; main',
          'Rama &#x27;main&#x27; configurada para hacer seguimiento a la rama remota &#x27;main&#x27; de &#x27;origin&#x27;.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora podemos fazer apenas <code>git push</code> para enviar as altera√ß√µes locais ao reposit√≥rio remoto.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">push</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Everything up-to-date',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se agora voltarmos ao nosso reposit√≥rio do GitHub, ele parece assim</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/notebook_git_repo_push.webp" alt="notebook git repo push">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se fizermos um <code>ls</code> no nosso reposit√≥rio local, poderemos ver que os arquivos que temos no reposit√≥rio remoto tamb√©m est√£o presentes no reposit√≥rio local, ou seja, sincronizamos o reposit√≥rio local e remoto.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">-</span><span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '.  ..  api_keys.py  archivo1.py  archivo2.py  archivo8.py  .git  .gitignore',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Os √∫nicos que n√£o est√£o no reposit√≥rio remoto s√£o <code>api_keys.py</code>, que √© o que adicionamos ao arquivo <code>.gitignore</code>, ou seja, o que dissemos ao git para n√£o seguir. E <code>.git</code> que √© onde est√° a configura√ß√£o do nosso reposit√≥rio local e que n√£o deve ser enviado ao reposit√≥rio remoto, porque cada pessoa ter√° sua pr√≥pria configura√ß√£o de git e, portanto, n√£o deve ser sincronizada.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Baixar as altera√ß√µes de um reposit√≥rio remoto para um reposit√≥rio local (git pull)">Baixar as altera√ß√µes de um reposit√≥rio remoto para um reposit√≥rio local (<code>git pull</code>)<a class="anchor-link" href="#Baixar as altera√ß√µes de um reposit√≥rio remoto para um reposit√≥rio local (git pull)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 228" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora vamos a fazer ao contr√°rio, vamos baixar as novas altera√ß√µes que tenham sido feitas no reposit√≥rio remoto. Se observarmos como est√° o reposit√≥rio remoto, poderemos ver que h√° um bot√£o que diz <code>Add a README</code>, ent√£o clicamos para adicion√°-lo.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/notebook_git_repo_push.webp" alt="notebook git repo push">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ao clicar, ser√° aberto um editor, deixamos o que o GitHub colocou e salvamos as altera√ß√µes clicando no bot√£o de <code>Commit changes...</code></p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/notebook_git_repo_readme.webp" alt="noteboot git repo readme">
      <p>Nos sair√° uma janela na qual nos ser√° pedido uma mensagem de commit, deixamos a que vem por padr√£o e clicamos em <code>Commit changes</code></p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/notebook_git_repo_commit_message.webp" alt="notebook git repo commit message">
      <p>Ao fazer isso, o reposit√≥rio ficar√° assim</p>
      <p>!<a href="https://images.maximofn.com/notebook_git_repo_pull.webp" target="_blank" rel="nofollow noreferrer">notebook git repo pull</a></p>
      <p>Foi criado um novo arquivo chamado <code>README.md</code>, mas se fizermos <code>ls</code> no reposit√≥rio local, n√£o o encontraremos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">README</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ent√£o, temos que trazer as altera√ß√µes do reposit√≥rio remoto para o local. Para isso, precisamos fazer <code>git pull origin &#x3C;rama remota&#x3E;</code> para informar ao Git sobre qual ramo remoto vamos trazer os dados. Da mesma forma que antes, podemos estabelecer uma rela√ß√£o entre o ramo remoto e o ramo local da seguinte maneira: <code>git branch --set-upstream-to=origin/&#x3C;rama local&#x3E; &#x3C;rama remota&#x3E;</code>. Como nossa rama local se chama <code>main</code> e a rama remota do GitHub tamb√©m se chama <code>main</code>, ter√≠amos que alterar o anterior para <code>git branch --set-upstream-to=origin/main main</code>.</p>
      <p>Uma vez feito isso, para baixar as novas altera√ß√µes do reposit√≥rio remoto para o local, basta fazer <code>git pull</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a estabelecer a rela√ß√£o entre as branches com <code>git branch --set-upstream-to=origin/main main</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="nb">set</span><span class="o">-</span><span class="n">upstream</span><span class="o">-</span><span class="n">to</span><span class="o">=</span><span class="n">origin</span><span class="o">/</span><span class="n">main</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Rama &#x27;main&#x27; configurada para hacer seguimiento a la rama remota &#x27;main&#x27; de &#x27;origin&#x27;.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora podemos trazer as altera√ß√µes do reposit√≥rio remoto para o reposit√≥rio local com <code>git pull</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">pull</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'remote: Enumerating objects: 4, done.',
          'remote: Counting objects: 100% (4/4), done.',
          'remote: Compressing objects: 100% (2/2), done.',
          'remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0',
          'Desempaquetando objetos: 100% (3/3), 646 bytes | 646.00 KiB/s, listo.',
          'Desde github.com:maximofn/notebook_git',
          '&#x20;&#x20;&#x20;679bb49..527e07a  main       -&amp;gt; origin/main',
          'Actualizando 679bb49..527e07a',
          'Fast-forward',
          'README.md | 1 +',
          '1 file changed, 1 insertion(+)',
          'create mode 100644 README.md',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, diz que foi adicionado <code>README.md</code>, verificamos isso fazendo <code>ls</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">README</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'README.md',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Temos o arquivo localmente</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Sincronizar as branches remotas e locais">Sincronizar as branches remotas e locais<a class="anchor-link" href="#Sincronizar as branches remotas e locais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 229" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vimos, tivemos que sincronizar as branches remotas e locais para poder fazer o upload e download dos dados. No entanto, se primeiro criarmos o reposit√≥rio no GitHub e depois o clonarmos, n√£o ser√° mais necess√°rio essa sincroniza√ß√£o.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Alias">Alias<a class="anchor-link" href="#Alias"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 230" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Cada vez que quisemos fazer um log temos usado este comando <code>git log --graph --oneline --decorate</code>, no entanto lembrar-se deste comando √© bastante complicado, na verdade eu n√£o me lembro dele, toda vez que quero us√°-lo tenho que procur√°-lo porque n√£o o lembro, por isso seria muito bom ter uma maneira de abrevi√°-lo.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para isso, o git oferece os <code>alias</code>, de forma que voc√™ pode criar aliases dos comandos que desejar. Para fazer isso, voc√™ precisa executar <code>git config --global alias.&#x3C;nome do alias&#x3E; &quot;comando&quot;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Portanto, vamos chamar <code>git tree</code> ao comando <code>git log --graph --oneline --decorate</code>, pois nos permite ver o hist√≥rico, com a bifurca√ß√£o e fus√£o de branches como se fosse o crescimento de uma √°rvore, ent√£o fazemos <code>git config --global alias.tree &quot;log --graph --oneline --decorate&quot;</code></p>
      <blockquote>
      <p>**Importante**: N√£o se deve colocar a palavra <code>git</code> dentro do comando</p>
      </blockquote>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">alias</span><span class="o">.</span><span class="n">tree</span> <span class="s2">&quot;log --graph --oneline --decorate&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se agora formos ao nosso reposit√≥rio e fizermos <code>git tree</code>, veremos o hist√≥rico como faz√≠amos antes.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tree</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 527e07a (HEAD -&amp;gt; main, origin/main) Create README.md',
          '*   679bb49 archivo1.py con el merge resuelto',
          '|\\',
          '| * 32851c3 archivo1.py en rama rama_con_conflicto',
          '* | 53f909b archivo1.py en rama main',
          '|/',
          '* 52acb97 Merge squash de los commits de la rama branch_squash',
          '*   274529c Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, foi criado nosso alias</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Alias de comandos existentes de git">Alias de comandos existentes de git<a class="anchor-link" href="#Alias de comandos existentes de git"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 231" src={svg_paths.link_svg_path}/></a></h3>
      <p>(No se ha proporcionado texto adicional para traducir, por lo que esta es la traducci√≥n del t√≠tulo solo.)</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>√â poss√≠vel criar aliases para comandos que j√° existem no git, na verdade, √© uma pr√°tica muito usada, especialmente para abreviar, ent√£o vamos fazer um. Vamos criar um alias para o comando <code>git status</code> e renome√°-lo como <code>git st</code> da seguinte maneira: <code>git config --global alias.st &quot;status&quot;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">alias</span><span class="o">.</span><span class="n">st</span> <span class="s2">&quot;status&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos test√°-lo agora.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">st</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama main',
          'Tu rama est√° actualizada con &#x27;origin/main&#x27;.',
          'nada para hacer commit, el √°rbol de trabajo est√° limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>J√° temos o comando <code>git status</code> simplificado para <code>git st</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Alias de comandos que nao sao do git">Alias de comandos que n√£o s√£o do git<a class="anchor-link" href="#Alias de comandos que nao sao do git"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 232" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos criar aliases de comandos que n√£o sejam do git, por exemplo, porque achamos que o git precisa desse novo comando, faz-se da mesma forma com a exce√ß√£o de que o comando deve ser precedido de <code>!</code>, ou seja, seria <code>git config --global alias.&#x3C;nome do alias&#x3E; &quot;!comando&quot;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Quando vimos os conflitos, vimos que o git nos dizia onde estavam, mas para resolv√™-los temos que editar o c√≥digo n√≥s mesmos, por isso podemos criar um alias do git de maneira que possamos abrir um arquivo com o editor de textos que quisermos, no meu caso vou criar um alias que me abrir√° os arquivos com <code>vscode</code> para isso tenho que fazer <code>git config --global alias.code &quot;!code&quot;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">alias</span><span class="o">.</span><span class="n">code</span> <span class="s2">&quot;!code&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>O testamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">code</span> <span class="n">README</span><span class="o">.</span><span class="n">md</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Depois de fazer isso, o <code>README.md</code> foi aberto no <code>vscode</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Lista com todos os aliases">Lista com todos os aliases<a class="anchor-link" href="#Lista com todos os aliases"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 233" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Caso n√£o nos lembremos dos aliases que criamos, podemos ver a configura√ß√£o global do git, mas como isso pode ser um pouco avassalador porque nos d√° muita informa√ß√£o, podemos filtrar para que nos mostre apenas os aliases que criamos, para isso usamos <code>git config --get-regexp ^alias\.</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">get</span><span class="o">-</span><span class="n">regexp</span> <span class="o">^</span><span class="n">alias</span>\<span class="o">.</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'alias.tree log --graph --oneline --decorate',
          'alias.st status',
          'alias.code !code',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtemos os aliases que n√≥s criamos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mas ainda, podemos criar um alias para obter os aliases, para isso fazemos <code>git config --global alias.alias &quot;config --get-regexp ^alias\.&quot;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">alias</span><span class="o">.</span><span class="n">alias</span> <span class="s2">&quot;config --get-regexp ^alias\.&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se agora fizermos <code>git alias</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">git</span> <span class="n">alias</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'alias.tree log --graph --oneline --decorate',
          'alias.st status',
          'alias.code !code',
          'alias.alias config --get-regexp ^alias\.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtemos a lista com todos os nossos alias</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Armazenamento tempor√°rio (git stash)">Armazenamento tempor√°rio (<code>git stash</code>)<a class="anchor-link" href="#Armazenamento tempor√°rio (git stash)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 234" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suponhamos que estamos trabalhando em um branch, temos v√°rios arquivos modificados, n√£o fizemos commit, e por algum motivo temos que passar para outro branch. Por exemplo, estamos em um branch desenvolvendo uma nova funcionalidade, e temos que deix√°-la pela metade porque h√° um bug cr√≠tico no branch main</p>
      <p>Uma solu√ß√£o seria fazer um commit para salvar as altera√ß√µes e voltar mais tarde. Mas talvez tenhamos deixado o c√≥digo pela metade e n√£o queremos fazer um commit. Ent√£o, para isso, foi inventado o stash, que √© como um armaz√©m, onde voc√™ deixa seu c√≥digo armazenado para poder recuper√°-lo posteriormente.</p>
      <p>√â uma pilha, isso significa que o √∫ltimo a entrar √© o primeiro a sair.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver como fazer isso, em primeiro lugar criamos uma nova branch que vamos chamar de <code>new_feature</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">branch</span> <span class="n">new_feature</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Mudamos para ela</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">new_feature</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;new_feature&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a modificar <code>arquivo2.py</code> e <code>arquivo8.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;new_feature&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo2</span><span class="o">.</span><span class="n">py</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">echo</span> <span class="s2">&quot;print(&#39;new_feature&#39;)&quot;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">archivo8</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um <code>git status</code> para verificar que tenham sido modificados.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'Cambios no rastreados para el commit:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para actualizar lo que ser√° confirmado)',
          '&#x20;&#x20;(usa &quot;git restore &amp;lt;archivo&amp;gt;...&quot; para descartar los cambios en el directorio de trabajo)',
          'modificados:     archivo2.py',
          'modificados:     archivo8.py',
          'sin cambios agregados al commit (usa &quot;git add&quot; y/o &quot;git commit -a&quot;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a adicionar <code>arquivo8.py</code> √† √°rea de <code>staged</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">add</span> <span class="n">archivo8</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos novamente um <code>git status</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del √°rea de stage)',
          'modificados:     archivo8.py',
          'Cambios no rastreados para el commit:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para actualizar lo que ser√° confirmado)',
          '&#x20;&#x20;(usa &quot;git restore &amp;lt;archivo&amp;gt;...&quot; para descartar los cambios en el directorio de trabajo)',
          'modificados:     archivo2.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos temos dois arquivos modificados, dos quais um deles tamb√©m est√° na √°rea de <code>staged</code>. Se agora tiv√©ssemos que mudar de branch, para n√£o perder as altera√ß√µes poder√≠amos fazer um commit, ou guard√°-las no reposit√≥rio <code>stash</code>, ent√£o vamos fazer isso √∫ltimo atrav√©s de <code>git stash</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Directorio de trabajo y estado de √≠ndice WIP on new_feature: 527e07a Create README.md guardados',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se agora voltarmos a fazer <code>git status</code>, vejamos o que acontece</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'nada para hacer commit, el √°rbol de trabajo est√° limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Os arquivos com modifica√ß√µes n√£o aparecem mais, √© como se tiv√©ssemos feito um commit</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>**Importante**: Os arquivos criados novos, que nunca foram rastreados pelo Git, n√£o ser√£o enviados para o reposit√≥rio, portanto, com os arquivos novos √© necess√°rio, pelo menos, fazer primeiro um <code>git add</code></p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se eu criar um novo arquivo e tentar envi√°-lo para o reposit√≥rio, receberei um erro.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">touch</span> <span class="n">archivo9</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se ser√° confirmado)',
          'archivo9.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'No hay cambios locales para guardar',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se ser√° confirmado)',
          'archivo9.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos <code>arquivo9.py</code> n√£o foi salvo no reposit√≥rio, portanto seria necess√°rio adicion√°-lo com <code>git add</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">rm</span> <span class="n">archivo9</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Tudo para o stash (git stash -u -a)">Tudo para o stash (<code>git stash -u -a</code>)<a class="anchor-link" href="#Tudo para o stash (git stash -u -a)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 235" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vimos, apenas s√£o enviados ao reposit√≥rio os arquivos que o git est√° rastreando. Se tivermos novos arquivos criados ou arquivos ignorados, eles n√£o ser√£o enviados. Para resolver isso, podemos usar as op√ß√µes <code>-u</code> ou <code>--include-untracked</code> para enviar os novos arquivos que ainda n√£o est√£o sendo rastreados pelo git, e a op√ß√£o <code>-a</code> ou <code>--all</code> para incluir tudo, inclusive os arquivos ignorados.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Lista de dep√≥sitos (git stash list)">Lista de dep√≥sitos (<code>git stash list</code>)<a class="anchor-link" href="#Lista de dep√≥sitos (git stash list)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 236" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como comentamos, o armazenamento atua como uma pilha, portanto, se fizermos uso desse armazenamento muitas vezes, na verdade teremos uma lista de armazenamentos, e para ver os que temos armazenados podemos usar <code>git stash list</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span> <span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'stash@&#x7B;0&#x7D;: WIP on new_feature: 527e07a Create README.md',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos s√≥ temos uma, que nos indica a branch (<code>on new_feature</code>), o √∫ltimo commit (<code>Create README.md</code>) e um identificador (<code>527e07a</code>)</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Armazenamento com descri√ß√£o (git stash push -m &#x3C;descri√ß√£o&#x3E;)">Armazenamento com descri√ß√£o (<code>git stash push -m &#x3C;descri√ß√£o&#x3E;</code>)<a class="anchor-link" href="#Armazenamento com descri√ß√£o (git stash push -m &#x3C;descri√ß√£o&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 237" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vimos, a lista retorna o branch e o √∫ltimo commit, mas esta informa√ß√£o s√≥ serve para saber de onde come√ßamos a modificar antes de salvar no hist√≥rico. Al√©m disso, ela retorna um identificador que n√£o nos diz muito, ent√£o podemos adicionar uma primeira descri√ß√£o ao stash com <code>git stash push -m &#x3C;descri√ß√£o&#x3E;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro fazemos um <code>git status</code> para ver o que temos sem commitear</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'Archivos sin seguimiento:',
          '&#x20;&#x20;(usa &quot;git add &amp;lt;archivo&amp;gt;...&quot; para incluirlo a lo que se ser√° confirmado)',
          'archivo9.py',
          'no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa &quot;git add&quot; para hacerles seguimiento)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Temos <code>arquivo9.py</code>, mas lembremos que ele nunca foi rastreado pelo git, portanto para inclu√≠-lo em um stash temos que usar a flag <code>-u</code> ou a flag <code>-a</code>, de modo que criamos um novo stash com uma descri√ß√£o com o comando <code>git stash push -u -m &#x3C;descri√ß√£o&#x3E;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span> <span class="n">push</span> <span class="o">-</span><span class="n">u</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;archivo9.py&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Directorio de trabajo y estado de √≠ndice On new_feature: archivo9.py guardados',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Sacamos a lista do stash</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span> <span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'stash@&#x7B;0&#x7D;: On new_feature: archivo9.py',
          'stash@&#x7B;1&#x7D;: WIP on new_feature: 527e07a Create README.md',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>J√° aparece o novo de maneira muito mais clara</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Recuperar o √∫ltimo stash (git stash pop)">Recuperar o √∫ltimo stash (<code>git stash pop</code>)<a class="anchor-link" href="#Recuperar o √∫ltimo stash (git stash pop)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 238" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como dissem, o stash √© uma pilha com armazenamentos, portanto, na hora de recuper√°-los faremos da mesma forma que uma pilha, sempre recuperando o √∫ltimo.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/git-stash-push-pop.webp" alt="git stash push pop">
      <p>Para recuperar o √∫ltimo stash temos que fazer <code>git stash pop</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro fazemos um <code>git status</code> para ver que n√£o tenhamos nenhum mudan√ßa pendente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'nada para hacer commit, el √°rbol de trabajo est√° limpio',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora recuperamos o √∫ltimo stash</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span> <span class="n">pop</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del √°rea de stage)',
          'nuevos archivos: archivo9.py',
          'Descartado refs/stash@&#x7B;0&#x7D; (0246b0e922f654e7fc68cfeaf26e24fc511feb37)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se voltarmos a fazer <code>git status</code>, veremos que temos novamente <code>arquivo9.py</code> pendente de fazer um commit.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del √°rea de stage)',
          'nuevos archivos: archivo9.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>E se verificarmos a lista de stash, veremos que agora s√≥ temos um.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span> <span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'stash@&#x7B;0&#x7D;: WIP on new_feature: 527e07a Create README.md',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Remover um stash (git stash drop &#x3C;posi√ß√£o&#x3E;)">Remover um stash (<code>git stash drop &#x3C;posi√ß√£o&#x3E;</code>)<a class="anchor-link" href="#Remover um stash (git stash drop &#x3C;posi√ß√£o&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 239" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos remover um stash, temos que fazer <code>git stash drop &#x3C;posi√ß√£o&#x3E;</code>, onde <code>&#x3C;posi√ß√£o&#x3E;</code> √© a posi√ß√£o que o stash ocupa na lista.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Obtemos a lista dos stash</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span> <span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'stash@&#x7B;0&#x7D;: WIP on new_feature: 527e07a Create README.md',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>No nosso caso, temos apenas um e na posi√ß√£o 0 (<code>stash@&#123;0&#125;</code>), ent√£o para remov√™-lo ter√≠amos que fazer <code>git stash drop 0</code>, mas n√£o vou fazer isso porque vou remov√™-lo agora com outro comando.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Remover todos os stashes (git stash clear)">Remover todos os stashes (<code>git stash clear</code>)<a class="anchor-link" href="#Remover todos os stashes (git stash clear)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 240" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos esvaziar a lista inteira do stash, temos que fazer <code>git stash clear</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span> <span class="n">clear</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se agora solicitarmos a lista de stash</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">stash</span> <span class="nb">list</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>N√£o obtemos nada porque removemos tudo.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos deixar tudo como estava, fazemos um <code>git status</code> para lembrar das mudan√ßas que t√≠nhamos pendentes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la rama new_feature',
          'Cambios a ser confirmados:',
          '&#x20;&#x20;(usa &quot;git restore --staged &amp;lt;archivo&amp;gt;...&quot; para sacar del √°rea de stage)',
          'nuevos archivos: archivo9.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que estamos no ramo <code>new_feature</code> e que temos <code>archivo9.py</code> pendente de fazer um commit. Como o criamos para o exemplo, o exclu√≠mos e voltamos ao ramo principal.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="n">archivo9</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">rm</span> <span class="n">archivo9</span><span class="o">.</span><span class="n">py</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">switch</span> <span class="n">main</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Cambiado a rama &#x27;main&#x27;',
          'Tu rama est√° actualizada con &#x27;origin/main&#x27;.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Tags">Tags<a class="anchor-link" href="#Tags"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 241" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Quando estamos desenvolvendo c√≥digo, chegam momentos em que geramos vers√µes, por exemplo a <code>v1.1</code>, <code>v1.2</code>, etc. Para ter isso mais controlado, o git nos fornece os tags.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Criar uma nova tag (git tag -a &#x3C;nome_da_tag&#x3E; -m &quot;&#x3C;mensagem&#x3E;&quot;)">Criar uma nova tag (<code>git tag -a &#x3C;nome_da_tag&#x3E; -m &quot;&#x3C;mensagem&#x3E;&quot;</code>)<a class="anchor-link" href="#Criar uma nova tag (git tag -a &#x3C;nome_da_tag&#x3E; -m &quot;&#x3C;mensagem&#x3E;&quot;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 242" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para criar uma tag temos que fazer <code>git tag -a &#x3C;nome_da_tag&#x3E; -m &quot;&#x3C;mensagem&#x3E;&quot;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por exemplo, vamos criar um tag na vers√£o atual do reposit√≥rio, para isso farei <code>git tag -a v_tag -m &quot;Tag com o reposit√≥rio na parte final, onde explicamos os tags&quot;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tag</span> <span class="o">-</span><span class="n">a</span> <span class="n">v_tag</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Tag con el repositorio en la parte final, en la que explicamos los tags&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Lista de tags (git tag)">Lista de tags (<code>git tag</code>)<a class="anchor-link" href="#Lista de tags (git tag)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 243" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para ver os tags que criamos podemos fazer <code>git tag</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tag</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'v_tag',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Criar uma tag a partir de um commit antigo (git tag -a &#x3C;nome_da_tag&#x3E; -m &quot;&#x3C;mensagem&#x3E;&quot; &#x3C;hash&#x3E;)">Criar uma tag a partir de um commit antigo (<code>git tag -a &#x3C;nome_da_tag&#x3E; -m &quot;&#x3C;mensagem&#x3E;&quot; &#x3C;hash&#x3E;</code>)<a class="anchor-link" href="#Criar uma tag a partir de um commit antigo (git tag -a &#x3C;nome_da_tag&#x3E; -m &quot;&#x3C;mensagem&#x3E;&quot; &#x3C;hash&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 244" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos fazer um <code>git tree</code> para ver o hist√≥rico</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tree</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 527e07a (HEAD -&amp;gt; main, tag: v_tag, origin/main, new_feature) Create README.md',
          '*   679bb49 archivo1.py con el merge resuelto',
          '|\\',
          '| * 32851c3 archivo1.py en rama rama_con_conflicto',
          '* | 53f909b archivo1.py en rama main',
          '|/',
          '* 52acb97 Merge squash de los commits de la rama branch_squash',
          '*   274529c Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Embora n√£o esteja na descri√ß√£o, quando fizemos o commit <code>4bb9d75</code> foi quando terminamos a parte de controle de vers√µes localmente, por isso tamb√©m seria bom ter um tag desse momento. Para isso, precisamos criar uma tag adicionando o hash daquele momento.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tag</span> <span class="o">-</span><span class="n">a</span> <span class="n">v_local</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;Tag con el repositorio en la parte de control de versiones de manera local&quot;</span> <span class="mi">4</span><span class="n">bb9d75</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se agora fizermos um listagem dos tags, aparece o novo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tag</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'v_local',
          'v_tag',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>E se vemos o hist√≥rico de commits</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tree</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 527e07a (HEAD -&amp;gt; main, tag: v_tag, origin/main, new_feature) Create README.md',
          '*   679bb49 archivo1.py con el merge resuelto',
          '|\\',
          '| * 32851c3 archivo1.py en rama rama_con_conflicto',
          '* | 53f909b archivo1.py en rama main',
          '|/',
          '* 52acb97 Merge squash de los commits de la rama branch_squash',
          '*   274529c Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (tag: v_local, new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>No ponto do hist√≥rico onde criamos a tag, agora aparece a tag que criamos <code>* 4bb9d75 (tag: v_local, new_branch) Commit com o arquivo 7</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Mudar entre tags (git reset --hard &#x3C;tag&#x3E; ou git reset --soft &#x3C;tag&#x3E;)">Mudar entre tags (<code>git reset --hard &#x3C;tag&#x3E;</code> ou <code>git reset --soft &#x3C;tag&#x3E;</code>)<a class="anchor-link" href="#Mudar entre tags (git reset --hard &#x3C;tag&#x3E; ou git reset --soft &#x3C;tag&#x3E;)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 245" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Assim como podemos nos mover entre diferentes commits do hist√≥rico, tamb√©m podemos nos mover entre tags. Isso tem a vantagem de podermos nos mover para outro momento do hist√≥rico sem precisar saber o hash, basta conhecer o nome da tag que colocamos naquele momento para nos movermos simplesmente fazendo <code>git reset --hard &#x3C;tag&#x3E;</code> ou <code>git reset --soft &#x3C;tag&#x3E;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro vamos fazer um <code>ls</code> para ver os arquivos que temos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'api_keys.py  archivo1.py  archivo2.py  archivo8.py  README.md',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um <code>git tree</code> tamb√©m para ver em que momento do hist√≥rico estamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tree</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 527e07a (HEAD -&amp;gt; main, tag: v_tag, origin/main, new_feature) Create README.md',
          '*   679bb49 archivo1.py con el merge resuelto',
          '|\\',
          '| * 32851c3 archivo1.py en rama rama_con_conflicto',
          '* | 53f909b archivo1.py en rama main',
          '|/',
          '* 52acb97 Merge squash de los commits de la rama branch_squash',
          '*   274529c Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (tag: v_local, new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora mudamos para o ponto em que criamos a tag <code>v_local</code> atrav√©s de <code>git reset --hard v_local</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="n">v_local</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'HEAD est√° ahora en 4bb9d75 Commit con el archivo 7',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se agora fizermos um <code>ls</code> vemos que n√£o temos os mesmos arquivos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">ls</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'api_keys.py  archivo1.py  archivo2.py  archivo4.py  archivo7.py  hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se additionally vemos o hist√≥rico, vemos que mudamos de momento do hist√≥rico.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tree</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 4bb9d75 (HEAD -&amp;gt; main, tag: v_local, new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para voltar ao √∫ltimo momento do hist√≥rico, como tamb√©m criamos um tag, basta fazer <code>git reset --hard v_tag</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="n">v_tag</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'HEAD est√° ahora en 527e07a Create README.md',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a ver o hist√≥rico para verificar que retornamos ao √∫ltimo momento do hist√≥rico</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="err">!</span><span class="n">cd</span> <span class="n">notebook_git</span> <span class="o">&amp;</span></span><span class="o">&amp;</span> <span class="n">git</span> <span class="n">tree</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '* 527e07a (HEAD -&amp;gt; main, tag: v_tag, origin/main, new_feature) Create README.md',
          '*   679bb49 archivo1.py con el merge resuelto',
          '|\\',
          '| * 32851c3 archivo1.py en rama rama_con_conflicto',
          '* | 53f909b archivo1.py en rama main',
          '|/',
          '* 52acb97 Merge squash de los commits de la rama branch_squash',
          '*   274529c Merge branch &#x27;branch_no_fast_forward&#x27; into main',
          '|\\',
          '| * 8df3429 (branch_no_fast_forward) file2',
          '| * e4e23c9 file1',
          '* | 8bdf4d8 file3',
          '|/',
          '* 94149fc (branch_fast_forward) Eliminado hola.py',
          '* 4484e70 Eliminado archivo4.py',
          '* 564ccfb (new_branch2) Commit con el archivo 8',
          '* 5168f78 Eliminado archivo7.py',
          '* 4bb9d75 (tag: v_local, new_branch) Commit con el archivo 7',
          '* ea615a9 Eliminado archivo5.py',
          '* e3153a5 Commit con los archivos 4 y 5',
          '* 0b09cfa A√±adido .gitignore',
          '* 04ebd1f Commit con los archivos 1 y 2',
          '* c4930d7 Tercer commit, hola.py',
          '* 6e99e73 Segundo commit, hola.py',
          '* 1c95e4f Primer commit, hola.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>









































    </div>

  </section>

</PostLayout>
