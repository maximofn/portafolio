---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'LangGraph: Revolu√ß√£o em seus agentes de IA';
const end_url = 'uv';
const description = 'üöÄ ¬°Revoluciona tus agentes de IA! üß† LangGraph n√£o √© apenas outra biblioteca, √© o framework de orquestra√ß√£o que te d√° o CONTROLE total para construir agentes complexos, com mem√≥ria a longo prazo e at√© com interven√ß√£o humana! Se livre dos chatbots b√°sicos, √© hora de criar verdadeira intelig√™ncia. ¬°Sum√©rgete em este post e descubra!';
const keywords = 'langgraph, ia, agentes, orquestra√ß√£o, framework, mem√≥ria, humano no loop';
const languaje = 'PT';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/langgraph_thumbnail_es.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1024
    image_height=1024
    image_extension=webp
    article_date=2025-05-19+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Como-funciona-LangGraph?"><h2>Como funciona <code>LangGraph</code>?</h2></a>
      <a class="anchor-link" href="#Instala%C3%A7%C3%A3o-do-LangGraph"><h2>Instala√ß√£o do LangGraph</h2></a>
      <a class="anchor-link" href="#Instala%C3%A7%C3%A3o-do-m%C3%B3dulo-da-Hugging-Face-e-Anthropic"><h2>Instala√ß√£o do m√≥dulo da Hugging Face e Anthropic</h2></a>
      <a class="anchor-link" href="#CHAVE-DE-API-do-Hugging-Face"><h2>CHAVE DE API do Hugging Face</h2></a>
      <a class="anchor-link" href="#CHAVE-DE-API-da-Anthropic"><h2>CHAVE DE API da Anthropic</h2></a>
      <a class="anchor-link" href="#Criar-um-chatbot-b%C3%A1sico"><h2>Criar um chatbot b√°sico</h2></a>
      <a class="anchor-link" href="#Mais"><h3>Mais</h3></a>
      <a class="anchor-link" href="#Tipagem-do-estado"><h4>Tipagem do estado</h4></a>
      <a class="anchor-link" href="#Tipagem-atrav%C3%A9s-de-TypeDict"><h5>Tipagem atrav√©s de <code>TypeDict</code></h5></a>
      <a class="anchor-link" href="#Tipagem-com-dataclass"><h5>Tipagem com <code>dataclass</code></h5></a>
      <a class="anchor-link" href="#Tipagem-com-Pydantic"><h5>Tipagem com <code>Pydantic</code></h5></a>
      <a class="anchor-link" href="#Redutores"><h4>Redutores</h4></a>
      <a class="anchor-link" href="#Redutores-pr%C3%A9-definidos"><h5>Redutores pr√©-definidos</h5></a>
      <a class="anchor-link" href="#Redutores-personalizados"><h5>Redutores personalizados</h5></a>
      <a class="anchor-link" href="#M%C3%BAltiplos-estados"><h4>M√∫ltiplos estados</h4></a>
      <a class="anchor-link" href="#Estados-privados"><h5>Estados privados</h5></a>
      <a class="anchor-link" href="#Estados-de-entrada-e-sa%C3%ADda"><h5>Estados de entrada e sa√≠da</h5></a>
      <a class="anchor-link" href="#Gerenciamento-do-contexto"><h4>Gerenciamento do contexto</h4></a>
      <a class="anchor-link" href="#Modificar-o-contexto-com-fun%C3%A7%C3%B5es-do-tipo-Reducer"><h5>Modificar o contexto com fun√ß√µes do tipo <code>Reducer</code></h5></a>
      <a class="anchor-link" href="#Cortar-mensagens"><h5>Cortar mensagens</h5></a>
      <a class="anchor-link" href="#Modifica%C3%A7%C3%A3o-do-contexto-e-corte-de-mensagens"><h5>Modifica√ß√£o do contexto e corte de mensagens</h5></a>
      <a class="anchor-link" href="#Modos-de-transmiss%C3%A3o"><h4>Modos de transmiss√£o</h4></a>
      <a class="anchor-link" href="#Streaming-s%C3%ADncrono"><h5>Streaming s√≠ncrono</h5></a>
      <a class="anchor-link" href="#Atualiza%C3%A7%C3%B5es"><h6>Atualiza√ß√µes</h6></a>
      <a class="anchor-link" href="#Valores"><h6>Valores</h6></a>
      <a class="anchor-link" href="#Streaming-ass%C3%ADncrono"><h5>Streaming ass√≠ncrono</h5></a>
      <a class="anchor-link" href="#Subgrafos"><h4>Subgrafos</h4></a>
      <a class="anchor-link" href="#Subgr%C3%A1fico-de-an%C3%A1lise-de-erros-em-logs"><h5>Subgr√°fico de an√°lise de erros em logs</h5></a>
      <a class="anchor-link" href="#Subgrafo-de-resumo-de-logs"><h5>Subgrafo de resumo de logs</h5></a>
      <a class="anchor-link" href="#Grafo-principal"><h5>Grafo principal</h5></a>
      <a class="anchor-link" href="#Ramas-din%C3%A2micas"><h4>Ramas din√¢micas</h4></a>
      <a class="anchor-link" href="#Melhorar-o-chatbot-com-ferramentas"><h2>Melhorar o chatbot com ferramentas</h2></a>
      <a class="anchor-link" href="#Requisitos"><h3>Requisitos</h3></a>
      <a class="anchor-link" href="#Chatbot-com-ferramentas"><h3>Chatbot com ferramentas</h3></a>
      <a class="anchor-link" href="#Adicionar-mem%C3%B3ria-ao-chatbot---mem%C3%B3ria-de-curto-prazo,-mem%C3%B3ria-dentro-do-fio"><h2>Adicionar mem√≥ria ao chatbot - mem√≥ria de curto prazo, mem√≥ria dentro do fio</h2></a>
      <a class="anchor-link" href="#Mais"><h3>Mais</h3></a>
      <a class="anchor-link" href="#Chatbot-com-mensagem-de-resumo"><h4>Chatbot com mensagem de resumo</h4></a>
      <a class="anchor-link" href="#Salvar-estado-em-SQlite"><h4>Salvar estado em SQlite</h4></a>
      <a class="anchor-link" href="#Mem%C3%B3ria-de-longo-prazo,-mem%C3%B3ria-entre-threads"><h2>Mem√≥ria de longo prazo, mem√≥ria entre threads</h2></a>
      <a class="anchor-link" href="#Introdu%C3%A7%C3%A3o-ao-LangGraph-Memory-Store"><h3>Introdu√ß√£o ao LangGraph Memory Store</h3></a>
      <a class="anchor-link" href="#Chatbot-com-mem%C3%B3ria-de-longo-prazo"><h3>Chatbot com mem√≥ria de longo prazo</h3></a>
      <a class="anchor-link" href="#Chatbot-com-perfil-de-usu%C3%A1rio"><h3>Chatbot com perfil de usu√°rio</h3></a>
      <a class="anchor-link" href="#Mais"><h3>Mais</h3></a>
      <a class="anchor-link" href="#Atualizar-esquemas-estruturados-com-Trustcall"><h4>Atualizar esquemas estruturados com Trustcall</h4></a>
      <a class="anchor-link" href="#Chatbot-com-perfil-de-usu%C3%A1rio-atualizado-com-Trustcall"><h4>Chatbot com perfil de usu√°rio atualizado com Trustcall</h4></a>
      <a class="anchor-link" href="#Chatbot-com-cole%C3%A7%C3%B5es-de-documentos-de-usu%C3%A1rio-atualizadas-com-Trustcall"><h4>Chatbot com cole√ß√µes de documentos de usu√°rio atualizadas com Trustcall</h4></a>
      <a class="anchor-link" href="#Humano-no-loop"><h2>Humano no loop</h2></a>
      <a class="anchor-link" href="#Mais"><h3>Mais</h3></a>
      <a class="anchor-link" href="#Aprova%C3%A7%C3%A3o-do-uso-de-ferramentas"><h4>Aprova√ß√£o do uso de ferramentas</h4></a>
      <a class="anchor-link" href="#Modifica%C3%A7%C3%A3o-do-estado"><h4>Modifica√ß√£o do estado</h4></a>
      <a class="anchor-link" href="#Pontos-de-interrup%C3%A7%C3%A3o-din%C3%A2micos"><h4>Pontos de interrup√ß√£o din√¢micos</h4></a>
      <a class="anchor-link" href="#Personaliza%C3%A7%C3%A3o-do-estado"><h2>Personaliza√ß√£o do estado</h2></a>
      <a class="anchor-link" href="#Atualiza%C3%A7%C3%A3o-manual-do-estado"><h3>Atualiza√ß√£o manual do estado</h3></a>
      <a class="anchor-link" href="#Pontos-de-controle"><h2>Pontos de controle</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="LangGraph">LangGraph<a class="anchor-link" href="#LangGraph"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 110" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Aviso: Este post foi traduzido para o portugu√™s usando um modelo de tradu√ß√£o autom√°tica. Por favor, me avise se encontrar algum erro.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>LangGraph</code> √© um framework de orquestra√ß√£o de baixo n√≠vel para construir agentes control√°veis</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Enquanto o <code>LangChain</code> fornece integra√ß√µes e componentes para acelerar o desenvolvimento de aplica√ß√µes LLM, a biblioteca <code>LangGraph</code> permite a orquestra√ß√£o de agentes, oferecendo arquiteturas personaliz√°veis, mem√≥ria de longo prazo e <code>human in the loop</code> para lidar com tarefas complexas de forma confi√°vel.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Neste post, vamos desabilitar o <code>LangSmith</code>, que √© uma ferramenta de depura√ß√£o de grafos. Vamos desabilit√°-lo para n√£o adicionar mais complexidade ao post e nos concentrarmos apenas no <code>LangGraph</code>.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Como-funciona-LangGraph?">Como funciona <code>LangGraph</code>?<a class="anchor-link" href="#Como-funciona-LangGraph?"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 111" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>LangGraph</code> baseia-se em tr√™s componentes:</p>
      <ul>
      <li><strong>N√≥s</strong>: Representam as unidades de processamento da aplica√ß√£o, como chamar um LLM ou uma ferramenta. S√£o fun√ß√µes de Python que s√£o executadas quando o n√≥ √© chamado.* Tomar o estado como entrada* Realizam alguma opera√ß√£o* Retornam o estado atualizado* <strong>Arestas</strong>: Representam as transi√ß√µes entre os n√≥s. Definem a l√≥gica de como o grafo ser√° executado, ou seja, qual n√≥ ser√° executado ap√≥s outro. Podem ser:* Diretos: V√£o de um n√≥ para outro* Condicional: Dependem de uma condi√ß√£o* <strong>Estado</strong>: Representa o estado da aplica√ß√£o, ou seja, cont√©m todas as informa√ß√µes necess√°rias para a aplica√ß√£o. √â mantido durante a execu√ß√£o da aplica√ß√£o. √â definido pelo usu√°rio, ent√£o √© preciso pensar muito bem no que ser√° salvo nele.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="Conceito LangGraph" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/LangGraph_concept.webp" width="1505" height="672"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Todos os grafos de <code>LangGraph</code> come√ßam a partir de um n√≥ <code>START</code> e terminam em um n√≥ <code>END</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Instala%C3%A7%C3%A3o-do-LangGraph">Instala√ß√£o do LangGraph<a class="anchor-link" href="#Instala%C3%A7%C3%A3o-do-LangGraph"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 112" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para instalar <code>LangGraph</code> pode-se usar pip:</p>
      <div class="highlight">
        <pre><span></span>pip<span class="w"> </span>install<span class="w"> </span>-U<span class="w"> </span>langgraph<span class="sb">```</span></pre>
        <pre>ou<span class="w"> </span>instalar<span class="w"> </span>a<span class="w"> </span>partir<span class="w"> </span><span class="k">do</span><span class="w"> </span>Conda:</pre>
        <pre><span class="sb">```</span>bash</pre>
        <pre>conda<span class="w"> </span>install<span class="w"> </span>langgraph<span class="sb">```</span></pre>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Instala%C3%A7%C3%A3o-do-m%C3%B3dulo-da-Hugging-Face-e-Anthropic">Instala√ß√£o do m√≥dulo da Hugging Face e Anthropic<a class="anchor-link" href="#Instala%C3%A7%C3%A3o-do-m%C3%B3dulo-da-Hugging-Face-e-Anthropic"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 113" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a usar um modelo de linguagem da <code>Hugging Face</code>, por isso precisamos instalar seu pacote de langgraph.</p>
      <div class="highlight">
        <pre><span></span>pip<span class="w"> </span>install<span class="w"> </span>langchain-huggingface<span class="sb">```</span></pre>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para uma parte vamos usar <code>Sonnet 3.7</code>, depois explicaremos por qu√™. Ent√£o tamb√©m instalamos o pacote de <code>Anthropic</code>.</p>
      <div class="highlight">
        <pre><span></span>pip<span class="w"> </span>install<span class="w"> </span>langchain_anthropic<span class="sb">```</span></pre>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="CHAVE-DE-API-do-Hugging-Face">CHAVE DE API do Hugging Face<a class="anchor-link" href="#CHAVE-DE-API-do-Hugging-Face"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 114" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a usar <code>Qwen/Qwen2.5-72B-Instruct</code> atrav√©s de <code>Hugging Face Inference Endpoints</code>, por isso precisamos de uma API KEY.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para poder usar o <code>Inference Endpoints</code> da HuggingFace, o primeiro que voc√™ precisa √© ter uma conta na HuggingFace. Uma vez que voc√™ tenha, √© necess√°rio ir at√© <a href="https://huggingface.co/settings/keys" target="_blank" rel="nofollow noreferrer">Access tokens</a> nas configura√ß√µes do seu perfil e gerar um novo token.
      Tem que dar um nome. No meu caso, vou cham√°-lo de <code>langgraph</code> e ativar a permiss√£o <code>Make calls to inference providers</code>. Isso criar√° um token que teremos que copiar.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para gerenciar o token, vamos a criar um arquivo no mesmo caminho em que estamos trabalhando chamado <code>.env</code> e vamos colocar o token que copiamos no arquivo da seguinte maneira:</p>
      <div class="highlight">
        <pre><span></span><span class="nv">HUGGINGFACE_LANGGRAPH</span><span class="o">=</span><span class="s2">"hf_...."</span><span class="sb">```</span></pre>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora, para poder obter o token, precisamos ter instalado <code>dotenv</code>, que instalamos atrav√©s de</p>
      <div class="highlight">
        <pre><span></span>pip<span class="w"> </span>install<span class="w"> </span>python-dotenv<span class="sb">```</span></pre>
        <pre>Executamos<span class="w"> </span>o<span class="w"> </span>seguinte</pre>
      </div>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">os</span>',
      '<span class="kn">import</span> <span class="nn">dotenv</span>',
      ' ',
      '<span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>',
      ' ',
      '<span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>











      
      <section class="section-block-markdown-cell">
      <p>Agora que temos um token, criamos um cliente. Para isso, precisamos ter a biblioteca <code>huggingface_hub</code> instalada. A instalamos atrav√©s do conda ou pip.</p>
      <div class="highlight">
        <pre><span></span>pip<span class="w"> </span>install<span class="w"> </span>--upgrade<span class="w"> </span>huggingface_hub<span class="sb">```</span></pre>
        <pre>o</pre>
        <pre><span class="sb">```</span><span class="w"> </span>bash</pre>
        <pre>conda<span class="w"> </span>install<span class="w"> </span>-c<span class="w"> </span>conda-forge<span class="w"> </span>huggingface_hub<span class="sb">```</span></pre>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora temos que escolher qual modelo vamos usar. Voc√™ pode ver os modelos dispon√≠veis na p√°gina de <a href="https://huggingface.co/docs/api-inference/supported-models" target="_blank" rel="nofollow noreferrer">Supported models</a> da documenta√ß√£o de <code>Inference Endpoints</code> do Hugging Face.
      Vamos a usar <code>Qwen2.5-72B-Instruct</code> que √© um modelo muito bom.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Agora podemos criar o cliente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">InferenceClient</span>',
          '',
          '<span class="n">client</span> <span class="o">=</span> <span class="n">InferenceClient</span><span class="p">(</span><span class="n">api_key</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="n">MODEL</span><span class="p">)</span>',
          '<span class="n">client</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;InferenceClient(model=\'Qwen/Qwen2.5-72B-Instruct\', timeout=None)&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos um teste para ver se funciona</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">message</span> <span class="o">=</span> <span class="p">[</span>',
          '	<span class="p">{</span> <span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="s2">"Hola, qu√© tal?"</span> <span class="p">}</span>',
          '<span class="p">]</span>',
          '',
          '<span class="n">stream</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
          '	<span class="n">messages</span><span class="o">=</span><span class="n">message</span><span class="p">,</span> ',
          '	<span class="n">temperature</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span>',
          '	<span class="n">max_tokens</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span>',
          '	<span class="n">top_p</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span>',
          '	<span class="n">stream</span><span class="o">=</span><span class="kc">False</span>',
          '<span class="p">)</span>',
          '',
          '<span class="n">response</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '¬°Hola! Estoy bien, gracias por preguntar. ¬øC√≥mo est√°s t√∫? ¬øEn qu√© puedo ayudarte hoy?',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="CHAVE-DE-API-da-Anthropic">CHAVE DE API da Anthropic<a class="anchor-link" href="#CHAVE-DE-API-da-Anthropic"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 115" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Criar-um-chatbot-b%C3%A1sico">Criar um chatbot b√°sico<a class="anchor-link" href="#Criar-um-chatbot-b%C3%A1sico"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 116" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos criar um chatbot simples usando <code>LangGraph</code>. Este chatbot responder√° diretamente √†s mensagens do usu√°rio. Embora seja simples, nos servir√° para ver os conceitos b√°sicos da constru√ß√£o de grafos com <code>LangGraph</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como o nome sugere, <code>LangGraph</code> √© uma biblioteca para manipular grafos. Ent√£o, come√ßamos criando um grafo <a href="https://langchain-ai.github.io/langgraph/reference/graphs/#langgraph.graph.state.StateGraph" target="_blank" rel="nofollow noreferrer">StateGraph</a>.
      Um <code>StateGraph</code> define a estrutura do nosso chatbot como uma <code>m√°quina de estados</code>. Adicionaremos <code>n√≥s</code> ao nosso grafo para representar os <code>llm</code>s, <code>tool</code>s e <code>fun√ß√µes</code>, os <code>llm</code>s poder√£o fazer uso dessas <code>tool</code>s e <code>fun√ß√µes</code>; e adicionamos <code>arestas</code> para especificar como o bot deve fazer a transi√ß√£o entre esses <code>n√≥s</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ent√£o come√ßamos criando um <code>StateGraph</code> que precisa de uma classe <code>State</code> para gerenciar o estado do grafo. Como agora vamos criar um chatbot simples, precisamos apenas gerenciar uma lista de mensagens no estado.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span>',
      '<span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>',
      ' ',
      ' ',
      '<span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
      '    <span class="c1"># Messages have the type "list". The `add_messages` function</span>',
      '    <span class="c1"># in the annotation defines how this state key should be updated</span>',
      '    <span class="c1"># (in this case, it appends messages to the list, rather than overwriting them)</span>',
      '    <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>',
      ' ',
      ' ',
      '<span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>





















      
      <section class="section-block-markdown-cell">
      <p>A fun√ß√£o <a href="https://langchain-ai.github.io/langgraph/reference/graphs/#langgraph.graph.message.add_messages" target="_blank" rel="nofollow noreferrer">add_messages</a> une duas listas de mensagens.
      Chegar√£o novas listas de mensagens, portanto, ser√£o adicionadas √† lista de mensagens j√° existente. Cada lista de mensagens cont√©m um <code>ID</code>, portanto, s√£o adicionadas com este <code>ID</code>. Isso garante que as mensagens sejam apenas adicionadas, n√£o substitu√≠das, a menos que uma nova mensagem tenha o mesmo <code>ID</code> que uma j√° existente, nesse caso, ela ser√° substitu√≠da.
      <code>add_messages</code> √© uma <a href="https://langchain-ai.github.io/langgraph/concepts/low_level/#reducers" target="_blank" rel="nofollow noreferrer">fun√ß√£o reducer</a>, √© uma fun√ß√£o respons√°vel por atualizar o estado.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O grafo <code>graph_builder</code> que criamos, recebe um estado <code>State</code> e retorna um novo estado <code>State</code>. Al√©m disso, atualiza a lista de mensagens.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p><strong>Conceito</strong>&gt;&gt; Ao definir um grafo, o primeiro passo √© definir seu <code>State</code>. O <code>State</code> inclui o esquema do grafo e as <code>reducer functions</code> que manipulam atualiza√ß√µes do estado.&gt;&gt; No nosso exemplo, <code>State</code> √© do tipo <code>TypedDict</code> (dicion√°rio tipado) com uma chave: <code>messages</code>.&gt;&gt; <code>add_messages</code> √© uma <code>fun√ß√£o reducer</code> que √© usada para adicionar novas mensagens √† lista em vez de sobrescrev√™-las na lista. Se uma chave de um estado n√£o tiver uma <code>fun√ß√£o reducer</code>, cada valor que chegar dessa chave sobrescrever√° os valores anteriores.&gt;&gt; <code>add_messages</code> √© uma <code>fun√ß√£o reducer</code> do langgraph, mas n√≥s vamos poder criar as nossas</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora vamos adicionar ao grafo o n√≥ <code>chatbot</code>. Os n√≥s representam unidades de trabalho. Geralmente, s√£o fun√ß√µes regulares de <code>Python</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Adicionamos um n√≥ com o m√©todo <code>add_node</code> que recebe o nome do n√≥ e a fun√ß√£o que ser√° executada.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ent√£o vamos criar um LLM com HuggingFace, depois criaremos um modelo de chat com <code>LangChain</code> que far√° refer√™ncia ao LLM criado. Uma vez definido o modelo de chat, definimos a fun√ß√£o que ser√° executada no n√≥ do nosso grafo. Essa fun√ß√£o far√° uma chamada ao modelo de chat criado e retornar√° o resultado.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por √∫ltimo, vamos a adicionar um n√≥ com a fun√ß√£o do chatbot ao gr√°fico</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>',
          '<span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>',
          '<span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>',
          '',
          '<span class="c1"># Create the LLM model</span>',
          '<span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>',
          '<span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>',
          '<span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>',
          '    <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>',
          '    <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>',
          '    <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>',
          '    <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
          '    <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="c1"># Create the chat model</span>',
          '<span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>',
          '',
          '<span class="c1"># Define the chatbot function</span>',
          '<span class="k">def</span> <span class="nf">chatbot_function</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>',
          '    <span class="k">return</span> <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])]}</span>',
          '',
          '',
          '<span class="c1"># The first argument is the unique node name</span>',
          '<span class="c1"># The second argument is the function or object that will be called whenever</span>',
          '<span class="c1"># the node is used.</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chatbot_function</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x130548440&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>N√≥s usamos <a href="https://python.langchain.com/api_reference/huggingface/chat_models/langchain_huggingface.chat_models.huggingface.ChatHuggingFace.html#langchain_huggingface.chat_models.huggingface.ChatHuggingFace" target="_blank" rel="nofollow noreferrer">ChatHuggingFace</a> que √© um chat do tipo <a href="https://python.langchain.com/api_reference/core/language_models/langchain_core.language_models.chat_models.BaseChatModel.html#langchain_core.language_models.chat_models.BaseChatModel">BaseChatModel</a> que √© um tipo de chat base de <code>LangChain</code>. Uma vez criado o <code>BaseChatModel</code>, n√≥s criamos a fun√ß√£o <code>chatbot_function</code> que ser√° executada quando o n√≥ for executado. E por √∫ltimo, criamos o n√≥ <code>chatbot_node</code> e indicamos que ele deve executar a fun√ß√£o <code>chatbot_function</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p><strong>Aviso</strong>&gt;&gt; A fun√ß√£o de n√≥ <code>chatbot_function</code> recebe o estado <code>State</code> como entrada e retorna um dicion√°rio que cont√©m uma atualiza√ß√£o da lista <code>messages</code> para a chave <code>mensagens</code>. Este √© o padr√£o b√°sico para todas as fun√ß√µes do n√≥ <code>LangGraph</code>.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A <code>fun√ß√£o reducer</code> do nosso grafo <code>add_messages</code> adicionar√° as mensagens de resposta do <code>llm</code> a qualquer mensagem que j√° esteja no estado.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A seguir, adicionamos um n√≥ <code>entry</code>. Isso diz ao nosso grafo onde come√ßar seu trabalho sempre que o executamos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">START</span>',
          '',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x130548440&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Da mesma forma, adicionamos um n√≥ <code>finish</code>. Isso indica ao grafo cada vez que esse n√≥ √© executado, ele pode finalizar o trabalho.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">END</span>',
          '',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x130548440&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Importamos <code>START</code> e <code>END</code>, que podem ser encontrados em <a href="https://langchain-ai.github.io/langgraph/reference/constants/" target="_blank" rel="nofollow noreferrer">constants</a>, e s√£o o primeiro e o √∫ltimo n√≥ do nosso grafo.
      Normalmente s√£o n√≥s virtuais</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Finalmente, temos que compilar nosso grafo. Para fazer isso, usamos o m√©todo construtor de grafos <code>compile()</code>. Isso cria um <code>CompiledGraph</code> que podemos usar para executar nossa aplica√ß√£o.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Podemos visualizar o grafo usando o m√©todo <code>get_graph</code> e um dos m√©todos de "desenho", como <code>draw_ascii</code> ou <code>draw_mermaid_png</code>. O desenho de cada um dos m√©todos requerir depend√™ncias adicionais.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      
      <span class="k">try</span><span class="p">:</span>
          <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Error al visualizar el grafo: </span><span class="si">{opening_brace}</span><span class="n">e</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv0.webp" width="143" height="234" alt="image uv 1" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora podemos testar o chatbot!</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p><strong>Dica</strong>&gt;&gt; No bloco de c√≥digo seguinte, voc√™ pode sair do loop de bate-papo a qualquer momento digitando <code>quit</code>, <code>exit</code> ou <code>q</code>.</p>
      </blockquote>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Colors for the terminal</span>',
          '<span class="n">COLOR_GREEN</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[32m"</span>',
          '<span class="n">COLOR_YELLOW</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[33m"</span>',
          '<span class="n">COLOR_RESET</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[0m"</span>',
          '',
          '',
          '<span class="k">def</span> <span class="nf">stream_graph_updates</span><span class="p">(</span><span class="n">user_input</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>',
          '    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">}]}):</span>',
          '        <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">event</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>',
          '            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_GREEN</span><span class="si">}</span><span class="s2">User: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}{</span><span class="n">user_input</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_YELLOW</span><span class="si">}</span><span class="s2">Assistant: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}{</span><span class="n">value</span><span class="p">[</span><span class="s1">\'messages\'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">content</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '',
          '<span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
          '    <span class="k">try</span><span class="p">:</span>',
          '        <span class="n">user_input</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s2">"User: "</span><span class="p">)</span>',
          '        <span class="k">if</span> <span class="n">user_input</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span><span class="s2">"quit"</span><span class="p">,</span> <span class="s2">"exit"</span><span class="p">,</span> <span class="s2">"q"</span><span class="p">]:</span>',
          '            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_GREEN</span><span class="si">}</span><span class="s2">User: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}{</span><span class="n">user_input</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_YELLOW</span><span class="si">}</span><span class="s2">Assistant: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}</span><span class="s2">Goodbye!"</span><span class="p">)</span>',
          '            <span class="k">break</span>',
          '        ',
          '        <span class="n">events</span> <span class="o">=</span><span class="n">stream_graph_updates</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span>',
          '    <span class="k">except</span><span class="p">:</span>',
          '        <span class="c1"># fallback if input() is not available</span>',
          '        <span class="n">user_input</span> <span class="o">=</span> <span class="s2">"What do you know about LangGraph?"</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="s2">"User: "</span> <span class="o">+</span> <span class="n">user_input</span><span class="p">)</span>',
          '        <span class="n">stream_graph_updates</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span>',
          '        <span class="k">break</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-green-fg">User: </span>Hello',
          '<span class="ansi-yellow-fg">Assistant: </span>Hello! It\'s nice to meet you. How can I assist you today? Whether you have questions, need information, or just want to chat, I\'m here to help!',
          '<span class="ansi-green-fg">User: </span>How are you doing?',
          '<span class="ansi-yellow-fg">Assistant: </span>I\'m just a computer program, so I don\'t have feelings, but I\'m here and ready to help you with any questions or tasks you have! How can I assist you today?',
          '<span class="ansi-green-fg">User: </span>Me well, I\'m making a post about LangGraph, what do you think?',
          '<span class="ansi-yellow-fg">Assistant: </span>LangGraph is an intriguing topic, especially if you\'re delving into the realm of graph-based models and their applications in natural language processing (NLP). LangGraph, as I understand, is a framework or tool that leverages graph theory to improve or provide a new perspective on NLP tasks such as text classification, information extraction, and semantic analysis. By representing textual information as graphs (nodes for entities and edges for relationships), it can offer a more nuanced understanding of the context and semantics in language data.',
          'If you\'re making a post about it, here are a few points you might consider:',
          '1. **Introduction to LangGraph**: Start with a brief explanation of what LangGraph is and its core principles. How does it model language or text differently compared to traditional NLP approaches? What unique advantages does it offer by using graph-based methods?',
          '2. **Applications of LangGraph**: Discuss some of the key applications where LangGraph has been or can be applied. This could include improving the accuracy of sentiment analysis, enhancing machine translation, or optimizing chatbot responses to be more contextually aware.',
          '3. **Technical Innovations**: Highlight any technical innovations or advancements that LangGraph brings to the table. This could be about new algorithms, more efficient data structures, or novel ways of training models on graph data.',
          '4. **Challenges and Limitations**: It\'s also important to address the challenges and limitations of using graph-based methods in NLP. Performance, scalability, and the current state of the technology can be discussed here.',
          '5. **Future Prospects**: Wrap up with a look into the future of LangGraph and graph-based NLP in general. What are the upcoming trends, potential areas of growth, and how might these tools start impacting broader technology landscapes?',
          'Each section can help frame your post in a way that\'s informative and engaging for your audience, whether they\'re technical experts or casual readers looking for an introduction to this intriguing area of NLP.',
          '<span class="ansi-green-fg">User: </span>q',
          '<span class="ansi-yellow-fg">Assistant: </span>Goodbye!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p><strong>!Parab√©ns!</strong> Voc√™ construiu seu primeiro chatbot usando <code>LangGraph</code>. Este bot pode participar de uma conversa b√°sica, recebendo a entrada do usu√°rio e gerando respostas utilizando o <code>LLM</code> que definimos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Antes fomos escrevendo o c√≥digo aos poucos e pode ser que n√£o tenha ficado muito claro. Foi feito assim para explicar cada parte do c√≥digo, mas agora vamos reescrev√™-lo, mas organizado de outra forma, que fica mais claro √† vista. Ou seja, agora que n√£o precisamos explicar cada parte do c√≥digo, o agrupamos de outra maneira para que seja mais claro.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>
      
      <span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>
      <span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>
      
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="kn">import</span> <span class="nn">dotenv</span>
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>
      
      <span class="c1"># State</span>
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>
      <span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>
      <span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>
          <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>
          <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>
          <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>
          <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
          <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>
      <span class="p">)</span>
      <span class="c1"># Create the chat model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>
      
      <span class="c1"># Function</span>
      <span class="k">def</span> <span class="nf">chatbot_function</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])]{closing_brace}</span>
      
      <span class="c1"># Start to build the graph</span>
      <span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      
      <span class="c1"># Add nodes to the graph</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chatbot_function</span><span class="p">)</span>
      
      <span class="c1"># Add edges</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="c1"># Display the graph</span>
      <span class="k">try</span><span class="p">:</span>
          <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Error al visualizar el grafo: </span><span class="si">{opening_brace}</span><span class="n">e</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv1.webp" width="143" height="234" alt="image uv 2" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Mais">Mais<a class="anchor-link" href="#Mais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 117" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Todos os blocos <code>mais</code> est√£o l√° se voc√™ quiser aprofundar mais em <code>LangGraph</code>, se n√£o, pode ler tudo sem ler os blocos <code>mais</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Tipagem-do-estado">Tipagem do estado<a class="anchor-link" href="#Tipagem-do-estado"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 118" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vimos como criar um agente com um estado tipado usando <code>TypedDict</code>, mas podemos cri√°-lo com outro tipo tipado.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h5 id="Tipagem-atrav%C3%A9s-de-TypeDict">Tipagem atrav√©s de <code>TypeDict</code><a class="anchor-link" href="#Tipagem-atrav%C3%A9s-de-TypeDict"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 119" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>√â a forma que vimos anteriormente, tipamos o estado como um dicion√°rio usando o tipado de Python <code>TypeDict</code>. Passamos uma chave e um valor para cada vari√°vel do nosso estado.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <div class="highlight">
        <pre><span></span><span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDictfrom</span> <span class="n">typing</span> <span class="kn">import</span> <span class="nn">Anotadofrom</span> <span class="n">langgraph</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">message</span> <span class="kn">import</span> <span class="nn">adicionar_mensagensfrom</span> <span class="n">langgraph</span><span class="o">.</span><span class="n">graph</span> <span class="kn">import</span> <span class="nn">StateGraph</span></pre>
        <pre><span class="k">class</span> <span class="nc">Estado</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span><span class="n">mensagens</span><span class="p">:</span> <span class="n">Anotado</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_mensagens</span><span class="p">]</span><span class="err">```</span></pre>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para acessar as mensagens, fazemos isso como com qualquer dicion√°rio, atrav√©s de <code>state["messages"]</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h5 id="Tipagem-com-dataclass">Tipagem com <code>dataclass</code><a class="anchor-link" href="#Tipagem-com-dataclass"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 120" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Outra op√ß√£o √© usar o tipado de python <code>dataclass</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <div class="highlight">
        <pre><span></span><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">dataclassfrom</span> <span class="n">typing</span> <span class="kn">import</span> <span class="nn">Anotadofrom</span> <span class="n">langgraph</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">message</span> <span class="kn">import</span> <span class="nn">add_messagesfrom</span> <span class="n">langgraph</span><span class="o">.</span><span class="n">graph</span> <span class="kn">import</span> <span class="nn">StateGraph</span></pre>
        <pre><span class="nd">@dataclassclass</span> <span class="n">Estado</span><span class="p">:</span><span class="n">mensagens</span><span class="p">:</span> <span class="n">Anotado</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">adicionar_mensagens</span><span class="p">]</span><span class="err">```</span></pre>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como pode ser visto, √© semelhante ao tipagem por meio de dicion√°rios, mas agora, sendo o estado uma classe, acessamos as mensagens atrav√©s de <code>state.messages</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h5 id="Tipagem-com-Pydantic">Tipagem com <code>Pydantic</code><a class="anchor-link" href="#Tipagem-com-Pydantic"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 121" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>Pydantic</code> √© uma biblioteca muito usada para tipar dados em Python. Nos oferece a possibilidade de adicionar uma verifica√ß√£o do tipado. Vamos verificar que a mensagem comece com <code>'User'</code>, <code>'Assistant'</code> ou <code>'System'</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <div class="highlight">
        <pre><span></span><span class="kn">from</span> <span class="nn">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span><span class="p">,</span> <span class="n">field_validator</span><span class="p">,</span> <span class="n">ValidationErrorfrom</span> <span class="n">typing</span> <span class="kn">import</span> <span class="nn">Anotadofrom</span> <span class="n">langgraph</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">message</span> <span class="kn">import</span> <span class="nn">adicionar_mensagens</span></pre>
        <pre><span class="k">class</span> <span class="nc">Estado</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span><span class="n">mensagens</span><span class="p">:</span> <span class="n">Anotado</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span> <span class="c1"># Deve come√ßar com 'Usu√°rio', 'Assistente' ou 'Sistema'</span></pre>
        <pre><span class="nd">@field_validator</span><span class="p">(</span><span class="s1">'mensagens'</span><span class="p">)</span><span class="nd">@classmethoddef</span> <span class="n">validate_messages</span><span class="p">(</span><span class="bp">cls</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span><span class="c1"># Garanta que as mensagens comecem com `User`, `Assistant` ou `System`Se n√£o value.startswith["'User'"] e n√£o value.startswith["'Assistant'"] e n√£o value.startswith["'System'"]:raise ValueError("A mensagem deve come√ßar com 'User', 'Assistant' ou 'System'")valor de retorno</span></pre>
        <pre><span class="n">tente</span><span class="p">:</span><span class="n">state</span> <span class="o">=</span> <span class="n">PydanticState</span><span class="p">(</span><span class="n">messages</span><span class="o">=</span><span class="p">[</span><span class="s2">"Ol√°"</span><span class="p">])</span><span class="k">except</span> <span class="n">ValidationError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span><span class="nb">print</span><span class="p">(</span><span class="s2">"Erro de Valida√ß√£o:"</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span><span class="err">```</span></pre>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Redutores">Redutores<a class="anchor-link" href="#Redutores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 122" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como dissemos, precisamos usar uma fun√ß√£o do tipo <code>Reducer</code> para indicar como atualizar o estado, pois se n√£o os valores do estado ser√£o sobrescritos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver um exemplo de um grafo no qual n√£o usamos uma fun√ß√£o do tipo <code>Reducer</code> para indicar como atualizar o estado</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">foo</span><span class="p">:</span> <span class="nb">int</span>
      
      <span class="k">def</span> <span class="nf">node_1</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"---Node 1---"</span><span class="p">)</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"foo"</span><span class="p">:</span> <span class="n">state</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">node_2</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"---Node 2---"</span><span class="p">)</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"foo"</span><span class="p">:</span> <span class="n">state</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">node_3</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"---Node 3---"</span><span class="p">)</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"foo"</span><span class="p">:</span> <span class="n">state</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">{closing_brace}</span>
      
      <span class="c1"># Build graph</span>
      <span class="n">builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"node_1"</span><span class="p">,</span> <span class="n">node_1</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"node_2"</span><span class="p">,</span> <span class="n">node_2</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"node_3"</span><span class="p">,</span> <span class="n">node_3</span><span class="p">)</span>
      
      <span class="c1"># Logic</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"node_1"</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_1"</span><span class="p">,</span> <span class="s2">"node_2"</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_1"</span><span class="p">,</span> <span class="s2">"node_3"</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_2"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_3"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Add</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="c1"># View</span>
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv2.webp" width="233" height="333" alt="image uv 3" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, definimos um grafo no qual o n√≥ 1 √© executado primeiro e depois os n√≥s 2 e 3. Vamos execut√°-lo para ver o que acontece.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">langgraph.errors</span> <span class="kn">import</span> <span class="n">InvalidUpdateError</span>',
          '',
          '<span class="k">try</span><span class="p">:</span>',
          '    <span class="n">graph</span><span class="o">.</span><span class="n">invoke</span><span class="p">({</span><span class="s2">"foo"</span> <span class="p">:</span> <span class="mi">1</span><span class="p">})</span>',
          '<span class="k">except</span> <span class="n">InvalidUpdateError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"InvalidUpdateError occurred: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '---Node 1---',
          '---Node 2---',
          '---Node 3---',
          'InvalidUpdateError occurred: At key \'foo\': Can receive only one value per step. Use an Annotated key to handle multiple values.',
          'For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/INVALID_CONCURRENT_GRAPH_UPDATE',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtemos um erro porque primeiro o n√≥ 1 modifica o valor de <code>foo</code> e depois os n√≥s 2 e 3 tentam modificar o valor de <code>foo</code> em paralelo, o que d√° um erro.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ent√£o, para evitar isso, usamos uma fun√ß√£o do tipo <code>Reducer</code> para indicar como modificar o estado.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h5 id="Redutores-pr%C3%A9-definidos">Redutores pr√©-definidos<a class="anchor-link" href="#Redutores-pr%C3%A9-definidos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 123" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Usamos o tipo <code>Annotated</code> para especificar que √© uma fun√ß√£o do tipo <code>Reducer</code>. E usamos o operador <code>add</code> para adicionar um valor a uma lista.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">add</span>
      <span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">foo</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">add</span><span class="p">]</span>
      
      <span class="k">def</span> <span class="nf">node_1</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"---Node 1---"</span><span class="p">)</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"foo"</span><span class="p">:</span> <span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">node_2</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"---Node 2---"</span><span class="p">)</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"foo"</span><span class="p">:</span> <span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">node_3</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"---Node 3---"</span><span class="p">)</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"foo"</span><span class="p">:</span> <span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]{closing_brace}</span>
      
      <span class="c1"># Build graph</span>
      <span class="n">builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"node_1"</span><span class="p">,</span> <span class="n">node_1</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"node_2"</span><span class="p">,</span> <span class="n">node_2</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"node_3"</span><span class="p">,</span> <span class="n">node_3</span><span class="p">)</span>
      
      <span class="c1"># Logic</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"node_1"</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_1"</span><span class="p">,</span> <span class="s2">"node_2"</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_1"</span><span class="p">,</span> <span class="s2">"node_3"</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_2"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_3"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Add</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="c1"># View</span>
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv3.webp" width="233" height="333" alt="image uv 4" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Executamos novamente para ver o que acontece</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">graph</span><span class="o">.</span><span class="n">invoke</span><span class="p">({opening_brace}</span><span class="s2">"foo"</span> <span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">]{closing_brace})</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>---Node 1---
      ---Node 2---
      ---Node 3---
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[8]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'foo': [1, 2, 3, 3]{closing_brace}</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos inicializamos o valor de <code>foo</code> a 1, o qual se adiciona em uma lista. Depois o n√≥ 1 soma 1 e o adiciona como novo valor na lista, ou seja, adiciona um 2. Por fim os n√≥s 2 e 3 somam um ao √∫ltimo valor da lista, ou seja, os dois n√≥s obt√™m um 3 e ambos o adicionam no final da lista, por isso a lista resultante tem dois 3 no final</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver o caso de que uma branch tenha mais n√≥s que outra</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">add</span>
      <span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">foo</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">add</span><span class="p">]</span>
      
      <span class="k">def</span> <span class="nf">node_1</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"---Node 1---"</span><span class="p">)</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"foo"</span><span class="p">:</span> <span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">node_2_1</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"---Node 2_1---"</span><span class="p">)</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"foo"</span><span class="p">:</span> <span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">node_2_2</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"---Node 2_2---"</span><span class="p">)</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"foo"</span><span class="p">:</span> <span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">node_3</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"---Node 3---"</span><span class="p">)</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"foo"</span><span class="p">:</span> <span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]{closing_brace}</span>
      
      <span class="c1"># Build graph</span>
      <span class="n">builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"node_1"</span><span class="p">,</span> <span class="n">node_1</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"node_2_1"</span><span class="p">,</span> <span class="n">node_2_1</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"node_2_2"</span><span class="p">,</span> <span class="n">node_2_2</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"node_3"</span><span class="p">,</span> <span class="n">node_3</span><span class="p">)</span>
      
      <span class="c1"># Logic</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"node_1"</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_1"</span><span class="p">,</span> <span class="s2">"node_2_1"</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_1"</span><span class="p">,</span> <span class="s2">"node_3"</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_2_1"</span><span class="p">,</span> <span class="s2">"node_2_2"</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_2_2"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_3"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Add</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="c1"># View</span>
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv4.webp" width="251" height="432" alt="image uv 5" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se agora executarmos o grafo</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">graph</span><span class="o">.</span><span class="n">invoke</span><span class="p">({opening_brace}</span><span class="s2">"foo"</span> <span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">]{closing_brace})</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>---Node 1---
      ---Node 2_1---
      ---Node 3---
      ---Node 2_2---
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[3]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'foo': [1, 2, 3, 3, 4]{closing_brace}</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O que aconteceu √© que primeiro foi executado o n√≥ 1, em seguida o n√≥ 2_1, depois, em paralelo, os n√≥s 2_2 e 3, e finalmente o n√≥ <code>END</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como definimos <code>foo</code> como uma lista de inteiros, e est√° tipada, se inicializarmos o estado com <code>None</code> obtemos um erro</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">try</span><span class="p">:</span>',
          '    <span class="n">graph</span><span class="o">.</span><span class="n">invoke</span><span class="p">({</span><span class="s2">"foo"</span> <span class="p">:</span> <span class="kc">None</span><span class="p">})</span>',
          '<span class="k">except</span> <span class="ne">TypeError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"TypeError occurred: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'TypeError occurred: can only concatenate list (not "NoneType") to list',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver como arrumar isso com <code>reducidores personalizados</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h5 id="Redutores-personalizados">Redutores personalizados<a class="anchor-link" href="#Redutores-personalizados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 124" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>√Äs vezes n√£o podemos usar um <code>Reducer</code> pr√©-definido e temos que criar o nosso pr√≥prio.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      
      <span class="k">def</span> <span class="nf">reducer_function</span><span class="p">(</span><span class="n">current_list</span><span class="p">,</span> <span class="n">new_item</span><span class="p">:</span> <span class="nb">list</span> <span class="o">|</span> <span class="kc">None</span><span class="p">):</span>
          <span class="k">if</span> <span class="n">current_list</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
              <span class="n">current_list</span> <span class="o">=</span> <span class="p">[]</span>
      
          <span class="k">if</span> <span class="n">new_item</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
              <span class="k">return</span> <span class="n">current_list</span> <span class="o">+</span> <span class="n">new_item</span>
          <span class="k">return</span> <span class="n">current_list</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">foo</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">reducer_function</span><span class="p">]</span>
      
      <span class="k">def</span> <span class="nf">node_1</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"---Node 1---"</span><span class="p">)</span>
          <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
              <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s1">'foo'</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">]{closing_brace}</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"foo"</span><span class="p">:</span> <span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">node_2</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"---Node 2---"</span><span class="p">)</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"foo"</span><span class="p">:</span> <span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">node_3</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"---Node 3---"</span><span class="p">)</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"foo"</span><span class="p">:</span> <span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]{closing_brace}</span>
      
      <span class="c1"># Build graph</span>
      <span class="n">builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"node_1"</span><span class="p">,</span> <span class="n">node_1</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"node_2"</span><span class="p">,</span> <span class="n">node_2</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"node_3"</span><span class="p">,</span> <span class="n">node_3</span><span class="p">)</span>
      
      <span class="c1"># Logic</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"node_1"</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_1"</span><span class="p">,</span> <span class="s2">"node_2"</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_1"</span><span class="p">,</span> <span class="s2">"node_3"</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_2"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_3"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Add</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="c1"># View</span>
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv5.webp" width="233" height="333" alt="image uv 6" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se agora inicializarmos o grafo com um valor <code>None</code>, n√£o recebemos mais um erro.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">try</span><span class="p">:</span>',
          '    <span class="n">graph</span><span class="o">.</span><span class="n">invoke</span><span class="p">({</span><span class="s2">"foo"</span> <span class="p">:</span> <span class="kc">None</span><span class="p">})</span>',
          '<span class="k">except</span> <span class="ne">TypeError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"TypeError occurred: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '---Node 1---',
          '---Node 2---',
          '---Node 3---',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="M%C3%BAltiplos-estados">M√∫ltiplos estados<a class="anchor-link" href="#M%C3%BAltiplos-estados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 125" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <h5 id="Estados-privados">Estados privados<a class="anchor-link" href="#Estados-privados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 126" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suponhamos que queremos ocultar vari√°veis de estado, pela raz√£o que seja, porque algumas vari√°veis s√≥ trazem ru√≠do ou porque queremos manter alguma vari√°vel privada.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos ter um estado privado, simplesmente o criamos.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      
      <span class="k">class</span> <span class="nc">OverallState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">public_var</span><span class="p">:</span> <span class="nb">int</span>
      
      <span class="k">class</span> <span class="nc">PrivateState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">private_var</span><span class="p">:</span> <span class="nb">int</span>
      
      <span class="k">def</span> <span class="nf">node_1</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">OverallState</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">PrivateState</span><span class="p">:</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"---Node 1---"</span><span class="p">)</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"private_var"</span><span class="p">:</span> <span class="n">state</span><span class="p">[</span><span class="s1">'public_var'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">node_2</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">PrivateState</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">OverallState</span><span class="p">:</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"---Node 2---"</span><span class="p">)</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"public_var"</span><span class="p">:</span> <span class="n">state</span><span class="p">[</span><span class="s1">'private_var'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">{closing_brace}</span>
      
      <span class="c1"># Build graph</span>
      <span class="n">builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">OverallState</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"node_1"</span><span class="p">,</span> <span class="n">node_1</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"node_2"</span><span class="p">,</span> <span class="n">node_2</span><span class="p">)</span>
      
      <span class="c1"># Logic</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"node_1"</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_1"</span><span class="p">,</span> <span class="s2">"node_2"</span><span class="p">)</span>
      <span class="n">builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"node_2"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Add</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="c1"># View</span>
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv6.webp" width="106" height="333" alt="image uv 7" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, criamos o estado privado <code>PrivateState</code> e o estado p√∫blico <code>OverallState</code>. Cada um com uma vari√°vel privada e uma p√∫blica. Primeiro √© executado o n√≥ 1, que modifica a vari√°vel privada e a retorna. Em seguida, √© executado o n√≥ 2, que modifica a vari√°vel p√∫blica e a retorna. Vamos executar o grafo para ver o que acontece.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">graph</span><span class="o">.</span><span class="n">invoke</span><span class="p">({opening_brace}</span><span class="s2">"public_var"</span> <span class="p">:</span> <span class="mi">1</span><span class="p">{closing_brace})</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>---Node 1---
      ---Node 2---
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[2]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'public_var': 3{closing_brace}</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos ao executar o grafo, passamos a vari√°vel p√∫blica <code>public_var</code> e obtemos na sa√≠da outra vari√°vel p√∫blica <code>public_var</code> com o valor modificado, mas nunca se acessou a vari√°vel privada <code>private_var</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h5 id="Estados-de-entrada-e-sa%C3%ADda">Estados de entrada e sa√≠da<a class="anchor-link" href="#Estados-de-entrada-e-sa%C3%ADda"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 127" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos definir as vari√°veis de entrada e sa√≠da do grafo. Embora internamente o estado possa ter mais vari√°veis, definimos quais vari√°veis s√£o de entrada para o grafo e quais vari√°veis s√£o de sa√≠da.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      
      <span class="k">class</span> <span class="nc">InputState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">question</span><span class="p">:</span> <span class="nb">str</span>
      
      <span class="k">class</span> <span class="nc">OutputState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">answer</span><span class="p">:</span> <span class="nb">str</span>
      
      <span class="k">class</span> <span class="nc">OverallState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">question</span><span class="p">:</span> <span class="nb">str</span>
          <span class="n">answer</span><span class="p">:</span> <span class="nb">str</span>
          <span class="n">notes</span><span class="p">:</span> <span class="nb">str</span>
      
      <span class="k">def</span> <span class="nf">thinking_node</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">InputState</span><span class="p">):</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"answer"</span><span class="p">:</span> <span class="s2">"bye"</span><span class="p">,</span> <span class="s2">"notes"</span><span class="p">:</span> <span class="s2">"... his is name is Lance"</span><span class="p">{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">answer_node</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">OverallState</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">OutputState</span><span class="p">:</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"answer"</span><span class="p">:</span> <span class="s2">"bye Lance"</span><span class="p">{closing_brace}</span>
      
      <span class="n">graph</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">OverallState</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">InputState</span><span class="p">,</span> <span class="n">output</span><span class="o">=</span><span class="n">OutputState</span><span class="p">)</span>
      
      <span class="n">graph</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"answer_node"</span><span class="p">,</span> <span class="n">answer_node</span><span class="p">)</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"thinking_node"</span><span class="p">,</span> <span class="n">thinking_node</span><span class="p">)</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"thinking_node"</span><span class="p">)</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"thinking_node"</span><span class="p">,</span> <span class="s2">"answer_node"</span><span class="p">)</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"answer_node"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="c1"># View</span>
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv7.webp" width="146" height="333" alt="image uv 8" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Neste caso, o estado tem 3 vari√°veis: <code>question</code>, <code>answer</code> e <code>notes</code>. No entanto, definimos como entrada do grafo <code>question</code> e como sa√≠da do grafo <code>answer</code>. Portanto, o estado interno pode ter mais vari√°veis, mas elas n√£o s√£o consideradas na hora de invocar o grafo. Vamos executar o grafo para ver o que acontece.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">graph</span><span class="o">.</span><span class="n">invoke</span><span class="p">({</span><span class="s2">"question"</span><span class="p">:</span><span class="s2">"hi"</span><span class="p">})</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'answer\': \'bye Lance\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, adicionamos <code>question</code> ao grafo e obtivemos <code>answer</code> na sa√≠da.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Gerenciamento-do-contexto">Gerenciamento do contexto<a class="anchor-link" href="#Gerenciamento-do-contexto"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 128" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a revisar novamente o c√≥digo do chatbot b√°sico</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>
      <span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>
      <span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="kn">import</span> <span class="nn">dotenv</span>
      
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>
      
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>
      <span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>
      <span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>
          <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>
          <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>
          <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>
          <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
          <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>
      <span class="p">)</span>
      <span class="c1"># Create the chat model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>
      
      <span class="c1"># Define the chatbot function</span>
      <span class="k">def</span> <span class="nf">chatbot_function</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])]{closing_brace}</span>
      
      <span class="c1"># Create graph builder</span>
      <span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chatbot_function</span><span class="p">)</span>
      
      <span class="c1"># Connect nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv8.webp" width="143" height="234" alt="image uv 9" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a criar um contexto que passaremos ao modelo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">AIMessage</span><span class="p">,</span> <span class="n">HumanMessage</span>',
          '',
          '<span class="n">messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">AIMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"So you said you were researching ocean mammals?"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Bot"</span><span class="p">)]</span>',
          '<span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">HumanMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Yes, I know about whales. But what others should I learn about?"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Lance"</span><span class="p">))</span>',
          '',
          '<span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>',
          '    <span class="n">m</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'So you said you were researching ocean mammals?',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'Yes, I know about whales. But what others should I learn about?',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se passarmos para o grafo, obteremos a sa√≠da</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">output</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">invoke</span><span class="p">({</span><span class="s1">\'messages\'</span><span class="p">:</span> <span class="n">messages</span><span class="p">})</span>',
          '<span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">output</span><span class="p">[</span><span class="s1">\'messages\'</span><span class="p">]:</span>',
          '    <span class="n">m</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'So you said you were researching ocean mammals?',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'Yes, I know about whales. But what others should I learn about?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'That\'s a great topic! Besides whales, there are several other fascinating ocean mammals you might want to learn about. Here are a few:',
          '1. **Dolphins**: Highly intelligent and social, dolphins are found in all oceans of the world. They are known for their playful behavior and communication skills.',
          '2. **Porpoises**: Similar to dolphins but generally smaller and stouter, porpoises are less social and more elusive. They are found in coastal waters around the world.',
          '3. **Seals and Sea Lions**: These are semi-aquatic mammals that can be found in both Arctic and Antarctic regions, as well as in more temperate waters. They are known for their sleek bodies and flippers, and they differ in their ability to walk on land (sea lions can "walk" on their flippers, while seals can only wriggle or slide).',
          '4. **Walruses**: Known for their large tusks and whiskers, walruses are found in the Arctic. They are well-adapted to cold waters and have a thick layer of blubber to keep them warm.',
          '5. **Manatees and Dugongs**: These gentle, herbivorous mammals are often called "sea cows." They live in shallow, coastal areas and are found in tropical and subtropical regions. Manatees are found in the Americas, while dugongs are found in the Indo-Pacific region.',
          '6. **Otters**: While not fully aquatic, sea otters spend most of their lives in the water and are excellent swimmers. They are known for their dense fur, which keeps them warm in cold waters.',
          '7. **Polar Bears**: Although primarily considered land animals, polar bears are excellent swimmers and spend a significant amount of time in the water, especially when hunting for seals.',
          'Each of these mammals has unique adaptations and behaviors that make them incredibly interesting to study. If you have any specific questions or topics you\'d like to explore further, feel free to ask!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos agora na sa√≠da temos uma mensagem adicional.
      Se isso continuar crescendo, chegar√° um momento em que teremos um contexto muito longo, o que representar√° um maior gasto de tokens, podendo resultar em um maior custo econ√¥mico e tamb√©m maior lat√™ncia.
      Al√©m disso, com contextos muito longos, os LLMs come√ßam a performar pior.
      Nos √∫ltimos modelos, √† data da escrita deste post, acima de 8k tokens de contexto, come√ßa a decrescer o desempenho do LLM</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ent√£o vamos ver v√°rias maneiras de gerenciar isso</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h5 id="Modificar-o-contexto-com-fun%C3%A7%C3%B5es-do-tipo-Reducer">Modificar o contexto com fun√ß√µes do tipo <code>Reducer</code><a class="anchor-link" href="#Modificar-o-contexto-com-fun%C3%A7%C3%B5es-do-tipo-Reducer"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 129" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vimos que com as fun√ß√µes do tipo <code>Reducer</code> podemos modificar as mensagens do estado</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>
      <span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>
      <span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">RemoveMessage</span>
      <span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="kn">import</span> <span class="nn">dotenv</span>
      
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>
      
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>
      <span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>
      <span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>
          <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>
          <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>
          <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>
          <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
          <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>
      <span class="p">)</span>
      <span class="c1"># Create the chat model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>
      
      <span class="c1"># Nodes</span>
      <span class="k">def</span> <span class="nf">filter_messages</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="c1"># Delete all but the 2 most recent messages</span>
          <span class="n">delete_messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">RemoveMessage</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="n">m</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][:</span><span class="o">-</span><span class="mi">2</span><span class="p">]]</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">delete_messages</span><span class="p">{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">chat_model_node</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>    
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])]{closing_brace}</span>
      
      <span class="c1"># Create graph builder</span>
      <span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"filter_messages_node"</span><span class="p">,</span> <span class="n">filter_messages</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chat_model_node</span><span class="p">)</span>
      
      <span class="c1"># Connecto nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"filter_messages_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"filter_messages_node"</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv9.webp" width="203" height="333" alt="image uv 10" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos no grafo, primeiro filtramos as mensagens e depois passamos o resultado ao modelo.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a criar um contexto que passaremos ao modelo, mas agora com mais mensagens</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">AIMessage</span><span class="p">,</span> <span class="n">HumanMessage</span>',
          '',
          '<span class="n">messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">AIMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"So you said you were researching ocean mammals?"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Bot"</span><span class="p">)]</span>',
          '<span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">HumanMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Yes, I know about whales. But what others should I learn about?"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Lance"</span><span class="p">))</span>',
          '<span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">AIMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"I know about sharks too"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Bot"</span><span class="p">))</span>',
          '<span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">HumanMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"What others should I learn about?"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Lance"</span><span class="p">))</span>',
          '<span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">AIMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"I know about dolphins too"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Bot"</span><span class="p">))</span>',
          '<span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">HumanMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Tell me more about dolphins"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Lance"</span><span class="p">))</span>',
          '',
          '<span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>',
          '    <span class="n">m</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'So you said you were researching ocean mammals?',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'Yes, I know about whales. But what others should I learn about?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'I know about sharks too',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'What others should I learn about?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'I know about dolphins too',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'Tell me more about dolphins',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se passarmos para o grafo, obteremos a sa√≠da</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">output</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">invoke</span><span class="p">({</span><span class="s1">\'messages\'</span><span class="p">:</span> <span class="n">messages</span><span class="p">})</span>',
          '<span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">output</span><span class="p">[</span><span class="s1">\'messages\'</span><span class="p">]:</span>',
          '    <span class="n">m</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'I know about dolphins too',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'Tell me more about dolphins',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Dolphins are highly intelligent marine mammals that are part of the family Delphinidae, which includes about 40 species. They are found in oceans worldwide, from tropical to temperate regions, and are known for their agility and playful behavior. Here are some interesting facts about dolphins:',
          '1. **Social Behavior**: Dolphins are highly social animals and often live in groups called pods, which can range from a few individuals to several hundred. Social interactions are complex and include cooperative behaviors, such as hunting and defending against predators.',
          '2. **Communication**: Dolphins communicate using a variety of sounds, including clicks, whistles, and body language. These sounds can be used for navigation (echolocation), communication, and social bonding. Each dolphin has a unique signature whistle that helps identify it to others in the pod.',
          '3. **Intelligence**: Dolphins are considered one of the most intelligent animals on Earth. They have large brains and display behaviors such as problem-solving, mimicry, and even the use of tools. Some studies suggest that dolphins can recognize themselves in mirrors, indicating a level of self-awareness.',
          '4. **Diet**: Dolphins are carnivores and primarily feed on fish and squid. They use echolocation to locate and catch their prey. Some species, like the bottlenose dolphin, have been observed using teamwork to herd fish into tight groups, making them easier to catch.',
          '5. **Reproduction**: Dolphins typically give birth to a single calf after a gestation period of about 10 to 12 months. Calves are born tail-first and are immediately helped to the surface for their first breath by their mother or another dolphin. Calves nurse for up to two years and remain dependent on their mothers for a significant period.',
          '6. **Conservation**: Many dolphin species are threatened by human activities such as pollution, overfishing, and habitat destruction. Some species, like the Indo-Pacific humpback dolphin and the Amazon river dolphin, are endangered. Conservation efforts are crucial to protect these animals and their habitats.',
          '7. **Human Interaction**: Dolphins have a long history of interaction with humans, often appearing in mythology and literature. In some cultures, they are considered sacred or bring good luck. Today, dolphins are popular in marine parks and are often the focus of eco-tourism activities, such as dolphin-watching tours.',
          'Dolphins continue to fascinate scientists and the general public alike, with ongoing research into their behavior, communication, and social structures providing new insights into these remarkable creatures.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se pode ver, a fun√ß√£o de filtragem removeu todas as mensagens, exceto as duas √∫ltimas, e essas duas mensagens foram passadas como contexto para o LLM.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h5 id="Cortar-mensagens">Cortar mensagens<a class="anchor-link" href="#Cortar-mensagens"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 130" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Outra solu√ß√£o √© recortar cada mensagem da lista de mensagens que tenham muitos tokens, estabelece-se um limite de tokens e elimina-se a mensagem que ultrapassa esse limite.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>
      <span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>
      <span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">trim_messages</span>
      <span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="kn">import</span> <span class="nn">dotenv</span>
      
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>
      
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>
      <span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>
      <span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>
          <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>
          <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>
          <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>
          <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
          <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>
      <span class="p">)</span>
      <span class="c1"># Create the chat model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>
      
      <span class="c1"># Nodes</span>
      <span class="k">def</span> <span class="nf">trim_messages_node</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="c1"># Trim the messages based on the specified parameters</span>
          <span class="n">trimmed_messages</span> <span class="o">=</span> <span class="n">trim_messages</span><span class="p">(</span>
              <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">],</span>
              <span class="n">max_tokens</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>       <span class="c1"># Maximum tokens allowed in the trimmed list</span>
              <span class="n">strategy</span><span class="o">=</span><span class="s2">"last"</span><span class="p">,</span>     <span class="c1"># Keep the latest messages</span>
              <span class="n">token_counter</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>   <span class="c1"># Use the LLM's tokenizer to count tokens</span>
              <span class="n">allow_partial</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>  <span class="c1"># Allow cutting messages mid-way if needed</span>
          <span class="p">)</span>
      
          <span class="c1"># Print the trimmed messages to see the effect of trim_messages</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"--- trimmed messages (input to LLM) ---"</span><span class="p">)</span>
          <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">trimmed_messages</span><span class="p">:</span>
              <span class="n">m</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"------------------------------------------------"</span><span class="p">)</span>
      
          <span class="c1"># Invoke the LLM with the trimmed messages</span>
          <span class="n">response</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">trimmed_messages</span><span class="p">)</span>
      
          <span class="c1"># Return the LLM's response in the correct state format</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">response</span><span class="p">]{closing_brace}</span>
      
      <span class="c1"># Create graph builder</span>
      <span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"trim_messages_node"</span><span class="p">,</span> <span class="n">trim_messages_node</span><span class="p">)</span>
      
      <span class="c1"># Connecto nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"trim_messages_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"trim_messages_node"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv10.webp" width="199" height="234" alt="image uv 11" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos no grafo, primeiro filtramos as mensagens e depois passamos o resultado ao modelo.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a criar um contexto que passaremos ao modelo, mas agora com mais mensagens</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">AIMessage</span><span class="p">,</span> <span class="n">HumanMessage</span>',
          '',
          '<span class="n">messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">AIMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"So you said you were researching ocean mammals?"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Bot"</span><span class="p">)]</span>',
          '<span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">HumanMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Yes, I know about whales. But what others should I learn about?"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Lance"</span><span class="p">))</span>',
          '<span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">AIMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"""I know about sharks too. They are very dangerous, but they are also very beautiful.</span>',
          '<span class="s2">Sometimes have been seen in the wild, but they are not very common. In the wild, they are very dangerous, but they are also very beautiful.</span>',
          '<span class="s2">They live in the sea and in the ocean. They can travel long distances and can be found in many parts of the world.</span>',
          '<span class="s2">Often they live in groups of 20 or more, but they are not very common.</span>',
          '<span class="s2">They should eat a lot of food. Normally they eat a lot of fish.</span>',
          '<span class="s2">The white shark is the largest of the sharks and is the most dangerous.</span>',
          '<span class="s2">The great white shark is the most famous of the sharks and is the most dangerous.</span>',
          '<span class="s2">The tiger shark is the most aggressive of the sharks and is the most dangerous.</span>',
          '<span class="s2">The hammerhead shark is the most beautiful of the sharks and is the most dangerous.</span>',
          '<span class="s2">The mako shark is the fastest of the sharks and is the most dangerous.</span>',
          '<span class="s2">The bull shark is the most common of the sharks and is the most dangerous.</span>',
          '<span class="s2">"""</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Bot"</span><span class="p">))</span>',
          '<span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">HumanMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"What others should I learn about?"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Lance"</span><span class="p">))</span>',
          '<span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">AIMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"I know about dolphins too"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Bot"</span><span class="p">))</span>',
          '<span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">HumanMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Tell me more about dolphins"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Lance"</span><span class="p">))</span>',
          '',
          '<span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>',
          '    <span class="n">m</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'So you said you were researching ocean mammals?',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'Yes, I know about whales. But what others should I learn about?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'I know about sharks too. They are very dangerous, but they are also very beautiful.',
          'Sometimes have been seen in the wild, but they are not very common. In the wild, they are very dangerous, but they are also very beautiful.',
          'They live in the sea and in the ocean. They can travel long distances and can be found in many parts of the world.',
          'Often they live in groups of 20 or more, but they are not very common.',
          'They should eat a lot of food. Normally they eat a lot of fish.',
          'The white shark is the largest of the sharks and is the most dangerous.',
          'The great white shark is the most famous of the sharks and is the most dangerous.',
          'The tiger shark is the most aggressive of the sharks and is the most dangerous.',
          'The hammerhead shark is the most beautiful of the sharks and is the most dangerous.',
          'The mako shark is the fastest of the sharks and is the most dangerous.',
          'The bull shark is the most common of the sharks and is the most dangerous.',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'What others should I learn about?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'I know about dolphins too',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'Tell me more about dolphins',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se passarmos ao grafo, obteremos a sa√≠da</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">output</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">invoke</span><span class="p">({</span><span class="s1">\'messages\'</span><span class="p">:</span> <span class="n">messages</span><span class="p">})</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '--- trimmed messages (input to LLM) ---',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'The tiger shark is the most aggressive of the sharks and is the most dangerous.',
          'The hammerhead shark is the most beautiful of the sharks and is the most dangerous.',
          'The mako shark is the fastest of the sharks and is the most dangerous.',
          'The bull shark is the most common of the sharks and is the most dangerous.',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'What others should I learn about?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'I know about dolphins too',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'Tell me more about dolphins',
          '------------------------------------------------',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como pode ser visto, o contexto fornecido ao LLM foi truncado. A mensagem, que era muito longa e continha muitos tokens, foi reduzida. Vamos observar a sa√≠da do LLM.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">output</span><span class="p">[</span><span class="s1">\'messages\'</span><span class="p">]:</span>',
          '    <span class="n">m</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'So you said you were researching ocean mammals?',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'Yes, I know about whales. But what others should I learn about?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'I know about sharks too. They are very dangerous, but they are also very beautiful.',
          'Sometimes have been seen in the wild, but they are not very common. In the wild, they are very dangerous, but they are also very beautiful.',
          'They live in the sea and in the ocean. They can travel long distances and can be found in many parts of the world.',
          'Often they live in groups of 20 or more, but they are not very common.',
          'They should eat a lot of food. Normally they eat a lot of fish.',
          'The white shark is the largest of the sharks and is the most dangerous.',
          'The great white shark is the most famous of the sharks and is the most dangerous.',
          'The tiger shark is the most aggressive of the sharks and is the most dangerous.',
          'The hammerhead shark is the most beautiful of the sharks and is the most dangerous.',
          'The mako shark is the fastest of the sharks and is the most dangerous.',
          'The bull shark is the most common of the sharks and is the most dangerous.',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'What others should I learn about?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'I know about dolphins too',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'Tell me more about dolphins',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Certainly! Dolphins are intelligent marine mammals that are part of the family Delphinidae, which includes nearly 40 species. Here are some interesting facts about dolphins:',
          '1. **Intelligence**: Dolphins are known for their high intelligence and have large brains relative to their body size. They exhibit behaviors that suggest social complexity, self-awareness, and problem-solving skills. For example, they can recognize themselves in mirrors, a trait shared by only a few other species.',
          '2. **Communication**: Dolphins communicate using a variety of clicks, whistles, and body language. Each dolphin has a unique "signature whistle" that helps identify it to others, similar to a human name. They use echolocation to navigate and locate prey by emitting clicks and interpreting the echoes that bounce back.',
          '3. **Social Structure**: Dolphins are highly social animals and often live in groups called pods. These pods can vary in size from a few individuals to several hundred. Within these groups, dolphins form complex social relationships and often cooperate to hunt and protect each other from predators.',
          '4. **Habitat**: Dolphins are found in all the world\'s oceans and in some rivers. Different species have adapted to various environments, from tropical waters to the cooler regions of the open sea. Some species, like the Amazon river dolphin (also known as the boto), live in freshwater rivers.',
          '5. **Diet**: Dolphins are carnivores and primarily eat fish, squid, and crustaceans. Their diet can vary depending on the species and their habitat. Some species, like the killer whale (which is actually a large dolphin), can even hunt larger marine mammals.',
          '6. **Reproduction**: Dolphins have a long gestation period, typically around 10 to 12 months. Calves are born tail-first and are nursed by their mothers for up to two years. Dolphins often form strong bonds with their offspring and other members of their pod.',
          '7. **Conservation**: Many species of dolphins face threats such as pollution, overfishing, and entanglement in fishing nets. Conservation efforts are ongoing to protect these animals and their habitats. Organizations like the International Union for Conservation of Nature (IUCN) and the World Wildlife Fund (WWF) work to raise awareness and implement conservation measures.',
          '8. **Cultural Significance**: Dolphins have been a source of fascination and inspiration for humans for centuries. They appear in myths, legends, and art across many cultures and are often seen as symbols of intelligence, playfulness, and freedom.',
          'Dolphins are truly remarkable creatures with a lot to teach us about social behavior, communication, and the complexities of marine ecosystems. If you have any specific questions or want to know more about a particular species, feel free to ask!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Com um contexto truncado, o LLM continua respondendo</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h5 id="Modifica%C3%A7%C3%A3o-do-contexto-e-corte-de-mensagens">Modifica√ß√£o do contexto e corte de mensagens<a class="anchor-link" href="#Modifica%C3%A7%C3%A3o-do-contexto-e-corte-de-mensagens"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 131" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a juntar as duas t√©cnicas anteriores, modificaremos o contexto e recortaremos os mensagens.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>
      <span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>
      <span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">RemoveMessage</span><span class="p">,</span> <span class="n">trim_messages</span>
      <span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="kn">import</span> <span class="nn">dotenv</span>
      
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>
      
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>
      <span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>
      <span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>
          <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>
          <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>
          <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>
          <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
          <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>
      <span class="p">)</span>
      <span class="c1"># Create the chat model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>
      
      <span class="c1"># Nodes</span>
      <span class="k">def</span> <span class="nf">filter_messages</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="c1"># Delete all but the 2 most recent messages</span>
          <span class="n">delete_messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">RemoveMessage</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="n">m</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][:</span><span class="o">-</span><span class="mi">2</span><span class="p">]]</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">delete_messages</span><span class="p">{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">trim_messages_node</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="c1"># print the messages</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"--- messages (input to trim_messages) ---"</span><span class="p">)</span>
          <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]:</span>
              <span class="n">m</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"------------------------------------------------"</span><span class="p">)</span>
      
          <span class="c1"># Trim the messages based on the specified parameters</span>
          <span class="n">trimmed_messages</span> <span class="o">=</span> <span class="n">trim_messages</span><span class="p">(</span>
              <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">],</span>
              <span class="n">max_tokens</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>       <span class="c1"># Maximum tokens allowed in the trimmed list</span>
              <span class="n">strategy</span><span class="o">=</span><span class="s2">"last"</span><span class="p">,</span>     <span class="c1"># Keep the latest messages</span>
              <span class="n">token_counter</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>   <span class="c1"># Use the LLM's tokenizer to count tokens</span>
              <span class="n">allow_partial</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>  <span class="c1"># Allow cutting messages mid-way if needed</span>
          <span class="p">)</span>
      
          <span class="c1"># Print the trimmed messages to see the effect of trim_messages</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"--- trimmed messages (input to LLM) ---"</span><span class="p">)</span>
          <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">trimmed_messages</span><span class="p">:</span>
              <span class="n">m</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"------------------------------------------------"</span><span class="p">)</span>
      
          <span class="c1"># Invoke the LLM with the trimmed messages</span>
          <span class="n">response</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">trimmed_messages</span><span class="p">)</span>
      
          <span class="c1"># Return the LLM's response in the correct state format</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">response</span><span class="p">]{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">chat_model_node</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>    
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])]{closing_brace}</span>
      
      <span class="c1"># Create graph builder</span>
      <span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"filter_messages_node"</span><span class="p">,</span> <span class="n">filter_messages</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chat_model_node</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"trim_messages_node"</span><span class="p">,</span> <span class="n">trim_messages_node</span><span class="p">)</span>
      
      <span class="c1"># Connecto nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"filter_messages_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"filter_messages_node"</span><span class="p">,</span> <span class="s2">"trim_messages_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"trim_messages_node"</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv11.webp" width="203" height="432" alt="image uv 12" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora filtramos ficando com as duas √∫ltimas mensagens, depois trimamos o contexto para que n√£o gaste muitos tokens e, finalmente, passamos o resultado ao modelo.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos um contexto para pass√°-lo ao grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">AIMessage</span><span class="p">,</span> <span class="n">HumanMessage</span>',
          '',
          '<span class="n">messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">AIMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"So you said you were researching ocean mammals?"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Bot"</span><span class="p">)]</span>',
          '<span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">HumanMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Yes, I know about whales. But what others should I learn about?"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Lance"</span><span class="p">))</span>',
          '<span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">AIMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"I know about dolphins too"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Bot"</span><span class="p">))</span>',
          '<span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">HumanMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"What others should I learn about?"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Lance"</span><span class="p">))</span>',
          '<span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">AIMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"""I know about sharks too. They are very dangerous, but they are also very beautiful.</span>',
          '<span class="s2">Sometimes have been seen in the wild, but they are not very common. In the wild, they are very dangerous, but they are also very beautiful.</span>',
          '<span class="s2">They live in the sea and in the ocean. They can travel long distances and can be found in many parts of the world.</span>',
          '<span class="s2">Often they live in groups of 20 or more, but they are not very common.</span>',
          '<span class="s2">They should eat a lot of food. Normally they eat a lot of fish.</span>',
          '<span class="s2">The white shark is the largest of the sharks and is the most dangerous.</span>',
          '<span class="s2">The great white shark is the most famous of the sharks and is the most dangerous.</span>',
          '<span class="s2">The tiger shark is the most aggressive of the sharks and is the most dangerous.</span>',
          '<span class="s2">The hammerhead shark is the most beautiful of the sharks and is the most dangerous.</span>',
          '<span class="s2">The mako shark is the fastest of the sharks and is the most dangerous.</span>',
          '<span class="s2">The bull shark is the most common of the sharks and is the most dangerous.</span>',
          '<span class="s2">"""</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Bot"</span><span class="p">))</span>',
          '<span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">HumanMessage</span><span class="p">(</span><span class="sa">f</span><span class="s2">"What others should I learn about?"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Lance"</span><span class="p">))</span>',
          '',
          '<span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>',
          '    <span class="n">m</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'So you said you were researching ocean mammals?',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'Yes, I know about whales. But what others should I learn about?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'I know about dolphins too',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'What others should I learn about?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'I know about sharks too. They are very dangerous, but they are also very beautiful.',
          'Sometimes have been seen in the wild, but they are not very common. In the wild, they are very dangerous, but they are also very beautiful.',
          'They live in the sea and in the ocean. They can travel long distances and can be found in many parts of the world.',
          'Often they live in groups of 20 or more, but they are not very common.',
          'They should eat a lot of food. Normally they eat a lot of fish.',
          'The white shark is the largest of the sharks and is the most dangerous.',
          'The great white shark is the most famous of the sharks and is the most dangerous.',
          'The tiger shark is the most aggressive of the sharks and is the most dangerous.',
          'The hammerhead shark is the most beautiful of the sharks and is the most dangerous.',
          'The mako shark is the fastest of the sharks and is the most dangerous.',
          'The bull shark is the most common of the sharks and is the most dangerous.',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'What others should I learn about?',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Passamos para o grafo e obtemos a sa√≠da</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">output</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">invoke</span><span class="p">({</span><span class="s1">\'messages\'</span><span class="p">:</span> <span class="n">messages</span><span class="p">})</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '--- messages (input to trim_messages) ---',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'I know about sharks too. They are very dangerous, but they are also very beautiful.',
          'Sometimes have been seen in the wild, but they are not very common. In the wild, they are very dangerous, but they are also very beautiful.',
          'They live in the sea and in the ocean. They can travel long distances and can be found in many parts of the world.',
          'Often they live in groups of 20 or more, but they are not very common.',
          'They should eat a lot of food. Normally they eat a lot of fish.',
          'The white shark is the largest of the sharks and is the most dangerous.',
          'The great white shark is the most famous of the sharks and is the most dangerous.',
          'The tiger shark is the most aggressive of the sharks and is the most dangerous.',
          'The hammerhead shark is the most beautiful of the sharks and is the most dangerous.',
          'The mako shark is the fastest of the sharks and is the most dangerous.',
          'The bull shark is the most common of the sharks and is the most dangerous.',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'What others should I learn about?',
          '------------------------------------------------',
          '--- trimmed messages (input to LLM) ---',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'What others should I learn about?',
          '------------------------------------------------',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, ficamos apenas com a √∫ltima mensagem, isso ocorreu porque a fun√ß√£o de filtro retornou as duas √∫ltimas mensagens, mas a fun√ß√£o de trim removceu a pen√∫ltima mensagem por ter mais de 100 tokens.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver o que temos na sa√≠da do modelo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">output</span><span class="p">[</span><span class="s1">\'messages\'</span><span class="p">]:</span>',
          '    <span class="n">m</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Name: Bot',
          'I know about sharks too. They are very dangerous, but they are also very beautiful.',
          'Sometimes have been seen in the wild, but they are not very common. In the wild, they are very dangerous, but they are also very beautiful.',
          'They live in the sea and in the ocean. They can travel long distances and can be found in many parts of the world.',
          'Often they live in groups of 20 or more, but they are not very common.',
          'They should eat a lot of food. Normally they eat a lot of fish.',
          'The white shark is the largest of the sharks and is the most dangerous.',
          'The great white shark is the most famous of the sharks and is the most dangerous.',
          'The tiger shark is the most aggressive of the sharks and is the most dangerous.',
          'The hammerhead shark is the most beautiful of the sharks and is the most dangerous.',
          'The mako shark is the fastest of the sharks and is the most dangerous.',
          'The bull shark is the most common of the sharks and is the most dangerous.',
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Name: Lance',
          'What others should I learn about?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Certainly! To provide a more tailored response, it would be helpful to know what areas or topics you\'re interested in. However, here‚Äôs a general list of areas that are often considered valuable for personal and professional development:',
          '1. **Technology &amp; Digital Skills**: ',
          '   - Programming languages (Python, JavaScript, etc.)',
          '   - Web development (HTML, CSS, React, etc.)',
          '   - Data analysis and visualization (SQL, Tableau, Power BI)',
          '   - Machine learning and AI',
          '   - Cloud computing (AWS, Azure, Google Cloud)',
          '2. **Business &amp; Entrepreneurship**:',
          '   - Marketing (digital marketing, SEO, content marketing)',
          '   - Project management',
          '   - Financial literacy',
          '   - Leadership and management',
          '   -Startup and venture capital',
          '3. **Science &amp; Engineering**:',
          '   - Biology and genetics',
          '   - Physics and materials science',
          '   - Environmental science and sustainability',
          '   - Robotics and automation',
          '   - Aerospace engineering',
          '4. **Health &amp; Wellness**:',
          '   - Nutrition and dietetics',
          '   - Mental health and psychology',
          '   - Exercise science',
          '   - Yoga and mindfulness',
          '   - Traditional and alternative medicine',
          '5. **Arts &amp; Humanities**:',
          '   - Creative writing and storytelling',
          '   - Music and sound production',
          '   - Visual arts and design (graphic design, photography)',
          '   - Philosophy and ethics',
          '   - History and cultural studies',
          '6. **Communication &amp; Languages**:',
          '   - Public speaking and presentation skills',
          '   - Conflict resolution and negotiation',
          '   - Learning a new language (Spanish, Mandarin, French, etc.)',
          '   - Writing and editing',
          '7. **Personal Development**:',
          '   - Time management and productivity',
          '   - Mindfulness and stress management',
          '   - Goal setting and motivation',
          '   - Personal finance and budgeting',
          '   - Critical thinking and problem solving',
          '8. **Social &amp; Environmental Impact**:',
          '   - Social entrepreneurship',
          '   - Community organizing and activism',
          '   - Sustainable living practices',
          '   - Climate change and environmental policy',
          'If you have a specific area of interest or a particular goal in mind, feel free to share, and I can provide more detailed recommendations!',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Filtramos tanto o estado que o LLM n√£o tem contexto suficiente, mais tarde veremos uma maneira de resolver isso adicionando ao estado um resumo da conversa√ß√£o.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Modos-de-transmiss%C3%A3o">Modos de transmiss√£o<a class="anchor-link" href="#Modos-de-transmiss%C3%A3o"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 132" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <h5 id="Streaming-s%C3%ADncrono">Streaming s√≠ncrono<a class="anchor-link" href="#Streaming-s%C3%ADncrono"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 133" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Neste caso, vamos receber o resultado do LLM completo assim que ele terminar de gerar o texto.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para explicar os modos de transmiss√£o s√≠ncrona, primeiro vamos criar um grafo b√°sico.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>
      <span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>
      <span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">HumanMessage</span>
      <span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="kn">import</span> <span class="nn">dotenv</span>
      
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>
      
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>
      <span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>
      <span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>
          <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>
          <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>
          <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>
          <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
          <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>
      <span class="p">)</span>
      <span class="c1"># Create the chat model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>
      
      <span class="c1"># Nodes</span>
      <span class="k">def</span> <span class="nf">chat_model_node</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="c1"># Return the LLM's response in the correct state format</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])]{closing_brace}</span>
      
      <span class="c1"># Create graph builder</span>
      <span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chat_model_node</span><span class="p">)</span>
      
      <span class="c1"># Connecto nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv12.webp" width="143" height="234" alt="image uv 13" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora temos duas maneiras de obter o resultado do LLM, uma √© atrav√©s do modo <code>updates</code> e a outra atrav√©s do modo <code>values</code>.
      <img decoding="async" onerror="this.parentNode.removeChild(this)" alt="updates vs values" src="https://cdn.prod.website-files.com/65b8cd72835ceeacd4449a53/66dbaf892d24625a201744e5_streaming1.png" width="643" height="188">
      Enquanto <code>updates</code> nos d√° cada novo resultado, <code>values</code> nos d√° todo o hist√≥rico de resultados.</img></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h6 id="Atualiza%C3%A7%C3%B5es">Atualiza√ß√µes<a class="anchor-link" href="#Atualiza%C3%A7%C3%B5es"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 134" src={svg_paths.link_svg_path}/></a></h6>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"hi! I\'m M√°ximo"</span><span class="p">)]},</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"updates"</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">chunk</span><span class="p">[</span><span class="s1">\'chatbot_node\'</span><span class="p">][</span><span class="s1">\'messages\'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hello M√°ximo! It\'s nice to meet you. How can I assist you today? Feel free to ask me any questions or let me know if you need help with anything specific.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h6 id="Valores">Valores<a class="anchor-link" href="#Valores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 135" src={svg_paths.link_svg_path}/></a></h6>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"hi! I\'m M√°ximo"</span><span class="p">)]},</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">chunk</span><span class="p">[</span><span class="s1">\'messages\'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'hi! I\'m M√°ximo',
          'Hello M√°ximo! It\'s nice to meet you. How can I assist you today? Feel free to ask me any questions or let me know if you need help with anything specific.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="Streaming-ass%C3%ADncrono">Streaming ass√≠ncrono<a class="anchor-link" href="#Streaming-ass%C3%ADncrono"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 136" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora vamos receber o resultado do LLM token a token. Para isso, temos que adicionar <code>streaming=True</code> quando criamos o LLM da HuggingFace e temos que alterar a fun√ß√£o do n√≥ do chatbot para que seja ass√≠ncrona.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>
      <span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>
      <span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">HumanMessage</span>
      <span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="kn">import</span> <span class="nn">dotenv</span>
      
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>
      
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>
      <span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>
      <span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>
          <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>
          <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>
          <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>
          <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
          <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>
          <span class="n">streaming</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
      <span class="p">)</span>
      <span class="c1"># Create the chat model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>
      
      <span class="c1"># Nodes</span>
      <span class="k">async</span> <span class="k">def</span> <span class="nf">chat_model_node</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="k">async</span> <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">llm</span><span class="o">.</span><span class="n">astream_log</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]):</span>
              <span class="k">yield</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">token</span><span class="p">]{closing_brace}</span>
      
      <span class="c1"># Create graph builder</span>
      <span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chat_model_node</span><span class="p">)</span>
      
      <span class="c1"># Connecto nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv13.webp" width="143" height="234" alt="image uv 14" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como pode ser visto, a fun√ß√£o foi criada ass√≠ncrona e convertida em um gerador, pois o <code>yield</code> retorna um valor e pausa a execu√ß√£o da fun√ß√£o at√© que seja chamada novamente.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a executar o grafo de forma ass√≠ncrona e ver os tipos de eventos que s√£o gerados.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="k">try</span><span class="p">:</span>
          <span class="k">async</span> <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">astream_events</span><span class="p">({opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"hi! I'm M√°ximo"</span><span class="p">)]{closing_brace},</span> <span class="n">version</span><span class="o">=</span><span class="s2">"v2"</span><span class="p">):</span>
              <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"event: </span><span class="si">{opening_brace}</span><span class="n">event</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Error: </span><span class="si">{opening_brace}</span><span class="n">e</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>event: {opening_brace}'event': 'on_chain_start', 'data': {opening_brace}'input': {opening_brace}'messages': [HumanMessage(content="hi! I'm M√°ximo", additional_kwargs={opening_brace}{closing_brace}, response_metadata={opening_brace}{closing_brace})]{closing_brace}{closing_brace}, 'name': 'LangGraph', 'tags': [], 'run_id': 'c9c40a00-157a-4229-a0d1-fda00e7bfd34', 'metadata': {opening_brace}{closing_brace}, 'parent_ids': []{closing_brace}
      event: {'event': 'on_chain_start', 'data': {'input': {'messages': [HumanMessage(content="hi! I'm M√°ximo", additional_kwargs={}, response_metadata={}, id='6469501c-07b0-42e4-a3e6-f133ace1860c')]}}, 'name': 'chatbot_node', 'tags': ['graph:step:1'], 'run_id': '638828c0-4add-4141-b6b6-484446100237', 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34']}
      event: {'event': 'on_chain_start', 'data': {}, 'name': 'chatbot_node', 'tags': ['seq:step:1'], 'run_id': '15247b1a-1cd6-4863-9402-66499f921244', 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237']}
      event: {'event': 'on_chat_model_start', 'data': {'input': {'messages': [[HumanMessage(content="hi! I'm M√°ximo", additional_kwargs={}, response_metadata={}, id='6469501c-07b0-42e4-a3e6-f133ace1860c')]]}}, 'name': 'ChatHuggingFace', 'tags': [], 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chain_stream', 'run_id': '15247b1a-1cd6-4863-9402-66499f921244', 'name': 'chatbot_node', 'tags': ['seq:step:1'], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd'}, 'data': {'chunk': {'messages': [RunLogPatch({'op': 'replace',
        'path': '',
        'value': {'final_output': None,
                  'id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3',
                  'logs': {},
                  'name': 'ChatHuggingFace',
                  'streamed_output': [],
                  'type': 'llm'}})]}}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content='Hello', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' M√°', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content='ximo', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content='!', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' It', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content="'s", additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' nice', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' to', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' meet', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' you', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content='.', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' How', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' can', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' I', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' assist', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' you', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' today', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content='?', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' Feel', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' free', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' to', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' ask', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' me', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' any', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' questions', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>/Users/macm1/miniforge3/envs/langgraph/lib/python3.13/site-packages/huggingface_hub/inference/_generated/_async_client.py:2308: FutureWarning: `stop_sequences` is a deprecated argument for `text_generation` task and will be removed in version '0.28.0'. Use `stop` instead.
        warnings.warn(
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>event: {opening_brace}'event': 'on_chat_model_stream', 'data': {opening_brace}'chunk': AIMessageChunk(content=' or', additional_kwargs={opening_brace}{closing_brace}, response_metadata={opening_brace}{closing_brace}){closing_brace}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {opening_brace}'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'{closing_brace}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']{closing_brace}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' let', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' me', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' know', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' if', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' you', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' need', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' help', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' with', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' anything', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content=' specific', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content='.', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_stream', 'data': {'chunk': AIMessageChunk(content='&lt;|im_end|&gt;', additional_kwargs={}, response_metadata={})}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chat_model_end', 'data': {'output': AIMessage(content="Hello M√°ximo! It's nice to meet you. How can I assist you today? Feel free to ask me any questions or let me know if you need help with anything specific.&lt;|im_end|&gt;", additional_kwargs={}, response_metadata={}, id='run-74dfdbb9-4c2d-4a08-ad7d-795b5953cae3-0'), 'input': {'messages': [[HumanMessage(content="hi! I'm M√°ximo", additional_kwargs={}, response_metadata={}, id='6469501c-07b0-42e4-a3e6-f133ace1860c')]]}}, 'run_id': '74dfdbb9-4c2d-4a08-ad7d-795b5953cae3', 'name': 'ChatHuggingFace', 'tags': [], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'ls_provider': 'huggingface', 'ls_model_type': 'chat'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237', '15247b1a-1cd6-4863-9402-66499f921244']}
      event: {'event': 'on_chain_stream', 'run_id': '15247b1a-1cd6-4863-9402-66499f921244', 'name': 'chatbot_node', 'tags': ['seq:step:1'], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd'}, 'data': {'chunk': {'messages': [RunLogPatch({'op': 'add',
        'path': '/streamed_output/-',
        'value': AIMessage(content="Hello M√°ximo! It's nice to meet you. How can I assist you today? Feel free to ask me any questions or let me know if you need help with anything specific.&lt;|im_end|&gt;", additional_kwargs={}, response_metadata={}, id='run-74dfdbb9-4c2d-4a08-ad7d-795b5953cae3-0')},
       {'op': 'replace',
        'path': '/final_output',
        'value': AIMessage(content="Hello M√°ximo! It's nice to meet you. How can I assist you today? Feel free to ask me any questions or let me know if you need help with anything specific.&lt;|im_end|&gt;", additional_kwargs={}, response_metadata={}, id='run-74dfdbb9-4c2d-4a08-ad7d-795b5953cae3-0')})]}}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237']}
      event: {'event': 'on_chain_end', 'data': {'output': {'messages': [RunLogPatch({'op': 'add',
        'path': '/streamed_output/-',
        'value': AIMessage(content="Hello M√°ximo! It's nice to meet you. How can I assist you today? Feel free to ask me any questions or let me know if you need help with anything specific.&lt;|im_end|&gt;", additional_kwargs={}, response_metadata={}, id='run-74dfdbb9-4c2d-4a08-ad7d-795b5953cae3-0')},
       {'op': 'replace',
        'path': '/final_output',
        'value': AIMessage(content="Hello M√°ximo! It's nice to meet you. How can I assist you today? Feel free to ask me any questions or let me know if you need help with anything specific.&lt;|im_end|&gt;", additional_kwargs={}, response_metadata={}, id='run-74dfdbb9-4c2d-4a08-ad7d-795b5953cae3-0')})]}, 'input': {'messages': [HumanMessage(content="hi! I'm M√°ximo", additional_kwargs={}, response_metadata={}, id='6469501c-07b0-42e4-a3e6-f133ace1860c')]}}, 'run_id': '15247b1a-1cd6-4863-9402-66499f921244', 'name': 'chatbot_node', 'tags': ['seq:step:1'], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd', 'checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34', '638828c0-4add-4141-b6b6-484446100237']}
      event: {'event': 'on_chain_stream', 'run_id': '638828c0-4add-4141-b6b6-484446100237', 'name': 'chatbot_node', 'tags': ['graph:step:1'], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd'}, 'data': {'chunk': {'messages': [RunLogPatch({'op': 'add',
        'path': '/streamed_output/-',
        'value': AIMessage(content="Hello M√°ximo! It's nice to meet you. How can I assist you today? Feel free to ask me any questions or let me know if you need help with anything specific.&lt;|im_end|&gt;", additional_kwargs={}, response_metadata={}, id='run-74dfdbb9-4c2d-4a08-ad7d-795b5953cae3-0')},
       {'op': 'replace',
        'path': '/final_output',
        'value': AIMessage(content="Hello M√°ximo! It's nice to meet you. How can I assist you today? Feel free to ask me any questions or let me know if you need help with anything specific.&lt;|im_end|&gt;", additional_kwargs={}, response_metadata={}, id='run-74dfdbb9-4c2d-4a08-ad7d-795b5953cae3-0')})]}}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34']}
      event: {'event': 'on_chain_end', 'data': {'output': {'messages': [RunLogPatch({'op': 'add',
        'path': '/streamed_output/-',
        'value': AIMessage(content="Hello M√°ximo! It's nice to meet you. How can I assist you today? Feel free to ask me any questions or let me know if you need help with anything specific.&lt;|im_end|&gt;", additional_kwargs={}, response_metadata={}, id='run-74dfdbb9-4c2d-4a08-ad7d-795b5953cae3-0')},
       {'op': 'replace',
        'path': '/final_output',
        'value': AIMessage(content="Hello M√°ximo! It's nice to meet you. How can I assist you today? Feel free to ask me any questions or let me know if you need help with anything specific.&lt;|im_end|&gt;", additional_kwargs={}, response_metadata={}, id='run-74dfdbb9-4c2d-4a08-ad7d-795b5953cae3-0')})]}, 'input': {'messages': [HumanMessage(content="hi! I'm M√°ximo", additional_kwargs={}, response_metadata={}, id='6469501c-07b0-42e4-a3e6-f133ace1860c')]}}, 'run_id': '638828c0-4add-4141-b6b6-484446100237', 'name': 'chatbot_node', 'tags': ['graph:step:1'], 'metadata': {'langgraph_step': 1, 'langgraph_node': 'chatbot_node', 'langgraph_triggers': ('branch:to:chatbot_node',), 'langgraph_path': ('__pregel_pull', 'chatbot_node'), 'langgraph_checkpoint_ns': 'chatbot_node:b7599990-0c1a-4133-fb2c-f32105784fbd'}, 'parent_ids': ['c9c40a00-157a-4229-a0d1-fda00e7bfd34']}
      Error: Unsupported message type: &lt;class 'langchain_core.tracers.log_stream.RunLogPatch'&gt;
      For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/MESSAGE_COERCION_FAILURE 
      </pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como se pode ver, os tokens chegam com o evento <code>on_chat_model_stream</code>, ent√£o vamos captur√°-lo e imprimi-lo.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="k">try</span><span class="p">:</span>
          <span class="k">async</span> <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">astream_events</span><span class="p">({opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"hi! I'm M√°ximo"</span><span class="p">)]{closing_brace},</span> <span class="n">version</span><span class="o">=</span><span class="s2">"v2"</span><span class="p">):</span>
              <span class="k">if</span> <span class="n">event</span><span class="p">[</span><span class="s2">"event"</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"on_chat_model_stream"</span><span class="p">:</span>
                  <span class="nb">print</span><span class="p">(</span><span class="n">event</span><span class="p">[</span><span class="s2">"data"</span><span class="p">][</span><span class="s2">"chunk"</span><span class="p">]</span><span class="o">.</span><span class="n">content</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">" | "</span><span class="p">,</span> <span class="n">flush</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
      <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
          <span class="k">pass</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>/Users/macm1/miniforge3/envs/langgraph/lib/python3.13/site-packages/huggingface_hub/inference/_generated/_async_client.py:2308: FutureWarning: `stop_sequences` is a deprecated argument for `text_generation` task and will be removed in version '0.28.0'. Use `stop` instead.
        warnings.warn(
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>Hello |  M√° | ximo | ! |  It | 's |  nice |  to |  meet |  you | . |  How |  can |  I |  assist |  you |  today | ? |  Feel |  free |  to |  ask |  me |  any |  questions |  or |  let |  me |  know |  if |  you |  need |  help |  with |  anything |  specific | . | &lt;|im_end|&gt; | </pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Subgrafos">Subgrafos<a class="anchor-link" href="#Subgrafos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 137" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Antes vimos como bifurcar um grafo de forma que os n√≥s sejam executados em paralelo, mas suponha o caso de que agora o que queremos √© que o que seja executado em paralelo sejam subgrafos. Ent√£o vamos ver como fazer isso.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver como fazer um grafo de gest√£o de logs que vai ter um subgrafo de resumo de logs e outro subgrafo de an√°lise de erros nos logs.
      <img decoding="async" onerror="this.parentNode.removeChild(this)" alt="grafo com subgrafos" src="https://cdn.prod.website-files.com/65b8cd72835ceeacd4449a53/66dbb1abf89f2d847ee6f1ff_sub-graph1.png" width="1509" height="720">
      Ent√£o, o que vamos fazer √© primeiro definir cada um dos subgr√°ficos separadamente e depois adicion√°-los ao grafo principal.</img></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h5 id="Subgr%C3%A1fico-de-an%C3%A1lise-de-erros-em-logs">Subgr√°fico de an√°lise de erros em logs<a class="anchor-link" href="#Subgr%C3%A1fico-de-an%C3%A1lise-de-erros-em-logs"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 138" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Importamos as bibliotecas necess√°rias</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>',
      '<span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">add</span>',
      '<span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>',
      '<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Annotated</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>











      
      <section class="section-block-markdown-cell">
      <p>Criamos uma classe com a estrutura dos logs</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># The structure of the logs</span>',
      '<span class="k">class</span> <span class="nc">Log</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
      '    <span class="nb">id</span><span class="p">:</span> <span class="nb">str</span>',
      '    <span class="n">question</span><span class="p">:</span> <span class="nb">str</span>',
      '    <span class="n">docs</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">List</span><span class="p">]</span>',
      '    <span class="n">answer</span><span class="p">:</span> <span class="nb">str</span>',
      '    <span class="n">grade</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>',
      '    <span class="n">grader</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>',
      '    <span class="n">feedback</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>














      
      <section class="section-block-markdown-cell">
      <p>Criamos agora duas classes, uma com a estrutura dos erros dos logs e outra com a an√°lise que relatar√° na sa√≠da</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># Failure Analysis Sub-graph</span>',
      '<span class="k">class</span> <span class="nc">FailureAnalysisState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
      '    <span class="n">cleaned_logs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Log</span><span class="p">]</span>',
      '    <span class="n">failures</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Log</span><span class="p">]</span>',
      '    <span class="n">fa_summary</span><span class="p">:</span> <span class="nb">str</span>',
      '    <span class="n">processed_logs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>',
      ' ',
      '<span class="k">class</span> <span class="nc">FailureAnalysisOutputState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
      '    <span class="n">fa_summary</span><span class="p">:</span> <span class="nb">str</span>',
      '    <span class="n">processed_logs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>















      
      <section class="section-block-markdown-cell">
      <p>Agora criamos as fun√ß√µes dos n√≥s, uma obter√° os erros nos logs, para isso buscar√° os logs que tenham algum valor no campo <code>grade</code>. Outra gerar√° um resumo dos erros. Al√©m disso, vamos adicionar <code>print</code>s para poder ver o que est√° acontecendo internamente.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span> <span class="nf">get_failures</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>',
      '<span class="w">    </span><span class="sd">""" Get logs that contain a failure """</span>',
      '    <span class="n">cleaned_logs</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="s2">"cleaned_logs"</span><span class="p">]</span>',
      '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2"> debug get_failures: cleaned_logs: </span><span class="si">{</span><span class="n">cleaned_logs</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      ' ',
      '    <span class="n">failures</span> <span class="o">=</span> <span class="p">[</span><span class="n">log</span> <span class="k">for</span> <span class="n">log</span> <span class="ow">in</span> <span class="n">cleaned_logs</span> <span class="k">if</span> <span class="s2">"grade"</span> <span class="ow">in</span> <span class="n">log</span><span class="p">]</span>',
      '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2"> debug get_failures: failures: </span><span class="si">{</span><span class="n">failures</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      ' ',
      '    <span class="k">return</span> <span class="p">{</span><span class="s2">"failures"</span><span class="p">:</span> <span class="n">failures</span><span class="p">}</span>',
      ' ',
      '<span class="k">def</span> <span class="nf">generate_summary</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>',
      '<span class="w">    </span><span class="sd">""" Generate summary of failures """</span>',
      '    <span class="n">failures</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="s2">"failures"</span><span class="p">]</span>',
      '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2"> debug generate_summary: failures: </span><span class="si">{</span><span class="n">failures</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      ' ',
      '    <span class="n">fa_summary</span> <span class="o">=</span> <span class="s2">"Poor quality retrieval of documentation."</span>',
      '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2"> debug generate_summary: fa_summary: </span><span class="si">{</span><span class="n">fa_summary</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      ' ',
      '    <span class="n">processed_logs</span> <span class="o">=</span> <span class="p">[</span><span class="sa">f</span><span class="s2">"failure-analysis-on-log-</span><span class="si">{</span><span class="n">failure</span><span class="p">[</span><span class="s1">\'id\'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span> <span class="k">for</span> <span class="n">failure</span> <span class="ow">in</span> <span class="n">failures</span><span class="p">]</span>',
      '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2"> debug generate_summary: processed_logs: </span><span class="si">{</span><span class="n">processed_logs</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      '    ',
      '    <span class="k">return</span> <span class="p">{</span><span class="s2">"fa_summary"</span><span class="p">:</span> <span class="n">fa_summary</span><span class="p">,</span> <span class="s2">"processed_logs"</span><span class="p">:</span> <span class="n">processed_logs</span><span class="p">}</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>



























      
      <section class="section-block-markdown-cell">
      <p>Por √∫ltimo, criamos o grafo, adicionamos os n√≥s e os <code>edges</code> e o compilamos.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">fa_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">FailureAnalysisState</span><span class="p">,</span><span class="n">output</span><span class="o">=</span><span class="n">FailureAnalysisOutputState</span><span class="p">)</span>
      
      <span class="n">fa_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"get_failures"</span><span class="p">,</span> <span class="n">get_failures</span><span class="p">)</span>
      <span class="n">fa_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"generate_summary"</span><span class="p">,</span> <span class="n">generate_summary</span><span class="p">)</span>
      
      <span class="n">fa_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"get_failures"</span><span class="p">)</span>
      <span class="n">fa_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"get_failures"</span><span class="p">,</span> <span class="s2">"generate_summary"</span><span class="p">)</span>
      <span class="n">fa_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"generate_summary"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="n">graph</span> <span class="o">=</span> <span class="n">fa_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv14.webp" width="184" height="333" alt="image uv 15" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a criar um log de teste</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">failure_log</span> <span class="o">=</span> <span class="p">{</span>',
      '    <span class="s2">"id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">,</span> ',
      '    <span class="s2">"question"</span><span class="p">:</span> <span class="s2">"What is the meaning of life?"</span><span class="p">,</span> ',
      '    <span class="s2">"docs"</span><span class="p">:</span> <span class="kc">None</span><span class="p">,</span> ',
      '    <span class="s2">"answer"</span><span class="p">:</span> <span class="s2">"42"</span><span class="p">,</span> ',
      '    <span class="s2">"grade"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> ',
      '    <span class="s2">"grader"</span><span class="p">:</span> <span class="s2">"AI"</span><span class="p">,</span> ',
      '    <span class="s2">"feedback"</span><span class="p">:</span> <span class="s2">"Good job!"</span>',
      '<span class="p">}</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>














      
      <section class="section-block-markdown-cell">
      <p>Executamos o grafo com o log de teste. Como a fun√ß√£o <code>get_failures</code> pega a chave <code>cleaned_logs</code> do estado, temos que passar o log para o grafo na mesma chave.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">graph</span><span class="o">.</span><span class="n">invoke</span><span class="p">({opening_brace}</span><span class="s2">"cleaned_logs"</span><span class="p">:</span> <span class="p">[</span><span class="n">failure_log</span><span class="p">]{closing_brace})</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>	 debug get_failures: cleaned_logs: [{opening_brace}'id': '1', 'question': 'What is the meaning of life?', 'docs': None, 'answer': '42', 'grade': 1, 'grader': 'AI', 'feedback': 'Good job!'{closing_brace}]
      	 debug get_failures: failures: [{'id': '1', 'question': 'What is the meaning of life?', 'docs': None, 'answer': '42', 'grade': 1, 'grader': 'AI', 'feedback': 'Good job!'}]
      	 debug generate_summary: failures: [{'id': '1', 'question': 'What is the meaning of life?', 'docs': None, 'answer': '42', 'grade': 1, 'grader': 'AI', 'feedback': 'Good job!'}]
      	 debug generate_summary: fa_summary: Poor quality retrieval of documentation.
      	 debug generate_summary: processed_logs: ['failure-analysis-on-log-1']
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[16]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'fa_summary': 'Poor quality retrieval of documentation.',
       'processed_logs': ['failure-analysis-on-log-1']}</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se ver que ele encontrou o log de teste, pois tem um valor de <code>1</code> no campo <code>grade</code> e, em seguida, gerou um resumo dos erros.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a definir todo o subgr√°fico juntos novamente para ficar mais claro e tamb√©m para remover os <code>print</code>s que colocamos para depura√ß√£o.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      
      <span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">add</span>
      <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Annotated</span>
      
      <span class="c1"># The structure of the logs</span>
      <span class="k">class</span> <span class="nc">Log</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="nb">id</span><span class="p">:</span> <span class="nb">str</span>
          <span class="n">question</span><span class="p">:</span> <span class="nb">str</span>
          <span class="n">docs</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">List</span><span class="p">]</span>
          <span class="n">answer</span><span class="p">:</span> <span class="nb">str</span>
          <span class="n">grade</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>
          <span class="n">grader</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
          <span class="n">feedback</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
      
      <span class="c1"># Failure clases</span>
      <span class="k">class</span> <span class="nc">FailureAnalysisState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">cleaned_logs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Log</span><span class="p">]</span>
          <span class="n">failures</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Log</span><span class="p">]</span>
          <span class="n">fa_summary</span><span class="p">:</span> <span class="nb">str</span>
          <span class="n">processed_logs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
      
      <span class="k">class</span> <span class="nc">FailureAnalysisOutputState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">fa_summary</span><span class="p">:</span> <span class="nb">str</span>
          <span class="n">processed_logs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
      
      <span class="c1"># Functions</span>
      <span class="k">def</span> <span class="nf">get_failures</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
      <span class="w">    </span><span class="sd">""" Get logs that contain a failure """</span>
          <span class="n">cleaned_logs</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="s2">"cleaned_logs"</span><span class="p">]</span>
          <span class="n">failures</span> <span class="o">=</span> <span class="p">[</span><span class="n">log</span> <span class="k">for</span> <span class="n">log</span> <span class="ow">in</span> <span class="n">cleaned_logs</span> <span class="k">if</span> <span class="s2">"grade"</span> <span class="ow">in</span> <span class="n">log</span><span class="p">]</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"failures"</span><span class="p">:</span> <span class="n">failures</span><span class="p">{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">generate_summary</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
      <span class="w">    </span><span class="sd">""" Generate summary of failures """</span>
          <span class="n">failures</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="s2">"failures"</span><span class="p">]</span>
          <span class="n">fa_summary</span> <span class="o">=</span> <span class="s2">"Poor quality retrieval of documentation."</span>
          <span class="n">processed_logs</span> <span class="o">=</span> <span class="p">[</span><span class="sa">f</span><span class="s2">"failure-analysis-on-log-</span><span class="si">{opening_brace}</span><span class="n">failure</span><span class="p">[</span><span class="s1">'id'</span><span class="p">]</span><span class="si">{closing_brace}</span><span class="s2">"</span> <span class="k">for</span> <span class="n">failure</span> <span class="ow">in</span> <span class="n">failures</span><span class="p">]</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"fa_summary"</span><span class="p">:</span> <span class="n">fa_summary</span><span class="p">,</span> <span class="s2">"processed_logs"</span><span class="p">:</span> <span class="n">processed_logs</span><span class="p">{closing_brace}</span>
      
      <span class="c1"># Build the graph</span>
      <span class="n">fa_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">FailureAnalysisState</span><span class="p">,</span><span class="n">output</span><span class="o">=</span><span class="n">FailureAnalysisOutputState</span><span class="p">)</span>
      
      <span class="n">fa_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"get_failures"</span><span class="p">,</span> <span class="n">get_failures</span><span class="p">)</span>
      <span class="n">fa_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"generate_summary"</span><span class="p">,</span> <span class="n">generate_summary</span><span class="p">)</span>
      
      <span class="n">fa_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"get_failures"</span><span class="p">)</span>
      <span class="n">fa_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"get_failures"</span><span class="p">,</span> <span class="s2">"generate_summary"</span><span class="p">)</span>
      <span class="n">fa_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"generate_summary"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="n">graph</span> <span class="o">=</span> <span class="n">fa_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv15.webp" width="184" height="333" alt="image uv 16" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se n√≥s o executarmos novamente, obteremos o mesmo resultado, mas sem os <code>print</code>s.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">graph</span><span class="o">.</span><span class="n">invoke</span><span class="p">({</span><span class="s2">"cleaned_logs"</span><span class="p">:</span> <span class="p">[</span><span class="n">failure_log</span><span class="p">]})</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'fa_summary\': \'Poor quality retrieval of documentation.\',',
          ' \'processed_logs\': [\'failure-analysis-on-log-1\']}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="Subgrafo-de-resumo-de-logs">Subgrafo de resumo de logs<a class="anchor-link" href="#Subgrafo-de-resumo-de-logs"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 139" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora criamos o subgrafo de resumo de logs. Neste caso, n√£o √© necess√°rio recriar a classe com a estrutura dos logs, ent√£o criamos as classes com a estrutura para os resumos dos logs e com a estrutura da sa√≠da.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># Summarization subgraph</span>',
      '<span class="k">class</span> <span class="nc">QuestionSummarizationState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
      '    <span class="n">cleaned_logs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Log</span><span class="p">]</span>',
      '    <span class="n">qs_summary</span><span class="p">:</span> <span class="nb">str</span>',
      '    <span class="n">report</span><span class="p">:</span> <span class="nb">str</span>',
      '    <span class="n">processed_logs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>',
      ' ',
      '<span class="k">class</span> <span class="nc">QuestionSummarizationOutputState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
      '    <span class="n">report</span><span class="p">:</span> <span class="nb">str</span>',
      '    <span class="n">processed_logs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>















      
      <section class="section-block-markdown-cell">
      <p>Agora definimos as fun√ß√µes dos n√≥s, uma gerar√° o resumo dos logs e outra "enviar√° o resumo para o Slack".</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span> <span class="nf">generate_summary</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>',
      '    <span class="n">cleaned_logs</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="s2">"cleaned_logs"</span><span class="p">]</span>',
      '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2"> debug generate_summary: cleaned_logs: </span><span class="si">{</span><span class="n">cleaned_logs</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      ' ',
      '    <span class="n">summary</span> <span class="o">=</span> <span class="s2">"Questions focused on ..."</span>',
      '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2"> debug generate_summary: summary: </span><span class="si">{</span><span class="n">summary</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      ' ',
      '    <span class="n">processed_logs</span> <span class="o">=</span> <span class="p">[</span><span class="sa">f</span><span class="s2">"summary-on-log-</span><span class="si">{</span><span class="n">log</span><span class="p">[</span><span class="s1">\'id\'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span> <span class="k">for</span> <span class="n">log</span> <span class="ow">in</span> <span class="n">cleaned_logs</span><span class="p">]</span>',
      '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2"> debug generate_summary: processed_logs: </span><span class="si">{</span><span class="n">processed_logs</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      ' ',
      '    <span class="k">return</span> <span class="p">{</span><span class="s2">"qs_summary"</span><span class="p">:</span> <span class="n">summary</span><span class="p">,</span> <span class="s2">"processed_logs"</span><span class="p">:</span> <span class="n">processed_logs</span><span class="p">}</span>',
      ' ',
      '<span class="k">def</span> <span class="nf">send_to_slack</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>',
      '    <span class="n">qs_summary</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="s2">"qs_summary"</span><span class="p">]</span>',
      '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2"> debug send_to_slack: qs_summary: </span><span class="si">{</span><span class="n">qs_summary</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      ' ',
      '    <span class="n">report</span> <span class="o">=</span> <span class="s2">"foo bar baz"</span>',
      '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2"> debug send_to_slack: report: </span><span class="si">{</span><span class="n">report</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      ' ',
      '    <span class="k">return</span> <span class="p">{</span><span class="s2">"report"</span><span class="p">:</span> <span class="n">report</span><span class="p">}</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>

























      
      <section class="section-block-markdown-cell">
      <p>Por √∫ltimo, criamos o grafo, adicionamos os n√≥s e as <code>edges</code> e o compilamos.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="c1"># Build the graph</span>
      <span class="n">qs_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">QuestionSummarizationState</span><span class="p">,</span><span class="n">output</span><span class="o">=</span><span class="n">QuestionSummarizationOutputState</span><span class="p">)</span>
      
      <span class="n">qs_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"generate_summary"</span><span class="p">,</span> <span class="n">generate_summary</span><span class="p">)</span>
      <span class="n">qs_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"send_to_slack"</span><span class="p">,</span> <span class="n">send_to_slack</span><span class="p">)</span>
      
      <span class="n">qs_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"generate_summary"</span><span class="p">)</span>
      <span class="n">qs_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"generate_summary"</span><span class="p">,</span> <span class="s2">"send_to_slack"</span><span class="p">)</span>
      <span class="n">qs_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"send_to_slack"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="n">graph</span> <span class="o">=</span> <span class="n">qs_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv16.webp" width="184" height="333" alt="image uv 17" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a testar com o log que criamos anteriormente.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">graph</span><span class="o">.</span><span class="n">invoke</span><span class="p">({opening_brace}</span><span class="s2">"cleaned_logs"</span><span class="p">:</span> <span class="p">[</span><span class="n">failure_log</span><span class="p">]{closing_brace})</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>	 debug generate_summary: cleaned_logs: [{opening_brace}'id': '1', 'question': 'What is the meaning of life?', 'docs': None, 'answer': '42', 'grade': 1, 'grader': 'AI', 'feedback': 'Good job!'{closing_brace}]
      	 debug generate_summary: summary: Questions focused on ...
      	 debug generate_summary: processed_logs: ['summary-on-log-1']
      	 debug send_to_slack: qs_summary: Questions focused on ...
      	 debug send_to_slack: report: foo bar baz
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[25]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>{opening_brace}'report': 'foo bar baz', 'processed_logs': ['summary-on-log-1']{closing_brace}</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Reescrevemos o subgrafo, tudo junto para ver com maior clareza e sem os <code>print</code>s.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="c1"># Summarization clases</span>
      <span class="k">class</span> <span class="nc">QuestionSummarizationState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">cleaned_logs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Log</span><span class="p">]</span>
          <span class="n">qs_summary</span><span class="p">:</span> <span class="nb">str</span>
          <span class="n">report</span><span class="p">:</span> <span class="nb">str</span>
          <span class="n">processed_logs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
      
      <span class="k">class</span> <span class="nc">QuestionSummarizationOutputState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">report</span><span class="p">:</span> <span class="nb">str</span>
          <span class="n">processed_logs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
      
      <span class="c1"># Functions</span>
      <span class="k">def</span> <span class="nf">generate_summary</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
          <span class="n">cleaned_logs</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="s2">"cleaned_logs"</span><span class="p">]</span>
          <span class="n">summary</span> <span class="o">=</span> <span class="s2">"Questions focused on ..."</span>
          <span class="n">processed_logs</span> <span class="o">=</span> <span class="p">[</span><span class="sa">f</span><span class="s2">"summary-on-log-</span><span class="si">{opening_brace}</span><span class="n">log</span><span class="p">[</span><span class="s1">'id'</span><span class="p">]</span><span class="si">{closing_brace}</span><span class="s2">"</span> <span class="k">for</span> <span class="n">log</span> <span class="ow">in</span> <span class="n">cleaned_logs</span><span class="p">]</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"qs_summary"</span><span class="p">:</span> <span class="n">summary</span><span class="p">,</span> <span class="s2">"processed_logs"</span><span class="p">:</span> <span class="n">processed_logs</span><span class="p">{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">send_to_slack</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
          <span class="n">qs_summary</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="s2">"qs_summary"</span><span class="p">]</span>
          <span class="n">report</span> <span class="o">=</span> <span class="s2">"foo bar baz"</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"report"</span><span class="p">:</span> <span class="n">report</span><span class="p">{closing_brace}</span>
      
      <span class="c1"># Build the graph</span>
      <span class="n">qs_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">QuestionSummarizationState</span><span class="p">,</span><span class="n">output</span><span class="o">=</span><span class="n">QuestionSummarizationOutputState</span><span class="p">)</span>
      
      <span class="n">qs_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"generate_summary"</span><span class="p">,</span> <span class="n">generate_summary</span><span class="p">)</span>
      <span class="n">qs_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"send_to_slack"</span><span class="p">,</span> <span class="n">send_to_slack</span><span class="p">)</span>
      
      <span class="n">qs_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"generate_summary"</span><span class="p">)</span>
      <span class="n">qs_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"generate_summary"</span><span class="p">,</span> <span class="s2">"send_to_slack"</span><span class="p">)</span>
      <span class="n">qs_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"send_to_slack"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="n">graph</span> <span class="o">=</span> <span class="n">qs_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv17.webp" width="184" height="333" alt="image uv 18" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Executamos o grafo novamente com o log de teste.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">graph</span><span class="o">.</span><span class="n">invoke</span><span class="p">({</span><span class="s2">"cleaned_logs"</span><span class="p">:</span> <span class="p">[</span><span class="n">failure_log</span><span class="p">]})</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'report\': \'foo bar baz\', \'processed_logs\': [\'summary-on-log-1\']}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="Grafo-principal">Grafo principal<a class="anchor-link" href="#Grafo-principal"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 140" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora que temos os dois subgrafos, podemos criar o grafo principal que os utilizar√°. Para isso, criamos a classe <code>EntryGraphState</code> que ter√° o estado dos dois subgrafos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># Entry Graph</span>',
      '<span class="k">class</span> <span class="nc">EntryGraphState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
      '    <span class="n">raw_logs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Log</span><span class="p">]</span>',
      '    <span class="n">cleaned_logs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Log</span><span class="p">]</span>',
      '    <span class="n">fa_summary</span><span class="p">:</span> <span class="nb">str</span> <span class="c1"># This will only be generated in the FA sub-graph</span>',
      '    <span class="n">report</span><span class="p">:</span> <span class="nb">str</span> <span class="c1"># This will only be generated in the QS sub-graph</span>',
      '    <span class="n">processed_logs</span><span class="p">:</span>  <span class="n">Annotated</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">add</span><span class="p">]</span> <span class="c1"># This will be generated in BOTH sub-graphs</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>












      
      <section class="section-block-markdown-cell">
      <p>Criamos uma fun√ß√£o de limpeza de logs, que ser√° um n√≥ que se executar√° antes dos dois subgrafos e que lhes fornecer√° os logs limpos atrav√©s da chave <code>cleaned_logs</code>, que √© a que os dois subgrafos tomam do estado.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span> <span class="nf">clean_logs</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>',
      '    <span class="c1"># Get logs</span>',
      '    <span class="n">raw_logs</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="s2">"raw_logs"</span><span class="p">]</span>',
      '    <span class="c1"># Data cleaning raw_logs -&gt; docs </span>',
      '    <span class="n">cleaned_logs</span> <span class="o">=</span> <span class="n">raw_logs</span>',
      '    <span class="k">return</span> <span class="p">{</span><span class="s2">"cleaned_logs"</span><span class="p">:</span> <span class="n">cleaned_logs</span><span class="p">}</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>











      
      <section class="section-block-markdown-cell">
      <p>Agora criamos o grafo principal</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># Build the graph</span>',
      '<span class="n">entry_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">EntryGraphState</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>







      
      <section class="section-block-markdown-cell">
      <p>Adicionamos os n√≥s. Para adicionar um subgr√°fico como n√≥, o que fazemos √© adicionar sua compila√ß√£o.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Add nodes</span>',
          '<span class="n">entry_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"clean_logs"</span><span class="p">,</span> <span class="n">clean_logs</span><span class="p">)</span>',
          '<span class="n">entry_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"question_summarization"</span><span class="p">,</span> <span class="n">qs_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">())</span>',
          '<span class="n">entry_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"failure_analysis"</span><span class="p">,</span> <span class="n">fa_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x107985ef0&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A partir de aqui j√° √© como se sempre, adicionamos os <code>edges</code> e o compilamos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Add edges</span>',
          '<span class="n">entry_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"clean_logs"</span><span class="p">)</span>',
          '<span class="n">entry_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"clean_logs"</span><span class="p">,</span> <span class="s2">"failure_analysis"</span><span class="p">)</span>',
          '<span class="n">entry_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"clean_logs"</span><span class="p">,</span> <span class="s2">"question_summarization"</span><span class="p">)</span>',
          '<span class="n">entry_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"failure_analysis"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>',
          '<span class="n">entry_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"question_summarization"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>',
          '',
          '<span class="c1"># Compile the graph</span>',
          '<span class="n">graph</span> <span class="o">=</span> <span class="n">entry_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Adding an edge to a graph that has already been compiled. This will not be reflected in the compiled graph.',
          'Adding an edge to a graph that has already been compiled. This will not be reflected in the compiled graph.',
          'Adding an edge to a graph that has already been compiled. This will not be reflected in the compiled graph.',
          'Adding an edge to a graph that has already been compiled. This will not be reflected in the compiled graph.',
          'Adding an edge to a graph that has already been compiled. This will not be reflected in the compiled graph.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por fim, mostramos o grafo. Adicionamos <code>xray=1</code> para que seja vis√≠vel o estado interno do grafo.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="c1"># Setting xray to 1 will show the internal structure of the nested graph</span>
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">(</span><span class="n">xray</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv18.webp" width="512" height="482" alt="image uv 19" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se n√£o tiv√©ssemos adicionado <code>xray=1</code>, o gr√°fico ficaria assim</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv19.webp" width="410" height="333" alt="image uv 20" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora criamos dois logs de teste, em um haver√° um erro (um valor em <code>grade</code>) e no outro n√£o.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># Dummy logs</span>',
      '<span class="n">question_answer</span> <span class="o">=</span> <span class="n">Log</span><span class="p">(</span>',
      '    <span class="nb">id</span><span class="o">=</span><span class="s2">"1"</span><span class="p">,</span>',
      '    <span class="n">question</span><span class="o">=</span><span class="s2">"How can I import ChatOllama?"</span><span class="p">,</span>',
      '    <span class="n">answer</span><span class="o">=</span><span class="s2">"To import ChatOllama, use: \'from langchain_community.chat_models import ChatOllama.\'"</span><span class="p">,</span>',
      '<span class="p">)</span>',
      ' ',
      '<span class="n">question_answer_feedback</span> <span class="o">=</span> <span class="n">Log</span><span class="p">(</span>',
      '    <span class="nb">id</span><span class="o">=</span><span class="s2">"2"</span><span class="p">,</span>',
      '    <span class="n">question</span><span class="o">=</span><span class="s2">"How can I use Chroma vector store?"</span><span class="p">,</span>',
      '    <span class="n">answer</span><span class="o">=</span><span class="s2">"To use Chroma, define: rag_chain = create_retrieval_chain(retriever, question_answer_chain)."</span><span class="p">,</span>',
      '    <span class="n">grade</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>',
      '    <span class="n">grader</span><span class="o">=</span><span class="s2">"Document Relevance Recall"</span><span class="p">,</span>',
      '    <span class="n">feedback</span><span class="o">=</span><span class="s2">"The retrieved documents discuss vector stores in general, but not Chroma specifically"</span><span class="p">,</span>',
      '<span class="p">)</span>',
      ' ',
      '<span class="n">raw_logs</span> <span class="o">=</span> <span class="p">[</span><span class="n">question_answer</span><span class="p">,</span><span class="n">question_answer_feedback</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






















      
      <section class="section-block-markdown-cell">
      <p>Passamo-los para o grafo principal</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">graph</span><span class="o">.</span><span class="n">invoke</span><span class="p">({</span><span class="s2">"raw_logs"</span><span class="p">:</span> <span class="n">raw_logs</span><span class="p">})</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'raw_logs\': [{\'id\': \'1\',',
          '   \'question\': \'How can I import ChatOllama?\',',
          '   \'answer\': "To import ChatOllama, use: \'from langchain_community.chat_models import ChatOllama.\'"},',
          '  {\'id\': \'2\',',
          '   \'question\': \'How can I use Chroma vector store?\',',
          '   \'answer\': \'To use Chroma, define: rag_chain = create_retrieval_chain(retriever, question_answer_chain).\',',
          '   \'grade\': 0,',
          '   \'grader\': \'Document Relevance Recall\',',
          '   \'feedback\': \'The retrieved documents discuss vector stores in general, but not Chroma specifically\'}],',
          ' \'cleaned_logs\': [{\'id\': \'1\',',
          '   \'question\': \'How can I import ChatOllama?\',',
          '   \'answer\': "To import ChatOllama, use: \'from langchain_community.chat_models import ChatOllama.\'"},',
          '  {\'id\': \'2\',',
          '   \'question\': \'How can I use Chroma vector store?\',',
          '   \'answer\': \'To use Chroma, define: rag_chain = create_retrieval_chain(retriever, question_answer_chain).\',',
          '   \'grade\': 0,',
          '   \'grader\': \'Document Relevance Recall\',',
          '   \'feedback\': \'The retrieved documents discuss vector stores in general, but not Chroma specifically\'}],',
          ' \'fa_summary\': \'Poor quality retrieval of documentation.\',',
          ' \'report\': \'foo bar baz\',',
          ' \'processed_logs\': [\'failure-analysis-on-log-2\',',
          '  \'summary-on-log-1\',',
          '  \'summary-on-log-2\']}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Assim como antes, escrevemos todo o grafo para v√™-lo com maior clareza</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="c1"># Entry Graph</span>
      <span class="k">class</span> <span class="nc">EntryGraphState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">raw_logs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Log</span><span class="p">]</span>
          <span class="n">cleaned_logs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Log</span><span class="p">]</span>
          <span class="n">fa_summary</span><span class="p">:</span> <span class="nb">str</span> <span class="c1"># This will only be generated in the FA sub-graph</span>
          <span class="n">report</span><span class="p">:</span> <span class="nb">str</span> <span class="c1"># This will only be generated in the QS sub-graph</span>
          <span class="n">processed_logs</span><span class="p">:</span>  <span class="n">Annotated</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">add</span><span class="p">]</span> <span class="c1"># This will be generated in BOTH sub-graphs</span>
      
      <span class="c1"># Functions</span>
      <span class="k">def</span> <span class="nf">clean_logs</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
          <span class="c1"># Get logs</span>
          <span class="n">raw_logs</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="s2">"raw_logs"</span><span class="p">]</span>
          <span class="c1"># Data cleaning raw_logs -&gt; docs </span>
          <span class="n">cleaned_logs</span> <span class="o">=</span> <span class="n">raw_logs</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"cleaned_logs"</span><span class="p">:</span> <span class="n">cleaned_logs</span><span class="p">{closing_brace}</span>
      
      <span class="c1"># Build the graph</span>
      <span class="n">entry_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">EntryGraphState</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">entry_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"clean_logs"</span><span class="p">,</span> <span class="n">clean_logs</span><span class="p">)</span>
      <span class="n">entry_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"question_summarization"</span><span class="p">,</span> <span class="n">qs_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">())</span>
      <span class="n">entry_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"failure_analysis"</span><span class="p">,</span> <span class="n">fa_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">())</span>
      
      <span class="c1"># Add edges</span>
      <span class="n">entry_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"clean_logs"</span><span class="p">)</span>
      <span class="n">entry_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"clean_logs"</span><span class="p">,</span> <span class="s2">"failure_analysis"</span><span class="p">)</span>
      <span class="n">entry_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"clean_logs"</span><span class="p">,</span> <span class="s2">"question_summarization"</span><span class="p">)</span>
      <span class="n">entry_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"failure_analysis"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      <span class="n">entry_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"question_summarization"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">entry_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="c1"># Setting xray to 1 will show the internal structure of the nested graph</span>
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">(</span><span class="n">xray</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv20.webp" width="512" height="482" alt="image uv 21" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Passamos os logs de teste ao grafo principal</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">graph</span><span class="o">.</span><span class="n">invoke</span><span class="p">({</span><span class="s2">"raw_logs"</span><span class="p">:</span> <span class="n">raw_logs</span><span class="p">})</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'raw_logs\': [{\'id\': \'1\',',
          '   \'question\': \'How can I import ChatOllama?\',',
          '   \'answer\': "To import ChatOllama, use: \'from langchain_community.chat_models import ChatOllama.\'"},',
          '  {\'id\': \'2\',',
          '   \'question\': \'How can I use Chroma vector store?\',',
          '   \'answer\': \'To use Chroma, define: rag_chain = create_retrieval_chain(retriever, question_answer_chain).\',',
          '   \'grade\': 0,',
          '   \'grader\': \'Document Relevance Recall\',',
          '   \'feedback\': \'The retrieved documents discuss vector stores in general, but not Chroma specifically\'}],',
          ' \'cleaned_logs\': [{\'id\': \'1\',',
          '   \'question\': \'How can I import ChatOllama?\',',
          '   \'answer\': "To import ChatOllama, use: \'from langchain_community.chat_models import ChatOllama.\'"},',
          '  {\'id\': \'2\',',
          '   \'question\': \'How can I use Chroma vector store?\',',
          '   \'answer\': \'To use Chroma, define: rag_chain = create_retrieval_chain(retriever, question_answer_chain).\',',
          '   \'grade\': 0,',
          '   \'grader\': \'Document Relevance Recall\',',
          '   \'feedback\': \'The retrieved documents discuss vector stores in general, but not Chroma specifically\'}],',
          ' \'fa_summary\': \'Poor quality retrieval of documentation.\',',
          ' \'report\': \'foo bar baz\',',
          ' \'processed_logs\': [\'failure-analysis-on-log-2\',',
          '  \'summary-on-log-1\',',
          '  \'summary-on-log-2\']}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Ramas-din%C3%A2micas">Ramas din√¢micas<a class="anchor-link" href="#Ramas-din%C3%A2micas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 141" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>At√© agora criamos n√≥s e <code>edges</code> est√°ticos, mas h√° momentos em que n√£o sabemos se vamos precisar de um galho at√© que o grafo seja executado. Para isso, podemos usar o m√©todo <code>SEND</code> do langgraph, que permite criar galhos dinamicamente.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para v√™-lo, vamos criar um grafo que gere piadas sobre alguns temas, mas como n√£o sabemos antecipadamente sobre quantos temas queremos gerar piadas, atrav√©s do m√©todo <code>SEND</code> vamos criar ramifica√ß√µes dinamicamente, de forma que se houverem temas restantes para gerar, uma nova ramifica√ß√£o ser√° criada.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Nota: Vamos a fazer esta se√ß√£o usando o Sonnet 3.7, pois a integra√ß√£o da HuggingFace n√£o possui a funcionalidade de <code>with_structured_output</code> que fornece uma sa√≠da estruturada com uma estrutura definida.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro importamos as bibliotecas necess√°rias.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">operator</span>',
      '<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>',
      '<span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">END</span><span class="p">,</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">langchain_anthropic</span> <span class="kn">import</span> <span class="n">ChatAnthropic</span>',
      ' ',
      '<span class="kn">import</span> <span class="nn">os</span>',
      '<span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>',
      ' ',
      '<span class="kn">import</span> <span class="nn">dotenv</span>',
      '<span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>',
      '<span class="n">ANTHROPIC_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"ANTHROPIC_LANGGRAPH_API_KEY"</span><span class="p">)</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>





















      
      <section class="section-block-markdown-cell">
      <p>Criamos as classes com a estrutura do estado.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span> <span class="nc">OverallState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
      '    <span class="n">topic</span><span class="p">:</span> <span class="nb">str</span>',
      '    <span class="n">subjects</span><span class="p">:</span> <span class="nb">list</span>',
      '    <span class="n">jokes</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">operator</span><span class="o">.</span><span class="n">add</span><span class="p">]</span>',
      '    <span class="n">best_selected_joke</span><span class="p">:</span> <span class="nb">str</span>',
      ' ',
      '<span class="k">class</span> <span class="nc">JokeState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
      '    <span class="n">subject</span><span class="p">:</span> <span class="nb">str</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>













      
      <section class="section-block-markdown-cell">
      <p>Criamos o LLM</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># Create the LLM model</span>',
      '<span class="n">llm</span> <span class="o">=</span> <span class="n">ChatAnthropic</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="s2">"claude-3-7-sonnet-20250219"</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">ANTHROPIC_TOKEN</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>







      
      <section class="section-block-markdown-cell">
      <p>Criamos a fun√ß√£o que gerar√° os temas.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a usar <code>with_structured_output</code> para que o LLM gere uma sa√≠da com uma estrutura definida por n√≥s, essa estrutura vamos definir com a classe <code>Subjects</code> que √© uma classe do tipo <code>BaseModel</code> de <code>Pydantic</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span>',
      ' ',
      '<span class="k">class</span> <span class="nc">Subjects</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>',
      '    <span class="n">subjects</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>',
      ' ',
      '<span class="n">subjects_prompt</span> <span class="o">=</span> <span class="s2">"""Generate a list of 3 sub-topics that are all related to this overall topic: </span><span class="si">{topic}</span><span class="s2">."""</span>',
      ' ',
      '<span class="k">def</span> <span class="nf">generate_topics</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">OverallState</span><span class="p">):</span>',
      '    <span class="n">prompt</span> <span class="o">=</span> <span class="n">subjects_prompt</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">topic</span><span class="o">=</span><span class="n">state</span><span class="p">[</span><span class="s2">"topic"</span><span class="p">])</span>',
      '    <span class="n">response</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">with_structured_output</span><span class="p">(</span><span class="n">Subjects</span><span class="p">)</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>',
      '    <span class="k">return</span> <span class="p">{</span><span class="s2">"subjects"</span><span class="p">:</span> <span class="n">response</span><span class="o">.</span><span class="n">subjects</span><span class="p">}</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
















      
      <section class="section-block-markdown-cell">
      <p>Agora definimos a fun√ß√£o que gerar√° os piadas.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span> <span class="nc">Joke</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>',
      '    <span class="n">joke</span><span class="p">:</span> <span class="nb">str</span>',
      '    ',
      '<span class="n">joke_prompt</span> <span class="o">=</span> <span class="s2">"""Generate a joke about </span><span class="si">{subject}</span><span class="s2">"""</span>',
      ' ',
      '<span class="k">def</span> <span class="nf">generate_joke</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">JokeState</span><span class="p">):</span>',
      '    <span class="n">prompt</span> <span class="o">=</span> <span class="n">joke_prompt</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">subject</span><span class="o">=</span><span class="n">state</span><span class="p">[</span><span class="s2">"subject"</span><span class="p">])</span>',
      '    <span class="n">response</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">with_structured_output</span><span class="p">(</span><span class="n">Joke</span><span class="p">)</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>',
      '    <span class="k">return</span> <span class="p">{</span><span class="s2">"jokes"</span><span class="p">:</span> <span class="p">[</span><span class="n">response</span><span class="o">.</span><span class="n">joke</span><span class="p">]}</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>














      
      <section class="section-block-markdown-cell">
      <p>E por √∫ltimo a fun√ß√£o que selecionar√° o melhor chiste.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span> <span class="nc">BestJoke</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>',
      '    <span class="nb">id</span><span class="p">:</span> <span class="nb">int</span>',
      ' ',
      '<span class="n">best_joke_prompt</span> <span class="o">=</span> <span class="s2">"""Below are a bunch of jokes about </span><span class="si">{topic}</span><span class="s2">. Select the best one! Return the ID of the best one, starting 0 as the ID for the first joke. Jokes: </span><span class="se">\\n\\n</span><span class="s2">  </span><span class="si">{jokes}</span><span class="s2">"""</span>',
      ' ',
      '<span class="k">def</span> <span class="nf">best_joke</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">OverallState</span><span class="p">):</span>',
      '    <span class="n">jokes</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\\n\\n</span><span class="s2">"</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"jokes"</span><span class="p">])</span>',
      '    <span class="n">prompt</span> <span class="o">=</span> <span class="n">best_joke_prompt</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">topic</span><span class="o">=</span><span class="n">state</span><span class="p">[</span><span class="s2">"topic"</span><span class="p">],</span> <span class="n">jokes</span><span class="o">=</span><span class="n">jokes</span><span class="p">)</span>',
      '    <span class="n">response</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">with_structured_output</span><span class="p">(</span><span class="n">BestJoke</span><span class="p">)</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>',
      '    <span class="k">return</span> <span class="p">{</span><span class="s2">"best_selected_joke"</span><span class="p">:</span> <span class="n">state</span><span class="p">[</span><span class="s2">"jokes"</span><span class="p">][</span><span class="n">response</span><span class="o">.</span><span class="n">id</span><span class="p">]}</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>















      
      <section class="section-block-markdown-cell">
      <p>Agora vamos criar uma fun√ß√£o que decida se deve ou n√£o criar uma nova branch com <code>SEND</code>, e para decidir isso, ela verificar√° se h√° t√≥picos restantes a serem gerados.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">langgraph.constants</span> <span class="kn">import</span> <span class="n">Send</span>',
      ' ',
      '<span class="k">def</span> <span class="nf">continue_to_jokes</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">OverallState</span><span class="p">):</span>',
      '    <span class="k">return</span> <span class="p">[</span><span class="n">Send</span><span class="p">(</span><span class="s2">"generate_joke"</span><span class="p">,</span> <span class="p">{</span><span class="s2">"subject"</span><span class="p">:</span> <span class="n">s</span><span class="p">})</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">state</span><span class="p">[</span><span class="s2">"subjects"</span><span class="p">]]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>









      
      <section class="section-block-markdown-cell">
      <p>Constru√≠mos o grafo, adicionamos os n√≥s e os <code>edges</code>.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="c1"># Build the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">OverallState</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"generate_topics"</span><span class="p">,</span> <span class="n">generate_topics</span><span class="p">)</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"generate_joke"</span><span class="p">,</span> <span class="n">generate_joke</span><span class="p">)</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"best_joke"</span><span class="p">,</span> <span class="n">best_joke</span><span class="p">)</span>
      
      <span class="c1"># Add edges</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"generate_topics"</span><span class="p">)</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_conditional_edges</span><span class="p">(</span><span class="s2">"generate_topics"</span><span class="p">,</span> <span class="n">continue_to_jokes</span><span class="p">,</span> <span class="p">[</span><span class="s2">"generate_joke"</span><span class="p">])</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"generate_joke"</span><span class="p">,</span> <span class="s2">"best_joke"</span><span class="p">)</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"best_joke"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">app</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="c1"># Display the graph</span>
      <span class="n">Image</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">())</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[8]:</div>
      <div class="output-png-output-subareaoutput_execute_result">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv21.webp" width="160" height="432" alt="image uv 22" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como se pode ver, o <code>edge</code> entre <code>generate_topics</code> e <code>generate_joke</code> √© representado por uma linha tracejada, indicando que √© um ramo din√¢mico.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos agora um dicion√°rio com a chave <code>topic</code> que √© necess√°ria pelo n√≥ <code>generate_topics</code> para gerar os t√≥picos e o passamos ao grafo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Call the graph: here we call it to generate a list of jokes</span>',
          '<span class="k">for</span> <span class="n">state</span> <span class="ow">in</span> <span class="n">app</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"topic"</span><span class="p">:</span> <span class="s2">"animals"</span><span class="p">}):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'generate_topics\': {\'subjects\': [\'Marine Animals\', \'Endangered Species\', \'Animal Behavior\']}}',
          '{\'generate_joke\': {\'jokes\': ["Why don\'t cats play poker in the wild? Too many cheetahs!"]}}',
          '{\'generate_joke\': {\'jokes\': ["Why don\'t sharks eat clownfish? Because they taste funny!"]}}',
          '{\'generate_joke\': {\'jokes\': ["Why don\'t endangered species tell jokes? Because they\'re afraid of dying out from laughter!"]}}',
          '{\'best_joke\': {\'best_selected_joke\': "Why don\'t cats play poker in the wild? Too many cheetahs!"}}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a criar o grafo com todo o c√≥digo junta para maior clareza.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">import</span> <span class="nn">operator</span>
      <span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span>
      
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">END</span><span class="p">,</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span>
      <span class="kn">from</span> <span class="nn">langgraph.constants</span> <span class="kn">import</span> <span class="n">Send</span>
      
      <span class="kn">from</span> <span class="nn">langchain_anthropic</span> <span class="kn">import</span> <span class="n">ChatAnthropic</span>
      
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="kn">import</span> <span class="nn">dotenv</span>
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">ANTHROPIC_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"ANTHROPIC_LANGGRAPH_API_KEY"</span><span class="p">)</span>
      
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span>
      
      <span class="c1"># Prompts we will use</span>
      <span class="n">subjects_prompt</span> <span class="o">=</span> <span class="s2">"""Generate a list of 3 sub-topics that are all related to this overall topic: </span><span class="si">{opening_brace}topic{closing_brace}</span><span class="s2">."""</span>
      <span class="n">joke_prompt</span> <span class="o">=</span> <span class="s2">"""Generate a joke about </span><span class="si">{opening_brace}subject{closing_brace}</span><span class="s2">"""</span>
      <span class="n">best_joke_prompt</span> <span class="o">=</span> <span class="s2">"""Below are a bunch of jokes about </span><span class="si">{opening_brace}topic{closing_brace}</span><span class="s2">. Select the best one! Return the ID of the best one, starting 0 as the ID for the first joke. Jokes: </span><span class="se">\n\n</span><span class="s2">  </span><span class="si">{opening_brace}jokes{closing_brace}</span><span class="s2">"""</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatAnthropic</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="s2">"claude-3-7-sonnet-20250219"</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">ANTHROPIC_TOKEN</span><span class="p">)</span>
      
      <span class="k">class</span> <span class="nc">Subjects</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
          <span class="n">subjects</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
      
      <span class="k">class</span> <span class="nc">BestJoke</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
          <span class="nb">id</span><span class="p">:</span> <span class="nb">int</span>
          
      <span class="k">class</span> <span class="nc">OverallState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">topic</span><span class="p">:</span> <span class="nb">str</span>
          <span class="n">subjects</span><span class="p">:</span> <span class="nb">list</span>
          <span class="n">jokes</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">operator</span><span class="o">.</span><span class="n">add</span><span class="p">]</span>
          <span class="n">best_selected_joke</span><span class="p">:</span> <span class="nb">str</span>
      
      <span class="k">class</span> <span class="nc">JokeState</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">subject</span><span class="p">:</span> <span class="nb">str</span>
      
      <span class="k">class</span> <span class="nc">Joke</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
          <span class="n">joke</span><span class="p">:</span> <span class="nb">str</span>
      
      <span class="k">def</span> <span class="nf">generate_topics</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">OverallState</span><span class="p">):</span>
          <span class="n">prompt</span> <span class="o">=</span> <span class="n">subjects_prompt</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">topic</span><span class="o">=</span><span class="n">state</span><span class="p">[</span><span class="s2">"topic"</span><span class="p">])</span>
          <span class="n">response</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">with_structured_output</span><span class="p">(</span><span class="n">Subjects</span><span class="p">)</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"subjects"</span><span class="p">:</span> <span class="n">response</span><span class="o">.</span><span class="n">subjects</span><span class="p">{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">continue_to_jokes</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">OverallState</span><span class="p">):</span>
          <span class="k">return</span> <span class="p">[</span><span class="n">Send</span><span class="p">(</span><span class="s2">"generate_joke"</span><span class="p">,</span> <span class="p">{opening_brace}</span><span class="s2">"subject"</span><span class="p">:</span> <span class="n">s</span><span class="p">{closing_brace})</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">state</span><span class="p">[</span><span class="s2">"subjects"</span><span class="p">]]</span>
      
      <span class="k">def</span> <span class="nf">generate_joke</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">JokeState</span><span class="p">):</span>
          <span class="n">prompt</span> <span class="o">=</span> <span class="n">joke_prompt</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">subject</span><span class="o">=</span><span class="n">state</span><span class="p">[</span><span class="s2">"subject"</span><span class="p">])</span>
          <span class="n">response</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">with_structured_output</span><span class="p">(</span><span class="n">Joke</span><span class="p">)</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"jokes"</span><span class="p">:</span> <span class="p">[</span><span class="n">response</span><span class="o">.</span><span class="n">joke</span><span class="p">]{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">best_joke</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">OverallState</span><span class="p">):</span>
          <span class="n">jokes</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\n\n</span><span class="s2">"</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"jokes"</span><span class="p">])</span>
          <span class="n">prompt</span> <span class="o">=</span> <span class="n">best_joke_prompt</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">topic</span><span class="o">=</span><span class="n">state</span><span class="p">[</span><span class="s2">"topic"</span><span class="p">],</span> <span class="n">jokes</span><span class="o">=</span><span class="n">jokes</span><span class="p">)</span>
          <span class="n">response</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">with_structured_output</span><span class="p">(</span><span class="n">BestJoke</span><span class="p">)</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"best_selected_joke"</span><span class="p">:</span> <span class="n">state</span><span class="p">[</span><span class="s2">"jokes"</span><span class="p">][</span><span class="n">response</span><span class="o">.</span><span class="n">id</span><span class="p">]{closing_brace}</span>
      
      <span class="c1"># Build the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">OverallState</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"generate_topics"</span><span class="p">,</span> <span class="n">generate_topics</span><span class="p">)</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"generate_joke"</span><span class="p">,</span> <span class="n">generate_joke</span><span class="p">)</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"best_joke"</span><span class="p">,</span> <span class="n">best_joke</span><span class="p">)</span>
      
      <span class="c1"># Add edges</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"generate_topics"</span><span class="p">)</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_conditional_edges</span><span class="p">(</span><span class="s2">"generate_topics"</span><span class="p">,</span> <span class="n">continue_to_jokes</span><span class="p">,</span> <span class="p">[</span><span class="s2">"generate_joke"</span><span class="p">])</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"generate_joke"</span><span class="p">,</span> <span class="s2">"best_joke"</span><span class="p">)</span>
      <span class="n">graph</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"best_joke"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">app</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="c1"># Display the graph</span>
      <span class="n">Image</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">())</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[1]:</div>
      <div class="output-png-output-subareaoutput_execute_result">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv22.webp" width="160" height="432" alt="image uv 23" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a execut√°-lo, mas agora, em vez de <code>animais</code>, vamos fazer com <code>carros</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">state</span> <span class="ow">in</span> <span class="n">app</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"topic"</span><span class="p">:</span> <span class="s2">"cars"</span><span class="p">}):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'generate_topics\': {\'subjects\': [\'Car Maintenance and Repair\', \'Electric and Hybrid Vehicles\', \'Automotive Design and Engineering\']}}',
          '{\'generate_joke\': {\'jokes\': ["Why don\'t electric cars tell jokes? They\'re afraid of running out of charge before they get to the punchline!"]}}',
          '{\'generate_joke\': {\'jokes\': ["Why don\'t automotive engineers play hide and seek? Because good luck hiding when you\'re always making a big noise about torque!"]}}',
          '{\'generate_joke\': {\'jokes\': ["Why don\'t cars ever tell their own jokes? Because they always exhaust themselves during the delivery! Plus, their timing belts are always a little off."]}}',
          '{\'best_joke\': {\'best_selected_joke\': "Why don\'t electric cars tell jokes? They\'re afraid of running out of charge before they get to the punchline!"}}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Melhorar-o-chatbot-com-ferramentas">Melhorar o chatbot com ferramentas<a class="anchor-link" href="#Melhorar-o-chatbot-com-ferramentas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 142" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para lidar com algumas consultas, nosso chatbot n√£o pode responder <code>com base em seu conhecimento</code>, ent√£o vamos integrar uma ferramenta de busca na web. Nosso bot pode usar essa ferramenta para encontrar informa√ß√µes relevantes e fornecer respostas melhores.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Requisitos">Requisitos<a class="anchor-link" href="#Requisitos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 143" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Antes de come√ßar, temos que instalar o buscador <a href="https://python.langchain.com/docs/integrations/tools/tavily_search/" target="_blank" rel="nofollow noreferrer">Tavily</a> que √© um buscador web que nos permite buscar informa√ß√µes na web.</p>
      <div class="highlight">
        <pre><span></span>pip<span class="w"> </span>install<span class="w"> </span>-U<span class="w"> </span>tavily-python<span class="w"> </span>langchain_community<span class="sb">```</span></pre>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Depois, temos que criar uma <a href="https://app.tavily.com/home" target="_blank" rel="nofollow noreferrer">API KEY</a>, escrevemos no nosso arquivo <code>.env</code> e carregamos em uma vari√°vel.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">dotenv</span>',
      '<span class="kn">import</span> <span class="nn">os</span>',
      ' ',
      '<span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>',
      ' ',
      '<span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>',
      '<span class="n">TAVILY_API_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"TAVILY_LANGGRAPH_API_KEY"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>












      
      <section class="section-block-markdown-cell">
      <h3 id="Chatbot-com-ferramentas">Chatbot com ferramentas<a class="anchor-link" href="#Chatbot-com-ferramentas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 144" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro criamos o estado e o LLM</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>',
      '<span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>',
      '<span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>',
      '<span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>',
      ' ',
      '<span class="kn">import</span> <span class="nn">json</span>',
      '<span class="kn">import</span> <span class="nn">os</span>',
      '<span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>',
      ' ',
      '<span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>',
      ' ',
      '<span class="kn">import</span> <span class="nn">dotenv</span>',
      '<span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>',
      '<span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>',
      ' ',
      '<span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
      '    <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>',
      ' ',
      '<span class="c1"># Create the LLM</span>',
      '<span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>',
      '<span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>',
      '<span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>',
      '    <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>',
      '    <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>',
      '    <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>',
      '    <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
      '    <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="c1"># Create the chat model</span>',
      '<span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>







































      
      <section class="section-block-markdown-cell">
      <p>Agora, definimos a ferramenta de busca na web atrav√©s do <a href="https://python.langchain.com/api_reference/community/tools/langchain_community.tools.tavily_search.tool.TavilySearchResults.html" target="_blank" rel="nofollow noreferrer">TavilySearchResults</a></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">langchain_community.utilities.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchAPIWrapper</span>',
      '<span class="kn">from</span> <span class="nn">langchain_community.tools.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchResults</span>',
      ' ',
      '<span class="n">TAVILY_API_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"TAVILY_LANGGRAPH_API_KEY"</span><span class="p">)</span>',
      ' ',
      '<span class="n">wrapper</span> <span class="o">=</span> <span class="n">TavilySearchAPIWrapper</span><span class="p">(</span><span class="n">tavily_api_key</span><span class="o">=</span><span class="n">TAVILY_API_KEY</span><span class="p">)</span>',
      '<span class="n">tool</span> <span class="o">=</span> <span class="n">TavilySearchResults</span><span class="p">(</span><span class="n">api_wrapper</span><span class="o">=</span><span class="n">wrapper</span><span class="p">,</span> <span class="n">max_results</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>












      
      <section class="section-block-markdown-cell">
      <p>Testamos a ferramenta, vamos fazer uma busca na internet.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">tool</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="s2">"What was the result of Real Madrid's at last match in the Champions League?"</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Failed to multipart ingest runs: langsmith.utils.LangSmithError: Failed to POST https://eu.api.smith.langchain.com/runs/multipart in LangSmith API. HTTPError('403 Client Error: Forbidden for url: https://eu.api.smith.langchain.com/runs/multipart', '{opening_brace}"error":"Forbidden"{closing_brace}\n')
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt-output-prompt">Out[3]:</div>
      <div class="output-text-output-subareaoutput_execute_result">
      <pre>[{opening_brace}'title': 'HIGHLIGHTS | Real Madrid 3-2 Legan√©s | LaLiga 2024/25 - YouTube',
        'url': 'https://www.youtube.com/watch?v=Np-Kwz4RDpY',
        'content': "20:14 ¬∑ Go to channel ¬∑ RONALDO'S LAST MATCH WITH REAL MADRID: THE MOST THRILLING FINAL EVER! ... Champions League 1/4 Final | PES. Football",
        'score': 0.65835214},
       {'title': 'Real Madrid | History | UEFA Champions League',
        'url': 'https://www.uefa.com/uefachampionsleague/history/clubs/50051--real-madrid/',
        'content': '1955/56 P W D L Final 7 5 0 2\nUEFA Champions League [...] 2010/11 P W D L Semi-finals 12 8 3 1\n2009/10 P W D L Round of 16 8 4 2 2\n2000s\n2008/09 P W D L Round of 16 8 4 0 4\n2007/08 P W D L Round of 16 8 3 2 3\n2006/07 P W D L Round of 16 8 4 2 2\n2005/06 P W D L Round of 16 8 3 2 3\n2004/05 P W D L Round of 16 10 6 2 2\n2003/04 P W D L Quarter-finals 10 6 3 1\n2002/03 P W D L Semi-finals 16 7 5 4\n2001/02 P W D L Final 17 12 3 2\n2000/01 P W D L Semi-finals 16 9 2 5\n1990s\n1999/00 P W D L Final 17 10 3 4\n1998/99 P W D L Quarter-finals 8 4 1 3 [...] 1969/70 P W D L Second round 4 2 0 2\n1968/69 P W D L Second round 4 3 0 1\n1967/68 P W D L Semi-finals 8 2 4 2\n1966/67 P W D L Quarter-finals 4 1 0 3\n1965/66 P W D L Final 9 5 2 2\n1964/65 P W D L Quarter-finals 6 4 1 1\n1963/64 P W D L Final 9 7 0 2\n1962/63 P W D L Preliminary round 2 0 1 1\n1961/62 P W D L Final 10 8 0 2\n1960/61 P W D L First round 2 0 1 1\n1950s\n1959/60 P W D L Final 7 6 0 1\n1958/59 P W D L Final 8 5 2 1\n1957/58 P W D L Final 7 5 1 1\n1956/57 P W D L Final 8 6 1 1',
        'score': 0.6030211}]</pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Os resultados s√£o resumos de p√°ginas que nosso chatbot pode usar para responder perguntas.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos uma lista de ferramentas, pois nosso grafo precisa definir as ferramentas por meio de uma lista.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tools_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">tool</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Agora que temos a lista de <code>tools</code>, criamos um <code>llm_with_tools</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># Modification: tell the LLM which tools it can call</span>',
      '<span class="n">llm_with_tools</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">bind_tools</span><span class="p">(</span><span class="n">tools_list</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>







      
      <section class="section-block-markdown-cell">
      <p>Definimos a fun√ß√£o queir√° no n√≥ chat bot</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># Define the chatbot function</span>',
      '<span class="k">def</span> <span class="nf">chatbot_function</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>',
      '    <span class="k">return</span> <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">llm_with_tools</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])]}</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>








      
      <section class="section-block-markdown-cell">
      <p>Precisamos criar uma fun√ß√£o para executar as <code>tools_list</code> se forem chamadas. Adicionamos as <code>tools_list</code> a um novo n√≥.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mais tarde faremos isso com o m√©todo <a href="https://langchain-ai.github.io/langgraph/reference/prebuilt/#toolnode" target="_blank" rel="nofollow noreferrer">ToolNode</a> de <code>LangGraph</code>, mas primeiro o construiremos n√≥s mesmos para entender como funciona.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a implementar a classe <code>BasicToolNode</code>, que verifica a mensagem mais recente no estado e chama as <code>tools_list</code> se a mensagem contiver <code>tool_calls</code>.
      Baseia-se no suporte a <code>tool_calling</code> dos <code>LLMs</code>, que est√° dispon√≠vel na <code>Anthropic</code>, <code>HuggingFace</code>, <code>Google Gemini</code>, <code>OpenAI</code> e v√°rios outros provedores de <code>LLM</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">ToolMessage</span>',
      ' ',
      '<span class="k">class</span> <span class="nc">BasicToolNode</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">"""A node that runs the tools requested in the last AIMessage."""</span>',
      ' ',
      '    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tools</span><span class="p">:</span> <span class="nb">list</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>',
      '<span class="w">        </span><span class="sd">"""</span>',
      '<span class="sd">        Initialize the tools</span>',
      ' ',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            tools (list): The tools to use</span>',
      ' ',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            None</span>',
      '<span class="sd">        """</span>',
      '        <span class="c1"># Initialize the tools</span>',
      '        <span class="bp">self</span><span class="o">.</span><span class="n">tools_by_name</span> <span class="o">=</span> <span class="p">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="p">:</span> <span class="n">tool</span> <span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">}</span>',
      ' ',
      '    <span class="k">def</span> <span class="fm">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">inputs</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>',
      '<span class="w">        </span><span class="sd">"""</span>',
      '<span class="sd">        Call the node</span>',
      ' ',
      '<span class="sd">        Args:</span>',
      '<span class="sd">            inputs (dict): The inputs to the node</span>',
      ' ',
      '<span class="sd">        Returns:</span>',
      '<span class="sd">            dict: The outputs of the node</span>',
      '<span class="sd">        """</span>',
      '        <span class="c1"># Get the last message</span>',
      '        <span class="k">if</span> <span class="n">messages</span> <span class="o">:=</span> <span class="n">inputs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"messages"</span><span class="p">,</span> <span class="p">[]):</span>',
      '            <span class="n">message</span> <span class="o">=</span> <span class="n">messages</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
      '        <span class="k">else</span><span class="p">:</span>',
      '            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">"No message found in input"</span><span class="p">)</span>',
      '        ',
      '        <span class="c1"># Execute the tools</span>',
      '        <span class="n">outputs</span> <span class="o">=</span> <span class="p">[]</span>',
      '        <span class="k">for</span> <span class="n">tool_call</span> <span class="ow">in</span> <span class="n">message</span><span class="o">.</span><span class="n">tool_calls</span><span class="p">:</span>',
      '            <span class="n">tool_result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">tools_by_name</span><span class="p">[</span><span class="n">tool_call</span><span class="p">[</span><span class="s2">"name"</span><span class="p">]]</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span>',
      '                <span class="n">tool_call</span><span class="p">[</span><span class="s2">"args"</span><span class="p">]</span>',
      '            <span class="p">)</span>',
      '            <span class="n">outputs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>',
      '                <span class="n">ToolMessage</span><span class="p">(</span>',
      '                    <span class="n">content</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">tool_result</span><span class="p">),</span>',
      '                    <span class="n">name</span><span class="o">=</span><span class="n">tool_call</span><span class="p">[</span><span class="s2">"name"</span><span class="p">],</span>',
      '                    <span class="n">tool_call_id</span><span class="o">=</span><span class="n">tool_call</span><span class="p">[</span><span class="s2">"id"</span><span class="p">],</span>',
      '                <span class="p">)</span>',
      '            <span class="p">)</span>',
      '        <span class="k">return</span> <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">outputs</span><span class="p">}</span>',
      ' ',
      '<span class="n">basic_tool_node</span> <span class="o">=</span> <span class="n">BasicToolNode</span><span class="p">(</span><span class="n">tools</span><span class="o">=</span><span class="n">tools_list</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>























































      
      <section class="section-block-markdown-cell">
      <p>N√≥s usamos <a href="https://python.langchain.com/api_reference/core/messages/langchain_core.messages.tool.ToolMessage.html" target="_blank" rel="nofollow noreferrer">ToolMessage</a> que passa o resultado de executar uma <code>tool</code> de volta para o <code>LLM</code>.
      <code>ToolMessage</code> cont√©m o resultado de uma invoca√ß√£o de uma <code>tool</code>.
      Isso significa que, assim que temos o resultado de usar uma <code>Tool</code>, passamos esse resultado para o LLM processar.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com o objeto <code>basic_tool_node</code> (que √© um objeto da classe <code>BasicToolNode</code> que criamos), j√° podemos fazer com que o LLM execute <code>tool</code>s.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora, assim como fizemos quando constru√≠mos um chatbot b√°sico, vamos criar o grafo e adicionar n√≥s a ele.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Create graph</span>',
          '<span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>',
          '',
          '<span class="c1"># Add the chatbot node</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chatbot_function</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"tools_node"</span><span class="p">,</span> <span class="n">basic_tool_node</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x14996cd70&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Quando o LLM receber uma mensagem, como conhece as <code>tools</code> que tem √† disposi√ß√£o, decidir√° se deve responder ou usar uma <code>tool</code>. Ent√£o, vamos criar uma fun√ß√£o de roteamento, que executar√° uma <code>tool</code> se o LLM decidir us√°-la, ou caso contr√°rio, terminar√° a execu√ß√£o do grafo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span> <span class="nf">route_tools_function</span><span class="p">(</span>',
      '    <span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">,</span>',
      '<span class="p">):</span>',
      '<span class="w">    </span><span class="sd">"""</span>',
      '<span class="sd">    Use in the conditional_edge to route to the ToolNode if the last message</span>',
      '<span class="sd">    has tool calls. Otherwise, route to the end.</span>',
      '<span class="sd">    """</span>',
      '    <span class="c1"># Get last message</span>',
      '    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>',
      '        <span class="n">ai_message</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
      '    <span class="k">elif</span> <span class="n">messages</span> <span class="o">:=</span> <span class="n">state</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"messages"</span><span class="p">,</span> <span class="p">[]):</span>',
      '        <span class="n">ai_message</span> <span class="o">=</span> <span class="n">messages</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
      '    <span class="k">else</span><span class="p">:</span>',
      '        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">"No messages found in input state to tool_edge: </span><span class="si">{</span><span class="n">state</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      '    ',
      '    <span class="c1"># Router in function of last message</span>',
      '    <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">ai_message</span><span class="p">,</span> <span class="s2">"tool_calls"</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">ai_message</span><span class="o">.</span><span class="n">tool_calls</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>',
      '        <span class="k">return</span> <span class="s2">"tools_node"</span>',
      '    <span class="k">return</span> <span class="n">END</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
























      
      <section class="section-block-markdown-cell">
      <p>Adicionamos os <code>edge</code>s.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Temos que adicionar uma <code>edge</code> especial atrav√©s de <code>add_conditional_edges</code>, que criar√° um n√≥ condicional. Une o n√≥ <code>chatbot_node</code> com a fun√ß√£o de roteamento que criamos anteriormente <code>route_tools_function</code>. Com este n√≥, se obtivermos na sa√≠da de <code>route_tools_function</code> a string <code>tools_node</code>, o grafo ser√° roteado para o n√≥ <code>tools_node</code>, mas se recebermos <code>END</code>, o grafo ser√° roteado para o n√≥ <code>END</code> e terminar√° a execu√ß√£o do grafo.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mais tarde, substituiremos isso pelo m√©todo pr√©-constru√≠do <code>tools_condition</code>, mas agora o implementamos n√≥s mesmos para ver como funciona.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por √∫ltimo, adiciona-se outro <code>edge</code> que une <code>tools_node</code> com <code>chatbot_node</code>, para que quando termine de executar uma <code>tool</code> o grafo volte ao n√≥ do <code>LLM</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Add edges</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_conditional_edges</span><span class="p">(</span>',
          '    <span class="s2">"chatbot_node"</span><span class="p">,</span>',
          '    <span class="n">route_tools_function</span><span class="p">,</span>',
          '    <span class="c1"># The following dictionary lets you tell the graph to interpret the condition\'s outputs as a specific node</span>',
          '    <span class="c1"># It defaults to the identity function, but if you</span>',
          '    <span class="c1"># want to use a node named something else apart from "tools",</span>',
          '    <span class="c1"># You can update the value of the dictionary to something else</span>',
          '    <span class="c1"># e.g., "tools": "my_tools"</span>',
          '    <span class="p">{</span><span class="s2">"tools_node"</span><span class="p">:</span> <span class="s2">"tools_node"</span><span class="p">,</span> <span class="n">END</span><span class="p">:</span> <span class="n">END</span><span class="p">},</span>',
          '<span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"tools_node"</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x14996cd70&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Compilamos o n√≥ e o representamos</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>
      
      <span class="k">try</span><span class="p">:</span>
          <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Error al visualizar el grafo: </span><span class="si">{opening_brace}</span><span class="n">e</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv23.webp" width="260" height="249" alt="image uv 24" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora podemos fazer perguntas ao bot fora de seus dados de treinamento</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Colors for the terminal</span>',
          '<span class="n">COLOR_GREEN</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[32m"</span>',
          '<span class="n">COLOR_YELLOW</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[33m"</span>',
          '<span class="n">COLOR_RESET</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[0m"</span>',
          '',
          '',
          '<span class="k">def</span> <span class="nf">stream_graph_updates</span><span class="p">(</span><span class="n">user_input</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>',
          '    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">}]}):</span>',
          '        <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">event</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>',
          '            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_GREEN</span><span class="si">}</span><span class="s2">User: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}{</span><span class="n">user_input</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_YELLOW</span><span class="si">}</span><span class="s2">Assistant: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}{</span><span class="n">value</span><span class="p">[</span><span class="s1">\'messages\'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">content</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
          '    <span class="k">try</span><span class="p">:</span>',
          '        <span class="n">user_input</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s2">"User: "</span><span class="p">)</span>',
          '        <span class="k">if</span> <span class="n">user_input</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span><span class="s2">"quit"</span><span class="p">,</span> <span class="s2">"exit"</span><span class="p">,</span> <span class="s2">"q"</span><span class="p">]:</span>',
          '            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_GREEN</span><span class="si">}</span><span class="s2">User: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}{</span><span class="n">user_input</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_YELLOW</span><span class="si">}</span><span class="s2">Assistant: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}</span><span class="s2">Goodbye!"</span><span class="p">)</span>',
          '            <span class="k">break</span>',
          '',
          '        <span class="n">stream_graph_updates</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span>',
          '    <span class="k">except</span><span class="p">:</span>',
          '        <span class="c1"># fallback if input() is not available</span>',
          '        <span class="n">user_input</span> <span class="o">=</span> <span class="s2">"What do you know about LangGraph?"</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="s2">"User: "</span> <span class="o">+</span> <span class="n">user_input</span><span class="p">)</span>',
          '        <span class="n">stream_graph_updates</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span>',
          '        <span class="k">break</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-green-fg">User: </span>How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>',
          '<span class="ansi-green-fg">User: </span>How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>[{"title": "Real Madrid 3-2 Leganes: Goals and highlights - LaLiga 24/25 | Marca", "url": "https://www.marca.com/en/soccer/laliga/r-madrid-leganes/2025/03/29/01_0101_20250329_186_957-live.html", "content": "While their form has varied throughout the campaign there is no denying Real Madrid are a force at home in LaLiga this season, as they head into Saturday\'s match having picked up 34 points from 13 matches.\n\nAs for Leganes they currently sit 18th in the table, though they are level with Alaves for 17th as both teams look to stay in the top flight. [...] The two teams have already played twice this season, with Real Madrid securing a 3-0 win in the reverse league fixture. They also met in the quarter-finals of the Copa del Rey, a game Real won 3-2.\n\nReal Madrid vs Leganes LIVE - Latest Updates\n\nMatch ends, Real Madrid 3, Leganes 2.\n\nSecond Half ends, Real Madrid 3, Leganes 2.\n\nFoul by Vin\u00edcius J\u00fanior (Real Madrid).\n\nSeydouba Ciss\u00e9 (Leganes) wins a free kick in the defensive half. [...] Goal! Real Madrid 1, Leganes 1. Diego Garc\u00eda (Leganes) left footed shot from very close range.\n\nAttempt missed. \u00d3scar Rodr\u00edguez (Leganes) left footed shot from the centre of the box.\n\nGoal! Real Madrid 1, Leganes 0. Kylian Mbapp\u00e9 (Real Madrid) converts the penalty with a right footed shot.\n\nPenalty Real Madrid. Arda G\u00fcler draws a foul in the penalty area.\n\nPenalty conceded by \u00d3scar Rodr\u00edguez (Leganes) after a foul in the penalty area.\n\nDelay over. They are ready to continue.", "score": 0.8548001}, {"title": "Real Madrid 3-2 Legan\u00e9s (Mar 29, 2025) Game Analysis - ESPN", "url": "https://www.espn.com/soccer/report/_/gameId/704946", "content": "Real Madrid\n\nLegan\u00e9s\n\nMbapp\u00e9 nets twice to keep Real Madrid\'s title hopes alive\n\nReal Madrid vs. Legan\u00e9s - Game Highlights\n\nWatch the Game Highlights from Real Madrid vs. Legan\u00e9s, 03/30/2025\n\nReal Madrid\'s Kylian Mbapp\u00e9 struck twice to help his side come from behind to claim a hard-fought 3-2 home win over relegation-threatened Leganes on Saturday to move the second-placed reigning champions level on points with leaders Barcelona. [...] Leganes pushed for an equaliser but fell to a third consecutive defeat to sit 18th on 27 points, level with Alaves who are one place higher in the safety zone on goal difference.\n\n\"We have done a tremendous job. We leave with our heads held high because we were fighting until the end to score here,\" Leganes striker Garcia said.\n\n\"Ultimately, it was down to the details that they took it. We played a very serious game and now we have to think about next week.\"\n\nGame Information", "score": 0.82220376}]',
          '<span class="ansi-green-fg">User: </span>How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>',
          '<span class="ansi-green-fg">User: </span>How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>[{"title": "Real Madrid vs Leganes 3-2 | Highlights &amp; All Goals - YouTube", "url": "https://www.youtube.com/watch?v=ngBWsjmeHEk", "content": "Real Madrid secured a dramatic 3-2 victory over Leganes in an intense La Liga showdown on 29 March 2025! \u26bd Watch all the goals and", "score": 0.5157425}, {"title": "Real Madrid 3-2 Legan\u00e9s (Mar 29, 2025) Game Analysis - ESPN", "url": "https://www.espn.com/soccer/report/_/gameId/704946", "content": "\"We know what we always have to do: win. We started well, in the opposition half, and we scored a goal. Then we didn\'t play well for 20 minutes and conceded two goals,\" said Mbapp\u00e9.\n\n\"But we know that if we play well we\'ll score and in the second half we scored two goals. We won the game and we\'re very happy.\n\n\"We worked on [the set piece] a few weeks ago with the staff. I knew I could shoot this way, I saw the space. I asked the others to let me shoot and it worked out well.\" [...] Leganes pushed for an equaliser but fell to a third consecutive defeat to sit 18th on 27 points, level with Alaves who are one place higher in the safety zone on goal difference.\n\n\"We have done a tremendous job. We leave with our heads held high because we were fighting until the end to score here,\" Leganes striker Garcia said.\n\n\"Ultimately, it was down to the details that they took it. We played a very serious game and now we have to think about next week.\"\n\nGame Information [...] However, Leganes responded almost immediately as Diego Garcia tapped in a loose ball at the far post to equalise in the following minute before Rodriguez set up Dani Raba to slot past goalkeeper Andriy Lunin in the 41st.\n\nReal midfielder Jude Bellingham brought the scores level two minutes after the break, sliding the ball into the net after a rebound off the crossbar. Mbapp\u00e9 then bagged the winner with a brilliant curled free kick in the 76th minute for his second.", "score": 0.50944775}]',
          '<span class="ansi-green-fg">User: </span>How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>',
          '<span class="ansi-green-fg">User: </span>How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>[{"title": "Real Madrid 3-2 Legan\u00e9s (Mar 29, 2025) Game Analysis - ESPN", "url": "https://www.espn.com/soccer/report/_/gameId/704946", "content": "Real Madrid\n\nLegan\u00e9s\n\nMbapp\u00e9 nets twice to keep Real Madrid\'s title hopes alive\n\nReal Madrid vs. Legan\u00e9s - Game Highlights\n\nWatch the Game Highlights from Real Madrid vs. Legan\u00e9s, 03/30/2025\n\nReal Madrid\'s Kylian Mbapp\u00e9 struck twice to help his side come from behind to claim a hard-fought 3-2 home win over relegation-threatened Leganes on Saturday to move the second-placed reigning champions level on points with leaders Barcelona. [...] Leganes pushed for an equaliser but fell to a third consecutive defeat to sit 18th on 27 points, level with Alaves who are one place higher in the safety zone on goal difference.\n\n\"We have done a tremendous job. We leave with our heads held high because we were fighting until the end to score here,\" Leganes striker Garcia said.\n\n\"Ultimately, it was down to the details that they took it. We played a very serious game and now we have to think about next week.\"\n\nGame Information [...] However, Leganes responded almost immediately as Diego Garcia tapped in a loose ball at the far post to equalise in the following minute before Rodriguez set up Dani Raba to slot past goalkeeper Andriy Lunin in the 41st.\n\nReal midfielder Jude Bellingham brought the scores level two minutes after the break, sliding the ball into the net after a rebound off the crossbar. Mbapp\u00e9 then bagged the winner with a brilliant curled free kick in the 76th minute for his second.", "score": 0.93666285}, {"title": "MBAPPE BRACE Leganes vs. Real Madrid - ESPN FC - YouTube", "url": "https://www.youtube.com/watch?v=0xwUhzx19_4", "content": "MBAPPE BRACE \ud83d\udd25 Leganes vs. Real Madrid | LALIGA Highlights | ESPN FC \n ESPN FC \n 6836 likes \n 550646 views \n 29 Mar 2025 \n Watch these highlights as Kylian Mbappe scores 2 goals to give Real Madrid the 3-2 victory over Leganes in their LALIGA matchup.\n\n\u2714 Subscribe to ESPN+: http://espnplus.com/soccer/youtube\n\u2714 Subscribe to ESPN FC on YouTube: http://bit.ly/SUBSCRIBEtoESPNFC \n 790 comments", "score": 0.92857105}]',
          '<span class="ansi-green-fg">User: </span>How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>',
          '<span class="ansi-green-fg">User: </span>How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>[{"title": "(VIDEO) All Goals from Real Madrid vs Leganes in La Liga", "url": "https://www.beinsports.com/en-us/soccer/la-liga/articles-video/-video-all-goals-from-real-madrid-vs-leganes-in-la-liga-2025-03-29?ess=", "content": "Real Madrid will host CD Leganes this Saturday, March 29, 2025, at the Santiago Bernab\u00e9u in a Matchday 29 clash of LaLiga EA Sports.", "score": 0.95628047}, {"title": "Real Madrid v Leganes | March 29, 2025 | Goal.com US", "url": "https://www.goal.com/en-us/match/real-madrid-vs-leganes/sZTw_SnjyKCcntxKHHQI7", "content": "Latest news, stats and live commentary for the LaLiga\'s meeting between Real Madrid v Leganes on the March 29, 2025.", "score": 0.9522955}]',
          '<span class="ansi-green-fg">User: </span>How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>Real Madrid faced Leganes in La Liga this weekend and came away with a 3-2 victory at the Santiago Bernab√©u. The match was intense, with Kylian Mbapp√© scoring twice for Real Madrid, including a curled free kick in the 76th minute that proved to be the winner. Leganes managed to take the lead briefly with goals from Diego Garc√≠a and Dani Raba, but Real Madrid leveled through Jude Bellingham before Mbapp√©\'s second goal secured the win. This result keeps Real Madrid\'s title hopes alive, moving them level on points with leaders Barcelona.',
          '<span class="ansi-green-fg">User: </span>Which players played the match?',
          '<span class="ansi-yellow-fg">Assistant: </span>The question is too vague and doesn\'t provide context such as the sport, league, or specific match in question. Could you please provide more details?',
          '<span class="ansi-green-fg">User: </span>q',
          '<span class="ansi-yellow-fg">Assistant: </span>Goodbye!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como voc√™ v√™, primeiro perguntei como ficou o Real Madrid em seu √∫ltimo jogo na Liga contra o Legan√©sComo √© algo atual, ele decidiu usar a ferramenta de busca, com isso obteve o resultado.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>No entanto, em seguida eu lhe perguntei quais jogadores estavam jogando e ele n√£o sabia do que eu estava falando, isso porque o contexto da conversa n√£o √© mantido. Ent√£o, a pr√≥xima coisa que vamos fazer √© adicionar uma mem√≥ria ao agente para que ele possa manter o contexto da conversa.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a escrever tudo junto para que seja mais leg√≠vel</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>',
          '<span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>',
          '<span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>',
          '<span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langchain_community.utilities.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchAPIWrapper</span>',
          '<span class="kn">from</span> <span class="nn">langchain_community.tools.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchResults</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">ToolMessage</span>',
          '',
          '<span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>',
          '<span class="kn">import</span> <span class="nn">json</span>',
          '',
          '<span class="kn">import</span> <span class="nn">os</span>',
          '<span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>',
          '',
          '<span class="kn">import</span> <span class="nn">dotenv</span>',
          '<span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>',
          '<span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>',
          '<span class="n">TAVILY_API_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"TAVILY_LANGGRAPH_API_KEY"</span><span class="p">)</span>',
          '',
          '<span class="c1"># State</span>',
          '<span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
          '    <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>',
          '',
          '<span class="c1"># Tools</span>',
          '<span class="n">wrapper</span> <span class="o">=</span> <span class="n">TavilySearchAPIWrapper</span><span class="p">(</span><span class="n">tavily_api_key</span><span class="o">=</span><span class="n">TAVILY_API_KEY</span><span class="p">)</span>',
          '<span class="n">tool</span> <span class="o">=</span> <span class="n">TavilySearchResults</span><span class="p">(</span><span class="n">api_wrapper</span><span class="o">=</span><span class="n">wrapper</span><span class="p">,</span> <span class="n">max_results</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>',
          '<span class="n">tools_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">tool</span><span class="p">]</span>',
          '<span class="c1"># Create the LLM model</span>',
          '<span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>',
          '<span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>',
          '<span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>',
          '    <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>',
          '    <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>',
          '    <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>',
          '    <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
          '    <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="c1"># Create the chat model</span>',
          '<span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>',
          '<span class="c1"># Create the LLM with tools</span>',
          '<span class="n">llm_with_tools</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">bind_tools</span><span class="p">(</span><span class="n">tools_list</span><span class="p">)</span>',
          '',
          '<span class="c1"># BasicToolNode class</span>',
          '<span class="k">class</span> <span class="nc">BasicToolNode</span><span class="p">:</span>',
          '<span class="w">    </span><span class="sd">"""A node that runs the tools requested in the last AIMessage."""</span>',
          '',
          '    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tools</span><span class="p">:</span> <span class="nb">list</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>',
          '<span class="w">        </span><span class="sd">"""</span>',
          '<span class="sd">        Initialize the tools</span>',
          '',
          '<span class="sd">        Args:</span>',
          '<span class="sd">            tools (list): The tools to use</span>',
          '',
          '<span class="sd">        Returns:</span>',
          '<span class="sd">            None</span>',
          '<span class="sd">        """</span>',
          '        <span class="c1"># Initialize the tools</span>',
          '        <span class="bp">self</span><span class="o">.</span><span class="n">tools_by_name</span> <span class="o">=</span> <span class="p">{</span><span class="n">tool</span><span class="o">.</span><span class="n">name</span><span class="p">:</span> <span class="n">tool</span> <span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">}</span>',
          '',
          '    <span class="k">def</span> <span class="fm">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">inputs</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>',
          '<span class="w">        </span><span class="sd">"""</span>',
          '<span class="sd">        Call the node</span>',
          '',
          '<span class="sd">        Args:</span>',
          '<span class="sd">            inputs (dict): The inputs to the node</span>',
          '',
          '<span class="sd">        Returns:</span>',
          '<span class="sd">            dict: The outputs of the node</span>',
          '<span class="sd">        """</span>',
          '        <span class="c1"># Get the last message</span>',
          '        <span class="k">if</span> <span class="n">messages</span> <span class="o">:=</span> <span class="n">inputs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"messages"</span><span class="p">,</span> <span class="p">[]):</span>',
          '            <span class="n">message</span> <span class="o">=</span> <span class="n">messages</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
          '        <span class="k">else</span><span class="p">:</span>',
          '            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">"No message found in input"</span><span class="p">)</span>',
          '        ',
          '        <span class="c1"># Execute the tools</span>',
          '        <span class="n">outputs</span> <span class="o">=</span> <span class="p">[]</span>',
          '        <span class="k">for</span> <span class="n">tool_call</span> <span class="ow">in</span> <span class="n">message</span><span class="o">.</span><span class="n">tool_calls</span><span class="p">:</span>',
          '            <span class="n">tool_result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">tools_by_name</span><span class="p">[</span><span class="n">tool_call</span><span class="p">[</span><span class="s2">"name"</span><span class="p">]]</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span>',
          '                <span class="n">tool_call</span><span class="p">[</span><span class="s2">"args"</span><span class="p">]</span>',
          '            <span class="p">)</span>',
          '            <span class="n">outputs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>',
          '                <span class="n">ToolMessage</span><span class="p">(</span>',
          '                    <span class="n">content</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">tool_result</span><span class="p">),</span>',
          '                    <span class="n">name</span><span class="o">=</span><span class="n">tool_call</span><span class="p">[</span><span class="s2">"name"</span><span class="p">],</span>',
          '                    <span class="n">tool_call_id</span><span class="o">=</span><span class="n">tool_call</span><span class="p">[</span><span class="s2">"id"</span><span class="p">],</span>',
          '                <span class="p">)</span>',
          '            <span class="p">)</span>',
          '        <span class="k">return</span> <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">outputs</span><span class="p">}</span>',
          '',
          '<span class="n">basic_tool_node</span> <span class="o">=</span> <span class="n">BasicToolNode</span><span class="p">(</span><span class="n">tools</span><span class="o">=</span><span class="n">tools_list</span><span class="p">)</span>',
          '',
          '<span class="c1"># Functions</span>',
          '<span class="k">def</span> <span class="nf">chatbot_function</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>',
          '    <span class="k">return</span> <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">llm_with_tools</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])]}</span>',
          '',
          '<span class="c1"># Route function</span>',
          '<span class="k">def</span> <span class="nf">route_tools_function</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>',
          '<span class="w">    </span><span class="sd">"""</span>',
          '<span class="sd">    Use in the conditional_edge to route to the ToolNode if the last message</span>',
          '<span class="sd">    has tool calls. Otherwise, route to the end.</span>',
          '<span class="sd">    """</span>',
          '    <span class="c1"># Get last message</span>',
          '    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>',
          '        <span class="n">ai_message</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
          '    <span class="k">elif</span> <span class="n">messages</span> <span class="o">:=</span> <span class="n">state</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"messages"</span><span class="p">,</span> <span class="p">[]):</span>',
          '        <span class="n">ai_message</span> <span class="o">=</span> <span class="n">messages</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
          '    <span class="k">else</span><span class="p">:</span>',
          '        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">"No messages found in input state to tool_edge: </span><span class="si">{</span><span class="n">state</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    ',
          '    <span class="c1"># Router in function of last message</span>',
          '    <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">ai_message</span><span class="p">,</span> <span class="s2">"tool_calls"</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">ai_message</span><span class="o">.</span><span class="n">tool_calls</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>',
          '        <span class="k">return</span> <span class="s2">"tools_node"</span>',
          '    <span class="k">return</span> <span class="n">END</span>',
          '',
          '<span class="c1"># Start to build the graph</span>',
          '<span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>',
          '',
          '<span class="c1"># Add nodes to the graph</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chatbot_function</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"tools_node"</span><span class="p">,</span> <span class="n">basic_tool_node</span><span class="p">)</span>',
          '',
          '<span class="c1"># Add edges</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_conditional_edges</span><span class="p">(</span>',
          '    <span class="s2">"chatbot_node"</span><span class="p">,</span>',
          '    <span class="n">route_tools_function</span><span class="p">,</span>',
          '    <span class="p">{</span>',
          '        <span class="s2">"tools_node"</span><span class="p">:</span> <span class="s2">"tools_node"</span><span class="p">,</span>',
          '        <span class="n">END</span><span class="p">:</span> <span class="n">END</span>',
          '    <span class="p">},</span>',
          '<span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"tools_node"</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
          '',
          '<span class="c1"># Compile the graph</span>',
          '<span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">()</span>',
          '',
          '<span class="c1"># Display the graph</span>',
          '<span class="k">try</span><span class="p">:</span>',
          '    <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>',
          '<span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Error al visualizar el grafo: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Error al visualizar el grafo: Failed to reach https://mermaid.ink/ API while trying to render your graph after 1 retries. To resolve this issue:',
          '1. Check your internet connection and try again',
          '2. Try with higher retry settings: `draw_mermaid_png(..., max_retries=5, retry_delay=2.0)`',
          '3. Use the Pyppeteer rendering method which will render your graph locally in a browser: `draw_mermaid_png(..., draw_method=MermaidDrawMethod.PYPPETEER)`',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Executamos o grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Colors for the terminal</span>',
          '<span class="n">COLOR_GREEN</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[32m"</span>',
          '<span class="n">COLOR_YELLOW</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[33m"</span>',
          '<span class="n">COLOR_RESET</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[0m"</span>',
          '',
          '',
          '<span class="k">def</span> <span class="nf">stream_graph_updates</span><span class="p">(</span><span class="n">user_input</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>',
          '    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">}]}):</span>',
          '        <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">event</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>',
          '            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_GREEN</span><span class="si">}</span><span class="s2">User: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}{</span><span class="n">user_input</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_YELLOW</span><span class="si">}</span><span class="s2">Assistant: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}{</span><span class="n">value</span><span class="p">[</span><span class="s1">\'messages\'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">content</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
          '    <span class="k">try</span><span class="p">:</span>',
          '        <span class="n">user_input</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s2">"User: "</span><span class="p">)</span>',
          '        <span class="k">if</span> <span class="n">user_input</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span><span class="s2">"quit"</span><span class="p">,</span> <span class="s2">"exit"</span><span class="p">,</span> <span class="s2">"q"</span><span class="p">]:</span>',
          '            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_GREEN</span><span class="si">}</span><span class="s2">User: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}{</span><span class="n">user_input</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_YELLOW</span><span class="si">}</span><span class="s2">Assistant: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}</span><span class="s2">Goodbye!"</span><span class="p">)</span>',
          '            <span class="k">break</span>',
          '',
          '        <span class="n">stream_graph_updates</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span>',
          '    <span class="k">except</span><span class="p">:</span>',
          '        <span class="c1"># fallback if input() is not available</span>',
          '        <span class="n">user_input</span> <span class="o">=</span> <span class="s2">"What do you know about LangGraph?"</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="s2">"User: "</span> <span class="o">+</span> <span class="n">user_input</span><span class="p">)</span>',
          '        <span class="n">stream_graph_updates</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span>',
          '        <span class="k">break</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-green-fg">User: </span> How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>',
          '<span class="ansi-green-fg">User: </span> How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>[{"title": "Real Madrid 3-2 Leganes: Mbappe, Bellingham inspire comeback to ...", "url": "https://www.nbcsports.com/soccer/news/how-to-watch-real-madrid-vs-leganes-live-stream-link-tv-team-news-prediction", "content": "Real Madrid fought back to beat struggling Leganes 3-2 at the Santiago Bernabeu on Saturday as Kylian Mbappe scored twice and Jude", "score": 0.78749067}, {"title": "Real Madrid vs Leganes 3-2: LaLiga \u2013 as it happened - Al Jazeera", "url": "https://www.aljazeera.com/sports/liveblog/2025/3/29/live-real-madrid-vs-leganes-laliga", "content": "Defending champions Real Madrid beat 3-2 Leganes in Spain\'s LaLiga. The match at Santiago Bernabeu in Madrid, Spain saw Real trail 2-1 at half-", "score": 0.7485182}]',
          '<span class="ansi-green-fg">User: </span> How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>',
          '<span class="ansi-green-fg">User: </span> How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>[{"title": "Real Madrid vs Legan\u00e9s: Spanish La Liga stats &amp; head-to-head - BBC", "url": "https://www.bbc.com/sport/football/live/cm2ndndvdgmt", "content": "Mbappe scores winner as Real Madrid survive Leganes scare\nMatch Summary\nSat 29 Mar 2025\n\u2027\nSpanish La Liga\nReal Madrid 3 , Legan\u00e9s 2 at Full time\nReal MadridReal MadridReal Madrid\n\n3\n2\n\nLegan\u00e9sLegan\u00e9sLegan\u00e9s\nFull time\nFT\nHalf Time Real Madrid 1 , Legan\u00e9s 2\nHT 1-2\nKey Events\nReal Madrid\n\nK. Mbapp\u00e9 (32\' pen, 76\')Penalty 32 minutes, Goal 76 minutes\nJ. Bellingham (47\')Goal 47 minutes\n\nLegan\u00e9s\n\nDiego Garc\u00eda (34\')Goal 34 minutes\nDani Raba (41\')Goal 41 minutes [...] Good nightpublished at 22:14 Greenwich Mean Time 29 March\n22:14 GMT 29 March\nThanks for joining us, that was a great game.\nSee you again soon for more La Liga action.\n13\n2\nShare\nclose panel\nShare page\nCopy link\nAbout sharing\n\n\nPostpublished at 22:10 Greenwich Mean Time 29 March\n22:10 GMT 29 March\nFT: Real Madrid 3-2 Leganes [...] Postpublished at 22:02 Greenwich Mean Time 29 March\n22:02 GMT 29 March\nFT: Real Madrid 3-2 Leganes\nOver to you, Barcelona.\nHansi Flick\'s side face Girona tomorrow (15:15 BST) and have the chance to regain their three point lead if they are victorious.\n18\n6\nShare\nclose panel\nShare page\nCopy link\nAbout sharing", "score": 0.86413884}, {"title": "Real Madrid 3 - 2 CD Legan\u00e9s (03/29) - Game Report - 365Scores", "url": "https://www.365scores.com/en-us/football/match/laliga-11/cd-leganes-real-madrid-131-9242-11", "content": "The game between Real Madrid and CD Legan\u00e9s ended with a score of Real Madrid 3 - 2 CD Legan\u00e9s. On 365Scores, you can check all the head-to-head results between", "score": 0.8524574}]',
          '<span class="ansi-green-fg">User: </span> How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>',
          '<span class="ansi-green-fg">User: </span> How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>[{"title": "Real Madrid 3-2 Legan\u00e9s (Mar 29, 2025) Final Score - ESPN", "url": "https://www.espn.com/soccer/match/_/gameId/704946/leganes-real-madrid", "content": "Game Information\nSantiago Bernab\u00e9u\n8:00 PM, March 29, 2025Coverage: ESPN Deportes/ESPN+\nMadrid, Spain\nAttendance: 73,641 [...] Match Commentary\n-Match ends, Real Madrid 3, Leganes 2.90\'+9\'Second Half ends, Real Madrid 3, Leganes 2.90\'+7\'Seydouba Ciss\u00e9 (Leganes) wins a free kick in the defensive half.\nFull Commentary\nMatch Stats\nRMALEG\nPossession\n70.7%\n29.3%\n\nShots on Goal\n10\n4\nShot Attempts\n24\n10\nYellow Cards\n1\n4\nCorner Kicks\n8\n3\nSaves\n2\n6\n4-2-3-1\n\n\n13\nLunin\n*   20\nGarc\u00eda\n*   22\nR\u00fcdiger\n*   35\nAsencio\n*   17\nV\u00e1zquez\n\n\n6\nCamavinga\n*   10\nModric\n\n\n21\nD\u00edaz\n\n\n5\nBellingham\n*   15\nG\u00fcler\n\n\n9\nMbapp\u00e9 [...] | Rayo Vallecano | 35 | 12 | 11 | 12 | -5 | 47 |\n| Mallorca | 35 | 13 | 8 | 14 | -7 | 47 |\n| Valencia | 35 | 11 | 12 | 12 | -8 | 45 |\n| Osasuna | 35 | 10 | 15 | 10 | -8 | 45 |\n| Real Sociedad | 35 | 12 | 7 | 16 | -9 | 43 |\n| Getafe | 35 | 10 | 9 | 16 | -3 | 39 |\n| Espanyol | 35 | 10 | 9 | 16 | -9 | 39 |\n| Girona | 35 | 10 | 8 | 17 | -12 | 38 |\n| Sevilla | 35 | 9 | 11 | 15 | -10 | 38 |\n| Alav\u00e9s | 35 | 8 | 11 | 16 | -12 | 35 |\n| Legan\u00e9s | 35 | 7 | 13 | 15 | -18 | 34 |", "score": 0.93497354}, {"title": "Real Madrid v Leganes | March 29, 2025 | Goal.com US", "url": "https://www.goal.com/en-us/match/real-madrid-vs-leganes/sZTw_SnjyKCcntxKHHQI7", "content": "Latest news, stats and live commentary for the LaLiga\'s meeting between Real Madrid v Leganes on the March 29, 2025.", "score": 0.921929}]',
          '<span class="ansi-green-fg">User: </span> How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>',
          '<span class="ansi-green-fg">User: </span> How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>[{"title": "Real Madrid 3-2 Legan\u00e9s (Mar 29, 2025) Final Score - ESPN", "url": "https://www.espn.com/soccer/match/_/gameId/704946/leganes-real-madrid", "content": "Game Information\nSantiago Bernab\u00e9u\n8:00 PM, March 29, 2025Coverage: ESPN Deportes/ESPN+\nMadrid, Spain\nAttendance: 73,641 [...] Match Commentary\n-Match ends, Real Madrid 3, Leganes 2.90\'+9\'Second Half ends, Real Madrid 3, Leganes 2.90\'+7\'Seydouba Ciss\u00e9 (Leganes) wins a free kick in the defensive half.\nFull Commentary\nMatch Stats\nRMALEG\nPossession\n70.7%\n29.3%\n\nShots on Goal\n10\n4\nShot Attempts\n24\n10\nYellow Cards\n1\n4\nCorner Kicks\n8\n3\nSaves\n2\n6\n4-2-3-1\n\n\n13\nLunin\n*   20\nGarc\u00eda\n*   22\nR\u00fcdiger\n*   35\nAsencio\n*   17\nV\u00e1zquez\n\n\n6\nCamavinga\n*   10\nModric\n\n\n21\nD\u00edaz\n\n\n5\nBellingham\n*   15\nG\u00fcler\n\n\n9\nMbapp\u00e9 [...] Mbapp\u00e9 nets twice to maintain Madrid title hopes ------------------------------------------------ Kylian Mbapp\u00e9 struck twice to guide Real Madrid to a 3-2 home win over relegation-threatened Leganes on Saturday. Mar 29, 2025, 10:53 pm - Reuters\nMatch Timeline\nReal Madrid\nLegan\u00e9s\n\nKO\n\n32\n\n\n34\n\n\n41\n\n\nHT\n\n\n47\n\n\n62\n\n\n62\n\n\n62\n\n\n65\n\n\n66\n\n\n72\n\n\n74\n\n\n76\n\n\n81\n\n\n83\n\n\n86\n\n\n89\n\n\nFT", "score": 0.96213967}]',
          '<span class="ansi-green-fg">User: </span> How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>',
          '<span class="ansi-green-fg">User: </span> How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>[{"title": "Real Madrid 3-2 Legan\u00e9s (Mar 29, 2025) Final Score - ESPN", "url": "https://www.espn.com/soccer/match/_/gameId/704946/leganes-real-madrid", "content": "Game Information\nSantiago Bernab\u00e9u\n8:00 PM, March 29, 2025Coverage: ESPN Deportes/ESPN+\nMadrid, Spain\nAttendance: 73,641 [...] Match Commentary\n-Match ends, Real Madrid 3, Leganes 2.90\'+9\'Second Half ends, Real Madrid 3, Leganes 2.90\'+7\'Seydouba Ciss\u00e9 (Leganes) wins a free kick in the defensive half.\nFull Commentary\nMatch Stats\nRMALEG\nPossession\n70.7%\n29.3%\n\nShots on Goal\n10\n4\nShot Attempts\n24\n10\nYellow Cards\n1\n4\nCorner Kicks\n8\n3\nSaves\n2\n6\n4-2-3-1\n\n\n13\nLunin\n*   20\nGarc\u00eda\n*   22\nR\u00fcdiger\n*   35\nAsencio\n*   17\nV\u00e1zquez\n\n\n6\nCamavinga\n*   10\nModric\n\n\n21\nD\u00edaz\n\n\n5\nBellingham\n*   15\nG\u00fcler\n\n\n9\nMbapp\u00e9 [...] -550\n\no3.5\n+105\n-1.5\n-165\nLEGLegan\u00e9sLegan\u00e9s\n(6-9-14)\n(6-9-14, 27 pts)\nu3.5\n-120\n+950\nu3.5\n-135", "score": 0.9635647}, {"title": "Real Madrid v Leganes | March 29, 2025 | Goal.com US", "url": "https://www.goal.com/en-us/match/real-madrid-vs-leganes/sZTw_SnjyKCcntxKHHQI7", "content": "Latest news, stats and live commentary for the LaLiga\'s meeting between Real Madrid v Leganes on the March 29, 2025.", "score": 0.95921934}]',
          '<span class="ansi-green-fg">User: </span> How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>',
          '<span class="ansi-green-fg">User: </span> How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>[{"title": "Real Madrid 3-2 Legan\u00e9s (Mar 29, 2025) Final Score - ESPN", "url": "https://www.espn.com/soccer/match/_/gameId/704946/leganes-real-madrid", "content": "Real Madrid 3-2 Legan\u00e9s (Mar 29, 2025) Final Score - ESPN Real Madrid -Match ends, Real Madrid 3, Leganes 2.90\'+9\'Second Half ends, Real Madrid 3, Leganes 2.90\'+7\'Seydouba Ciss\u00e9 (Leganes) wins a free kick in the defensive half. Freedom from Property StressJohn buys bay area houses | [Sponsored](https://popup.taboola.com/en/?template=colorbox&amp;utm_source=espnnetwork-espn&amp;utm_medium=referral&amp;utm_content=thumbs-feed-01-b:gamepackage-thumbnails-3x1-b%20|%20Card%201:)[Sponsored](https://popup.taboola.com/en/?template=colorbox&amp;utm_source=espnnetwork-espn&amp;utm_medium=referral&amp;utm_content=thumbs-feed-01-b:gamepackage-thumbnails-3x1-b%20|%20Card%201:) Get Offer Brand-New 2-Bedroom Senior Apartment in Mountain View: You Won\'t Believe the Price2-Bedroom Senior Apartment | [Sponsored](https://popup.taboola.com/en/?template=colorbox&amp;utm_source=espnnetwork-espn&amp;utm_medium=referral&amp;utm_content=thumbs-feed-01-b:gamepackage-thumbnails-3x1-b%20|%20Card%201:)[Sponsored](https://popup.taboola.com/en/?template=colorbox&amp;utm_source=espnnetwork-espn&amp;utm_medium=referral&amp;utm_content=thumbs-feed-01-b:gamepackage-thumbnails-3x1-b%20|%20Card%201:) Read More | Real Madrid | 35 | 23 | 6 | 6 | +35 | 75 | Real Madrid woes continue as Vin\u00edcius J\u00fanior injury confirmed ------------------------------------------------------------- Injuries to Vin\u00edcius J\u00fanior and Lucas V\u00e1zquez added to Real Madrid\'s problems on Monday. To learn more, visit \"Do Not Sell or Share My Personal Information\" and \"Targeted Advertising\" Opt-Out Rights.", "score": 0.98565}, {"title": "Real Madrid 3-2 Legan\u00e9s (Mar 29, 2025) Game Analysis - ESPN", "url": "https://www.espn.com/soccer/report/_/gameId/704946", "content": "Real Madrid\'s Kylian Mbapp\u00e9 struck twice to help his side come from behind to claim a hard-fought 3-2 home win over relegation-threatened", "score": 0.98277}]',
          '<span class="ansi-green-fg">User: </span> How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>',
          '<span class="ansi-green-fg">User: </span> How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>[{"title": "Real Madrid 3 - 2 CD Legan\u00e9s (03/29) - Game Report - 365Scores", "url": "https://www.365scores.com/en-us/football/match/laliga-11/cd-leganes-real-madrid-131-9242-11", "content": "The game between Real Madrid and CD Legan\u00e9s in the Regular Season of LaLiga, held on Saturday, March 29, 2025 at Estadio Santiago Bernab\u00e9u, ended with a score", "score": 0.96686727}, {"title": "Real Madrid 3-2 Legan\u00e9s (Mar 29, 2025) Final Score - ESPN", "url": "https://www.espn.com/soccer/match/_/gameId/704946/leganes-real-madrid", "content": "Game Information\nSantiago Bernab\u00e9u\n8:00 PM, March 29, 2025Coverage: ESPN Deportes/ESPN+\nMadrid, Spain\nAttendance: 73,641 [...] -550\n\no3.5\n+105\n-1.5\n-165\nLEGLegan\u00e9sLegan\u00e9s\n(6-9-14)\n(6-9-14, 27 pts)\nu3.5\n-120\n+950\nu3.5\n-135 [...] Referees:\nPablo Gonz\u00e1lez Fuertes", "score": 0.9595845}]',
          '<span class="ansi-green-fg">User: </span> How did Real Madrid fare this weekend against Leganes in La Liga?',
          '<span class="ansi-yellow-fg">Assistant: </span>Real Madrid faced CD Legan√©s in a La Liga match on Saturday, March 29, 2025, at the Estadio Santiago Bernab√©u. The match was a thrilling encounter, with Real Madrid coming from behind to secure a 3-2 victory. ',
          'Key points from the match include:',
          '- **Scoreline**: Real Madrid 3, Legan√©s 2.',
          '- **Goals**:',
          '  - **Real Madrid**: Kylian Mbapp√© scored twice, including a penalty, and Jude Bellingham also found the net.',
          '  - **Legan√©s**: Goals were scored by Diego Garc√≠a and Dani Raba.',
          '- **Attendance**: The match was played in front of 73,641 spectators.',
          '- **Key Moments**:',
          '  - Real Madrid trailed 2-1 at half-time but mounted a comeback in the second half.',
          '  - Mbapp√©\'s penalty in the 32nd minute and his second goal in the 76th minute were crucial in turning the game around.',
          '  - Bellingham\'s goal in the 47th minute shortly after the break tied the game.',
          'This victory is significant for Real Madrid as they continue their push for the La Liga title, while Legan√©s remains in a difficult position, fighting against relegation.',
          '<span class="ansi-green-fg">User: </span>Which players played the match?',
          '<span class="ansi-yellow-fg">Assistant: </span>I\'m sorry, but I need more information to answer your question. Could you please specify which match you\'re referring to, including the sport, the teams, or any other relevant details? This will help me provide you with the correct information.',
          '<span class="ansi-green-fg">User: </span>q',
          '<span class="ansi-yellow-fg">Assistant: </span>Goodbye!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a ver que o problema √© que n√£o lembra o contexto da conversa√ß√£o.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Adicionar-mem%C3%B3ria-ao-chatbot---mem%C3%B3ria-de-curto-prazo,-mem%C3%B3ria-dentro-do-fio">Adicionar mem√≥ria ao chatbot - mem√≥ria de curto prazo, mem√≥ria dentro do fio<a class="anchor-link" href="#Adicionar-mem%C3%B3ria-ao-chatbot---mem%C3%B3ria-de-curto-prazo,-mem%C3%B3ria-dentro-do-fio"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 145" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Nosso chatbot agora pode usar ferramentas para responder perguntas dos usu√°rios, mas n√£o lembra o contexto das intera√ß√µes anteriores. Isso limita sua capacidade de ter conversas coerentes e de m√∫ltiplos turnos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>LangGraph</code> resolve este problema atrav√©s de pontos de verifica√ß√£o persistentes ou <code>checkpoints</code>. Se fornecermos um <code>checkpointer</code> ao compilar o gr√°fico e um <code>thread_id</code> ao chamar o gr√°fico, <code>LangGraph</code> salva automaticamente o estado ap√≥s cada itera√ß√£o na conversa.
      Quando invocarmos o grafo novamente usando o mesmo <code>thread_id</code>, o grafo carregar√° seu estado salvo, permitindo que o chatbot continue de onde parou.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Veremos mais tarde que esse <code>checkpointing</code> √© muito mais poderoso do que a simples mem√≥ria de chat: permite salvar e retomar estados complexos a qualquer momento para recupera√ß√£o de erros, fluxos de trabalho com <code>human in the loop</code>, intera√ß√µes no tempo e mais. Mas antes de ver tudo isso, vamos adicionar pontos de controle para permitir conversas de v√°rias itera√ß√µes.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">os</span>',
      '<span class="kn">import</span> <span class="nn">dotenv</span>',
      ' ',
      '<span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>',
      ' ',
      '<span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>',
      '<span class="n">TAVILY_API_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"TAVILY_LANGGRAPH_API_KEY"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>












      
      <section class="section-block-markdown-cell">
      <p>Para come√ßar, criamos um <code>checkpointer</code> <a href="https://langchain-ai.github.io/langgraph/reference/checkpoints/#langgraph.checkpoint.memory.MemorySaver" target="_blank" rel="nofollow noreferrer">MemorySaver</a>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">langgraph.checkpoint.memory</span> <span class="kn">import</span> <span class="n">MemorySaver</span>',
      ' ',
      '<span class="n">memory</span> <span class="o">=</span> <span class="n">MemorySaver</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>








      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p><strong>Aviso</strong>&gt;&gt; Estamos usando um <code>checkpointer</code> na mem√≥ria, ou seja, ele √© armazenado na RAM e quando a execu√ß√£o do grafo terminar, ele ser√° exclu√≠do. Isso nos serve para este caso, pois √© um exemplo para aprender a usar <code>LangGraph</code>. Em uma aplica√ß√£o de produ√ß√£o, provavelmente ser√° necess√°rio alterar isso para us√°-lo com <code>SqliteSaver</code> ou <code>PostgresSaver</code> e conectar-se ao nosso pr√≥prio banco de dados.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A seguir, definimos o grafo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>',
      '<span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>',
      ' ',
      ' ',
      '<span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
      '    <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>',
      ' ',
      ' ',
      '<span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>


















      
      <section class="section-block-markdown-cell">
      <p>Definimos a <code>ferramenta</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">langchain_community.utilities.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchAPIWrapper</span>',
      '<span class="kn">from</span> <span class="nn">langchain_community.tools.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchResults</span>',
      ' ',
      '<span class="n">wrapper</span> <span class="o">=</span> <span class="n">TavilySearchAPIWrapper</span><span class="p">(</span><span class="n">tavily_api_key</span><span class="o">=</span><span class="n">TAVILY_API_KEY</span><span class="p">)</span>',
      '<span class="n">tool</span> <span class="o">=</span> <span class="n">TavilySearchResults</span><span class="p">(</span><span class="n">api_wrapper</span><span class="o">=</span><span class="n">wrapper</span><span class="p">,</span> <span class="n">max_results</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>',
      '<span class="n">tools_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">tool</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>











      
      <section class="section-block-markdown-cell">
      <p>A seguir, o <code>LLM</code> com as <code>bind_tools</code> e adicionamos ao grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>',
          '<span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>',
          '<span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>',
          '',
          '<span class="c1"># Create the LLM</span>',
          '<span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>',
          '<span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>',
          '<span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>',
          '    <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>',
          '    <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>',
          '    <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>',
          '    <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
          '    <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="c1"># Create the chat model</span>',
          '<span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>',
          '',
          '<span class="c1"># Modification: tell the LLM which tools it can call</span>',
          '<span class="n">llm_with_tools</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">bind_tools</span><span class="p">(</span><span class="n">tools_list</span><span class="p">)</span>',
          '',
          '<span class="c1"># Define the chatbot function</span>',
          '<span class="k">def</span> <span class="nf">chatbot_function</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>',
          '    <span class="k">return</span> <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">llm_with_tools</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])]}</span>',
          '',
          '<span class="c1"># Add the chatbot node</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chatbot_function</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x1173534d0&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Antes constru√≠mos nosso pr√≥prio <code>BasicToolNode</code> para aprender como funciona, agora o substituiremos pelo m√©todo de LangGraph <code>ToolNode</code> e <code>tools_condition</code>, pois estes fazem algumas coisas boas como a execu√ß√£o paralela de API. Al√©m disso, o resto √© igual ao anterior.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">langgraph.prebuilt</span> <span class="kn">import</span> <span class="n">ToolNode</span><span class="p">,</span> <span class="n">tools_condition</span>',
          '',
          '<span class="n">tool_node</span> <span class="o">=</span> <span class="n">ToolNode</span><span class="p">(</span><span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">tool</span><span class="p">])</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="n">tool_node</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x1173534d0&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Adicionamos o n√≥ de <code>tools_condition</code> ao grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">graph_builder</span><span class="o">.</span><span class="n">add_conditional_edges</span><span class="p">(</span>',
          '    <span class="s2">"chatbot_node"</span><span class="p">,</span>',
          '    <span class="n">tools_condition</span><span class="p">,</span>',
          '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x1173534d0&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Adicionamos o n√≥ de <code>tools</code> ao gr√°fico</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x1173534d0&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Adicionamos o n√≥do de <code>START</code> ao grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x1173534d0&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Compilamos o gr√°fico adicionando o <code>checkpointer</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">checkpointer</span><span class="o">=</span><span class="n">memory</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>O representamos graficamente</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      
      <span class="k">try</span><span class="p">:</span>
          <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Error al visualizar el grafo: </span><span class="si">{opening_brace}</span><span class="n">e</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv24.webp" width="216" height="249" alt="image uv 25" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos uma configura√ß√£o com um <code>thread_id</code> de um usu√°rio</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">USER1_THREAD_ID</span> <span class="o">=</span> <span class="s2">"1"</span>',
      '<span class="n">config_USER1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="n">USER1_THREAD_ID</span><span class="p">}}</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>







      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">user_input</span> <span class="o">=</span> <span class="s2">"Hi there! My name is Maximo."</span>',
          '',
          '<span class="c1"># The config is the **second positional argument** to stream() or invoke()!</span>',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span>',
          '    <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">}]},</span>',
          '    <span class="n">config_USER1</span><span class="p">,</span>',
          '    <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Hi there! My name is Maximo.',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query:  does not reside in any location,}},',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "Determining an individual\'s tax residency status - IRS", "url": "https://www.irs.gov/individuals/international-taxpayers/determining-an-individuals-tax-residency-status", "content": "If you are not a U.S. citizen, you are considered a nonresident of the United States for U.S. tax purposes unless you meet one of two tests.", "score": 0.1508904}, {"title": "Fix \"Location Is Not Available\", C:\\WINDOWS\\system32 ... - YouTube", "url": "https://www.youtube.com/watch?v=QFD-Ptp0SJw", "content": "Fix Error \"Location is not available\" C:\\WINDOWS\\system32\\config\\systemprofile\\Desktop is unavailable. If the location is on this PC,", "score": 0.07777658}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Invalid Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    {"query": "Arguments["image={"}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">user_input</span> <span class="o">=</span> <span class="s2">"Do you remember my name?"</span>',
          '',
          '<span class="c1"># The config is the **second positional argument** to stream() or invoke()!</span>',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span>',
          '    <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">}]},</span>',
          '    <span class="n">config_USER1</span><span class="p">,</span>',
          '    <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Do you remember my name?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Of course! You mentioned your name is Maximo.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como pode ser visto, n√£o passamos uma lista com as mensagens, tudo est√° sendo gerenciado pelo <code>checkpointer</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se agora testarmos com outro usu√°rio, ou seja, com outro <code>thread_id</code>, veremos que o grafo n√£o lembra a conversa anterior.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">USER2_THREAD_ID</span> <span class="o">=</span> <span class="s2">"2"</span>',
          '<span class="n">config_USER2</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="n">USER2_THREAD_ID</span><span class="p">}}</span>',
          '',
          '<span class="n">user_input</span> <span class="o">=</span> <span class="s2">"Do you remember my name?"</span>',
          '',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span>',
          '    <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">}]},</span>',
          '    <span class="n">config_USER2</span><span class="p">,</span>',
          '    <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Do you remember my name?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: Do you Remember My Name',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "Sam Fender - Remember My Name (Official Video) - YouTube", "url": "https://www.youtube.com/watch?v=uaQm48G6IjY", "content": "Sam Fender - Remember My Name (Official Video) \n SamFenderVEVO \n 10743 likes \n 862209 views \n 14 Feb 2025 \n Remember My Name is a love song dedicated to my late Grandparents - they were always so fiercely proud of our family so I wrote the song in honour of them, from the perspective of my Grandad who was looking after my Grandma when she was suffering from dementia. This video is a really special one for me and I want to say thank you to everyone involved in making it. I hope you like it ‚ù§Ô∏è [...] If I was wanting of anymore\nI‚Äôd be as greedy as those men on the hill\nBut I remain forlorn\nIn the memory of what once was\n\nChasing a cross in from the wing\nOur boy‚Äôs a whippet, he‚Äôs faster than anything\nRemember the pride that we felt\nFor the two of us made him ourselves\n\nHumour me\nMake my day\nI‚Äôll tell you stories\nKiss your face\nAnd I‚Äôll pray\nYou‚Äôll remember\nMy name\n\nI‚Äôm not sure of what awaits\nWasn‚Äôt a fan of St Peter and his gates\nBut by god I pray\nThat I‚Äôll see you in some way [...] Oh 11 Walk Avenue\nSomething to behold\nTo them it‚Äôs a council house\nTo me it‚Äôs a home\nAnd a home that you made\nWhere the grandkids could play\nBut it‚Äôs never the same without you\n\nHumour me\nMake my day\nI‚Äôll tell you stories\nI‚Äôll kiss your face\nAnd I‚Äôll pray\nYou‚Äôll remember\nMy name\n\nAnd I‚Äôll pray you remember my name\nAnd I‚Äôll pray you remember my name\n\n---", "score": 0.6609831}, {"title": "Do You Remember My Name? - Novel Updates", "url": "https://www.novelupdates.com/series/do-you-remember-my-name/", "content": "This is a Cute, Tender, and Heartwarming High School Romance. It\'s not Heavy. It\'s not so Emotional too, but it does have Emotional moments. It\'s story Full of", "score": 0.608897}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: do you remember my name',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "Sam Fender - Remember My Name (Official Video) - YouTube", "url": "https://www.youtube.com/watch?v=uaQm48G6IjY", "content": "Sam Fender - Remember My Name (Official Video) \n SamFenderVEVO \n 10743 likes \n 862209 views \n 14 Feb 2025 \n Remember My Name is a love song dedicated to my late Grandparents - they were always so fiercely proud of our family so I wrote the song in honour of them, from the perspective of my Grandad who was looking after my Grandma when she was suffering from dementia. This video is a really special one for me and I want to say thank you to everyone involved in making it. I hope you like it ‚ù§Ô∏è [...] Oh 11 Walk Avenue\nSomething to behold\nTo them it‚Äôs a council house\nTo me it‚Äôs a home\nAnd a home that you made\nWhere the grandkids could play\nBut it‚Äôs never the same without you\n\nHumour me\nMake my day\nI‚Äôll tell you stories\nI‚Äôll kiss your face\nAnd I‚Äôll pray\nYou‚Äôll remember\nMy name\n\nAnd I‚Äôll pray you remember my name\nAnd I‚Äôll pray you remember my name\n\n--- [...] If I was wanting of anymore\nI‚Äôd be as greedy as those men on the hill\nBut I remain forlorn\nIn the memory of what once was\n\nChasing a cross in from the wing\nOur boy‚Äôs a whippet, he‚Äôs faster than anything\nRemember the pride that we felt\nFor the two of us made him ourselves\n\nHumour me\nMake my day\nI‚Äôll tell you stories\nKiss your face\nAnd I‚Äôll pray\nYou‚Äôll remember\nMy name\n\nI‚Äôm not sure of what awaits\nWasn‚Äôt a fan of St Peter and his gates\nBut by god I pray\nThat I‚Äôll see you in some way", "score": 0.7123327}, {"title": "Do you remember my name? - song and lyrics by Alea, Mama Marjas", "url": "https://open.spotify.com/track/3GVBn3rEQLxZl4zJ4dG8UJ", "content": "Listen to Do you remember my name? on Spotify. Song ¬∑ Alea, Mama Marjas ¬∑ 2023.", "score": 0.6506676}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: do you remember my name',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "Sam Fender - Remember My Name (Official Video) - YouTube", "url": "https://www.youtube.com/watch?v=uaQm48G6IjY", "content": "Sam Fender - Remember My Name (Official Video) \n SamFenderVEVO \n 10743 likes \n 862209 views \n 14 Feb 2025 \n Remember My Name is a love song dedicated to my late Grandparents - they were always so fiercely proud of our family so I wrote the song in honour of them, from the perspective of my Grandad who was looking after my Grandma when she was suffering from dementia. This video is a really special one for me and I want to say thank you to everyone involved in making it. I hope you like it ‚ù§Ô∏è [...] Oh 11 Walk Avenue\nSomething to behold\nTo them it‚Äôs a council house\nTo me it‚Äôs a home\nAnd a home that you made\nWhere the grandkids could play\nBut it‚Äôs never the same without you\n\nHumour me\nMake my day\nI‚Äôll tell you stories\nI‚Äôll kiss your face\nAnd I‚Äôll pray\nYou‚Äôll remember\nMy name\n\nAnd I‚Äôll pray you remember my name\nAnd I‚Äôll pray you remember my name\n\n--- [...] If I was wanting of anymore\nI‚Äôd be as greedy as those men on the hill\nBut I remain forlorn\nIn the memory of what once was\n\nChasing a cross in from the wing\nOur boy‚Äôs a whippet, he‚Äôs faster than anything\nRemember the pride that we felt\nFor the two of us made him ourselves\n\nHumour me\nMake my day\nI‚Äôll tell you stories\nKiss your face\nAnd I‚Äôll pray\nYou‚Äôll remember\nMy name\n\nI‚Äôm not sure of what awaits\nWasn‚Äôt a fan of St Peter and his gates\nBut by god I pray\nThat I‚Äôll see you in some way", "score": 0.7123327}, {"title": "Do you remember my name? - song and lyrics by Alea, Mama Marjas", "url": "https://open.spotify.com/track/3GVBn3rEQLxZl4zJ4dG8UJ", "content": "Listen to Do you remember my name? on Spotify. Song ¬∑ Alea, Mama Marjas ¬∑ 2023.", "score": 0.6506676}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'I\'m here to assist you, but I don\'t actually have the ability to remember names or personal information from previous conversations. How can I assist you today?',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora que nosso chatbot tem ferramentas de busca e mem√≥ria, vamos repetir o exemplo anterior, onde pergunto sobre o resultado do √∫ltimo jogo do Real Madrid na Liga e depois quais jogadores atuaram.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">USER3_THREAD_ID</span> <span class="o">=</span> <span class="s2">"3"</span>',
          '<span class="n">config_USER3</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="n">USER3_THREAD_ID</span><span class="p">}}</span>',
          '',
          '<span class="n">user_input</span> <span class="o">=</span> <span class="s2">"How did Real Madrid fare this weekend against Leganes in La Liga?"</span>',
          '',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span>',
          '    <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">}]},</span>',
          '    <span class="n">config_USER3</span><span class="p">,</span>',
          '    <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'How did Real Madrid fare this weekend against Leganes in La Liga?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: Real Madrid vs Leganes La Liga this weekend',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "Real Madrid 3-2 Leganes: Goals and highlights - LaLiga 24/25 | Marca", "url": "https://www.marca.com/en/soccer/laliga/r-madrid-leganes/2025/03/29/01_0101_20250329_186_957-live.html", "content": "While their form has varied throughout the campaign there is no denying Real Madrid are a force at home in LaLiga this season, as they head into Saturday\'s match having picked up 34 points from 13 matches.\n\nAs for Leganes they currently sit 18th in the table, though they are level with Alaves for 17th as both teams look to stay in the top flight. [...] The two teams have already played twice this season, with Real Madrid securing a 3-0 win in the reverse league fixture. They also met in the quarter-finals of the Copa del Rey, a game Real won 3-2.\n\nReal Madrid vs Leganes LIVE - Latest Updates\n\nMatch ends, Real Madrid 3, Leganes 2.\n\nSecond Half ends, Real Madrid 3, Leganes 2.\n\nFoul by Vin√≠cius J√∫nior (Real Madrid).\n\nSeydouba Ciss√© (Leganes) wins a free kick in the defensive half. [...] Goal! Real Madrid 1, Leganes 1. Diego Garc√≠a (Leganes) left footed shot from very close range.\n\nAttempt missed. √ìscar Rodr√≠guez (Leganes) left footed shot from the centre of the box.\n\nGoal! Real Madrid 1, Leganes 0. Kylian Mbapp√© (Real Madrid) converts the penalty with a right footed shot.\n\nPenalty Real Madrid. Arda G√ºler draws a foul in the penalty area.\n\nPenalty conceded by √ìscar Rodr√≠guez (Leganes) after a foul in the penalty area.\n\nDelay over. They are ready to continue.", "score": 0.8548001}, {"title": "Real Madrid 3-2 Legan√©s (Mar 29, 2025) Game Analysis - ESPN", "url": "https://www.espn.com/soccer/report/_/gameId/704946", "content": "Real Madrid\n\nLegan√©s\n\nMbapp√© nets twice to keep Real Madrid\'s title hopes alive\n\nReal Madrid vs. Legan√©s - Game Highlights\n\nWatch the Game Highlights from Real Madrid vs. Legan√©s, 03/30/2025\n\nReal Madrid\'s Kylian Mbapp√© struck twice to help his side come from behind to claim a hard-fought 3-2 home win over relegation-threatened Leganes on Saturday to move the second-placed reigning champions level on points with leaders Barcelona. [...] Leganes pushed for an equaliser but fell to a third consecutive defeat to sit 18th on 27 points, level with Alaves who are one place higher in the safety zone on goal difference.\n\n\"We have done a tremendous job. We leave with our heads held high because we were fighting until the end to score here,\" Leganes striker Garcia said.\n\n\"Ultimately, it was down to the details that they took it. We played a very serious game and now we have to think about next week.\"\n\nGame Information", "score": 0.82220376}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Real Madrid secured a 3-2 victory against Leganes this weekend in their La Liga match. Kylian Mbapp√© scored twice, including a penalty, to help his team come from behind and claim the win, keeping Real Madrid\'s title hopes alive. Leganes, now sitting 18th in the table, continues to face challenges in their fight against relegation.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora perguntamos pelos jogadores que participaram na partida.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">user_input</span> <span class="o">=</span> <span class="s2">"Which players played the match?"</span>',
          '',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span>',
          '    <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">}]},</span>',
          '    <span class="n">config_USER3</span><span class="p">,</span>',
          '    <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Which players played the match?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: Real Madrid vs Leganes match report players lineup',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "Real Madrid vs. Leganes final score: La Liga result, updates, stats ...", "url": "https://www.sportingnews.com/us/soccer/news/real-madrid-leganes-score-result-updates-stats-la-liga/8ecf730cfcb9b6c5f6693a0d", "content": "Real Madrid came through a topsy-turvy game with Leganes to claim a 3-2 victory and put pressure back on Barcelona in La Liga\'s title race. Kylian Mbappe scored in each half either side of a Jude Bellingham goal ‚Äî his first in the league since January 3 ‚Äî to seal all three points for the champions after Leganes had come from behind to lead at the interval. Rodrygo won back the ball in the Leganes half and earned a free-kick on the edge of the box, and Mbappe found the bottom corner after rolling the ball short to Fran Garcia to work an angle. Leganes lead Real Madrid at the Bernabeu for the very first time! *Real Madrid starting lineup (4-3-3, right to left):*¬†Lunin (GK) ‚Äî Vazquez, Rudiger, Asencio, Garcia ‚Äî Modric, Bellingham, Camavinga ‚Äî B.", "score": 0.88372874}, {"title": "CONFIRMED lineups: Real Madrid vs Legan√©s, 2025 La Liga", "url": "https://www.managingmadrid.com/2025/3/29/24396638/real-madrid-vs-leganes-2025-la-liga-live-online-stream", "content": "Real Madrid starting XI: Lunin, Vazquez, Rudiger, Asencio, Fran Garcia, Camavinga, Guler, Modric, Bellingham, Brahim, Mbappe. Leganes starting", "score": 0.83452857}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: Real Madrid vs Leganes players 2025',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "Player Ratings: Real Madrid 3-2 Leganes; 2025 La Liga", "url": "https://www.managingmadrid.com/2025/3/30/24396688/player-ratings-real-madrid-3-2-leganes-2025-la-liga", "content": "Ra√∫l Asencio‚Äî7: Applauded by the Bernabeu on multiple occasions with good sweeping up defensively.\n\nFran Garc√≠a‚Äî6: Better on the offensive end, getting into the final third and playing some dagger crosses.\n\nEduardo Camavinga‚Äî6: Modric and Camavinga struggled to deal with Leganes counter attacks and Diego, playing as a #10 for Leganes, got the better of both of them. [...] Follow Managing Madrid online:\n\nSite search\n\nManaging Madrid main menu\n\nFiled under:\n\nPlayer Ratings: Real Madrid 3-2 Leganes; 2025 La Liga\n\nKylian Mbappe scores a brace to help Madrid secure a nervy 3-2 victory.\n\nShare this story\n\nShare\nAll sharing options for:\nPlayer Ratings: Real Madrid 3-2 Leganes; 2025 La Liga\n\nFull match player ratings below:\n\nAndriy Lunin‚Äî7: Not at fault for the goals, was left with the opposition taking a shot from near the six yard box. [...] Lucas V√°zquez‚Äî4: Exposed in transition and lacking the speed and athleticism to cover the gaps he leaves when venturing forward. Needs a more ‚Äúpessimistic‚Äù attitude when the ball is on the opposite flank, occupying better spots in ‚Äú‚Äúrest defense‚Äù.\n\nAntonio Rudiger‚Äî5: Several unnecessary long distance shots to hurt Madrid‚Äôs rhythm and reinforce Leganes game plan. Playing with too many matches in his legs and it‚Äôs beginning to show.", "score": 0.8832463}, {"title": "Real Madrid vs. Legan√©s (Mar 29, 2025) Live Score - ESPN", "url": "https://www.espn.com/soccer/match/_/gameId/704946", "content": "Match Formations ¬∑ 13. Lunin ¬∑ 20. Garc√≠a ¬∑ 22. R√ºdiger ¬∑ 35. Asencio ¬∑ 17. V√°zquez ¬∑ 5. Bellingham ¬∑ 10. Modric ¬∑ 6. Camavinga.", "score": 0.86413884}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: Real Madrid vs Leganes starting lineup',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "Starting lineups of Real Madrid and Legan√©s", "url": "https://www.realmadrid.com/en-US/news/football/first-team/latest-news/once-inicial-del-real-madrid-contra-el-leganes-29-03-2025", "content": "Starting lineups of Real Madrid and Legan√É¬©s\n\n\n\nThe Whites√¢¬Ä¬ô team is: Lunin, Lucas V., Asencio, R√É¬ºdiger, Fran Garc√É¬≠a, Arda G√É¬ºler, Modri√Ñ¬á, Camavinga, Bellingham, Brahim and Mbapp√É¬©.\n\n\n\n\n\nReal Madrid¬†have named their starting line-up for the game against Legan√É¬©s on matchday 29 of¬†LaLiga, which will be played at the¬†Santiago Bernab√É¬©u¬†(9 pm CET). [...] Real Madrid starting line-up:\n13. Lunin\n17. Lucas V.\n35. Asencio\n22. R√É¬ºdiger\n20. Fran Garc√É¬≠a\n15. Arda G√É¬ºler\n10. Modri√Ñ¬á\n6. Camavinga\n5. Bellingham\n21. Brahim\n9. Mbapp√É¬©.\n\nSubstitutes:\n26. Fran Gonz√É¬°lez\n34. Sergio Mestre\n4. Alaba\n7. Vini Jr.\n8. Valverde\n11. Rodrygo\n14. Tchouameni\n16. Endrick\n18. Vallejo\n43. Diego Aguado.\n\nLegan√É¬©s starting line-up:\n13. Dmitrovic\n5. Tapia\n6. Sergio G.\n7. √É¬ìscar\n10. Raba\n11. Cruz\n12. V. Rosier\n17. Neyou\n19. Diego G.\n20. Javi Hern√É¬°ndez\n22. Nastasic. [...] Suplentes:\n1. Juan Soriano\n36. Abajas\n2. A. Alti\n3. Jorge S√É¬°enz\n8. Cisse\n9. Miguel\n14. Darko\n18. Duk\n21. R. L√É¬≥pez\n23. Munir\n24. Chicco\n30. I. Diomande.\n\n\n\nDownload Now\n\nOfficial App Fan\n\nReal Madrid √Ç¬© 2025 All rights reserved", "score": 0.9465623}, {"title": "Real Madrid vs. Leganes lineups, confirmed starting 11, team news ...", "url": "https://www.sportingnews.com/us/soccer/news/real-madrid-leganes-lineups-starting-11-team-news-injuries/aac757d10cc7b9a084995b4d", "content": "Real Madrid starting lineup (4-3-3, right to left): Lunin (GK) ‚Äî Vazquez, Rudiger, Asencio, Garcia ‚Äî Modric, Bellingham, Camavinga ‚Äî B. Diaz,", "score": 0.9224337}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'The starting lineup for Real Madrid in their match against Legan√©s was: Lunin (GK), V√°zquez, R√ºdiger, Asencio, Fran Garc√≠a, Modric, Bellingham, Camavinga, Brahim, Arda G√ºler, and Mbapp√©. Notable players like Vini Jr., Rodrygo, and Valverde were on the bench.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Depois de muito procurar, ele finalmente o encontra. Ent√£o agora temos um chatbot com <code>tools</code> e mem√≥ria.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>At√© agora, criamos alguns <code>checkpoints</code> em tr√™s threads diferentes. Mas, o que entra em cada <code>checkpoint</code>? Para inspecionar o estado de um grafo para uma configura√ß√£o dada, podemos usar o m√©todo <code>get_state(config)</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">snapshot</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">get_state</span><span class="p">(</span><span class="n">config_USER3</span><span class="p">)</span>',
          '<span class="n">snapshot</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'StateSnapshot(values={\'messages\': [HumanMessage(content=\'How did Real Madrid fare this weekend against Leganes in La Liga?\', additional_kwargs={}, response_metadata={}, id=\'a33f5825-1ae4-4717-ad17-8e306f35b027\'), AIMessage(content=\'\', additional_kwargs={\'tool_calls\': [{\'function\': {\'arguments\': {\'query\': \'Real Madrid vs Leganes La Liga this weekend\'}, \'name\': \'tavily_search_results_json\', \'description\': None}, \'id\': \'0\', \'type\': \'function\'}]}, response_metadata={\'token_usage\': {\'completion_tokens\': 25, \'prompt_tokens\': 296, \'total_tokens\': 321}, \'model\': \'\', \'finish_reason\': \'stop\'}, id=\'run-7905b5ae-5dee-4641-b012-396affde984c-0\', tool_calls=[{\'name\': \'tavily_search_results_json\', \'args\': {\'query\': \'Real Madrid vs Leganes La Liga this weekend\'}, \'id\': \'0\', \'type\': \'tool_call\'}]), ToolMessage(content=\'[{"title": "Real Madrid 3-2 Leganes: Goals and highlights - LaLiga 24/25 | Marca", "url": "https://www.marca.com/en/soccer/laliga/r-madrid-leganes/2025/03/29/01_0101_20250329_186_957-live.html", "content": "While their form has varied throughout the campaign there is no denying Real Madrid are a force at home in LaLiga this season, as they head into Saturday\\'s match having picked up 34 points from 13 matches.\\n\\nAs for Leganes they currently sit 18th in the table, though they are level with Alaves for 17th as both teams look to stay in the top flight. [...] The two teams have already played twice this season, with Real Madrid securing a 3-0 win in the reverse league fixture. They also met in the quarter-finals of the Copa del Rey, a game Real won 3-2.\\n\\nReal Madrid vs Leganes LIVE - Latest Updates\\n\\nMatch ends, Real Madrid 3, Leganes 2.\\n\\nSecond Half ends, Real Madrid 3, Leganes 2.\\n\\nFoul by Vin√≠cius J√∫nior (Real Madrid).\\n\\nSeydouba Ciss√© (Leganes) wins a free kick in the defensive half. [...] Goal! Real Madrid 1, Leganes 1. Diego Garc√≠a (Leganes) left footed shot from very close range.\\n\\nAttempt missed. √ìscar Rodr√≠guez (Leganes) left footed shot from the centre of the box.\\n\\nGoal! Real Madrid 1, Leganes 0. Kylian Mbapp√© (Real Madrid) converts the penalty with a right footed shot.\\n\\nPenalty Real Madrid. Arda G√ºler draws a foul in the penalty area.\\n\\nPenalty conceded by √ìscar Rodr√≠guez (Leganes) after a foul in the penalty area.\\n\\nDelay over. They are ready to continue.", "score": 0.8548001}, {"title": "Real Madrid 3-2 Legan√©s (Mar 29, 2025) Game Analysis - ESPN", "url": "https://www.espn.com/soccer/report/_/gameId/704946", "content": "Real Madrid\\n\\nLegan√©s\\n\\nMbapp√© nets twice to keep Real Madrid\\'s title hopes alive\\n\\nReal Madrid vs. Legan√©s - Game Highlights\\n\\nWatch the Game Highlights from Real Madrid vs. Legan√©s, 03/30/2025\\n\\nReal Madrid\\'s Kylian Mbapp√© struck twice to help his side come from behind to claim a hard-fought 3-2 home win over relegation-threatened Leganes on Saturday to move the second-placed reigning champions level on points with leaders Barcelona. [...] Leganes pushed for an equaliser but fell to a third consecutive defeat to sit 18th on 27 points, level with Alaves who are one place higher in the safety zone on goal difference.\\n\\n\\"We have done a tremendous job. We leave with our heads held high because we were fighting until the end to score here,\\" Leganes striker Garcia said.\\n\\n\\"Ultimately, it was down to the details that they took it. We played a very serious game and now we have to think about next week.\\"\\n\\nGame Information", "score": 0.82220376}]\', name=\'tavily_search_results_json\', id=\'0e02fce3-a6f0-4cce-9217-04c8c3219265\', tool_call_id=\'0\', artifact={\'query\': \'Real Madrid vs Leganes La Liga this weekend\', \'follow_up_questions\': None, \'answer\': None, \'images\': [], \'results\': [{\'url\': \'https://www.marca.com/en/soccer/laliga/r-madrid-leganes/2025/03/29/01_0101_20250329_186_957-live.html\', \'title\': \'Real Madrid 3-2 Leganes: Goals and highlights - LaLiga 24/25 | Marca\', \'content\': "While their form has varied throughout the campaign there is no denying Real Madrid are a force at home in LaLiga this season, as they head into Saturday\'s match having picked up 34 points from 13 matches.\n\nAs for Leganes they currently sit 18th in the table, though they are level with Alaves for 17th as both teams look to stay in the top flight. [...] The two teams have already played twice this season, with Real Madrid securing a 3-0 win in the reverse league fixture. They also met in the quarter-finals of the Copa del Rey, a game Real won 3-2.\n\nReal Madrid vs Leganes LIVE - Latest Updates\n\nMatch ends, Real Madrid 3, Leganes 2.\n\nSecond Half ends, Real Madrid 3, Leganes 2.\n\nFoul by Vin√≠cius J√∫nior (Real Madrid).\n\nSeydouba Ciss√© (Leganes) wins a free kick in the defensive half. [...] Goal! Real Madrid 1, Leganes 1. Diego Garc√≠a (Leganes) left footed shot from very close range.\n\nAttempt missed. √ìscar Rodr√≠guez (Leganes) left footed shot from the centre of the box.\n\nGoal! Real Madrid 1, Leganes 0. Kylian Mbapp√© (Real Madrid) converts the penalty with a right footed shot.\n\nPenalty Real Madrid. Arda G√ºler draws a foul in the penalty area.\n\nPenalty conceded by √ìscar Rodr√≠guez (Leganes) after a foul in the penalty area.\n\nDelay over. They are ready to continue.", \'score\': 0.8548001, \'raw_content\': None}, {\'url\': \'https://www.espn.com/soccer/report/_/gameId/704946\', \'title\': \'Real Madrid 3-2 Legan√©s (Mar 29, 2025) Game Analysis - ESPN\', \'content\': \'Real Madrid\n\nLegan√©s\n\nMbapp√© nets twice to keep Real Madrid\\'s title hopes alive\n\nReal Madrid vs. Legan√©s - Game Highlights\n\nWatch the Game Highlights from Real Madrid vs. Legan√©s, 03/30/2025\n\nReal Madrid\\'s Kylian Mbapp√© struck twice to help his side come from behind to claim a hard-fought 3-2 home win over relegation-threatened Leganes on Saturday to move the second-placed reigning champions level on points with leaders Barcelona. [...] Leganes pushed for an equaliser but fell to a third consecutive defeat to sit 18th on 27 points, level with Alaves who are one place higher in the safety zone on goal difference.\n\n"We have done a tremendous job. We leave with our heads held high because we were fighting until the end to score here," Leganes striker Garcia said.\n\n"Ultimately, it was down to the details that they took it. We played a very serious game and now we have to think about next week."\n\nGame Information\', \'score\': 0.82220376, \'raw_content\': None}], \'response_time\': 1.47}), AIMessage(content="Real Madrid secured a 3-2 victory against Leganes this weekend in their La Liga match. Kylian Mbapp√© scored twice, including a penalty, to help his team come from behind and claim the win, keeping Real Madrid\'s title hopes alive. Leganes, now sitting 18th in the table, continues to face challenges in their fight against relegation.", additional_kwargs={}, response_metadata={\'token_usage\': {\'completion_tokens\': 92, \'prompt_tokens\': 1086, \'total_tokens\': 1178}, \'model\': \'\', \'finish_reason\': \'stop\'}, id=\'run-22226dda-0475-49b7-882f-fe7bd63ef025-0\'), HumanMessage(content=\'Which players played the match?\', additional_kwargs={}, response_metadata={}, id=\'3e6d9f84-06a2-4148-8f2b-d8ef42c3bea1\'), AIMessage(content=\'\', additional_kwargs={\'tool_calls\': [{\'function\': {\'arguments\': {\'query\': \'Real Madrid vs Leganes match report players lineup\'}, \'name\': \'tavily_search_results_json\', \'description\': None}, \'id\': \'0\', \'type\': \'function\'}]}, response_metadata={\'token_usage\': {\'completion_tokens\': 29, \'prompt_tokens\': 1178, \'total_tokens\': 1207}, \'model\': \'\', \'finish_reason\': \'stop\'}, id=\'run-025d3235-61b9-4add-8e1b-5b1bc795a9d3-0\', tool_calls=[{\'name\': \'tavily_search_results_json\', \'args\': {\'query\': \'Real Madrid vs Leganes match report players lineup\'}, \'id\': \'0\', \'type\': \'tool_call\'}]), ToolMessage(content=\'[{"title": "Real Madrid vs. Leganes final score: La Liga result, updates, stats ...", "url": "https://www.sportingnews.com/us/soccer/news/real-madrid-leganes-score-result-updates-stats-la-liga/8ecf730cfcb9b6c5f6693a0d", "content": "Real Madrid came through a topsy-turvy game with Leganes to claim a 3-2 victory and put pressure back on Barcelona in La Liga\\'s title race. Kylian Mbappe scored in each half either side of a Jude Bellingham goal ‚Äî his first in the league since January 3 ‚Äî to seal all three points for the champions after Leganes had come from behind to lead at the interval. Rodrygo won back the ball in the Leganes half and earned a free-kick on the edge of the box, and Mbappe found the bottom corner after rolling the ball short to Fran Garcia to work an angle. Leganes lead Real Madrid at the Bernabeu for the very first time! *Real Madrid starting lineup (4-3-3, right to left):*\xa0Lunin (GK) ‚Äî Vazquez, Rudiger, Asencio, Garcia ‚Äî Modric, Bellingham, Camavinga ‚Äî B.", "score": 0.88372874}, {"title": "CONFIRMED lineups: Real Madrid vs Legan√©s, 2025 La Liga", "url": "https://www.managingmadrid.com/2025/3/29/24396638/real-madrid-vs-leganes-2025-la-liga-live-online-stream", "content": "Real Madrid starting XI: Lunin, Vazquez, Rudiger, Asencio, Fran Garcia, Camavinga, Guler, Modric, Bellingham, Brahim, Mbappe. Leganes starting", "score": 0.83452857}]\', name=\'tavily_search_results_json\', id=\'2dbc1324-2c20-406a-b2d7-a3d6fc609537\', tool_call_id=\'0\', artifact={\'query\': \'Real Madrid vs Leganes match report players lineup\', \'follow_up_questions\': None, \'answer\': None, \'images\': [], \'results\': [{\'url\': \'https://www.sportingnews.com/us/soccer/news/real-madrid-leganes-score-result-updates-stats-la-liga/8ecf730cfcb9b6c5f6693a0d\', \'title\': \'Real Madrid vs. Leganes final score: La Liga result, updates, stats ...\', \'content\': "Real Madrid came through a topsy-turvy game with Leganes to claim a 3-2 victory and put pressure back on Barcelona in La Liga\'s title race. Kylian Mbappe scored in each half either side of a Jude Bellingham goal ‚Äî his first in the league since January 3 ‚Äî to seal all three points for the champions after Leganes had come from behind to lead at the interval. Rodrygo won back the ball in the Leganes half and earned a free-kick on the edge of the box, and Mbappe found the bottom corner after rolling the ball short to Fran Garcia to work an angle. Leganes lead Real Madrid at the Bernabeu for the very first time! *Real Madrid starting lineup (4-3-3, right to left):*\xa0Lunin (GK) ‚Äî Vazquez, Rudiger, Asencio, Garcia ‚Äî Modric, Bellingham, Camavinga ‚Äî B.", \'score\': 0.88372874, \'raw_content\': None}, {\'url\': \'https://www.managingmadrid.com/2025/3/29/24396638/real-madrid-vs-leganes-2025-la-liga-live-online-stream\', \'title\': \'CONFIRMED lineups: Real Madrid vs Legan√©s, 2025 La Liga\', \'content\': \'Real Madrid starting XI: Lunin, Vazquez, Rudiger, Asencio, Fran Garcia, Camavinga, Guler, Modric, Bellingham, Brahim, Mbappe. Leganes starting\', \'score\': 0.83452857, \'raw_content\': None}], \'response_time\': 3.36}), AIMessage(content=\'\', additional_kwargs={\'tool_calls\': [{\'function\': {\'arguments\': {\'query\': \'Real Madrid vs Leganes players 2025\'}, \'name\': \'tavily_search_results_json\', \'description\': None}, \'id\': \'0\', \'type\': \'function\'}]}, response_metadata={\'token_usage\': {\'completion_tokens\': 31, \'prompt_tokens\': 1630, \'total_tokens\': 1661}, \'model\': \'\', \'finish_reason\': \'stop\'}, id=\'run-d6b4c4ff-0923-4082-9dea-7c51b2a4fc60-0\', tool_calls=[{\'name\': \'tavily_search_results_json\', \'args\': {\'query\': \'Real Madrid vs Leganes players 2025\'}, \'id\': \'0\', \'type\': \'tool_call\'}]), ToolMessage(content=\'[{"title": "Player Ratings: Real Madrid 3-2 Leganes; 2025 La Liga", "url": "https://www.managingmadrid.com/2025/3/30/24396688/player-ratings-real-madrid-3-2-leganes-2025-la-liga", "content": "Ra√∫l Asencio‚Äî7: Applauded by the Bernabeu on multiple occasions with good sweeping up defensively.\\n\\nFran Garc√≠a‚Äî6: Better on the offensive end, getting into the final third and playing some dagger crosses.\\n\\nEduardo Camavinga‚Äî6: Modric and Camavinga struggled to deal with Leganes counter attacks and Diego, playing as a #10 for Leganes, got the better of both of them. [...] Follow Managing Madrid online:\\n\\nSite search\\n\\nManaging Madrid main menu\\n\\nFiled under:\\n\\nPlayer Ratings: Real Madrid 3-2 Leganes; 2025 La Liga\\n\\nKylian Mbappe scores a brace to help Madrid secure a nervy 3-2 victory.\\n\\nShare this story\\n\\nShare\\nAll sharing options for:\\nPlayer Ratings: Real Madrid 3-2 Leganes; 2025 La Liga\\n\\nFull match player ratings below:\\n\\nAndriy Lunin‚Äî7: Not at fault for the goals, was left with the opposition taking a shot from near the six yard box. [...] Lucas V√°zquez‚Äî4: Exposed in transition and lacking the speed and athleticism to cover the gaps he leaves when venturing forward. Needs a more ‚Äúpessimistic‚Äù attitude when the ball is on the opposite flank, occupying better spots in ‚Äú‚Äúrest defense‚Äù.\\n\\nAntonio Rudiger‚Äî5: Several unnecessary long distance shots to hurt Madrid‚Äôs rhythm and reinforce Leganes game plan. Playing with too many matches in his legs and it‚Äôs beginning to show.", "score": 0.8832463}, {"title": "Real Madrid vs. Legan√©s (Mar 29, 2025) Live Score - ESPN", "url": "https://www.espn.com/soccer/match/_/gameId/704946", "content": "Match Formations ¬∑ 13. Lunin ¬∑ 20. Garc√≠a ¬∑ 22. R√ºdiger ¬∑ 35. Asencio ¬∑ 17. V√°zquez ¬∑ 5. Bellingham ¬∑ 10. Modric ¬∑ 6. Camavinga.", "score": 0.86413884}]\', name=\'tavily_search_results_json\', id=\'ac15dd6e-09b1-4075-834e-d869f4079285\', tool_call_id=\'0\', artifact={\'query\': \'Real Madrid vs Leganes players 2025\', \'follow_up_questions\': None, \'answer\': None, \'images\': [], \'results\': [{\'url\': \'https://www.managingmadrid.com/2025/3/30/24396688/player-ratings-real-madrid-3-2-leganes-2025-la-liga\', \'title\': \'Player Ratings: Real Madrid 3-2 Leganes; 2025 La Liga\', \'content\': \'Ra√∫l Asencio‚Äî7: Applauded by the Bernabeu on multiple occasions with good sweeping up defensively.\n\nFran Garc√≠a‚Äî6: Better on the offensive end, getting into the final third and playing some dagger crosses.\n\nEduardo Camavinga‚Äî6: Modric and Camavinga struggled to deal with Leganes counter attacks and Diego, playing as a #10 for Leganes, got the better of both of them. [...] Follow Managing Madrid online:\n\nSite search\n\nManaging Madrid main menu\n\nFiled under:\n\nPlayer Ratings: Real Madrid 3-2 Leganes; 2025 La Liga\n\nKylian Mbappe scores a brace to help Madrid secure a nervy 3-2 victory.\n\nShare this story\n\nShare\nAll sharing options for:\nPlayer Ratings: Real Madrid 3-2 Leganes; 2025 La Liga\n\nFull match player ratings below:\n\nAndriy Lunin‚Äî7: Not at fault for the goals, was left with the opposition taking a shot from near the six yard box. [...] Lucas V√°zquez‚Äî4: Exposed in transition and lacking the speed and athleticism to cover the gaps he leaves when venturing forward. Needs a more ‚Äúpessimistic‚Äù attitude when the ball is on the opposite flank, occupying better spots in ‚Äú‚Äúrest defense‚Äù.\n\nAntonio Rudiger‚Äî5: Several unnecessary long distance shots to hurt Madrid‚Äôs rhythm and reinforce Leganes game plan. Playing with too many matches in his legs and it‚Äôs beginning to show.\', \'score\': 0.8832463, \'raw_content\': None}, {\'url\': \'https://www.espn.com/soccer/match/_/gameId/704946\', \'title\': \'Real Madrid vs. Legan√©s (Mar 29, 2025) Live Score - ESPN\', \'content\': \'Match Formations ¬∑ 13. Lunin ¬∑ 20. Garc√≠a ¬∑ 22. R√ºdiger ¬∑ 35. Asencio ¬∑ 17. V√°zquez ¬∑ 5. Bellingham ¬∑ 10. Modric ¬∑ 6. Camavinga.\', \'score\': 0.86413884, \'raw_content\': None}], \'response_time\': 0.89}), AIMessage(content=\'\', additional_kwargs={\'tool_calls\': [{\'function\': {\'arguments\': {\'query\': \'Real Madrid vs Leganes starting lineup\'}, \'name\': \'tavily_search_results_json\', \'description\': None}, \'id\': \'0\', \'type\': \'function\'}]}, response_metadata={\'token_usage\': {\'completion_tokens\': 27, \'prompt_tokens\': 2212, \'total_tokens\': 2239}, \'model\': \'\', \'finish_reason\': \'stop\'}, id=\'run-68867df1-2012-47ac-9f01-42b071ef3a1f-0\', tool_calls=[{\'name\': \'tavily_search_results_json\', \'args\': {\'query\': \'Real Madrid vs Leganes starting lineup\'}, \'id\': \'0\', \'type\': \'tool_call\'}]), ToolMessage(content=\'[{"title": "Starting lineups of Real Madrid and Legan√©s", "url": "https://www.realmadrid.com/en-US/news/football/first-team/latest-news/once-inicial-del-real-madrid-contra-el-leganes-29-03-2025", "content": "Starting lineups of Real Madrid and Legan√É¬©s\\n\\n\\n\\nThe Whites√¢\x80\x99 team is: Lunin, Lucas V., Asencio, R√É¬ºdiger, Fran Garc√É\xada, Arda G√É¬ºler, Modri√Ñ\x87, Camavinga, Bellingham, Brahim and Mbapp√É¬©.\\n\\n\\n\\n\\n\\nReal Madrid\xa0have named their starting line-up for the game against Legan√É¬©s on matchday 29 of\xa0LaLiga, which will be played at the\xa0Santiago Bernab√É¬©u\xa0(9 pm CET). [...] Real Madrid starting line-up:\\n13. Lunin\\n17. Lucas V.\\n35. Asencio\\n22. R√É¬ºdiger\\n20. Fran Garc√É\xada\\n15. Arda G√É¬ºler\\n10. Modri√Ñ\x87\\n6. Camavinga\\n5. Bellingham\\n21. Brahim\\n9. Mbapp√É¬©.\\n\\nSubstitutes:\\n26. Fran Gonz√É¬°lez\\n34. Sergio Mestre\\n4. Alaba\\n7. Vini Jr.\\n8. Valverde\\n11. Rodrygo\\n14. Tchouameni\\n16. Endrick\\n18. Vallejo\\n43. Diego Aguado.\\n\\nLegan√É¬©s starting line-up:\\n13. Dmitrovic\\n5. Tapia\\n6. Sergio G.\\n7. √É\x93scar\\n10. Raba\\n11. Cruz\\n12. V. Rosier\\n17. Neyou\\n19. Diego G.\\n20. Javi Hern√É¬°ndez\\n22. Nastasic. [...] Suplentes:\\n1. Juan Soriano\\n36. Abajas\\n2. A. Alti\\n3. Jorge S√É¬°enz\\n8. Cisse\\n9. Miguel\\n14. Darko\\n18. Duk\\n21. R. L√É¬≥pez\\n23. Munir\\n24. Chicco\\n30. I. Diomande.\\n\\n\\n\\nDownload Now\\n\\nOfficial App Fan\\n\\nReal Madrid √Ç¬© 2025 All rights reserved", "score": 0.9465623}, {"title": "Real Madrid vs. Leganes lineups, confirmed starting 11, team news ...", "url": "https://www.sportingnews.com/us/soccer/news/real-madrid-leganes-lineups-starting-11-team-news-injuries/aac757d10cc7b9a084995b4d", "content": "Real Madrid starting lineup (4-3-3, right to left): Lunin (GK) ‚Äî Vazquez, Rudiger, Asencio, Garcia ‚Äî Modric, Bellingham, Camavinga ‚Äî B. Diaz,", "score": 0.9224337}]\', name=\'tavily_search_results_json\', id=\'46721f2b-2df2-4da2-831a-ce94f6b4ff8f\', tool_call_id=\'0\', artifact={\'query\': \'Real Madrid vs Leganes starting lineup\', \'follow_up_questions\': None, \'answer\': None, \'images\': [], \'results\': [{\'url\': \'https://www.realmadrid.com/en-US/news/football/first-team/latest-news/once-inicial-del-real-madrid-contra-el-leganes-29-03-2025\', \'title\': \'Starting lineups of Real Madrid and Legan√©s\', \'content\': \'Starting lineups of Real Madrid and Legan√É¬©s\n\n\n\nThe Whites√¢\x80\x99 team is: Lunin, Lucas V., Asencio, R√É¬ºdiger, Fran Garc√É\xada, Arda G√É¬ºler, Modri√Ñ\x87, Camavinga, Bellingham, Brahim and Mbapp√É¬©.\n\n\n\n\n\nReal Madrid\xa0have named their starting line-up for the game against Legan√É¬©s on matchday 29 of\xa0LaLiga, which will be played at the\xa0Santiago Bernab√É¬©u\xa0(9 pm CET). [...] Real Madrid starting line-up:\n13. Lunin\n17. Lucas V.\n35. Asencio\n22. R√É¬ºdiger\n20. Fran Garc√É\xada\n15. Arda G√É¬ºler\n10. Modri√Ñ\x87\n6. Camavinga\n5. Bellingham\n21. Brahim\n9. Mbapp√É¬©.\n\nSubstitutes:\n26. Fran Gonz√É¬°lez\n34. Sergio Mestre\n4. Alaba\n7. Vini Jr.\n8. Valverde\n11. Rodrygo\n14. Tchouameni\n16. Endrick\n18. Vallejo\n43. Diego Aguado.\n\nLegan√É¬©s starting line-up:\n13. Dmitrovic\n5. Tapia\n6. Sergio G.\n7. √É\x93scar\n10. Raba\n11. Cruz\n12. V. Rosier\n17. Neyou\n19. Diego G.\n20. Javi Hern√É¬°ndez\n22. Nastasic. [...] Suplentes:\n1. Juan Soriano\n36. Abajas\n2. A. Alti\n3. Jorge S√É¬°enz\n8. Cisse\n9. Miguel\n14. Darko\n18. Duk\n21. R. L√É¬≥pez\n23. Munir\n24. Chicco\n30. I. Diomande.\n\n\n\nDownload Now\n\nOfficial App Fan\n\nReal Madrid √Ç¬© 2025 All rights reserved\', \'score\': 0.9465623, \'raw_content\': None}, {\'url\': \'https://www.sportingnews.com/us/soccer/news/real-madrid-leganes-lineups-starting-11-team-news-injuries/aac757d10cc7b9a084995b4d\', \'title\': \'Real Madrid vs. Leganes lineups, confirmed starting 11, team news ...\', \'content\': \'Real Madrid starting lineup (4-3-3, right to left): Lunin (GK) ‚Äî Vazquez, Rudiger, Asencio, Garcia ‚Äî Modric, Bellingham, Camavinga ‚Äî B. Diaz,\', \'score\': 0.9224337, \'raw_content\': None}], \'response_time\': 2.3}), AIMessage(content=\'The starting lineup for Real Madrid in their match against Legan√©s was: Lunin (GK), V√°zquez, R√ºdiger, Asencio, Fran Garc√≠a, Modric, Bellingham, Camavinga, Brahim, Arda G√ºler, and Mbapp√©. Notable players like Vini Jr., Rodrygo, and Valverde were on the bench.\', additional_kwargs={}, response_metadata={\'token_usage\': {\'completion_tokens\': 98, \'prompt_tokens\': 2954, \'total_tokens\': 3052}, \'model\': \'\', \'finish_reason\': \'stop\'}, id=\'run-0bd921c6-1d94-4a4c-9d9c-d255d301e2d5-0\')]}, next=(), config={\'configurable\': {\'thread_id\': \'3\', \'checkpoint_ns\': \'\', \'checkpoint_id\': \'1f010a50-49f2-6904-800c-ec8d67fe5b92\'}}, metadata={\'source\': \'loop\', \'writes\': {\'chatbot_node\': {\'messages\': [AIMessage(content=\'The starting lineup for Real Madrid in their match against Legan√©s was: Lunin (GK), V√°zquez, R√ºdiger, Asencio, Fran Garc√≠a, Modric, Bellingham, Camavinga, Brahim, Arda G√ºler, and Mbapp√©. Notable players like Vini Jr., Rodrygo, and Valverde were on the bench.\', additional_kwargs={}, response_metadata={\'token_usage\': {\'completion_tokens\': 98, \'prompt_tokens\': 2954, \'total_tokens\': 3052}, \'model\': \'\', \'finish_reason\': \'stop\'}, id=\'run-0bd921c6-1d94-4a4c-9d9c-d255d301e2d5-0\')]}}, \'thread_id\': \'3\', \'step\': 12, \'parents\': {}}, created_at=\'2025-04-03T16:02:18.167222+00:00\', parent_config={\'configurable\': {\'thread_id\': \'3\', \'checkpoint_ns\': \'\', \'checkpoint_id\': \'1f010a50-1feb-6534-800b-079c102aaa71\'}}, tasks=())',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos ver o pr√≥ximo n√≥do a ser processado, podemos usar o atributo <code>next</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">snapshot</span><span class="o">.</span><span class="n">next</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '()',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Dado que o grafo foi conclu√≠do, <code>next</code> est√° vazio. Se voc√™ obt√©m um estado a partir de uma invoca√ß√£o do grafo, <code>next</code> indica qual n√≥ ser√° executado em seguida.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A captura anterior (<code>snapshot</code>) cont√©m os valores de estado atuais, a configura√ß√£o correspondente e o pr√≥ximo n√≥ (<code>next</code>) a ser processado. No nosso caso, o gr√°fico alcan√ßou o estado <code>END</code>, por isso <code>next</code> est√° vazio.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a reescrever todo o c√≥digo para que seja mais leg√≠vel.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>',
          '<span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>',
          '<span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>',
          '<span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langchain_community.utilities.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchAPIWrapper</span>',
          '<span class="kn">from</span> <span class="nn">langchain_community.tools.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchResults</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">ToolMessage</span>',
          '<span class="kn">from</span> <span class="nn">langgraph.prebuilt</span> <span class="kn">import</span> <span class="n">ToolNode</span><span class="p">,</span> <span class="n">tools_condition</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langgraph.checkpoint.memory</span> <span class="kn">import</span> <span class="n">MemorySaver</span>',
          '',
          '<span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>',
          '<span class="kn">import</span> <span class="nn">json</span>',
          '',
          '<span class="kn">import</span> <span class="nn">os</span>',
          '<span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>',
          '',
          '<span class="kn">import</span> <span class="nn">dotenv</span>',
          '<span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>',
          '<span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>',
          '<span class="n">TAVILY_API_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"TAVILY_LANGGRAPH_API_KEY"</span><span class="p">)</span>',
          '',
          '<span class="c1"># State</span>',
          '<span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
          '    <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>',
          '',
          '<span class="c1"># Tools</span>',
          '<span class="n">wrapper</span> <span class="o">=</span> <span class="n">TavilySearchAPIWrapper</span><span class="p">(</span><span class="n">tavily_api_key</span><span class="o">=</span><span class="n">TAVILY_API_KEY</span><span class="p">)</span>',
          '<span class="n">tool</span> <span class="o">=</span> <span class="n">TavilySearchResults</span><span class="p">(</span><span class="n">api_wrapper</span><span class="o">=</span><span class="n">wrapper</span><span class="p">,</span> <span class="n">max_results</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>',
          '<span class="n">tools_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">tool</span><span class="p">]</span>',
          '',
          '<span class="c1"># Create the LLM model</span>',
          '<span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>',
          '<span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>',
          '<span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>',
          '    <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>',
          '    <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>',
          '    <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>',
          '    <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
          '    <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="c1"># Create the chat model</span>',
          '<span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>',
          '<span class="c1"># Create the LLM with tools</span>',
          '<span class="n">llm_with_tools</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">bind_tools</span><span class="p">(</span><span class="n">tools_list</span><span class="p">)</span>',
          '',
          '<span class="c1"># Tool node</span>',
          '<span class="n">tool_node</span> <span class="o">=</span> <span class="n">ToolNode</span><span class="p">(</span><span class="n">tools</span><span class="o">=</span><span class="n">tools_list</span><span class="p">)</span>',
          '',
          '<span class="c1"># Functions</span>',
          '<span class="k">def</span> <span class="nf">chatbot_function</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>',
          '    <span class="k">return</span> <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">llm_with_tools</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])]}</span>',
          '',
          '<span class="c1"># Start to build the graph</span>',
          '<span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>',
          '',
          '<span class="c1"># Add nodes to the graph</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chatbot_function</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="n">tool_node</span><span class="p">)</span>',
          '',
          '<span class="c1"># Add edges</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_conditional_edges</span><span class="p">(</span> <span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">tools_condition</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
          '',
          '<span class="c1"># Compile the graph</span>',
          '<span class="n">memory</span> <span class="o">=</span> <span class="n">MemorySaver</span><span class="p">()</span>',
          '<span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">checkpointer</span><span class="o">=</span><span class="n">memory</span><span class="p">)</span>',
          '',
          '<span class="c1"># Display the graph</span>',
          '<span class="k">try</span><span class="p">:</span>',
          '    <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>',
          '<span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Error al visualizar el grafo: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Error al visualizar el grafo: Failed to reach https://mermaid.ink/ API while trying to render your graph after 1 retries. To resolve this issue:',
          '1. Check your internet connection and try again',
          '2. Try with higher retry settings: `draw_mermaid_png(..., max_retries=5, retry_delay=2.0)`',
          '3. Use the Pyppeteer rendering method which will render your graph locally in a browser: `draw_mermaid_png(..., draw_method=MermaidDrawMethod.PYPPETEER)`',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">USER1_THREAD_ID</span> <span class="o">=</span> <span class="s2">"1"</span>',
          '<span class="n">config_USER1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="n">USER1_THREAD_ID</span><span class="p">}}</span>',
          '',
          '<span class="n">user_input</span> <span class="o">=</span> <span class="s2">"Hi there! My name is Maximo."</span>',
          '',
          '<span class="c1"># The config is the **second positional argument** to stream() or invoke()!</span>',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span>',
          '    <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">}]},</span>',
          '    <span class="n">config_USER1</span><span class="p">,</span>',
          '    <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Hi there! My name is Maximo.',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Hello Maximo! It\'s nice to meet you. How can I assist you today? Feel free to ask me any questions or let me know if you need help with anything specific.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">user_input</span> <span class="o">=</span> <span class="s2">"Do you remember my name?"</span>',
          '',
          '<span class="c1"># The config is the **second positional argument** to stream() or invoke()!</span>',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span>',
          '    <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">}]},</span>',
          '    <span class="n">config_USER1</span><span class="p">,</span>',
          '    <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Do you remember my name?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Yes, I remember your name! You mentioned it\'s Maximo. It\'s nice to chat with you, Maximo. How can I assist you today?',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p><strong>Parab√©ns!</strong> Nosso chatbot agora pode manter o estado da conversa em todas as sess√µes gra√ßas ao sistema de pontos de controle (<code>checkpoints</code>) do <code>LangGraph</code>. Isso abre possibilidades para intera√ß√µes mais naturais e contextuais. O controle do <code>LangGraph</code> at√© mesmo lida com estados de grafos complexos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Mais">Mais<a class="anchor-link" href="#Mais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 146" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Chatbot-com-mensagem-de-resumo">Chatbot com mensagem de resumo<a class="anchor-link" href="#Chatbot-com-mensagem-de-resumo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 147" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se vamos gerenciar o contexto da conversa√ß√£o para n√£o gastar muitos tokens, uma coisa que podemos fazer para melhorar a conversa√ß√£o √© adicionar uma mensagem com o resumo da conversa√ß√£o. Isso pode ser √∫til para o exemplo anterior, no qual filtramos tanto o estado que o LLM n√£o tem contexto suficiente.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>
      <span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>
      <span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">RemoveMessage</span><span class="p">,</span> <span class="n">trim_messages</span><span class="p">,</span> <span class="n">SystemMessage</span><span class="p">,</span> <span class="n">HumanMessage</span><span class="p">,</span> <span class="n">AIMessage</span><span class="p">,</span> <span class="n">RemoveMessage</span>
      <span class="kn">from</span> <span class="nn">langgraph.checkpoint.memory</span> <span class="kn">import</span> <span class="n">MemorySaver</span>
      <span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="kn">import</span> <span class="nn">dotenv</span>
      
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>
      
      <span class="n">memory_saver</span> <span class="o">=</span> <span class="n">MemorySaver</span><span class="p">()</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>
          <span class="n">summary</span><span class="p">:</span> <span class="nb">str</span>
      
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>
      <span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>
      <span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>
          <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>
          <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>
          <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>
          <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
          <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>
      <span class="p">)</span>
      <span class="c1"># Create the chat model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>
      
      <span class="c1"># Print functions</span>
      <span class="k">def</span> <span class="nf">print_message</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
          <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">HumanMessage</span><span class="p">):</span>
              <span class="n">message_content</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">content</span>
              <span class="n">message_lines</span> <span class="o">=</span> <span class="n">message_content</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
              <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">message_lines</span><span class="p">):</span>
                  <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">[HumanMessage]: </span><span class="si">{opening_brace}</span><span class="n">line</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
                  <span class="k">else</span><span class="p">:</span>
                      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="si">{opening_brace}</span><span class="n">line</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
          <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">SystemMessage</span><span class="p">):</span>
              <span class="n">message_content</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">content</span>
              <span class="n">message_lines</span> <span class="o">=</span> <span class="n">message_content</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
              <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">message_lines</span><span class="p">):</span>
                  <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">[SystemMessage]: </span><span class="si">{opening_brace}</span><span class="n">line</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
                  <span class="k">else</span><span class="p">:</span>
                      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="si">{opening_brace}</span><span class="n">line</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
          <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">AIMessage</span><span class="p">):</span>
              <span class="n">message_content</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">content</span>
              <span class="n">message_lines</span> <span class="o">=</span> <span class="n">message_content</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
              <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">message_lines</span><span class="p">):</span>
                  <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">[AIMessage]: </span><span class="si">{opening_brace}</span><span class="n">line</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
                  <span class="k">else</span><span class="p">:</span>
                      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="si">{opening_brace}</span><span class="n">line</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
          <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">RemoveMessage</span><span class="p">):</span>
              <span class="n">message_content</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">content</span>
              <span class="n">message_lines</span> <span class="o">=</span> <span class="n">message_content</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
              <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">message_lines</span><span class="p">):</span>
                  <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">[RemoveMessage]: </span><span class="si">{opening_brace}</span><span class="n">line</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
                  <span class="k">else</span><span class="p">:</span>
                      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="si">{opening_brace}</span><span class="n">line</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
          <span class="k">else</span><span class="p">:</span>
              <span class="n">message_content</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">content</span>
              <span class="n">message_lines</span> <span class="o">=</span> <span class="n">message_content</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
              <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">message_lines</span><span class="p">):</span>
                  <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">[</span><span class="si">{opening_brace}</span><span class="nb">type</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="si">{closing_brace}</span><span class="s2">]: </span><span class="si">{opening_brace}</span><span class="n">line</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
                  <span class="k">else</span><span class="p">:</span>
                      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="si">{opening_brace}</span><span class="n">line</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      
      <span class="k">def</span> <span class="nf">print_state_summary</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="k">if</span> <span class="n">state</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"summary"</span><span class="p">):</span>
              <span class="n">summary_lines</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="s2">"summary"</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
              <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">summary_lines</span><span class="p">):</span>
                  <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">Summary of the conversation: </span><span class="si">{opening_brace}</span><span class="n">line</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
                  <span class="k">else</span><span class="p">:</span>
                      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="si">{opening_brace}</span><span class="n">line</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
          <span class="k">else</span><span class="p">:</span>
              <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">No summary of the conversation"</span><span class="p">)</span>
      
      <span class="k">def</span> <span class="nf">print_summary</span><span class="p">(</span><span class="n">summary</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
          <span class="k">if</span> <span class="n">summary</span><span class="p">:</span>
              <span class="n">summary_lines</span> <span class="o">=</span> <span class="n">summary</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
              <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">summary_lines</span><span class="p">):</span>
                  <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">Summary of the conversation: </span><span class="si">{opening_brace}</span><span class="n">line</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
                  <span class="k">else</span><span class="p">:</span>
                      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="si">{opening_brace}</span><span class="n">line</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
          <span class="k">else</span><span class="p">:</span>
              <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t\t</span><span class="s2">No summary of the conversation"</span><span class="p">)</span>
      
      <span class="c1"># Nodes</span>
      <span class="k">def</span> <span class="nf">filter_messages</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t</span><span class="s2">--- 1 messages (input to filter_messages) ---"</span><span class="p">)</span>
          <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]:</span>
              <span class="n">print_message</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
          <span class="n">print_state_summary</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t</span><span class="s2">------------------------------------------------"</span><span class="p">)</span>
      
          <span class="c1"># Delete all but the 2 most recent messages if there are more than 2</span>
          <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">:</span>
              <span class="n">delete_messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">RemoveMessage</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="n">m</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][:</span><span class="o">-</span><span class="mi">2</span><span class="p">]]</span>
          <span class="k">else</span><span class="p">:</span>
              <span class="n">delete_messages</span> <span class="o">=</span> <span class="p">[]</span>
      
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t</span><span class="s2">--- 1 messages (output of filter_messages) ---"</span><span class="p">)</span>
          <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">delete_messages</span><span class="p">:</span>
              <span class="n">print_message</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
          <span class="n">print_state_summary</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t</span><span class="s2">------------------------------------------------"</span><span class="p">)</span>
      
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">delete_messages</span><span class="p">{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">trim_messages_node</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="c1"># print the messages received from filter_messages_node</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\n\n\t</span><span class="s2">--- 2 messages (input to trim_messages) ---"</span><span class="p">)</span>
          <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]:</span>
              <span class="n">print_message</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
          <span class="n">print_state_summary</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t</span><span class="s2">------------------------------------------------"</span><span class="p">)</span>
      
          <span class="c1"># Trim the messages based on the specified parameters</span>
          <span class="n">trimmed_messages</span> <span class="o">=</span> <span class="n">trim_messages</span><span class="p">(</span>
              <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">],</span>
              <span class="n">max_tokens</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>       <span class="c1"># Maximum tokens allowed in the trimmed list</span>
              <span class="n">strategy</span><span class="o">=</span><span class="s2">"last"</span><span class="p">,</span>     <span class="c1"># Keep the latest messages</span>
              <span class="n">token_counter</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>   <span class="c1"># Use the LLM's tokenizer to count tokens</span>
              <span class="n">allow_partial</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>  <span class="c1"># Allow cutting messages mid-way if needed</span>
          <span class="p">)</span>
      
          <span class="c1"># Identify the messages that must be removed</span>
          <span class="c1"># This is crucial: determine which messages are in 'state["messages"]' but not in 'trimmed_messages'</span>
          <span class="n">original_ids</span> <span class="o">=</span> <span class="p">{opening_brace}</span><span class="n">m</span><span class="o">.</span><span class="n">id</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]{closing_brace}</span>
          <span class="n">trimmed_ids</span> <span class="o">=</span> <span class="p">{opening_brace}</span><span class="n">m</span><span class="o">.</span><span class="n">id</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">trimmed_messages</span><span class="p">{closing_brace}</span>
          <span class="n">ids_to_remove</span> <span class="o">=</span> <span class="n">original_ids</span> <span class="o">-</span> <span class="n">trimmed_ids</span>
          
          <span class="c1"># Create a RemoveMessage for each message that must be removed</span>
          <span class="n">messages_to_remove</span> <span class="o">=</span> <span class="p">[</span><span class="n">RemoveMessage</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="n">msg_id</span><span class="p">)</span> <span class="k">for</span> <span class="n">msg_id</span> <span class="ow">in</span> <span class="n">ids_to_remove</span><span class="p">]</span>
      
          <span class="c1"># Print the result of the trimming</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t</span><span class="s2">--- 2 messages (output of trim_messages - after trimming) ---"</span><span class="p">)</span>
          <span class="k">if</span> <span class="n">trimmed_messages</span><span class="p">:</span>
              <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">trimmed_messages</span><span class="p">:</span>
                  <span class="n">print_message</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
          <span class="k">else</span><span class="p">:</span>
              <span class="nb">print</span><span class="p">(</span><span class="s2">"[Empty list - No messages after trimming]"</span><span class="p">)</span>
          <span class="n">print_state_summary</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t</span><span class="s2">------------------------------------------------"</span><span class="p">)</span>
      
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">messages_to_remove</span><span class="p">{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">chat_model_node</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="c1"># Get summary of the conversation if it exists</span>
          <span class="n">summary</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"summary"</span><span class="p">,</span> <span class="s2">""</span><span class="p">)</span>
      
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\n\n\t</span><span class="s2">--- 3 messages (input to chat_model_node) ---"</span><span class="p">)</span>
          <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]:</span>
              <span class="n">print_message</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
          <span class="n">print_state_summary</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t</span><span class="s2">------------------------------------------------"</span><span class="p">)</span>
      
          <span class="c1"># If there is a summary, add it to the system message</span>
          <span class="k">if</span> <span class="n">summary</span><span class="p">:</span>
              <span class="c1"># Add the summary to the system message</span>
              <span class="n">system_message</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">"Summary of the conversation earlier: </span><span class="si">{opening_brace}</span><span class="n">summary</span><span class="si">{closing_brace}</span><span class="s2">"</span>
      
              <span class="c1"># Add the system message to the messages at the beginning</span>
              <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">SystemMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">system_message</span><span class="p">)]</span> <span class="o">+</span> <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]</span>
          
          <span class="c1"># If there is no summary, just return the messages</span>
          <span class="k">else</span><span class="p">:</span>
              <span class="n">messages</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2">--- 3 messages (input to chat_model_node) ---"</span><span class="p">)</span>
          <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>
              <span class="n">print_message</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
          <span class="n">print_summary</span><span class="p">(</span><span class="n">summary</span><span class="p">)</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t</span><span class="s2">------------------------------------------------"</span><span class="p">)</span>
      
          <span class="c1"># Invoke the LLM with the messages</span>
          <span class="n">response</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">messages</span><span class="p">)</span>
      
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t</span><span class="s2">--- 3 messages (output of chat_model_node) ---"</span><span class="p">)</span>
          <span class="n">print_message</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
          <span class="n">print_summary</span><span class="p">(</span><span class="n">summary</span><span class="p">)</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t</span><span class="s2">------------------------------------------------"</span><span class="p">)</span>
      
          <span class="c1"># Return the LLM's response in the correct state format</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">response</span><span class="p">]{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">summarize_conversation</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="c1"># Get summary of the conversation if it exists</span>
          <span class="n">summary</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"summary"</span><span class="p">,</span> <span class="s2">""</span><span class="p">)</span>
      
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\n\n\t</span><span class="s2">--- 4 messages (input to summarize_conversation) ---"</span><span class="p">)</span>
          <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]:</span>
              <span class="n">print_message</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
          <span class="n">print_summary</span><span class="p">(</span><span class="n">summary</span><span class="p">)</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t</span><span class="s2">------------------------------------------------"</span><span class="p">)</span>
      
          <span class="c1"># If there is a summary, add it to the system message</span>
          <span class="k">if</span> <span class="n">summary</span><span class="p">:</span>
              <span class="n">summary_message</span> <span class="o">=</span> <span class="p">(</span>
                  <span class="sa">f</span><span class="s2">"This is a summary of the conversation to date: </span><span class="si">{opening_brace}</span><span class="n">summary</span><span class="si">{closing_brace}</span><span class="se">\n\n</span><span class="s2">"</span>
                  <span class="s2">"Extend the summary by taking into account the new messages above."</span>
              <span class="p">)</span>
          
          <span class="c1"># If there is no summary, create a new one</span>
          <span class="k">else</span><span class="p">:</span>
              <span class="n">summary_message</span> <span class="o">=</span> <span class="s2">"Create a summary of the conversation above."</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2">--- 4 summary message ---"</span><span class="p">)</span>
          <span class="n">summary_lines</span> <span class="o">=</span> <span class="n">summary_message</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
          <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">summary_lines</span><span class="p">):</span>
              <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="si">{opening_brace}</span><span class="n">line</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
              <span class="k">else</span><span class="p">:</span>
                  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t\t</span><span class="si">{opening_brace}</span><span class="n">line</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
          <span class="n">print_summary</span><span class="p">(</span><span class="n">summary</span><span class="p">)</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t</span><span class="s2">------------------------------------------------"</span><span class="p">)</span>
      
          <span class="c1"># Add prompt to the messages</span>
          <span class="n">messages</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">summary_message</span><span class="p">)]</span>
      
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t</span><span class="s2">--- 4 messages (input to summarize_conversation with summary) ---"</span><span class="p">)</span>
          <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>
              <span class="n">print_message</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t</span><span class="s2">------------------------------------------------"</span><span class="p">)</span>
      
          <span class="c1"># Invoke the LLM with the messages</span>
          <span class="n">response</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">messages</span><span class="p">)</span>
      
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t</span><span class="s2">--- 4 messages (output of summarize_conversation) ---"</span><span class="p">)</span>
          <span class="n">print_message</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\t</span><span class="s2">------------------------------------------------"</span><span class="p">)</span>
      
          <span class="c1"># Return the summary message in the correct state format</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"summary"</span><span class="p">:</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span><span class="p">{closing_brace}</span>
      
      <span class="c1"># Create graph builder</span>
      <span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"filter_messages_node"</span><span class="p">,</span> <span class="n">filter_messages</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"trim_messages_node"</span><span class="p">,</span> <span class="n">trim_messages_node</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chat_model_node</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"summarize_conversation_node"</span><span class="p">,</span> <span class="n">summarize_conversation</span><span class="p">)</span>
      
      <span class="c1"># Connecto nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"filter_messages_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"filter_messages_node"</span><span class="p">,</span> <span class="s2">"trim_messages_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"trim_messages_node"</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="s2">"summarize_conversation_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"summarize_conversation_node"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">checkpointer</span><span class="o">=</span><span class="n">memory_saver</span><span class="p">)</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv25.webp" width="268" height="531" alt="image uv 26" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, temos:</p>
      <ul>
      <li>Fun√ß√£o de filtro de mensagens: Se houver mais de 2 mensagens no estado, todas as mensagens s√£o removidas, exceto as 2 √∫ltimas.* Fun√ß√£o de trimagem de mensagens: S√£o removidas as mensagens que excedem 100 tokens.* Fun√ß√£o do chatbot: O modelo √© executado com as mensagens filtradas e cortadas. Al√©m disso, se houver um resumo, ele √© adicionado √† mensagem do sistema.* Fun√ß√£o de resumo: Cria um resumo da conversa.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos uma fun√ß√£o para imprimir as mensagens do grafo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># Colors for the terminal</span>',
      '<span class="n">COLOR_GREEN</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[32m"</span>',
      '<span class="n">COLOR_YELLOW</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[33m"</span>',
      '<span class="n">COLOR_RESET</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[0m"</span>',
      ' ',
      ' ',
      '<span class="k">def</span> <span class="nf">stream_graph_updates</span><span class="p">(</span><span class="n">user_input</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">config</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>',
      '    <span class="c1"># Initialize a flag to track if an assistant response has been printed</span>',
      '    <span class="n">assistant_response_printed</span> <span class="o">=</span> <span class="kc">False</span>',
      ' ',
      '    <span class="c1"># Print the user\'s input immediately</span>',
      '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n\\n</span><span class="si">{</span><span class="n">COLOR_GREEN</span><span class="si">}</span><span class="s2">User: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}{</span><span class="n">user_input</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      '    ',
      '    <span class="c1"># Create the user\'s message with the HumanMessage class</span>',
      '    <span class="n">user_message</span> <span class="o">=</span> <span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">user_input</span><span class="p">)</span>',
      '    ',
      '    <span class="c1"># Stream events from the graph execution</span>',
      '    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">user_message</span><span class="p">]},</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">):</span>',
      '        <span class="c1"># event is a dictionary mapping node names to their output</span>',
      '        <span class="c1"># Example: {\'chatbot_node\': {\'messages\': [...]}} or {\'summarize_conversation_node\': {\'summary\': \'...\'}}</span>',
      ' ',
      '        <span class="c1"># Iterate through node name and its output</span>',
      '        <span class="k">for</span> <span class="n">node_name</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">event</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>',
      '            <span class="c1"># Check if this event is from the chatbot node which should contain the assistant\'s reply</span>',
      '            <span class="k">if</span> <span class="n">node_name</span> <span class="o">==</span> <span class="s1">\'messages\'</span><span class="p">:</span>',
      '                <span class="c1"># Ensure the output format is as expected (list of messages)</span>',
      '                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>',
      '                    <span class="c1"># Get the messages from the event</span>',
      '                    <span class="n">messages</span> <span class="o">=</span> <span class="n">value</span>',
      '                    <span class="c1"># Ensure \'messages\' is a non-empty list</span>',
      '                    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">messages</span><span class="p">,</span> <span class="nb">list</span><span class="p">)</span> <span class="ow">and</span> <span class="n">messages</span><span class="p">:</span>',
      '                        <span class="c1"># Get the last message (presumably the assistant\'s reply)</span>',
      '                        <span class="n">last_message</span> <span class="o">=</span> <span class="n">messages</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
      '                        <span class="c1"># Ensure the message is an instance of AIMessage</span>',
      '                        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">last_message</span><span class="p">,</span> <span class="n">AIMessage</span><span class="p">):</span>',
      '                            <span class="c1"># Ensure the message has content to display</span>',
      '                            <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">last_message</span><span class="p">,</span> <span class="s1">\'content\'</span><span class="p">):</span>',
      '                                <span class="c1"># Print the assistant\'s message content</span>',
      '                                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_YELLOW</span><span class="si">}</span><span class="s2">Assistant: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}{</span><span class="n">last_message</span><span class="o">.</span><span class="n">content</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      '                                <span class="n">assistant_response_printed</span> <span class="o">=</span> <span class="kc">True</span> <span class="c1"># Mark that we\'ve printed the response</span>',
      '    ',
      '    <span class="c1"># Fallback if no assistant response was printed (e.g., graph error before chatbot_node)</span>',
      '    <span class="k">if</span> <span class="ow">not</span> <span class="n">assistant_response_printed</span><span class="p">:</span>',
      '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_YELLOW</span><span class="si">}</span><span class="s2">Assistant: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}</span><span class="s2">[No response generated or error occurred]"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>

















































      
      <section class="section-block-markdown-cell">
      <p>Agora executamos o grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">USER1_THREAD_ID</span> <span class="o">=</span> <span class="s2">"1"</span>',
          '<span class="n">config_USER1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="n">USER1_THREAD_ID</span><span class="p">}}</span>',
          '<span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
          '    <span class="n">user_input</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n\\n</span><span class="s2">User: "</span><span class="p">)</span>',
          '    <span class="k">if</span> <span class="n">user_input</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span><span class="s2">"quit"</span><span class="p">,</span> <span class="s2">"exit"</span><span class="p">,</span> <span class="s2">"q"</span><span class="p">]:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_GREEN</span><span class="si">}</span><span class="s2">User: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}</span><span class="s2">Exiting..."</span><span class="p">)</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_YELLOW</span><span class="si">}</span><span class="s2">Assistant: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}</span><span class="s2">Goodbye!"</span><span class="p">)</span>',
          '        <span class="k">break</span>',
          '    ',
          '    <span class="n">events</span> <span class="o">=</span> <span class="n">stream_graph_updates</span><span class="p">(</span><span class="n">user_input</span><span class="p">,</span> <span class="n">config_USER1</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-green-fg">User: </span>Hello',
          '	--- 1 messages (input to filter_messages) ---',
          '		[HumanMessage]: Hello',
          '		No summary of the conversation',
          '	------------------------------------------------',
          '	--- 1 messages (output of filter_messages) ---',
          '		No summary of the conversation',
          '	------------------------------------------------',
          '	--- 2 messages (input to trim_messages) ---',
          '		[HumanMessage]: Hello',
          '		No summary of the conversation',
          '	------------------------------------------------',
          '	--- 2 messages (output of trim_messages - after trimming) ---',
          '		[HumanMessage]: Hello',
          '		No summary of the conversation',
          '	------------------------------------------------',
          '	--- 3 messages (input to chat_model_node) ---',
          '		[HumanMessage]: Hello',
          '		No summary of the conversation',
          '	------------------------------------------------',
          '	--- 3 messages (input to chat_model_node) ---',
          '		[HumanMessage]: Hello',
          '		No summary of the conversation',
          '	------------------------------------------------',
          '	--- 3 messages (output of chat_model_node) ---',
          '		[AIMessage]: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		No summary of the conversation',
          '	------------------------------------------------',
          '<span class="ansi-yellow-fg">Assistant: </span>Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '	--- 4 messages (input to summarize_conversation) ---',
          '		[HumanMessage]: Hello',
          '		[AIMessage]: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		No summary of the conversation',
          '	------------------------------------------------',
          '	--- 4 summary message ---',
          '		Create a summary of the conversation above.',
          '		No summary of the conversation',
          '	------------------------------------------------',
          '	--- 4 messages (input to summarize_conversation with summary) ---',
          '		[HumanMessage]: Hello',
          '		[AIMessage]: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		[HumanMessage]: Create a summary of the conversation above.',
          '	------------------------------------------------',
          '	--- 4 messages (output of summarize_conversation) ---',
          '		[AIMessage]: Sure! Here\'s a summary of the conversation above:',
          '		',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '<span class="ansi-yellow-fg">Assistant: </span>Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '<span class="ansi-green-fg">User: </span>I am studying about langgraph, do you know it?',
          '	--- 1 messages (input to filter_messages) ---',
          '		[HumanMessage]: Hello',
          '		[AIMessage]: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		[HumanMessage]: I am studying about langgraph, do you know it?',
          '		Summary of the conversation: Sure! Here\'s a summary of the conversation above:',
          '		',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '	--- 1 messages (output of filter_messages) ---',
          '		[RemoveMessage]: ',
          '		Summary of the conversation: Sure! Here\'s a summary of the conversation above:',
          '		',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '	--- 2 messages (input to trim_messages) ---',
          '		[AIMessage]: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		[HumanMessage]: I am studying about langgraph, do you know it?',
          '		Summary of the conversation: Sure! Here\'s a summary of the conversation above:',
          '		',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '	--- 2 messages (output of trim_messages - after trimming) ---',
          '		[AIMessage]: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		[HumanMessage]: I am studying about langgraph, do you know it?',
          '		Summary of the conversation: Sure! Here\'s a summary of the conversation above:',
          '		',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '	--- 3 messages (input to chat_model_node) ---',
          '		[AIMessage]: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		[HumanMessage]: I am studying about langgraph, do you know it?',
          '		Summary of the conversation: Sure! Here\'s a summary of the conversation above:',
          '		',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '	--- 3 messages (input to chat_model_node) ---',
          '		[SystemMessage]: Summary of the conversation earlier: Sure! Here\'s a summary of the conversation above:',
          '		',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '		[AIMessage]: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		[HumanMessage]: I am studying about langgraph, do you know it?',
          '		Summary of the conversation: Sure! Here\'s a summary of the conversation above:',
          '		',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '	--- 3 messages (output of chat_model_node) ---',
          '		[AIMessage]: Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models.',
          '		',
          '		LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		',
          '		1. **Visualizing Model Architecture**: Provides a clear and detailed view of how different components of a language model are connected.',
          '		2. **Comparing Models**: Allows for easy comparison of different language models in terms of their structure, training data, and performance metrics.',
          '		3. **Understanding Training Processes**: Helps in understanding the training dynamics and the flow of data through the model.',
          '		4. **Identifying Bottlenecks**: Can help in identifying potential bottlenecks or areas for improvement in the model.',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		Summary of the conversation: Sure! Here\'s a summary of the conversation above:',
          '		',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '<span class="ansi-yellow-fg">Assistant: </span>Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models.',
          'LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '1. **Visualizing Model Architecture**: Provides a clear and detailed view of how different components of a language model are connected.',
          '2. **Comparing Models**: Allows for easy comparison of different language models in terms of their structure, training data, and performance metrics.',
          '3. **Understanding Training Processes**: Helps in understanding the training dynamics and the flow of data through the model.',
          '4. **Identifying Bottlenecks**: Can help in identifying potential bottlenecks or areas for improvement in the model.',
          'If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '	--- 4 messages (input to summarize_conversation) ---',
          '		[AIMessage]: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		[HumanMessage]: I am studying about langgraph, do you know it?',
          '		[AIMessage]: Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models.',
          '		',
          '		LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		',
          '		1. **Visualizing Model Architecture**: Provides a clear and detailed view of how different components of a language model are connected.',
          '		2. **Comparing Models**: Allows for easy comparison of different language models in terms of their structure, training data, and performance metrics.',
          '		3. **Understanding Training Processes**: Helps in understanding the training dynamics and the flow of data through the model.',
          '		4. **Identifying Bottlenecks**: Can help in identifying potential bottlenecks or areas for improvement in the model.',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		Summary of the conversation: Sure! Here\'s a summary of the conversation above:',
          '		',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '	--- 4 summary message ---',
          '		This is a summary of the conversation to date: Sure! Here\'s a summary of the conversation above:',
          '		',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		Extend the summary by taking into account the new messages above.',
          '		Summary of the conversation: Sure! Here\'s a summary of the conversation above:',
          '		',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '	--- 4 messages (input to summarize_conversation with summary) ---',
          '		[AIMessage]: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		[HumanMessage]: I am studying about langgraph, do you know it?',
          '		[AIMessage]: Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models.',
          '		',
          '		LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		',
          '		1. **Visualizing Model Architecture**: Provides a clear and detailed view of how different components of a language model are connected.',
          '		2. **Comparing Models**: Allows for easy comparison of different language models in terms of their structure, training data, and performance metrics.',
          '		3. **Understanding Training Processes**: Helps in understanding the training dynamics and the flow of data through the model.',
          '		4. **Identifying Bottlenecks**: Can help in identifying potential bottlenecks or areas for improvement in the model.',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		[HumanMessage]: This is a summary of the conversation to date: Sure! Here\'s a summary of the conversation above:',
          '		',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		Extend the summary by taking into account the new messages above.',
          '	------------------------------------------------',
          '	--- 4 messages (output of summarize_conversation) ---',
          '		[AIMessage]: Sure! Here\'s an extended summary of the conversation:',
          '		',
          '		---',
          '		',
          '		**User:** Hello',
          '		',
          '		**Qwen:** Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		',
          '		**User:** I am studying about langgraph, do you know it?',
          '		',
          '		**Qwen:** Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models. LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		1. Visualizing Model Architecture',
          '		2. Comparing Models',
          '		3. Understanding Training Processes',
          '		4. Identifying Bottlenecks',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		',
          '		**User:** This is a summary of the conversation to date: Sure! Here\'s a summary of the conversation above:',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		**Qwen:** [Extended the summary you are now reading.]',
          '		',
          '		---',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '<span class="ansi-yellow-fg">Assistant: </span>Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models.',
          'LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '1. **Visualizing Model Architecture**: Provides a clear and detailed view of how different components of a language model are connected.',
          '2. **Comparing Models**: Allows for easy comparison of different language models in terms of their structure, training data, and performance metrics.',
          '3. **Understanding Training Processes**: Helps in understanding the training dynamics and the flow of data through the model.',
          '4. **Identifying Bottlenecks**: Can help in identifying potential bottlenecks or areas for improvement in the model.',
          'If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '<span class="ansi-green-fg">User: </span>I would like to know about using langsmith with huggingface llms, the integration of huggingface',
          '	--- 1 messages (input to filter_messages) ---',
          '		[AIMessage]: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		[HumanMessage]: I am studying about langgraph, do you know it?',
          '		[AIMessage]: Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models.',
          '		',
          '		LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		',
          '		1. **Visualizing Model Architecture**: Provides a clear and detailed view of how different components of a language model are connected.',
          '		2. **Comparing Models**: Allows for easy comparison of different language models in terms of their structure, training data, and performance metrics.',
          '		3. **Understanding Training Processes**: Helps in understanding the training dynamics and the flow of data through the model.',
          '		4. **Identifying Bottlenecks**: Can help in identifying potential bottlenecks or areas for improvement in the model.',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		[HumanMessage]: I would like to know about using langsmith with huggingface llms, the integration of huggingface',
          '		Summary of the conversation: Sure! Here\'s an extended summary of the conversation:',
          '		',
          '		---',
          '		',
          '		**User:** Hello',
          '		',
          '		**Qwen:** Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		',
          '		**User:** I am studying about langgraph, do you know it?',
          '		',
          '		**Qwen:** Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models. LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		1. Visualizing Model Architecture',
          '		2. Comparing Models',
          '		3. Understanding Training Processes',
          '		4. Identifying Bottlenecks',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		',
          '		**User:** This is a summary of the conversation to date: Sure! Here\'s a summary of the conversation above:',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		**Qwen:** [Extended the summary you are now reading.]',
          '		',
          '		---',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '	--- 1 messages (output of filter_messages) ---',
          '		[RemoveMessage]: ',
          '		[RemoveMessage]: ',
          '		Summary of the conversation: Sure! Here\'s an extended summary of the conversation:',
          '		',
          '		---',
          '		',
          '		**User:** Hello',
          '		',
          '		**Qwen:** Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		',
          '		**User:** I am studying about langgraph, do you know it?',
          '		',
          '		**Qwen:** Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models. LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		1. Visualizing Model Architecture',
          '		2. Comparing Models',
          '		3. Understanding Training Processes',
          '		4. Identifying Bottlenecks',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		',
          '		**User:** This is a summary of the conversation to date: Sure! Here\'s a summary of the conversation above:',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		**Qwen:** [Extended the summary you are now reading.]',
          '		',
          '		---',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '	--- 2 messages (input to trim_messages) ---',
          '		[AIMessage]: Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models.',
          '		',
          '		LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		',
          '		1. **Visualizing Model Architecture**: Provides a clear and detailed view of how different components of a language model are connected.',
          '		2. **Comparing Models**: Allows for easy comparison of different language models in terms of their structure, training data, and performance metrics.',
          '		3. **Understanding Training Processes**: Helps in understanding the training dynamics and the flow of data through the model.',
          '		4. **Identifying Bottlenecks**: Can help in identifying potential bottlenecks or areas for improvement in the model.',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		[HumanMessage]: I would like to know about using langsmith with huggingface llms, the integration of huggingface',
          '		Summary of the conversation: Sure! Here\'s an extended summary of the conversation:',
          '		',
          '		---',
          '		',
          '		**User:** Hello',
          '		',
          '		**Qwen:** Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		',
          '		**User:** I am studying about langgraph, do you know it?',
          '		',
          '		**Qwen:** Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models. LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		1. Visualizing Model Architecture',
          '		2. Comparing Models',
          '		3. Understanding Training Processes',
          '		4. Identifying Bottlenecks',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		',
          '		**User:** This is a summary of the conversation to date: Sure! Here\'s a summary of the conversation above:',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		**Qwen:** [Extended the summary you are now reading.]',
          '		',
          '		---',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '	--- 2 messages (output of trim_messages - after trimming) ---',
          '		[HumanMessage]: I would like to know about using langsmith with huggingface llms, the integration of huggingface',
          '		Summary of the conversation: Sure! Here\'s an extended summary of the conversation:',
          '		',
          '		---',
          '		',
          '		**User:** Hello',
          '		',
          '		**Qwen:** Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		',
          '		**User:** I am studying about langgraph, do you know it?',
          '		',
          '		**Qwen:** Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models. LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		1. Visualizing Model Architecture',
          '		2. Comparing Models',
          '		3. Understanding Training Processes',
          '		4. Identifying Bottlenecks',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		',
          '		**User:** This is a summary of the conversation to date: Sure! Here\'s a summary of the conversation above:',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		**Qwen:** [Extended the summary you are now reading.]',
          '		',
          '		---',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '	--- 3 messages (input to chat_model_node) ---',
          '		[HumanMessage]: I would like to know about using langsmith with huggingface llms, the integration of huggingface',
          '		Summary of the conversation: Sure! Here\'s an extended summary of the conversation:',
          '		',
          '		---',
          '		',
          '		**User:** Hello',
          '		',
          '		**Qwen:** Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		',
          '		**User:** I am studying about langgraph, do you know it?',
          '		',
          '		**Qwen:** Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models. LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		1. Visualizing Model Architecture',
          '		2. Comparing Models',
          '		3. Understanding Training Processes',
          '		4. Identifying Bottlenecks',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		',
          '		**User:** This is a summary of the conversation to date: Sure! Here\'s a summary of the conversation above:',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		**Qwen:** [Extended the summary you are now reading.]',
          '		',
          '		---',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '	--- 3 messages (input to chat_model_node) ---',
          '		[SystemMessage]: Summary of the conversation earlier: Sure! Here\'s an extended summary of the conversation:',
          '		',
          '		---',
          '		',
          '		**User:** Hello',
          '		',
          '		**Qwen:** Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		',
          '		**User:** I am studying about langgraph, do you know it?',
          '		',
          '		**Qwen:** Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models. LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		1. Visualizing Model Architecture',
          '		2. Comparing Models',
          '		3. Understanding Training Processes',
          '		4. Identifying Bottlenecks',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		',
          '		**User:** This is a summary of the conversation to date: Sure! Here\'s a summary of the conversation above:',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		**Qwen:** [Extended the summary you are now reading.]',
          '		',
          '		---',
          '		',
          '		Is there anything else you need assistance with?',
          '		[HumanMessage]: I would like to know about using langsmith with huggingface llms, the integration of huggingface',
          '		Summary of the conversation: Sure! Here\'s an extended summary of the conversation:',
          '		',
          '		---',
          '		',
          '		**User:** Hello',
          '		',
          '		**Qwen:** Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		',
          '		**User:** I am studying about langgraph, do you know it?',
          '		',
          '		**Qwen:** Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models. LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		1. Visualizing Model Architecture',
          '		2. Comparing Models',
          '		3. Understanding Training Processes',
          '		4. Identifying Bottlenecks',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		',
          '		**User:** This is a summary of the conversation to date: Sure! Here\'s a summary of the conversation above:',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		**Qwen:** [Extended the summary you are now reading.]',
          '		',
          '		---',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '	--- 3 messages (output of chat_model_node) ---',
          '		[AIMessage]: Certainly! LangSmith and Hugging Face are both powerful tools in the domain of natural language processing (NLP), and integrating them can significantly enhance your workflow. Here‚Äôs a detailed look at how you can use LangSmith with Hugging Face models:',
          '		',
          '		### What is LangSmith?',
          '		LangSmith is a platform designed to help developers and researchers build, test, and deploy natural language applications. It offers features such as:',
          '		- **Model Management**: Manage and version control your language models.',
          '		- **Data Labeling**: Annotate and label data for training and evaluation.',
          '		- **Model Evaluation**: Evaluate and compare different models and versions.',
          '		- **API Integration**: Integrate with various NLP tools and platforms.',
          '		',
          '		### What is Hugging Face?',
          '		Hugging Face is a leading company in the NLP domain, known for its transformers library. Hugging Face provides a wide array of pre-trained models and tools for NLP tasks, including:',
          '		- **Pre-trained Models**: Access to a vast library of pre-trained models.',
          '		- **Transformers Library**: A powerful library for working with transformer models.',
          '		- **Hugging Face Hub**: A platform for sharing and accessing models, datasets, and metrics.',
          '		',
          '		### Integrating LangSmith with Hugging Face Models',
          '		',
          '		#### Step-by-Step Guide',
          '		',
          '		1. **Install Required Libraries**',
          '		   Ensure you have the necessary libraries installed:',
          '		   ```bash',
          '		   pip install transformers datasets langsmith',
          '		   ```',
          '		',
          '		2. **Load a Hugging Face Model**',
          '		   Use the `transformers` library to load a pre-trained model:',
          '		   ```python',
          '		   from transformers import AutoModelForSequenceClassification, AutoTokenizer',
          '		',
          '		   model_name = "distilbert-base-uncased"',
          '		   tokenizer = AutoTokenizer.from_pretrained(model_name)',
          '		   model = AutoModelForSequenceClassification.from_pretrained(model_name)',
          '		   ```',
          '		',
          '		3. **Integrate with LangSmith**',
          '		   - **Initialize LangSmith Client**:',
          '		     ```python',
          '		     from langsmith import Client',
          '		',
          '		     client = Client()',
          '		     ```',
          '		',
          '		   - **Create or Load a Dataset**:',
          '		     ```python',
          '		     from datasets import Dataset',
          '		',
          '		     # Example dataset',
          '		     data = {',
          '		         "text": ["This is a positive review.", "This is a negative review."],',
          '		         "label": [1, 0]',
          '		     }',
          '		     dataset = Dataset.from_dict(data)',
          '		',
          '		     # Save dataset to LangSmith',
          '		     dataset_id = client.create_dataset(name="my_dataset", data=dataset)',
          '		     ```',
          '		',
          '		   - **Evaluate the Model**:',
          '		     ```python',
          '		     from langsmith import EvaluationResult',
          '		',
          '		     def evaluate_model(dataset, tokenizer, model):',
          '		         results = []',
          '		         for example in dataset:',
          '		             inputs = tokenizer(example["text"], return_tensors="pt")',
          '		             outputs = model(**inputs)',
          '		             predicted_label = outputs.logits.argmax().item()',
          '		             result = EvaluationResult(',
          '		                 example_id=example["id"],',
          '		                 predicted_label=predicted_label,',
          '		                 ground_truth_label=example["label"]',
          '		             )',
          '		             results.append(result)',
          '		         return results',
          '		',
          '		     evaluation_results = evaluate_model(dataset, tokenizer, model)',
          '		     ```',
          '		',
          '		   - **Upload Evaluation Results to LangSmith**:',
          '		     ```python',
          '		     client.log_results(dataset_id, evaluation_results)',
          '		     ```',
          '		',
          '		4. **Visualize and Analyze Results**',
          '		   - Use LangSmith‚Äôs web interface to visualize the evaluation results.',
          '		   - Compare different models and versions to identify the best performing model.',
          '		',
          '		### Additional Tips',
          '		- **Model Tuning**: Use Hugging Face‚Äôs `Trainer` class to fine-tune models on your datasets and then evaluate them using LangSmith.',
          '		- **Custom Metrics**: Define custom evaluation metrics and use them to assess model performance.',
          '		- **Collaboration**: Share datasets and models with team members using the Hugging Face Hub and LangSmith.',
          '		',
          '		By following these steps, you can effectively integrate Hugging Face models with LangSmith, leveraging the strengths of both platforms to build and evaluate robust NLP applications.',
          '		',
          '		If you have any specific questions or need further assistance, feel free to ask!',
          '		Summary of the conversation: Sure! Here\'s an extended summary of the conversation:',
          '		',
          '		---',
          '		',
          '		**User:** Hello',
          '		',
          '		**Qwen:** Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		',
          '		**User:** I am studying about langgraph, do you know it?',
          '		',
          '		**Qwen:** Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models. LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		1. Visualizing Model Architecture',
          '		2. Comparing Models',
          '		3. Understanding Training Processes',
          '		4. Identifying Bottlenecks',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		',
          '		**User:** This is a summary of the conversation to date: Sure! Here\'s a summary of the conversation above:',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		**Qwen:** [Extended the summary you are now reading.]',
          '		',
          '		---',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '<span class="ansi-yellow-fg">Assistant: </span>Certainly! LangSmith and Hugging Face are both powerful tools in the domain of natural language processing (NLP), and integrating them can significantly enhance your workflow. Here‚Äôs a detailed look at how you can use LangSmith with Hugging Face models:',
          '### What is LangSmith?',
          'LangSmith is a platform designed to help developers and researchers build, test, and deploy natural language applications. It offers features such as:',
          '- **Model Management**: Manage and version control your language models.',
          '- **Data Labeling**: Annotate and label data for training and evaluation.',
          '- **Model Evaluation**: Evaluate and compare different models and versions.',
          '- **API Integration**: Integrate with various NLP tools and platforms.',
          '### What is Hugging Face?',
          'Hugging Face is a leading company in the NLP domain, known for its transformers library. Hugging Face provides a wide array of pre-trained models and tools for NLP tasks, including:',
          '- **Pre-trained Models**: Access to a vast library of pre-trained models.',
          '- **Transformers Library**: A powerful library for working with transformer models.',
          '- **Hugging Face Hub**: A platform for sharing and accessing models, datasets, and metrics.',
          '### Integrating LangSmith with Hugging Face Models',
          '#### Step-by-Step Guide',
          '1. **Install Required Libraries**',
          '   Ensure you have the necessary libraries installed:',
          '   ```bash',
          '   pip install transformers datasets langsmith',
          '   ```',
          '2. **Load a Hugging Face Model**',
          '   Use the `transformers` library to load a pre-trained model:',
          '   ```python',
          '   from transformers import AutoModelForSequenceClassification, AutoTokenizer',
          '   model_name = "distilbert-base-uncased"',
          '   tokenizer = AutoTokenizer.from_pretrained(model_name)',
          '   model = AutoModelForSequenceClassification.from_pretrained(model_name)',
          '   ```',
          '3. **Integrate with LangSmith**',
          '   - **Initialize LangSmith Client**:',
          '     ```python',
          '     from langsmith import Client',
          '     client = Client()',
          '     ```',
          '   - **Create or Load a Dataset**:',
          '     ```python',
          '     from datasets import Dataset',
          '     # Example dataset',
          '     data = {',
          '         "text": ["This is a positive review.", "This is a negative review."],',
          '         "label": [1, 0]',
          '     }',
          '     dataset = Dataset.from_dict(data)',
          '     # Save dataset to LangSmith',
          '     dataset_id = client.create_dataset(name="my_dataset", data=dataset)',
          '     ```',
          '   - **Evaluate the Model**:',
          '     ```python',
          '     from langsmith import EvaluationResult',
          '     def evaluate_model(dataset, tokenizer, model):',
          '         results = []',
          '         for example in dataset:',
          '             inputs = tokenizer(example["text"], return_tensors="pt")',
          '             outputs = model(**inputs)',
          '             predicted_label = outputs.logits.argmax().item()',
          '             result = EvaluationResult(',
          '                 example_id=example["id"],',
          '                 predicted_label=predicted_label,',
          '                 ground_truth_label=example["label"]',
          '             )',
          '             results.append(result)',
          '         return results',
          '     evaluation_results = evaluate_model(dataset, tokenizer, model)',
          '     ```',
          '   - **Upload Evaluation Results to LangSmith**:',
          '     ```python',
          '     client.log_results(dataset_id, evaluation_results)',
          '     ```',
          '4. **Visualize and Analyze Results**',
          '   - Use LangSmith‚Äôs web interface to visualize the evaluation results.',
          '   - Compare different models and versions to identify the best performing model.',
          '### Additional Tips',
          '- **Model Tuning**: Use Hugging Face‚Äôs `Trainer` class to fine-tune models on your datasets and then evaluate them using LangSmith.',
          '- **Custom Metrics**: Define custom evaluation metrics and use them to assess model performance.',
          '- **Collaboration**: Share datasets and models with team members using the Hugging Face Hub and LangSmith.',
          'By following these steps, you can effectively integrate Hugging Face models with LangSmith, leveraging the strengths of both platforms to build and evaluate robust NLP applications.',
          'If you have any specific questions or need further assistance, feel free to ask!',
          '	--- 4 messages (input to summarize_conversation) ---',
          '		[HumanMessage]: I would like to know about using langsmith with huggingface llms, the integration of huggingface',
          '		[AIMessage]: Certainly! LangSmith and Hugging Face are both powerful tools in the domain of natural language processing (NLP), and integrating them can significantly enhance your workflow. Here‚Äôs a detailed look at how you can use LangSmith with Hugging Face models:',
          '		',
          '		### What is LangSmith?',
          '		LangSmith is a platform designed to help developers and researchers build, test, and deploy natural language applications. It offers features such as:',
          '		- **Model Management**: Manage and version control your language models.',
          '		- **Data Labeling**: Annotate and label data for training and evaluation.',
          '		- **Model Evaluation**: Evaluate and compare different models and versions.',
          '		- **API Integration**: Integrate with various NLP tools and platforms.',
          '		',
          '		### What is Hugging Face?',
          '		Hugging Face is a leading company in the NLP domain, known for its transformers library. Hugging Face provides a wide array of pre-trained models and tools for NLP tasks, including:',
          '		- **Pre-trained Models**: Access to a vast library of pre-trained models.',
          '		- **Transformers Library**: A powerful library for working with transformer models.',
          '		- **Hugging Face Hub**: A platform for sharing and accessing models, datasets, and metrics.',
          '		',
          '		### Integrating LangSmith with Hugging Face Models',
          '		',
          '		#### Step-by-Step Guide',
          '		',
          '		1. **Install Required Libraries**',
          '		   Ensure you have the necessary libraries installed:',
          '		   ```bash',
          '		   pip install transformers datasets langsmith',
          '		   ```',
          '		',
          '		2. **Load a Hugging Face Model**',
          '		   Use the `transformers` library to load a pre-trained model:',
          '		   ```python',
          '		   from transformers import AutoModelForSequenceClassification, AutoTokenizer',
          '		',
          '		   model_name = "distilbert-base-uncased"',
          '		   tokenizer = AutoTokenizer.from_pretrained(model_name)',
          '		   model = AutoModelForSequenceClassification.from_pretrained(model_name)',
          '		   ```',
          '		',
          '		3. **Integrate with LangSmith**',
          '		   - **Initialize LangSmith Client**:',
          '		     ```python',
          '		     from langsmith import Client',
          '		',
          '		     client = Client()',
          '		     ```',
          '		',
          '		   - **Create or Load a Dataset**:',
          '		     ```python',
          '		     from datasets import Dataset',
          '		',
          '		     # Example dataset',
          '		     data = {',
          '		         "text": ["This is a positive review.", "This is a negative review."],',
          '		         "label": [1, 0]',
          '		     }',
          '		     dataset = Dataset.from_dict(data)',
          '		',
          '		     # Save dataset to LangSmith',
          '		     dataset_id = client.create_dataset(name="my_dataset", data=dataset)',
          '		     ```',
          '		',
          '		   - **Evaluate the Model**:',
          '		     ```python',
          '		     from langsmith import EvaluationResult',
          '		',
          '		     def evaluate_model(dataset, tokenizer, model):',
          '		         results = []',
          '		         for example in dataset:',
          '		             inputs = tokenizer(example["text"], return_tensors="pt")',
          '		             outputs = model(**inputs)',
          '		             predicted_label = outputs.logits.argmax().item()',
          '		             result = EvaluationResult(',
          '		                 example_id=example["id"],',
          '		                 predicted_label=predicted_label,',
          '		                 ground_truth_label=example["label"]',
          '		             )',
          '		             results.append(result)',
          '		         return results',
          '		',
          '		     evaluation_results = evaluate_model(dataset, tokenizer, model)',
          '		     ```',
          '		',
          '		   - **Upload Evaluation Results to LangSmith**:',
          '		     ```python',
          '		     client.log_results(dataset_id, evaluation_results)',
          '		     ```',
          '		',
          '		4. **Visualize and Analyze Results**',
          '		   - Use LangSmith‚Äôs web interface to visualize the evaluation results.',
          '		   - Compare different models and versions to identify the best performing model.',
          '		',
          '		### Additional Tips',
          '		- **Model Tuning**: Use Hugging Face‚Äôs `Trainer` class to fine-tune models on your datasets and then evaluate them using LangSmith.',
          '		- **Custom Metrics**: Define custom evaluation metrics and use them to assess model performance.',
          '		- **Collaboration**: Share datasets and models with team members using the Hugging Face Hub and LangSmith.',
          '		',
          '		By following these steps, you can effectively integrate Hugging Face models with LangSmith, leveraging the strengths of both platforms to build and evaluate robust NLP applications.',
          '		',
          '		If you have any specific questions or need further assistance, feel free to ask!',
          '		Summary of the conversation: Sure! Here\'s an extended summary of the conversation:',
          '		',
          '		---',
          '		',
          '		**User:** Hello',
          '		',
          '		**Qwen:** Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		',
          '		**User:** I am studying about langgraph, do you know it?',
          '		',
          '		**Qwen:** Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models. LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		1. Visualizing Model Architecture',
          '		2. Comparing Models',
          '		3. Understanding Training Processes',
          '		4. Identifying Bottlenecks',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		',
          '		**User:** This is a summary of the conversation to date: Sure! Here\'s a summary of the conversation above:',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		**Qwen:** [Extended the summary you are now reading.]',
          '		',
          '		---',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '	--- 4 summary message ---',
          '		This is a summary of the conversation to date: Sure! Here\'s an extended summary of the conversation:',
          '		',
          '		---',
          '		',
          '		**User:** Hello',
          '		',
          '		**Qwen:** Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		',
          '		**User:** I am studying about langgraph, do you know it?',
          '		',
          '		**Qwen:** Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models. LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		1. Visualizing Model Architecture',
          '		2. Comparing Models',
          '		3. Understanding Training Processes',
          '		4. Identifying Bottlenecks',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		',
          '		**User:** This is a summary of the conversation to date: Sure! Here\'s a summary of the conversation above:',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		**Qwen:** [Extended the summary you are now reading.]',
          '		',
          '		---',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		Extend the summary by taking into account the new messages above.',
          '		Summary of the conversation: Sure! Here\'s an extended summary of the conversation:',
          '		',
          '		---',
          '		',
          '		**User:** Hello',
          '		',
          '		**Qwen:** Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		',
          '		**User:** I am studying about langgraph, do you know it?',
          '		',
          '		**Qwen:** Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models. LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		1. Visualizing Model Architecture',
          '		2. Comparing Models',
          '		3. Understanding Training Processes',
          '		4. Identifying Bottlenecks',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		',
          '		**User:** This is a summary of the conversation to date: Sure! Here\'s a summary of the conversation above:',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		**Qwen:** [Extended the summary you are now reading.]',
          '		',
          '		---',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '	--- 4 messages (input to summarize_conversation with summary) ---',
          '		[HumanMessage]: I would like to know about using langsmith with huggingface llms, the integration of huggingface',
          '		[AIMessage]: Certainly! LangSmith and Hugging Face are both powerful tools in the domain of natural language processing (NLP), and integrating them can significantly enhance your workflow. Here‚Äôs a detailed look at how you can use LangSmith with Hugging Face models:',
          '		',
          '		### What is LangSmith?',
          '		LangSmith is a platform designed to help developers and researchers build, test, and deploy natural language applications. It offers features such as:',
          '		- **Model Management**: Manage and version control your language models.',
          '		- **Data Labeling**: Annotate and label data for training and evaluation.',
          '		- **Model Evaluation**: Evaluate and compare different models and versions.',
          '		- **API Integration**: Integrate with various NLP tools and platforms.',
          '		',
          '		### What is Hugging Face?',
          '		Hugging Face is a leading company in the NLP domain, known for its transformers library. Hugging Face provides a wide array of pre-trained models and tools for NLP tasks, including:',
          '		- **Pre-trained Models**: Access to a vast library of pre-trained models.',
          '		- **Transformers Library**: A powerful library for working with transformer models.',
          '		- **Hugging Face Hub**: A platform for sharing and accessing models, datasets, and metrics.',
          '		',
          '		### Integrating LangSmith with Hugging Face Models',
          '		',
          '		#### Step-by-Step Guide',
          '		',
          '		1. **Install Required Libraries**',
          '		   Ensure you have the necessary libraries installed:',
          '		   ```bash',
          '		   pip install transformers datasets langsmith',
          '		   ```',
          '		',
          '		2. **Load a Hugging Face Model**',
          '		   Use the `transformers` library to load a pre-trained model:',
          '		   ```python',
          '		   from transformers import AutoModelForSequenceClassification, AutoTokenizer',
          '		',
          '		   model_name = "distilbert-base-uncased"',
          '		   tokenizer = AutoTokenizer.from_pretrained(model_name)',
          '		   model = AutoModelForSequenceClassification.from_pretrained(model_name)',
          '		   ```',
          '		',
          '		3. **Integrate with LangSmith**',
          '		   - **Initialize LangSmith Client**:',
          '		     ```python',
          '		     from langsmith import Client',
          '		',
          '		     client = Client()',
          '		     ```',
          '		',
          '		   - **Create or Load a Dataset**:',
          '		     ```python',
          '		     from datasets import Dataset',
          '		',
          '		     # Example dataset',
          '		     data = {',
          '		         "text": ["This is a positive review.", "This is a negative review."],',
          '		         "label": [1, 0]',
          '		     }',
          '		     dataset = Dataset.from_dict(data)',
          '		',
          '		     # Save dataset to LangSmith',
          '		     dataset_id = client.create_dataset(name="my_dataset", data=dataset)',
          '		     ```',
          '		',
          '		   - **Evaluate the Model**:',
          '		     ```python',
          '		     from langsmith import EvaluationResult',
          '		',
          '		     def evaluate_model(dataset, tokenizer, model):',
          '		         results = []',
          '		         for example in dataset:',
          '		             inputs = tokenizer(example["text"], return_tensors="pt")',
          '		             outputs = model(**inputs)',
          '		             predicted_label = outputs.logits.argmax().item()',
          '		             result = EvaluationResult(',
          '		                 example_id=example["id"],',
          '		                 predicted_label=predicted_label,',
          '		                 ground_truth_label=example["label"]',
          '		             )',
          '		             results.append(result)',
          '		         return results',
          '		',
          '		     evaluation_results = evaluate_model(dataset, tokenizer, model)',
          '		     ```',
          '		',
          '		   - **Upload Evaluation Results to LangSmith**:',
          '		     ```python',
          '		     client.log_results(dataset_id, evaluation_results)',
          '		     ```',
          '		',
          '		4. **Visualize and Analyze Results**',
          '		   - Use LangSmith‚Äôs web interface to visualize the evaluation results.',
          '		   - Compare different models and versions to identify the best performing model.',
          '		',
          '		### Additional Tips',
          '		- **Model Tuning**: Use Hugging Face‚Äôs `Trainer` class to fine-tune models on your datasets and then evaluate them using LangSmith.',
          '		- **Custom Metrics**: Define custom evaluation metrics and use them to assess model performance.',
          '		- **Collaboration**: Share datasets and models with team members using the Hugging Face Hub and LangSmith.',
          '		',
          '		By following these steps, you can effectively integrate Hugging Face models with LangSmith, leveraging the strengths of both platforms to build and evaluate robust NLP applications.',
          '		',
          '		If you have any specific questions or need further assistance, feel free to ask!',
          '		[HumanMessage]: This is a summary of the conversation to date: Sure! Here\'s an extended summary of the conversation:',
          '		',
          '		---',
          '		',
          '		**User:** Hello',
          '		',
          '		**Qwen:** Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		',
          '		**User:** I am studying about langgraph, do you know it?',
          '		',
          '		**Qwen:** Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models. LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		1. Visualizing Model Architecture',
          '		2. Comparing Models',
          '		3. Understanding Training Processes',
          '		4. Identifying Bottlenecks',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		',
          '		**User:** This is a summary of the conversation to date: Sure! Here\'s a summary of the conversation above:',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		**Qwen:** [Extended the summary you are now reading.]',
          '		',
          '		---',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		Extend the summary by taking into account the new messages above.',
          '	------------------------------------------------',
          '	--- 4 messages (output of summarize_conversation) ---',
          '		[AIMessage]: Sure! Here\'s the extended summary of the conversation to date:',
          '		',
          '		---',
          '		',
          '		**User:** Hello',
          '		',
          '		**Qwen:** Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		',
          '		**User:** I am studying about langgraph, do you know it?',
          '		',
          '		**Qwen:** Yes, I can help with information about LangGraph! LangGraph is a language model graph that represents the relationships and connections between different language models and their components. It can be used to visualize and understand the architecture, training processes, and performance characteristics of various language models. LangGraph can be particularly useful for researchers and developers who are working on natural language processing (NLP) tasks. It helps in:',
          '		1. Visualizing Model Architecture',
          '		2. Comparing Models',
          '		3. Understanding Training Processes',
          '		4. Identifying Bottlenecks',
          '		',
          '		If you have specific questions or aspects of LangGraph you\'re interested in, feel free to let me know!',
          '		',
          '		**User:** This is a summary of the conversation to date: Sure! Here\'s a summary of the conversation above:',
          '		User: Hello',
          '		Qwen: Hello! How can I assist you today? Whether you need help with information, a specific task, or just want to chat, I\'m here to help.',
          '		User: Create a summary of the conversation above.',
          '		Qwen: [Provided the summary you are now reading.]',
          '		',
          '		Is there anything else you need assistance with?',
          '		',
          '		**Qwen:** [Extended the summary you are now reading.]',
          '		',
          '		**User:** Is there anything else you need assistance with?',
          '		',
          '		**Qwen:** If you have any more questions about LangGraph or any other topic, feel free to ask! I\'m here to help with any information or assistance you need.',
          '		',
          '		---',
          '		',
          '		Is there anything else you need assistance with?',
          '	------------------------------------------------',
          '<span class="ansi-yellow-fg">Assistant: </span>Certainly! LangSmith and Hugging Face are both powerful tools in the domain of natural language processing (NLP), and integrating them can significantly enhance your workflow. Here‚Äôs a detailed look at how you can use LangSmith with Hugging Face models:',
          '### What is LangSmith?',
          'LangSmith is a platform designed to help developers and researchers build, test, and deploy natural language applications. It offers features such as:',
          '- **Model Management**: Manage and version control your language models.',
          '- **Data Labeling**: Annotate and label data for training and evaluation.',
          '- **Model Evaluation**: Evaluate and compare different models and versions.',
          '- **API Integration**: Integrate with various NLP tools and platforms.',
          '### What is Hugging Face?',
          'Hugging Face is a leading company in the NLP domain, known for its transformers library. Hugging Face provides a wide array of pre-trained models and tools for NLP tasks, including:',
          '- **Pre-trained Models**: Access to a vast library of pre-trained models.',
          '- **Transformers Library**: A powerful library for working with transformer models.',
          '- **Hugging Face Hub**: A platform for sharing and accessing models, datasets, and metrics.',
          '### Integrating LangSmith with Hugging Face Models',
          '#### Step-by-Step Guide',
          '1. **Install Required Libraries**',
          '   Ensure you have the necessary libraries installed:',
          '   ```bash',
          '   pip install transformers datasets langsmith',
          '   ```',
          '2. **Load a Hugging Face Model**',
          '   Use the `transformers` library to load a pre-trained model:',
          '   ```python',
          '   from transformers import AutoModelForSequenceClassification, AutoTokenizer',
          '   model_name = "distilbert-base-uncased"',
          '   tokenizer = AutoTokenizer.from_pretrained(model_name)',
          '   model = AutoModelForSequenceClassification.from_pretrained(model_name)',
          '   ```',
          '3. **Integrate with LangSmith**',
          '   - **Initialize LangSmith Client**:',
          '     ```python',
          '     from langsmith import Client',
          '     client = Client()',
          '     ```',
          '   - **Create or Load a Dataset**:',
          '     ```python',
          '     from datasets import Dataset',
          '     # Example dataset',
          '     data = {',
          '         "text": ["This is a positive review.", "This is a negative review."],',
          '         "label": [1, 0]',
          '     }',
          '     dataset = Dataset.from_dict(data)',
          '     # Save dataset to LangSmith',
          '     dataset_id = client.create_dataset(name="my_dataset", data=dataset)',
          '     ```',
          '   - **Evaluate the Model**:',
          '     ```python',
          '     from langsmith import EvaluationResult',
          '     def evaluate_model(dataset, tokenizer, model):',
          '         results = []',
          '         for example in dataset:',
          '             inputs = tokenizer(example["text"], return_tensors="pt")',
          '             outputs = model(**inputs)',
          '             predicted_label = outputs.logits.argmax().item()',
          '             result = EvaluationResult(',
          '                 example_id=example["id"],',
          '                 predicted_label=predicted_label,',
          '                 ground_truth_label=example["label"]',
          '             )',
          '             results.append(result)',
          '         return results',
          '     evaluation_results = evaluate_model(dataset, tokenizer, model)',
          '     ```',
          '   - **Upload Evaluation Results to LangSmith**:',
          '     ```python',
          '     client.log_results(dataset_id, evaluation_results)',
          '     ```',
          '4. **Visualize and Analyze Results**',
          '   - Use LangSmith‚Äôs web interface to visualize the evaluation results.',
          '   - Compare different models and versions to identify the best performing model.',
          '### Additional Tips',
          '- **Model Tuning**: Use Hugging Face‚Äôs `Trainer` class to fine-tune models on your datasets and then evaluate them using LangSmith.',
          '- **Custom Metrics**: Define custom evaluation metrics and use them to assess model performance.',
          '- **Collaboration**: Share datasets and models with team members using the Hugging Face Hub and LangSmith.',
          'By following these steps, you can effectively integrate Hugging Face models with LangSmith, leveraging the strengths of both platforms to build and evaluate robust NLP applications.',
          'If you have any specific questions or need further assistance, feel free to ask!',
          '<span class="ansi-green-fg">User: </span>Exiting...',
          '<span class="ansi-yellow-fg">Assistant: </span>Goodbye!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se formos at√© o final da conversa, podemos ver</p>
      <div class="highlight">
        <pre><span></span>Entendido. Estou pronto para traduzir o texto markdown para o portugu√™s, mantendo a estrutura e estilo originais. Vou apenas traduzir o conte√∫do textual, sem alterar enlaces, imagens, c√≥digos de programa√ß√£o ou comandos de terminal. Por favor, forne√ßa o texto que deseja traduzir.Sim, posso ajudar com informa√ß√µes sobre o LangGraph! O LangGraph √© um grafo de modelo de linguagem que representa as rela√ß√µes e conex√µes entre diferentes modelos de linguagem e seus componentes. Ele pode ser usado para visualizar e entender a arquitetura, os processos de treinamento e as caracter√≠sticas de desempenho de v√°rios modelos de linguagem.		</pre>
        <pre>LangGraph pode ser particularmente √∫til para pesquisadores e desenvolvedores que est√£o trabalhando em tarefas de processamento de linguagem natural (PLN). Ele ajuda em:		</pre>
        <pre><span class="k">1.</span> <span class="gs">**Visualiza√ß√£o da Arquitetura do Modelo**</span>: Fornece uma vis√£o clara e detalhada de como diferentes componentes de um modelo de linguagem est√£o conectados.2. <span class="gs">**Compara√ß√£o de Modelos**</span>: Permite uma f√°cil compara√ß√£o de diferentes modelos de linguagem em termos de sua estrutura, dados de treinamento e m√©tricas de desempenho.3. <span class="gs">**Compreendendo Processos de Treinamento**</span>: Ajuda a entender as din√¢micas do treinamento e o fluxo de dados atrav√©s do modelo.4. <span class="gs">**Identifica√ß√£o de gargalos**</span>: Pode ajudar na identifica√ß√£o de potenciais gargalos ou √°reas para melhoria no modelo.		</pre>
        <pre>Se voc√™ tiver perguntas espec√≠ficas ou aspectos do LangGraph que lhe interessem, sinta-se √† vontade para me informar!Gostaria de saber sobre o uso do langsmith com os modelos de linguagem do Hugging Face, a integra√ß√£o do Hugging Face.Resumo da conversa: Claro! Aqui est√° um resumo estendido da conversa:		</pre>
        <pre>---		</pre>
        <pre><span class="gs">**Ol√°**</span>		</pre>
        <pre><span class="gs">**Qwen:**</span> Ol√°! Como posso ajudar voc√™ hoje? Seja para obter informa√ß√µes, realizar uma tarefa espec√≠fica ou apenas conversar, estou aqui para ajudar.		</pre>
        <pre><span class="gs">**Usu√°rio:**</span> Estou estudando sobre langgraph, voc√™ conhece?		</pre>
        <pre><span class="gs">**Qwen:**</span> Sim, posso ajudar com informa√ß√µes sobre o LangGraph! O LangGraph √© um grafo de modelo de linguagem que representa as rela√ß√µes e conex√µes entre diferentes modelos de linguagem e seus componentes. Ele pode ser usado para visualizar e entender a arquitetura, os processos de treinamento e as caracter√≠sticas de desempenho de v√°rios modelos de linguagem. O LangGraph pode ser particularmente √∫til para pesquisadores e desenvolvedores que est√£o trabalhando em tarefas de processamento de linguagem natural (PLN). Ele ajuda em:1. Visualizando a Arquitetura do Modelo2. Comparando Modelos3. Compreendendo os Processos de Treinamento4. Identificando Engarrafamentos		</pre>
        <pre>Se voc√™ tiver perguntas espec√≠ficas ou aspectos do LangGraph que lhe interessem, sinta-se √† vontade para me informar!		</pre>
        <pre><span class="gs">**Usu√°rio:**</span> Este √© um resumo da conversa at√© o momento: Claro! Aqui est√° um resumo da conversa acima:Ol√°Qwen: Ol√°! Como posso ajudar voc√™ hoje? Seja para obter informa√ß√µes, realizar uma tarefa espec√≠fica ou apenas conversar, estou aqui para ajudar.Crie um resumo da conversa acima.Qwen: [Fornecido o resumo que voc√™ est√° lendo agora.]		</pre>
        <pre>H√° algo mais com o qual voc√™ precise de ajuda?		</pre>
        <pre><span class="gs">**Qwen:**</span> [Estendeu o resumo que voc√™ est√° lendo agora.]		</pre>
        <pre>---		</pre>
        <pre>H√° algo mais com o que voc√™ precisa de ajuda?------------------------------------------------```</pre>
        <pre>Vemos que nas mensagens de estado apenas se conservam</pre>
        <pre>``` markdown</pre>
        <pre>Sim, posso ajudar com informa√ß√µes sobre o LangGraph! O LangGraph √© um gr√°fico de modelo de linguagem que representa as rela√ß√µes e conex√µes entre diferentes modelos de linguagem e seus componentes. Ele pode ser usado para visualizar e entender a arquitetura, os processos de treinamento e as caracter√≠sticas de desempenho de diversos modelos de linguagem.		</pre>
        <pre>LangGraph pode ser particularmente √∫til para pesquisadores e desenvolvedores que est√£o trabalhando em tarefas de processamento de linguagem natural (PLN). Ele ajuda em:		</pre>
        <pre><span class="k">1.</span> <span class="gs">**Visualizando a Arquitetura do Modelo**</span>: Fornece uma vis√£o clara e detalhada de como diferentes componentes de um modelo de linguagem est√£o conectados.2. <span class="gs">**Compara√ß√£o de Modelos**</span>: Permite uma compara√ß√£o f√°cil de diferentes modelos de linguagem em termos de sua estrutura, dados de treinamento e m√©tricas de desempenho.3. <span class="gs">**Compreendendo Processos de Treinamento**</span>: Ajuda a compreender as din√¢micas do treinamento e o fluxo de dados atrav√©s do modelo.4. <span class="gs">**Identifica√ß√£o de gargalos**</span>: Pode ajudar na identifica√ß√£o de potenciais gargalos ou √°reas para melhoria no modelo.		</pre>
        <pre>Se voc√™ tiver perguntas espec√≠ficas ou aspectos do LangGraph que lhe interessem, sinta-se √† vontade para me informar!Gostaria de saber sobre o uso do langsmith com modelos de linguagem do Hugging Face, a integra√ß√£o do Hugging Face.```</pre>
        <pre>Isto √©, a fun√ß√£o de filtragem mant√©m apenas as 2 √∫ltimas mensagens.</pre>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mas tarde podemos ver</p>
      <div class="highlight">
        <pre><span></span>--- 2 mensagens (resultado de trim_messages - ap√≥s a poda) ---Eu gostaria de saber sobre o uso do langsmith com modelos de linguagem do Hugging Face, a integra√ß√£o do Hugging Face.Resumo da conversa: Claro! Aqui est√° um resumo estendido da conversa:		</pre>
        <pre>---		</pre>
        <pre><span class="gs">**Ol√°**</span>		</pre>
        <pre><span class="gs">**Qwen:**</span> Ol√°! Como posso ajud√°-lo hoje? Seja para obter informa√ß√µes, realizar uma tarefa espec√≠fica ou apenas conversar, estou aqui para ajudar.		</pre>
        <pre><span class="gs">**Usu√°rio:**</span> Estou estudando sobre langgraph, voc√™ conhece?		</pre>
        <pre><span class="gs">**Qwen:**</span> Sim, posso ajudar com informa√ß√µes sobre o LangGraph! O LangGraph √© um gr√°fico de modelo de linguagem que representa as rela√ß√µes e conex√µes entre diferentes modelos de linguagem e seus componentes. Ele pode ser usado para visualizar e entender a arquitetura, os processos de treinamento e as caracter√≠sticas de desempenho de diversos modelos de linguagem. O LangGraph pode ser particularmente √∫til para pesquisadores e desenvolvedores que est√£o trabalhando em tarefas de processamento de linguagem natural (PLN). Ele ajuda em:1. Visualizando a Arquitetura do Modelo2. Comparando Modelos3. Compreendendo os Processos de Treinamento4. Identificando Engarrafamentos		</pre>
        <pre>Se voc√™ tiver perguntas espec√≠ficas ou aspectos do LangGraph que lhe interessem, sinta-se √† vontade para me informar!		</pre>
        <pre><span class="gs">**Usu√°rio:**</span> Este √© um resumo da conversa at√© o momento: Claro! Aqui est√° um resumo da conversa acima:Ol√°Qwen: Ol√°! Como posso ajudar voc√™ hoje? Seja para obter informa√ß√µes, realizar uma tarefa espec√≠fica ou apenas conversar, estou aqui para ajudar.Crie um resumo da conversa acima.Qwen: [Fornecido o resumo que voc√™ est√° lendo agora.]		</pre>
        <pre>H√° algo mais com o qual voc√™ precisa de ajuda?		</pre>
        <pre><span class="gs">**Qwen:**</span> [Estendeu o resumo que voc√™ est√° lendo agora.]		</pre>
        <pre>---		</pre>
        <pre>H√° algo mais com o que voc√™ precisa de ajuda?------------------------------------------------```</pre>
        <pre>Isto √©, a fun√ß√£o de trimagem remove a mensagem do assistente porque excede os 100 tokens.</pre>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mesmo eliminando mensagens, o que significa que o LLM n√£o as tem como contexto, ainda podemos ter uma conversa gra√ßas ao resumo da conversa que estamos gerando.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Salvar-estado-em-SQlite">Salvar estado em SQlite<a class="anchor-link" href="#Salvar-estado-em-SQlite"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 148" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vimos como salvar o estado do grafo na mem√≥ria, mas assim que terminamos o processo, essa mem√≥ria se perde, ent√£o vamos ver como salv√°-la no SQLite</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro precisamos instalar o pacote de <code>sqlite</code> para LangGraph.</p>
      <div class="highlight">
        <pre><span></span>pip<span class="w"> </span>install<span class="w"> </span>langgraph-checkpoint-sqlite<span class="sb">```</span></pre>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Importamos as bibliotecas de <code>sqlite</code> e <code>langgraph-checkpoint-sqlite</code>. Antes, quando salv√°vamos o estado na mem√≥ria us√°vamos <code>memory_saver</code>, agora usaremos <code>SqliteSaver</code> para salvar o estado em um banco de dados SQLite.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">sqlite3</span>',
      '<span class="kn">from</span> <span class="nn">langgraph.checkpoint.sqlite</span> <span class="kn">import</span> <span class="n">SqliteSaver</span>',
      '<span class="kn">import</span> <span class="nn">os</span>',
      ' ',
      '<span class="c1"># Create the directory if it doesn\'t exist</span>',
      '<span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="s2">"state_db"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      ' ',
      '<span class="n">db_path</span> <span class="o">=</span> <span class="s2">"state_db/langgraph_sqlite.db"</span>',
      '<span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_path</span><span class="p">,</span> <span class="n">check_same_thread</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>',
      '<span class="n">memory</span> <span class="o">=</span> <span class="n">SqliteSaver</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>















      
      <section class="section-block-markdown-cell">
      <p>Vamos a criar um chatbot b√°sico para n√£o adicionar complexidade al√©m da funcionalidade que queremos testar.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>
      <span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>
      <span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">HumanMessage</span><span class="p">,</span> <span class="n">AIMessage</span>
      <span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="kn">import</span> <span class="nn">dotenv</span>
      
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>
      
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>
      <span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>
      <span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>
          <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>
          <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>
          <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>
          <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
          <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>
      <span class="p">)</span>
      <span class="c1"># Create the chat model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>
      
      <span class="c1"># Nodes</span>
      <span class="k">def</span> <span class="nf">chat_model_node</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="c1"># Return the LLM's response in the correct state format</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])]{closing_brace}</span>
      
      <span class="c1"># Create graph builder</span>
      <span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chat_model_node</span><span class="p">)</span>
      
      <span class="c1"># Connecto nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">checkpointer</span><span class="o">=</span><span class="n">memory</span><span class="p">)</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv26.webp" width="143" height="234" alt="image uv 27" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Definimos a fun√ß√£o para imprimir as mensagens do grafo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># Colors for the terminal</span>',
      '<span class="n">COLOR_GREEN</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[32m"</span>',
      '<span class="n">COLOR_YELLOW</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[33m"</span>',
      '<span class="n">COLOR_RESET</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[0m"</span>',
      ' ',
      ' ',
      '<span class="k">def</span> <span class="nf">stream_graph_updates</span><span class="p">(</span><span class="n">user_input</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">config</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>',
      '    <span class="c1"># Initialize a flag to track if an assistant response has been printed</span>',
      '    <span class="n">assistant_response_printed</span> <span class="o">=</span> <span class="kc">False</span>',
      ' ',
      '    <span class="c1"># Print the user\'s input immediately</span>',
      '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n\\n</span><span class="si">{</span><span class="n">COLOR_GREEN</span><span class="si">}</span><span class="s2">User: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}{</span><span class="n">user_input</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      '    ',
      '    <span class="c1"># Create the user\'s message with the HumanMessage class</span>',
      '    <span class="n">user_message</span> <span class="o">=</span> <span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">user_input</span><span class="p">)</span>',
      '    ',
      '    <span class="c1"># Stream events from the graph execution</span>',
      '    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">user_message</span><span class="p">]},</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">):</span>',
      '        <span class="c1"># event is a dictionary mapping node names to their output</span>',
      '        <span class="c1"># Example: {\'chatbot_node\': {\'messages\': [...]}} or {\'summarize_conversation_node\': {\'summary\': \'...\'}}</span>',
      ' ',
      '        <span class="c1"># Iterate through node name and its output</span>',
      '        <span class="k">for</span> <span class="n">node_name</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">event</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>',
      '            <span class="c1"># Check if this event is from the chatbot node which should contain the assistant\'s reply</span>',
      '            <span class="k">if</span> <span class="n">node_name</span> <span class="o">==</span> <span class="s1">\'messages\'</span><span class="p">:</span>',
      '                <span class="c1"># Ensure the output format is as expected (list of messages)</span>',
      '                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>',
      '                    <span class="c1"># Get the messages from the event</span>',
      '                    <span class="n">messages</span> <span class="o">=</span> <span class="n">value</span>',
      '                    <span class="c1"># Ensure \'messages\' is a non-empty list</span>',
      '                    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">messages</span><span class="p">,</span> <span class="nb">list</span><span class="p">)</span> <span class="ow">and</span> <span class="n">messages</span><span class="p">:</span>',
      '                        <span class="c1"># Get the last message (presumably the assistant\'s reply)</span>',
      '                        <span class="n">last_message</span> <span class="o">=</span> <span class="n">messages</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
      '                        <span class="c1"># Ensure the message is an instance of AIMessage</span>',
      '                        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">last_message</span><span class="p">,</span> <span class="n">AIMessage</span><span class="p">):</span>',
      '                            <span class="c1"># Ensure the message has content to display</span>',
      '                            <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">last_message</span><span class="p">,</span> <span class="s1">\'content\'</span><span class="p">):</span>',
      '                                <span class="c1"># Print the assistant\'s message content</span>',
      '                                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_YELLOW</span><span class="si">}</span><span class="s2">Assistant: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}{</span><span class="n">last_message</span><span class="o">.</span><span class="n">content</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      '                                <span class="n">assistant_response_printed</span> <span class="o">=</span> <span class="kc">True</span> <span class="c1"># Mark that we\'ve printed the response</span>',
      '    ',
      '    <span class="c1"># Fallback if no assistant response was printed (e.g., graph error before chatbot_node)</span>',
      '    <span class="k">if</span> <span class="ow">not</span> <span class="n">assistant_response_printed</span><span class="p">:</span>',
      '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_YELLOW</span><span class="si">}</span><span class="s2">Assistant: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}</span><span class="s2">[No response generated or error occurred]"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>

















































      
      <section class="section-block-markdown-cell">
      <p>Executamos o grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">USER1_THREAD_ID</span> <span class="o">=</span> <span class="s2">"USER1"</span>',
          '<span class="n">config_USER1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="n">USER1_THREAD_ID</span><span class="p">}}</span>',
          '<span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
          '    <span class="n">user_input</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n\\n</span><span class="s2">User: "</span><span class="p">)</span>',
          '    <span class="k">if</span> <span class="n">user_input</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span><span class="s2">"quit"</span><span class="p">,</span> <span class="s2">"exit"</span><span class="p">,</span> <span class="s2">"q"</span><span class="p">]:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_GREEN</span><span class="si">}</span><span class="s2">User: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}</span><span class="s2">Exiting..."</span><span class="p">)</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_YELLOW</span><span class="si">}</span><span class="s2">Assistant: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}</span><span class="s2">Goodbye!"</span><span class="p">)</span>',
          '        <span class="k">break</span>',
          '    ',
          '    <span class="n">events</span> <span class="o">=</span> <span class="n">stream_graph_updates</span><span class="p">(</span><span class="n">user_input</span><span class="p">,</span> <span class="n">config_USER1</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-green-fg">User: </span>Hello, my name is M√°ximo',
          '<span class="ansi-yellow-fg">Assistant: </span>Hello M√°ximo! It\'s a pleasure to meet you. How can I assist you today?',
          '<span class="ansi-green-fg">User: </span>Exiting...',
          '<span class="ansi-yellow-fg">Assistant: </span>Goodbye!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se pode ver, s√≥ lhe disse como me chamo.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora reiniciamos o notebook para que se eliminem todos os dados salvos na RAM do notebook e voltamos a executar o c√≥digo anterior.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Recriamos a mem√≥ria de <code>sqlite</code> com <code>SqliteSaver</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">sqlite3</span>',
      '<span class="kn">from</span> <span class="nn">langgraph.checkpoint.sqlite</span> <span class="kn">import</span> <span class="n">SqliteSaver</span>',
      '<span class="kn">import</span> <span class="nn">os</span>',
      ' ',
      '<span class="c1"># Create the directory if it doesn\'t exist</span>',
      '<span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="s2">"state_db"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>',
      ' ',
      '<span class="n">db_path</span> <span class="o">=</span> <span class="s2">"state_db/langgraph_sqlite.db"</span>',
      '<span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_path</span><span class="p">,</span> <span class="n">check_same_thread</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>',
      '<span class="n">memory</span> <span class="o">=</span> <span class="n">SqliteSaver</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>















      
      <section class="section-block-markdown-cell">
      <p>Voltamos a criar o grafo</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>
      <span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>
      <span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">HumanMessage</span><span class="p">,</span> <span class="n">AIMessage</span>
      <span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="kn">import</span> <span class="nn">dotenv</span>
      
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>
      
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>
      <span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>
      <span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>
          <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>
          <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>
          <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>
          <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
          <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>
      <span class="p">)</span>
      <span class="c1"># Create the chat model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>
      
      <span class="c1"># Nodes</span>
      <span class="k">def</span> <span class="nf">chat_model_node</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="c1"># Return the LLM's response in the correct state format</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])]{closing_brace}</span>
      
      <span class="c1"># Create graph builder</span>
      <span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chat_model_node</span><span class="p">)</span>
      
      <span class="c1"># Connecto nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">checkpointer</span><span class="o">=</span><span class="n">memory</span><span class="p">)</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv27.webp" width="143" height="234" alt="image uv 28" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Re definimos a fun√ß√£o para imprimir as mensagens do grafo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># Colors for the terminal</span>',
      '<span class="n">COLOR_GREEN</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[32m"</span>',
      '<span class="n">COLOR_YELLOW</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[33m"</span>',
      '<span class="n">COLOR_RESET</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[0m"</span>',
      ' ',
      ' ',
      '<span class="k">def</span> <span class="nf">stream_graph_updates</span><span class="p">(</span><span class="n">user_input</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">config</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>',
      '    <span class="c1"># Initialize a flag to track if an assistant response has been printed</span>',
      '    <span class="n">assistant_response_printed</span> <span class="o">=</span> <span class="kc">False</span>',
      ' ',
      '    <span class="c1"># Print the user\'s input immediately</span>',
      '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n\\n</span><span class="si">{</span><span class="n">COLOR_GREEN</span><span class="si">}</span><span class="s2">User: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}{</span><span class="n">user_input</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      '    ',
      '    <span class="c1"># Create the user\'s message with the HumanMessage class</span>',
      '    <span class="n">user_message</span> <span class="o">=</span> <span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">user_input</span><span class="p">)</span>',
      '    ',
      '    <span class="c1"># Stream events from the graph execution</span>',
      '    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">user_message</span><span class="p">]},</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">):</span>',
      '        <span class="c1"># event is a dictionary mapping node names to their output</span>',
      '        <span class="c1"># Example: {\'chatbot_node\': {\'messages\': [...]}} or {\'summarize_conversation_node\': {\'summary\': \'...\'}}</span>',
      ' ',
      '        <span class="c1"># Iterate through node name and its output</span>',
      '        <span class="k">for</span> <span class="n">node_name</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">event</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>',
      '            <span class="c1"># Check if this event is from the chatbot node which should contain the assistant\'s reply</span>',
      '            <span class="k">if</span> <span class="n">node_name</span> <span class="o">==</span> <span class="s1">\'messages\'</span><span class="p">:</span>',
      '                <span class="c1"># Ensure the output format is as expected (list of messages)</span>',
      '                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>',
      '                    <span class="c1"># Get the messages from the event</span>',
      '                    <span class="n">messages</span> <span class="o">=</span> <span class="n">value</span>',
      '                    <span class="c1"># Ensure \'messages\' is a non-empty list</span>',
      '                    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">messages</span><span class="p">,</span> <span class="nb">list</span><span class="p">)</span> <span class="ow">and</span> <span class="n">messages</span><span class="p">:</span>',
      '                        <span class="c1"># Get the last message (presumably the assistant\'s reply)</span>',
      '                        <span class="n">last_message</span> <span class="o">=</span> <span class="n">messages</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
      '                        <span class="c1"># Ensure the message is an instance of AIMessage</span>',
      '                        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">last_message</span><span class="p">,</span> <span class="n">AIMessage</span><span class="p">):</span>',
      '                            <span class="c1"># Ensure the message has content to display</span>',
      '                            <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">last_message</span><span class="p">,</span> <span class="s1">\'content\'</span><span class="p">):</span>',
      '                                <span class="c1"># Print the assistant\'s message content</span>',
      '                                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_YELLOW</span><span class="si">}</span><span class="s2">Assistant: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}{</span><span class="n">last_message</span><span class="o">.</span><span class="n">content</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
      '                                <span class="n">assistant_response_printed</span> <span class="o">=</span> <span class="kc">True</span> <span class="c1"># Mark that we\'ve printed the response</span>',
      '    ',
      '    <span class="c1"># Fallback if no assistant response was printed (e.g., graph error before chatbot_node)</span>',
      '    <span class="k">if</span> <span class="ow">not</span> <span class="n">assistant_response_printed</span><span class="p">:</span>',
      '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_YELLOW</span><span class="si">}</span><span class="s2">Assistant: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}</span><span class="s2">[No response generated or error occurred]"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>

















































      
      <section class="section-block-markdown-cell">
      <p>E o executamos novamente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">USER1_THREAD_ID</span> <span class="o">=</span> <span class="s2">"USER1"</span>',
          '<span class="n">config_USER1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="n">USER1_THREAD_ID</span><span class="p">}}</span>',
          '<span class="k">while</span> <span class="kc">True</span><span class="p">:</span>',
          '    <span class="n">user_input</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\n\\n</span><span class="s2">User: "</span><span class="p">)</span>',
          '    <span class="k">if</span> <span class="n">user_input</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span><span class="s2">"quit"</span><span class="p">,</span> <span class="s2">"exit"</span><span class="p">,</span> <span class="s2">"q"</span><span class="p">]:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_GREEN</span><span class="si">}</span><span class="s2">User: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}</span><span class="s2">Exiting..."</span><span class="p">)</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">COLOR_YELLOW</span><span class="si">}</span><span class="s2">Assistant: </span><span class="si">{</span><span class="n">COLOR_RESET</span><span class="si">}</span><span class="s2">Goodbye!"</span><span class="p">)</span>',
          '        <span class="k">break</span>',
          '    ',
          '    <span class="n">events</span> <span class="o">=</span> <span class="n">stream_graph_updates</span><span class="p">(</span><span class="n">user_input</span><span class="p">,</span> <span class="n">config_USER1</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-green-fg">User: </span>What\'s my name?',
          '<span class="ansi-yellow-fg">Assistant: </span>Your name is M√°ximo. It\'s nice to know and use your name as we chat. How can I assist you today, M√°ximo?',
          '<span class="ansi-green-fg">User: </span>Exiting...',
          '<span class="ansi-yellow-fg">Assistant: </span>Goodbye!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como pode ser visto, conseguimos recuperar o estado do grafo do banco de dados SQLite.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Mem%C3%B3ria-de-longo-prazo,-mem%C3%B3ria-entre-threads">Mem√≥ria de longo prazo, mem√≥ria entre threads<a class="anchor-link" href="#Mem%C3%B3ria-de-longo-prazo,-mem%C3%B3ria-entre-threads"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 149" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A mem√≥ria √© uma fun√ß√£o cognitiva que permite √†s pessoas armazenar, recuperar e utilizar informa√ß√µes para compreender, a partir do seu passado, o seu presente e o seu futuro.
      Existem v√°rios tipos de <a href="https://langchain-ai.github.io/langgraph/concepts/memory" target="_blank" rel="nofollow noreferrer">mem√≥ria</a> de longo prazo que podem ser utilizados em aplica√ß√µes de IA.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Introdu%C3%A7%C3%A3o-ao-LangGraph-Memory-Store">Introdu√ß√£o ao LangGraph Memory Store<a class="anchor-link" href="#Introdu%C3%A7%C3%A3o-ao-LangGraph-Memory-Store"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 150" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>LangGraph fornece o <a href="https://langchain-ai.github.io/langgraph/reference/store/#langgraph.store.base.BaseStore" target="_blank" rel="nofollow noreferrer">LangGraph Memory Store</a>, que √© uma forma de salvar e recuperar mem√≥ria a longo prazo entre diferentes threads. Dessa maneira, em uma conversa, um usu√°rio pode indicar que gosta de algo, e em outra conversa, o chatbot pode recuperar essa informa√ß√£o para gerar uma resposta mais personalizada.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Trata-se de uma classe para armazenamentos persistentes de chave-valor (<code>key</code>-<code>value</code>).</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Quando objetos s√£o armazenados na mem√≥ria, tr√™s coisas s√£o necess√°rias:* Um <code>namespace</code> para o objeto, √© feito atrav√©s de uma <code>tupla</code>* Uma <code>key</code> √∫nica* O <code>valor</code> do objeto
      Vamos dar uma olhada em um exemplo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">uuid</span>',
      '<span class="kn">from</span> <span class="nn">langgraph.store.memory</span> <span class="kn">import</span> <span class="n">InMemoryStore</span>',
      ' ',
      '<span class="n">in_memory_store</span> <span class="o">=</span> <span class="n">InMemoryStore</span><span class="p">()</span>',
      ' ',
      '<span class="c1"># Namespace for the memory to save</span>',
      '<span class="n">user_id</span> <span class="o">=</span> <span class="s2">"1"</span>',
      '<span class="n">namespace_for_memory</span> <span class="o">=</span> <span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="s2">"memories"</span><span class="p">)</span>',
      ' ',
      '<span class="c1"># Save a memory to namespace as key and value</span>',
      '<span class="n">key</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">())</span>',
      ' ',
      '<span class="c1"># The value needs to be a dictionary  </span>',
      '<span class="n">value</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"food_preference"</span> <span class="p">:</span> <span class="s2">"I like pizza"</span><span class="p">}</span>',
      ' ',
      '<span class="c1"># Save the memory</span>',
      '<span class="n">in_memory_store</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">namespace_for_memory</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






















      
      <section class="section-block-markdown-cell">
      <p>O objeto <code>in_memory_store</code> que criamos tem v√°rios <a href="https://langchain-ai.github.io/langgraph/reference/store/#langgraph.store.base.BaseStore" target="_blank" rel="nofollow noreferrer">m√©todos</a> e um deles √© <code>search</code>, que nos permite buscar por <code>namespace</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Search </span>',
          '<span class="n">memories</span> <span class="o">=</span> <span class="n">in_memory_store</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">namespace_for_memory</span><span class="p">)</span>',
          '<span class="nb">type</span><span class="p">(</span><span class="n">memories</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">memories</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(list, 1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>√â uma lista de um √∫nico valor, o que faz sentido, pois armazenamos apenas um valor, ent√£o vamos v√™-lo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">value</span> <span class="o">=</span> <span class="n">memories</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
          '<span class="n">value</span><span class="o">.</span><span class="n">dict</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'namespace\': [\'1\', \'memories\'],',
          ' \'key\': \'70006131-948a-4d7a-bdce-78351c44fc4d\',',
          ' \'value\': {\'food_preference\': \'I like pizza\'},',
          ' \'created_at\': \'2025-05-11T07:24:31.462465+00:00\',',
          ' \'updated_at\': \'2025-05-11T07:24:31.462468+00:00\',',
          ' \'score\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver sua <code>key</code> e seu <code>value</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># The key, value</span>',
          '<span class="n">memories</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">key</span><span class="p">,</span> <span class="n">memories</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">value</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'70006131-948a-4d7a-bdce-78351c44fc4d\', {\'food_preference\': \'I like pizza\'})',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Tamb√©m podemos usar o m√©todo <code>get</code> para obter um objeto da mem√≥ria a partir de seu <code>namespace</code> e sua <code>key</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Get the memory by namespace and key</span>',
          '<span class="n">memory</span> <span class="o">=</span> <span class="n">in_memory_store</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">namespace_for_memory</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>',
          '<span class="n">memory</span><span class="o">.</span><span class="n">dict</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'namespace\': [\'1\', \'memories\'],',
          ' \'key\': \'70006131-948a-4d7a-bdce-78351c44fc4d\',',
          ' \'value\': {\'food_preference\': \'I like pizza\'},',
          ' \'created_at\': \'2025-05-11T07:24:31.462465+00:00\',',
          ' \'updated_at\': \'2025-05-11T07:24:31.462468+00:00\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Assim como usamos os checkpoints para a mem√≥ria de curto prazo, para a mem√≥ria de longo prazo vamos usar <code>LangGraph Store</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Chatbot-com-mem%C3%B3ria-de-longo-prazo">Chatbot com mem√≥ria de longo prazo<a class="anchor-link" href="#Chatbot-com-mem%C3%B3ria-de-longo-prazo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 151" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos um chatbot b√°sico, com mem√≥ria de longo prazo e mem√≥ria de curto prazo.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">MessagesState</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>
      <span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>
      <span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">HumanMessage</span><span class="p">,</span> <span class="n">AIMessage</span><span class="p">,</span> <span class="n">SystemMessage</span>
      <span class="kn">from</span> <span class="nn">langgraph.checkpoint.memory</span> <span class="kn">import</span> <span class="n">MemorySaver</span> <span class="c1"># Short-term memory</span>
      <span class="kn">from</span> <span class="nn">langgraph.store.base</span> <span class="kn">import</span> <span class="n">BaseStore</span>          <span class="c1"># Long-term memory</span>
      <span class="kn">from</span> <span class="nn">langchain_core.runnables.config</span> <span class="kn">import</span> <span class="n">RunnableConfig</span>
      <span class="kn">from</span> <span class="nn">langgraph.store.memory</span> <span class="kn">import</span> <span class="n">InMemoryStore</span>
      <span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="kn">import</span> <span class="nn">dotenv</span>
      
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>
      
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>
      <span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>
      <span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>
          <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>
          <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>
          <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>
          <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
          <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>
      <span class="p">)</span>
      <span class="c1"># Create the chat model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>
      
      <span class="c1"># Chatbot instruction</span>
      <span class="n">MODEL_SYSTEM_MESSAGE</span> <span class="o">=</span> <span class="s2">"""You are a helpful assistant that can answer questions and help with tasks.</span>
      <span class="s2">You have access to a long-term memory that you can use to answer questions and help with tasks.</span>
      <span class="s2">Here is the memory (it may be empty): </span><span class="si">{opening_brace}memory{closing_brace}</span><span class="s2">"""</span>
      
      <span class="c1"># Create new memory from the chat history and any existing memory</span>
      <span class="n">CREATE_MEMORY_INSTRUCTION</span> <span class="o">=</span> <span class="s2">"""You are a helpful assistant that gets information from the user to personalize your responses.</span>
      
      <span class="s2"># INFORMATION FROM THE USER:</span>
      <span class="si">{opening_brace}memory{closing_brace}</span>
      
      <span class="s2"># INSTRUCTIONS:</span>
      <span class="s2">1. Carefully review the chat history</span>
      <span class="s2">2. Identify new information from the user, such as:</span>
      <span class="s2">   - Personal details (name, location)</span>
      <span class="s2">   - Preferences (likes, dislikes)</span>
      <span class="s2">   - Interests and hobbies</span>
      <span class="s2">   - Past experiences</span>
      <span class="s2">   - Goals or future plans</span>
      <span class="s2">3. Combine any new information with the existing memory</span>
      <span class="s2">4. Format the memory as a clear, bulleted list</span>
      <span class="s2">5. If new information conflicts with existing memory, keep the most recent version</span>
      
      <span class="s2">Remember: Only include factual information directly stated by the user. Do not make assumptions or inferences.</span>
      
      <span class="s2">Based on the chat history below, please update the user information:"""</span>
      
      <span class="c1"># Nodes</span>
      <span class="k">def</span> <span class="nf">call_model</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">MessagesState</span><span class="p">,</span> <span class="n">config</span><span class="p">:</span> <span class="n">RunnableConfig</span><span class="p">,</span> <span class="n">store</span><span class="p">:</span> <span class="n">BaseStore</span><span class="p">):</span>
      
      <span class="w">    </span><span class="sd">"""Load memory from the store and use it to personalize the chatbot's response."""</span>
          
          <span class="c1"># Get the user ID from the config</span>
          <span class="n">user_id</span> <span class="o">=</span> <span class="n">config</span><span class="p">[</span><span class="s2">"configurable"</span><span class="p">][</span><span class="s2">"user_id"</span><span class="p">]</span>
      
          <span class="c1"># Retrieve memory from the store</span>
          <span class="n">namespace</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"memory"</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
          <span class="n">key</span> <span class="o">=</span> <span class="s2">"user_memory"</span>
          <span class="n">existing_memory</span> <span class="o">=</span> <span class="n">store</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">namespace</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
      
          <span class="c1"># Extract the actual memory content if it exists and add a prefix</span>
          <span class="k">if</span> <span class="n">existing_memory</span><span class="p">:</span>
              <span class="c1"># Value is a dictionary with a memory key</span>
              <span class="n">existing_memory_content</span> <span class="o">=</span> <span class="n">existing_memory</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'memory'</span><span class="p">)</span>
          <span class="k">else</span><span class="p">:</span>
              <span class="n">existing_memory_content</span> <span class="o">=</span> <span class="s2">"No existing memory found."</span>
          <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">existing_memory_content</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
              <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2">[Call model debug] Existing memory: </span><span class="si">{opening_brace}</span><span class="n">existing_memory_content</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
          <span class="k">else</span><span class="p">:</span>
              <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2">[Call model debug] Existing memory: </span><span class="si">{opening_brace}</span><span class="n">existing_memory_content</span><span class="o">.</span><span class="n">content</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      
          <span class="c1"># Format the memory in the system prompt</span>
          <span class="n">system_msg</span> <span class="o">=</span> <span class="n">MODEL_SYSTEM_MESSAGE</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">memory</span><span class="o">=</span><span class="n">existing_memory_content</span><span class="p">)</span>
          
          <span class="c1"># Respond using memory as well as the chat history</span>
          <span class="n">response</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">([</span><span class="n">SystemMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">system_msg</span><span class="p">)]</span><span class="o">+</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])</span>
      
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">response</span><span class="p">{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">write_memory</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">MessagesState</span><span class="p">,</span> <span class="n">config</span><span class="p">:</span> <span class="n">RunnableConfig</span><span class="p">,</span> <span class="n">store</span><span class="p">:</span> <span class="n">BaseStore</span><span class="p">):</span>
      
      <span class="w">    </span><span class="sd">"""Reflect on the chat history and save a memory to the store."""</span>
          
          <span class="c1"># Get the user ID from the config</span>
          <span class="n">user_id</span> <span class="o">=</span> <span class="n">config</span><span class="p">[</span><span class="s2">"configurable"</span><span class="p">][</span><span class="s2">"user_id"</span><span class="p">]</span>
      
          <span class="c1"># Retrieve existing memory from the store</span>
          <span class="n">namespace</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"memory"</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
          <span class="n">existing_memory</span> <span class="o">=</span> <span class="n">store</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">namespace</span><span class="p">,</span> <span class="s2">"user_memory"</span><span class="p">)</span>
              
          <span class="c1"># Extract the memory</span>
          <span class="k">if</span> <span class="n">existing_memory</span><span class="p">:</span>
              <span class="n">existing_memory_content</span> <span class="o">=</span> <span class="n">existing_memory</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'memory'</span><span class="p">)</span>
          <span class="k">else</span><span class="p">:</span>
              <span class="n">existing_memory_content</span> <span class="o">=</span> <span class="s2">"No existing memory found."</span>
          <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">existing_memory_content</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
              <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2">[Write memory debug] Existing memory: </span><span class="si">{opening_brace}</span><span class="n">existing_memory_content</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
          <span class="k">else</span><span class="p">:</span>
              <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2">[Write memory debug] Existing memory: </span><span class="si">{opening_brace}</span><span class="n">existing_memory_content</span><span class="o">.</span><span class="n">content</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      
          <span class="c1"># Format the memory in the system prompt</span>
          <span class="n">system_msg</span> <span class="o">=</span> <span class="n">CREATE_MEMORY_INSTRUCTION</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">memory</span><span class="o">=</span><span class="n">existing_memory_content</span><span class="p">)</span>
          <span class="n">new_memory</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">([</span><span class="n">SystemMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">system_msg</span><span class="p">)]</span><span class="o">+</span><span class="n">state</span><span class="p">[</span><span class="s1">'messages'</span><span class="p">])</span>
          <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">new_memory</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
              <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\n\t</span><span class="s2">[Write memory debug] New memory: </span><span class="si">{opening_brace}</span><span class="n">new_memory</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
          <span class="k">else</span><span class="p">:</span>
              <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\n\t</span><span class="s2">[Write memory debug] New memory: </span><span class="si">{opening_brace}</span><span class="n">new_memory</span><span class="o">.</span><span class="n">content</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      
          <span class="c1"># Overwrite the existing memory in the store </span>
          <span class="n">key</span> <span class="o">=</span> <span class="s2">"user_memory"</span>
      
          <span class="c1"># Write value as a dictionary with a memory key</span>
          <span class="n">store</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">namespace</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="p">{opening_brace}</span><span class="s2">"memory"</span><span class="p">:</span> <span class="n">new_memory</span><span class="o">.</span><span class="n">content</span><span class="p">{closing_brace})</span>
      
      <span class="c1"># Create graph builder</span>
      <span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"call_model"</span><span class="p">,</span> <span class="n">call_model</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"write_memory"</span><span class="p">,</span> <span class="n">write_memory</span><span class="p">)</span>
      
      <span class="c1"># Connect nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"call_model"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"call_model"</span><span class="p">,</span> <span class="s2">"write_memory"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"write_memory"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Store for long-term (across-thread) memory</span>
      <span class="n">long_term_memory</span> <span class="o">=</span> <span class="n">InMemoryStore</span><span class="p">()</span>
      
      <span class="c1"># Checkpointer for short-term (within-thread) memory</span>
      <span class="n">short_term_memory</span> <span class="o">=</span> <span class="n">MemorySaver</span><span class="p">()</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">checkpointer</span><span class="o">=</span><span class="n">short_term_memory</span><span class="p">,</span> <span class="n">store</span><span class="o">=</span><span class="n">long_term_memory</span><span class="p">)</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv28.webp" width="146" height="333" alt="image uv 29" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a test√°-lo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># We supply a thread ID for short-term (within-thread) memory</span>',
          '<span class="c1"># We supply a user ID for long-term (across-thread) memory </span>',
          '<span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">,</span> <span class="s2">"user_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">}}</span>',
          '',
          '<span class="c1"># User input </span>',
          '<span class="n">input_messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"Hi, my name is Maximo"</span><span class="p">)]</span>',
          '',
          '<span class="c1"># Run the graph</span>',
          '<span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">input_messages</span><span class="p">},</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">):</span>',
          '    <span class="n">chunk</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Hi, my name is Maximo',
          '	[Call model debug] Existing memory: No existing memory found.',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Hello Maximo! It\'s nice to meet you. How can I assist you today?',
          '	[Write memory debug] Existing memory: No existing memory found.',
          '	[Write memory debug] New memory:  ',
          'Here\'s the updated information I have about you:',
          '- Name: Maximo',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># User input </span>',
          '<span class="n">input_messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"I like to bike around San Francisco"</span><span class="p">)]</span>',
          '',
          '<span class="c1"># Run the graph</span>',
          '<span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">input_messages</span><span class="p">},</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">):</span>',
          '    <span class="n">chunk</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'I like to bike around San Francisco',
          '	[Call model debug] Existing memory:  ',
          'Here\'s the updated information I have about you:',
          '- Name: Maximo',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'That sounds like a great way to explore the city! San Francisco has some fantastic biking routes. Are there any specific areas or routes you enjoy biking the most, or are you looking for some new recommendations?',
          '	[Write memory debug] Existing memory:  ',
          'Here\'s the updated information I have about you:',
          '- Name: Maximo',
          '	[Write memory debug] New memory:  ',
          'Here\'s the updated information about you:',
          '- Name: Maximo',
          '- Location: San Francisco',
          '- Interest: Biking around San Francisco',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se recuperarmos a mem√≥ria de longo prazo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Namespace for the memory to save</span>',
          '<span class="n">user_id</span> <span class="o">=</span> <span class="s2">"1"</span>',
          '<span class="n">namespace</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"memory"</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>',
          '<span class="n">existing_memory</span> <span class="o">=</span> <span class="n">long_term_memory</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">namespace</span><span class="p">,</span> <span class="s2">"user_memory"</span><span class="p">)</span>',
          '<span class="n">existing_memory</span><span class="o">.</span><span class="n">dict</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'namespace\': [\'memory\', \'1\'],',
          ' \'key\': \'user_memory\',',
          ' \'value\': {\'memory\': " \n\nHere\'s the updated information about you:\n- Name: Maximo\n- Location: San Francisco\n- Interest: Biking around San Francisco"},',
          ' \'created_at\': \'2025-05-11T09:41:26.739207+00:00\',',
          ' \'updated_at\': \'2025-05-11T09:41:26.739211+00:00\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtemos seu valor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">existing_memory</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">\'memory\'</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          ' ',
          'Here\'s the updated information about you:',
          '- Name: Maximo',
          '- Location: San Francisco',
          '- Interest: Biking around San Francisco',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora podemos come√ßar um novo fio de conversa√ß√£o, mas com a mesma mem√≥ria de longo prazo. Veremos que o chatbot lembra as informa√ß√µes do usu√°rio.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># We supply a user ID for across-thread memory as well as a new thread ID</span>',
          '<span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="s2">"2"</span><span class="p">,</span> <span class="s2">"user_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">}}</span>',
          '',
          '<span class="c1"># User input </span>',
          '<span class="n">input_messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"Hi! Where would you recommend that I go biking?"</span><span class="p">)]</span>',
          '',
          '<span class="c1"># Run the graph</span>',
          '<span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">input_messages</span><span class="p">},</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">):</span>',
          '    <span class="n">chunk</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Hi! Where would you recommend that I go biking?',
          '	[Call model debug] Existing memory:  ',
          'Here\'s the updated information about you:',
          '- Name: Maximo',
          '- Location: San Francisco',
          '- Interest: Biking around San Francisco',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Hi there! Given my interest in biking around San Francisco, I\'d recommend a few great routes:',
          '1. **Golden Gate Park**: This is a fantastic place to bike, with wide paths that are separated from vehicle traffic. You can start at the eastern end near Stow Lake and bike all the way to the western end at Ocean Beach. There are plenty of scenic spots to stop and enjoy along the way.',
          '2. **The Embarcadero**: This route follows the waterfront from Fisherman‚Äôs Wharf to the Bay Bridge. It‚Äôs relatively flat and offers beautiful views of the San Francisco Bay and the city skyline. You can also stop by the Ferry Building for some delicious food and drinks.',
          '3. **Presidio**: The Presidio is a large park with numerous trails that offer diverse landscapes, from forests to coastal bluffs. The Crissy Field area is especially popular for its views of the Golden Gate Bridge.',
          '4. **Golden Gate Bridge**: Riding across the Golden Gate Bridge is a must-do experience. You can start from the San Francisco side, bike across the bridge, and then continue into Marin County for a longer ride with stunning views.',
          '5. **Lombard Street**: While not a long ride, biking down the famous crooked section of Lombard Street can be a fun and memorable experience. Just be prepared for the steep hill on the way back up!',
          'Each of these routes offers a unique experience, so you can choose based on your interests and the type of scenery you enjoy. Happy biking!',
          '	[Write memory debug] Existing memory:  ',
          'Here\'s the updated information about you:',
          '- Name: Maximo',
          '- Location: San Francisco',
          '- Interest: Biking around San Francisco',
          '	[Write memory debug] New memory:  üòä',
          'Let me know if you have any other questions or if you need more recommendations!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Abri um novo fio de conversa, perguntei onde poderia ir andar de bicicleta, ele se lembrou que eu tinha dito que gosto de andar de bicicleta em S√£o Francisco e respondeu com lugares em S√£o Francisco para os quais eu poderia ir.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Chatbot-com-perfil-de-usu%C3%A1rio">Chatbot com perfil de usu√°rio<a class="anchor-link" href="#Chatbot-com-perfil-de-usu%C3%A1rio"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 152" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Nota: Vamos a fazer esta se√ß√£o usando o Sonnet 3.7, pois a integra√ß√£o da HuggingFace n√£o possui a funcionalidade de <code>with_structured_output</code> que fornece uma sa√≠da estruturada com uma estrutura definida.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos criar tipagens para que o LLM gere uma sa√≠da com uma estrutura definida por n√≥s.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a criar um tipagem para o perfil do usu√°rio.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">TypedDict</span><span class="p">,</span> <span class="n">List</span>',
      ' ',
      '<span class="k">class</span> <span class="nc">UserProfile</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
      '<span class="w">    </span><span class="sd">"""User profile schema with typed fields"""</span>',
      '    <span class="n">user_name</span><span class="p">:</span> <span class="nb">str</span>  <span class="c1"># The user\'s preferred name</span>',
      '    <span class="n">interests</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>  <span class="c1"># A list of the user\'s interests</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>











      
      <section class="section-block-markdown-cell">
      <p>Agora recriamos o grafo, mas agora com o tipo <code>UserProfile</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a usar <code>with_structured_output</code> para que o LLM gere uma sa√≠da com uma estrutura definida por n√≥s, essa estrutura vamos definir com a classe <code>Subjects</code> que √© uma classe do tipo <code>BaseModel</code> de <code>Pydantic</code>.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">MessagesState</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>
      <span class="kn">from</span> <span class="nn">langchain_anthropic</span> <span class="kn">import</span> <span class="n">ChatAnthropic</span>
      <span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">HumanMessage</span><span class="p">,</span> <span class="n">AIMessage</span><span class="p">,</span> <span class="n">SystemMessage</span>
      <span class="kn">from</span> <span class="nn">langgraph.checkpoint.memory</span> <span class="kn">import</span> <span class="n">MemorySaver</span> <span class="c1"># Short-term memory</span>
      <span class="kn">from</span> <span class="nn">langgraph.store.base</span> <span class="kn">import</span> <span class="n">BaseStore</span>          <span class="c1"># Long-term memory</span>
      <span class="kn">from</span> <span class="nn">langchain_core.runnables.config</span> <span class="kn">import</span> <span class="n">RunnableConfig</span>
      <span class="kn">from</span> <span class="nn">langgraph.store.memory</span> <span class="kn">import</span> <span class="n">InMemoryStore</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">from</span> <span class="nn">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span><span class="p">,</span> <span class="n">Field</span>
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="kn">import</span> <span class="nn">dotenv</span>
      
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">ANTHROPIC_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"ANTHROPIC_LANGGRAPH_API_KEY"</span><span class="p">)</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>
      
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatAnthropic</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="s2">"claude-3-7-sonnet-20250219"</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">ANTHROPIC_TOKEN</span><span class="p">)</span>
      <span class="n">llm_with_structured_output</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">with_structured_output</span><span class="p">(</span><span class="n">UserProfile</span><span class="p">)</span>
      
      <span class="c1"># Chatbot instruction</span>
      <span class="n">MODEL_SYSTEM_MESSAGE</span> <span class="o">=</span> <span class="s2">"""You are a helpful assistant with memory that provides information about the user. </span>
      <span class="s2">If you have memory for this user, use it to personalize your responses.</span>
      <span class="s2">Here is the memory (it may be empty): </span><span class="si">{opening_brace}memory{closing_brace}</span><span class="s2">"""</span>
      
      <span class="c1"># Create new memory from the chat history and any existing memory</span>
      <span class="n">CREATE_MEMORY_INSTRUCTION</span> <span class="o">=</span> <span class="s2">"""Create or update a user profile memory based on the user's chat history. </span>
      <span class="s2">This will be saved for long-term memory. If there is an existing memory, simply update it. </span>
      <span class="s2">Here is the existing memory (it may be empty): </span><span class="si">{opening_brace}memory{closing_brace}</span><span class="s2">"""</span>
      
      <span class="c1"># Nodes</span>
      <span class="k">def</span> <span class="nf">call_model</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">MessagesState</span><span class="p">,</span> <span class="n">config</span><span class="p">:</span> <span class="n">RunnableConfig</span><span class="p">,</span> <span class="n">store</span><span class="p">:</span> <span class="n">BaseStore</span><span class="p">):</span>
      
      <span class="w">    </span><span class="sd">"""Load memory from the store and use it to personalize the chatbot's response."""</span>
          
          <span class="c1"># Get the user ID from the config</span>
          <span class="n">user_id</span> <span class="o">=</span> <span class="n">config</span><span class="p">[</span><span class="s2">"configurable"</span><span class="p">][</span><span class="s2">"user_id"</span><span class="p">]</span>
      
          <span class="c1"># Retrieve memory from the store</span>
          <span class="n">namespace</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"memory"</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
          <span class="n">existing_memory</span> <span class="o">=</span> <span class="n">store</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">namespace</span><span class="p">,</span> <span class="s2">"user_memory"</span><span class="p">)</span>
      
          <span class="c1"># Format the memories for the system prompt</span>
          <span class="k">if</span> <span class="n">existing_memory</span> <span class="ow">and</span> <span class="n">existing_memory</span><span class="o">.</span><span class="n">value</span><span class="p">:</span>
              <span class="n">memory_dict</span> <span class="o">=</span> <span class="n">existing_memory</span><span class="o">.</span><span class="n">value</span>
              <span class="n">formatted_memory</span> <span class="o">=</span> <span class="p">(</span>
                  <span class="sa">f</span><span class="s2">"Name: </span><span class="si">{opening_brace}</span><span class="n">memory_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'user_name'</span><span class="p">,</span><span class="w"> </span><span class="s1">'Unknown'</span><span class="p">)</span><span class="si">{closing_brace}</span><span class="se">\n</span><span class="s2">"</span>
                  <span class="sa">f</span><span class="s2">"Interests: </span><span class="si">{opening_brace}</span><span class="s1">', '</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">memory_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'interests'</span><span class="p">,</span><span class="w"> </span><span class="p">[]))</span><span class="si">{closing_brace}</span><span class="s2">"</span>
              <span class="p">)</span>
          <span class="k">else</span><span class="p">:</span>
              <span class="n">formatted_memory</span> <span class="o">=</span> <span class="kc">None</span>
          <span class="c1"># if isinstance(existing_memory_content, str):</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2">[Call model debug] Existing memory: </span><span class="si">{opening_brace}</span><span class="n">formatted_memory</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
          <span class="c1"># else:</span>
          <span class="c1">#     print(f"\t[Call model debug] Existing memory: {opening_brace}existing_memory_content.content{closing_brace}")</span>
      
          <span class="c1"># Format the memory in the system prompt</span>
          <span class="n">system_msg</span> <span class="o">=</span> <span class="n">MODEL_SYSTEM_MESSAGE</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">memory</span><span class="o">=</span><span class="n">formatted_memory</span><span class="p">)</span>
      
          <span class="c1"># Respond using memory as well as the chat history</span>
          <span class="n">response</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">([</span><span class="n">SystemMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">system_msg</span><span class="p">)]</span><span class="o">+</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])</span>
      
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">response</span><span class="p">{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">write_memory</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">MessagesState</span><span class="p">,</span> <span class="n">config</span><span class="p">:</span> <span class="n">RunnableConfig</span><span class="p">,</span> <span class="n">store</span><span class="p">:</span> <span class="n">BaseStore</span><span class="p">):</span>
      
      <span class="w">    </span><span class="sd">"""Reflect on the chat history and save a memory to the store."""</span>
          
          <span class="c1"># Get the user ID from the config</span>
          <span class="n">user_id</span> <span class="o">=</span> <span class="n">config</span><span class="p">[</span><span class="s2">"configurable"</span><span class="p">][</span><span class="s2">"user_id"</span><span class="p">]</span>
      
          <span class="c1"># Retrieve existing memory from the store</span>
          <span class="n">namespace</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"memory"</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
          <span class="n">existing_memory</span> <span class="o">=</span> <span class="n">store</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">namespace</span><span class="p">,</span> <span class="s2">"user_memory"</span><span class="p">)</span>
      
          <span class="c1"># Format the memories for the system prompt</span>
          <span class="k">if</span> <span class="n">existing_memory</span> <span class="ow">and</span> <span class="n">existing_memory</span><span class="o">.</span><span class="n">value</span><span class="p">:</span>
              <span class="n">memory_dict</span> <span class="o">=</span> <span class="n">existing_memory</span><span class="o">.</span><span class="n">value</span>
              <span class="n">formatted_memory</span> <span class="o">=</span> <span class="p">(</span>
                  <span class="sa">f</span><span class="s2">"Name: </span><span class="si">{opening_brace}</span><span class="n">memory_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'user_name'</span><span class="p">,</span><span class="w"> </span><span class="s1">'Unknown'</span><span class="p">)</span><span class="si">{closing_brace}</span><span class="se">\n</span><span class="s2">"</span>
                  <span class="sa">f</span><span class="s2">"Interests: </span><span class="si">{opening_brace}</span><span class="s1">', '</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">memory_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'interests'</span><span class="p">,</span><span class="w"> </span><span class="p">[]))</span><span class="si">{closing_brace}</span><span class="s2">"</span>
              <span class="p">)</span>
          <span class="k">else</span><span class="p">:</span>
              <span class="n">formatted_memory</span> <span class="o">=</span> <span class="kc">None</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2">[Write memory debug] Existing memory: </span><span class="si">{opening_brace}</span><span class="n">formatted_memory</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
              
          <span class="c1"># Format the existing memory in the instruction</span>
          <span class="n">system_msg</span> <span class="o">=</span> <span class="n">CREATE_MEMORY_INSTRUCTION</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">memory</span><span class="o">=</span><span class="n">formatted_memory</span><span class="p">)</span>
      
          <span class="c1"># Invoke the model to produce structured output that matches the schema</span>
          <span class="n">new_memory</span> <span class="o">=</span> <span class="n">llm_with_structured_output</span><span class="o">.</span><span class="n">invoke</span><span class="p">([</span><span class="n">SystemMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">system_msg</span><span class="p">)]</span><span class="o">+</span><span class="n">state</span><span class="p">[</span><span class="s1">'messages'</span><span class="p">])</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2">[Write memory debug] New memory: </span><span class="si">{opening_brace}</span><span class="n">new_memory</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      
          <span class="c1"># Overwrite the existing use profile memory</span>
          <span class="n">key</span> <span class="o">=</span> <span class="s2">"user_memory"</span>
          <span class="n">store</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">namespace</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">new_memory</span><span class="p">)</span>
      
      <span class="c1"># Create graph builder</span>
      <span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">MessagesState</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"call_model"</span><span class="p">,</span> <span class="n">call_model</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"write_memory"</span><span class="p">,</span> <span class="n">write_memory</span><span class="p">)</span>
      
      <span class="c1"># Connect nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"call_model"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"call_model"</span><span class="p">,</span> <span class="s2">"write_memory"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"write_memory"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Store for long-term (across-thread) memory</span>
      <span class="n">long_term_memory</span> <span class="o">=</span> <span class="n">InMemoryStore</span><span class="p">()</span>
      
      <span class="c1"># Checkpointer for short-term (within-thread) memory</span>
      <span class="n">short_term_memory</span> <span class="o">=</span> <span class="n">MemorySaver</span><span class="p">()</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">checkpointer</span><span class="o">=</span><span class="n">short_term_memory</span><span class="p">,</span> <span class="n">store</span><span class="o">=</span><span class="n">long_term_memory</span><span class="p">)</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv29.webp" width="146" height="333" alt="image uv 30" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Executamos o grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># We supply a thread ID for short-term (within-thread) memory</span>',
          '<span class="c1"># We supply a user ID for long-term (across-thread) memory </span>',
          '<span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">,</span> <span class="s2">"user_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">}}</span>',
          '',
          '<span class="c1"># User input </span>',
          '<span class="n">input_messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"Hi, my name is Maximo and I like to bike around Madrid and eat salads."</span><span class="p">)]</span>',
          '',
          '<span class="c1"># Run the graph</span>',
          '<span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">input_messages</span><span class="p">},</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">):</span>',
          '    <span class="n">chunk</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Hi, my name is Maximo and I like to bike around Madrid and eat salads.',
          '	[Call model debug] Existing memory: None',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Hello Maximo! It\'s nice to meet you. I see you enjoy biking around Madrid and eating salads - those are great healthy habits! Madrid has some beautiful areas to explore by bike, and the city has been improving its cycling infrastructure in recent years. ',
          'Is there anything specific about Madrid\'s cycling routes or perhaps some good places to find delicious salads in the city that you\'d like to know more about? I\'d be happy to help with any questions you might have.',
          '	[Write memory debug] Existing memory: None',
          '	[Write memory debug] New memory: {\'user_name\': \'Maximo\', \'interests\': [\'biking\', \'Madrid\', \'salads\']}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, o LLM gerou uma sa√≠da com a estrutura definida por n√≥s.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver como foi armazenada a mem√≥ria de longo prazo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Namespace for the memory to save</span>',
          '<span class="n">user_id</span> <span class="o">=</span> <span class="s2">"1"</span>',
          '<span class="n">namespace</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"memory"</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>',
          '<span class="n">existing_memory</span> <span class="o">=</span> <span class="n">long_term_memory</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">namespace</span><span class="p">,</span> <span class="s2">"user_memory"</span><span class="p">)</span>',
          '<span class="n">existing_memory</span><span class="o">.</span><span class="n">value</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'user_name\': \'Maximo\', \'interests\': [\'biking\', \'Madrid\', \'salads\']}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Mais">Mais<a class="anchor-link" href="#Mais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 153" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Atualizar-esquemas-estruturados-com-Trustcall">Atualizar esquemas estruturados com Trustcall<a class="anchor-link" href="#Atualizar-esquemas-estruturados-com-Trustcall"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 154" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>No exemplo anterior, criamos perfis de usu√°rio com dados estruturados
      Na realidade, o que acontece por baixo dos panos √© a regenera√ß√£o do perfil do usu√°rio a cada intera√ß√£o. Isso gera um gasto desnecess√°rio de tokens e pode fazer com que informa√ß√µes importantes do perfil do usu√°rio sejam perdidas.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Ent√£o, para resolver isso, vamos usar a biblioteca <a href="https://github.com/hinthornw/trustcall" target="_blank" rel="nofollow noreferrer">TrustCall</a>, que √© uma biblioteca open source para atualizar esquemas JSON. Quando precisa atualizar um esquema JSON, faz isso de forma incremental, ou seja, n√£o apaga o esquema anterior, mas vai adicionando os novos campos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a criar um exemplo de conversa√ß√£o para ver como funciona.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">HumanMessage</span><span class="p">,</span> <span class="n">AIMessage</span>',
      ' ',
      '<span class="c1"># Conversation</span>',
      '<span class="n">conversation</span> <span class="o">=</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"Hi, I\'m Maximo."</span><span class="p">),</span> ',
      '                <span class="n">AIMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"Nice to meet you, Maximo."</span><span class="p">),</span> ',
      '                <span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"I really like playing soccer."</span><span class="p">)]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>











      
      <section class="section-block-markdown-cell">
      <p>Criamos um esquema estruturado e um modelo de LLM</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span><span class="p">,</span> <span class="n">Field</span>',
      '<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span>',
      ' ',
      '<span class="c1"># Schema</span>',
      '<span class="k">class</span> <span class="nc">UserProfile</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>',
      '<span class="w">    </span><span class="sd">"""User profile schema with typed fields"""</span>',
      '    <span class="n">user_name</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">Field</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s2">"The user\'s preferred name"</span><span class="p">)</span>',
      '    <span class="n">interests</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="n">Field</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s2">"A list of the user\'s interests"</span><span class="p">)</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">langchain_anthropic</span> <span class="kn">import</span> <span class="n">ChatAnthropic</span>',
      '<span class="kn">import</span> <span class="nn">os</span>',
      '<span class="kn">import</span> <span class="nn">dotenv</span>',
      ' ',
      '<span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>',
      '<span class="n">ANTHROPIC_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"ANTHROPIC_LANGGRAPH_API_KEY"</span><span class="p">)</span>',
      '<span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>',
      ' ',
      '<span class="c1"># Create the LLM model</span>',
      '<span class="n">llm</span> <span class="o">=</span> <span class="n">ChatAnthropic</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="s2">"claude-3-7-sonnet-20250219"</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">ANTHROPIC_TOKEN</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
























      
      <section class="section-block-markdown-cell">
      <p>Utilizamos a fun√ß√£o <code>create_extractor</code> de <code>trustcall</code> para criar um extrator de dados estruturados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">trustcall</span> <span class="kn">import</span> <span class="n">create_extractor</span>',
      ' ',
      '<span class="c1"># Create the extractor</span>',
      '<span class="n">trustcall_extractor</span> <span class="o">=</span> <span class="n">create_extractor</span><span class="p">(</span>',
      '    <span class="n">llm</span><span class="p">,</span>',
      '    <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">UserProfile</span><span class="p">],</span>',
      '    <span class="n">tool_choice</span><span class="o">=</span><span class="s2">"UserProfile"</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>













      
      <section class="section-block-markdown-cell">
      <p>Como se pode ver, ao m√©todo <code>trustcall_extractor</code> √© dado um llm, que ser√° usado como motor de busca.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Extra√≠mos os dados estruturados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">SystemMessage</span>',
          '',
          '<span class="c1"># Instruction</span>',
          '<span class="n">system_msg</span> <span class="o">=</span> <span class="s2">"Extract the user profile from the following conversation"</span>',
          '',
          '<span class="c1"># Invoke the extractor</span>',
          '<span class="n">result</span> <span class="o">=</span> <span class="n">trustcall_extractor</span><span class="o">.</span><span class="n">invoke</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">SystemMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">system_msg</span><span class="p">)]</span><span class="o">+</span><span class="n">conversation</span><span class="p">})</span>',
          '<span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'messages\': [AIMessage(content=[{\'id\': \'toolu_01WfgbD1fG3rJYAXGrjqjfVY\', \'input\': {\'user_name\': \'Maximo\', \'interests\': [\'soccer\']}, \'name\': \'UserProfile\', \'type\': \'tool_use\'}], additional_kwargs={}, response_metadata={\'id\': \'msg_01TEB3FeDKLAeHJtbKo5noyW\', \'model\': \'claude-3-7-sonnet-20250219\', \'stop_reason\': \'tool_use\', \'stop_sequence\': None, \'usage\': {\'cache_creation_input_tokens\': 0, \'cache_read_input_tokens\': 0, \'input_tokens\': 497, \'output_tokens\': 56}, \'model_name\': \'claude-3-7-sonnet-20250219\'}, id=\'run-8a15289b-fd39-4a2d-878a-fa6feaa805c5-0\', tool_calls=[{\'name\': \'UserProfile\', \'args\': {\'user_name\': \'Maximo\', \'interests\': [\'soccer\']}, \'id\': \'toolu_01WfgbD1fG3rJYAXGrjqjfVY\', \'type\': \'tool_call\'}], usage_metadata={\'input_tokens\': 497, \'output_tokens\': 56, \'total_tokens\': 553, \'input_token_details\': {\'cache_read\': 0, \'cache_creation\': 0}})],',
          ' \'responses\': [UserProfile(user_name=\'Maximo\', interests=[\'soccer\'])],',
          ' \'response_metadata\': [{\'id\': \'toolu_01WfgbD1fG3rJYAXGrjqjfVY\'}],',
          ' \'attempts\': 1}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver os mensagens que foram geradas para extrair os dados estruturados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">result</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]:</span> ',
          '    <span class="n">m</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          '[{\'id\': \'toolu_01WfgbD1fG3rJYAXGrjqjfVY\', \'input\': {\'user_name\': \'Maximo\', \'interests\': [\'soccer\']}, \'name\': \'UserProfile\', \'type\': \'tool_use\'}]',
          'Tool Calls:',
          '  UserProfile (toolu_01WfgbD1fG3rJYAXGrjqjfVY)',
          ' Call ID: toolu_01WfgbD1fG3rJYAXGrjqjfVY',
          '  Args:',
          '    user_name: Maximo',
          '    interests: [\'soccer\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O esquema de <code>UserProfile</code> foi atualizado com o novo dado.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">schema</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s2">"responses"</span><span class="p">]</span>',
          '<span class="n">schema</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[UserProfile(user_name=\'Maximo\', interests=[\'soccer\'])]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, o esquema √© uma lista, vamos ver o tipo de dado do seu √∫nico elemento</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">type</span><span class="p">(</span><span class="n">schema</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '__main__.UserProfile',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos convert√™-lo em um dicion√°rio com <code>model_dump</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">schema</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">model_dump</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'user_name\': \'Maximo\', \'interests\': [\'soccer\']}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Gra√ßas a ter dado um LLM a <code>trustcall_extractor</code>, podemos pedir-lhe o que queremos que extraia</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a simular que continua a conversa√ß√£o para ver como se atualiza o esquema</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># Update the conversation</span>',
      '<span class="n">updated_conversation</span> <span class="o">=</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"Hi, I\'m Maximo."</span><span class="p">),</span> ',
      '                <span class="n">AIMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"Nice to meet you, Maximo."</span><span class="p">),</span> ',
      '                <span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"I really like playing soccer."</span><span class="p">),</span>',
      '                <span class="n">AIMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"It is great to play soccer! Where do you go after playing soccer?"</span><span class="p">),</span>',
      '                <span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"I really like to go to a bakery after playing soccer."</span><span class="p">),]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>











      
      <section class="section-block-markdown-cell">
      <p>Pedimos ao modelo que atualize o esquema (um <code>JSON</code>) por meio da biblioteca <code>trustcall</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Update the instruction</span>',
          '<span class="n">system_msg</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">"""Update the memory (JSON doc) to incorporate new information from the following conversation"""</span>',
          '',
          '<span class="c1"># Invoke the extractor with the updated instruction and existing profile with the corresponding tool name (UserProfile)</span>',
          '<span class="n">result</span> <span class="o">=</span> <span class="n">trustcall_extractor</span><span class="o">.</span><span class="n">invoke</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">SystemMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">system_msg</span><span class="p">)]</span><span class="o">+</span><span class="n">updated_conversation</span><span class="p">},</span> ',
          '                                    <span class="p">{</span><span class="s2">"existing"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"UserProfile"</span><span class="p">:</span> <span class="n">schema</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">model_dump</span><span class="p">()}})</span>',
          '<span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'messages\': [AIMessage(content=[{\'id\': \'toolu_01K1zTh33kXDAw1h18Yh2HBb\', \'input\': {\'user_name\': \'Maximo\', \'interests\': [\'soccer\', \'bakeries\']}, \'name\': \'UserProfile\', \'type\': \'tool_use\'}], additional_kwargs={}, response_metadata={\'id\': \'msg_01RYUJvCdzL4b8kBYKo4BtQf\', \'model\': \'claude-3-7-sonnet-20250219\', \'stop_reason\': \'tool_use\', \'stop_sequence\': None, \'usage\': {\'cache_creation_input_tokens\': 0, \'cache_read_input_tokens\': 0, \'input_tokens\': 538, \'output_tokens\': 60}, \'model_name\': \'claude-3-7-sonnet-20250219\'}, id=\'run-06994472-5ba0-46cc-a512-5fcacce283fc-0\', tool_calls=[{\'name\': \'UserProfile\', \'args\': {\'user_name\': \'Maximo\', \'interests\': [\'soccer\', \'bakeries\']}, \'id\': \'toolu_01K1zTh33kXDAw1h18Yh2HBb\', \'type\': \'tool_call\'}], usage_metadata={\'input_tokens\': 538, \'output_tokens\': 60, \'total_tokens\': 598, \'input_token_details\': {\'cache_read\': 0, \'cache_creation\': 0}})],',
          ' \'responses\': [UserProfile(user_name=\'Maximo\', interests=[\'soccer\', \'bakeries\'])],',
          ' \'response_metadata\': [{\'id\': \'toolu_01K1zTh33kXDAw1h18Yh2HBb\'}],',
          ' \'attempts\': 1}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver os mensagens que foram geradas para atualizar o esquema</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">result</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]:</span> ',
          '    <span class="n">m</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          '[{\'id\': \'toolu_01K1zTh33kXDAw1h18Yh2HBb\', \'input\': {\'user_name\': \'Maximo\', \'interests\': [\'soccer\', \'bakeries\']}, \'name\': \'UserProfile\', \'type\': \'tool_use\'}]',
          'Tool Calls:',
          '  UserProfile (toolu_01K1zTh33kXDAw1h18Yh2HBb)',
          ' Call ID: toolu_01K1zTh33kXDAw1h18Yh2HBb',
          '  Args:',
          '    user_name: Maximo',
          '    interests: [\'soccer\', \'bakeries\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos o esquema atualizado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">updated_schema</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s2">"responses"</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>',
          '<span class="n">updated_schema</span><span class="o">.</span><span class="n">model_dump</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'user_name\': \'Maximo\', \'interests\': [\'soccer\', \'bakeries\']}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Chatbot-com-perfil-de-usu%C3%A1rio-atualizado-com-Trustcall">Chatbot com perfil de usu√°rio atualizado com Trustcall<a class="anchor-link" href="#Chatbot-com-perfil-de-usu%C3%A1rio-atualizado-com-Trustcall"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 155" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a criar o grafo que atualiza o perfil do usu√°rio, mas agora com a biblioteca <code>trustcall</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span><span class="p">,</span> <span class="n">Field</span>
      <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">MessagesState</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>
      <span class="kn">from</span> <span class="nn">langchain_anthropic</span> <span class="kn">import</span> <span class="n">ChatAnthropic</span>
      <span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">HumanMessage</span><span class="p">,</span> <span class="n">AIMessage</span><span class="p">,</span> <span class="n">SystemMessage</span>
      <span class="kn">from</span> <span class="nn">langgraph.checkpoint.memory</span> <span class="kn">import</span> <span class="n">MemorySaver</span> <span class="c1"># Short-term memory</span>
      <span class="kn">from</span> <span class="nn">langgraph.store.base</span> <span class="kn">import</span> <span class="n">BaseStore</span>          <span class="c1"># Long-term memory</span>
      <span class="kn">from</span> <span class="nn">langchain_core.runnables.config</span> <span class="kn">import</span> <span class="n">RunnableConfig</span>
      <span class="kn">from</span> <span class="nn">langgraph.store.memory</span> <span class="kn">import</span> <span class="n">InMemoryStore</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">from</span> <span class="nn">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span><span class="p">,</span> <span class="n">Field</span>
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="kn">import</span> <span class="nn">dotenv</span>
      <span class="kn">from</span> <span class="nn">trustcall</span> <span class="kn">import</span> <span class="n">create_extractor</span>
      
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">ANTHROPIC_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"ANTHROPIC_LANGGRAPH_API_KEY"</span><span class="p">)</span>
      
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="c1"># Schema </span>
      <span class="k">class</span> <span class="nc">UserProfile</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
      <span class="w">    </span><span class="sd">""" Profile of a user """</span>
          <span class="n">user_name</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">Field</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s2">"The user's preferred name"</span><span class="p">)</span>
          <span class="n">user_location</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">Field</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s2">"The user's location"</span><span class="p">)</span>
          <span class="n">interests</span><span class="p">:</span> <span class="nb">list</span> <span class="o">=</span> <span class="n">Field</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s2">"A list of the user's interests"</span><span class="p">)</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatAnthropic</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="s2">"claude-3-7-sonnet-20250219"</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">ANTHROPIC_TOKEN</span><span class="p">)</span>
      
      <span class="c1"># Create the extractor</span>
      <span class="n">trustcall_extractor</span> <span class="o">=</span> <span class="n">create_extractor</span><span class="p">(</span>
          <span class="n">llm</span><span class="p">,</span>
          <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">UserProfile</span><span class="p">],</span>
          <span class="n">tool_choice</span><span class="o">=</span><span class="s2">"UserProfile"</span><span class="p">,</span> <span class="c1"># Enforces use of the UserProfile tool</span>
      <span class="p">)</span>
      
      <span class="c1"># Chatbot instruction</span>
      <span class="n">MODEL_SYSTEM_MESSAGE</span> <span class="o">=</span> <span class="s2">"""You are a helpful assistant with memory that provides information about the user. </span>
      <span class="s2">If you have memory for this user, use it to personalize your responses.</span>
      <span class="s2">Here is the memory (it may be empty): </span><span class="si">{opening_brace}memory{closing_brace}</span><span class="s2">"""</span>
      
      <span class="c1"># Create new memory from the chat history and any existing memory</span>
      <span class="n">TRUSTCALL_INSTRUCTION</span> <span class="o">=</span> <span class="s2">"""Create or update the memory (JSON doc) to incorporate information from the following conversation:"""</span>
      
      <span class="c1"># Nodes</span>
      <span class="k">def</span> <span class="nf">call_model</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">MessagesState</span><span class="p">,</span> <span class="n">config</span><span class="p">:</span> <span class="n">RunnableConfig</span><span class="p">,</span> <span class="n">store</span><span class="p">:</span> <span class="n">BaseStore</span><span class="p">):</span>
      
      <span class="w">    </span><span class="sd">"""Load memory from the store and use it to personalize the chatbot's response."""</span>
      <span class="w">    </span>
      <span class="w">    </span><span class="sd">"""Load memory from the store and use it to personalize the chatbot's response."""</span>
          
          <span class="c1"># Get the user ID from the config</span>
          <span class="n">user_id</span> <span class="o">=</span> <span class="n">config</span><span class="p">[</span><span class="s2">"configurable"</span><span class="p">][</span><span class="s2">"user_id"</span><span class="p">]</span>
      
          <span class="c1"># Retrieve memory from the store</span>
          <span class="n">namespace</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"memory"</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
          <span class="n">existing_memory</span> <span class="o">=</span> <span class="n">store</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">namespace</span><span class="p">,</span> <span class="s2">"user_memory"</span><span class="p">)</span>
      
          <span class="c1"># Format the memories for the system prompt</span>
          <span class="k">if</span> <span class="n">existing_memory</span> <span class="ow">and</span> <span class="n">existing_memory</span><span class="o">.</span><span class="n">value</span><span class="p">:</span>
              <span class="n">memory_dict</span> <span class="o">=</span> <span class="n">existing_memory</span><span class="o">.</span><span class="n">value</span>
              <span class="n">formatted_memory</span> <span class="o">=</span> <span class="p">(</span>
                  <span class="sa">f</span><span class="s2">"Name: </span><span class="si">{opening_brace}</span><span class="n">memory_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'user_name'</span><span class="p">,</span><span class="w"> </span><span class="s1">'Unknown'</span><span class="p">)</span><span class="si">{closing_brace}</span><span class="se">\n</span><span class="s2">"</span>
                  <span class="sa">f</span><span class="s2">"Location: </span><span class="si">{opening_brace}</span><span class="n">memory_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'user_location'</span><span class="p">,</span><span class="w"> </span><span class="s1">'Unknown'</span><span class="p">)</span><span class="si">{closing_brace}</span><span class="se">\n</span><span class="s2">"</span>
                  <span class="sa">f</span><span class="s2">"Interests: </span><span class="si">{opening_brace}</span><span class="s1">', '</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">memory_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'interests'</span><span class="p">,</span><span class="w"> </span><span class="p">[]))</span><span class="si">{closing_brace}</span><span class="s2">"</span>      
              <span class="p">)</span>
          <span class="k">else</span><span class="p">:</span>
              <span class="n">formatted_memory</span> <span class="o">=</span> <span class="kc">None</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2">[Call model debug] Existing memory: </span><span class="si">{opening_brace}</span><span class="n">formatted_memory</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      
          <span class="c1"># Format the memory in the system prompt</span>
          <span class="n">system_msg</span> <span class="o">=</span> <span class="n">MODEL_SYSTEM_MESSAGE</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">memory</span><span class="o">=</span><span class="n">formatted_memory</span><span class="p">)</span>
      
          <span class="c1"># Respond using memory as well as the chat history</span>
          <span class="n">response</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">([</span><span class="n">SystemMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">system_msg</span><span class="p">)]</span><span class="o">+</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])</span>
      
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">response</span><span class="p">{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">write_memory</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">MessagesState</span><span class="p">,</span> <span class="n">config</span><span class="p">:</span> <span class="n">RunnableConfig</span><span class="p">,</span> <span class="n">store</span><span class="p">:</span> <span class="n">BaseStore</span><span class="p">):</span>
      
      <span class="w">    </span><span class="sd">"""Reflect on the chat history and save a memory to the store."""</span>
          
          <span class="c1"># Get the user ID from the config</span>
          <span class="n">user_id</span> <span class="o">=</span> <span class="n">config</span><span class="p">[</span><span class="s2">"configurable"</span><span class="p">][</span><span class="s2">"user_id"</span><span class="p">]</span>
      
          <span class="c1"># Retrieve existing memory from the store</span>
          <span class="n">namespace</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"memory"</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
          <span class="n">existing_memory</span> <span class="o">=</span> <span class="n">store</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">namespace</span><span class="p">,</span> <span class="s2">"user_memory"</span><span class="p">)</span>
              
          <span class="c1"># Get the profile as the value from the list, and convert it to a JSON doc</span>
          <span class="n">existing_profile</span> <span class="o">=</span> <span class="p">{opening_brace}</span><span class="s2">"UserProfile"</span><span class="p">:</span> <span class="n">existing_memory</span><span class="o">.</span><span class="n">value</span><span class="p">{closing_brace}</span> <span class="k">if</span> <span class="n">existing_memory</span> <span class="k">else</span> <span class="kc">None</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2">[Write memory debug] Existing profile: </span><span class="si">{opening_brace}</span><span class="n">existing_profile</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
          
          <span class="c1"># Invoke the extractor</span>
          <span class="n">result</span> <span class="o">=</span> <span class="n">trustcall_extractor</span><span class="o">.</span><span class="n">invoke</span><span class="p">({opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">SystemMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">TRUSTCALL_INSTRUCTION</span><span class="p">)]</span><span class="o">+</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">],</span> <span class="s2">"existing"</span><span class="p">:</span> <span class="n">existing_profile</span><span class="p">{closing_brace})</span>
          
          <span class="c1"># Get the updated profile as a JSON object</span>
          <span class="n">updated_profile</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s2">"responses"</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">model_dump</span><span class="p">()</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2">[Write memory debug] Updated profile: </span><span class="si">{opening_brace}</span><span class="n">updated_profile</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      
          <span class="c1"># Save the updated profile</span>
          <span class="n">key</span> <span class="o">=</span> <span class="s2">"user_memory"</span>
          <span class="n">store</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">namespace</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">updated_profile</span><span class="p">)</span>
      
      <span class="c1"># Create graph builder</span>
      <span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">MessagesState</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"call_model"</span><span class="p">,</span> <span class="n">call_model</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"write_memory"</span><span class="p">,</span> <span class="n">write_memory</span><span class="p">)</span>
      
      <span class="c1"># Connect nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"call_model"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"call_model"</span><span class="p">,</span> <span class="s2">"write_memory"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"write_memory"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Store for long-term (across-thread) memory</span>
      <span class="n">long_term_memory</span> <span class="o">=</span> <span class="n">InMemoryStore</span><span class="p">()</span>
      
      <span class="c1"># Checkpointer for short-term (within-thread) memory</span>
      <span class="n">short_term_memory</span> <span class="o">=</span> <span class="n">MemorySaver</span><span class="p">()</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">checkpointer</span><span class="o">=</span><span class="n">short_term_memory</span><span class="p">,</span> <span class="n">store</span><span class="o">=</span><span class="n">long_term_memory</span><span class="p">)</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv30.webp" width="146" height="333" alt="image uv 31" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Iniciamos a conversa√ß√£o</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># We supply a thread ID for short-term (within-thread) memory</span>',
          '<span class="c1"># We supply a user ID for long-term (across-thread) memory </span>',
          '<span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">,</span> <span class="s2">"user_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">}}</span>',
          '',
          '<span class="c1"># User input </span>',
          '<span class="n">input_messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"Hi, my name is Maximo"</span><span class="p">)]</span>',
          '',
          '<span class="c1"># Run the graph</span>',
          '<span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">input_messages</span><span class="p">},</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">):</span>',
          '    <span class="n">chunk</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Hi, my name is Maximo',
          '	[Call model debug] Existing memory: None',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Hello Maximo! It\'s nice to meet you. How can I help you today? Whether you have questions, need information, or just want to chat, I\'m here to assist you. Is there something specific you\'d like to talk about?',
          '	[Write memory debug] Existing profile: None',
          '	[Write memory debug] Updated profile: {\'user_name\': \'Maximo\', \'user_location\': \'&lt;UNKNOWN&gt;\', \'interests\': []}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, o perfil do usu√°rio n√£o possui nem localiza√ß√£o nem interesses definidos. Vamos atualizar o perfil do usu√°rio.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># User input </span>',
          '<span class="n">input_messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"I like to play soccer and I live in Madrid"</span><span class="p">)]</span>',
          '',
          '<span class="c1"># Run the graph</span>',
          '<span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">input_messages</span><span class="p">},</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">):</span>',
          '    <span class="n">chunk</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'I like to play soccer and I live in Madrid',
          '	[Call model debug] Existing memory: Name: Maximo',
          'Location: &lt;UNKNOWN&gt;',
          'Interests: ',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Hello Maximo! It\'s great to learn that you live in Madrid and enjoy playing soccer. Madrid is a fantastic city with a rich soccer culture, being home to world-famous clubs like Real Madrid and Atl√©tico Madrid.',
          'Soccer is truly a way of life in Spain, so you\'re in a perfect location for your interest. Do you support any particular team in Madrid? Or perhaps you enjoy playing soccer recreationally in the city\'s parks and facilities?',
          'Is there anything specific about Madrid or soccer you\'d like to discuss further?',
          '	[Write memory debug] Existing profile: {\'UserProfile\': {\'user_name\': \'Maximo\', \'user_location\': \'&lt;UNKNOWN&gt;\', \'interests\': []}}',
          '	[Write memory debug] Updated profile: {\'user_name\': \'Maximo\', \'user_location\': \'Madrid\', \'interests\': [\'soccer\']}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Atualizou o perfil com a localiza√ß√£o e os interesses do usu√°rio</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver a mem√≥ria atualizada</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Namespace for the memory to save</span>',
          '<span class="n">user_id</span> <span class="o">=</span> <span class="s2">"1"</span>',
          '<span class="n">namespace</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"memory"</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>',
          '<span class="n">existing_memory</span> <span class="o">=</span> <span class="n">long_term_memory</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">namespace</span><span class="p">,</span> <span class="s2">"user_memory"</span><span class="p">)</span>',
          '<span class="n">existing_memory</span><span class="o">.</span><span class="n">dict</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'namespace\': [\'memory\', \'1\'],',
          ' \'key\': \'user_memory\',',
          ' \'value\': {\'user_name\': \'Maximo\',',
          '  \'user_location\': \'Madrid\',',
          '  \'interests\': [\'soccer\']},',
          ' \'created_at\': \'2025-05-12T17:35:03.583258+00:00\',',
          ' \'updated_at\': \'2025-05-12T17:35:03.583259+00:00\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos o esquema com o perfil do usu√°rio atualizado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># The user profile saved as a JSON object</span>',
          '<span class="n">existing_memory</span><span class="o">.</span><span class="n">value</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'user_name\': \'Maximo\', \'user_location\': \'Madrid\', \'interests\': [\'soccer\']}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a adicionar um novo interesse do usu√°rio</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># User input </span>',
          '<span class="n">input_messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"I also like to play basketball"</span><span class="p">)]</span>',
          '',
          '<span class="c1"># Run the graph</span>',
          '<span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">input_messages</span><span class="p">},</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">):</span>',
          '    <span class="n">chunk</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'I also like to play basketball',
          '	[Call model debug] Existing memory: Name: Maximo',
          'Location: Madrid',
          'Interests: soccer',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'That\'s great to know, Maximo! It\'s nice that you enjoy both soccer and basketball. Basketball is also quite popular in Spain, with Liga ACB being one of the strongest basketball leagues in Europe. ',
          'In Madrid, you have the opportunity to follow Real Madrid\'s basketball section, which is one of the most successful basketball teams in Europe. The city offers plenty of courts and facilities where you can play basketball too.',
          'Do you play basketball casually with friends, or are you part of any local leagues in Madrid? And how do you balance your time between soccer and basketball?',
          '	[Write memory debug] Existing profile: {\'UserProfile\': {\'user_name\': \'Maximo\', \'user_location\': \'Madrid\', \'interests\': [\'soccer\']}}',
          '	[Write memory debug] Updated profile: {\'user_name\': \'Maximo\', \'user_location\': \'Madrid\', \'interests\': [\'soccer\', \'basketball\']}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a ver a mem√≥ria atualizada</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Namespace for the memory to save</span>',
          '<span class="n">user_id</span> <span class="o">=</span> <span class="s2">"1"</span>',
          '<span class="n">namespace</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"memory"</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>',
          '<span class="n">existing_memory</span> <span class="o">=</span> <span class="n">long_term_memory</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">namespace</span><span class="p">,</span> <span class="s2">"user_memory"</span><span class="p">)</span>',
          '<span class="n">existing_memory</span><span class="o">.</span><span class="n">value</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'user_name\': \'Maximo\',',
          ' \'user_location\': \'Madrid\',',
          ' \'interests\': [\'soccer\', \'basketball\']}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Adicionou corretamente o novo interesse do usu√°rio.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com essa mem√≥ria de longo prazo armazenada, podemos iniciar uma nova thread e o chatbot ter√° acesso ao nosso perfil atualizado.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># We supply a thread ID for short-term (within-thread) memory</span>',
          '<span class="c1"># We supply a user ID for long-term (across-thread) memory </span>',
          '<span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="s2">"2"</span><span class="p">,</span> <span class="s2">"user_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">}}</span>',
          '',
          '<span class="c1"># User input </span>',
          '<span class="n">input_messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"What soccer players do you recommend for me?"</span><span class="p">)]</span>',
          '',
          '<span class="c1"># Run the graph</span>',
          '<span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">input_messages</span><span class="p">},</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">):</span>',
          '    <span class="n">chunk</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'What soccer players do you recommend for me?',
          '	[Call model debug] Existing memory: Name: Maximo',
          'Location: Madrid',
          'Interests: soccer, basketball',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Based on your interest in soccer, I can recommend some players who might appeal to you. Since you\'re from Madrid, you might already follow Real Madrid or Atl√©tico Madrid players, but here are some recommendations:',
          'From La Liga:',
          '- Vin√≠cius J√∫nior and Jude Bellingham (Real Madrid)',
          '- Antoine Griezmann (Atl√©tico Madrid)',
          '- Robert Lewandowski (Barcelona)',
          '- Lamine Yamal (Barcelona\'s young talent)',
          'International stars:',
          '- Kylian Mbapp√©',
          '- Erling Haaland',
          '- Mohamed Salah',
          '- Kevin De Bruyne',
          'You might also enjoy watching players with creative playing styles since you\'re interested in basketball as well, which is a sport that values creativity and flair - players like Rodrigo De Paul or Jo√£o F√©lix.',
          'Is there a particular league or playing style you prefer in soccer?',
          '	[Write memory debug] Existing profile: {\'UserProfile\': {\'user_name\': \'Maximo\', \'user_location\': \'Madrid\', \'interests\': [\'soccer\', \'basketball\']}}',
          '	[Write memory debug] Updated profile: {\'user_name\': \'Maximo\', \'user_location\': \'Madrid\', \'interests\': [\'soccer\', \'basketball\']}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como sabe que eu moro em Madrid, primeiro me sugeriu jogadores de futebol da LaLiga espanhola. E depois me sugeriu jogadores de outras ligas.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Chatbot-com-cole%C3%A7%C3%B5es-de-documentos-de-usu%C3%A1rio-atualizadas-com-Trustcall">Chatbot com cole√ß√µes de documentos de usu√°rio atualizadas com Trustcall<a class="anchor-link" href="#Chatbot-com-cole%C3%A7%C3%B5es-de-documentos-de-usu%C3%A1rio-atualizadas-com-Trustcall"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 156" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Outra abordagem √©, em vez de salvar o perfil do usu√°rio em um √∫nico documento, salvar uma cole√ß√£o de documentos, desta forma n√£o estamos presos a um √∫nico esquema fechado.
      Vamos a ver como fazer isso.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">MessagesState</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">langchain_anthropic</span> <span class="kn">import</span> <span class="n">ChatAnthropic</span>
      <span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">HumanMessage</span><span class="p">,</span> <span class="n">AIMessage</span><span class="p">,</span> <span class="n">SystemMessage</span>
      <span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">merge_message_runs</span>
      <span class="kn">from</span> <span class="nn">langgraph.checkpoint.memory</span> <span class="kn">import</span> <span class="n">MemorySaver</span> <span class="c1"># Short-term memory</span>
      <span class="kn">from</span> <span class="nn">langgraph.store.base</span> <span class="kn">import</span> <span class="n">BaseStore</span>          <span class="c1"># Long-term memory</span>
      <span class="kn">from</span> <span class="nn">langchain_core.runnables.config</span> <span class="kn">import</span> <span class="n">RunnableConfig</span>
      <span class="kn">from</span> <span class="nn">langgraph.store.memory</span> <span class="kn">import</span> <span class="n">InMemoryStore</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">from</span> <span class="nn">trustcall</span> <span class="kn">import</span> <span class="n">create_extractor</span>
      <span class="kn">from</span> <span class="nn">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span><span class="p">,</span> <span class="n">Field</span>
      <span class="kn">import</span> <span class="nn">uuid</span>
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="kn">import</span> <span class="nn">dotenv</span>
      
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">ANTHROPIC_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"ANTHROPIC_LANGGRAPH_API_KEY"</span><span class="p">)</span>
      
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="c1"># Memory schema</span>
      <span class="k">class</span> <span class="nc">Memory</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
      <span class="w">    </span><span class="sd">"""A memory item representing a piece of information learned about the user."""</span>
          <span class="n">content</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">Field</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s2">"The main content of the memory. For example: User expressed interest in learning about French."</span><span class="p">)</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatAnthropic</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="s2">"claude-3-7-sonnet-20250219"</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">ANTHROPIC_TOKEN</span><span class="p">)</span>
      
      <span class="c1"># Create the extractor</span>
      <span class="n">trustcall_extractor</span> <span class="o">=</span> <span class="n">create_extractor</span><span class="p">(</span>
          <span class="n">llm</span><span class="p">,</span>
          <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">Memory</span><span class="p">],</span>
          <span class="n">tool_choice</span><span class="o">=</span><span class="s2">"Memory"</span><span class="p">,</span>
          <span class="c1"># This allows the extractor to insert new memories</span>
          <span class="n">enable_inserts</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
      <span class="p">)</span>
      
      <span class="c1"># Chatbot instruction</span>
      <span class="n">MODEL_SYSTEM_MESSAGE</span> <span class="o">=</span> <span class="s2">"""You are a helpful chatbot. You are designed to be a companion to a user. </span>
      <span class="s2">You have a long term memory which keeps track of information you learn about the user over time.</span>
      <span class="s2">Current Memory (may include updated memories from this conversation): </span>
      <span class="si">{opening_brace}memory{closing_brace}</span><span class="s2">"""</span>
      
      <span class="c1"># Create new memory from the chat history and any existing memory</span>
      <span class="n">TRUSTCALL_INSTRUCTION</span> <span class="o">=</span> <span class="s2">"""Reflect on following interaction. </span>
      <span class="s2">Use the provided tools to retain any necessary memories about the user. </span>
      <span class="s2">Use parallel tool calling to handle updates and insertions simultaneously:"""</span>
      
      <span class="c1"># Nodes</span>
      <span class="k">def</span> <span class="nf">call_model</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">MessagesState</span><span class="p">,</span> <span class="n">config</span><span class="p">:</span> <span class="n">RunnableConfig</span><span class="p">,</span> <span class="n">store</span><span class="p">:</span> <span class="n">BaseStore</span><span class="p">):</span>
      
      <span class="w">    </span><span class="sd">"""Load memory from the store and use it to personalize the chatbot's response."""</span>
          
          <span class="c1"># Get the user ID from the config</span>
          <span class="n">user_id</span> <span class="o">=</span> <span class="n">config</span><span class="p">[</span><span class="s2">"configurable"</span><span class="p">][</span><span class="s2">"user_id"</span><span class="p">]</span>
      
          <span class="c1"># Retrieve memory from the store</span>
          <span class="n">namespace</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"memories"</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
          <span class="n">memories</span> <span class="o">=</span> <span class="n">store</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">namespace</span><span class="p">)</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2">[Call model debug] Memories: </span><span class="si">{opening_brace}</span><span class="n">memories</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      
          <span class="c1"># Format the memories for the system prompt</span>
          <span class="n">info</span> <span class="o">=</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="sa">f</span><span class="s2">"- </span><span class="si">{opening_brace}</span><span class="n">mem</span><span class="o">.</span><span class="n">value</span><span class="p">[</span><span class="s1">'content'</span><span class="p">]</span><span class="si">{closing_brace}</span><span class="s2">"</span> <span class="k">for</span> <span class="n">mem</span> <span class="ow">in</span> <span class="n">memories</span><span class="p">)</span>
          <span class="n">system_msg</span> <span class="o">=</span> <span class="n">MODEL_SYSTEM_MESSAGE</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">memory</span><span class="o">=</span><span class="n">info</span><span class="p">)</span>
      
          <span class="c1"># Respond using memory as well as the chat history</span>
          <span class="n">response</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">([</span><span class="n">SystemMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">system_msg</span><span class="p">)]</span><span class="o">+</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])</span>
      
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">response</span><span class="p">{closing_brace}</span>
      
      <span class="k">def</span> <span class="nf">write_memory</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">MessagesState</span><span class="p">,</span> <span class="n">config</span><span class="p">:</span> <span class="n">RunnableConfig</span><span class="p">,</span> <span class="n">store</span><span class="p">:</span> <span class="n">BaseStore</span><span class="p">):</span>
      
      <span class="w">    </span><span class="sd">"""Reflect on the chat history and save a memory to the store."""</span>
          
          <span class="c1"># Get the user ID from the config</span>
          <span class="n">user_id</span> <span class="o">=</span> <span class="n">config</span><span class="p">[</span><span class="s2">"configurable"</span><span class="p">][</span><span class="s2">"user_id"</span><span class="p">]</span>
      
          <span class="c1"># Define the namespace for the memories</span>
          <span class="n">namespace</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"memories"</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
      
          <span class="c1"># Retrieve the most recent memories for context</span>
          <span class="n">existing_items</span> <span class="o">=</span> <span class="n">store</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">namespace</span><span class="p">)</span>
      
          <span class="c1"># Format the existing memories for the Trustcall extractor</span>
          <span class="n">tool_name</span> <span class="o">=</span> <span class="s2">"Memory"</span>
          <span class="n">existing_memories</span> <span class="o">=</span> <span class="p">([(</span><span class="n">existing_item</span><span class="o">.</span><span class="n">key</span><span class="p">,</span> <span class="n">tool_name</span><span class="p">,</span> <span class="n">existing_item</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
                                <span class="k">for</span> <span class="n">existing_item</span> <span class="ow">in</span> <span class="n">existing_items</span><span class="p">]</span>
                                <span class="k">if</span> <span class="n">existing_items</span>
                                <span class="k">else</span> <span class="kc">None</span>
                              <span class="p">)</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2">[Write memory debug] Existing memories: </span><span class="si">{opening_brace}</span><span class="n">existing_memories</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      
          <span class="c1"># Merge the chat history and the instruction</span>
          <span class="n">updated_messages</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">merge_message_runs</span><span class="p">(</span><span class="n">messages</span><span class="o">=</span><span class="p">[</span><span class="n">SystemMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">TRUSTCALL_INSTRUCTION</span><span class="p">)]</span> <span class="o">+</span> <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]))</span>
      
          <span class="c1"># Invoke the extractor</span>
          <span class="n">result</span> <span class="o">=</span> <span class="n">trustcall_extractor</span><span class="o">.</span><span class="n">invoke</span><span class="p">({opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">updated_messages</span><span class="p">,</span> 
                                              <span class="s2">"existing"</span><span class="p">:</span> <span class="n">existing_memories</span><span class="p">{closing_brace})</span>
      
          <span class="c1"># Save the memories from Trustcall to the store</span>
          <span class="k">for</span> <span class="n">r</span><span class="p">,</span> <span class="n">rmeta</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="s2">"responses"</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="s2">"response_metadata"</span><span class="p">]):</span>
              <span class="n">store</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">namespace</span><span class="p">,</span>
                        <span class="n">rmeta</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"json_doc_id"</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">())),</span>
                        <span class="n">r</span><span class="o">.</span><span class="n">model_dump</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s2">"json"</span><span class="p">),</span>
                  <span class="p">)</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\t</span><span class="s2">[Write memory debug] Saved memories: </span><span class="si">{opening_brace}</span><span class="n">result</span><span class="p">[</span><span class="s1">'responses'</span><span class="p">]</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      
      <span class="c1"># Create graph builder</span>
      <span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">MessagesState</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"call_model"</span><span class="p">,</span> <span class="n">call_model</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"write_memory"</span><span class="p">,</span> <span class="n">write_memory</span><span class="p">)</span>
      
      <span class="c1"># Connect nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"call_model"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"call_model"</span><span class="p">,</span> <span class="s2">"write_memory"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"write_memory"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Store for long-term (across-thread) memory</span>
      <span class="n">long_term_memory</span> <span class="o">=</span> <span class="n">InMemoryStore</span><span class="p">()</span>
      
      <span class="c1"># Checkpointer for short-term (within-thread) memory</span>
      <span class="n">short_term_memory</span> <span class="o">=</span> <span class="n">MemorySaver</span><span class="p">()</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">checkpointer</span><span class="o">=</span><span class="n">short_term_memory</span><span class="p">,</span> <span class="n">store</span><span class="o">=</span><span class="n">long_term_memory</span><span class="p">)</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv31.webp" width="146" height="333" alt="image uv 32" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Come√ßamos uma nova conversa</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># We supply a thread ID for short-term (within-thread) memory</span>',
          '<span class="c1"># We supply a user ID for long-term (across-thread) memory </span>',
          '<span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">,</span> <span class="s2">"user_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">}}</span>',
          '',
          '<span class="c1"># User input </span>',
          '<span class="n">input_messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"Hi, my name is Maximo"</span><span class="p">)]</span>',
          '',
          '<span class="c1"># Run the graph</span>',
          '<span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">input_messages</span><span class="p">},</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">):</span>',
          '    <span class="n">chunk</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Hi, my name is Maximo',
          '	[Call model debug] Memories: []',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Hello Maximo! It\'s nice to meet you. I\'m your companion chatbot, here to chat, help answer questions, or just be someone to talk to. ',
          'I\'ll remember your name is Maximo for our future conversations. What would you like to talk about today? How are you doing?',
          '	[Write memory debug] Existing memories: None',
          '	[Write memory debug] Saved memories: [Memory(content="User\'s name is Maximo.")]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Adicionamos um novo interesse do usu√°rio</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># User input </span>',
          '<span class="n">input_messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"I like to play soccer"</span><span class="p">)]</span>',
          '',
          '<span class="c1"># Run the graph</span>',
          '<span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">input_messages</span><span class="p">},</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">):</span>',
          '    <span class="n">chunk</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'I like to play soccer',
          '	[Call model debug] Memories: [Item(namespace=[\'memories\', \'1\'], key=\'6d06c4f5-3a74-46b2-92b4-1e29ba128c90\', value={\'content\': "User\'s name is Maximo."}, created_at=\'2025-05-12T18:32:38.070902+00:00\', updated_at=\'2025-05-12T18:32:38.070903+00:00\', score=None)]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'That\'s great to know, Maximo! Soccer is such a wonderful sport. Do you play on a team, or more casually with friends? I\'d also be curious to know what position you typically play, or if you have a favorite professional team you follow. I\'ll remember that you enjoy soccer for our future conversations.',
          '	[Write memory debug] Existing memories: [(\'6d06c4f5-3a74-46b2-92b4-1e29ba128c90\', \'Memory\', {\'content\': "User\'s name is Maximo."})]',
          '	[Write memory debug] Saved memories: [Memory(content=\'User enjoys playing soccer.\')]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, o novo interesse do usu√°rio foi adicionado √† mem√≥ria.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver a mem√≥ria atualizada</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Namespace for the memory to save</span>',
          '<span class="n">user_id</span> <span class="o">=</span> <span class="s2">"1"</span>',
          '<span class="n">namespace</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"memories"</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>',
          '<span class="n">memories</span> <span class="o">=</span> <span class="n">long_term_memory</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">namespace</span><span class="p">)</span>',
          '<span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">memories</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">dict</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'namespace\': [\'memories\', \'1\'], \'key\': \'6d06c4f5-3a74-46b2-92b4-1e29ba128c90\', \'value\': {\'content\': "User\'s name is Maximo."}, \'created_at\': \'2025-05-12T18:32:38.070902+00:00\', \'updated_at\': \'2025-05-12T18:32:38.070903+00:00\', \'score\': None}',
          '{\'namespace\': [\'memories\', \'1\'], \'key\': \'25d2ee8c-5890-415b-85e0-d9fb0ea4cd43\', \'value\': {\'content\': \'User enjoys playing soccer.\'}, \'created_at\': \'2025-05-12T18:32:42.558787+00:00\', \'updated_at\': \'2025-05-12T18:32:42.558789+00:00\', \'score\': None}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">memories</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'content\': "User\'s name is Maximo."}',
          '{\'content\': \'User enjoys playing soccer.\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que s√£o salvos documentos de mem√≥ria, n√£o um perfil do usu√°rio.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a adicionar um novo interesse do usu√°rio</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># User input </span>',
          '<span class="n">input_messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"I also like to play basketball"</span><span class="p">)]</span>',
          '',
          '<span class="c1"># Run the graph</span>',
          '<span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">input_messages</span><span class="p">},</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">):</span>',
          '    <span class="n">chunk</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'I also like to play basketball',
          '	[Call model debug] Memories: [Item(namespace=[\'memories\', \'1\'], key=\'6d06c4f5-3a74-46b2-92b4-1e29ba128c90\', value={\'content\': "User\'s name is Maximo."}, created_at=\'2025-05-12T18:32:38.070902+00:00\', updated_at=\'2025-05-12T18:32:38.070903+00:00\', score=None), Item(namespace=[\'memories\', \'1\'], key=\'25d2ee8c-5890-415b-85e0-d9fb0ea4cd43\', value={\'content\': \'User enjoys playing soccer.\'}, created_at=\'2025-05-12T18:32:42.558787+00:00\', updated_at=\'2025-05-12T18:32:42.558789+00:00\', score=None)]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'That\'s awesome, Maximo! Both soccer and basketball are fantastic sports. I\'ll remember that you enjoy basketball as well. Do you find yourself playing one more than the other? And similar to soccer, do you play basketball with a team or more casually? Many people enjoy the different skills and dynamics each sport offers - soccer with its continuous flow and footwork, and basketball with its fast pace and shooting precision. Any favorite basketball teams you follow?',
          '	[Write memory debug] Existing memories: [(\'6d06c4f5-3a74-46b2-92b4-1e29ba128c90\', \'Memory\', {\'content\': "User\'s name is Maximo."}), (\'25d2ee8c-5890-415b-85e0-d9fb0ea4cd43\', \'Memory\', {\'content\': \'User enjoys playing soccer.\'})]',
          '	[Write memory debug] Saved memories: [Memory(content=\'User enjoys playing basketball.\')]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a ver a mem√≥ria atualizada</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Namespace for the memory to save</span>',
          '<span class="n">user_id</span> <span class="o">=</span> <span class="s2">"1"</span>',
          '<span class="n">namespace</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"memories"</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>',
          '<span class="n">memories</span> <span class="o">=</span> <span class="n">long_term_memory</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">namespace</span><span class="p">)</span>',
          '<span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">memories</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'content\': "User\'s name is Maximo."}',
          '{\'content\': \'User enjoys playing soccer.\'}',
          '{\'content\': \'User enjoys playing basketball.\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Iniciamos uma nova conversa com um novo fio</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># We supply a thread ID for short-term (within-thread) memory</span>',
          '<span class="c1"># We supply a user ID for long-term (across-thread) memory </span>',
          '<span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="s2">"2"</span><span class="p">,</span> <span class="s2">"user_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">}}</span>',
          '',
          '<span class="c1"># User input </span>',
          '<span class="n">input_messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"What soccer players do you recommend for me?"</span><span class="p">)]</span>',
          '',
          '<span class="c1"># Run the graph</span>',
          '<span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">input_messages</span><span class="p">},</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">):</span>',
          '    <span class="n">chunk</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'What soccer players do you recommend for me?',
          '	[Call model debug] Memories: [Item(namespace=[\'memories\', \'1\'], key=\'6d06c4f5-3a74-46b2-92b4-1e29ba128c90\', value={\'content\': "User\'s name is Maximo."}, created_at=\'2025-05-12T18:32:38.070902+00:00\', updated_at=\'2025-05-12T18:32:38.070903+00:00\', score=None), Item(namespace=[\'memories\', \'1\'], key=\'25d2ee8c-5890-415b-85e0-d9fb0ea4cd43\', value={\'content\': \'User enjoys playing soccer.\'}, created_at=\'2025-05-12T18:32:42.558787+00:00\', updated_at=\'2025-05-12T18:32:42.558789+00:00\', score=None), Item(namespace=[\'memories\', \'1\'], key=\'965f2e52-bea0-44d4-8534-4fce2bbc1c4b\', value={\'content\': \'User enjoys playing basketball.\'}, created_at=\'2025-05-12T18:33:38.613626+00:00\', updated_at=\'2025-05-12T18:33:38.613629+00:00\', score=None)]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Hi Maximo! Since you enjoy soccer, I\'d be happy to recommend some players you might find interesting to follow or learn from.',
          'Based on your interests in both soccer and basketball, I might suggest players who are known for their athleticism and skill:',
          '1. Lionel Messi - Widely considered one of the greatest players of all time',
          '2. Cristiano Ronaldo - Known for incredible athleticism and dedication',
          '3. Kylian Mbapp√© - Young talent with amazing speed and technical ability',
          '4. Kevin De Bruyne - Master of passing and vision',
          '5. Erling Haaland - Goal-scoring phenomenon',
          'Is there a particular position or playing style you\'re most interested in? That would help me refine my recommendations further. I could also suggest players from specific leagues or teams if you have preferences!',
          '	[Write memory debug] Existing memories: [(\'6d06c4f5-3a74-46b2-92b4-1e29ba128c90\', \'Memory\', {\'content\': "User\'s name is Maximo."}), (\'25d2ee8c-5890-415b-85e0-d9fb0ea4cd43\', \'Memory\', {\'content\': \'User enjoys playing soccer.\'}), (\'965f2e52-bea0-44d4-8534-4fce2bbc1c4b\', \'Memory\', {\'content\': \'User enjoys playing basketball.\'})]',
          '	[Write memory debug] Saved memories: [Memory(content=\'User asked for soccer player recommendations, suggesting an active interest in following professional soccer beyond just playing it.\')]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que se lembrava que gost√°vamos de futebol e basquete.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Humano-no-loop">Humano no loop<a class="anchor-link" href="#Humano-no-loop"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 157" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Embora um agente possa realizar tarefas, para certas tarefas, √© necess√°rio que haja uma supervis√£o humana. Isso √© chamado de <code>human in the loop</code>. Vamos ver como isso pode ser feito com <code>LangGraph</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A camada de <a href="https://langchain-ai.github.io/langgraph/concepts/persistence/" target="_blank" rel="nofollow noreferrer">persist√™ncia</a> de <code>LangGraph</code> suporta fluxos de trabalho com humanos no loop, permitindo que a execu√ß√£o seja interrompida e retomada com base nos coment√°rios dos usu√°rios. A interface principal desta funcionalidade √© a fun√ß√£o <a href="https://langchain-ai.github.io/langgraph/concepts/human_in_the_loop/#interrupt">interrupt</a>. Chamando <code>interrupt</code> dentro de um n√≥, a execu√ß√£o ser√° interrompida. A execu√ß√£o pode ser retomada, junto com a nova contribui√ß√£o humana, passada em uma primitiva <a href="https://langchain-ai.github.io/langgraph/concepts/human_in_the_loop/#the-command-primitive">Command</a>. <code>interrupt</code> √© similar ao comando de Python <code>input()</code>, mas com algumas considera√ß√µes extras.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos adicionar ao chatbot que tem mem√≥ria a curto prazo e acesso a ferramentas, mas faremos uma mudan√ßa, que √© adicionar uma simples ferramenta <code>human_assistance</code>. Esta ferramenta utiliza <code>interrupt</code> para receber informa√ß√µes de um ser humano.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro carregamos os valores das chaves API.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">os</span>',
      '<span class="kn">import</span> <span class="nn">dotenv</span>',
      ' ',
      '<span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>',
      ' ',
      '<span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>',
      '<span class="n">TAVILY_API_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"TAVILY_LANGGRAPH_API_KEY"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>












      
      <section class="section-block-markdown-cell">
      <p>Criamos o grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>',
      '<span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>',
      ' ',
      ' ',
      '<span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
      '    <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>',
      ' ',
      '<span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>

















      
      <section class="section-block-markdown-cell">
      <p>Definimos a <code>ferramenta</code> de busca</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">langchain_community.utilities.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchAPIWrapper</span>',
      '<span class="kn">from</span> <span class="nn">langchain_community.tools.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchResults</span>',
      ' ',
      '<span class="n">wrapper</span> <span class="o">=</span> <span class="n">TavilySearchAPIWrapper</span><span class="p">(</span><span class="n">tavily_api_key</span><span class="o">=</span><span class="n">TAVILY_API_KEY</span><span class="p">)</span>',
      '<span class="n">search_tool</span> <span class="o">=</span> <span class="n">TavilySearchResults</span><span class="p">(</span><span class="n">api_wrapper</span><span class="o">=</span><span class="n">wrapper</span><span class="p">,</span> <span class="n">max_results</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>










      
      <section class="section-block-markdown-cell">
      <p>Agora criamos a <code>tool</code> de ajuda humana</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">langgraph.types</span> <span class="kn">import</span> <span class="n">Command</span><span class="p">,</span> <span class="n">interrupt</span>',
      '<span class="kn">from</span> <span class="nn">langchain_core.tools</span> <span class="kn">import</span> <span class="n">tool</span>',
      ' ',
      '<span class="nd">@tool</span>',
      '<span class="k">def</span> <span class="nf">human_assistance</span><span class="p">(</span><span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">"""</span>',
      '<span class="sd">    Request assistance from a human expert. Use this tool ONLY ONCE per conversation.</span>',
      '<span class="sd">    After receiving the expert\'s response, you should provide an elaborated response to the user based on the information received</span>',
      '<span class="sd">    based on the information received, without calling this tool again.</span>',
      ' ',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        query: The query to ask the human expert.</span>',
      ' ',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        The response from the human expert.</span>',
      '<span class="sd">    """</span>',
      '    <span class="n">human_response</span> <span class="o">=</span> <span class="n">interrupt</span><span class="p">({</span><span class="s2">"query"</span><span class="p">:</span> <span class="n">query</span><span class="p">})</span>',
      '    <span class="k">return</span> <span class="n">human_response</span><span class="p">[</span><span class="s2">"data"</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>























      
      <section class="section-block-markdown-cell">
      <p><code>LangGraph</code> obt√©m informa√ß√µes das ferramentas atrav√©s da documenta√ß√£o da ferramenta, ou seja, o <code>docstring</code> da fun√ß√£o. Portanto, √© muito importante gerar um bom <code>docstring</code> para a ferramenta.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos uma lista de <code>tools</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tools_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">search_tool</span><span class="p">,</span> <span class="n">human_assistance</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>A seguir, o <code>LLM</code> com as <code>bind_tools</code> e adicionamos ao grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>',
          '<span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>',
          '<span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>',
          '',
          '<span class="c1"># Create the LLM</span>',
          '<span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>',
          '<span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>',
          '<span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>',
          '    <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>',
          '    <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>',
          '    <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>',
          '    <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
          '    <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="c1"># Create the chat model</span>',
          '<span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>',
          '',
          '<span class="c1"># Modification: tell the LLM which tools it can call</span>',
          '<span class="n">llm_with_tools</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">bind_tools</span><span class="p">(</span><span class="n">tools_list</span><span class="p">)</span>',
          '',
          '<span class="c1"># Define the chatbot function</span>',
          '<span class="k">def</span> <span class="nf">chatbot_function</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>',
          '    <span class="n">message</span> <span class="o">=</span> <span class="n">llm_with_tools</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])</span>',
          '    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">tool_calls</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span>',
          '    <span class="k">return</span> <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">message</span><span class="p">]}</span>',
          '',
          '<span class="c1"># Add the chatbot node</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chatbot_function</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x10764b380&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se voc√™ reparar, mudamos a forma de definir a fun√ß√£o <code>chatbot_function</code>, pois agora ela precisa lidar com a interrup√ß√£o.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Adicionamos a <code>tool_node</code> ao grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">langgraph.prebuilt</span> <span class="kn">import</span> <span class="n">ToolNode</span><span class="p">,</span> <span class="n">tools_condition</span>',
          '',
          '<span class="n">tool_node</span> <span class="o">=</span> <span class="n">ToolNode</span><span class="p">(</span><span class="n">tools</span><span class="o">=</span><span class="n">tools_list</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="n">tool_node</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_conditional_edges</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">tools_condition</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x10764b380&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Adicionamos o n√≥do de <code>START</code> ao gr√°fico</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x10764b380&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos um <code>checkpointer</code> <a href="https://langchain-ai.github.io/langgraph/reference/checkpoints/#langgraph.checkpoint.memory.MemorySaver" target="_blank" rel="nofollow noreferrer">MemorySaver</a>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">langgraph.checkpoint.memory</span> <span class="kn">import</span> <span class="n">MemorySaver</span>',
      ' ',
      '<span class="n">memory</span> <span class="o">=</span> <span class="n">MemorySaver</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>








      
      <section class="section-block-markdown-cell">
      <p>Compilamos o gr√°fico com o <code>checkpointer</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">checkpointer</span><span class="o">=</span><span class="n">memory</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>O representamos graficamente</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      
      <span class="k">try</span><span class="p">:</span>
          <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Error al visualizar el grafo: </span><span class="si">{opening_brace}</span><span class="n">e</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv32.webp" width="216" height="249" alt="image uv 33" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora vamos solicitar ao chatbot com uma pergunta que envolver√° a nova ferramenta <code>human_assistance</code>:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">user_input</span> <span class="o">=</span> <span class="s2">"I need some expert guidance for building an AI agent. Could you request assistance for me?"</span>',
          '<span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">}}</span>',
          '',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span>',
          '    <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">}]},</span>',
          '    <span class="n">config</span><span class="p">,</span>',
          '    <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="k">if</span> <span class="s2">"messages"</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'I need some expert guidance for building an AI agent. Could you request assistance for me?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  human_assistance (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: I need some expert guidance for building an AI agent. Could you provide me with some advice?',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se pode ver, o chatbot gerou uma chamada para a ferramenta de assist√™ncia humana.</p>
      <div class="highlight">
        <pre><span></span>Chamadas de Ferramentas:human_assistance (0)ID da Chamada: 0Argumentos:Eu preciso de algumas orienta√ß√µes de especialistas para construir um agente de IA. Voc√™ poderia fornecer conselhos sobre considera√ß√µes-chave, melhores pr√°ticas e armadilhas potenciais a serem evitadas?```</pre>
        <pre>Mas tarde a execu√ß√£o foi interrompida. Vamos verificar o estado do grafo.</pre>
      </div>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">snapshot</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">get_state</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>',
          '<span class="n">snapshot</span><span class="o">.</span><span class="n">next</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'tools\',)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que se deteveu no n√≥ de <code>tools</code>. Analisamos como se definiu a ferramenta <code>human_assistance</code>.</p>
      <div class="highlight">
        <pre><span></span><span class="kn">from</span> <span class="nn">langgraph.types</span> <span class="kn">import</span> <span class="n">Command</span><span class="p">,</span> <span class="n">interruptfrom</span> <span class="n">langchain_core</span><span class="o">.</span><span class="n">tools</span> <span class="kn">import</span> <span class="nn">tool</span></pre>
        <pre><span class="nd">@tooldef</span> <span class="n">assist√™ncia_humana</span><span class="p">(</span><span class="n">consulta</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span><span class="s2">"""Solicite assist√™ncia de um especialista humano. Use esta ferramenta APENAS UMA VEZ por conversa.Claro, entendi. Vou traduzir o texto markdown para o portugu√™s, mantendo a estrutura e estilo originais, sem modificar enlaces, imagens, c√≥digos de programa√ß√£o ou comandos de terminal. Aguardo o texto que voc√™ deseja traduzir.com base nas informa√ß√µes recebidas, sem chamar esta ferramenta novamente.</span></pre>
        <pre><span class="s2">Argumentos:A consulta para perguntar ao especialista humano.</span></pre>
        <pre><span class="s2">Retorna:A resposta do especialista humano.""""""```markdown</span></pre>
        <pre><span class="s2">human_response = interromper({opening_brace}"consulta": consulta{closing_brace})</span></pre>
        <pre><span class="s2">```return human_response["data"]```</span></pre>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Chamando a ferramenta <code>interrupt</code>, a execu√ß√£o ser√° interrompida, semelhante √† fun√ß√£o do Python <code>input()</code>.
      O progresso √© mantido com base em nossa escolha de <a href="https://langchain-ai.github.io/langgraph/concepts/persistence/#checkpointer-libraries" target="_blank" rel="nofollow noreferrer">checkpointer</a>. Ou seja, a escolha de onde o estado do grafo √© salvo. Portanto, se estamos persistindo (salvando o estado do grafo) com um banco de dados como <code>SQLite</code>, <code>Postgres</code>, etc, podemos retomar a execu√ß√£o a qualquer momento, desde que o banco de dados esteja ativo.
      Aqui estamos persistindo (salvando o estado do grafo) com o ponteiro de verifica√ß√£o na mem√≥ria RAM, portanto podemos retomar a qualquer momento enquanto nosso kernel Python estiver em execu√ß√£o. No meu caso, enquanto n√£o reiniciar o kernel do meu Jupyter Notebook.
      Para retomar a execu√ß√£o, passamos um objeto <a href="https://langchain-ai.github.io/langgraph/concepts/human_in_the_loop/#the-command-primitive" target="_blank" rel="nofollow noreferrer">Command</a> que cont√©m os dados esperados pela ferramenta. O formato desses dados pode ser personalizado de acordo com nossas necessidades. Aqui, apenas precisamos de um dicion√°rio com uma chave <code>data</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">human_response</span> <span class="o">=</span> <span class="p">(</span>',
          '    <span class="s2">"We, the experts are here to help! We\'d recommend you check out LangGraph to build your agent."</span>',
          '    <span class="s2">"It\'s much more reliable and extensible than simple autonomous agents."</span>',
          '<span class="p">)</span>',
          '',
          '<span class="n">human_command</span> <span class="o">=</span> <span class="n">Command</span><span class="p">(</span><span class="n">resume</span><span class="o">=</span><span class="p">{</span><span class="s2">"data"</span><span class="p">:</span> <span class="n">human_response</span><span class="p">})</span>',
          '',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span><span class="n">human_command</span><span class="p">,</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="k">if</span> <span class="s2">"messages"</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  human_assistance (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: I need some expert guidance for building an AI agent. Could you provide me with some advice?',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: human_assistance',
          'We, the experts are here to help! We\'d recommend you check out LangGraph to build your agent.It\'s much more reliable and extensible than simple autonomous agents.',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'The experts recommend checking out LangGraph for building your AI agent. It\'s known for being more reliable and extensible compared to simple autonomous agents.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, o chatbot esperou que um humano fornecesse a resposta e, em seguida, gerou uma resposta baseada nas informa√ß√µes recebidas. Pedimos ajuda sobre um especialista sobre como criar agentes, o humano disse que o melhor √© usar LangGraph, e o chatbot gerou uma resposta com base nessas informa√ß√µes.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mas ainda tem a possibilidade de realizar pesquisas na web. Ent√£o, agora vamos pedir as √∫ltimas not√≠cias sobre LangGraph.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">user_input</span> <span class="o">=</span> <span class="s2">"What\'s the latest news about LangGraph?"</span>',
          '',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span>',
          '    <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">}]},</span>',
          '    <span class="n">config</span><span class="p">,</span>',
          '    <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="k">if</span> <span class="s2">"messages"</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'What\'s the latest news about LangGraph?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: latest news LangGraph',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangChain - Changelog", "url": "https://changelog.langchain.com/", "content": "LangGraph `interrupt`: Simplifying human-in-the-loop agents --------------------------------------------------- Our latest feature in LangGraph, interrupt , makes building human-in-the-loop workflows easier. Agents aren‚Äôt perfect, so keeping humans ‚Äúin the loop‚Äù... December 16, 2024 [...] LangGraph üîÅ Modify graph state from tools in LangGraph --------------------------------------------- LangGraph\'s latest update gives you greater control over your agents by enabling tools to directly update the graph state. This is a game-changer for use... December 18, 2024 [...] LangGraph Platform Custom authentication &amp; access control for LangGraph Platform ------------------------------------------------------------- Today, we\'re thrilled to announce Custom Authentication and Resource-Level Access Control for Python deployments in LangGraph Cloud and self-hosted... December 20, 2024", "score": 0.78650844}, {"title": "LangGraph 0.3 Release: Prebuilt Agents - LangChain Blog", "url": "https://blog.langchain.dev/langgraph-0-3-release-prebuilt-agents/", "content": "LangGraph 0.3 Release: Prebuilt Agents\n2 min read Feb 27, 2025\nBy Nuno Campos and Vadym Barda\nOver the past year, we‚Äôve invested heavily in making LangGraph the go-to framework for building AI agents. With companies like Replit, Klarna, LinkedIn and Uber choosing to build on top of LangGraph, we have more conviction than ever that we are on the right path. [...] Up to this point, we‚Äôve had one higher level abstraction and it‚Äôs lived in the main langgraph package. It was create_react_agent, a wrapper for creating a simple tool calling agent. Today, we are splitting that out of langgraph as part of a 0.3 release, and moving it into langgraph-prebuilt.\nWe are also introducing a new set of prebuilt agents built on top of LangGraph, in both Python and JavaScript.\nOver the past three weeks, we‚Äôve already released a few of these: [...] Published Time: 2025-02-27T15:09:15.000Z\nLangGraph 0.3 Release: Prebuilt Agents\nSkip to content\n\n\nCase Studies\nIn the Loop\nLangChain\nDocs\nChangelog\n\nSign in Subscribe", "score": 0.72348577}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: latest news about LangGraph',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangChain - Changelog", "url": "https://changelog.langchain.com/", "content": "LangGraph üîÅ Modify graph state from tools in LangGraph --------------------------------------------- LangGraph\'s latest update gives you greater control over your agents by enabling tools to directly update the graph state. This is a game-changer for use... December 18, 2024 [...] LangGraph `interrupt`: Simplifying human-in-the-loop agents --------------------------------------------------- Our latest feature in LangGraph, interrupt , makes building human-in-the-loop workflows easier. Agents aren‚Äôt perfect, so keeping humans ‚Äúin the loop‚Äù... December 16, 2024 [...] LangGraph Platform Custom authentication &amp; access control for LangGraph Platform ------------------------------------------------------------- Today, we\'re thrilled to announce Custom Authentication and Resource-Level Access Control for Python deployments in LangGraph Cloud and self-hosted... December 20, 2024", "score": 0.79732054}, {"title": "LangGraph 0.3 Release: Prebuilt Agents - LangChain Blog", "url": "https://blog.langchain.dev/langgraph-0-3-release-prebuilt-agents/", "content": "LangGraph 0.3 Release: Prebuilt Agents\n2 min read Feb 27, 2025\nBy Nuno Campos and Vadym Barda\nOver the past year, we‚Äôve invested heavily in making LangGraph the go-to framework for building AI agents. With companies like Replit, Klarna, LinkedIn and Uber choosing to build on top of LangGraph, we have more conviction than ever that we are on the right path. [...] Up to this point, we‚Äôve had one higher level abstraction and it‚Äôs lived in the main langgraph package. It was create_react_agent, a wrapper for creating a simple tool calling agent. Today, we are splitting that out of langgraph as part of a 0.3 release, and moving it into langgraph-prebuilt.\nWe are also introducing a new set of prebuilt agents built on top of LangGraph, in both Python and JavaScript.\nOver the past three weeks, we‚Äôve already released a few of these: [...] Published Time: 2025-02-27T15:09:15.000Z\nLangGraph 0.3 Release: Prebuilt Agents\nSkip to content\n\n\nCase Studies\nIn the Loop\nLangChain\nDocs\nChangelog\n\nSign in Subscribe", "score": 0.7552947}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'The latest news about LangGraph includes several updates and releases. Firstly, the \'interrupt\' feature has been added, which simplifies creating human-in-the-loop workflows, essential for maintaining oversight of AI agents. Secondly, an update allows tools to modify the graph state directly, providing more control over the agents. Lastly, custom authentication and resource-level access control have been implemented for Python deployments in LangGraph Cloud and self-hosted environments. In addition, LangGraph released version 0.3, which introduces prebuilt agents in both Python and JavaScript, aimed at making it even easier to develop AI agents.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ele buscou as √∫ltimas not√≠cias sobre LangGraph e gerou uma resposta baseada nas informa√ß√µes recebidas.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos escrever tudo junto para que seja mais compreens√≠vel</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>',
          '<span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>',
          '<span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>',
          '<span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langchain_community.utilities.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchAPIWrapper</span>',
          '<span class="kn">from</span> <span class="nn">langchain_community.tools.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchResults</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">ToolMessage</span>',
          '<span class="kn">from</span> <span class="nn">langgraph.prebuilt</span> <span class="kn">import</span> <span class="n">ToolNode</span><span class="p">,</span> <span class="n">tools_condition</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langgraph.types</span> <span class="kn">import</span> <span class="n">Command</span><span class="p">,</span> <span class="n">interrupt</span>',
          '<span class="kn">from</span> <span class="nn">langchain_core.tools</span> <span class="kn">import</span> <span class="n">tool</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langgraph.checkpoint.memory</span> <span class="kn">import</span> <span class="n">MemorySaver</span>',
          '',
          '<span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>',
          '<span class="kn">import</span> <span class="nn">json</span>',
          '',
          '<span class="kn">import</span> <span class="nn">os</span>',
          '<span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>',
          '',
          '<span class="kn">import</span> <span class="nn">dotenv</span>',
          '<span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>',
          '<span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>',
          '<span class="n">TAVILY_API_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"TAVILY_LANGGRAPH_API_KEY"</span><span class="p">)</span>',
          '',
          '<span class="c1"># State</span>',
          '<span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
          '    <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>',
          '',
          '<span class="c1"># Tools</span>',
          '<span class="n">wrapper</span> <span class="o">=</span> <span class="n">TavilySearchAPIWrapper</span><span class="p">(</span><span class="n">tavily_api_key</span><span class="o">=</span><span class="n">TAVILY_API_KEY</span><span class="p">)</span>',
          '<span class="n">tool_search</span> <span class="o">=</span> <span class="n">TavilySearchResults</span><span class="p">(</span><span class="n">api_wrapper</span><span class="o">=</span><span class="n">wrapper</span><span class="p">,</span> <span class="n">max_results</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>',
          '',
          '<span class="nd">@tool</span>',
          '<span class="k">def</span> <span class="nf">human_assistance</span><span class="p">(</span><span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>',
          '<span class="w">    </span><span class="sd">"""</span>',
          '<span class="sd">    Request assistance from a human expert. Use this tool ONLY ONCE per conversation.</span>',
          '<span class="sd">    After receiving the expert\'s response, you should provide an elaborated response to the user based on the information received</span>',
          '<span class="sd">    based on the information received, without calling this tool again.</span>',
          '',
          '<span class="sd">    Args:</span>',
          '<span class="sd">        query: The query to ask the human expert.</span>',
          '',
          '<span class="sd">    Returns:</span>',
          '<span class="sd">        The response from the human expert.</span>',
          '<span class="sd">    """</span>',
          '    <span class="n">human_response</span> <span class="o">=</span> <span class="n">interrupt</span><span class="p">({</span><span class="s2">"query"</span><span class="p">:</span> <span class="n">query</span><span class="p">})</span>',
          '    <span class="k">return</span> <span class="n">human_response</span><span class="p">[</span><span class="s2">"data"</span><span class="p">]</span>',
          '',
          '<span class="n">tools_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">tool_search</span><span class="p">,</span> <span class="n">human_assistance</span><span class="p">]</span>',
          '',
          '<span class="c1"># Create the LLM model</span>',
          '<span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>',
          '<span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>',
          '<span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>',
          '    <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>',
          '    <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>',
          '    <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>',
          '    <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
          '    <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="c1"># Create the chat model</span>',
          '<span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>',
          '<span class="c1"># Create the LLM with tools</span>',
          '<span class="n">llm_with_tools</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">bind_tools</span><span class="p">(</span><span class="n">tools_list</span><span class="p">)</span>',
          '',
          '<span class="c1"># Tool node</span>',
          '<span class="n">tool_node</span> <span class="o">=</span> <span class="n">ToolNode</span><span class="p">(</span><span class="n">tools</span><span class="o">=</span><span class="n">tools_list</span><span class="p">)</span>',
          '',
          '<span class="c1"># Functions</span>',
          '<span class="k">def</span> <span class="nf">chatbot_function</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>',
          '    <span class="n">message</span> <span class="o">=</span> <span class="n">llm_with_tools</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])</span>',
          '    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">tool_calls</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span>',
          '    <span class="k">return</span> <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">message</span><span class="p">]}</span>',
          '',
          '<span class="c1"># Start to build the graph</span>',
          '<span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>',
          '',
          '<span class="c1"># Add nodes to the graph</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chatbot_function</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="n">tool_node</span><span class="p">)</span>',
          '',
          '<span class="c1"># Add edges</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_conditional_edges</span><span class="p">(</span> <span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">tools_condition</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
          '',
          '<span class="c1"># Compile the graph</span>',
          '<span class="n">memory</span> <span class="o">=</span> <span class="n">MemorySaver</span><span class="p">()</span>',
          '<span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">checkpointer</span><span class="o">=</span><span class="n">memory</span><span class="p">)</span>',
          '',
          '<span class="c1"># Display the graph</span>',
          '<span class="k">try</span><span class="p">:</span>',
          '    <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>',
          '<span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Error al visualizar el grafo: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Error al visualizar el grafo: Failed to reach https://mermaid.ink/ API while trying to render your graph after 1 retries. To resolve this issue:',
          '1. Check your internet connection and try again',
          '2. Try with higher retry settings: `draw_mermaid_png(..., max_retries=5, retry_delay=2.0)`',
          '3. Use the Pyppeteer rendering method which will render your graph locally in a browser: `draw_mermaid_png(..., draw_method=MermaidDrawMethod.PYPPETEER)`',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pedimos novamente ajuda ao chatbot para criar agentes. Solicitamos que ele busque ajuda.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">user_input</span> <span class="o">=</span> <span class="s2">"I need some expert guidance for building an AI agent. Could you request assistance for me?"</span>',
          '<span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">}}</span>',
          '',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span>',
          '    <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">}]},</span>',
          '    <span class="n">config</span><span class="p">,</span>',
          '    <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="k">if</span> <span class="s2">"messages"</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'I need some expert guidance for building an AI agent. Could you request assistance for me?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  human_assistance (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: I need expert guidance for building an AI agent.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos em qual estado ficou o grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">snapshot</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">get_state</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>',
          '<span class="n">snapshot</span><span class="o">.</span><span class="n">next</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'tools\',)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Damos a voc√™ a assist√™ncia que est√° pedindo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">human_response</span> <span class="o">=</span> <span class="p">(</span>',
          '    <span class="s2">"We, the experts are here to help! We\'d recommend you check out LangGraph to build your agent."</span>',
          '    <span class="s2">"It\'s much more reliable and extensible than simple autonomous agents."</span>',
          '<span class="p">)</span>',
          '',
          '<span class="n">human_command</span> <span class="o">=</span> <span class="n">Command</span><span class="p">(</span><span class="n">resume</span><span class="o">=</span><span class="p">{</span><span class="s2">"data"</span><span class="p">:</span> <span class="n">human_response</span><span class="p">})</span>',
          '',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span><span class="n">human_command</span><span class="p">,</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="k">if</span> <span class="s2">"messages"</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  human_assistance (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: I need expert guidance for building an AI agent.',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: human_assistance',
          'We, the experts are here to help! We\'d recommend you check out LangGraph to build your agent.It\'s much more reliable and extensible than simple autonomous agents.',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  human_assistance (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: I need some expert guidance for building an AI agent. Could you recommend a platform and any tips for getting started?',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>E por √∫ltimo, pedimos que procure na internet as √∫ltimas not√≠cias sobre LangGraph</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">user_input</span> <span class="o">=</span> <span class="s2">"What\'s the latest news about LangGraph?"</span>',
          '',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span>',
          '    <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">}]},</span>',
          '    <span class="n">config</span><span class="p">,</span>',
          '    <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="k">if</span> <span class="s2">"messages"</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'What\'s the latest news about LangGraph?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: latest news about LangGraph',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangChain Blog", "url": "https://blog.langchain.dev/", "content": "LangSmith Incident on May 1, 2025\n\nRequests to the US LangSmith API from both the web application and SDKs experienced an elevated error rate for 28 minutes on May 1, 2025\n\nFeatured\n\nHow Klarna\'s AI assistant redefined customer support at scale for 85 million active users\n\nIs LangGraph Used In Production?\n\nIntroducing Interrupt: The AI Agent Conference by LangChain\n\nTop 5 LangGraph Agents in Production 2024 [...] See how Harmonic uses LangSmith and LangGraph products to streamline venture investing workflows.\n\nWhy Definely chose LangGraph for building their multi-agent AI system\n\nSee how Definely used LangGraph to design a multi-agent system to help lawyers speed up their workflows.\n\nIntroducing End-to-End OpenTelemetry Support in LangSmith\n\nLangSmith now provides end-to-end OpenTelemetry (OTel) support for applications built on LangChain and/or LangGraph.", "score": 0.6811549}, {"title": "LangGraph + UiPath: advancing agentic automation together", "url": "https://www.uipath.com/blog/product-and-updates/langgraph-uipath-advancing-agentic-automation-together", "content": "Raghu Malpani, Chief Technology Officer at UiPath, emphasizes the significance of these announcements for the UiPath developer community:\n\nOur collaboration with LangChain on LangSmith and Agent Protocol advances interoperability across agent frameworks. Further, by enabling the deployment of LangGraph agents into UiPath\'s enterprise-grade infrastructure, we are expanding the capabilities of our platform and opening up more possibilities for our developer community. [...] Today, we‚Äôre excited to announce:\n\nNative support for LangSmith observability in the UiPath LLM Gateway via OpenTelemetry (OTLP), enabling developers to monitor, debug, and evaluate LLM-powered features in UiPath using LangSmith either in LangChain‚Äôs cloud or self-hosted on-premises. This feature is currently in private preview.", "score": 0.6557114}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: latest news about LangGraph',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangChain Blog", "url": "https://blog.langchain.dev/", "content": "LangSmith Incident on May 1, 2025\n\nRequests to the US LangSmith API from both the web application and SDKs experienced an elevated error rate for 28 minutes on May 1, 2025\n\nFeatured\n\nHow Klarna\'s AI assistant redefined customer support at scale for 85 million active users\n\nIs LangGraph Used In Production?\n\nIntroducing Interrupt: The AI Agent Conference by LangChain\n\nTop 5 LangGraph Agents in Production 2024 [...] See how Harmonic uses LangSmith and LangGraph products to streamline venture investing workflows.\n\nWhy Definely chose LangGraph for building their multi-agent AI system\n\nSee how Definely used LangGraph to design a multi-agent system to help lawyers speed up their workflows.\n\nIntroducing End-to-End OpenTelemetry Support in LangSmith\n\nLangSmith now provides end-to-end OpenTelemetry (OTel) support for applications built on LangChain and/or LangGraph.", "score": 0.6811549}, {"title": "LangGraph + UiPath: advancing agentic automation together", "url": "https://www.uipath.com/blog/product-and-updates/langgraph-uipath-advancing-agentic-automation-together", "content": "Raghu Malpani, Chief Technology Officer at UiPath, emphasizes the significance of these announcements for the UiPath developer community:\n\nOur collaboration with LangChain on LangSmith and Agent Protocol advances interoperability across agent frameworks. Further, by enabling the deployment of LangGraph agents into UiPath\'s enterprise-grade infrastructure, we are expanding the capabilities of our platform and opening up more possibilities for our developer community. [...] Today, we‚Äôre excited to announce:\n\nNative support for LangSmith observability in the UiPath LLM Gateway via OpenTelemetry (OTLP), enabling developers to monitor, debug, and evaluate LLM-powered features in UiPath using LangSmith either in LangChain‚Äôs cloud or self-hosted on-premises. This feature is currently in private preview.", "score": 0.6557114}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: latest news about LangGraph',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangChain Blog", "url": "https://blog.langchain.dev/", "content": "LangSmith Incident on May 1, 2025\n\nRequests to the US LangSmith API from both the web application and SDKs experienced an elevated error rate for 28 minutes on May 1, 2025\n\nFeatured\n\nHow Klarna\'s AI assistant redefined customer support at scale for 85 million active users\n\nIs LangGraph Used In Production?\n\nIntroducing Interrupt: The AI Agent Conference by LangChain\n\nTop 5 LangGraph Agents in Production 2024 [...] See how Harmonic uses LangSmith and LangGraph products to streamline venture investing workflows.\n\nWhy Definely chose LangGraph for building their multi-agent AI system\n\nSee how Definely used LangGraph to design a multi-agent system to help lawyers speed up their workflows.\n\nIntroducing End-to-End OpenTelemetry Support in LangSmith\n\nLangSmith now provides end-to-end OpenTelemetry (OTel) support for applications built on LangChain and/or LangGraph.", "score": 0.6811549}, {"title": "LangGraph + UiPath: advancing agentic automation together", "url": "https://www.uipath.com/blog/product-and-updates/langgraph-uipath-advancing-agentic-automation-together", "content": "Raghu Malpani, Chief Technology Officer at UiPath, emphasizes the significance of these announcements for the UiPath developer community:\n\nOur collaboration with LangChain on LangSmith and Agent Protocol advances interoperability across agent frameworks. Further, by enabling the deployment of LangGraph agents into UiPath\'s enterprise-grade infrastructure, we are expanding the capabilities of our platform and opening up more possibilities for our developer community. [...] Today, we‚Äôre excited to announce:\n\nNative support for LangSmith observability in the UiPath LLM Gateway via OpenTelemetry (OTLP), enabling developers to monitor, debug, and evaluate LLM-powered features in UiPath using LangSmith either in LangChain‚Äôs cloud or self-hosted on-premises. This feature is currently in private preview.", "score": 0.6557114}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: latest news about LangGraph',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangChain Blog", "url": "https://blog.langchain.dev/", "content": "LangSmith Incident on May 1, 2025\n\nRequests to the US LangSmith API from both the web application and SDKs experienced an elevated error rate for 28 minutes on May 1, 2025\n\nFeatured\n\nHow Klarna\'s AI assistant redefined customer support at scale for 85 million active users\n\nIs LangGraph Used In Production?\n\nIntroducing Interrupt: The AI Agent Conference by LangChain\n\nTop 5 LangGraph Agents in Production 2024 [...] See how Harmonic uses LangSmith and LangGraph products to streamline venture investing workflows.\n\nWhy Definely chose LangGraph for building their multi-agent AI system\n\nSee how Definely used LangGraph to design a multi-agent system to help lawyers speed up their workflows.\n\nIntroducing End-to-End OpenTelemetry Support in LangSmith\n\nLangSmith now provides end-to-end OpenTelemetry (OTel) support for applications built on LangChain and/or LangGraph.", "score": 0.6811549}, {"title": "LangGraph + UiPath: advancing agentic automation together", "url": "https://www.uipath.com/blog/product-and-updates/langgraph-uipath-advancing-agentic-automation-together", "content": "Raghu Malpani, Chief Technology Officer at UiPath, emphasizes the significance of these announcements for the UiPath developer community:\n\nOur collaboration with LangChain on LangSmith and Agent Protocol advances interoperability across agent frameworks. Further, by enabling the deployment of LangGraph agents into UiPath\'s enterprise-grade infrastructure, we are expanding the capabilities of our platform and opening up more possibilities for our developer community. [...] Today, we‚Äôre excited to announce:\n\nNative support for LangSmith observability in the UiPath LLM Gateway via OpenTelemetry (OTLP), enabling developers to monitor, debug, and evaluate LLM-powered features in UiPath using LangSmith either in LangChain‚Äôs cloud or self-hosted on-premises. This feature is currently in private preview.", "score": 0.6557114}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: latest news about LangGraph',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangChain Blog", "url": "https://blog.langchain.dev/", "content": "LangSmith Incident on May 1, 2025\n\nRequests to the US LangSmith API from both the web application and SDKs experienced an elevated error rate for 28 minutes on May 1, 2025\n\nFeatured\n\nHow Klarna\'s AI assistant redefined customer support at scale for 85 million active users\n\nIs LangGraph Used In Production?\n\nIntroducing Interrupt: The AI Agent Conference by LangChain\n\nTop 5 LangGraph Agents in Production 2024 [...] See how Harmonic uses LangSmith and LangGraph products to streamline venture investing workflows.\n\nWhy Definely chose LangGraph for building their multi-agent AI system\n\nSee how Definely used LangGraph to design a multi-agent system to help lawyers speed up their workflows.\n\nIntroducing End-to-End OpenTelemetry Support in LangSmith\n\nLangSmith now provides end-to-end OpenTelemetry (OTel) support for applications built on LangChain and/or LangGraph.", "score": 0.6811549}, {"title": "LangGraph + UiPath: advancing agentic automation together", "url": "https://www.uipath.com/blog/product-and-updates/langgraph-uipath-advancing-agentic-automation-together", "content": "Raghu Malpani, Chief Technology Officer at UiPath, emphasizes the significance of these announcements for the UiPath developer community:\n\nOur collaboration with LangChain on LangSmith and Agent Protocol advances interoperability across agent frameworks. Further, by enabling the deployment of LangGraph agents into UiPath\'s enterprise-grade infrastructure, we are expanding the capabilities of our platform and opening up more possibilities for our developer community. [...] Today, we‚Äôre excited to announce:\n\nNative support for LangSmith observability in the UiPath LLM Gateway via OpenTelemetry (OTLP), enabling developers to monitor, debug, and evaluate LLM-powered features in UiPath using LangSmith either in LangChain‚Äôs cloud or self-hosted on-premises. This feature is currently in private preview.", "score": 0.6557114}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: latest news about LangGraph',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangChain Blog", "url": "https://blog.langchain.dev/", "content": "LangSmith Incident on May 1, 2025\n\nRequests to the US LangSmith API from both the web application and SDKs experienced an elevated error rate for 28 minutes on May 1, 2025\n\nFeatured\n\nHow Klarna\'s AI assistant redefined customer support at scale for 85 million active users\n\nIs LangGraph Used In Production?\n\nIntroducing Interrupt: The AI Agent Conference by LangChain\n\nTop 5 LangGraph Agents in Production 2024 [...] See how Harmonic uses LangSmith and LangGraph products to streamline venture investing workflows.\n\nWhy Definely chose LangGraph for building their multi-agent AI system\n\nSee how Definely used LangGraph to design a multi-agent system to help lawyers speed up their workflows.\n\nIntroducing End-to-End OpenTelemetry Support in LangSmith\n\nLangSmith now provides end-to-end OpenTelemetry (OTel) support for applications built on LangChain and/or LangGraph.", "score": 0.6811549}, {"title": "LangGraph + UiPath: advancing agentic automation together", "url": "https://www.uipath.com/blog/product-and-updates/langgraph-uipath-advancing-agentic-automation-together", "content": "Raghu Malpani, Chief Technology Officer at UiPath, emphasizes the significance of these announcements for the UiPath developer community:\n\nOur collaboration with LangChain on LangSmith and Agent Protocol advances interoperability across agent frameworks. Further, by enabling the deployment of LangGraph agents into UiPath\'s enterprise-grade infrastructure, we are expanding the capabilities of our platform and opening up more possibilities for our developer community. [...] Today, we‚Äôre excited to announce:\n\nNative support for LangSmith observability in the UiPath LLM Gateway via OpenTelemetry (OTLP), enabling developers to monitor, debug, and evaluate LLM-powered features in UiPath using LangSmith either in LangChain‚Äôs cloud or self-hosted on-premises. This feature is currently in private preview.", "score": 0.6557114}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: latest news about LangGraph',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangChain Blog", "url": "https://blog.langchain.dev/", "content": "LangSmith Incident on May 1, 2025\n\nRequests to the US LangSmith API from both the web application and SDKs experienced an elevated error rate for 28 minutes on May 1, 2025\n\nFeatured\n\nHow Klarna\'s AI assistant redefined customer support at scale for 85 million active users\n\nIs LangGraph Used In Production?\n\nIntroducing Interrupt: The AI Agent Conference by LangChain\n\nTop 5 LangGraph Agents in Production 2024 [...] See how Harmonic uses LangSmith and LangGraph products to streamline venture investing workflows.\n\nWhy Definely chose LangGraph for building their multi-agent AI system\n\nSee how Definely used LangGraph to design a multi-agent system to help lawyers speed up their workflows.\n\nIntroducing End-to-End OpenTelemetry Support in LangSmith\n\nLangSmith now provides end-to-end OpenTelemetry (OTel) support for applications built on LangChain and/or LangGraph.", "score": 0.6811549}, {"title": "LangGraph + UiPath: advancing agentic automation together", "url": "https://www.uipath.com/blog/product-and-updates/langgraph-uipath-advancing-agentic-automation-together", "content": "Raghu Malpani, Chief Technology Officer at UiPath, emphasizes the significance of these announcements for the UiPath developer community:\n\nOur collaboration with LangChain on LangSmith and Agent Protocol advances interoperability across agent frameworks. Further, by enabling the deployment of LangGraph agents into UiPath\'s enterprise-grade infrastructure, we are expanding the capabilities of our platform and opening up more possibilities for our developer community. [...] Today, we‚Äôre excited to announce:\n\nNative support for LangSmith observability in the UiPath LLM Gateway via OpenTelemetry (OTLP), enabling developers to monitor, debug, and evaluate LLM-powered features in UiPath using LangSmith either in LangChain‚Äôs cloud or self-hosted on-premises. This feature is currently in private preview.", "score": 0.6557114}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: latest news about LangGraph',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangChain Blog", "url": "https://blog.langchain.dev/", "content": "LangSmith Incident on May 1, 2025\n\nRequests to the US LangSmith API from both the web application and SDKs experienced an elevated error rate for 28 minutes on May 1, 2025\n\nFeatured\n\nHow Klarna\'s AI assistant redefined customer support at scale for 85 million active users\n\nIs LangGraph Used In Production?\n\nIntroducing Interrupt: The AI Agent Conference by LangChain\n\nTop 5 LangGraph Agents in Production 2024 [...] See how Harmonic uses LangSmith and LangGraph products to streamline venture investing workflows.\n\nWhy Definely chose LangGraph for building their multi-agent AI system\n\nSee how Definely used LangGraph to design a multi-agent system to help lawyers speed up their workflows.\n\nIntroducing End-to-End OpenTelemetry Support in LangSmith\n\nLangSmith now provides end-to-end OpenTelemetry (OTel) support for applications built on LangChain and/or LangGraph.", "score": 0.6811549}, {"title": "LangGraph + UiPath: advancing agentic automation together", "url": "https://www.uipath.com/blog/product-and-updates/langgraph-uipath-advancing-agentic-automation-together", "content": "Raghu Malpani, Chief Technology Officer at UiPath, emphasizes the significance of these announcements for the UiPath developer community:\n\nOur collaboration with LangChain on LangSmith and Agent Protocol advances interoperability across agent frameworks. Further, by enabling the deployment of LangGraph agents into UiPath\'s enterprise-grade infrastructure, we are expanding the capabilities of our platform and opening up more possibilities for our developer community. [...] Today, we‚Äôre excited to announce:\n\nNative support for LangSmith observability in the UiPath LLM Gateway via OpenTelemetry (OTLP), enabling developers to monitor, debug, and evaluate LLM-powered features in UiPath using LangSmith either in LangChain‚Äôs cloud or self-hosted on-premises. This feature is currently in private preview.", "score": 0.6557114}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: Latest news about LangGraph',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangChain Blog", "url": "https://blog.langchain.dev/", "content": "LangSmith Incident on May 1, 2025\n\nRequests to the US LangSmith API from both the web application and SDKs experienced an elevated error rate for 28 minutes on May 1, 2025\n\nFeatured\n\nHow Klarna\'s AI assistant redefined customer support at scale for 85 million active users\n\nIs LangGraph Used In Production?\n\nIntroducing Interrupt: The AI Agent Conference by LangChain\n\nTop 5 LangGraph Agents in Production 2024 [...] See how Harmonic uses LangSmith and LangGraph products to streamline venture investing workflows.\n\nWhy Definely chose LangGraph for building their multi-agent AI system\n\nSee how Definely used LangGraph to design a multi-agent system to help lawyers speed up their workflows.\n\nIntroducing End-to-End OpenTelemetry Support in LangSmith\n\nLangSmith now provides end-to-end OpenTelemetry (OTel) support for applications built on LangChain and/or LangGraph.", "score": 0.67758125}, {"title": "LangGraph + UiPath: advancing agentic automation together", "url": "https://www.uipath.com/blog/product-and-updates/langgraph-uipath-advancing-agentic-automation-together", "content": "Raghu Malpani, Chief Technology Officer at UiPath, emphasizes the significance of these announcements for the UiPath developer community:\n\nOur collaboration with LangChain on LangSmith and Agent Protocol advances interoperability across agent frameworks. Further, by enabling the deployment of LangGraph agents into UiPath\'s enterprise-grade infrastructure, we are expanding the capabilities of our platform and opening up more possibilities for our developer community. [...] Today, we‚Äôre excited to announce:\n\nNative support for LangSmith observability in the UiPath LLM Gateway via OpenTelemetry (OTLP), enabling developers to monitor, debug, and evaluate LLM-powered features in UiPath using LangSmith either in LangChain‚Äôs cloud or self-hosted on-premises. This feature is currently in private preview.", "score": 0.6522641}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: latest news about LangGraph',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangGraph - LangChain", "url": "https://www.langchain.com/langgraph", "content": "‚ÄúAs Ally advances its exploration of Generative AI, our tech labs is excited by LangGraph, the new library from LangChain, which is central to our experiments", "score": 0.98559}, {"title": "Evaluating LangGraph Framework : Series 1 | by Jalaj Agrawal", "url": "https://medium.com/@jalajagr/evaluating-langgraph-as-a-multiagent-framework-a-10-dimensional-framework-series-1-c7203b7f4659", "content": ": LangGraph excels with its intuitive graph-based abstraction that allows new developers to build working multi-agent systems within hours.", "score": 0.98196}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'It looks like LangGraph has been generating some significant buzz in the AI community, especially for its capabilities in building multi-agent systems. Here are a few highlights from the latest news:',
          '1. **LangGraph in Production**: Companies like Klarna and Definely are already using LangGraph to build and optimize their AI systems. Klarna has leveraged LangGraph to enhance their customer support, and Definely has used it to design a multi-agent system to speed up legal workflows.',
          '2. **Integration with UiPath**: LangChain and UiPath have collaborated to advance agentic automation. This partnership includes native support for LangSmith observability in UiPath‚Äôs LLM Gateway via OpenTelemetry, which will allow developers to monitor, debug, and evaluate LLM-powered features more effectively.',
          '3. **Intuitive Design**: LangGraph is praised for its intuitive graph-based abstraction, which enables developers to build working multi-agent systems quickly, even if they are new to the field.',
          '4. **Community and Conferences**: LangChain is also hosting an AI Agent Conference called "Interrupt," which could be a great opportunity to learn more about the latest developments and best practices in building AI agents.',
          'If you\'re considering using LangGraph for your project, these resources and updates might provide valuable insights and support. Would you like more detailed information on any specific aspect of LangGraph?',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Mais">Mais<a class="anchor-link" href="#Mais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 158" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Aprova%C3%A7%C3%A3o-do-uso-de-ferramentas">Aprova√ß√£o do uso de ferramentas<a class="anchor-link" href="#Aprova%C3%A7%C3%A3o-do-uso-de-ferramentas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 159" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Nota: Vamos a fazer esta se√ß√£o usando Sonnet 3.7, pois na data da escrita deste post, √© o melhor modelo para uso com agentes, e √© o √∫nico que entende quando deve chamar as ferramentas e quando n√£o deve para este exemplo</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos inserir um <code>human in the loop</code> para aprovar o uso de ferramentas. Vamos criar um chatbot com v√°rias ferramentas para realizar opera√ß√µes matem√°ticas, para isso na hora de construir o grafo indicamos onde queremos inserir o <code>breakpoint</code> (<code>graph_builder.compile(interrupt_before=["tools"], checkpointer=memory)</code>)</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>
      <span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">SystemMessage</span><span class="p">,</span> <span class="n">HumanMessage</span><span class="p">,</span> <span class="n">AIMessage</span>
      <span class="kn">from</span> <span class="nn">langgraph.prebuilt</span> <span class="kn">import</span> <span class="n">ToolNode</span><span class="p">,</span> <span class="n">tools_condition</span>
      <span class="kn">from</span> <span class="nn">langgraph.checkpoint.memory</span> <span class="kn">import</span> <span class="n">MemorySaver</span>
      <span class="kn">from</span> <span class="nn">langchain_core.tools</span> <span class="kn">import</span> <span class="n">tool</span>
      <span class="kn">from</span> <span class="nn">langchain_anthropic</span> <span class="kn">import</span> <span class="n">ChatAnthropic</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="kn">import</span> <span class="nn">dotenv</span>
      
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">ANTHROPIC_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"ANTHROPIC_LANGGRAPH_API_KEY"</span><span class="p">)</span>
      
      <span class="n">memory</span> <span class="o">=</span> <span class="n">MemorySaver</span><span class="p">()</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>
      
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="c1"># Tools</span>
      <span class="nd">@tool</span>
      <span class="k">def</span> <span class="nf">multiply</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
      <span class="w">    </span><span class="sd">"""Multiply a and b.</span>
      
      <span class="sd">    Args:</span>
      <span class="sd">        a: first int</span>
      <span class="sd">        b: second int</span>
      
      <span class="sd">    Returns:</span>
      <span class="sd">        The product of a and b.</span>
      <span class="sd">    """</span>
          <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
      
      <span class="nd">@tool</span>
      <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
      <span class="w">    </span><span class="sd">"""Adds a and b.</span>
      
      <span class="sd">    Args:</span>
      <span class="sd">        a: first int</span>
      <span class="sd">        b: second int</span>
      
      <span class="sd">    Returns:</span>
      <span class="sd">        The sum of a and b.</span>
      <span class="sd">    """</span>
          <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
      
      <span class="nd">@tool</span>
      <span class="k">def</span> <span class="nf">subtract</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
      <span class="w">    </span><span class="sd">"""Subtract b from a.</span>
      
      <span class="sd">    Args:</span>
      <span class="sd">        a: first int</span>
      <span class="sd">        b: second int</span>
      
      <span class="sd">    Returns:</span>
      <span class="sd">        The difference between a and b.</span>
      <span class="sd">    """</span>
          <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span>
      
      <span class="nd">@tool</span>
      <span class="k">def</span> <span class="nf">divide</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
      <span class="w">    </span><span class="sd">"""Divide a by b.</span>
      
      <span class="sd">    Args:</span>
      <span class="sd">        a: first int</span>
      <span class="sd">        b: second int</span>
      
      <span class="sd">    Returns:</span>
      <span class="sd">        The quotient of a and b.</span>
      <span class="sd">    """</span>
          <span class="k">return</span> <span class="n">a</span> <span class="o">/</span> <span class="n">b</span>
      
      <span class="n">tools_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">multiply</span><span class="p">,</span> <span class="n">add</span><span class="p">,</span> <span class="n">subtract</span><span class="p">,</span> <span class="n">divide</span><span class="p">]</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatAnthropic</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="s2">"claude-3-7-sonnet-20250219"</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">ANTHROPIC_TOKEN</span><span class="p">)</span>
      <span class="n">llm_with_tools</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">bind_tools</span><span class="p">(</span><span class="n">tools_list</span><span class="p">)</span>
      
      <span class="c1"># Nodes</span>
      <span class="k">def</span> <span class="nf">chat_model_node</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="n">system_message</span> <span class="o">=</span> <span class="s2">"You are a helpful assistant that can use tools to answer questions. Once you have the result of a tool, provide a final answer without calling more tools."</span>
          <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">SystemMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">system_message</span><span class="p">)]</span> <span class="o">+</span> <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">llm_with_tools</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">messages</span><span class="p">)]{closing_brace}</span>
      
      <span class="c1"># Create graph builder</span>
      <span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chat_model_node</span><span class="p">)</span>
      <span class="n">tool_node</span> <span class="o">=</span> <span class="n">ToolNode</span><span class="p">(</span><span class="n">tools</span><span class="o">=</span><span class="n">tools_list</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="n">tool_node</span><span class="p">)</span>
      
      <span class="c1"># Connecto nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_conditional_edges</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">tools_condition</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">interrupt_before</span><span class="o">=</span><span class="p">[</span><span class="s2">"tools"</span><span class="p">],</span> <span class="n">checkpointer</span><span class="o">=</span><span class="n">memory</span><span class="p">)</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv33.webp" width="299" height="291" alt="image uv 34" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos no grafo, h√° um <code>interrupt</code> antes de usar as <code>tool</code>s. Isso significa que vai parar antes de us√°-las para pedir nossa permiss√£o.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Input</span>',
          '<span class="n">initial_input</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"Multiply 2 and 3"</span><span class="p">)}</span>',
          '',
          '<span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">}}</span>',
          '',
          '<span class="c1"># Run the graph until the first interruption</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span><span class="n">initial_input</span><span class="p">,</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"updates"</span><span class="p">):</span>',
          '    <span class="k">if</span> <span class="s1">\'chatbot_node\'</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">event</span><span class="p">[</span><span class="s1">\'chatbot_node\'</span><span class="p">][</span><span class="s1">\'messages\'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">())</span>',
          '    <span class="k">else</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          '[{\'text\': "I\'ll multiply 2 and 3 for you.", \'type\': \'text\'}, {\'id\': \'toolu_01QDuind1VBHWtvifELN9SPf\', \'input\': {\'a\': 2, \'b\': 3}, \'name\': \'multiply\', \'type\': \'tool_use\'}]',
          'Tool Calls:',
          '  multiply (toolu_01QDuind1VBHWtvifELN9SPf)',
          ' Call ID: toolu_01QDuind1VBHWtvifELN9SPf',
          '  Args:',
          '    a: 2',
          '    b: 3',
          'None',
          '{\'__interrupt__\': ()}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, o LLM sabe que tem que usar a ferramenta <code>multiply</code>, mas a execu√ß√£o √© interrompida, pois precisa esperar que um ser humano autorize o uso da ferramenta.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver o estado em que ficou o grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">state</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">get_state</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>',
          '<span class="n">state</span><span class="o">.</span><span class="n">next</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'tools\',)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, ficou no n√≥ de <code>tools</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos criar uma fun√ß√£o (n√£o no grafo, mas fora do grafo, para melhorar a experi√™ncia do usu√°rio e fazer com que ele entenda por que a execu√ß√£o p√°ra) que pe√ßa ao usu√°rio para aprovar o uso da ferramenta.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos um novo <code>thread_id</code> para que seja criado um novo estado.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Input</span>',
          '<span class="n">initial_input</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"Multiply 2 and 3"</span><span class="p">)}</span>',
          '',
          '<span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="s2">"2"</span><span class="p">}}</span>',
          '',
          '<span class="c1"># Run the graph until the first interruption</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span><span class="n">initial_input</span><span class="p">,</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"updates"</span><span class="p">):</span>',
          '    <span class="n">function_name</span> <span class="o">=</span> <span class="kc">None</span>',
          '    <span class="n">function_args</span> <span class="o">=</span> <span class="kc">None</span>',
          '',
          '    <span class="k">if</span> <span class="s1">\'chatbot_node\'</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">event</span><span class="p">[</span><span class="s1">\'chatbot_node\'</span><span class="p">][</span><span class="s1">\'messages\'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
          '            <span class="k">if</span> <span class="n">element</span><span class="p">[</span><span class="s1">\'type\'</span><span class="p">]</span> <span class="o">==</span> <span class="s1">\'text\'</span><span class="p">:</span>',
          '                <span class="nb">print</span><span class="p">(</span><span class="n">element</span><span class="p">[</span><span class="s1">\'text\'</span><span class="p">])</span>',
          '            <span class="k">elif</span> <span class="n">element</span><span class="p">[</span><span class="s1">\'type\'</span><span class="p">]</span> <span class="o">==</span> <span class="s1">\'tool_use\'</span><span class="p">:</span>',
          '                <span class="n">function_name</span> <span class="o">=</span> <span class="n">element</span><span class="p">[</span><span class="s1">\'name\'</span><span class="p">]</span>',
          '                <span class="n">function_args</span> <span class="o">=</span> <span class="n">element</span><span class="p">[</span><span class="s1">\'input\'</span><span class="p">]</span>',
          '                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"The LLM wants to use the tool </span><span class="si">{</span><span class="n">function_name</span><span class="si">}</span><span class="s2"> with the arguments </span><span class="si">{</span><span class="n">function_args</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    ',
          '    <span class="k">elif</span> <span class="s1">\'__interrupt__\'</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="k">pass</span>',
          '    ',
          '    <span class="k">else</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>',
          '',
          '<span class="n">question</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">"Do you approve the use of the tool </span><span class="si">{</span><span class="n">function_name</span><span class="si">}</span><span class="s2"> with the arguments </span><span class="si">{</span><span class="n">function_args</span><span class="si">}</span><span class="s2">? (y/n)"</span>',
          '<span class="n">user_approval</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="n">question</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">question</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">user_approval</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="k">if</span> <span class="n">user_approval</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="o">==</span> <span class="s1">\'y\'</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"User approved the use of the tool"</span><span class="p">)</span>',
          '    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"updates"</span><span class="p">):</span>',
          '        <span class="k">if</span> <span class="s1">\'chatbot_node\'</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '            <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">event</span><span class="p">[</span><span class="s1">\'chatbot_node\'</span><span class="p">][</span><span class="s1">\'messages\'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>',
          '                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>',
          '                    <span class="nb">print</span><span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>',
          '        ',
          '        <span class="k">elif</span> <span class="s1">\'tools\'</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '            <span class="n">result</span> <span class="o">=</span> <span class="n">event</span><span class="p">[</span><span class="s1">\'tools\'</span><span class="p">][</span><span class="s1">\'messages\'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">content</span>',
          '            <span class="n">tool_used</span> <span class="o">=</span> <span class="n">event</span><span class="p">[</span><span class="s1">\'tools\'</span><span class="p">][</span><span class="s1">\'messages\'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">name</span>',
          '            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"The result of the tool </span><span class="si">{</span><span class="n">tool_used</span><span class="si">}</span><span class="s2"> is </span><span class="si">{</span><span class="n">result</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '        ',
          '        <span class="k">else</span><span class="p">:</span>',
          '            <span class="nb">print</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'I\'ll multiply 2 and 3 for you.',
          'The LLM wants to use the tool multiply with the arguments {\'a\': 2, \'b\': 3}',
          'Do you approve the use of the tool None with the arguments None? (y/n): y',
          'User approved the use of the tool',
          'The result of the tool multiply is 6',
          'The result of multiplying 2 and 3 is 6.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que nos perguntou se aprovamos o uso da <code>tool</code> de multiplica√ß√£o, aprovamos e o grafo terminou a execu√ß√£o. Vendo o estado do grafo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">state</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">get_state</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>',
          '<span class="n">state</span><span class="o">.</span><span class="n">next</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '()',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que o pr√≥ximo estado do grafo est√° vazio, isso indica que a execu√ß√£o do grafo foi conclu√≠da.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Modifica%C3%A7%C3%A3o-do-estado">Modifica√ß√£o do estado<a class="anchor-link" href="#Modifica%C3%A7%C3%A3o-do-estado"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 160" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Nota: Vamos a fazer esta se√ß√£o usando Sonnet 3.7, pois na data da escrita do post, √© o melhor modelo para uso com agentes e √© o √∫nico que entende quando deve chamar as ferramentas e quando n√£o deve para este exemplo.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos repetir o exemplo anterior, mas em vez de interromper o grafo antes do uso de uma <code>tool</code>, vamos interromp√™-lo no LLM. Para isso, ao construir o grafo, indicamos que queremos parar no agente (<code>graph_builder.compile(interrupt_before=["chatbot_node"], checkpointer=memory)</code>)</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>
      <span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">SystemMessage</span><span class="p">,</span> <span class="n">HumanMessage</span><span class="p">,</span> <span class="n">AIMessage</span>
      <span class="kn">from</span> <span class="nn">langgraph.prebuilt</span> <span class="kn">import</span> <span class="n">ToolNode</span><span class="p">,</span> <span class="n">tools_condition</span>
      <span class="kn">from</span> <span class="nn">langgraph.checkpoint.memory</span> <span class="kn">import</span> <span class="n">MemorySaver</span>
      <span class="kn">from</span> <span class="nn">langchain_core.tools</span> <span class="kn">import</span> <span class="n">tool</span>
      <span class="kn">from</span> <span class="nn">langchain_anthropic</span> <span class="kn">import</span> <span class="n">ChatAnthropic</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="kn">import</span> <span class="nn">dotenv</span>
      
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">ANTHROPIC_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"ANTHROPIC_LANGGRAPH_API_KEY"</span><span class="p">)</span>
      
      <span class="n">memory</span> <span class="o">=</span> <span class="n">MemorySaver</span><span class="p">()</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>
      
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="c1"># Tools</span>
      <span class="nd">@tool</span>
      <span class="k">def</span> <span class="nf">multiply</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
      <span class="w">    </span><span class="sd">"""Multiply a and b.</span>
      
      <span class="sd">    Args:</span>
      <span class="sd">        a: first int</span>
      <span class="sd">        b: second int</span>
      
      <span class="sd">    Returns:</span>
      <span class="sd">        The product of a and b.</span>
      <span class="sd">    """</span>
          <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
      
      <span class="nd">@tool</span>
      <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
      <span class="w">    </span><span class="sd">"""Adds a and b.</span>
      
      <span class="sd">    Args:</span>
      <span class="sd">        a: first int</span>
      <span class="sd">        b: second int</span>
      
      <span class="sd">    Returns:</span>
      <span class="sd">        The sum of a and b.</span>
      <span class="sd">    """</span>
          <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
      
      <span class="nd">@tool</span>
      <span class="k">def</span> <span class="nf">subtract</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
      <span class="w">    </span><span class="sd">"""Subtract b from a.</span>
      
      <span class="sd">    Args:</span>
      <span class="sd">        a: first int</span>
      <span class="sd">        b: second int</span>
      
      <span class="sd">    Returns:</span>
      <span class="sd">        The difference between a and b.</span>
      <span class="sd">    """</span>
          <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span>
      
      <span class="nd">@tool</span>
      <span class="k">def</span> <span class="nf">divide</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
      <span class="w">    </span><span class="sd">"""Divide a by b.</span>
      
      <span class="sd">    Args:</span>
      <span class="sd">        a: first int</span>
      <span class="sd">        b: second int</span>
      
      <span class="sd">    Returns:</span>
      <span class="sd">        The quotient of a and b.</span>
      <span class="sd">    """</span>
          <span class="k">return</span> <span class="n">a</span> <span class="o">/</span> <span class="n">b</span>
      
      <span class="n">tools_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">multiply</span><span class="p">,</span> <span class="n">add</span><span class="p">,</span> <span class="n">subtract</span><span class="p">,</span> <span class="n">divide</span><span class="p">]</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatAnthropic</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="s2">"claude-3-7-sonnet-20250219"</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">ANTHROPIC_TOKEN</span><span class="p">)</span>
      <span class="n">llm_with_tools</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">bind_tools</span><span class="p">(</span><span class="n">tools_list</span><span class="p">)</span>
      
      <span class="c1"># Nodes</span>
      <span class="k">def</span> <span class="nf">chat_model_node</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="n">system_message</span> <span class="o">=</span> <span class="s2">"You are a helpful assistant that can use tools to answer questions. Once you have the result of a tool, provide a final answer without calling more tools."</span>
          <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span><span class="n">SystemMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="n">system_message</span><span class="p">)]</span> <span class="o">+</span> <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">llm_with_tools</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">messages</span><span class="p">)]{closing_brace}</span>
      
      <span class="c1"># Create graph builder</span>
      <span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chat_model_node</span><span class="p">)</span>
      <span class="n">tool_node</span> <span class="o">=</span> <span class="n">ToolNode</span><span class="p">(</span><span class="n">tools</span><span class="o">=</span><span class="n">tools_list</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="n">tool_node</span><span class="p">)</span>
      
      <span class="c1"># Connecto nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_conditional_edges</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">tools_condition</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">interrupt_before</span><span class="o">=</span><span class="p">[</span><span class="s2">"chatbot_node"</span><span class="p">],</span> <span class="n">checkpointer</span><span class="o">=</span><span class="n">memory</span><span class="p">)</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv34.webp" width="216" height="291" alt="image uv 35" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vemos na representa√ß√£o do grafo que h√° um <code>interrupt</code> antes da execu√ß√£o de <code>chatbot_node</code>, assim, antes de o chatbot ser executado, a execu√ß√£o ser√° interrompida e n√≥s teremos que fazer com que continue.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora vamos pedir novamente uma multiplica√ß√£o</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># Input</span>',
          '<span class="n">initial_input</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"Multiply 2 and 3"</span><span class="p">)}</span>',
          '',
          '<span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">}}</span>',
          '',
          '<span class="c1"># Run the graph until the first interruption</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span><span class="n">initial_input</span><span class="p">,</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"updates"</span><span class="p">):</span>',
          '    <span class="k">if</span> <span class="s1">\'chatbot_node\'</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">event</span><span class="p">[</span><span class="s1">\'chatbot_node\'</span><span class="p">][</span><span class="s1">\'messages\'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">())</span>',
          '    <span class="k">else</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'__interrupt__\': ()}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que n√£o fez nada. Se vemos o estado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">state</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">get_state</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>',
          '<span class="n">state</span><span class="o">.</span><span class="n">next</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'chatbot_node\',)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que o pr√≥ximo n√≥ √© o do chatbot. Al√©m disso, se observarmos seus valores, veremos a mensagem que lhe enviamos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">state</span><span class="o">.</span><span class="n">values</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'messages\': [HumanMessage(content=\'Multiply 2 and 3\', additional_kwargs={}, response_metadata={}, id=\'08fd6084-ecd2-4156-ab24-00d2d5c26f00\')]}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora procedemos a modificar o estado, adicionando uma nova mensagem</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">graph</span><span class="o">.</span><span class="n">update_state</span><span class="p">(</span>',
          '    <span class="n">config</span><span class="p">,</span>',
          '    <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"No, actually multiply 3 and 3!"</span><span class="p">)]}</span>',
          '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'configurable\': {\'thread_id\': \'1\',',
          '  \'checkpoint_ns\': \'\',',
          '  \'checkpoint_id\': \'1f027eb6-6c8b-6b6a-8001-bc0f8942566c\'}}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtemos o novo estado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">new_state</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">get_state</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>',
          '<span class="n">new_state</span><span class="o">.</span><span class="n">next</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'chatbot_node\',)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O pr√≥ximo n√≥ ainda √© o do chatbot, mas agora vamos ver as mensagens</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">new_state</span><span class="o">.</span><span class="n">values</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'messages\': [HumanMessage(content=\'Multiply 2 and 3\', additional_kwargs={}, response_metadata={}, id=\'08fd6084-ecd2-4156-ab24-00d2d5c26f00\'),',
          '  HumanMessage(content=\'No, actually multiply 3 and 3!\', additional_kwargs={}, response_metadata={}, id=\'e95394c2-e62e-47d2-b9b2-51eba40f3e22\')]}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que foi adicionado o novo. Ent√£o fazemos com que continue a execu√ß√£o.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">):</span>',
          '    <span class="n">event</span><span class="p">[</span><span class="s1">\'messages\'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'No, actually multiply 3 and 3!',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          '[{\'text\': "I\'ll multiply 3 and 3 for you.", \'type\': \'text\'}, {\'id\': \'toolu_01UABhLnEdg5ZqxVQTE5pGUx\', \'input\': {\'a\': 3, \'b\': 3}, \'name\': \'multiply\', \'type\': \'tool_use\'}]',
          'Tool Calls:',
          '  multiply (toolu_01UABhLnEdg5ZqxVQTE5pGUx)',
          ' Call ID: toolu_01UABhLnEdg5ZqxVQTE5pGUx',
          '  Args:',
          '    a: 3',
          '    b: 3',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: multiply',
          '9',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Foi feita a multiplica√ß√£o de 3 por 3, que √© a modifica√ß√£o do estado que fizemos, e n√£o 2 por 3, que √© o que pedimos da primeira vez.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Isso pode ser √∫til quando temos um agente e queremos verificar se o que ele faz est√° correto, ent√£o podemos entrar na execu√ß√£o e modificar o estado.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Pontos-de-interrup%C3%A7%C3%A3o-din%C3%A2micos">Pontos de interrup√ß√£o din√¢micos<a class="anchor-link" href="#Pontos-de-interrup%C3%A7%C3%A3o-din%C3%A2micos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 161" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>At√© agora, criamos pontos de parada est√°ticos atrav√©s da compila√ß√£o do grafo, mas podemos criar pontos de parada din√¢micos usando <code>NodeInterrupt</code>. Isso √© √∫til porque a execu√ß√£o pode ser interrompida por regras l√≥gicas introduzidas por programa√ß√£o.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Estes <code>NodeInterrupt</code> permitem personalizar como o usu√°rio ser√° notificado sobre a interrup√ß√£o.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>
      <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>
      <span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>
      <span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>
      <span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">SystemMessage</span><span class="p">,</span> <span class="n">HumanMessage</span><span class="p">,</span> <span class="n">AIMessage</span>
      <span class="kn">from</span> <span class="nn">langgraph.checkpoint.memory</span> <span class="kn">import</span> <span class="n">MemorySaver</span>
      <span class="kn">from</span> <span class="nn">langgraph.errors</span> <span class="kn">import</span> <span class="n">NodeInterrupt</span>
      <span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>
      <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      <span class="kn">import</span> <span class="nn">os</span>
      <span class="kn">import</span> <span class="nn">dotenv</span>
      
      <span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>
      <span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>
      
      <span class="n">memory_saver</span> <span class="o">=</span> <span class="n">MemorySaver</span><span class="p">()</span>
      
      <span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>
          <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>
      
      <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>
      
      <span class="c1"># Create the LLM model</span>
      <span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>  <span class="c1"># Login to HuggingFace to use the model</span>
      <span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>
      <span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>
          <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>
          <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>
          <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>
          <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
          <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>
      <span class="p">)</span>
      <span class="c1"># Create the chat model</span>
      <span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>
      
      <span class="c1"># Nodes</span>
      <span class="k">def</span> <span class="nf">chatbot_function</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>
          <span class="n">max_len</span> <span class="o">=</span> <span class="mi">15</span>
          <span class="n">input_message</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
      
          <span class="c1"># Check len message</span>
          <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">input_message</span><span class="o">.</span><span class="n">content</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_len</span><span class="p">:</span>
              <span class="k">raise</span> <span class="n">NodeInterrupt</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Received input is longer than </span><span class="si">{opening_brace}</span><span class="n">max_len</span><span class="si">{closing_brace}</span><span class="s2"> characters --&gt; </span><span class="si">{opening_brace}</span><span class="n">input_message</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      
          <span class="c1"># Invoke the LLM with the messages</span>
          <span class="n">response</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])</span>
      
          <span class="c1"># Return the LLM's response in the correct state format</span>
          <span class="k">return</span> <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">response</span><span class="p">]{closing_brace}</span>
      
      <span class="c1"># Create graph builder</span>
      <span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
      
      <span class="c1"># Add nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chatbot_function</span><span class="p">)</span>
      
      <span class="c1"># Connecto nodes</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>
      <span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">END</span><span class="p">)</span>
      
      <span class="c1"># Compile the graph</span>
      <span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">checkpointer</span><span class="o">=</span><span class="n">memory_saver</span><span class="p">)</span>
      
      <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv35.webp" width="143" height="234" alt="image uv 36" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, criamos uma interrup√ß√£o no caso de o mensagem ser longa. Vamos test√°-la.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">initial_input</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"Hello, how are you? My name is M√°ximo"</span><span class="p">)}</span>',
          '',
          '<span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">}}</span>',
          '',
          '<span class="c1"># Run the graph until the first interruption</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span><span class="n">initial_input</span><span class="p">,</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"updates"</span><span class="p">):</span>',
          '    <span class="k">if</span> <span class="s1">\'chatbot_node\'</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">event</span><span class="p">[</span><span class="s1">\'chatbot_node\'</span><span class="p">][</span><span class="s1">\'messages\'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">())</span>',
          '    <span class="k">else</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'__interrupt__\': (Interrupt(value="Received input is longer than 15 characters --&gt; content=\'Hello, how are you? My name is M√°ximo\' additional_kwargs={} response_metadata={} id=\'2bdc6d41-0cfe-4d3c-8748-ca7d46fd5a60\'", resumable=False, ns=None),)}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Efetivamente, a interrup√ß√£o foi pausada e nos deu a mensagem de erro que criamos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se vemos o n√≥do no qual ele parou</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">state</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">get_state</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>',
          '<span class="n">state</span><span class="o">.</span><span class="n">next</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'chatbot_node\',)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que est√° parado no n√≥do do chatbot. Podemos voltar a fazer com que continue com a execu√ß√£o, mas vai nos dar o mesmo erro.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"updates"</span><span class="p">):</span>',
          '    <span class="k">if</span> <span class="s1">\'chatbot_node\'</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">event</span><span class="p">[</span><span class="s1">\'chatbot_node\'</span><span class="p">][</span><span class="s1">\'messages\'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">())</span>',
          '    <span class="k">else</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'__interrupt__\': (Interrupt(value="Received input is longer than 15 characters --&gt; content=\'Hello, how are you? My name is M√°ximo\' additional_kwargs={} response_metadata={} id=\'2bdc6d41-0cfe-4d3c-8748-ca7d46fd5a60\'", resumable=False, ns=None),)}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ent√£o temos que modificar o estado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">graph</span><span class="o">.</span><span class="n">update_state</span><span class="p">(</span>',
          '    <span class="n">config</span><span class="p">,</span>',
          '    <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">HumanMessage</span><span class="p">(</span><span class="n">content</span><span class="o">=</span><span class="s2">"How are you?"</span><span class="p">)]}</span>',
          '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'configurable\': {\'thread_id\': \'1\',',
          '  \'checkpoint_ns\': \'\',',
          '  \'checkpoint_id\': \'1f027f13-5827-6a18-8001-4209d5a866f0\'}}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a ver o estado e seus valores</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">new_state</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">get_state</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Siguiente nodo: </span><span class="si">{</span><span class="n">new_state</span><span class="o">.</span><span class="n">next</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Valores:"</span><span class="p">)</span>',
          '<span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">new_state</span><span class="o">.</span><span class="n">values</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">]:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="se">\\t</span><span class="si">{</span><span class="n">value</span><span class="o">.</span><span class="n">content</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Siguiente nodo: (\'chatbot_node\',)',
          'Valores:',
          '	Hello, how are you? My name is M√°ximo',
          '	How are you?',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A √∫ltima mensagem √© mais curta, portanto tentamos retomar a execu√ß√£o do grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"updates"</span><span class="p">):</span>',
          '    <span class="k">if</span> <span class="s1">\'chatbot_node\'</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">event</span><span class="p">[</span><span class="s1">\'chatbot_node\'</span><span class="p">][</span><span class="s1">\'messages\'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">())</span>',
          '    <span class="k">else</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Hello M√°ximo! I\'m doing well, thank you for asking. How about you? How can I assist you today?',
          'None',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Personaliza%C3%A7%C3%A3o-do-estado">Personaliza√ß√£o do estado<a class="anchor-link" href="#Personaliza%C3%A7%C3%A3o-do-estado"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 162" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Nota: Vamos a fazer este t√≥pico usando Sonnet 3.7, pois na data da escrita do post, √© o melhor modelo para uso com agentes e √© o √∫nico que entende quando deve chamar as ferramentas e quando n√£o deve.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>At√© agora, confiamos em um estado simples com uma entrada, uma lista de mensagens. Pode-se ir longe com esse estado simples, mas se deseja definir um comportamento complexo sem depender da lista de mensagens, podem ser adicionados campos adicionais ao estado.
      Aqui vamos ver um novo cen√°rio, no qual o chatbot est√° utilizando a ferramenta de busca para encontrar informa√ß√µes espec√≠ficas e reenvi√°-las a um ser humano para revis√£o. Vamos fazer com que o chatbot investigue o anivers√°rio de uma entidade. Adicionaremos <code>name</code> e <code>birthday</code> como chaves do estado.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro carregamos os valores das chaves API.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">os</span>',
      '<span class="kn">import</span> <span class="nn">dotenv</span>',
      ' ',
      '<span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>',
      ' ',
      '<span class="n">TAVILY_API_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"TAVILY_LANGGRAPH_API_KEY"</span><span class="p">)</span>',
      '<span class="n">ANTHROPIC_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"ANTHROPIC_LANGGRAPH_API_KEY"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>












      
      <section class="section-block-markdown-cell">
      <p>Criamos o novo estado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>',
      ' ',
      '<span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
      '    <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>',
      '    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>',
      '    <span class="n">birthday</span><span class="p">:</span> <span class="nb">str</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>















      
      <section class="section-block-markdown-cell">
      <p>Adicionar essa informa√ß√£o ao estado torna-a facilmente acess√≠vel por outros n√≥s do grafo (por exemplo, um n√≥ que armazena ou processa a informa√ß√£o), bem como a camada de persist√™ncia do grafo.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora criamos o grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>',
      ' ',
      '<span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>








      
      <section class="section-block-markdown-cell">
      <p>Definimos a <code>ferramenta</code> de busca</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">langchain_community.utilities.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchAPIWrapper</span>',
      '<span class="kn">from</span> <span class="nn">langchain_community.tools.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchResults</span>',
      ' ',
      '<span class="n">wrapper</span> <span class="o">=</span> <span class="n">TavilySearchAPIWrapper</span><span class="p">(</span><span class="n">tavily_api_key</span><span class="o">=</span><span class="n">TAVILY_API_KEY</span><span class="p">)</span>',
      '<span class="n">search_tool</span> <span class="o">=</span> <span class="n">TavilySearchResults</span><span class="p">(</span><span class="n">api_wrapper</span><span class="o">=</span><span class="n">wrapper</span><span class="p">,</span> <span class="n">max_results</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>










      
      <section class="section-block-markdown-cell">
      <p>Agora criamos a ferramenta de assist√™ncia humana. Nesta ferramenta, preencheremos as chaves de estado dentro da nossa ferramenta <code>human_assistance</code>. Isso permite que um ser humano revise a informa√ß√£o antes de ela ser armazenada no estado. Voltaremos a usar <code>Command</code>, desta vez para emitir uma atualiza√ß√£o de estado a partir do interior da nossa ferramenta.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">ToolMessage</span>',
      '<span class="kn">from</span> <span class="nn">langchain_core.tools</span> <span class="kn">import</span> <span class="n">InjectedToolCallId</span><span class="p">,</span> <span class="n">tool</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">langgraph.types</span> <span class="kn">import</span> <span class="n">Command</span><span class="p">,</span> <span class="n">interrupt</span>',
      ' ',
      ' ',
      '<span class="nd">@tool</span>',
      '<span class="c1"># Note that because we are generating a ToolMessage for a state update, we</span>',
      '<span class="c1"># generally require the ID of the corresponding tool call. We can use</span>',
      '<span class="c1"># LangChain\'s InjectedToolCallId to signal that this argument should not</span>',
      '<span class="c1"># be revealed to the model in the tool\'s schema.</span>',
      '<span class="k">def</span> <span class="nf">human_assistance</span><span class="p">(</span>',
      '    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">birthday</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tool_call_id</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">InjectedToolCallId</span><span class="p">]</span>',
      '<span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>',
      '<span class="w">    </span><span class="sd">"""</span>',
      '<span class="sd">    Request assistance from a human expert. Use this tool ONLY ONCE per conversation.</span>',
      '<span class="sd">    After receiving the expert\'s response, you should provide an elaborated response to the user based on the information received</span>',
      '<span class="sd">    based on the information received, without calling this tool again.</span>',
      ' ',
      '<span class="sd">    Args:</span>',
      '<span class="sd">        query: The query to ask the human expert.</span>',
      ' ',
      '<span class="sd">    Returns:</span>',
      '<span class="sd">        The response from the human expert.</span>',
      '<span class="sd">    """</span>',
      '    <span class="n">human_response</span> <span class="o">=</span> <span class="n">interrupt</span><span class="p">(</span>',
      '        <span class="p">{</span>',
      '            <span class="s2">"question"</span><span class="p">:</span> <span class="s2">"Is this correct?"</span><span class="p">,</span>',
      '            <span class="s2">"name"</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span>',
      '            <span class="s2">"birthday"</span><span class="p">:</span> <span class="n">birthday</span><span class="p">,</span>',
      '        <span class="p">},</span>',
      '    <span class="p">)</span>',
      ' ',
      '    <span class="c1"># If the information is correct, update the state as-is.</span>',
      '    <span class="k">if</span> <span class="n">human_response</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"correct"</span><span class="p">,</span> <span class="s2">""</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">"y"</span><span class="p">):</span>',
      '        <span class="n">verified_name</span> <span class="o">=</span> <span class="n">name</span>',
      '        <span class="n">verified_birthday</span> <span class="o">=</span> <span class="n">birthday</span>',
      '        <span class="n">response</span> <span class="o">=</span> <span class="s2">"Correct"</span>',
      ' ',
      '    <span class="c1"># Otherwise, receive information from the human reviewer.</span>',
      '    <span class="k">else</span><span class="p">:</span>',
      '        <span class="n">verified_name</span> <span class="o">=</span> <span class="n">human_response</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"name"</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>',
      '        <span class="n">verified_birthday</span> <span class="o">=</span> <span class="n">human_response</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"birthday"</span><span class="p">,</span> <span class="n">birthday</span><span class="p">)</span>',
      '        <span class="n">response</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">"Made a correction: </span><span class="si">{</span><span class="n">human_response</span><span class="si">}</span><span class="s2">"</span>',
      ' ',
      '    <span class="c1"># This time we explicitly update the state with a ToolMessage inside</span>',
      '    <span class="c1"># the tool.</span>',
      '    <span class="n">state_update</span> <span class="o">=</span> <span class="p">{</span>',
      '        <span class="s2">"name"</span><span class="p">:</span> <span class="n">verified_name</span><span class="p">,</span>',
      '        <span class="s2">"birthday"</span><span class="p">:</span> <span class="n">verified_birthday</span><span class="p">,</span>',
      '        <span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">ToolMessage</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">tool_call_id</span><span class="o">=</span><span class="n">tool_call_id</span><span class="p">)],</span>',
      '    <span class="p">}</span>',
      '    ',
      '    <span class="c1"># We return a Command object in the tool to update our state.</span>',
      '    <span class="k">return</span> <span class="n">Command</span><span class="p">(</span><span class="n">update</span><span class="o">=</span><span class="n">state_update</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>




























































      
      <section class="section-block-markdown-cell">
      <p>N√≥s usamos <a href="https://python.langchain.com/api_reference/core/messages/langchain_core.messages.tool.ToolMessage.html" target="_blank" rel="nofollow noreferrer">ToolMessage</a> que √© usado para passar o resultado de executar uma <code>tool</code> de volta a um modelo e <a href="https://python.langchain.com/api_reference/core/tools/langchain_core.tools.base.InjectedToolCallId.html">InjectedToolCallId</a></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos uma lista de <code>tools</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tools_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">search_tool</span><span class="p">,</span> <span class="n">human_assistance</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>A seguir, o <code>LLM</code> com as <code>bind_tools</code> e adicionamos ao grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>',
          '<span class="kn">from</span> <span class="nn">langchain_anthropic</span> <span class="kn">import</span> <span class="n">ChatAnthropic</span>',
          '',
          '',
          '<span class="c1"># Create the LLM</span>',
          '<span class="n">llm</span> <span class="o">=</span> <span class="n">ChatAnthropic</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="s2">"claude-3-7-sonnet-20250219"</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">ANTHROPIC_TOKEN</span><span class="p">)</span>',
          '',
          '<span class="c1"># Modification: tell the LLM which tools it can call</span>',
          '<span class="n">llm_with_tools</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">bind_tools</span><span class="p">(</span><span class="n">tools_list</span><span class="p">)</span>',
          '',
          '<span class="c1"># Define the chatbot function</span>',
          '<span class="k">def</span> <span class="nf">chatbot_function</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>',
          '    <span class="n">message</span> <span class="o">=</span> <span class="n">llm_with_tools</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])</span>',
          '    <span class="c1"># Because we will be interrupting during tool execution,</span>',
          '    <span class="c1"># we disable parallel tool calling to avoid repeating any</span>',
          '    <span class="c1"># tool invocations when we resume.</span>',
          '    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">tool_calls</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span>',
          '    <span class="k">return</span> <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">message</span><span class="p">]}</span>',
          '',
          '<span class="c1"># Add the chatbot node</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chatbot_function</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x120b4f380&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Adicionamos a <code>tool</code> ao grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">langgraph.prebuilt</span> <span class="kn">import</span> <span class="n">ToolNode</span><span class="p">,</span> <span class="n">tools_condition</span>',
          '',
          '<span class="n">tool_node</span> <span class="o">=</span> <span class="n">ToolNode</span><span class="p">(</span><span class="n">tools</span><span class="o">=</span><span class="n">tools_list</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="n">tool_node</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_conditional_edges</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">tools_condition</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x120b4f380&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Adicionamos o n√≥ de <code>START</code> ao gr√°fico</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x120b4f380&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos um <code>checkpointer</code> <a href="https://langchain-ai.github.io/langgraph/reference/checkpoints/#langgraph.checkpoint.memory.MemorySaver" target="_blank" rel="nofollow noreferrer">MemorySaver</a>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">langgraph.checkpoint.memory</span> <span class="kn">import</span> <span class="n">MemorySaver</span>',
      ' ',
      '<span class="n">memory</span> <span class="o">=</span> <span class="n">MemorySaver</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>








      
      <section class="section-block-markdown-cell">
      <p>Compilamos o grafo com o <code>checkpointer</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">checkpointer</span><span class="o">=</span><span class="n">memory</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>O representamos graficamente</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      
      <span class="k">try</span><span class="p">:</span>
          <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Error al visualizar el grafo: </span><span class="si">{opening_brace}</span><span class="n">e</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv36.webp" width="216" height="249" alt="image uv 37" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos pedir ao nosso chatbot que procure o "anivers√°rio" da biblioteca de <code>LangGraph</code>.
      Direcionaremos o chatbot at√© a ferramenta <code>human_assistance</code> uma vez que tenha as informa√ß√µes necess√°rias. Os argumentos <code>name</code> e <code>birthday</code> s√£o obrigat√≥rios para a ferramenta <code>human_assistance</code>, ent√£o eles obrigam o chatbot a gerar propostas para esses campos.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">user_input</span> <span class="o">=</span> <span class="p">(</span>
          <span class="s2">"Can you look up when LangGraph was released? "</span>
          <span class="s2">"When you have the answer, use the human_assistance tool for review."</span>
      <span class="p">)</span>
      <span class="n">config</span> <span class="o">=</span> <span class="p">{opening_brace}</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{opening_brace}</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">{closing_brace}{closing_brace}</span>
      
      <span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span>
          <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{opening_brace}</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">{closing_brace}]{closing_brace},</span>
          <span class="n">config</span><span class="p">,</span>
          <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>
      <span class="p">)</span>
      <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>
          <span class="k">if</span> <span class="s2">"messages"</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>
              <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>================================<span class="ansi-bold"> Human Message </span>=================================
      
      Can you look up when LangGraph was released? When you have the answer, use the human_assistance tool for review.
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Failed to multipart ingest runs: langsmith.utils.LangSmithError: Failed to POST https://eu.api.smith.langchain.com/runs/multipart in LangSmith API. HTTPError('403 Client Error: Forbidden for url: https://eu.api.smith.langchain.com/runs/multipart', '{opening_brace}"error":"Forbidden"{closing_brace}\n')
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>==================================<span class="ansi-bold"> Ai Message </span>==================================
      
      [{'text': "I'll help you look up when LangGraph was released, and then I'll use the human_assistance tool for review as requested.\n\nFirst, let me search for information about LangGraph's release date:", 'type': 'text'}, {'id': 'toolu_011KHWFxYbFnUvGEF6MPt3dE', 'input': {'query': 'LangGraph release date when was LangGraph released'}, 'name': 'tavily_search_results_json', 'type': 'tool_use'}]
      Tool Calls:
        tavily_search_results_json (toolu_011KHWFxYbFnUvGEF6MPt3dE)
       Call ID: toolu_011KHWFxYbFnUvGEF6MPt3dE
        Args:
          query: LangGraph release date when was LangGraph released
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Failed to send compressed multipart ingest: langsmith.utils.LangSmithError: Failed to POST https://eu.api.smith.langchain.com/runs/multipart in LangSmith API. HTTPError('403 Client Error: Forbidden for url: https://eu.api.smith.langchain.com/runs/multipart', '{opening_brace}"error":"Forbidden"{closing_brace}\n')
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>=================================<span class="ansi-bold"> Tool Message </span>=================================
      Name: tavily_search_results_json
      
      [{"title": "LangGraph Studio: The first agent IDE | by Bhavik Jikadara - Medium", "url": "https://bhavikjikadara.medium.com/langgraph-studio-the-first-agent-ide-468132628274", "content": "LangGraph, launched in January 2023, is a low-level orchestration framework designed for building controllable and complex agentic applications.", "score": 0.80405265}, {"title": "langgraph - PyPI", "url": "https://pypi.org/project/langgraph/", "content": "langgraph ¬∑ PyPI\nSkip to main content Switch to mobile version\n\nSearch PyPI  Search\n\nHelp\nSponsors\nLog in\nRegister\n\nMenu\n\nHelp\nSponsors\nLog in\nRegister\n\nSearch PyPI  Search\nlanggraph 0.2.70\npip install langgraph Copy PIP instructions\nLatest versionReleased: Feb 6, 2025\nBuilding stateful, multi-actor applications with LLMs\nNavigation\n\nProject description\nRelease history\nDownload files [...] 0.2.20 Sep 13, 2024\n\n0.2.19 Sep 6, 2024\n\n0.2.18 Sep 6, 2024\n\n0.2.17 Sep 5, 2024\n\n0.2.16 Sep 1, 2024\n\n0.2.15 Aug 30, 2024\n\n0.2.14 Aug 24, 2024\n\n0.2.13 Aug 23, 2024\n\n0.2.12 Aug 22, 2024\n\n0.2.11 Aug 22, 2024\n\n0.2.10 Aug 21, 2024\n\n0.2.9 Aug 21, 2024\n\n0.2.8 Aug 21, 2024\n\n0.2.7 Aug 21, 2024\n\n0.2.7a0 pre-release Aug 21, 2024\n\n0.2.6 Aug 21, 2024\n\n0.2.5 Aug 21, 2024\n\n0.2.5a0 pre-release Aug 20, 2024\n\n0.2.4 Aug 15, 2024\n\n0.2.3 Aug 8, 2024\n\n0.2.2 Aug 7, 2024\n\n0.2.1 Aug 7, 2024\n\n0.2.0 Aug 7, 2024 [...] Download URL: langgraph-0.2.70.tar.gz\nUpload date: Feb 6, 2025\nSize: 129.7 kB\nTags: Source\nUploaded using Trusted Publishing? Yes\nUploaded via: twine/6.1.0 CPython/3.12.8", "score": 0.75659186}]
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Failed to send compressed multipart ingest: langsmith.utils.LangSmithError: Failed to POST https://eu.api.smith.langchain.com/runs/multipart in LangSmith API. HTTPError('403 Client Error: Forbidden for url: https://eu.api.smith.langchain.com/runs/multipart', '{opening_brace}"error":"Forbidden"{closing_brace}\n')
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>==================================<span class="ansi-bold"> Ai Message </span>==================================
      
      [{'text': 'Based on my search, I found that LangGraph was launched in January 2023. However, I noticed some inconsistencies in the information, as one source mentions it was launched in January 2023, while the PyPI page shows a version history starting from 2024.\n\nLet me request human assistance to verify this information:', 'type': 'text'}, {'id': 'toolu_019EopKn8bLi3ksvUVY2Mt5p', 'input': {'name': 'LangGraph', 'birthday': 'January 2023'}, 'name': 'human_assistance', 'type': 'tool_use'}]
      Tool Calls:
        human_assistance (toolu_019EopKn8bLi3ksvUVY2Mt5p)
       Call ID: toolu_019EopKn8bLi3ksvUVY2Mt5p
        Args:
          name: LangGraph
          birthday: January 2023
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Failed to send compressed multipart ingest: langsmith.utils.LangSmithError: Failed to POST https://eu.api.smith.langchain.com/runs/multipart in LangSmith API. HTTPError('403 Client Error: Forbidden for url: https://eu.api.smith.langchain.com/runs/multipart', '{opening_brace}"error":"Forbidden"{closing_brace}\n')
      Failed to send compressed multipart ingest: langsmith.utils.LangSmithError: Failed to POST https://eu.api.smith.langchain.com/runs/multipart in LangSmith API. HTTPError('403 Client Error: Forbidden for url: https://eu.api.smith.langchain.com/runs/multipart', '{"error":"Forbidden"}\n')
      Failed to send compressed multipart ingest: langsmith.utils.LangSmithError: Failed to POST https://eu.api.smith.langchain.com/runs/multipart in LangSmith API. HTTPError('403 Client Error: Forbidden for url: https://eu.api.smith.langchain.com/runs/multipart', '{"error":"Forbidden"}\n')
      Failed to send compressed multipart ingest: langsmith.utils.LangSmithError: Failed to POST https://eu.api.smith.langchain.com/runs/multipart in LangSmith API. HTTPError('403 Client Error: Forbidden for url: https://eu.api.smith.langchain.com/runs/multipart', '{"error":"Forbidden"}\n')
      </pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Parou devido ao <code>interrupt</code> na ferramenta <code>human_assistance</code>. Neste caso, o chatbot, com a ferramenta de busca, determinou que a data de LangGraph √© janeiro de 2023, mas n√£o √© a data exata, sendo 17 de janeiro de 2024, portanto podemos introduzi-la n√≥s mesmos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">human_command</span> <span class="o">=</span> <span class="n">Command</span><span class="p">(</span>',
          '    <span class="n">resume</span><span class="o">=</span><span class="p">{</span>',
          '        <span class="s2">"name"</span><span class="p">:</span> <span class="s2">"LangGraph"</span><span class="p">,</span>',
          '        <span class="s2">"birthday"</span><span class="p">:</span> <span class="s2">"Jan 17, 2024"</span><span class="p">,</span>',
          '    <span class="p">},</span>',
          '<span class="p">)</span>',
          '',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span><span class="n">human_command</span><span class="p">,</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="k">if</span> <span class="s2">"messages"</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          '[{\'text\': \'Based on my search, I found that LangGraph was launched in January 2023. However, I noticed some inconsistencies in the information, as one source mentions it was launched in January 2023, while the PyPI page shows a version history starting from 2024.\n\nLet me request human assistance to verify this information:\', \'type\': \'text\'}, {\'id\': \'toolu_019EopKn8bLi3ksvUVY2Mt5p\', \'input\': {\'name\': \'LangGraph\', \'birthday\': \'January 2023\'}, \'name\': \'human_assistance\', \'type\': \'tool_use\'}]',
          'Tool Calls:',
          '  human_assistance (toolu_019EopKn8bLi3ksvUVY2Mt5p)',
          ' Call ID: toolu_019EopKn8bLi3ksvUVY2Mt5p',
          '  Args:',
          '    name: LangGraph',
          '    birthday: January 2023',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: human_assistance',
          'Made a correction: {\'name\': \'LangGraph\', \'birthday\': \'Jan 17, 2024\'}',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Thank you for the expert review and correction! Based on the human expert\'s feedback, I can now provide you with the accurate information:',
          'LangGraph was released on January 17, 2024, not January 2023 as one of the search results incorrectly stated. ',
          'This is an important correction, as it means LangGraph is a relatively recent framework in the LLM orchestration space, having been available for less than a year at this point. LangGraph is developed by LangChain and is designed for building stateful, multi-actor applications with LLMs.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">snapshot</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">get_state</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>',
          '',
          '<span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">snapshot</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="p">(</span><span class="s2">"name"</span><span class="p">,</span> <span class="s2">"birthday"</span><span class="p">)}</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'name\': \'LangGraph\', \'birthday\': \'Jan 17, 2024\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora a data est√° correta gra√ßas √† interven√ß√£o humana para modificar os valores do estado</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Reescrevo todo o c√≥digo para que seja mais f√°cil de entender</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">os</span>',
          '<span class="kn">import</span> <span class="nn">dotenv</span>',
          '',
          '<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>',
          '<span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>',
          '<span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>',
          '<span class="kn">from</span> <span class="nn">langgraph.types</span> <span class="kn">import</span> <span class="n">Command</span><span class="p">,</span> <span class="n">interrupt</span>',
          '<span class="kn">from</span> <span class="nn">langgraph.prebuilt</span> <span class="kn">import</span> <span class="n">ToolNode</span><span class="p">,</span> <span class="n">tools_condition</span>',
          '<span class="kn">from</span> <span class="nn">langgraph.checkpoint.memory</span> <span class="kn">import</span> <span class="n">MemorySaver</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langchain_community.utilities.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchAPIWrapper</span>',
          '<span class="kn">from</span> <span class="nn">langchain_community.tools.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchResults</span>',
          '<span class="kn">from</span> <span class="nn">langchain_core.messages</span> <span class="kn">import</span> <span class="n">ToolMessage</span>',
          '<span class="kn">from</span> <span class="nn">langchain_core.tools</span> <span class="kn">import</span> <span class="n">InjectedToolCallId</span><span class="p">,</span> <span class="n">tool</span>',
          '<span class="kn">from</span> <span class="nn">langchain_anthropic</span> <span class="kn">import</span> <span class="n">ChatAnthropic</span>',
          '',
          '<span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>',
          '<span class="n">TAVILY_API_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"TAVILY_LANGGRAPH_API_KEY"</span><span class="p">)</span>',
          '<span class="n">ANTHROPIC_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"ANTHROPIC_LANGGRAPH_API_KEY"</span><span class="p">)</span>',
          '',
          '<span class="c1"># State</span>',
          '<span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
          '    <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>',
          '    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>',
          '    <span class="n">birthday</span><span class="p">:</span> <span class="nb">str</span>',
          '',
          '<span class="c1"># Tools</span>',
          '<span class="n">wrapper</span> <span class="o">=</span> <span class="n">TavilySearchAPIWrapper</span><span class="p">(</span><span class="n">tavily_api_key</span><span class="o">=</span><span class="n">TAVILY_API_KEY</span><span class="p">)</span>',
          '<span class="n">search_tool</span> <span class="o">=</span> <span class="n">TavilySearchResults</span><span class="p">(</span><span class="n">api_wrapper</span><span class="o">=</span><span class="n">wrapper</span><span class="p">,</span> <span class="n">max_results</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>',
          '',
          '<span class="nd">@tool</span>',
          '<span class="c1"># Note that because we are generating a ToolMessage for a state update, we</span>',
          '<span class="c1"># generally require the ID of the corresponding tool call. We can use</span>',
          '<span class="c1"># LangChain\'s InjectedToolCallId to signal that this argument should not</span>',
          '<span class="c1"># be revealed to the model in the tool\'s schema.</span>',
          '<span class="k">def</span> <span class="nf">human_assistance</span><span class="p">(</span>',
          '    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">birthday</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tool_call_id</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">InjectedToolCallId</span><span class="p">]</span>',
          '<span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>',
          '<span class="w">    </span><span class="sd">"""</span>',
          '<span class="sd">    Request assistance from a human expert. Use this tool ONLY ONCE per conversation.</span>',
          '<span class="sd">    After receiving the expert\'s response, you should provide an elaborated response to the user based on the information received</span>',
          '<span class="sd">    based on the information received, without calling this tool again.</span>',
          '',
          '<span class="sd">    Args:</span>',
          '<span class="sd">        query: The query to ask the human expert.</span>',
          '',
          '<span class="sd">    Returns:</span>',
          '<span class="sd">        The response from the human expert.</span>',
          '<span class="sd">    """</span>',
          '    <span class="n">human_response</span> <span class="o">=</span> <span class="n">interrupt</span><span class="p">(</span>',
          '        <span class="p">{</span>',
          '            <span class="s2">"question"</span><span class="p">:</span> <span class="s2">"Is this correct?"</span><span class="p">,</span>',
          '            <span class="s2">"name"</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span>',
          '            <span class="s2">"birthday"</span><span class="p">:</span> <span class="n">birthday</span><span class="p">,</span>',
          '        <span class="p">},</span>',
          '    <span class="p">)</span>',
          '',
          '    <span class="c1"># If the information is correct, update the state as-is.</span>',
          '    <span class="k">if</span> <span class="n">human_response</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"correct"</span><span class="p">,</span> <span class="s2">""</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">"y"</span><span class="p">):</span>',
          '        <span class="n">verified_name</span> <span class="o">=</span> <span class="n">name</span>',
          '        <span class="n">verified_birthday</span> <span class="o">=</span> <span class="n">birthday</span>',
          '        <span class="n">response</span> <span class="o">=</span> <span class="s2">"Correct"</span>',
          '',
          '    <span class="c1"># Otherwise, receive information from the human reviewer.</span>',
          '    <span class="k">else</span><span class="p">:</span>',
          '        <span class="n">verified_name</span> <span class="o">=</span> <span class="n">human_response</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"name"</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>',
          '        <span class="n">verified_birthday</span> <span class="o">=</span> <span class="n">human_response</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"birthday"</span><span class="p">,</span> <span class="n">birthday</span><span class="p">)</span>',
          '        <span class="n">response</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">"Made a correction: </span><span class="si">{</span><span class="n">human_response</span><span class="si">}</span><span class="s2">"</span>',
          '',
          '    <span class="c1"># This time we explicitly update the state with a ToolMessage inside</span>',
          '    <span class="c1"># the tool.</span>',
          '    <span class="n">state_update</span> <span class="o">=</span> <span class="p">{</span>',
          '        <span class="s2">"name"</span><span class="p">:</span> <span class="n">verified_name</span><span class="p">,</span>',
          '        <span class="s2">"birthday"</span><span class="p">:</span> <span class="n">verified_birthday</span><span class="p">,</span>',
          '        <span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">ToolMessage</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">tool_call_id</span><span class="o">=</span><span class="n">tool_call_id</span><span class="p">)],</span>',
          '    <span class="p">}</span>',
          '    ',
          '    <span class="c1"># We return a Command object in the tool to update our state.</span>',
          '    <span class="k">return</span> <span class="n">Command</span><span class="p">(</span><span class="n">update</span><span class="o">=</span><span class="n">state_update</span><span class="p">)</span>',
          '',
          '<span class="n">tools_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">search_tool</span><span class="p">,</span> <span class="n">human_assistance</span><span class="p">]</span>',
          '<span class="n">tool_node</span> <span class="o">=</span> <span class="n">ToolNode</span><span class="p">(</span><span class="n">tools</span><span class="o">=</span><span class="n">tools_list</span><span class="p">)</span>',
          '',
          '<span class="c1"># Create the LLM</span>',
          '<span class="n">llm</span> <span class="o">=</span> <span class="n">ChatAnthropic</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="s2">"claude-3-7-sonnet-20250219"</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">ANTHROPIC_TOKEN</span><span class="p">)</span>',
          '<span class="n">llm_with_tools</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">bind_tools</span><span class="p">(</span><span class="n">tools_list</span><span class="p">)</span>',
          '',
          '<span class="c1"># Define the chatbot function</span>',
          '<span class="k">def</span> <span class="nf">chatbot_function</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>',
          '    <span class="n">message</span> <span class="o">=</span> <span class="n">llm_with_tools</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])</span>',
          '    <span class="c1"># Because we will be interrupting during tool execution,</span>',
          '    <span class="c1"># we disable parallel tool calling to avoid repeating any</span>',
          '    <span class="c1"># tool invocations when we resume.</span>',
          '    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">tool_calls</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span>',
          '    <span class="k">return</span> <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">message</span><span class="p">]}</span>',
          '',
          '<span class="c1"># Graph</span>',
          '<span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>',
          '',
          '<span class="c1"># Nodes</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="n">tool_node</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chatbot_function</span><span class="p">)</span>',
          '',
          '<span class="c1"># Edges</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_conditional_edges</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">tools_condition</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
          '',
          '<span class="c1"># Checkpointer</span>',
          '<span class="n">memory</span> <span class="o">=</span> <span class="n">MemorySaver</span><span class="p">()</span>',
          '',
          '<span class="c1"># Compile</span>',
          '<span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">checkpointer</span><span class="o">=</span><span class="n">memory</span><span class="p">)</span>',
          '',
          '<span class="c1"># Visualize</span>',
          '<span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>',
          '',
          '<span class="k">try</span><span class="p">:</span>',
          '    <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>',
          '<span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Error al visualizar el grafo: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Error al visualizar el grafo: Failed to reach https://mermaid.ink/ API while trying to render your graph after 1 retries. To resolve this issue:',
          '1. Check your internet connection and try again',
          '2. Try with higher retry settings: `draw_mermaid_png(..., max_retries=5, retry_delay=2.0)`',
          '3. Use the Pyppeteer rendering method which will render your graph locally in a browser: `draw_mermaid_png(..., draw_method=MermaidDrawMethod.PYPPETEER)`',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos pedir ao nosso chatbot que procure o "anivers√°rio" da biblioteca de <code>LangGraph</code>.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="n">user_input</span> <span class="o">=</span> <span class="p">(</span>
          <span class="s2">"Can you look up when LangGraph was released? "</span>
          <span class="s2">"When you have the answer, use the human_assistance tool for review."</span>
      <span class="p">)</span>
      <span class="n">config</span> <span class="o">=</span> <span class="p">{opening_brace}</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{opening_brace}</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">{closing_brace}{closing_brace}</span>
      
      <span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span>
          <span class="p">{opening_brace}</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{opening_brace}</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span> <span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">{closing_brace}]{closing_brace},</span>
          <span class="n">config</span><span class="p">,</span>
          <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>
      <span class="p">)</span>
      <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>
          <span class="k">if</span> <span class="s2">"messages"</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>
              <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>================================<span class="ansi-bold"> Human Message </span>=================================
      
      Can you look up when LangGraph was released? When you have the answer, use the human_assistance tool for review.
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Failed to multipart ingest runs: langsmith.utils.LangSmithError: Failed to POST https://eu.api.smith.langchain.com/runs/multipart in LangSmith API. HTTPError('403 Client Error: Forbidden for url: https://eu.api.smith.langchain.com/runs/multipart', '{opening_brace}"error":"Forbidden"{closing_brace}\n')
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>==================================<span class="ansi-bold"> Ai Message </span>==================================
      
      [{'text': "I'll look up when LangGraph was released and then get human verification of the information.", 'type': 'text'}, {'id': 'toolu_017SLLSEnFQZVdBpj85BKHyy', 'input': {'query': 'when was LangGraph released launch date'}, 'name': 'tavily_search_results_json', 'type': 'tool_use'}]
      Tool Calls:
        tavily_search_results_json (toolu_017SLLSEnFQZVdBpj85BKHyy)
       Call ID: toolu_017SLLSEnFQZVdBpj85BKHyy
        Args:
          query: when was LangGraph released launch date
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Failed to send compressed multipart ingest: langsmith.utils.LangSmithError: Failed to POST https://eu.api.smith.langchain.com/runs/multipart in LangSmith API. HTTPError('403 Client Error: Forbidden for url: https://eu.api.smith.langchain.com/runs/multipart', '{opening_brace}"error":"Forbidden"{closing_brace}\n')
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>=================================<span class="ansi-bold"> Tool Message </span>=================================
      Name: tavily_search_results_json
      
      [{"title": "LangChain Introduces LangGraph Studio: The First Agent IDE for ...", "url": "https://www.marktechpost.com/2024/08/03/langchain-introduces-langgraph-studio-the-first-agent-ide-for-visualizing-interacting-with-and-debugging-complex-agentic-applications/", "content": "LangGraph, launched in January 2023, is a highly controllable, low-level orchestration framework for building agentic applications. Since its inception, it has undergone significant improvements, leading to a stable 0.1 release in June. LangGraph features a persistence layer enabling human-in-the-loop interactions and excels at building complex applications requiring domain-specific cognitive architecture.", "score": 0.83742094}, {"title": "LangGraph Studio: The first agent IDE | by Bhavik Jikadara - Medium", "url": "https://bhavikjikadara.medium.com/langgraph-studio-the-first-agent-ide-468132628274", "content": "LangGraph, launched in January 2023, is a low-level orchestration framework designed for building controllable and complex agentic applications. It‚Äôs beneficial for creating applications requiring highly domain-specific cognitive architecture and human-in-the-loop interactions. LangGraph is open source, available in Python and JavaScript, and integrates seamlessly with LangSmith, whether or not you use LangChain.\n\nLangGraph: A Comprehensive Guide for Beginners", "score": 0.79369855}]
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Failed to send compressed multipart ingest: langsmith.utils.LangSmithError: Failed to POST https://eu.api.smith.langchain.com/runs/multipart in LangSmith API. HTTPError('403 Client Error: Forbidden for url: https://eu.api.smith.langchain.com/runs/multipart', '{opening_brace}"error":"Forbidden"{closing_brace}\n')
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stdout-output-text">
      <pre>==================================<span class="ansi-bold"> Ai Message </span>==================================
      
      [{'text': "Based on my search, I found that LangGraph was launched in January 2023. It's described as a low-level orchestration framework for building agentic applications. Since its release, it has seen significant improvements, including a stable 0.1 release in June (presumably 2024).\n\nLet me now get human verification of this information:", 'type': 'text'}, {'id': 'toolu_016h3391yFhtPDhQvwjNgs7W', 'input': {'name': 'Information Verification', 'birthday': 'January 2023'}, 'name': 'human_assistance', 'type': 'tool_use'}]
      Tool Calls:
        human_assistance (toolu_016h3391yFhtPDhQvwjNgs7W)
       Call ID: toolu_016h3391yFhtPDhQvwjNgs7W
        Args:
          name: Information Verification
          birthday: January 2023
      </pre>
      </div>
      </div>
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-subarea-output-stream-output-stderr-output-text">
      <pre>Failed to send compressed multipart ingest: langsmith.utils.LangSmithError: Failed to POST https://eu.api.smith.langchain.com/runs/multipart in LangSmith API. HTTPError('403 Client Error: Forbidden for url: https://eu.api.smith.langchain.com/runs/multipart', '{opening_brace}"error":"Forbidden"{closing_brace}\n')
      Failed to send compressed multipart ingest: langsmith.utils.LangSmithError: Failed to POST https://eu.api.smith.langchain.com/runs/multipart in LangSmith API. HTTPError('403 Client Error: Forbidden for url: https://eu.api.smith.langchain.com/runs/multipart', '{"error":"Forbidden"}\n')
      Failed to send compressed multipart ingest: langsmith.utils.LangSmithError: Failed to POST https://eu.api.smith.langchain.com/runs/multipart in LangSmith API. HTTPError('403 Client Error: Forbidden for url: https://eu.api.smith.langchain.com/runs/multipart', '{"error":"Forbidden"}\n')
      </pre>
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Parou pelo <code>interrupt</code> na ferramenta <code>human_assistance</code>. Neste caso, o chatbot, com a ferramenta de busca, determinou que a data do LangGraph √© janeiro de 2023, mas n√£o √© a data exata, √© 17 de janeiro de 2024, ent√£o podemos introduzi-la n√≥s mesmos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">human_command</span> <span class="o">=</span> <span class="n">Command</span><span class="p">(</span>',
          '    <span class="n">resume</span><span class="o">=</span><span class="p">{</span>',
          '        <span class="s2">"name"</span><span class="p">:</span> <span class="s2">"LangGraph"</span><span class="p">,</span>',
          '        <span class="s2">"birthday"</span><span class="p">:</span> <span class="s2">"Jan 17, 2024"</span><span class="p">,</span>',
          '    <span class="p">},</span>',
          '<span class="p">)</span>',
          '',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span><span class="n">human_command</span><span class="p">,</span> <span class="n">config</span><span class="p">,</span> <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="k">if</span> <span class="s2">"messages"</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          '[{\'text\': "Based on my search, I found that LangGraph was launched in January 2023. It\'s described as a low-level orchestration framework for building agentic applications. Since its release, it has seen significant improvements, including a stable 0.1 release in June (presumably 2024).\n\nLet me now get human verification of this information:", \'type\': \'text\'}, {\'id\': \'toolu_016h3391yFhtPDhQvwjNgs7W\', \'input\': {\'name\': \'Information Verification\', \'birthday\': \'January 2023\'}, \'name\': \'human_assistance\', \'type\': \'tool_use\'}]',
          'Tool Calls:',
          '  human_assistance (toolu_016h3391yFhtPDhQvwjNgs7W)',
          ' Call ID: toolu_016h3391yFhtPDhQvwjNgs7W',
          '  Args:',
          '    name: Information Verification',
          '    birthday: January 2023',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: human_assistance',
          'Made a correction: {\'name\': \'LangGraph\', \'birthday\': \'Jan 17, 2024\'}',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Thank you for the expert correction! I need to update my response with the accurate information.',
          'LangGraph was actually released on January 17, 2024 - not January 2023 as I initially found in my search results. This is a significant correction, as it means LangGraph is a much more recent framework than the search results indicated. ',
          'The expert has provided the specific date (January 17, 2024) for LangGraph\'s release, making it a fairly new tool in the AI orchestration ecosystem. This timing aligns better with the mention of its stable 0.1 release in June 2024, as this would be about 5 months after its initial launch.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">snapshot</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">get_state</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>',
          '',
          '<span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">snapshot</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="p">(</span><span class="s2">"name"</span><span class="p">,</span> <span class="s2">"birthday"</span><span class="p">)}</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'name\': \'LangGraph\', \'birthday\': \'Jan 17, 2024\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora a data est√° correta gra√ßas √† interven√ß√£o humana para modificar os valores do estado</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Atualiza%C3%A7%C3%A3o-manual-do-estado">Atualiza√ß√£o manual do estado<a class="anchor-link" href="#Atualiza%C3%A7%C3%A3o-manual-do-estado"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 163" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>LangGraph fornece um alto grau de controle sobre o estado do aplicativo. Por exemplo, em qualquer ponto (mesmo quando √© interrompido), podemos reescrever manualmente uma chave do estado usando <code>graph.update_state</code>:</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a atualizar o <code>name</code> do estado para <code>LangGraph (biblioteca)</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">graph</span><span class="o">.</span><span class="n">update_state</span><span class="p">(</span><span class="n">config</span><span class="p">,</span> <span class="p">{</span><span class="s2">"name"</span><span class="p">:</span> <span class="s2">"LangGraph (library)"</span><span class="p">})</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'configurable\': {\'thread_id\': \'1\',',
          '  \'checkpoint_ns\': \'\',',
          '  \'checkpoint_id\': \'1f010a5a-8a70-618e-8006-89107653db68\'}}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se agora vermos o estado com <code>graph.get_state(config)</code> veremos que o <code>name</code> foi atualizado.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">snapshot</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">get_state</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>',
          '',
          '<span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">snapshot</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="p">(</span><span class="s2">"name"</span><span class="p">,</span> <span class="s2">"birthday"</span><span class="p">)}</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'name\': \'LangGraph (library)\', \'birthday\': \'Jan 17, 2024\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As atualiza√ß√µes de estado manuais gerar√£o uma trilha em <code>LangSmith</code>. Elas podem ser usadas para controlar fluxos de trabalho de <code>human in the loop</code>, como pode ser visto nesta <a href="https://langchain-ai.github.io/langgraph/how-tos/human_in_the_loop/edit-graph-state/" target="_blank" rel="nofollow noreferrer">guia</a>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Pontos-de-controle">Pontos de controle<a class="anchor-link" href="#Pontos-de-controle"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 164" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Em um fluxo de trabalho t√≠pico de um chatbot, o usu√°rio interage com o chatbot uma ou mais vezes para realizar uma tarefa. Nas se√ß√µes anteriores, vimos como adicionar mem√≥ria e um <code>human in the loop</code> para poder verificar nosso estado de gr√°fico e controlar as respostas futuras.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mas, talvez um usu√°rio queira come√ßar a partir de uma resposta anterior e quer <code>ramificar</code> para explorar um resultado separado. Isso √© √∫til para aplica√ß√µes de agentes, quando um fluxo falha eles podem voltar a um checkpoint anterior e tentar outra estrat√©gia.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>LangGraph</code> fornece essa possibilidade atrav√©s dos <code>checkpoints</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro carregamos os valores das chaves da API.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">os</span>',
      '<span class="kn">import</span> <span class="nn">dotenv</span>',
      ' ',
      '<span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>',
      ' ',
      '<span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>',
      '<span class="n">TAVILY_API_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"TAVILY_LANGGRAPH_API_KEY"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>












      
      <section class="section-block-markdown-cell">
      <p>Criamos o novo estado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>',
      ' ',
      '<span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>',
      ' ',
      '<span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
      '    <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>













      
      <section class="section-block-markdown-cell">
      <p>Agora criamos o grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>',
      ' ',
      '<span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>








      
      <section class="section-block-markdown-cell">
      <p>Definimos a <code>ferramenta</code> de busca</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">langchain_community.utilities.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchAPIWrapper</span>',
      '<span class="kn">from</span> <span class="nn">langchain_community.tools.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchResults</span>',
      ' ',
      '<span class="n">wrapper</span> <span class="o">=</span> <span class="n">TavilySearchAPIWrapper</span><span class="p">(</span><span class="n">tavily_api_key</span><span class="o">=</span><span class="n">TAVILY_API_KEY</span><span class="p">)</span>',
      '<span class="n">search_tool</span> <span class="o">=</span> <span class="n">TavilySearchResults</span><span class="p">(</span><span class="n">api_wrapper</span><span class="o">=</span><span class="n">wrapper</span><span class="p">,</span> <span class="n">max_results</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>










      
      <section class="section-block-markdown-cell">
      <p>Criamos uma lista de <code>tools</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tools_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">search_tool</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>A seguir, o <code>LLM</code> com as <code>bind_tools</code> e adicionamos ao gr√°fico</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>',
          '<span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>',
          '<span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>',
          '',
          '',
          '<span class="c1"># Create the LLM</span>',
          '<span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>',
          '<span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>',
          '<span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>',
          '    <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>',
          '    <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>',
          '    <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>',
          '    <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
          '    <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="c1"># Create the chat model</span>',
          '<span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>',
          '',
          '<span class="c1"># Modification: tell the LLM which tools it can call</span>',
          '<span class="n">llm_with_tools</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">bind_tools</span><span class="p">(</span><span class="n">tools_list</span><span class="p">)</span>',
          '',
          '<span class="c1"># Define the chatbot function</span>',
          '<span class="k">def</span> <span class="nf">chatbot_function</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>',
          '    <span class="n">message</span> <span class="o">=</span> <span class="n">llm_with_tools</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])</span>',
          '    <span class="k">return</span> <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">message</span><span class="p">]}</span>',
          '',
          '<span class="c1"># Add the chatbot node</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chatbot_function</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x10d8ce7b0&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Adicionamos a <code>tool</code> ao grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">langgraph.prebuilt</span> <span class="kn">import</span> <span class="n">ToolNode</span><span class="p">,</span> <span class="n">tools_condition</span>',
          '',
          '<span class="n">tool_node</span> <span class="o">=</span> <span class="n">ToolNode</span><span class="p">(</span><span class="n">tools</span><span class="o">=</span><span class="n">tools_list</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="n">tool_node</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_conditional_edges</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">tools_condition</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x10d8ce7b0&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Adicionamos o n√≥do de <code>START</code> ao grafo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;langgraph.graph.state.StateGraph at 0x10d8ce7b0&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos um <code>checkpointer</code> <a href="https://langchain-ai.github.io/langgraph/reference/checkpoints/#langgraph.checkpoint.memory.MemorySaver" target="_blank" rel="nofollow noreferrer">MemorySaver</a>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span> <span class="nn">langgraph.checkpoint.memory</span> <span class="kn">import</span> <span class="n">MemorySaver</span>',
      ' ',
      '<span class="n">memory</span> <span class="o">=</span> <span class="n">MemorySaver</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>








      
      <section class="section-block-markdown-cell">
      <p>Compilamos o grafo com o <code>checkpointer</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">checkpointer</span><span class="o">=</span><span class="n">memory</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>O representamos graficamente</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>
      
      <span class="k">try</span><span class="p">:</span>
          <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>
      <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
          <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Error al visualizar el grafo: </span><span class="si">{opening_brace}</span><span class="n">e</span><span class="si">{closing_brace}</span><span class="s2">"</span><span class="p">)</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt"></div>
      <div class="output-png-output-subarea">
      <img src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/uv37.webp" width="216" height="249" alt="image uv 38" loading="lazy">
      </div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos fazer nosso grafo dar alguns passos. Cada passo ser√° salvo no hist√≥rico do estado.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos a primeira chamada ao modelo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">}}</span>',
          '',
          '<span class="n">user_input</span> <span class="o">=</span> <span class="p">(</span>',
          '    <span class="s2">"I\'m learning LangGraph. "</span>',
          '    <span class="s2">"Could you do some research on it for me?"</span>',
          '<span class="p">)</span>',
          '',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span>',
          '    <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span><span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">},],},</span>',
          '    <span class="n">config</span><span class="p">,</span>',
          '    <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="k">if</span> <span class="s2">"messages"</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'I\'m learning LangGraph. Could you do some research on it for me?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: LangGraph',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangGraph Quickstart - GitHub Pages", "url": "https://langchain-ai.github.io/langgraph/tutorials/introduction/", "content": "[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-9-1)Assistant: LangGraph is a library designed to help build stateful multi-agent applications using language models. It provides tools for creating workflows and state machines to coordinate multiple AI agents or language model interactions. LangGraph is built on top of LangChain, leveraging its components while adding graph-based coordination capabilities. It\'s particularly useful for developing more complex, [...] [](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-21-6)   LangGraph is a library designed for building stateful, multi-actor applications with Large Language Models (LLMs). It\'s particularly useful for creating agent and multi-agent workflows.\n[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-21-7)\n[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-21-8)2. Developer: [...] [](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-48-19)LangGraph is likely a framework or library designed specifically for creating AI agents with advanced capabilities. Here are a few points to consider based on this recommendation:\n[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-48-20)", "score": 0.9328032}, {"title": "langchain-ai/langgraph: Build resilient language agents as graphs.", "url": "https://github.com/langchain-ai/langgraph", "content": "LangGraph ‚Äî used by Replit, Uber, LinkedIn, GitLab and more ‚Äî is a low-level orchestration framework for building controllable agents. While langchain provides integrations and composable components to streamline LLM application development, the LangGraph library enables agent orchestration ‚Äî offering customizable architectures, long-term memory, and human-in-the-loop to reliably handle complex tasks.\n\n```\npip install -U langgraph\n```", "score": 0.8884594}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: LangGraph',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangGraph Quickstart - GitHub Pages", "url": "https://langchain-ai.github.io/langgraph/tutorials/introduction/", "content": "[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-9-1)Assistant: LangGraph is a library designed to help build stateful multi-agent applications using language models. It provides tools for creating workflows and state machines to coordinate multiple AI agents or language model interactions. LangGraph is built on top of LangChain, leveraging its components while adding graph-based coordination capabilities. It\'s particularly useful for developing more complex, [...] [](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-21-6)   LangGraph is a library designed for building stateful, multi-actor applications with Large Language Models (LLMs). It\'s particularly useful for creating agent and multi-agent workflows.\n[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-21-7)\n[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-21-8)2. Developer: [...] [](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-48-19)LangGraph is likely a framework or library designed specifically for creating AI agents with advanced capabilities. Here are a few points to consider based on this recommendation:\n[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-48-20)", "score": 0.9328032}, {"title": "langchain-ai/langgraph: Build resilient language agents as graphs.", "url": "https://github.com/langchain-ai/langgraph", "content": "LangGraph ‚Äî used by Replit, Uber, LinkedIn, GitLab and more ‚Äî is a low-level orchestration framework for building controllable agents. While langchain provides integrations and composable components to streamline LLM application development, the LangGraph library enables agent orchestration ‚Äî offering customizable architectures, long-term memory, and human-in-the-loop to reliably handle complex tasks.\n\n```\npip install -U langgraph\n```", "score": 0.8884594}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: LangGraph tutorial and documentation',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangGraph Quickstart - GitHub Pages", "url": "https://langchain-ai.github.io/langgraph/tutorials/introduction/", "content": "[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-66-36)5. Documentation: The LangGraph documentation has been revamped, which should make it easier for learners like yourself to understand and use the tool.\n[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-66-37) [...] [](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-48-28)\n[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-48-29)1. Search for the official LangGraph documentation or website to learn more about its features and how to use it.\n[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-48-30)2. Look for tutorials or guides specifically focused on building AI agents with LangGraph. [...] [](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-9-1)Assistant: LangGraph is a library designed to help build stateful multi-agent applications using language models. It provides tools for creating workflows and state machines to coordinate multiple AI agents or language model interactions. LangGraph is built on top of LangChain, leveraging its components while adding graph-based coordination capabilities. It\'s particularly useful for developing more complex,", "score": 0.8775715}, {"title": "Tutorial 1-Getting Started With LangGraph- Building Stateful Multi AI ...", "url": "https://www.youtube.com/watch?v=gqvFmK7LpDo", "content": "and we will also use Lang Smith so let\'s go ahead and execute this lsmith I hope everybody knows what exactly is so till then I will also go ahead and show you the documentation page of Lang graph so this is what langra is all about right it has python it has it supports JavaScript and all but uh uh if I just go ahead and show you Lang graph tutorials right so here you can see this is the tutorial right and uh not this sorry uh let\'s see yes yes here you go right in the Lang graph page it", "score": 0.80405265}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'LangGraph is a powerful library designed for building stateful, multi-agent applications using Large Language Models (LLMs). Here are some key points about LangGraph:',
          '### Overview',
          '- **Purpose**: LangGraph is specifically designed to create complex workflows and state machines to coordinate multiple AI agents or language model interactions. It is particularly useful for developing sophisticated multi-agent systems.',
          '- **Framework**: It is built on top of LangChain, leveraging its components and adding graph-based coordination capabilities.',
          '- **Features**:',
          '  - **Customizable Architectures**: Allows you to design and implement custom workflows and state machines.',
          '  - **Long-Term Memory**: Supports long-term memory for agents, enabling them to maintain context over time.',
          '  - **Human-in-the-Loop**: Facilitates human interaction in the workflow, making it easier to handle complex tasks that require human oversight.',
          '### Getting Started',
          '- **Installation**:',
          '  ```bash',
          '  pip install -U langgraph',
          '  ```',
          '- **Documentation**: The LangGraph documentation has been revamped to make it easier for learners to understand and use the tool. You can find the official documentation [here](https://langchain-ai.github.io/langgraph/tutorials/introduction/).',
          '### Use Cases',
          '- **Multi-Agent Systems**: Ideal for building systems where multiple AI agents need to interact and coordinate their actions.',
          '- **Complex Task Handling**: Suitable for tasks that require multiple steps and decision-making processes.',
          '- **Custom Workflows**: Enables the creation of custom workflows tailored to specific use cases.',
          '### Tutorials and Resources',
          '- **Official Documentation**: The official LangGraph documentation is a comprehensive resource for learning about its features and usage.',
          '- **Tutorials**: Look for tutorials and guides specifically focused on building AI agents with LangGraph. You can find a tutorial video [here](https://www.youtube.com/watch?v=gqvFmK7LpDo).',
          '### Companies Using LangGraph',
          '- **Replit, Uber, LinkedIn, GitLab, and more**: These companies are using LangGraph to build resilient and controllable language agents.',
          '### Next Steps',
          '1. **Review the Documentation**: Start by going through the official LangGraph documentation to get a deeper understanding of its features and capabilities.',
          '2. **Follow Tutorials**: Watch tutorials and follow step-by-step guides to build your first multi-agent application.',
          '3. **Experiment with Examples**: Try out the examples provided in the documentation to get hands-on experience with LangGraph.',
          'If you have any specific questions or need further assistance, feel free to ask!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>E agora a segunda chamada</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">user_input</span> <span class="o">=</span> <span class="p">(</span>',
          '    <span class="s2">"Ya that\'s helpful. Maybe I\'ll "</span>',
          '    <span class="s2">"build an autonomous agent with it!"</span>',
          '<span class="p">)</span>',
          '',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span>',
          '    <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span><span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">},],},</span>',
          '    <span class="n">config</span><span class="p">,</span>',
          '    <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="k">if</span> <span class="s2">"messages"</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Ya that\'s helpful. Maybe I\'ll build an autonomous agent with it!',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: LangGraph tutorial build autonomous agent',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangGraph Tutorial: Building LLM Agents with LangChain\'s ... - Zep", "url": "https://www.getzep.com/ai-agents/langgraph-tutorial", "content": "This article focuses on building agents with LangGraph rather than LangChain. It provides a tutorial for building LangGraph agents, beginning with a discussion of LangGraph and its components. These concepts are reinforced by building a LangGraph agent from scratch and managing conversation memory with LangGraph agents. Finally, we use Zep\'s long-term memory for egents to create an agent that remembers previous conversations and user facts.√Ç\n\n√¢¬Ä¬ç\n\nSummary of key LangGraph tutorial concepts [...] human intervention, and the ability to handle complex workflows with\n      cycles and branches.\nBuilding a LangGraph agent | Creating a LangGraph agent is the best way to understand the core concepts\n      of nodes, edges, and state. The LangGraph Python libraries are modular and\n      provide the functionality to build a stateful graph by incrementally\n      adding nodes and edges.Incorporating tools enables an agent to perform specific tasks and access", "score": 0.8338803}, {"title": "Build Autonomous AI Agents with ReAct and LangGraph Tools", "url": "https://www.youtube.com/watch?v=ZfjaIshGkmk", "content": "LangGraph Intro - Build Autonomous AI Agents with ReAct and LangGraph Tools\nGrabDuck!\n4110 subscribers\n18 likes\n535 views\n21 Jan 2025\nIn this video, LangGraph Intro: Build Autonomous AI Agents with ReAct and LangGraph Tools, we dive into creating a powerful agentic system where the LLM decides when to trigger tools and when to finalize results. You‚Äôll see how to build a generic agent architecture using the ReAct principle, applying it to real-world examples like analyzing Tesla stock data. [...] reasoning like what they\'re doing so uh it\'s this way you\'re using tool and this is another thing from longchain core library and here you define the function and then you have to Define name description there are other parameters like for example you can provide very specific description of all the parameters like why you need them which one are those Etc but it\'s a bit over complicated for this tutorial I\'m skipping it and uh interesting thing this one return direct is false and this is uh [...] Whether you‚Äôre wondering how to create AI agents, looking for a LangGraph tutorial, or eager to explore the power of LangChain agents, this video is packed with valuable insights to help you get started.\n\nSupport the channel while you shop on Amazon! \nUse my affiliate link https://amzn.to/4hssSvT\n\nEvery purchase via this Amazon link helps keep our content free for you!\n\nüåü Related Courses &amp; Tutorials", "score": 0.8286204}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: LangGraph tutorial build autonomous agent',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangGraph Tutorial: Building LLM Agents with LangChain\'s ... - Zep", "url": "https://www.getzep.com/ai-agents/langgraph-tutorial", "content": "This article focuses on building agents with LangGraph rather than LangChain. It provides a tutorial for building LangGraph agents, beginning with a discussion of LangGraph and its components. These concepts are reinforced by building a LangGraph agent from scratch and managing conversation memory with LangGraph agents. Finally, we use Zep\'s long-term memory for egents to create an agent that remembers previous conversations and user facts.√Ç\n\n√¢¬Ä¬ç\n\nSummary of key LangGraph tutorial concepts [...] human intervention, and the ability to handle complex workflows with\n      cycles and branches.\nBuilding a LangGraph agent | Creating a LangGraph agent is the best way to understand the core concepts\n      of nodes, edges, and state. The LangGraph Python libraries are modular and\n      provide the functionality to build a stateful graph by incrementally\n      adding nodes and edges.Incorporating tools enables an agent to perform specific tasks and access", "score": 0.8338803}, {"title": "Build Autonomous AI Agents with ReAct and LangGraph Tools", "url": "https://www.youtube.com/watch?v=ZfjaIshGkmk", "content": "LangGraph Intro - Build Autonomous AI Agents with ReAct and LangGraph Tools\nGrabDuck!\n4110 subscribers\n18 likes\n535 views\n21 Jan 2025\nIn this video, LangGraph Intro: Build Autonomous AI Agents with ReAct and LangGraph Tools, we dive into creating a powerful agentic system where the LLM decides when to trigger tools and when to finalize results. You‚Äôll see how to build a generic agent architecture using the ReAct principle, applying it to real-world examples like analyzing Tesla stock data. [...] reasoning like what they\'re doing so uh it\'s this way you\'re using tool and this is another thing from longchain core library and here you define the function and then you have to Define name description there are other parameters like for example you can provide very specific description of all the parameters like why you need them which one are those Etc but it\'s a bit over complicated for this tutorial I\'m skipping it and uh interesting thing this one return direct is false and this is uh [...] Whether you‚Äôre wondering how to create AI agents, looking for a LangGraph tutorial, or eager to explore the power of LangChain agents, this video is packed with valuable insights to help you get started.\n\nSupport the channel while you shop on Amazon! \nUse my affiliate link https://amzn.to/4hssSvT\n\nEvery purchase via this Amazon link helps keep our content free for you!\n\nüåü Related Courses &amp; Tutorials", "score": 0.8286204}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: LangGraph tutorial build autonomous agent',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "LangGraph Tutorial: Building LLM Agents with LangChain\'s ... - Zep", "url": "https://www.getzep.com/ai-agents/langgraph-tutorial", "content": "This article focuses on building agents with LangGraph rather than LangChain. It provides a tutorial for building LangGraph agents, beginning with a discussion of LangGraph and its components. These concepts are reinforced by building a LangGraph agent from scratch and managing conversation memory with LangGraph agents. Finally, we use Zep\'s long-term memory for egents to create an agent that remembers previous conversations and user facts.√Ç\n\n√¢¬Ä¬ç\n\nSummary of key LangGraph tutorial concepts [...] human intervention, and the ability to handle complex workflows with\n      cycles and branches.\nBuilding a LangGraph agent | Creating a LangGraph agent is the best way to understand the core concepts\n      of nodes, edges, and state. The LangGraph Python libraries are modular and\n      provide the functionality to build a stateful graph by incrementally\n      adding nodes and edges.Incorporating tools enables an agent to perform specific tasks and access", "score": 0.8338803}, {"title": "Build Autonomous AI Agents with ReAct and LangGraph Tools", "url": "https://www.youtube.com/watch?v=ZfjaIshGkmk", "content": "LangGraph Intro - Build Autonomous AI Agents with ReAct and LangGraph Tools\nGrabDuck!\n4110 subscribers\n18 likes\n535 views\n21 Jan 2025\nIn this video, LangGraph Intro: Build Autonomous AI Agents with ReAct and LangGraph Tools, we dive into creating a powerful agentic system where the LLM decides when to trigger tools and when to finalize results. You‚Äôll see how to build a generic agent architecture using the ReAct principle, applying it to real-world examples like analyzing Tesla stock data. [...] reasoning like what they\'re doing so uh it\'s this way you\'re using tool and this is another thing from longchain core library and here you define the function and then you have to Define name description there are other parameters like for example you can provide very specific description of all the parameters like why you need them which one are those Etc but it\'s a bit over complicated for this tutorial I\'m skipping it and uh interesting thing this one return direct is false and this is uh [...] Whether you‚Äôre wondering how to create AI agents, looking for a LangGraph tutorial, or eager to explore the power of LangChain agents, this video is packed with valuable insights to help you get started.\n\nSupport the channel while you shop on Amazon! \nUse my affiliate link https://amzn.to/4hssSvT\n\nEvery purchase via this Amazon link helps keep our content free for you!\n\nüåü Related Courses &amp; Tutorials", "score": 0.8286204}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: LangGraph tutorial for building autonomous AI agents',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "How to Build AI Agents with LangGraph: A Step-by-Step Guide", "url": "https://medium.com/@lorevanoudenhove/how-to-build-ai-agents-with-langgraph-a-step-by-step-guide-5d84d9c7e832", "content": "By following these steps, you have successfully created an AI assistant using LangGraph that can calculate solar panel energy savings based on user inputs. This tutorial demonstrates the power of LangGraph in managing complex, multi-step processes and highlights how to leverage advanced AI tools to solve real-world challenges efficiently. Whether you‚Äôre developing AI agents for customer support, energy management, or other applications, LangGraph provides the flexibility, scalability, and [...] Step 7: Build the Graph Structure\nIn this step, we construct the graph structure for the AI assistant using LangGraph, which controls how the assistant processes user input, triggers tools, and moves between stages. The graph defines nodes for the core actions (like invoking the assistant and tool) and edges that dictate the flow between these nodes. [...] Now that we have a solid understanding of what LangGraph is and how it enhances AI development, let‚Äôs dive into a practical example. In this scenario, we‚Äôll build an AI agent designed to calculate potential energy savings for solar panels based on user input. This agent can be implemented as a lead generation tool on a solar panel seller‚Äôs website, where it interacts with potential customers, offering personalized savings estimates. By gathering key data such as monthly electricity costs, this", "score": 0.8576849}, {"title": "Building AI Agents with LangGraph: A Beginner\'s Guide - YouTube", "url": "https://www.youtube.com/watch?v=assrhPxNdSk", "content": "In this tutorial, we\'ll break down the fundamentals of building AI agents using LangGraph! Whether you\'re new to AI development or looking", "score": 0.834852}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: LangGraph tutorial step-by-step',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "How to Build AI Agents with LangGraph: A Step-by-Step Guide", "url": "https://medium.com/@lorevanoudenhove/how-to-build-ai-agents-with-langgraph-a-step-by-step-guide-5d84d9c7e832", "content": "By following these steps, you have successfully created an AI assistant using LangGraph that can calculate solar panel energy savings based on user inputs. This tutorial demonstrates the power of LangGraph in managing complex, multi-step processes and highlights how to leverage advanced AI tools to solve real-world challenges efficiently. Whether you‚Äôre developing AI agents for customer support, energy management, or other applications, LangGraph provides the flexibility, scalability, and [...] Step 7: Build the Graph Structure\nIn this step, we construct the graph structure for the AI assistant using LangGraph, which controls how the assistant processes user input, triggers tools, and moves between stages. The graph defines nodes for the core actions (like invoking the assistant and tool) and edges that dictate the flow between these nodes. [...] In this article, we‚Äôll explore how LangGraph transforms AI development and provide a step-by-step guide on how to build your own AI agent using an example that computes energy savings for solar panels. This example will showcase how LangGraph‚Äôs unique features can create intelligent, adaptable, and real-world-ready AI systems.\nWhat is LangGraph?", "score": 0.86441374}, {"title": "What Is LangGraph and How to Use It? - DataCamp", "url": "https://www.datacamp.com/tutorial/langgraph-tutorial", "content": "Building a Simple LangGraph Application\nHere‚Äôs a step-by-step example of creating a basic chatbot application using LangGraph.\nStep 1: Define the StateGraph\nDefine a StateGraph object to structure the chatbot as a state machine. The State is a class object defined with a single key messages of type List and uses the add_messages() function to append new messages rather than overwrite them.\nfrom typing import Annotated\nfrom typing_extensions import TypedDict [...] Getting Started With LangGraph\n\nInstallation\n\nBasic Concepts\n\n\nBuilding a Simple LangGraph Application\n\nStep 1: Define the StateGraph\nStep 2: Initialize an LLM and add it as a Chatbot node\nStep 3: Set edges\n\nStep 5: Run the chatbot\n\n\nAdvanced LangGraph Features\n\nCustom node types\nEdge types\n\nError handling\n\n\nReal-World Applications of LangGraph\n\nChatbots\nAutonomous agents\nMulti-Agent systems\nWorkflow automation tools\nRecommendation systems\n\nPersonalized learning environments\n\n\nConclusion", "score": 0.82492816}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: LangGraph tutorial for beginners',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "Introduction to LangGraph: A Beginner\'s Guide - Medium", "url": "https://medium.com/@cplog/introduction-to-langgraph-a-beginners-guide-14f9be027141", "content": "Conclusion\nLangGraph is a versatile tool for building complex, stateful applications with LLMs. By understanding its core concepts and working through simple examples, beginners can start to leverage its power for their projects. Remember to pay attention to state management, conditional edges, and ensuring there are no dead-end nodes in your graph. Happy coding! [...] LangGraph is a powerful tool for building stateful, multi-actor applications with Large Language Models (LLMs). It extends the LangChain library, allowing you to coordinate multiple chains (or actors) across multiple steps of computation in a cyclic manner. In this article, we‚Äôll introduce LangGraph, walk you through its basic concepts, and share some insights and common points of confusion for beginners.\nWhat is LangGraph?", "score": 0.8793233}, {"title": "LangGraph Tutorial: A Comprehensive Guide for Beginners", "url": "https://blog.futuresmart.ai/langgraph-tutorial-for-beginners", "content": "These examples highlight how LangGraph helps bridge the gap between AI capabilities and the complexities of real-world situations.\nConclusion\nThis concludes our LangGraph tutorial! As you\'ve learned, LangGraph enables the creation of AI applications that go beyond simple input-output loops by offering a framework for building stateful, agent-driven systems. You\'ve gained hands-on experience defining graphs, managing state, and incorporating tools. [...] LangGraph, a powerful library within the LangChain ecosystem, provides an elegant solution for building and managing multi-agent LLM applications. By representing workflows as cyclical graphs, LangGraph allows developers to orchestrate the interactions of multiple LLM agents, ensuring smooth communication and efficient execution of complex tasks. [...] LangGraph Tutorial: A Comprehensive Guide for Beginners\n\nFutureSmart AI Blog\nFollow\nFutureSmart AI Blog\nFollow\n\nLangGraph Tutorial: A Comprehensive Guide for Beginners\n\n\n+1\nRounak Show\nwith 1 co-author\n¬∑Oct 1, 2024¬∑12 min read\n\nTable of contents\n\nIntroduction\nUnderstanding LangGraph\nKey Concepts\nGraph Structures\nState Management\n\n\nGetting Started with LangGraph\nInstallation\nCreating a Basic Chatbot in LangGraph", "score": 0.8684817}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: LangGraph tutorial for beginners',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "Introduction to LangGraph: A Beginner\'s Guide - Medium", "url": "https://medium.com/@cplog/introduction-to-langgraph-a-beginners-guide-14f9be027141", "content": "Conclusion\nLangGraph is a versatile tool for building complex, stateful applications with LLMs. By understanding its core concepts and working through simple examples, beginners can start to leverage its power for their projects. Remember to pay attention to state management, conditional edges, and ensuring there are no dead-end nodes in your graph. Happy coding! [...] LangGraph is a powerful tool for building stateful, multi-actor applications with Large Language Models (LLMs). It extends the LangChain library, allowing you to coordinate multiple chains (or actors) across multiple steps of computation in a cyclic manner. In this article, we‚Äôll introduce LangGraph, walk you through its basic concepts, and share some insights and common points of confusion for beginners.\nWhat is LangGraph?", "score": 0.8793233}, {"title": "LangGraph Tutorial: A Comprehensive Guide for Beginners", "url": "https://blog.futuresmart.ai/langgraph-tutorial-for-beginners", "content": "These examples highlight how LangGraph helps bridge the gap between AI capabilities and the complexities of real-world situations.\nConclusion\nThis concludes our LangGraph tutorial! As you\'ve learned, LangGraph enables the creation of AI applications that go beyond simple input-output loops by offering a framework for building stateful, agent-driven systems. You\'ve gained hands-on experience defining graphs, managing state, and incorporating tools. [...] LangGraph, a powerful library within the LangChain ecosystem, provides an elegant solution for building and managing multi-agent LLM applications. By representing workflows as cyclical graphs, LangGraph allows developers to orchestrate the interactions of multiple LLM agents, ensuring smooth communication and efficient execution of complex tasks. [...] LangGraph Tutorial: A Comprehensive Guide for Beginners\n\nFutureSmart AI Blog\nFollow\nFutureSmart AI Blog\nFollow\n\nLangGraph Tutorial: A Comprehensive Guide for Beginners\n\n\n+1\nRounak Show\nwith 1 co-author\n¬∑Oct 1, 2024¬∑12 min read\n\nTable of contents\n\nIntroduction\nUnderstanding LangGraph\nKey Concepts\nGraph Structures\nState Management\n\n\nGetting Started with LangGraph\nInstallation\nCreating a Basic Chatbot in LangGraph", "score": 0.8684817}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Building an autonomous AI agent with LangGraph can be a rewarding and exciting project! Here\'s a step-by-step guide to get you started, based on the tutorials and resources available:',
          '### Step 1: Understand the Basics of LangGraph',
          'LangGraph is a library that extends the capabilities of LangChain, focusing on building stateful, multi-actor applications using Large Language Models (LLMs). It allows you to coordinate multiple LLM agents in complex workflows, using a graph-based approach.',
          '### Step 2: Install LangGraph',
          'First, you need to install the LangGraph library. You can do this using pip:',
          '```bash',
          'pip install -U langgraph',
          '```',
          '### Step 3: Define the Graph Structure',
          'The core of LangGraph is the graph structure, which defines the nodes (actions or states) and edges (transitions between nodes).',
          '#### Example: Solar Panel Energy Savings Calculator',
          'Let\'s build a simple AI agent that calculates potential energy savings for solar panels based on user input.',
          '1. **Define the StateGraph**:',
          '   - **Nodes**: These represent actions or states in your application.',
          '   - **Edges**: These define the transitions between nodes.',
          '```python',
          'from langgraph import StateGraph, State, Edge',
          '# Define the nodes',
          'start_node = State(key="start", action="greet_user")',
          'input_node = State(key="input", action="get_user_input")',
          'calculate_node = State(key="calculate", action="calculate_savings")',
          'result_node = State(key="result", action="show_results")',
          '# Define the edges',
          'start_to_input = Edge(from_node=start_node, to_node=input_node)',
          'input_to_calculate = Edge(from_node=input_node, to_node=calculate_node)',
          'calculate_to_result = Edge(from_node=calculate_node, to_node=result_node)',
          '# Create the graph',
          'graph = StateGraph()',
          'graph.add_state(start_node)',
          'graph.add_state(input_node)',
          'graph.add_state(calculate_node)',
          'graph.add_state(result_node)',
          'graph.add_edge(start_to_input)',
          'graph.add_edge(input_to_calculate)',
          'graph.add_edge(calculate_to_result)',
          '```',
          '### Step 4: Define the Actions',
          'Each node in the graph has an associated action. These actions are Python functions that perform specific tasks.',
          '```python',
          'def greet_user(state, context):',
          '    return {"message": "Hello! I can help you calculate energy savings for solar panels."}',
          'def get_user_input(state, context):',
          '    return {"message": "Please provide your monthly electricity cost in dollars."}',
          'def calculate_savings(state, context):',
          '    # Example calculation (you can use real data and more complex logic here)',
          '    monthly_cost = float(input("Enter your monthly electricity cost: "))',
          '    savings_per_kWh = 0.10  # Example savings rate',
          '    annual_savings = monthly_cost * 12 * savings_per_kWh',
          '    return {"savings": annual_savings}',
          'def show_results(state, context):',
          '    annual_savings = context.get("savings")',
          '    return {"message": f"Your annual savings with solar panels could be ${annual_savings:.2f}."}',
          '```',
          '### Step 5: Run the Graph',
          'Finally, you can run the graph to see how the agent processes user input and performs the calculations.',
          '```python',
          '# Initialize the graph and run it',
          'context = {}',
          'current_node = start_node',
          'while current_node:',
          '    action_result = current_node.action(current_node, context)',
          '    print(action_result["message"])',
          '    ',
          '    if "savings" in action_result:',
          '        context["savings"] = action_result["savings"]',
          '    ',
          '    current_node = graph.get_next_node(current_node, action_result)',
          '```',
          '### Step 6: Enhance with Advanced Features',
          'Once you have the basic structure in place, you can enhance your agent with advanced features such as:',
          '- **Long-term Memory**: Use external storage (e.g., Zep) to remember user conversations and preferences.',
          '- **Conditional Edges**: Define conditions for transitions between nodes to handle different scenarios.',
          '- **Human-in-the-Loop**: Allow human intervention for complex tasks or error handling.',
          '### Additional Resources',
          '- **Official Documentation**: [LangGraph Documentation](https://langchain-ai.github.io/langgraph/tutorials/introduction/)',
          '- **Comprehensive Guide**: [LangGraph Tutorial for Beginners](https://blog.futuresmart.ai/langgraph-tutorial-for-beginners)',
          '- **Example Project**: [Building AI Agents with LangGraph](https://medium.com/@lorevanoudenhove/how-to-build-ai-agents-with-langgraph-a-step-by-step-guide-5d84d9c7e832)',
          '### Conclusion',
          'By following these steps, you can build a robust and flexible AI agent using LangGraph. Start with simple examples and gradually add more complex features to create powerful, stateful, and multi-actor applications. Happy coding!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora que fizemos duas chamadas ao modelo, vamos verificar o hist√≥rico do estado.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">to_replay</span> <span class="o">=</span> <span class="kc">None</span>',
          '<span class="k">for</span> <span class="n">state</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">get_state_history</span><span class="p">(</span><span class="n">config</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Num Messages: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="o">.</span><span class="n">values</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])</span><span class="si">}</span><span class="s2">, Next: </span><span class="si">{</span><span class="n">state</span><span class="o">.</span><span class="n">next</span><span class="si">}</span><span class="s2">, checkpoint id = </span><span class="si">{</span><span class="n">state</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s2">"configurable"</span><span class="p">][</span><span class="s1">\'checkpoint_id\'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"-"</span> <span class="o">*</span> <span class="mi">80</span><span class="p">)</span>',
          '',
          '    <span class="c1"># Get state when first iteracction us done</span>',
          '    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="o">.</span><span class="n">next</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>',
          '        <span class="n">to_replay</span> <span class="o">=</span> <span class="n">state</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Num Messages: 24, Next: (), checkpoint id = 1f027f2f-e5b4-6c84-8018-9fcb33b5f397',
          '--------------------------------------------------------------------------------',
          'Num Messages: 23, Next: (\'chatbot_node\',), checkpoint id = 1f027f2f-e414-6b0e-8017-3ad465b70767',
          '--------------------------------------------------------------------------------',
          'Num Messages: 22, Next: (\'tools\',), checkpoint id = 1f027f2f-d382-6692-8016-fcfaf9c9a9f7',
          '--------------------------------------------------------------------------------',
          'Num Messages: 21, Next: (\'chatbot_node\',), checkpoint id = 1f027f2f-d1cf-6930-8015-f64aa0e6f750',
          '--------------------------------------------------------------------------------',
          'Num Messages: 20, Next: (\'tools\',), checkpoint id = 1f027f2f-bca9-6164-8014-86452cb10d83',
          '--------------------------------------------------------------------------------',
          'Num Messages: 19, Next: (\'chatbot_node\',), checkpoint id = 1f027f2f-bac1-6d24-8013-b539f3e4cedb',
          '--------------------------------------------------------------------------------',
          'Num Messages: 18, Next: (\'tools\',), checkpoint id = 1f027f2f-aa0e-69fa-8012-4ca2d9109f4e',
          '--------------------------------------------------------------------------------',
          'Num Messages: 17, Next: (\'chatbot_node\',), checkpoint id = 1f027f2f-a861-62c4-8011-5707badab130',
          '--------------------------------------------------------------------------------',
          'Num Messages: 16, Next: (\'tools\',), checkpoint id = 1f027f2f-93cf-6112-8010-ee536e76cdf7',
          '--------------------------------------------------------------------------------',
          'Num Messages: 15, Next: (\'chatbot_node\',), checkpoint id = 1f027f2f-91f5-63fa-800f-6ff45b0ebf86',
          '--------------------------------------------------------------------------------',
          'Num Messages: 14, Next: (\'tools\',), checkpoint id = 1f027f2f-7e07-6190-800e-e0269b0cb0f4',
          '--------------------------------------------------------------------------------',
          'Num Messages: 13, Next: (\'chatbot_node\',), checkpoint id = 1f027f2f-7bf9-62a4-800d-bd2bf25381ac',
          '--------------------------------------------------------------------------------',
          'Num Messages: 12, Next: (\'tools\',), checkpoint id = 1f027f2f-639f-6172-800c-e54c8b1b1f4a',
          '--------------------------------------------------------------------------------',
          'Num Messages: 11, Next: (\'chatbot_node\',), checkpoint id = 1f027f2f-621b-6972-800b-184a824ce9cb',
          '--------------------------------------------------------------------------------',
          'Num Messages: 10, Next: (\'tools\',), checkpoint id = 1f027f2f-56df-66a8-800a-d56ee9317382',
          '--------------------------------------------------------------------------------',
          'Num Messages: 9, Next: (\'chatbot_node\',), checkpoint id = 1f027f2f-5546-60d0-8009-41ee7c932b49',
          '--------------------------------------------------------------------------------',
          'Num Messages: 8, Next: (\'__start__\',), checkpoint id = 1f027f2f-5542-6ff2-8008-e2f4e8278c23',
          '--------------------------------------------------------------------------------',
          'Num Messages: 8, Next: (), checkpoint id = 1f027f2c-8873-61d6-8007-8a1c60438002',
          '--------------------------------------------------------------------------------',
          'Num Messages: 7, Next: (\'chatbot_node\',), checkpoint id = 1f027f2c-8504-663a-8006-517227b123b6',
          '--------------------------------------------------------------------------------',
          'Num Messages: 6, Next: (\'tools\',), checkpoint id = 1f027f2c-75dc-6248-8005-e198dd299848',
          '--------------------------------------------------------------------------------',
          'Num Messages: 5, Next: (\'chatbot_node\',), checkpoint id = 1f027f2c-7448-69d6-8004-e3c6d5c4c5a4',
          '--------------------------------------------------------------------------------',
          'Num Messages: 4, Next: (\'tools\',), checkpoint id = 1f027f2c-627b-6f6e-8003-22208fac7c89',
          '--------------------------------------------------------------------------------',
          'Num Messages: 3, Next: (\'chatbot_node\',), checkpoint id = 1f027f2c-6122-6190-8002-b745c42a724e',
          '--------------------------------------------------------------------------------',
          'Num Messages: 2, Next: (\'tools\',), checkpoint id = 1f027f2c-4c4c-6720-8001-8a1c73b894c1',
          '--------------------------------------------------------------------------------',
          'Num Messages: 1, Next: (\'chatbot_node\',), checkpoint id = 1f027f2c-4a91-6278-8000-56b65f6d77cd',
          '--------------------------------------------------------------------------------',
          'Num Messages: 0, Next: (\'__start__\',), checkpoint id = 1f027f2c-4a8d-6a1a-bfff-2f7cbde97290',
          '--------------------------------------------------------------------------------',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Salvamos o estado do grafo em <code>to_replay</code> quando recebemos a primeira resposta, logo antes de introduzir a segunda mensagem. Podemos voltar a um estado passado e continuar o fluxo a partir da√≠.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A configura√ß√£o do checkpoint cont√©m o <code>checkpoint_id</code>, que √© um timestamp do fluxo. Podemos v√™-lo para verificar que estamos no estado desejado.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">to_replay</span><span class="o">.</span><span class="n">config</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'configurable\': {\'thread_id\': \'1\', \'checkpoint_ns\': \'\', \'checkpoint_id\': \'1f027f2c-8873-61d6-8007-8a1c60438002\'}}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se olharmos para a lista de estados anterior, veremos que o ID coincide com o momento de introduzir a segunda mensagem</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Dando este <code>checkpoint_id</code> a <code>LangGraph</code> carrega o estado naquele momento do fluxo. Ent√£o criamos uma nova mensagem e a passamos para o grafo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">user_input</span> <span class="o">=</span> <span class="p">(</span>',
          '    <span class="s2">"Thanks"</span>',
          '<span class="p">)</span>',
          '',
          '<span class="c1"># The `checkpoint_id` in the `to_replay.config` corresponds to a state we\'ve persisted to our checkpointer.</span>',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span><span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">},],},</span>',
          '    <span class="n">to_replay</span><span class="o">.</span><span class="n">config</span><span class="p">,</span>',
          '    <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="k">if</span> <span class="s2">"messages"</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Thanks',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'You\'re welcome! If you have any more questions about LangGraph or any other topics, feel free to ask. Happy learning! üöÄ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">state</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">get_state_history</span><span class="p">(</span><span class="n">config</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Num Messages: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="o">.</span><span class="n">values</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])</span><span class="si">}</span><span class="s2">, Next: </span><span class="si">{</span><span class="n">state</span><span class="o">.</span><span class="n">next</span><span class="si">}</span><span class="s2">, checkpoint id = </span><span class="si">{</span><span class="n">state</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s2">"configurable"</span><span class="p">][</span><span class="s1">\'checkpoint_id\'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"-"</span> <span class="o">*</span> <span class="mi">80</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Num Messages: 10, Next: (), checkpoint id = 1f027f43-71ae-67e0-800a-d84a557441fc',
          '--------------------------------------------------------------------------------',
          'Num Messages: 9, Next: (\'chatbot_node\',), checkpoint id = 1f027f43-5b1f-6ad8-8009-34f409789bc4',
          '--------------------------------------------------------------------------------',
          'Num Messages: 8, Next: (\'__start__\',), checkpoint id = 1f027f43-5b1b-68a2-8008-fbbcbd1c175e',
          '--------------------------------------------------------------------------------',
          'Num Messages: 24, Next: (), checkpoint id = 1f027f2f-e5b4-6c84-8018-9fcb33b5f397',
          '--------------------------------------------------------------------------------',
          'Num Messages: 23, Next: (\'chatbot_node\',), checkpoint id = 1f027f2f-e414-6b0e-8017-3ad465b70767',
          '--------------------------------------------------------------------------------',
          'Num Messages: 22, Next: (\'tools\',), checkpoint id = 1f027f2f-d382-6692-8016-fcfaf9c9a9f7',
          '--------------------------------------------------------------------------------',
          'Num Messages: 21, Next: (\'chatbot_node\',), checkpoint id = 1f027f2f-d1cf-6930-8015-f64aa0e6f750',
          '--------------------------------------------------------------------------------',
          'Num Messages: 20, Next: (\'tools\',), checkpoint id = 1f027f2f-bca9-6164-8014-86452cb10d83',
          '--------------------------------------------------------------------------------',
          'Num Messages: 19, Next: (\'chatbot_node\',), checkpoint id = 1f027f2f-bac1-6d24-8013-b539f3e4cedb',
          '--------------------------------------------------------------------------------',
          'Num Messages: 18, Next: (\'tools\',), checkpoint id = 1f027f2f-aa0e-69fa-8012-4ca2d9109f4e',
          '--------------------------------------------------------------------------------',
          'Num Messages: 17, Next: (\'chatbot_node\',), checkpoint id = 1f027f2f-a861-62c4-8011-5707badab130',
          '--------------------------------------------------------------------------------',
          'Num Messages: 16, Next: (\'tools\',), checkpoint id = 1f027f2f-93cf-6112-8010-ee536e76cdf7',
          '--------------------------------------------------------------------------------',
          'Num Messages: 15, Next: (\'chatbot_node\',), checkpoint id = 1f027f2f-91f5-63fa-800f-6ff45b0ebf86',
          '--------------------------------------------------------------------------------',
          'Num Messages: 14, Next: (\'tools\',), checkpoint id = 1f027f2f-7e07-6190-800e-e0269b0cb0f4',
          '--------------------------------------------------------------------------------',
          'Num Messages: 13, Next: (\'chatbot_node\',), checkpoint id = 1f027f2f-7bf9-62a4-800d-bd2bf25381ac',
          '--------------------------------------------------------------------------------',
          'Num Messages: 12, Next: (\'tools\',), checkpoint id = 1f027f2f-639f-6172-800c-e54c8b1b1f4a',
          '--------------------------------------------------------------------------------',
          'Num Messages: 11, Next: (\'chatbot_node\',), checkpoint id = 1f027f2f-621b-6972-800b-184a824ce9cb',
          '--------------------------------------------------------------------------------',
          'Num Messages: 10, Next: (\'tools\',), checkpoint id = 1f027f2f-56df-66a8-800a-d56ee9317382',
          '--------------------------------------------------------------------------------',
          'Num Messages: 9, Next: (\'chatbot_node\',), checkpoint id = 1f027f2f-5546-60d0-8009-41ee7c932b49',
          '--------------------------------------------------------------------------------',
          'Num Messages: 8, Next: (\'__start__\',), checkpoint id = 1f027f2f-5542-6ff2-8008-e2f4e8278c23',
          '--------------------------------------------------------------------------------',
          'Num Messages: 8, Next: (), checkpoint id = 1f027f2c-8873-61d6-8007-8a1c60438002',
          '--------------------------------------------------------------------------------',
          'Num Messages: 7, Next: (\'chatbot_node\',), checkpoint id = 1f027f2c-8504-663a-8006-517227b123b6',
          '--------------------------------------------------------------------------------',
          'Num Messages: 6, Next: (\'tools\',), checkpoint id = 1f027f2c-75dc-6248-8005-e198dd299848',
          '--------------------------------------------------------------------------------',
          'Num Messages: 5, Next: (\'chatbot_node\',), checkpoint id = 1f027f2c-7448-69d6-8004-e3c6d5c4c5a4',
          '--------------------------------------------------------------------------------',
          'Num Messages: 4, Next: (\'tools\',), checkpoint id = 1f027f2c-627b-6f6e-8003-22208fac7c89',
          '--------------------------------------------------------------------------------',
          'Num Messages: 3, Next: (\'chatbot_node\',), checkpoint id = 1f027f2c-6122-6190-8002-b745c42a724e',
          '--------------------------------------------------------------------------------',
          'Num Messages: 2, Next: (\'tools\',), checkpoint id = 1f027f2c-4c4c-6720-8001-8a1c73b894c1',
          '--------------------------------------------------------------------------------',
          'Num Messages: 1, Next: (\'chatbot_node\',), checkpoint id = 1f027f2c-4a91-6278-8000-56b65f6d77cd',
          '--------------------------------------------------------------------------------',
          'Num Messages: 0, Next: (\'__start__\',), checkpoint id = 1f027f2c-4a8d-6a1a-bfff-2f7cbde97290',
          '--------------------------------------------------------------------------------',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver no hist√≥rico que o grafo executou tudo o que fizemos primeiro, mas depois sobrescreveu o hist√≥rico e voltou a executar a partir de um ponto anterior.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Reescrevo todo o grafo junto</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">os</span>',
          '<span class="kn">import</span> <span class="nn">dotenv</span>',
          '',
          '<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Annotated</span>',
          '<span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">TypedDict</span>',
          '<span class="kn">from</span> <span class="nn">langgraph.graph.message</span> <span class="kn">import</span> <span class="n">add_messages</span>',
          '<span class="kn">from</span> <span class="nn">langgraph.graph</span> <span class="kn">import</span> <span class="n">StateGraph</span><span class="p">,</span> <span class="n">START</span><span class="p">,</span> <span class="n">END</span>',
          '<span class="kn">from</span> <span class="nn">langgraph.prebuilt</span> <span class="kn">import</span> <span class="n">ToolNode</span><span class="p">,</span> <span class="n">tools_condition</span>',
          '<span class="kn">from</span> <span class="nn">langgraph.checkpoint.memory</span> <span class="kn">import</span> <span class="n">MemorySaver</span>',
          '',
          '<span class="kn">from</span> <span class="nn">langchain_community.utilities.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchAPIWrapper</span>',
          '<span class="kn">from</span> <span class="nn">langchain_community.tools.tavily_search</span> <span class="kn">import</span> <span class="n">TavilySearchResults</span>',
          '<span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEndpoint</span><span class="p">,</span> <span class="n">ChatHuggingFace</span>',
          '<span class="kn">from</span> <span class="nn">huggingface_hub</span> <span class="kn">import</span> <span class="n">login</span>',
          '<span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">"LANGCHAIN_TRACING_V2"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"false"</span>    <span class="c1"># Disable LangSmith tracing</span>',
          '',
          '<span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">display</span>',
          '',
          '<span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">TypedDict</span><span class="p">):</span>',
          '    <span class="n">messages</span><span class="p">:</span> <span class="n">Annotated</span><span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="n">add_messages</span><span class="p">]</span>',
          '',
          '<span class="n">dotenv</span><span class="o">.</span><span class="n">load_dotenv</span><span class="p">()</span>',
          '<span class="n">HUGGINGFACE_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"HUGGINGFACE_LANGGRAPH"</span><span class="p">)</span>',
          '<span class="n">TAVILY_API_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">"TAVILY_LANGGRAPH_API_KEY"</span><span class="p">)</span>',
          '',
          '<span class="c1"># Tools</span>',
          '<span class="n">wrapper</span> <span class="o">=</span> <span class="n">TavilySearchAPIWrapper</span><span class="p">(</span><span class="n">tavily_api_key</span><span class="o">=</span><span class="n">TAVILY_API_KEY</span><span class="p">)</span>',
          '<span class="n">search_tool</span> <span class="o">=</span> <span class="n">TavilySearchResults</span><span class="p">(</span><span class="n">api_wrapper</span><span class="o">=</span><span class="n">wrapper</span><span class="p">,</span> <span class="n">max_results</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>',
          '<span class="n">tools_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">search_tool</span><span class="p">]</span>',
          '<span class="n">tool_node</span> <span class="o">=</span> <span class="n">ToolNode</span><span class="p">(</span><span class="n">tools</span><span class="o">=</span><span class="n">tools_list</span><span class="p">)</span>',
          '',
          '<span class="c1"># Create the LLM</span>',
          '<span class="n">login</span><span class="p">(</span><span class="n">token</span><span class="o">=</span><span class="n">HUGGINGFACE_TOKEN</span><span class="p">)</span>',
          '<span class="n">MODEL</span> <span class="o">=</span> <span class="s2">"Qwen/Qwen2.5-72B-Instruct"</span>',
          '<span class="n">model</span> <span class="o">=</span> <span class="n">HuggingFaceEndpoint</span><span class="p">(</span>',
          '    <span class="n">repo_id</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>',
          '    <span class="n">task</span><span class="o">=</span><span class="s2">"text-generation"</span><span class="p">,</span>',
          '    <span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>',
          '    <span class="n">do_sample</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>',
          '    <span class="n">repetition_penalty</span><span class="o">=</span><span class="mf">1.03</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="c1"># Create the chat model</span>',
          '<span class="n">llm</span> <span class="o">=</span> <span class="n">ChatHuggingFace</span><span class="p">(</span><span class="n">llm</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>',
          '<span class="c1"># Modification: tell the LLM which tools it can call</span>',
          '<span class="n">llm_with_tools</span> <span class="o">=</span> <span class="n">llm</span><span class="o">.</span><span class="n">bind_tools</span><span class="p">(</span><span class="n">tools_list</span><span class="p">)</span>',
          '',
          '<span class="c1"># Define the chatbot function</span>',
          '<span class="k">def</span> <span class="nf">chatbot_function</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">):</span>',
          '    <span class="n">message</span> <span class="o">=</span> <span class="n">llm_with_tools</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])</span>',
          '    <span class="k">return</span> <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[</span><span class="n">message</span><span class="p">]}</span>',
          '',
          '<span class="c1"># Create the graph</span>',
          '<span class="n">graph_builder</span> <span class="o">=</span> <span class="n">StateGraph</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>',
          '',
          '<span class="c1"># Add nodes</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">chatbot_function</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="n">tool_node</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="s2">"tools"</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
          '',
          '<span class="c1"># Add edges</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="s2">"chatbot_node"</span><span class="p">)</span>',
          '<span class="n">graph_builder</span><span class="o">.</span><span class="n">add_conditional_edges</span><span class="p">(</span><span class="s2">"chatbot_node"</span><span class="p">,</span> <span class="n">tools_condition</span><span class="p">)</span>',
          '',
          '<span class="c1"># Add checkpointer</span>',
          '<span class="n">memory</span> <span class="o">=</span> <span class="n">MemorySaver</span><span class="p">()</span>',
          '',
          '<span class="c1"># Compile</span>',
          '<span class="n">graph</span> <span class="o">=</span> <span class="n">graph_builder</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">checkpointer</span><span class="o">=</span><span class="n">memory</span><span class="p">)</span>',
          '',
          '<span class="c1"># Visualize</span>',
          '<span class="k">try</span><span class="p">:</span>',
          '    <span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">get_graph</span><span class="p">()</span><span class="o">.</span><span class="n">draw_mermaid_png</span><span class="p">()))</span>',
          '<span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Error al visualizar el grafo: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Error al visualizar el grafo: Failed to reach https://mermaid.ink/ API while trying to render your graph after 1 retries. To resolve this issue:',
          '1. Check your internet connection and try again',
          '2. Try with higher retry settings: `draw_mermaid_png(..., max_retries=5, retry_delay=2.0)`',
          '3. Use the Pyppeteer rendering method which will render your graph locally in a browser: `draw_mermaid_png(..., draw_method=MermaidDrawMethod.PYPPETEER)`',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos a primeira chamada ao modelo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"configurable"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"thread_id"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">}}</span>',
          '',
          '<span class="n">user_input</span> <span class="o">=</span> <span class="p">(</span>',
          '    <span class="s2">"I\'m learning LangGraph. "</span>',
          '    <span class="s2">"Could you do some research on it for me?"</span>',
          '<span class="p">)</span>',
          '',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span>',
          '    <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span><span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">},],},</span>',
          '    <span class="n">config</span><span class="p">,</span>',
          '    <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="k">if</span> <span class="s2">"messages"</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'I\'m learning LangGraph. Could you do some research on it for me?',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: LangGraph',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "What is LangGraph? - IBM", "url": "https://www.ibm.com/think/topics/langgraph", "content": "LangGraph, created by LangChain, is an open source AI agent framework designed to build, deploy and manage complex generative AI agent workflows. It provides a set of tools and libraries that enable users to create, run and optimize large language models (LLMs) in a scalable and efficient manner. At its core, LangGraph uses the power of graph-based architectures to model and manage the intricate relationships between various components of an AI agent workflow. [...] Agent systems: LangGraph provides a framework for building agent-based systems, which can be used in applications such as robotics, autonomous vehicles or video games.\n\nLLM applications: By using LangGraph‚Äôs capabilities, developers can build more sophisticated AI models that learn and improve over time. Norwegian Cruise Line uses LangGraph to compile, construct and refine guest-facing AI solutions. This capability allows for improved and personalized guest experiences. [...] By using a graph-based architecture, LangGraph enables users to scale artificial intelligence workflows without slowing down or sacrificing efficiency. LangGraph uses enhanced decision-making by modeling complex relationships between nodes, which means it uses AI agents to analyze their past actions and feedback. In the world of LLMs, this process is referred to as reflection.", "score": 0.9353998}, {"title": "LangGraph Quickstart - GitHub Pages", "url": "https://langchain-ai.github.io/langgraph/tutorials/introduction/", "content": "[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-9-1)Assistant: LangGraph is a library designed to help build stateful multi-agent applications using language models. It provides tools for creating workflows and state machines to coordinate multiple AI agents or language model interactions. LangGraph is built on top of LangChain, leveraging its components while adding graph-based coordination capabilities. It\'s particularly useful for developing more complex, [...] [](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-21-6)   LangGraph is a library designed for building stateful, multi-actor applications with Large Language Models (LLMs). It\'s particularly useful for creating agent and multi-agent workflows.\n[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-21-7)\n[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-21-8)2. Developer: [...] [](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-48-19)LangGraph is likely a framework or library designed specifically for creating AI agents with advanced capabilities. Here are a few points to consider based on this recommendation:\n[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-48-20)", "score": 0.9328032}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'Tool Calls:',
          '  tavily_search_results_json (0)',
          ' Call ID: 0',
          '  Args:',
          '    query: LangGraph',
          '=================================<span class="ansi-bold"> Tool Message </span>=================================',
          'Name: tavily_search_results_json',
          '[{"title": "What is LangGraph? - IBM", "url": "https://www.ibm.com/think/topics/langgraph", "content": "LangGraph, created by LangChain, is an open source AI agent framework designed to build, deploy and manage complex generative AI agent workflows. It provides a set of tools and libraries that enable users to create, run and optimize large language models (LLMs) in a scalable and efficient manner. At its core, LangGraph uses the power of graph-based architectures to model and manage the intricate relationships between various components of an AI agent workflow. [...] Agent systems: LangGraph provides a framework for building agent-based systems, which can be used in applications such as robotics, autonomous vehicles or video games.\n\nLLM applications: By using LangGraph‚Äôs capabilities, developers can build more sophisticated AI models that learn and improve over time. Norwegian Cruise Line uses LangGraph to compile, construct and refine guest-facing AI solutions. This capability allows for improved and personalized guest experiences. [...] By using a graph-based architecture, LangGraph enables users to scale artificial intelligence workflows without slowing down or sacrificing efficiency. LangGraph uses enhanced decision-making by modeling complex relationships between nodes, which means it uses AI agents to analyze their past actions and feedback. In the world of LLMs, this process is referred to as reflection.", "score": 0.9353998}, {"title": "LangGraph Quickstart - GitHub Pages", "url": "https://langchain-ai.github.io/langgraph/tutorials/introduction/", "content": "[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-9-1)Assistant: LangGraph is a library designed to help build stateful multi-agent applications using language models. It provides tools for creating workflows and state machines to coordinate multiple AI agents or language model interactions. LangGraph is built on top of LangChain, leveraging its components while adding graph-based coordination capabilities. It\'s particularly useful for developing more complex, [...] [](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-21-6)   LangGraph is a library designed for building stateful, multi-actor applications with Large Language Models (LLMs). It\'s particularly useful for creating agent and multi-agent workflows.\n[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-21-7)\n[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-21-8)2. Developer: [...] [](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-48-19)LangGraph is likely a framework or library designed specifically for creating AI agents with advanced capabilities. Here are a few points to consider based on this recommendation:\n[](https://langchain-ai.github.io/langgraph/tutorials/introduction/#__codelineno-48-20)", "score": 0.9328032}]',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'LangGraph is an open-source AI agent framework developed by LangChain, designed to build, deploy, and manage complex generative AI agent workflows. Here are some key points about LangGraph:',
          '### Overview',
          '- **Purpose**: LangGraph is aimed at creating, running, and optimizing large language models (LLMs) in a scalable and efficient manner.',
          '- **Graph-Based Architecture**: It uses graph-based architectures to model and manage the intricate relationships between various components of an AI agent workflow.',
          '### Features',
          '- **Agent Systems**: LangGraph provides a framework for building agent-based systems, which can be used in applications such as robotics, autonomous vehicles, or video games.',
          '- **LLM Applications**: Developers can build more sophisticated AI models that learn and improve over time. For example, Norwegian Cruise Line uses LangGraph to compile, construct, and refine guest-facing AI solutions, enhancing personalized guest experiences.',
          '- **Scalability**: By using a graph-based architecture, LangGraph enables users to scale artificial intelligence workflows without sacrificing efficiency.',
          '- **Enhanced Decision-Making**: LangGraph uses AI agents to analyze their past actions and feedback, a process referred to as "reflection" in the context of LLMs.',
          '### Developer Resources',
          '- **Quickstart Guide**: The LangGraph Quickstart guide on GitHub provides a detailed introduction to building stateful multi-agent applications using language models. It covers tools for creating workflows and state machines to coordinate multiple AI agents or language model interactions.',
          '- **Built on LangChain**: LangGraph is built on top of LangChain, leveraging its components while adding graph-based coordination capabilities. This makes it particularly useful for developing more complex, stateful, multi-actor applications with LLMs.',
          '### Further Reading',
          '- **What is LangGraph? - IBM**: [Link](https://www.ibm.com/think/topics/langgraph)',
          '- **LangGraph Quickstart - GitHub Pages**: [Link](https://langchain-ai.github.io/langgraph/tutorials/introduction/)',
          'These resources should provide a solid foundation for understanding and getting started with LangGraph. If you have any specific questions or need further details, feel free to ask!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>E agora a segunda chamada</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">user_input</span> <span class="o">=</span> <span class="p">(</span>',
          '    <span class="s2">"Ya that\'s helpful. Maybe I\'ll "</span>',
          '    <span class="s2">"build an autonomous agent with it!"</span>',
          '<span class="p">)</span>',
          '',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">(</span>',
          '    <span class="p">{</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span><span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">},],},</span>',
          '    <span class="n">config</span><span class="p">,</span>',
          '    <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="k">if</span> <span class="s2">"messages"</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Ya that\'s helpful. Maybe I\'ll build an autonomous agent with it!',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'That sounds like an exciting project! Building an autonomous agent using LangGraph can be a rewarding experience. Here are some steps and tips to help you get started:',
          '### 1. **Understand the Basics of LangGraph**',
          '- **Read the Documentation**: Start with the official LangGraph documentation and quickstart guide. This will give you a solid understanding of the framework\'s capabilities and how to use its tools.',
          '  - **Quickstart Guide**: [LangGraph Quickstart - GitHub Pages](https://langchain-ai.github.io/langgraph/tutorials/introduction/)',
          '### 2. **Set Up Your Development Environment**',
          '- **Install LangChain and LangGraph**: Ensure you have the necessary dependencies installed. LangGraph is built on top of LangChain, so you\'ll need to set up both.',
          '  ```bash',
          '  pip install langchain langgraph',
          '  ```',
          '### 3. **Define Your Agent\'s Objectives**',
          '- **Identify the Use Case**: What specific tasks do you want your autonomous agent to perform? This could be anything from navigating a virtual environment, responding to user queries, or managing a robotic system.',
          '- **Define the State and Actions**: Determine the states your agent can be in and the actions it can take. This will help you design the state machine and workflows.',
          '### 4. **Design the Graph-Based Workflow**',
          '- **Create Nodes and Edges**: In LangGraph, you\'ll define nodes (agents or components) and edges (interactions or transitions). Each node can represent a different part of your agent\'s functionality.',
          '- **Define State Transitions**: Use the graph-based architecture to define how the agent transitions between different states based on actions and events.',
          '### 5. **Implement the Agent**',
          '- **Write the Code**: Start coding your agent using the LangGraph library. You can use the provided tools to create and manage the agent\'s workflows.',
          '  - **Example**: Here‚Äôs a simple example to get you started:',
          '    ```python',
          '    from langgraph import AgentGraph, Node, Edge',
          '    # Define nodes',
          '    node1 = Node("Sensor", process=sensor_process)',
          '    node2 = Node("Decision", process=decision_process)',
          '    node3 = Node("Actuator", process=actuator_process)',
          '    # Define edges',
          '    edge1 = Edge(node1, node2)',
          '    edge2 = Edge(node2, node3)',
          '    # Create the agent graph',
          '    agent_graph = AgentGraph()',
          '    agent_graph.add_node(node1)',
          '    agent_graph.add_node(node2)',
          '    agent_graph.add_node(node3)',
          '    agent_graph.add_edge(edge1)',
          '    agent_graph.add_edge(edge2)',
          '    # Run the graph',
          '    agent_graph.run()',
          '    ```',
          '### 6. **Test and Iterate**',
          '- **Run Simulations**: Test your agent in a simulated environment to see how it performs. Use this to identify and fix any issues.',
          '- **Refine the Model**: Based on the test results, refine your agent\'s model and workflows. You can add more nodes, edges, or improve the decision-making processes.',
          '### 7. **Deploy and Monitor**',
          '- **Deploy the Agent**: Once you are satisfied with the performance, you can deploy your agent in the real world or a production environment.',
          '- **Monitor and Maintain**: Continuously monitor the agent\'s performance and make adjustments as needed. Use feedback loops to improve the agent over time.',
          '### 8. **Community and Support**',
          '- **Join the Community**: Engage with the LangChain and LangGraph community. You can find support, share ideas, and get feedback from other developers.',
          '  - **GitHub**: [LangGraph GitHub](https://github.com/langchain-ai/langgraph)',
          '  - **Forums and Discussion Boards**: Check out forums and discussion boards related to LangGraph and LangChain.',
          '### Additional Resources',
          '- **Tutorials and Examples**: Look for tutorials and example projects to get more hands-on experience.',
          '- **Research Papers and Articles**: Read research papers and articles to deepen your understanding of AI agent design and graph-based architectures.',
          'Good luck with your project! If you have any specific questions or need further guidance, feel free to ask.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos o hist√≥rico do estado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">to_replay</span> <span class="o">=</span> <span class="kc">None</span>',
          '<span class="k">for</span> <span class="n">state</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">get_state_history</span><span class="p">(</span><span class="n">config</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Num Messages: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="o">.</span><span class="n">values</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])</span><span class="si">}</span><span class="s2">, Next: </span><span class="si">{</span><span class="n">state</span><span class="o">.</span><span class="n">next</span><span class="si">}</span><span class="s2">, checkpoint id = </span><span class="si">{</span><span class="n">state</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s2">"configurable"</span><span class="p">][</span><span class="s1">\'checkpoint_id\'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"-"</span> <span class="o">*</span> <span class="mi">80</span><span class="p">)</span>',
          '',
          '    <span class="c1"># Get state when first iteracction us done</span>',
          '    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="o">.</span><span class="n">next</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>',
          '        <span class="n">to_replay</span> <span class="o">=</span> <span class="n">state</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Num Messages: 8, Next: (), checkpoint id = 1f03263e-a96c-6446-8008-d2c11df0b6cb',
          '--------------------------------------------------------------------------------',
          'Num Messages: 7, Next: (\'chatbot_node\',), checkpoint id = 1f03263d-7a35-6660-8007-a37d4b584c88',
          '--------------------------------------------------------------------------------',
          'Num Messages: 6, Next: (\'__start__\',), checkpoint id = 1f03263d-7a32-624e-8006-6509bbf32ebe',
          '--------------------------------------------------------------------------------',
          'Num Messages: 6, Next: (), checkpoint id = 1f03263d-7a1a-6f36-8005-f10b5d83f22c',
          '--------------------------------------------------------------------------------',
          'Num Messages: 5, Next: (\'chatbot_node\',), checkpoint id = 1f03263c-c53f-6666-8004-c6d35868dd73',
          '--------------------------------------------------------------------------------',
          'Num Messages: 4, Next: (\'tools\',), checkpoint id = 1f03263c-b14b-68f8-8003-28558fa38dbc',
          '--------------------------------------------------------------------------------',
          'Num Messages: 3, Next: (\'chatbot_node\',), checkpoint id = 1f03263c-a66b-6276-8002-2dc89fca4d99',
          '--------------------------------------------------------------------------------',
          'Num Messages: 2, Next: (\'tools\',), checkpoint id = 1f03263c-8c7c-68ec-8001-fb8a9aa300b0',
          '--------------------------------------------------------------------------------',
          'Num Messages: 1, Next: (\'chatbot_node\',), checkpoint id = 1f03263c-6d06-68d2-8000-ced2e7b8538f',
          '--------------------------------------------------------------------------------',
          'Num Messages: 0, Next: (\'__start__\',), checkpoint id = 1f03263c-6cdb-63e4-bfff-c644b57cee28',
          '--------------------------------------------------------------------------------',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">to_replay</span><span class="o">.</span><span class="n">config</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'configurable\': {\'thread_id\': \'1\', \'checkpoint_ns\': \'\', \'checkpoint_id\': \'1f03263d-7a1a-6f36-8005-f10b5d83f22c\'}}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Dando este <code>checkpoint_id</code> a <code>LangGraph</code> carrega o estado naquele momento do fluxo. Assim, criamos uma nova mensagem e a passamos para o grafo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">user_input</span> <span class="o">=</span> <span class="p">(</span>',
          '    <span class="s2">"Thanks"</span>',
          '<span class="p">)</span>',
          '',
          '<span class="c1"># The `checkpoint_id` in the `to_replay.config` corresponds to a state we\'ve persisted to our checkpointer.</span>',
          '<span class="n">events</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">stream</span><span class="p">({</span><span class="s2">"messages"</span><span class="p">:</span> <span class="p">[{</span><span class="s2">"role"</span><span class="p">:</span> <span class="s2">"user"</span><span class="p">,</span><span class="s2">"content"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">},],},</span>',
          '    <span class="n">to_replay</span><span class="o">.</span><span class="n">config</span><span class="p">,</span>',
          '    <span class="n">stream_mode</span><span class="o">=</span><span class="s2">"values"</span><span class="p">,</span>',
          '<span class="p">)</span>',
          '',
          '<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>',
          '    <span class="k">if</span> <span class="s2">"messages"</span> <span class="ow">in</span> <span class="n">event</span><span class="p">:</span>',
          '        <span class="n">event</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pretty_print</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '================================<span class="ansi-bold"> Human Message </span>=================================',
          'Thanks',
          '==================================<span class="ansi-bold"> Ai Message </span>==================================',
          'You\'re welcome! If you have any more questions about LangGraph or any other topic, feel free to reach out. Happy learning! üòä',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">state</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">get_state_history</span><span class="p">(</span><span class="n">config</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Num Messages: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="o">.</span><span class="n">values</span><span class="p">[</span><span class="s2">"messages"</span><span class="p">])</span><span class="si">}</span><span class="s2">, Next: </span><span class="si">{</span><span class="n">state</span><span class="o">.</span><span class="n">next</span><span class="si">}</span><span class="s2">, checkpoint id = </span><span class="si">{</span><span class="n">state</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s2">"configurable"</span><span class="p">][</span><span class="s1">\'checkpoint_id\'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"-"</span> <span class="o">*</span> <span class="mi">80</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Num Messages: 8, Next: (), checkpoint id = 1f03263f-fcb9-63a0-8008-e8c4a3fb44f9',
          '--------------------------------------------------------------------------------',
          'Num Messages: 7, Next: (\'chatbot_node\',), checkpoint id = 1f03263f-eb3b-663c-8007-72da4d16bf64',
          '--------------------------------------------------------------------------------',
          'Num Messages: 6, Next: (\'__start__\',), checkpoint id = 1f03263f-eb36-6ac4-8006-a2333805d5d6',
          '--------------------------------------------------------------------------------',
          'Num Messages: 8, Next: (), checkpoint id = 1f03263e-a96c-6446-8008-d2c11df0b6cb',
          '--------------------------------------------------------------------------------',
          'Num Messages: 7, Next: (\'chatbot_node\',), checkpoint id = 1f03263d-7a35-6660-8007-a37d4b584c88',
          '--------------------------------------------------------------------------------',
          'Num Messages: 6, Next: (\'__start__\',), checkpoint id = 1f03263d-7a32-624e-8006-6509bbf32ebe',
          '--------------------------------------------------------------------------------',
          'Num Messages: 6, Next: (), checkpoint id = 1f03263d-7a1a-6f36-8005-f10b5d83f22c',
          '--------------------------------------------------------------------------------',
          'Num Messages: 5, Next: (\'chatbot_node\',), checkpoint id = 1f03263c-c53f-6666-8004-c6d35868dd73',
          '--------------------------------------------------------------------------------',
          'Num Messages: 4, Next: (\'tools\',), checkpoint id = 1f03263c-b14b-68f8-8003-28558fa38dbc',
          '--------------------------------------------------------------------------------',
          'Num Messages: 3, Next: (\'chatbot_node\',), checkpoint id = 1f03263c-a66b-6276-8002-2dc89fca4d99',
          '--------------------------------------------------------------------------------',
          'Num Messages: 2, Next: (\'tools\',), checkpoint id = 1f03263c-8c7c-68ec-8001-fb8a9aa300b0',
          '--------------------------------------------------------------------------------',
          'Num Messages: 1, Next: (\'chatbot_node\',), checkpoint id = 1f03263c-6d06-68d2-8000-ced2e7b8538f',
          '--------------------------------------------------------------------------------',
          'Num Messages: 0, Next: (\'__start__\',), checkpoint id = 1f03263c-6cdb-63e4-bfff-c644b57cee28',
          '--------------------------------------------------------------------------------',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      







    </div>

  </section>

</PostLayout>
