---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'C√°lculo de matriz com NumPy';
const end_url = 'numpy';
const description = 'üü¢ Aprenda a fazer todos os c√°lculos matriciais que desejar de forma √°gil com NumPy';
const keywords = 'NumPy, c√°lculo de matriz, Python, tutorial, iniciantes';
const languaje = 'PT';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/numpy-icon.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=212
    image_height=238
    image_extension=webp
    article_date=2021-04-23+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#1. Resumo"><h2>1. Resumo</h2></a>
      <a class="anchor-link" href="#2. O que e o NumPy?"><h2>2. O que √© o NumPy?</h2></a>
      <a class="anchor-link" href="#2.1. NumPy como np"><h3>2.1. NumPy como <code>np</code></h3></a>
      <a class="anchor-link" href="#3. Velocidade do NumPy"><h2>3. Velocidade do NumPy</h2></a>
      <a class="anchor-link" href="#4. Matrizes em NumPy"><h2>4. Matrizes em NumPy</h2></a>
      <a class="anchor-link" href="#4.1. Como criar matrizes"><h3>4.1. Como criar matrizes</h3></a>
      <a class="anchor-link" href="#4.2. Dimensoes das matrizes"><h3>4.2. Dimens√µes das matrizes</h3></a>
      <a class="anchor-link" href="#4.3. Tamanho das matrizes"><h3>4.3. Tamanho das matrizes</h3></a>
      <a class="anchor-link" href="#5. Tipo de dados"><h2>5. Tipo de dados</h2></a>
      <a class="anchor-link" href="#6. Operacoes matematicas"><h2>6. Opera√ß√µes matem√°ticas</h2></a>
      <a class="anchor-link" href="#6.1. Operacoes basicas"><h3>6.1. Opera√ß√µes b√°sicas</h3></a>
      <a class="anchor-link" href="#6.2. Funcoes sobre matrizes"><h3>6.2. Fun√ß√µes sobre matrizes</h3></a>
      <a class="anchor-link" href="#6.3. Transmissao"><h3>6.3. Transmiss√£o</h3></a>
      <a class="anchor-link" href="#7. Indexacao de matrizes"><h2>7. Indexa√ß√£o de matrizes</h2></a>
      <a class="anchor-link" href="#7.1. Fatias de matrizes"><h3>7.1. Fatias de matrizes</h3></a>
      <a class="anchor-link" href="#7.2. Iteracao sobre matrizes"><h3>7.2. Itera√ß√£o sobre matrizes</h3></a>
      <a class="anchor-link" href="#8. Copia de matrizes"><h2>8. C√≥pia de matrizes</h2></a>
      <a class="anchor-link" href="#8.1. Copia"><h3>8.1. C√≥pia</h3></a>
      <a class="anchor-link" href="#8.2. Visao"><h3>8.2. Vis√£o</h3></a>
      <a class="anchor-link" href="#8.3. Proprietario dos dados"><h3>8.3. Propriet√°rio dos dados</h3></a>
      <a class="anchor-link" href="#9. Forma das matrizes"><h2>9. Forma das matrizes</h2></a>
      <a class="anchor-link" href="#9.1. Reshape"><h3>9.1. Reshape</h3></a>
      <a class="anchor-link" href="#9.2. Dimensao desconhecida"><h3>9.2. Dimens√£o desconhecida</h3></a>
      <a class="anchor-link" href="#9.3. Achatamento de matrizes"><h3>9.3. Achatamento de matrizes</h3></a>
      <a class="anchor-link" href="#9.4. Matriz transposta"><h3>9.4. Matriz transposta</h3></a>
      <a class="anchor-link" href="#10. Empilhamento de matrizes"><h2>10. Empilhamento de matrizes</h2></a>
      <a class="anchor-link" href="#10.1. Empilhamento vertical"><h3>10.1. Empilhamento vertical</h3></a>
      <a class="anchor-link" href="#10.2. Empilhamento horizontal"><h3>10.2. Empilhamento horizontal</h3></a>
      <a class="anchor-link" href="#10.3. Empilhamento em profundidade"><h3>10.3. Empilhamento em profundidade</h3></a>
      <a class="anchor-link" href="#10.3. Empilhamento personalizado"><h3>10.3. Empilhamento personalizado</h3></a>
      <a class="anchor-link" href="#11. Dividir matrizes"><h2>11. Dividir matrizes</h2></a>
      <a class="anchor-link" href="#11.1. Dividir verticalmente"><h3>11.1. Dividir verticalmente</h3></a>
      <a class="anchor-link" href="#11.2. Dividir horizontalmente"><h3>11.2. Dividir horizontalmente</h3></a>
      <a class="anchor-link" href="#11.3. Dividir de maneira personalizada"><h3>11.3. Dividir de maneira personalizada</h3></a>
      <a class="anchor-link" href="#12. Busca em matrizes"><h2>12. Busca em matrizes</h2></a>
      <a class="anchor-link" href="#13. Ordenar matrizes"><h2>13. Ordenar matrizes</h2></a>
      <a class="anchor-link" href="#14. Filtros em matrizes"><h2>14. Filtros em matrizes</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Aviso: Este post foi traduzido para o portugu√™s usando um modelo de tradu√ß√£o autom√°tica. Por favor, me avise se encontrar algum erro.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="1. Resumo">1. Resumo<a class="anchor-link" href="#1. Resumo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 77" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver uma pequena introdu√ß√£o √† biblioteca de c√°lculo matricial <code>NumPy</code>. Esta biblioteca est√° projetada para todo tipo de c√°lculo matricial, ent√£o vamos nos concentrar apenas na parte que ser√° √∫til para entender os c√°lculos dentro das redes neurais, deixando de lado coisas interessantes como o uso da biblioteca para a √°lgebra linear.</p>
      <p align="center">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/numpy-icon.webp">
      </p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="2. O que e o NumPy?">2. O que √© o NumPy?<a class="anchor-link" href="#2. O que e o NumPy?"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 78" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>NumPy √© uma biblioteca de Python projetada para realizar c√°lculos matriciais. O c√°lculo matricial √© algo que se utiliza muito na ci√™ncia em geral e na ci√™ncia de dados em particular, por isso √© necess√°rio ter uma biblioteca que fa√ßa isso muito bem.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Seu nome significa Numerical Python</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Seu objeto principal √© o <code>ndarray</code>, que encapsula matrizes de dimens√£o <code>n</code> de tipos de dados homog√™neos, ao contr√°rio das listas do Python, que podem ter dados de diferentes tipos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>NumPy tem como objetivo realizar o c√°lculo matricial muito mais r√°pido do que com as listas do Python, mas como isso √© poss√≠vel?</p>
      <ul>
        <li>NumPy utiliza c√≥digo compilado, enquanto Python utiliza c√≥digo interpretado. A diferen√ßa √© que Python no momento da execu√ß√£o tem que interpretar, compilar e executar o c√≥digo, enquanto NumPy j√° est√° compilado, portanto, executa mais r√°pido</li>
        <li>Os <code>ndarray</code>s t√™m um tamanho fixo, ao contr√°rio das listas do Python que s√£o din√¢micas. Se no NumPy quiser modificar o tamanho de uma matriz, ser√° criada uma nova e a antiga ser√° eliminada.</li>
        <li>Todos os elementos dos <code>ndarray</code>s s√£o do mesmo tipo de dado, ao contr√°rio das listas de Python que podem ter elementos de diferentes tipos</li>
        <li>Parte do c√≥digo do NumPy est√° escrita em C/C++ (muito mais r√°pida que Python)</li>
        <li>Os dados das matrizes s√£o armazenados na mem√≥ria de maneira cont√≠nua, ao contr√°rio das listas do Python, o que faz com que seja muito mais r√°pido manipul√°-los</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>NumPy oferece a facilidade de usar c√≥digo simples de escrever e de ler, mas que est√° escrito e pr√©-compilado em C, o que o torna muito mais r√°pido.</p>
      <p>Suponhamos que queremos multiplicar dois vetores, isso seria feito em C da seguinte maneira:</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-c">for (i = 0; i &lt; rows; i++): &#123;<br>  for (j = 0; j &lt; columns; j++): &#123;<br>    c[i][j] = a[i][j]*b[i][j];<br>  &#125;<br>&#125;</code></pre></div>
            </section>
      <p>NumPy oferece a possibilidade de executar este c√≥digo por baixo, mas de uma maneira muito mais f√°cil de escrever e de entender atrav√©s de</p>
      <div class='highlight'><pre><code class="language-python">c = a * b</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>NumPy oferece c√≥digo vetorizado, o que significa n√£o ter que escrever la√ßos, mas que, no entanto, est√£o sendo executados em segundo plano em c√≥digo C otimizado e pr√©-compilado. Isso tem as seguintes vantagens:</p>
      <ul>
        <li>O c√≥digo √© mais f√°cil de escrever e ler</li>
        <li>Como s√£o necess√°rias menos linhas de c√≥digo, h√° menor probabilidade de introduzir erros</li>
        <li>O c√≥digo se assemelha mais √† nota√ß√£o matem√°tica</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.1. NumPy como np">2.1. NumPy como <code>np</code><a class="anchor-link" href="#2.1. NumPy como np"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 79" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Geralmente na hora de importar NumPy costuma-se import√°-lo com o alias de <code>np</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">numpy</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nn">np</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '1.18.1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="3. Velocidade do NumPy">3. Velocidade do NumPy<a class="anchor-link" href="#3. Velocidade do NumPy"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 80" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como foi explicado, o NumPy realiza o c√°lculo muito mais r√°pido do que as listas do Python. Vamos ver um exemplo no qual √© realizado o produto escalar de duas matrizes, usando listas do Python e usando <code>ndarray</code>s.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">time</span><span class="w"> </span><span class="kn">import</span> <span class="n">time</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Dimensi√≥n de las matrices</span>',
      '<span class="n">dim</span> <span class="o">=</span> <span class="mi">1000</span>',
      '<span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="n">dim</span><span class="p">,</span> <span class="n">dim</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se crean dos ndarrays de NumPy de dimensi√≥n dim x dim</span>',
      '<span class="n">ndarray_a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">shape</span><span class="p">)</span>',
      '<span class="n">ndarray_b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">shape</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se crean dos listas de Python de dimensi√≥n dim x dim a partir de los ndarrays</span>',
      '<span class="n">list_a</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">ndarray_a</span><span class="p">)</span>',
      '<span class="n">list_b</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">ndarray_b</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Se crean el ndarray y la lista de Python donde se guardar√°n los resultados</span>',
      '<span class="n">ndarray_c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">shape</span><span class="p">)</span>',
      '<span class="n">list_c</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">ndarray_c</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Producto escalar de dos listas de python</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>',
      '<span class="k">for</span> <span class="n">fila</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">dim</span><span class="p">):</span>',
      '<span class="w">  </span><span class="k">for</span> <span class="n">columna</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">dim</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">list_c</span><span class="p">[</span><span class="n">fila</span><span class="p">][</span><span class="n">columna</span><span class="p">]</span> <span class="o">=</span> <span class="n">list_a</span><span class="p">[</span><span class="n">fila</span><span class="p">][</span><span class="n">columna</span><span class="p">]</span> <span class="o">*</span> <span class="n">list_b</span><span class="p">[</span><span class="n">fila</span><span class="p">][</span><span class="n">columna</span><span class="p">]</span>',
      '<span class="n">t</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>',
      '<span class="n">t_listas</span> <span class="o">=</span> <span class="n">t</span><span class="o">-</span><span class="n">t0</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Tiempo para realizar el producto escalar de dos listas de Python de dimensiones </span><span class="si">{</span><span class="n">dim</span><span class="si">}</span><span class="s2">x</span><span class="si">{</span><span class="n">dim</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">t_listas</span><span class="si">:</span><span class="s2">.4f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="w"> </span>',
      '<span class="c1"># Producto escalar de dos ndarrays de NumPy</span>',
      '<span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>',
      '<span class="n">ndarray_c</span> <span class="o">=</span> <span class="n">ndarray_a</span> <span class="o">*</span> <span class="n">ndarray_b</span>',
      '<span class="n">t</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>',
      '<span class="n">t_ndarrays</span> <span class="o">=</span> <span class="n">t</span><span class="o">-</span><span class="n">t0</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Tiempo para realizar el producto escalar de dos ndarrays de NumPy de dimensiones </span><span class="si">{</span><span class="n">dim</span><span class="si">}</span><span class="s2">x</span><span class="si">{</span><span class="n">dim</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">t_ndarrays</span><span class="si">:</span><span class="s2">.4f</span><span class="si">}</span><span class="s2"> ms&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Comparaci√≥n de tiempos</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Hacer el c√°lculo con listas de Python tarda </span><span class="si">{</span><span class="n">t_listas</span><span class="o">/</span><span class="n">t_ndarrays</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> veces m√°s r√°pido que con ndarrays de NumPy&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Tiempo para realizar el producto escalar de dos listas de Python de dimensiones 1000x1000: 0.5234 ms',
          'Tiempo para realizar el producto escalar de dos ndarrays de NumPy de dimensiones 1000x1000: 0.0017 ms',
          'Hacer el c√°lculo con listas de Python tarda 316.66 veces m√°s r√°pido que con ndarrays de NumPy',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="4. Matrizes em NumPy">4. Matrizes em NumPy<a class="anchor-link" href="#4. Matrizes em NumPy"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 81" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Em NumPy, uma matriz √© um objeto <code>ndarray</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[1 2 3 4 5]',
          '&amp;lt;class &#x27;numpy.ndarray&#x27;&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.1. Como criar matrizes">4.1. Como criar matrizes<a class="anchor-link" href="#4.1. Como criar matrizes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 82" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com o m√©todo <code>array()</code> √© poss√≠vel criar <code>ndarray</code>s inserindo listas do Python (como no exemplo anterior) ou tuplas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[1 2 3 4 5]',
          '&amp;lt;class &#x27;numpy.ndarray&#x27;&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Com o m√©todo <code>zeros()</code> √© poss√≠vel criar matrizes cheias de zeros</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[[0. 0. 0. 0.]',
          '[0. 0. 0. 0.]',
          '[0. 0. 0. 0.]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O m√©todo <code>zeros_like(A)</code> retorna uma matriz com a mesma forma da matriz A, mas preenchida com zeros.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>',
      '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros_like</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[0 0 0 0 0]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Com o m√©todo <code>ones()</code> √© poss√≠vel criar matrizes cheias de uns</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[[1. 1. 1.]',
          '[1. 1. 1.]',
          '[1. 1. 1.]',
          '[1. 1. 1.]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O m√©todo <code>ones_like(A)</code> retorna uma matriz com a mesma forma da matriz A, mas preenchida com uns.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>',
      '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones_like</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[1 1 1 1 1]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Com o m√©todo <code>empty()</code> podemos criar matrizes com as dimens√µes que desejarmos, mas inicializadas aleatoriamente.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">((</span><span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[[4.66169180e-310 2.35541533e-312 2.41907520e-312]',
          '[2.14321575e-312 2.46151512e-312 2.31297541e-312]',
          '[2.35541533e-312 2.05833592e-312 2.22809558e-312]',
          '[2.56761491e-312 2.48273508e-312 2.05833592e-312]',
          '[2.05833592e-312 2.29175545e-312 2.07955588e-312]',
          '[2.14321575e-312 0.00000000e+000 0.00000000e+000]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O m√©todo <code>empty_like(A)</code> retorna uma matriz com a mesma forma da matriz A, mas inicializada aleatoriamente.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>',
      '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty_like</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[4607182418800017408 4611686018427387904 4613937818241073152',
          '4616189618054758400 4617315517961601024]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Com o m√©todo <code>arange(start, stop, step)</code> √© poss√≠vel criar matrizes em um intervalo determinado. Este m√©todo √© semelhante ao m√©todo <code>range()</code> do Python.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[10 15 20 25]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Quando <code>arange</code> √© usado com argumentos de ponto flutuante, geralmente n√£o √© poss√≠vel prever o n√∫mero de elementos obtidos, devido √† precis√£o de ponto flutuante ser finita.</p>
      <p>Por esse motivo, √© geralmente melhor usar a fun√ß√£o <code>linspace(start, stop, n)</code> que recebe como argumento a quantidade de elementos que desejamos, em vez do passo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[0.   0.25 0.5  0.75 1.   1.25 1.5  1.75 2.  ]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por √∫ltimo, se quisermos criar matrizes com n√∫meros aleat√≥rios, podemos usar a fun√ß√£o <code>random.rand</code> com uma tupla com as dimens√µes como par√¢metro.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[[0.32726085 0.65571767 0.73126697]',
          '[0.91938206 0.9862451  0.95033649]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.2. Dimensoes das matrizes">4.2. Dimens√µes das matrizes<a class="anchor-link" href="#4.2. Dimensoes das matrizes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 83" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Em NumPy podemos criar matrizes de qualquer dimens√£o. Para obter a dimens√£o de um array usamos o m√©todo <code>ndim</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Matriz de dimens√£o 0, o que equivaleria a um n√∫mero</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">ndim</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '42',
          '0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Matriz de dimens√£o 1, o que equivaleria a um vetor</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">ndim</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[1 2 3 4 5]',
          '1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Matriz de dimens√£o 2, o que equivaleria a uma matriz</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">ndim</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[[ 1  2  3  4  5]',
          '[ 6  7  8  9 10]]',
          '2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Matriz de dimens√£o 3</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
      '<span class="w">                </span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">ndim</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[[[ 1  2  3  4  5]',
          '&#x20;&#x20;[ 6  7  8  9 10]]',
          '[[11 12 13 14 15]',
          '&#x20;&#x20;[16 17 18 19 20]]]',
          '3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Matriz de dimens√£o N. Na hora de criar <code>ndarray</code>s, pode-se estabelecer o n√∫mero de dimens√µes por meio do par√¢metro <code>ndim</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="n">ndmin</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">ndim</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[[[[[[1 2 3 4 5]]]]]]',
          '6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.3. Tamanho das matrizes">4.3. Tamanho das matrizes<a class="anchor-link" href="#4.3. Tamanho das matrizes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 84" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos ver o tamanho da matriz em vez de sua dimens√£o, podemos usar o m√©todo <code>shape</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
      '<span class="w">                </span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(2, 2, 5)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="5. Tipo de dados">5. Tipo de dados<a class="anchor-link" href="#5. Tipo de dados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 85" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Os dados que as matrizes do NumPy podem armazenar s√£o os seguintes:</p>
      <ul>
        <li><code>i</code> - inteiro</li>
        <li><code>b</code> - booleano</li>
        <li><code>u</code> - inteiro sem sinal</li>
        <li><code>f</code> - flutuante</li>
        <li><code>c</code> - Complexo de ponto flutuante</li>
        <li><code>m</code> - Timedelta</li>
        <li><code>M</code> - DataHora</li>
        <li><code>O</code> - Objeto</li>
        <li><code>S</code> - string</li>
        <li><code>U</code> - String de Unicode</li>
        <li><code>V</code> - Fragmento de mem√≥ria fixo para outro tipo (void)</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos verificar o tipo de dados de uma matriz usando <code>dtype</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="s1">&#39;apple&#39;</span><span class="p">,</span> <span class="s1">&#39;banana&#39;</span><span class="p">,</span> <span class="s1">&#39;cherry&#39;</span><span class="p">])</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'int64',
          '&amp;lt;U6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Tamb√©m podemos criar matrizes indicando o tipo de dado que queremos que tenha atrav√©s de <code>dtype</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">&#39;i&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Enteros:&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">&#39;f&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Float:&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">&#39;f&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Complejos:&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">&#39;S&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">String:&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">&#39;U&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Unicode string:&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">&#39;O&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Objeto:&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Enteros:',
          '[1 2 3 4]',
          'int32',
          'Float:',
          '[1. 2. 3. 4.]',
          'float32',
          'Complejos:',
          '[1. 2. 3. 4.]',
          'float32',
          'String:',
          '[b&#x27;1&#x27; b&#x27;2&#x27; b&#x27;3&#x27; b&#x27;4&#x27;]',
          '|S1',
          'Unicode string:',
          '[&#x27;1&#x27; &#x27;2&#x27; &#x27;3&#x27; &#x27;4&#x27;]',
          '&amp;lt;U1',
          'Objeto:',
          '[1 2 3 4]',
          'object',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="6. Operacoes matematicas">6. Opera√ß√µes matem√°ticas<a class="anchor-link" href="#6. Operacoes matematicas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 86" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.1. Operacoes basicas">6.1. Opera√ß√µes b√°sicas<a class="anchor-link" href="#6.1. Operacoes basicas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 87" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As opera√ß√µes matriciais s√£o realizadas elemento a elemento, por exemplo, se somarmos duas matrizes, ser√£o somados os elementos de cada matriz na mesma posi√ß√£o, assim como √© feito na soma matem√°tica de duas matrizes.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
      '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz A: tama√±o </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz B: tama√±o </span><span class="si">{</span><span class="n">B</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">B</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz C: tama√±o </span><span class="si">{</span><span class="n">C</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">D</span> <span class="o">=</span> <span class="n">A</span> <span class="o">-</span> <span class="n">B</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz D: tama√±o </span><span class="si">{</span><span class="n">D</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">D</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Matriz A: tama√±o (3,)',
          '[1 2 3]',
          'Matriz B: tama√±o (3,)',
          '[1 2 3]',
          'Matriz C: tama√±o (3,)',
          '[2 4 6]',
          'Matriz D: tama√±o (3,)',
          '[0 0 0]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>No entanto, se fizermos a multiplica√ß√£o de duas matrizes, tamb√©m √© feita a multiplica√ß√£o de cada elemento das matrizes (produto escalar).</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
      '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz A: tama√±o </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz B: tama√±o </span><span class="si">{</span><span class="n">B</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">*</span> <span class="n">B</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz C: tama√±o </span><span class="si">{</span><span class="n">C</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Matriz A: tama√±o (2, 2)',
          '[[3 5]',
          '[4 1]]',
          'Matriz B: tama√±o (2, 2)',
          '[[ 1  2]',
          '[-3  0]]',
          'Matriz C: tama√±o (2, 2)',
          '[[  3  10]',
          '[-12   0]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para fazer o produto matricial que tem sido ensinado em matem√°tica h√° toda a vida, √© necess√°rio usar o operador <code>@</code> ou o m√©todo <code>dot</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]])</span>',
      '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz A: tama√±o </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz B: tama√±o </span><span class="si">{</span><span class="n">B</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">@</span> <span class="n">B</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz C: tama√±o </span><span class="si">{</span><span class="n">C</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">D</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz D: tama√±o </span><span class="si">{</span><span class="n">D</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">D</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Matriz A: tama√±o (3, 2)',
          '[[ 3  5]',
          '[ 4  1]',
          '[ 6 -1]]',
          'Matriz B: tama√±o (2, 3)',
          '[[ 1  2  3]',
          '[-3  0  4]]',
          'Matriz C: tama√±o (3, 3)',
          '[[-12   6  29]',
          '[  1   8  16]',
          '[  9  12  14]]',
          'Matriz D: tama√±o (3, 3)',
          '[[-12   6  29]',
          '[  1   8  16]',
          '[  9  12  14]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos modificar uma matriz existente em vez de criar uma nova, podemos usar os operadores <code>+=</code>, <code>-=</code> ou <code>*=</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
      '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz A: tama√±o </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz B: tama√±o </span><span class="si">{</span><span class="n">B</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">A</span> <span class="o">+=</span> <span class="n">B</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz A tras suma: tama√±o </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">A</span> <span class="o">-=</span> <span class="n">B</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz A tras resta: tama√±o </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">A</span> <span class="o">*=</span> <span class="n">B</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz A tras multiplicaci√≥n: tama√±o </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Matriz A: tama√±o (2, 2)',
          '[[3 5]',
          '[4 1]]',
          'Matriz B: tama√±o (2, 2)',
          '[[ 1  2]',
          '[-3  0]]',
          'Matriz A tras suma: tama√±o (2, 2)',
          '[[4 7]',
          '[1 1]]',
          'Matriz A tras resta: tama√±o (2, 2)',
          '[[3 5]',
          '[4 1]]',
          'Matriz A tras multiplicaci√≥n: tama√±o (2, 2)',
          '[[  3  10]',
          '[-12   0]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Opera√ß√µes podem ser realizadas em todos os elementos de uma matriz, isso √© poss√≠vel gra√ßas a uma propriedade chamada <code>broadcasting</code> que veremos com mais detalhes posteriormente.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz A: tama√±o </span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">B</span> <span class="o">=</span> <span class="n">A</span> <span class="o">*</span> <span class="mi">2</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz B: tama√±o </span><span class="si">{</span><span class="n">B</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">**</span> <span class="mi">2</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz C: tama√±o </span><span class="si">{</span><span class="n">C</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">D</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Matriz D: tama√±o </span><span class="si">{</span><span class="n">D</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">D</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Matriz A: tama√±o (2, 2)',
          '[[3 5]',
          '[4 1]]',
          'Matriz B: tama√±o (2, 2)',
          '[[ 6 10]',
          '[ 8  2]]',
          'Matriz C: tama√±o (2, 2)',
          '[[ 9 25]',
          '[16  1]]',
          'Matriz D: tama√±o (2, 2)',
          '[[ 0.28224002 -1.91784855]',
          '[-1.51360499  1.68294197]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.2. Funcoes sobre matrizes">6.2. Fun√ß√µes sobre matrizes<a class="anchor-link" href="#6.2. Funcoes sobre matrizes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 88" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como pode ser visto no √∫ltimo c√°lculo, NumPy oferece operadores de fun√ß√µes sobre matrizes, h√° uma infinidade de <a href="https://numpy.org/doc/stable/reference/routines.html" target="_blank" rel="nofollow noreferrer">fun√ß√µes</a> que podem ser realizadas sobre matrizes, matem√°ticas, l√≥gicas, de √°lgebra linear, etc. A seguir mostramos algumas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;A</span><span class="se">\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;exp(A)</span><span class="se">\n</span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">A</span><span class="p">)</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;sqrt(A)</span><span class="se">\n</span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">A</span><span class="p">)</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;cos(A)</span><span class="se">\n</span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">A</span><span class="p">)</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'A',
          '[[3 5]',
          '[4 1]]',
          'exp(A)',
          '[[ 20.08553692 148.4131591 ]',
          '[ 54.59815003   2.71828183]]',
          'sqrt(A)',
          '[[1.73205081 2.23606798]',
          '[2.         1.        ]]',
          'cos(A)',
          '[[-0.9899925   0.28366219]',
          '[-0.65364362  0.54030231]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>H√° algumas fun√ß√µes que retornam informa√ß√µes das matrizes, como a m√©dia</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;A</span><span class="se">\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;A.mean()</span><span class="se">\n</span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'A',
          '[[3 5]',
          '[4 1]]',
          'A.mean()',
          '3.25',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>No entanto, podemos obter tais informa√ß√µes de cada eixo por meio do atributo <code>axis</code>. Se for 0, √© feito em cada coluna; enquanto se for 1, √© feito em cada linha.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;A</span><span class="se">\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;A.mean() columnas</span><span class="se">\n</span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;A.mean() filas</span><span class="se">\n</span><span class="si">{</span><span class="n">A</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'A',
          '[[3 5]',
          '[4 1]]',
          'A.mean() columnas',
          '[3.5 3. ]',
          'A.mean() filas',
          '[4.  2.5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.3. Transmissao">6.3. Transmiss√£o<a class="anchor-link" href="#6.3. Transmissao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 89" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Opera√ß√µes matriciais podem ser realizadas com matrizes de diferentes dimens√µes. Neste caso, o NumPy detectar√° isso e far√° uma proje√ß√£o da menor matriz at√© igual√°-la √† maior.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/numpy_broadcasting.webp" alt="numpy_broadcasting">
      <p>Esta √© uma grande qualidade do NumPy, que permite realizar c√°lculos em matrizes sem ter que se preocupar com a correspond√™ncia das dimens√µes dessas matrizes.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;A</span><span class="se">\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">B</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="mi">5</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;B</span><span class="se">\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'A',
          '[1 2 3]',
          'B',
          '[6 7 8]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
      '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;A</span><span class="se">\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;B</span><span class="se">\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">B</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;C</span><span class="se">\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'A',
          '[1 2 3]',
          'B',
          '[[1. 1. 1.]',
          '[1. 1. 1.]',
          '[1. 1. 1.]]',
          'C',
          '[[2. 3. 4.]',
          '[2. 3. 4.]',
          '[2. 3. 4.]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>',
      '<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;A</span><span class="se">\n</span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;B</span><span class="se">\n</span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">C</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">B</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;C</span><span class="se">\n</span><span class="si">{</span><span class="n">C</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'A',
          '[1 2 3]',
          'B',
          '[[1]',
          '[2]',
          '[3]]',
          'C',
          '[[2 3 4]',
          '[3 4 5]',
          '[4 5 6]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="7. Indexacao de matrizes">7. Indexa√ß√£o de matrizes<a class="anchor-link" href="#7. Indexacao de matrizes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 90" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O indexa√ß√£o de matrizes √© feita da mesma forma que com as listas do Python</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
      '<span class="n">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>No caso de ter mais de uma dimens√£o, deve-se indicar o √≠ndice em cada uma delas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]])</span>',
      '<span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '8',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se usar a indexa√ß√£o negativa</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '9',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Em caso de n√£o indicar um dos eixos, considera-se que se quer o completo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]])</span>',
      '<span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'array([ 6,  7,  8,  9, 10])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.1. Fatias de matrizes">7.1. Fatias de matrizes<a class="anchor-link" href="#7.1. Fatias de matrizes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 91" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Na hora de indexar, podemos ficar com partes de matrizes da mesma forma que era feito com as listas do Python.</p>
      <p>Lembre-se de que era feito da seguinte maneira:</p>
      <p><code>in√≠cio:fim:passo</code></p>
      <p>Onde o intervalo vai do <code>start</code> (inclusivo) at√© o <code>stop</code> (exclusivo) com um passo de <code>step</code></p>
      <p>Se <code>step</code> n√£o for indicado, por padr√£o √© 1</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por exemplo, se quisermos itens da segunda linha e da segunda √† quarta coluna:</p>
      <ul>
        <li>Selecionamos a segunda linha com um 1 (j√° que se come√ßa a contar do 0)</li>
        <li>Selecionamos da segunda √† quarta linha usando 1:4, onde o 1 indica a segunda coluna e o 4 indica a quinta (j√° que o segundo n√∫mero indica a coluna em que se termina sem incluir essa coluna). Os dois n√∫meros levando em conta que a contagem come√ßa a partir de 0</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[[ 1  2  3  4  5]',
          '[ 6  7  8  9 10]]',
          '[7 8 9]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos pegar desde uma posi√ß√£o at√© o final</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">:]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'array([ 8,  9, 10])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Desde o in√≠cio at√© uma posi√ß√£o</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">:</span><span class="mi">3</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'array([6, 7, 8])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Definir o intervalo com n√∫meros negativos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'array([8, 9])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Escolher o passo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'array([7, 9])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.2. Iteracao sobre matrizes">7.2. Itera√ß√£o sobre matrizes<a class="anchor-link" href="#7.2. Iteracao sobre matrizes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 92" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A itera√ß√£o sobre matrizes multidimensionais √© realizada em rela√ß√£o ao primeiro eixo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">M</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span> <span class="p">[[[</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]],</span>',
      '<span class="w">               </span><span class="p">[[</span><span class="mi">100</span><span class="p">,</span><span class="mi">101</span><span class="p">,</span><span class="mi">102</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">110</span><span class="p">,</span><span class="mi">112</span><span class="p">,</span><span class="mi">113</span><span class="p">]]])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Matriz de dimensi√≥n: </span><span class="si">{</span><span class="n">M</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="k">for</span> <span class="n">fila</span> <span class="ow">in</span> <span class="n">M</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Fila </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1">: </span><span class="si">{</span><span class="n">fila</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="w">  </span><span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Matriz de dimensi√≥n: (2, 2, 3)',
          'Fila 0: [[ 0  1  2]',
          '[10 12 13]]',
          'Fila 1: [[100 101 102]',
          '[110 112 113]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>No entanto, se o que queremos √© iterar por cada item, podemos usar o m√©todo 'flat'</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="k">for</span> <span class="n">fila</span> <span class="ow">in</span> <span class="n">M</span><span class="o">.</span><span class="n">flat</span><span class="p">:</span>',
      '<span class="w">  </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Elemento </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1">: </span><span class="si">{</span><span class="n">fila</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="w">  </span><span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Elemento 0: 0',
          'Elemento 1: 1',
          'Elemento 2: 2',
          'Elemento 3: 10',
          'Elemento 4: 12',
          'Elemento 5: 13',
          'Elemento 6: 100',
          'Elemento 7: 101',
          'Elemento 8: 102',
          'Elemento 9: 110',
          'Elemento 10: 112',
          'Elemento 11: 113',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="8. Copia de matrizes">8. C√≥pia de matrizes<a class="anchor-link" href="#8. Copia de matrizes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 93" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Em NumPy temos duas maneiras de copiar arrays: atrav√©s de <code>copy</code>, que realiza uma c√≥pia nova do array, e atrav√©s de <code>view</code>, que realiza uma visualiza√ß√£o do array original.</p>
      <p>A c√≥pia √© propriet√°ria dos dados e qualquer altera√ß√£o realizada na c√≥pia n√£o afetar√° a matriz original, e qualquer altera√ß√£o realizada na matriz original n√£o afetar√° a c√≥pia.</p>
      <p>A visualiza√ß√£o n√£o √© propriet√°ria dos dados e qualquer altera√ß√£o realizada na c√≥pia afetar√° a matriz original, e qualquer altera√ß√£o realizada na matriz original afetar√° a c√≥pia.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.1. Copia">8.1. C√≥pia<a class="anchor-link" href="#8.1. Copia"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 94" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
      '<span class="n">copy_arr</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>',
      '<span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">42</span>',
      '<span class="n">copy_arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">43</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Original: </span><span class="si">{</span><span class="n">arr</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Copia:    </span><span class="si">{</span><span class="n">copy_arr</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Original: [42  2  3  4  5]',
          'Copia:    [ 1 43  3  4  5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.2. Visao">8.2. Vis√£o<a class="anchor-link" href="#8.2. Visao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 95" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
      '<span class="n">view_arr</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">view</span><span class="p">()</span>',
      '<span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">42</span>',
      '<span class="n">view_arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">43</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Original: </span><span class="si">{</span><span class="n">arr</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Vista:    </span><span class="si">{</span><span class="n">view_arr</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Original: [42 43  3  4  5]',
          'Vista:    [42 43  3  4  5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.3. Proprietario dos dados">8.3. Propriet√°rio dos dados<a class="anchor-link" href="#8.3. Proprietario dos dados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 96" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Diante da d√∫vida se temos uma c√≥pia ou uma vis√£o, podemos usar <code>base</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">copy_arr</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>',
      '<span class="n">view_arr</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">view</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">copy_arr</span><span class="o">.</span><span class="n">base</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">view_arr</span><span class="o">.</span><span class="n">base</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'None',
          '[1 2 3 4 5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="9. Forma das matrizes">9. Forma das matrizes<a class="anchor-link" href="#9. Forma das matrizes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 97" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos saber a forma que tem a matriz atrav√©s do m√©todo <code>shape</code>. Este nos retornar√° uma tupla, o tamanho da tupla representa as dimens√µes da matriz, em cada elemento da tupla √© indicado o n√∫mero de itens em cada uma das dimens√µes da matriz.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
      '<span class="w">                </span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[[[ 1  2  3  4  5]',
          '&#x20;&#x20;[ 6  7  8  9 10]]',
          '[[11 12 13 14 15]',
          '&#x20;&#x20;[16 17 18 19 20]]]',
          '(2, 2, 5)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.1. Reshape">9.1. Reshape<a class="anchor-link" href="#9.1. Reshape"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 98" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos mudar a forma das matrizes para aquela que desejarmos atrav√©s do m√©todo <code>reshape</code>.</p>
      <p>Por exemplo, a matriz anterior, que tem uma forma de <code>(2, 2, 4)</code>. Podemos pass√°-la para <code>(5, 4)</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr_reshape</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr_reshape</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr_reshape</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[[ 1  2  3  4]',
          '[ 5  6  7  8]',
          '[ 9 10 11 12]',
          '[13 14 15 16]',
          '[17 18 19 20]]',
          '(5, 4)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Deve-se ter em conta que para redimensionar as matrizes, o n√∫mero de itens da nova forma deve ser igual ao n√∫mero de itens da primeira forma.</p>
      <p>Isto √©, no exemplo anterior, a primeira matriz tinha 20 itens (2x2x4), e a nova matriz tem 20 itens (5x4). O que n√£o podemos fazer √© redimension√°-la para uma matriz de tamanho (3, 4), pois no total haveria 12 itens.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr_reshape</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)&amp;lt;ipython-input-12-29e85875d1df&amp;gt; in &amp;lt;module&amp;gt;()',
          '----&amp;gt; 1 arr_reshape = arr.reshape(3, 4)',
          'ValueError: cannot reshape array of size 20 into shape (3,4)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.2. Dimensao desconhecida">9.2. Dimens√£o desconhecida<a class="anchor-link" href="#9.2. Dimensao desconhecida"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 99" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>No caso de quisermos mudar a forma de uma matriz e uma das dimens√µes n√£o importar ou desconhecermos, podemos fazer com que o NumPy a calcule para n√≥s inserindo um <code>-1</code> como par√¢metro.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
      '<span class="w">                </span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">arr_reshape</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr_reshape</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr_reshape</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[[ 1  2  3  4  5  6  7  8  9 10]',
          '[11 12 13 14 15 16 17 18 19 20]]',
          '(2, 10)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Deve-se ter em conta que n√£o se pode colocar qualquer n√∫mero nas dimens√µes conhecidas. O n√∫mero de itens da matriz original deve ser um m√∫ltiplo das dimens√µes conhecidas.</p>
      <p>No exemplo anterior, a matriz tem 20 itens, que √© m√∫ltiplo de 2, dimens√£o conhecida introduzida. N√£o seria poss√≠vel colocar um 3 como dimens√£o conhecida, j√° que 20 n√£o √© m√∫ltiplo de 3, e n√£o haveria nenhum n√∫mero que pudesse ser colocado na dimens√£o desconhecida que fizesse com que, no total, houvesse 20 itens.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.3. Achatamento de matrizes">9.3. Achatamento de matrizes<a class="anchor-link" href="#9.3. Achatamento de matrizes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 100" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos aplanar as matrizes, ou seja, pass√°-las para uma √∫nica dimens√£o usando <code>reshape(-1)</code>. Desta forma, independentemente das dimens√µes da matriz original, a nova sempre ter√° uma √∫nica dimens√£o.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
      '<span class="w">                </span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">arr_flatten</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr_flatten</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr_flatten</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20]',
          '(20,)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Outra forma de aplanar uma matriz √© atrav√©s do m√©todo <code>ravel()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]],</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">]]</span>',
      '<span class="w">                </span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">arr_flatten</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">ravel</span><span class="p">()</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr_flatten</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr_flatten</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20]',
          '(20,)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.4. Matriz transposta">9.4. Matriz transposta<a class="anchor-link" href="#9.4. Matriz transposta"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 101" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se obter a transposta de uma matriz atrav√©s do m√©todo <code>T</code>. Fazer a transposta de uma matriz √© trocar as linhas pelas colunas da matriz, na imagem seguinte vemos um exemplo que esclarece melhor.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/Transpose_matrix.webp" alt="transpose_matrix">
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">9</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="n">arr_t</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">T</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr_t</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">arr_t</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[[ 1  0  6]',
          '[ 0  5  0]',
          '[ 4  0 -9]]',
          '(3, 3)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="10. Empilhamento de matrizes">10. Empilhamento de matrizes<a class="anchor-link" href="#10. Empilhamento de matrizes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 102" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="10.1. Empilhamento vertical">10.1. Empilhamento vertical<a class="anchor-link" href="#10.1. Empilhamento vertical"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 103" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Matrizes podem ser empilhadas verticalmente (juntando linhas) usando o m√©todo <code>vstack()</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>',
      '<span class="w">              </span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>',
      '<span class="w">              </span><span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>',
      '<span class="w">              </span><span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>',
      '<span class="w">              </span><span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
      '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'array([[1, 1, 1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[2, 2, 2],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[3, 3, 3],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[4, 4, 4],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[5, 5, 5],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[6, 6, 6]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se tiver matrizes com mais de 2 dimens√µes, <code>vstack()</code> empilhar√° ao longo da primeira dimens√£o.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
      '<span class="w">                </span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">]]</span>',
      '<span class="w">                </span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
      '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'array([[[1, 1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[2, 2]],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[[3, 3],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[4, 4]],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[[5, 5],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[6, 6]],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[[7, 7],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[8, 8]]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="10.2. Empilhamento horizontal">10.2. Empilhamento horizontal<a class="anchor-link" href="#10.2. Empilhamento horizontal"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 104" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Matrizes podem ser empilhadas horizontalmente (juntando colunas) atrav√©s do m√©todo <code>hstack()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>',
      '<span class="w">              </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>',
      '<span class="w">              </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>',
      '<span class="w">              </span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>',
      '<span class="w">              </span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
      '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'array([[1, 2, 3, 4, 5, 6],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[1, 2, 3, 4, 5, 6],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[1, 2, 3, 4, 5, 6]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se tiver matrizes com mais de 2 dimens√µes, <code>hstack()</code> empilhar√° ao longo da segunda dimens√£o.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
      '<span class="w">                </span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">]]</span>',
      '<span class="w">                </span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
      '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'array([[[1, 1],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[2, 2],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[5, 5],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[6, 6]],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[[3, 3],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[4, 4],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[7, 7],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[8, 8]]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Outra maneira de adicionar colunas a uma matriz √© atrav√©s do m√©todo <code>column_stack()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>',
      '<span class="w">              </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>',
      '<span class="w">              </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">column_stack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
      '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'array([[1, 2, 3, 4],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[1, 2, 3, 4],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[1, 2, 3, 4]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="10.3. Empilhamento em profundidade">10.3. Empilhamento em profundidade<a class="anchor-link" href="#10.3. Empilhamento em profundidade"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 105" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Matrizes podem ser empilhadas em profundidade (terceira dimens√£o) usando o m√©todo <code>dstack()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
      '<span class="w">                </span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
      '<span class="w">                </span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;c: </span><span class="si">{</span><span class="n">c</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;a.shape: </span><span class="si">{</span><span class="n">a</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">, b.shape: </span><span class="si">{</span><span class="n">b</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">, c.shape: </span><span class="si">{</span><span class="n">c</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'c: [[[1 1 1 1]',
          '&#x20;&#x20;[2 2 2 2]]',
          '[[3 3 3 3]',
          '&#x20;&#x20;[4 4 4 4]]]',
          'a.shape: (2, 2, 2), b.shape: (2, 2, 2), c.shape: (2, 2, 4)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se tiver matrizes com mais de 4 dimens√µes, <code>dstack()</code> empilhar√° ao longo da terceira dimens√£o.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="n">ndmin</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="n">ndmin</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;a.shape: </span><span class="si">{</span><span class="n">a</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">, b.shape: </span><span class="si">{</span><span class="n">b</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">, c.shape: </span><span class="si">{</span><span class="n">c</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'a.shape: (1, 1, 1, 5), b.shape: (1, 1, 1, 5), c.shape: (1, 1, 2, 5)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="10.3. Empilhamento personalizado">10.3. Empilhamento personalizado<a class="anchor-link" href="#10.3. Empilhamento personalizado"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 106" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por meio do m√©todo <code>concatenate()</code>, √© poss√≠vel escolher o eixo ao longo do qual as matrizes ser√£o empilhadas.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
      '<span class="w">                </span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">]]</span>',
      '<span class="w">                </span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">conc0</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="c1"># concatenamiento en el primer eje</span>',
      '<span class="n">conc1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># concatenamiento en el segundo eje</span>',
      '<span class="n">conc2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># concatenamiento en el tercer eje</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;conc0: </span><span class="si">{</span><span class="n">conc0</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;conc1: </span><span class="si">{</span><span class="n">conc1</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;conc2: </span><span class="si">{</span><span class="n">conc2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'conc0: [[[1 1]',
          '&#x20;&#x20;[2 2]]',
          '[[3 3]',
          '&#x20;&#x20;[4 4]]',
          '[[5 5]',
          '&#x20;&#x20;[6 6]]',
          '[[7 7]',
          '&#x20;&#x20;[8 8]]]',
          'conc1: [[[1 1]',
          '&#x20;&#x20;[2 2]',
          '&#x20;&#x20;[5 5]',
          '&#x20;&#x20;[6 6]]',
          '[[3 3]',
          '&#x20;&#x20;[4 4]',
          '&#x20;&#x20;[7 7]',
          '&#x20;&#x20;[8 8]]]',
          'conc2: [[[1 1 5 5]',
          '&#x20;&#x20;[2 2 6 6]]',
          '[[3 3 7 7]',
          '&#x20;&#x20;[4 4 8 8]]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="11. Dividir matrizes">11. Dividir matrizes<a class="anchor-link" href="#11. Dividir matrizes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 107" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.1. Dividir verticalmente">11.1. Dividir verticalmente<a class="anchor-link" href="#11.1. Dividir verticalmente"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 108" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Matrizes podem ser divididas verticalmente (separando linhas) atrav√©s do m√©todo <code>vsplit()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mf">1.1</span><span class="p">,</span> <span class="mf">1.2</span><span class="p">,</span> <span class="mf">1.3</span><span class="p">,</span> <span class="mf">1.4</span><span class="p">],</span>',
      '<span class="w">              </span><span class="p">[</span><span class="mf">2.1</span><span class="p">,</span> <span class="mf">2.2</span><span class="p">,</span> <span class="mf">2.3</span><span class="p">,</span> <span class="mf">2.4</span><span class="p">],</span>',
      '<span class="w">              </span><span class="p">[</span><span class="mf">3.1</span><span class="p">,</span> <span class="mf">3.2</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">],</span>',
      '<span class="w">              </span><span class="p">[</span><span class="mf">4.1</span><span class="p">,</span> <span class="mf">4.2</span><span class="p">,</span> <span class="mf">4.3</span><span class="p">,</span> <span class="mf">4.4</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="p">[</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">vsplit</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;a1: </span><span class="si">{</span><span class="n">a1</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;a2: </span><span class="si">{</span><span class="n">a2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'a1: [[1.1 1.2 1.3 1.4]',
          '[2.1 2.2 2.3 2.4]]',
          'a2: [[3.1 3.2 3.3 3.4]',
          '[4.1 4.2 4.3 4.4]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se tiver matrizes com mais de 2 dimens√µes, <code>vsplit()</code> dividir√° ao longo da primeira dimens√£o.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
      '<span class="w">                </span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="p">[</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">vsplit</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;a1: </span><span class="si">{</span><span class="n">a1</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;a2: </span><span class="si">{</span><span class="n">a2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'a1: [[[1 1]',
          '&#x20;&#x20;[2 2]]]',
          'a2: [[[3 3]',
          '&#x20;&#x20;[4 4]]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.2. Dividir horizontalmente">11.2. Dividir horizontalmente<a class="anchor-link" href="#11.2. Dividir horizontalmente"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 109" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Matrizes podem ser divididas horizontalmente (separando colunas) atrav√©s do m√©todo <code>hsplit()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mf">1.1</span><span class="p">,</span> <span class="mf">1.2</span><span class="p">,</span> <span class="mf">1.3</span><span class="p">,</span> <span class="mf">1.4</span><span class="p">],</span>',
      '<span class="w">              </span><span class="p">[</span><span class="mf">2.1</span><span class="p">,</span> <span class="mf">2.2</span><span class="p">,</span> <span class="mf">2.3</span><span class="p">,</span> <span class="mf">2.4</span><span class="p">],</span>',
      '<span class="w">              </span><span class="p">[</span><span class="mf">3.1</span><span class="p">,</span> <span class="mf">3.2</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">],</span>',
      '<span class="w">              </span><span class="p">[</span><span class="mf">4.1</span><span class="p">,</span> <span class="mf">4.2</span><span class="p">,</span> <span class="mf">4.3</span><span class="p">,</span> <span class="mf">4.4</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="p">[</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">hsplit</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;a1: </span><span class="si">{</span><span class="n">a1</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;a2: </span><span class="si">{</span><span class="n">a2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'a1: [[1.1 1.2]',
          '[2.1 2.2]',
          '[3.1 3.2]',
          '[4.1 4.2]]',
          'a2: [[1.3 1.4]',
          '[2.3 2.4]',
          '[3.3 3.4]',
          '[4.3 4.4]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se tiver matrizes com mais de 2 dimens√µes, <code>hsplit()</code> dividir√° ao longo da segunda dimens√£o.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
      '<span class="w">                </span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="p">[</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">hsplit</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;a1: </span><span class="si">{</span><span class="n">a1</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;a2: </span><span class="si">{</span><span class="n">a2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'a1: [[[1 1]]',
          '[[3 3]]]',
          'a2: [[[2 2]]',
          '[[4 4]]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="11.3. Dividir de maneira personalizada">11.3. Dividir de maneira personalizada<a class="anchor-link" href="#11.3. Dividir de maneira personalizada"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 110" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com o m√©todo <code>array_split()</code>, √© poss√≠vel escolher o eixo em que se deseja dividir as matrizes.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>',
      '<span class="w">                </span>',
      '<span class="w">                </span><span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>',
      '<span class="w">                </span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="p">[</span><span class="n">a1_eje0</span><span class="p">,</span> <span class="n">a2_eje0</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array_split</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>',
      '<span class="p">[</span><span class="n">a1_eje1</span><span class="p">,</span> <span class="n">a2_eje1</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array_split</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="p">[</span><span class="n">a1_eje2</span><span class="p">,</span> <span class="n">a2_eje2</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array_split</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;a1_eje0: </span><span class="si">{</span><span class="n">a1_eje0</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;a2_eje0: </span><span class="si">{</span><span class="n">a2_eje0</span><span class="si">}</span><span class="se">\n\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;a1_eje1: </span><span class="si">{</span><span class="n">a1_eje1</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;a2_eje1: </span><span class="si">{</span><span class="n">a2_eje1</span><span class="si">}</span><span class="se">\n\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;a1_eje2: </span><span class="si">{</span><span class="n">a1_eje2</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;a2_eje2: </span><span class="si">{</span><span class="n">a2_eje2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'a1_eje0: [[[1 1]',
          '&#x20;&#x20;[2 2]]]',
          'a2_eje0: [[[3 3]',
          '&#x20;&#x20;[4 4]]]',
          'a1_eje1: [[[1 1]]',
          '[[3 3]]]',
          'a2_eje1: [[[2 2]]',
          '[[4 4]]]',
          'a1_eje2: [[[1]',
          '&#x20;&#x20;[2]]',
          '[[3]',
          '&#x20;&#x20;[4]]]',
          'a2_eje2: [[[1]',
          '&#x20;&#x20;[2]]',
          '[[3]',
          '&#x20;&#x20;[4]]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="12. Busca em matrizes">12. Busca em matrizes<a class="anchor-link" href="#12. Busca em matrizes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 111" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quiser buscar um valor dentro de uma matriz, pode-se usar o m√©todo <code>where()</code> que retorna as posi√ß√µes onde a matriz possui o valor que estamos procurando.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">ids</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">arr</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span>',
      '<span class="n">ids</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(array([3, 5, 6]),)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fun√ß√µes podem ser usadas para buscar, por exemplo, se quisermos encontrar em quais posi√ß√µes os valores s√£o pares</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">ids</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">arr</span><span class="o">%</span><span class="mi">2</span><span class="p">)</span>',
      '<span class="n">ids</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(array([0, 2, 4, 6]),)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="13. Ordenar matrizes">13. Ordenar matrizes<a class="anchor-link" href="#13. Ordenar matrizes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 112" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com o m√©todo <code>sort()</code> podemos ordenar arrays</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">arr_ordenado</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="n">arr_ordenado</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'array([0, 1, 2, 3])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se temos strings, eles s√£o ordenados alfabeticamente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="s1">&#39;banana&#39;</span><span class="p">,</span> <span class="s1">&#39;apple&#39;</span><span class="p">,</span> <span class="s1">&#39;cherry&#39;</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">arr_ordenado</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="n">arr_ordenado</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'array([&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;], dtype=&#x27;&amp;lt;U6&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>E as matrizes de booleanos tamb√©m s√£o ordenadas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">arr_ordenado</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="n">arr_ordenado</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'array([False,  True,  True])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se tiver matrizes de mais de uma dimens√£o, as ordena por dimens√µes, ou seja, se tiver uma matriz de 2 dimens√µes, ordena os n√∫meros da primeira linha entre si e os da segunda linha entre si.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="n">arr_ordenado</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>',
      '<span class="n">arr_ordenado</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'array([[2, 3, 4],',
          '&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;[0, 1, 5]])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por padr√£o, ordena sempre com rela√ß√£o √†s linhas, mas se quiser que ordene com rela√ß√£o a outra dimens√£o, deve ser especificado atrav√©s da vari√°vel <code>axis</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="n">arr_ordenado0</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="c1"># Se ordena con respecto a la primera dimensi√≥n</span>',
      '<span class="n">arr_ordenado1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># Se ordena con respecto a la segunda dimensi√≥n</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;arr_ordenado0: </span><span class="si">{</span><span class="n">arr_ordenado0</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;arr_ordenado1: </span><span class="si">{</span><span class="n">arr_ordenado1</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'arr_ordenado0: [[3 0 1]',
          '[5 2 4]]',
          'arr_ordenado1: [[2 3 4]',
          '[0 1 5]]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="14. Filtros em matrizes">14. Filtros em matrizes<a class="anchor-link" href="#14. Filtros em matrizes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 113" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>NumPy oferece a possibilidade de buscar certos elementos de uma matriz e criar uma nova</p>
      <p>Isso √© feito criando uma matriz de √≠ndices booleanos, ou seja, cria uma nova matriz que indica quais posi√ß√µes mantemos da matriz e quais n√£o.</p>
      <p>Vamos ver um exemplo de uma matriz de √≠ndices booleanos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">37</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">22</span><span class="p">])</span>',
      '<span class="w"> </span>',
      '<span class="n">indices_booleanos</span> <span class="o">=</span> <span class="p">[</span><span class="kc">False</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="n">arr_filter</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">indices_booleanos</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Array original: </span><span class="si">{</span><span class="n">arr</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;indices booleanos: </span><span class="si">{</span><span class="n">indices_booleanos</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Array filtrado: </span><span class="si">{</span><span class="n">arr_filter</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Array original: [37 85 12 45 69 22]',
          'indices booleanos: [False, False, True, False, False, True]',
          'Array filtrado: [12 22]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se pode ver, o array filtrado (<code>arr_filtr</code>), s√≥ ficou com os elementos do array original (<code>arr</code>) que correspondem aos elementos em que o array <code>indices_booleanos</code> √© <code>True</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Outra coisa que podemos observar √© que apenas os elementos pares foram mantidos, ent√£o agora vamos ver como fazer para manter apenas os elementos pares de uma matriz, sem ter que faz√™-lo manualmente como fizemos no exemplo anterior.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>',
      '<span class="w">                </span><span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]])</span>',
      '<span class="w"> </span>',
      '<span class="n">indices_booleanos</span> <span class="o">=</span> <span class="n">arr</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>',
      '<span class="w"> </span>',
      '<span class="n">arr_filter</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">indices_booleanos</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Array original: </span><span class="si">{</span><span class="n">arr</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;indices booleanos: </span><span class="si">{</span><span class="n">indices_booleanos</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Array filtrado: </span><span class="si">{</span><span class="n">arr_filter</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Array original: [[ 1  2  3  4  5]',
          '[ 6  7  8  9 10]]',
          'indices booleanos: [[False  True False  True False]',
          '[ True False  True False  True]]',
          'Array filtrado: [ 2  4  6  8 10]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>























    </div>

  </section>

</PostLayout>
