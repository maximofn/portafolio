---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'OpenAI API';
const end_url = 'openai-api';
const description = 'üöÄ Descubra o poder da API OpenAI neste post! üåü Aprenda como instalar a biblioteca OpenAI ‚ú® e eu vou gui√°-lo pelos primeiros passos para se tornar um guru da intelig√™ncia artificial. ü§ñ N√£o importa se voc√™ √© um iniciante curioso ou um especialista em codifica√ß√£o em busca de novas aventuras, este post tem tudo o que voc√™ precisa para come√ßar. Prepare-se para explorar o universo do GPT para gera√ß√£o de texto e DALL-E, an√°lise de imagens, tudo com um toque de divers√£o e muita inova√ß√£o! üéâüë©‚Äçüíª Mergulhe no emocionante mundo da IA e comece sua jornada para a criatividade ilimitada! üåàüíª';
const keywords = 'open ai api, open ai, openai, gpt api, gpt3 api, gpt4 api, gpt4o api, gpt, gpt3, gpt4, gpt4o';
const languaje = 'PT';
const image_path = 'https://images.maximofn.com/openai.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=4800
    image_height=3840
    image_extension=webp
    article_date=2023-12-06+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Instalar a biblioteca do OpenAI"><h2>Instalar a biblioteca do OpenAI</h2></a>
      <a class="anchor-link" href="#Importar a biblioteca do OpenAI"><h2>Importar a biblioteca do OpenAI</h2></a>
      <a class="anchor-link" href="#Obter uma API Key"><h2>Obter uma API Key</h2></a>
      <a class="anchor-link" href="#Criamos nosso primeiro chatbot"><h2>Criamos nosso primeiro chatbot</h2></a>
      <a class="anchor-link" href="#Parametros"><h3>Par√¢metros</h3></a>
      <a class="anchor-link" href="#Mensagens"><h4>Mensagens</h4></a>
      <a class="anchor-link" href="#Historico de conversas"><h5>Hist√≥rico de conversas</h5></a>
      <a class="anchor-link" href="#Condicionamento por exemplos"><h5>Condicionamento por exemplos</h5></a>
      <a class="anchor-link" href="#Condicionamento com mensagem do sistema"><h5>Condicionamento com mensagem do sistema</h5></a>
      <a class="anchor-link" href="#Numero maximo de tokens da resposta"><h4>N√∫mero m√°ximo de tokens da resposta</h4></a>
      <a class="anchor-link" href="#Criatividade do modelo atraves da temperatura"><h4>Criatividade do modelo atrav√©s da temperatura</h4></a>
      <a class="anchor-link" href="#Criatividade do modelo atraves do top_p"><h4>Criatividade do modelo atrav√©s do top_p</h4></a>
      <a class="anchor-link" href="#Numero de respostas"><h4>N√∫mero de respostas</h4></a>
      <a class="anchor-link" href="#Retreinar modelo da OpenAI"><h2>Retreinar modelo da OpenAI</h2></a>
      <a class="anchor-link" href="#Preparacao dos dados"><h3>Prepara√ß√£o dos dados</h3></a>
      <a class="anchor-link" href="#Validacao dos dados"><h4>Valida√ß√£o dos dados</h4></a>
      <a class="anchor-link" href="#Calculo de tokens"><h4>C√°lculo de tokens</h4></a>
      <a class="anchor-link" href="#Calculo do custo"><h4>C√°lculo do custo</h4></a>
      <a class="anchor-link" href="#Treinamento"><h3>Treinamento</h3></a>
      <a class="anchor-link" href="#Teste do modelo"><h3>Teste do modelo</h3></a>
      <a class="anchor-link" href="#Gerar imagens com DALL-E 3"><h2>Gerar imagens com DALL-E 3</h2></a>
      <a class="anchor-link" href="#Visao"><h2>Vis√£o</h2></a>
      <a class="anchor-link" href="#Texto para fala"><h2>Texto para fala</h2></a>
      <a class="anchor-link" href="#Fala para texto (Whisper)"><h2>Fala para texto (Whisper)</h2></a>
      <a class="anchor-link" href="#Moderacao de conteudo"><h2>Modera√ß√£o de conte√∫do</h2></a>
      <a class="anchor-link" href="#Assistentes"><h2>Assistentes</h2></a>
      <a class="anchor-link" href="#Criar o assistente"><h3>Criar o assistente</h3></a>
      <a class="anchor-link" href="#Fio ou thread"><h3>Fio ou thread</h3></a>
      <a class="anchor-link" href="#Enviamos um arquivo"><h3>Enviamos um arquivo</h3></a>
      <a class="anchor-link" href="#Enviar uma mensagem ao assistente"><h3>Enviar uma mensagem ao assistente</h3></a>
      <a class="anchor-link" href="#Executar o assistente"><h3>Executar o assistente</h3></a>
      <a class="anchor-link" href="#Aguardar ate que termine de processar"><h3>Aguardar at√© que termine de processar</h3></a>
      <a class="anchor-link" href="#Processar a resposta"><h3>Processar a resposta</h3></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Aviso: Este post foi traduzido para o portugu√™s usando um modelo de tradu√ß√£o autom√°tica. Por favor, me avise se encontrar algum erro.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Instalar a biblioteca do OpenAI">Instalar a biblioteca do OpenAI<a class="anchor-link" href="#Instalar a biblioteca do OpenAI"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 69" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Em primeiro lugar, para poder usar a API da OpenAI, √© necess√°rio instalar a biblioteca da OpenAI. Para isso, executamos o seguinte comando</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="o">--</span><span class="n">upgrade</span> <span class="n">openai</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Importar a biblioteca do OpenAI">Importar a biblioteca do OpenAI<a class="anchor-link" href="#Importar a biblioteca do OpenAI"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 70" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Uma vez instalada a biblioteca, a importamos para poder us√°-la em nosso c√≥digo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">openai</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Obter uma API Key">Obter uma API Key<a class="anchor-link" href="#Obter uma API Key"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 71" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para poder usar a API da OpenAI, √© necess√°rio obter uma API Key. Para isso, nos dirigimos √† p√°gina da <a href="https://openai.com/" target="_blank" rel="nofollow noreferrer">OpenAI</a>, e nos registramos. Uma vez registrados, nos dirigimos √† se√ß√£o de <a href="https://platform.openai.com/api-keys">API Keys</a>, e criamos uma nova API Key.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://raw.githubusercontent.com/maximofn/alfred/main/gifs/openaix2.gif" alt="open ai api key">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Uma vez que temos, dizemos √† API do OpenAI qual √© nossa chave API.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">api_key</span> <span class="o">=</span> <span class="s2">&quot;Pon aqu√≠ tu API key&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Criamos nosso primeiro chatbot">Criamos nosso primeiro chatbot<a class="anchor-link" href="#Criamos nosso primeiro chatbot"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 72" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com a API da OpenAI √© muito simples criar um chatbot b√°sico, ao qual vamos passar um prompt, e ele vai nos retornar uma resposta.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Em primeiro lugar temos que escolher qual modelo vamos usar, no meu caso vou usar o modelo <code>gpt-3.5-turbo-1106</code> que atualmente √© um bom modelo para este post, j√° que para o que vamos fazer n√£o precisamos usar o melhor modelo. A OpenAI tem uma lista com todos os seus <a href="https://platform.openai.com/docs/models" target="_blank" rel="nofollow noreferrer">modelos</a> e uma p√°gina com os <a href="https://openai.com/pricing">pre√ßos</a></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">model</span> <span class="o">=</span> <span class="s2">&quot;gpt-3.5-turbo-1106&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora temos que criar um cliente que ser√° o respons√°vel por se comunicar com a API da OpenAI.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">client</span> <span class="o">=</span> <span class="n">openai</span><span class="o">.</span><span class="n">OpenAI</span><span class="p">(</span><span class="n">api_key</span><span class="o">=</span><span class="n">api_key</span><span class="p">,</span> <span class="n">organization</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, passamos nossa chave de API. Al√©m disso, podemos passar a organiza√ß√£o, mas em nosso caso n√£o √© necess√°rio.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos o prompt</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">&quot;Cu√°l es el mejor lenguaje de programaci√≥n para aprender?&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>E j√° podemos pedir uma resposta √† OpenAI</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}],</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver como √© a resposta.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">type</span><span class="p">(</span><span class="n">response</span><span class="p">),</span> <span class="n">response</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(openai.types.chat.chat_completion.ChatCompletion,',
          'ChatCompletion(id=&#x27;chatcmpl-8RaHCm9KalLxj2PPbLh6f8A4djG8Y&#x27;, choices=[Choice(finish_reason=&#x27;stop&#x27;, index=0, message=ChatCompletionMessage(content=&#x27;No hay un &quot;mejor&quot; lenguaje de programaci√≥n para aprender, ya que depende de tus intereses, objetivos y el tipo de desarrollo que te interese. Algunos lenguajes populares para empezar a aprender a programar incluyen Python, JavaScript, Java, C# y Ruby. Estos lenguajes son conocidos por su sintaxis clara y su versatilidad, lo que los hace buenos candidatos para principiantes. Tambi√©n es √∫til investigar qu√© lenguajes son populares en la industria en la que te gustar√≠a trabajar, ya que el conocimiento de un lenguaje en demanda puede abrirte m√°s oportunidades laborales. En resumen, la elecci√≥n del lenguaje de programaci√≥n para aprender depender√° de tus preferencias personales y de tus metas profesionales.&#x27;, role=&#x27;assistant&#x27;, function_call=None, tool_calls=None))], created=1701584994, model=&#x27;gpt-3.5-turbo-1106&#x27;, object=&#x27;chat.completion&#x27;, system_fingerprint=&#x27;fp_eeff13170a&#x27;, usage=CompletionUsage(completion_tokens=181, prompt_tokens=21, total_tokens=202)))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.id = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.choices = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">)):</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">] = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].finish_reason = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">finish_reason</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].index = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">index</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message.content = </span><span class="se">\n\t\t</span><span class="si">{</span><span class="n">content</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message.role = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">role</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message.function_call = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">function_call</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message.tool_calls = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">tool_calls</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.created = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">created</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.model = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">model</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.object = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">object</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.system_fingerprint = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">system_fingerprint</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.usage = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">usage</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.usage.completion_tokens = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">usage</span><span class="o">.</span><span class="n">completion_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.usage.prompt_tokens = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">usage</span><span class="o">.</span><span class="n">prompt_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.usage.total_tokens = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">usage</span><span class="o">.</span><span class="n">total_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'response.id = chatcmpl-8RaHCm9KalLxj2PPbLh6f8A4djG8Y',
          'response.choices = [Choice(finish_reason=&#x27;stop&#x27;, index=0, message=ChatCompletionMessage(content=&#x27;No hay un &quot;mejor&quot; lenguaje de programaci√≥n para aprender, ya que depende de tus intereses, objetivos y el tipo de desarrollo que te interese. Algunos lenguajes populares para empezar a aprender a programar incluyen Python, JavaScript, Java, C# y Ruby. Estos lenguajes son conocidos por su sintaxis clara y su versatilidad, lo que los hace buenos candidatos para principiantes. Tambi√©n es √∫til investigar qu√© lenguajes son populares en la industria en la que te gustar√≠a trabajar, ya que el conocimiento de un lenguaje en demanda puede abrirte m√°s oportunidades laborales. En resumen, la elecci√≥n del lenguaje de programaci√≥n para aprender depender√° de tus preferencias personales y de tus metas profesionales.&#x27;, role=&#x27;assistant&#x27;, function_call=None, tool_calls=None))]',
          'response.choices[0] = Choice(finish_reason=&#x27;stop&#x27;, index=0, message=ChatCompletionMessage(content=&#x27;No hay un &quot;mejor&quot; lenguaje de programaci√≥n para aprender, ya que depende de tus intereses, objetivos y el tipo de desarrollo que te interese. Algunos lenguajes populares para empezar a aprender a programar incluyen Python, JavaScript, Java, C# y Ruby. Estos lenguajes son conocidos por su sintaxis clara y su versatilidad, lo que los hace buenos candidatos para principiantes. Tambi√©n es √∫til investigar qu√© lenguajes son populares en la industria en la que te gustar√≠a trabajar, ya que el conocimiento de un lenguaje en demanda puede abrirte m√°s oportunidades laborales. En resumen, la elecci√≥n del lenguaje de programaci√≥n para aprender depender√° de tus preferencias personales y de tus metas profesionales.&#x27;, role=&#x27;assistant&#x27;, function_call=None, tool_calls=None))',
          'response.choices[0].finish_reason = stop',
          'response.choices[0].index = 0',
          'response.choices[0].message = ChatCompletionMessage(content=&#x27;No hay un &quot;mejor&quot; lenguaje de programaci√≥n para aprender, ya que depende de tus intereses, objetivos y el tipo de desarrollo que te interese. Algunos lenguajes populares para empezar a aprender a programar incluyen Python, JavaScript, Java, C# y Ruby. Estos lenguajes son conocidos por su sintaxis clara y su versatilidad, lo que los hace buenos candidatos para principiantes. Tambi√©n es √∫til investigar qu√© lenguajes son populares en la industria en la que te gustar√≠a trabajar, ya que el conocimiento de un lenguaje en demanda puede abrirte m√°s oportunidades laborales. En resumen, la elecci√≥n del lenguaje de programaci√≥n para aprender depender√° de tus preferencias personales y de tus metas profesionales.&#x27;, role=&#x27;assistant&#x27;, function_call=None, tool_calls=None)',
          'response.choices[0].message.content =',
          'No hay un &quot;mejor&quot; lenguaje de programaci√≥n para aprender, ya que depende de tus intereses, objetivos y el tipo de desarrollo que te interese. Algunos lenguajes populares para empezar a aprender a programar incluyen Python, JavaScript, Java, C# y Ruby. Estos lenguajes son conocidos por su sintaxis clara y su versatilidad, lo que los hace buenos candidatos para principiantes. Tambi√©n es √∫til investigar qu√© lenguajes son populares en la industria en la que te gustar√≠a trabajar, ya que el conocimiento de un lenguaje en demanda puede abrirte m√°s oportunidades laborales. En resumen, la elecci√≥n del lenguaje de programaci√≥n para aprender depender√° de tus preferencias personales y de tus metas profesionales.',
          'response.choices[0].message.role = assistant',
          'response.choices[0].message.function_call = None',
          'response.choices[0].message.tool_calls = None',
          'response.created = 1701584994',
          'response.model = gpt-3.5-turbo-1106',
          'response.object = chat.completion',
          'response.system_fingerprint = fp_eeff13170a',
          'response.usage = CompletionUsage(completion_tokens=181, prompt_tokens=21, total_tokens=202)',
          'response.usage.completion_tokens = 181',
          'response.usage.prompt_tokens = 21',
          'response.usage.total_tokens = 202',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, nos devolve muita informa√ß√£o.</p>
      <p>Por exemplo <code>response.choices[0].finish_reason = stop</code> significa que o modelo parou de gerar texto porque chegou ao final do prompt. Isso nos vem muito bem para depurar, j√° que os poss√≠veis valores s√£o <code>stop</code> que significa que a API retornou a mensagem completa, <code>length</code> que significa que a sa√≠da do modelo foi incompleta devido ao fato de ser maior que <code>max_tokens</code> ou limite de token do modelo, <code>function_call</code> o modelo decidiu chamar uma fun√ß√£o, <code>content_filter</code> que significa que o conte√∫do foi omitido por uma limita√ß√£o de conte√∫do da OpenAI e <code>null</code> que significa que a resposta da API foi incompleta</p>
      <p>Tamb√©m nos fornece informa√ß√µes sobre os tokens para podermos acompanhar o dinheiro gasto</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Parametros">Par√¢metros<a class="anchor-link" href="#Parametros"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 73" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Quando solicitamos uma resposta √† OpenAI, podemos passar uma s√©rie de par√¢metros para que ela nos retorne uma resposta mais adequada ao que desejamos. Vamos ver quais s√£o os par√¢metros que podemos passar.</p>
      <ul>
        <li><code>mensagens</code>: Lista de mensagens que foram enviadas ao chatbot</li>
        <li><code>model</code>: Modelo que queremos usar</li>
        <li><code>frequency_penalty</code>: Penalidade de frequ√™ncia. Quanto maior for o valor, menos prov√°vel ser√° que o modelo repita a mesma resposta.</li>
        <li><code>max_tokens</code>: N√∫mero m√°ximo de tokens que pode retornar o modelo</li>
        <li><code>n</code>: N√∫mero de respostas que queremos que o modelo nos retorne</li>
        <li><code>presence_penalty</code>: Penaliza√ß√£o de presen√ßa. Quanto maior for o valor, menos prov√°vel ser√° que o modelo repita a mesma resposta</li>
        <li><code>seed</code>: Semente para a gera√ß√£o de texto</li>
        <li><code>stop</code>: Lista de tokens que indicam que o modelo deve parar de gerar texto</li>
        <li><code>stream</code>: Se <code>True</code>, a API retornar√° uma resposta sempre que o modelo gerar um token. Se <code>False</code>, a API retornar√° uma resposta quando o modelo tiver gerado todos os tokens.</li>
        <li><code>temperature</code>: Quanto maior for o valor, mais criativo ser√° o modelo</li>
        <li><code>top_p</code>: Quanto maior for o valor, mais criativo ser√° o modelo</li>
        <li><code>user</code>: ID do usu√°rio que est√° conversando com o chatbot</li>
        <li><code>timeout</code>: Tempo m√°ximo que queremos esperar a que a API nos retorne uma resposta</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver alguns</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Mensagens">Mensagens<a class="anchor-link" href="#Mensagens"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 74" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos passar √† API uma lista de mensagens que foram enviadas ao chatbot. Isso √© √∫til para fornecer o hist√≥rico de conversas ao chatbot, para que ele possa gerar uma resposta mais adequada √† conversa. E para condicionar a resposta do chatbot ao que foi dito anteriormente.</p>
      <p>Al√©m disso, podemos passar uma mensagem de sistema para indicar como deve se comportar.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h5 id="Historico de conversas">Hist√≥rico de conversas<a class="anchor-link" href="#Historico de conversas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 75" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver um exemplo do hist√≥rico de conversas, primeiro perguntamos como est√°.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">&quot;Hola, soy MaximoFN, ¬øC√≥mo est√°s?&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}],</span>',
      '<span class="p">)</span>',
      '<span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Hola MaximoFN, soy un modelo de inteligencia artificial dise√±ado para conversar y ayudar en lo que necesites. ¬øEn qu√© puedo ayudarte hoy?',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ele respondeu que n√£o tem sentimentos e perguntou em que pode nos ajudar. Ent√£o, se eu perguntar agora como ele se chama, ele n√£o vai saber responder.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">&quot;¬øMe puedes decir c√≥mo me llamo?&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}],</span>',
      '<span class="p">)</span>',
      '<span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Lo siento, no tengo esa informaci√≥n. Pero puedes dec√≠rmelo t√∫.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para resolver isso, passamos o hist√≥rico de conversas.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">&quot;¬øMe puedes decir c√≥mo me llamo?&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span><span class="o">=</span><span class="p">[</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Hola, soy MaximoFN, ¬øC√≥mo est√°s?&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Hola MaximoFN, soy un modelo de inteligencia artificial dise√±ado para conversar y ayudar en lo que necesites. ¬øEn qu√© puedo ayudarte hoy?&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">},</span>',
      '<span class="w">  </span><span class="p">],</span>',
      '<span class="p">)</span>',
      '<span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Tu nombre es MaximoFN.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="Condicionamento por exemplos">Condicionamento por exemplos<a class="anchor-link" href="#Condicionamento por exemplos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 76" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora vejamos um exemplo de como condicionar a resposta do chatbot ao que foi dito anteriormente. Agora perguntamos como obter a lista de arquivos em um diret√≥rio no terminal.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">&quot;¬øC√≥mo puedo listar los archivos de un directorio en la terminal?&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}],</span>',
      '<span class="p">)</span>',
      '<span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'En la terminal de un sistema operativo Unix o Linux, puedes listar los archivos de un directorio utilizando el comando `ls`. Por ejemplo, si quieres listar los archivos del directorio actual, simplemente escribe `ls` y presiona Enter. Si deseas listar los archivos de un directorio espec√≠fico, puedes proporcionar la ruta del directorio despu√©s del comando `ls`, por ejemplo `ls /ruta/del/directorio`. Si deseas ver m√°s detalles sobre los archivos, puedes usar la opci√≥n `-l` para obtener una lista detallada o `-a` para mostrar tambi√©n los archivos ocultos.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver o que ela responde se agora a condicionarmos com exemplos de respostas curtas.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">&quot;¬øC√≥mo puedo listar los archivos de un directorio en la terminal?&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span><span class="o">=</span><span class="p">[</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Obtener las 10 primeras l√≠neas de un archivo&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;head -n 10&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Encontrar todos los archivos con extensi√≥n .txt&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;find . -name &#39;*.txt&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Dividir un archivo en varias p√°ginas&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;split -l 1000&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Buscar la direcci√≥n IP 12.34.56.78&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;nslookup 12.34.56.78&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Obtener las 5 √∫ltimas l√≠neas de foo.txt&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;tail -n 5 foo.txt&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Convertir ejemplo.png en JPEG&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;convert example.png example.jpg&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Create a git branch named &#39;new-feature&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;git branch new-feature&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">},</span>',
      '<span class="w">  </span><span class="p">],</span>',
      '<span class="p">)</span>',
      '<span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Puede usar el comando `ls` en la terminal para listar los archivos de un directorio. Por ejemplo:',
          '```',
          'ls',
          '```',
          'Muestra los archivos y directorios en el directorio actual.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Conseguimos que ele d√™ uma resposta mais curta.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h5 id="Condicionamento com mensagem do sistema">Condicionamento com mensagem do sistema<a class="anchor-link" href="#Condicionamento com mensagem do sistema"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 77" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos passar uma mensagem de sistema para indicar como deve se comportar.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">&quot;¬øC√≥mo puedo listar los archivos de un directorio en la terminal?&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span><span class="o">=</span><span class="p">[</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;system&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Eres un experto asistente de terminal de ubuntu que responde solo con comandos de terminal&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">},</span>',
      '<span class="w">  </span><span class="p">],</span>',
      '<span class="p">)</span>',
      '<span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Puedes listar los archivos de un directorio en la terminal usando el comando `ls`. Por ejemplo, para listar los archivos del directorio actual, simplemente escribe `ls` y presiona Enter. Si quieres listar los archivos de un directorio espec√≠fico, puedes utilizar `ls` seguido de la ruta del directorio. Por ejemplo, `ls /ruta/del/directorio`.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">&quot;¬øC√≥mo puedo listar los archivos de un directorio en la terminal?&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span><span class="o">=</span><span class="p">[</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;system&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Eres un experto asistente de terminal de ubuntu que responde solo con comandos de terminal&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Obtener las 10 primeras l√≠neas de un archivo&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;head -n 10&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Encontrar todos los archivos con extensi√≥n .txt&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;find . -name &#39;*.txt&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Dividir un archivo en varias p√°ginas&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;split -l 1000&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Buscar la direcci√≥n IP 12.34.56.78&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;nslookup 12.34.56.78&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Obtener las 5 √∫ltimas l√≠neas de foo.txt&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;tail -n 5 foo.txt&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Convertir ejemplo.png en JPEG&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;convert example.png example.jpg&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;Create a git branch named &#39;new-feature&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;git branch new-feature&quot;</span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">},</span>',
      '<span class="w">  </span><span class="p">],</span>',
      '<span class="p">)</span>',
      '<span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Puedes listar los archivos de un directorio en la terminal utilizando el comando &quot;ls&quot;. Por ejemplo, para listar los archivos en el directorio actual, puedes ejecutar el comando &quot;ls&quot;. Si deseas listar los archivos de otro directorio, simplemente especifica el directorio despu√©s del comando &quot;ls&quot;, por ejemplo &quot;ls /ruta/al/directorio&quot;.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Numero maximo de tokens da resposta">N√∫mero m√°ximo de tokens da resposta<a class="anchor-link" href="#Numero maximo de tokens da resposta"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 78" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos limitar o n√∫mero de tokens que o modelo pode retornar. Isso √© √∫til para evitar que o modelo ultrapasse a resposta que desejamos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">&quot;¬øCu√°l es el mejor lenguaje de programaci√≥n para aprender?&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}],</span>',
      '<span class="w">  </span><span class="n">max_tokens</span> <span class="o">=</span> <span class="mi">50</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].finish_reason = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">finish_reason</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'La respuesta a esta pregunta puede variar dependiendo de los intereses y objetivos individuales, ya que cada lenguaje de programaci√≥n tiene sus propias ventajas y desventajas. Sin embargo, algunos de los lenguajes m√°s',
          'response.choices[0].finish_reason = length',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, a resposta √© cortada pela metade porque excederia o limite de tokens. Al√©m disso, agora a raz√£o de parada √© <code>length</code> em vez de <code>stop</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Criatividade do modelo atraves da temperatura">Criatividade do modelo atrav√©s da temperatura<a class="anchor-link" href="#Criatividade do modelo atraves da temperatura"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 79" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos fazer o modelo mais criativo atrav√©s da temperatura. Quanto maior for o valor, mais criativo ser√° o modelo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">&quot;¬øCu√°l es el mejor lenguaje de programaci√≥n para aprender?&quot;</span>',
      '<span class="n">temperature</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}],</span>',
      '<span class="w">  </span><span class="n">temperature</span> <span class="o">=</span> <span class="n">temperature</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">content_0</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content_0</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'No hay un &quot;mejor&quot; lenguaje de programaci√≥n para aprender, ya que la elecci√≥n depende de los intereses y objetivos individuales. Algunos lenguajes populares para principiantes incluyen Python, JavaScript, Java y C#. Cada uno tiene sus propias ventajas y desventajas, por lo que es importante investigar y considerar qu√© tipo de desarrollo de software te interesa antes de elegir un lenguaje para aprender.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">&quot;¬øCu√°l es el mejor lenguaje de programaci√≥n para aprender?&quot;</span>',
      '<span class="n">temperature</span> <span class="o">=</span> <span class="mi">1</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}],</span>',
      '<span class="w">  </span><span class="n">temperature</span> <span class="o">=</span> <span class="n">temperature</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">content_1</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content_1</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'No hay un &quot;mejor&quot; lenguaje de programaci√≥n para aprender, ya que la elecci√≥n depende de los objetivos y preferencias individuales del programador. Sin embargo, algunos lenguajes populares para principiantes incluyen Python, JavaScript, Java y C++. Estos lenguajes son relativamente f√°ciles de aprender y tienen una amplia gama de aplicaciones en la industria de la tecnolog√≠a. Es importante considerar qu√© tipo de proyectos o campos de inter√©s te gustar√≠a explorar al momento de elegir un lenguaje de programaci√≥n para aprender.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">content_0</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content_1</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'No hay un &quot;mejor&quot; lenguaje de programaci√≥n para aprender, ya que la elecci√≥n depende de los intereses y objetivos individuales. Algunos lenguajes populares para principiantes incluyen Python, JavaScript, Java y C#. Cada uno tiene sus propias ventajas y desventajas, por lo que es importante investigar y considerar qu√© tipo de desarrollo de software te interesa antes de elegir un lenguaje para aprender.',
          'No hay un &quot;mejor&quot; lenguaje de programaci√≥n para aprender, ya que la elecci√≥n depende de los objetivos y preferencias individuales del programador. Sin embargo, algunos lenguajes populares para principiantes incluyen Python, JavaScript, Java y C++. Estos lenguajes son relativamente f√°ciles de aprender y tienen una amplia gama de aplicaciones en la industria de la tecnolog√≠a. Es importante considerar qu√© tipo de proyectos o campos de inter√©s te gustar√≠a explorar al momento de elegir un lenguaje de programaci√≥n para aprender.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Criatividade do modelo atraves do top_p">Criatividade do modelo atrav√©s do top_p<a class="anchor-link" href="#Criatividade do modelo atraves do top_p"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 80" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos fazer com que o modelo seja mais criativo atrav√©s do par√¢metro <code>top_p</code>. Quanto maior for o valor, mais criativo ser√° o modelo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">&quot;¬øCu√°l es el mejor lenguaje de programaci√≥n para aprender?&quot;</span>',
      '<span class="n">top_p</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}],</span>',
      '<span class="w">  </span><span class="n">top_p</span> <span class="o">=</span> <span class="n">top_p</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">content_0</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content_0</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'No hay un &quot;mejor&quot; lenguaje de programaci√≥n para aprender, ya que la elecci√≥n depende de los intereses y objetivos individuales. Algunos lenguajes populares para principiantes incluyen Python, JavaScript, Java y C#. Cada uno tiene sus propias ventajas y desventajas, por lo que es importante investigar y considerar qu√© tipo de desarrollo de software te interesa antes de elegir un lenguaje para aprender.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">&quot;¬øCu√°l es el mejor lenguaje de programaci√≥n para aprender?&quot;</span>',
      '<span class="n">top_p</span> <span class="o">=</span> <span class="mi">1</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}],</span>',
      '<span class="w">  </span><span class="n">top_p</span> <span class="o">=</span> <span class="n">top_p</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">content_1</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content_1</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'El mejor lenguaje de programaci√≥n para aprender depende de los objetivos del aprendizaje y del tipo de programaci√≥n que se quiera realizar. Algunos lenguajes de programaci√≥n populares para principiantes incluyen Python, Java, JavaScript y Ruby. Sin embargo, cada lenguaje tiene sus propias ventajas y desventajas, por lo que es importante considerar qu√© tipo de proyectos o aplicaciones se quieren desarrollar antes de elegir un lenguaje de programaci√≥n para aprender. Python es a menudo recomendado por su facilidad de uso y versatilidad, mientras que JavaScript es ideal para la programaci√≥n web.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">content_0</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content_1</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'No hay un &quot;mejor&quot; lenguaje de programaci√≥n para aprender, ya que la elecci√≥n depende de los intereses y objetivos individuales. Algunos lenguajes populares para principiantes incluyen Python, JavaScript, Java y C#. Cada uno tiene sus propias ventajas y desventajas, por lo que es importante investigar y considerar qu√© tipo de desarrollo de software te interesa antes de elegir un lenguaje para aprender.',
          'El mejor lenguaje de programaci√≥n para aprender depende de los objetivos del aprendizaje y del tipo de programaci√≥n que se quiera realizar. Algunos lenguajes de programaci√≥n populares para principiantes incluyen Python, Java, JavaScript y Ruby. Sin embargo, cada lenguaje tiene sus propias ventajas y desventajas, por lo que es importante considerar qu√© tipo de proyectos o aplicaciones se quieren desarrollar antes de elegir un lenguaje de programaci√≥n para aprender. Python es a menudo recomendado por su facilidad de uso y versatilidad, mientras que JavaScript es ideal para la programaci√≥n web.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Numero de respostas">N√∫mero de respostas<a class="anchor-link" href="#Numero de respostas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 81" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos pedir √† API que nos retorne mais de uma resposta. Isso √© √∫til para que o modelo nos retorne v√°rias respostas e assim poder escolher a que mais gostarmos, para isso vamos colocar os par√¢metros <code>temperature</code> e <code>top_p</code> em 1 para que o modelo seja mais criativo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">&quot;¬øCu√°l es el mejor lenguaje de programaci√≥n para aprender?&quot;</span>',
      '<span class="n">temperature</span> <span class="o">=</span> <span class="mi">1</span>',
      '<span class="n">top_p</span> <span class="o">=</span> <span class="mi">1</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}],</span>',
      '<span class="w">  </span><span class="n">temperature</span> <span class="o">=</span> <span class="n">temperature</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">top_p</span> <span class="o">=</span> <span class="n">top_p</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">n</span> <span class="o">=</span> <span class="mi">4</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">content_0</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="n">content_1</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="n">content_2</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="n">content_3</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content_0</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content_1</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content_2</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">content_3</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'El mejor lenguaje de programaci√≥n para aprender depende de tus objetivos y del tipo de aplicaciones que te interese desarrollar. Algunos de los lenguajes m√°s populares para aprender son:',
          '1. Python: Es un lenguaje de programaci√≥n vers√°til, f√°cil de aprender y con una amplia comunidad de desarrolladores. Es ideal para principiantes y se utiliza en una gran variedad de aplicaciones, desde desarrollo web hasta inteligencia artificial.',
          '2. JavaScript: Es el lenguaje de programaci√≥n m√°s utilizado en el desarrollo web. Es imprescindible para aquellos que quieren trabajar en el √°mbito del desarrollo frontend y backend.',
          '3. Java: Es un lenguaje de programaci√≥n muy popular en el √°mbito empresarial, por lo que aprender Java puede abrirte muchas puertas laborales. Adem√°s, es un lenguaje estructurado que te ense√±ar√° conceptos importantes de la programaci√≥n orientada a objetos.',
          '4. C#: Es un lenguaje de programaci√≥n desarrollado por Microsoft que se utiliza especialmente en el desarrollo de aplicaciones para Windows. Es ideal para aquellos que quieran enfocarse en el desarrollo de aplicaciones de escritorio.',
          'En resumen, el mejor lenguaje de programaci√≥n para aprender depende de tus intereses y objetivos personales. Es importante investigar y considerar qu√© tipos de aplicaciones te gustar√≠a desarrollar para elegir el lenguaje que m√°s se adapte a tus necesidades.',
          'El mejor lenguaje de programaci√≥n para aprender depende de los objetivos y necesidades individuales. Algunos de los lenguajes de programaci√≥n m√°s populares y ampliamente utilizados incluyen Python, JavaScript, Java, C++, Ruby y muchos otros. Python es a menudo recomendado para principiantes debido a su sintaxis simple y legible, mientras que JavaScript es esencial para el desarrollo web. Java es ampliamente utilizado en el desarrollo de aplicaciones empresariales y Android, y C++ es com√∫nmente utilizado en sistemas embebidos y juegos. En √∫ltima instancia, el mejor lenguaje de programaci√≥n para aprender depender√° de lo que quiera lograr con su habilidades de programaci√≥n.',
          'El mejor lenguaje de programaci√≥n para aprender depende de los intereses y objetivos individuales de cada persona. Algunos de los lenguajes m√°s populares y bien documentados para principiantes incluyen Python, JavaScript, Java y C#. Python es conocido por su simplicidad y versatilidad, mientras que JavaScript es esencial para el desarrollo web. Java y C# son lenguajes ampliamente utilizados en la industria y proporcionan una base s√≥lida para aprender otros lenguajes. En √∫ltima instancia, la elecci√≥n del lenguaje depender√° de las metas personales y la aplicaci√≥n deseada.',
          'El mejor lenguaje de programaci√≥n para aprender depende de los intereses y objetivos de cada persona. Algunos lenguajes populares para principiantes incluyen Python, Java, JavaScript, C++ y Ruby. Python es frecuentemente recomendado para aprender a programar debido a su sintaxis sencilla y legible, mientras que Java es utilizado en aplicaciones empresariales y Android. JavaScript es fundamental para el desarrollo web, y C++ es com√∫nmente utilizado en aplicaciones de alto rendimiento. Ruby es conocido por su facilidad de uso y flexibilidad. En √∫ltima instancia, la elecci√≥n del lenguaje depender√° de qu√© tipo de desarrollo te interesa y qu√© tipo de proyectos deseas realizar.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Retreinar modelo da OpenAI">Retreinar modelo da OpenAI<a class="anchor-link" href="#Retreinar modelo da OpenAI"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 82" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A OpenAI oferece a possibilidade de re-treinar seus modelos da API para obter melhores resultados com nossos pr√≥prios dados. Isso tem as seguintes vantagens:</p>
      <ul>
        <li>Obt√©m-se resultados de maior qualidade para nossos dados</li>
        <li>Em um prompt podemos dar exemplos para que se comporte como quisermos, mas apenas alguns. Dessa forma, reentrenando-o, podemos fornecer muitos mais.+ Economia de tokens devido a indica√ß√µes mais curtas. Como j√° o treinamos para o nosso caso de uso, podemos dar-lhe menos indica√ß√µes para resolver nossas tarefas.</li>
        <li>Solicita√ß√µes de menor lat√™ncia. Ao chamar modelos pr√≥prios teremos menos lat√™ncia.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Preparacao dos dados">Prepara√ß√£o dos dados<a class="anchor-link" href="#Preparacao dos dados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 83" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A API da OpenAI pede que forne√ßamos os dados em um arquivo <code>jsonl</code> no seguinte formato</p>
      
      <section class="section-block-markdown-cell">
            <div class='highlight'><pre><code class="language-json">&#123;<br>"mensagens":<br>[<br>&#123;<br>"Marv √© um chatbot factual que tamb√©m √© sarc√°stico."<br>&#125;,<br>&#123;<br>Qual √© a capital da Fran√ßa?<br>&#125;,<br>&#123;<br>Paris, como se todos j√° n√£o soubessem disso.<br>&#125;<br>]<br>&#125;<br>&#123;<br>"mensagens":<br>[<br>&#123;<br>"Marv √© um chatbot factual que tamb√©m √© sarc√°stico."<br>&#125;,<br>&#123;<br>Quem escreveu &#39;Romeu e Julieta&#39;?<br>&#125;,<br>&#123;<br>Oh, apenas um cara chamado William Shakespeare. J√° ouviu falar dele?<br>&#125;<br>]<br>&#125;<br>&#123;<br>"mensagens":<br>[<br>&#123;<br>"Marv √© um chatbot factual que tamb√©m √© sarc√°stico."<br>&#125;,<br>&#123;<br>Qu√£o longe est√° a Lua da Terra?<br>&#125;,<br>&#123;<br>Aproximadamente 384.400 quil√¥metros. Mais ou menos alguns, como se isso realmente importasse.<br>&#125;<br>]<br>&#125;</code></pre></div>
            </section>
      <p>Com um m√°ximo de 4096 tokens</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Validacao dos dados">Valida√ß√£o dos dados<a class="anchor-link" href="#Validacao dos dados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 84" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para me poupar trabalho, passei um a um todos os meus posts para o chatgpt e disse a ele para gerar 10 <code>FAQ</code>s para cada um no formato <code>CSV</code>, pois duvidava se conseguiria gerar um formato como o solicitado no <code>jsonl</code>. E ele gerou um <code>CSV</code> com o seguinte formato para cada post</p>
      <div class='highlight'><pre><code class="language-csv">prompt,completion
      O que cobre a Introdu√ß√£o ao Python no material fornecido? "A Introdu√ß√£o ao Python aborda t√≥picos como tipos de dados, operadores, uso de fun√ß√µes e classes, manipula√ß√£o de objetos iter√°veis e uso de m√≥dulos. [Mais informa√ß√µes](https://www.maximofn.com/python/)"
      Quais s√£o os tipos de dados b√°sicos em Python? Python tem 7 tipos de dados b√°sicos: texto (`str`), num√©ricos (`int`, `float`, `complex`), sequ√™ncias (`list`, `tuple`, `range`), mapeamento (`dict`), conjuntos (`set`, `frozenset`), booleanos (`bool`) e bin√°rios (`bytes`, `bytearray`, `memoryview`). [Mais informa√ß√µes](https://www.maximofn.com/python/)
      O que s√£o e como s√£o usados os operadores em Python? Os operadores em Python s√£o s√≠mbolos especiais que s√£o usados para realizar opera√ß√µes como adi√ß√£o, subtra√ß√£o, multiplica√ß√£o e divis√£o entre vari√°veis e valores. Tamb√©m incluem operadores l√≥gicos para compara√ß√µes. [Mais informa√ß√µes](https://www.maximofn.com/python/)
      Como se define e utiliza uma fun√ß√£o em Python? "Em Python, uma fun√ß√£o √© definida usando a palavra-chave `def`, seguida do nome da fun√ß√£o e par√™nteses. As fun√ß√µes podem ter par√¢metros e retornar valores. Elas s√£o utilizadas para encapsular l√≥gica que pode ser reutilizada ao longo do c√≥digo. [Mais informa√ß√µes](https://www.maximofn.com/python/)"O que s√£o as classes em Python e como elas s√£o usadas? As classes em Python s√£o a base da programa√ß√£o orientada a objetos. Permitem criar objetos que encapsulam dados e funcionalidades. As classes s√£o definidas usando a palavra-chave `class`, seguida do nome da classe. [Mais informa√ß√µes](https://www.maximofn.com/python/)
      ...</code></pre></div>
      <p>Cada <code>CSV</code> tem 10 <code>FAQ</code>s</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vou fazer um c√≥digo que pegue cada <code>CSV</code> e gere dois novos <code>jsonl</code>, um para treinamento e outro para valida√ß√£o.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">os</span>',
      '<span class="w"> </span>',
      '<span class="n">CSVs_path</span> <span class="o">=</span> <span class="s2">&quot;openai/faqs_posts&quot;</span>',
      '<span class="n">percetn_train</span> <span class="o">=</span> <span class="mf">0.8</span>',
      '<span class="n">percetn_validation</span> <span class="o">=</span> <span class="mf">0.2</span>',
      '<span class="w"> </span>',
      '<span class="n">jsonl_train</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">CSVs_path</span><span class="p">,</span> <span class="s2">&quot;train.jsonl&quot;</span><span class="p">)</span>',
      '<span class="n">jsonl_validation</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">CSVs_path</span><span class="p">,</span> <span class="s2">&quot;validation.jsonl&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Create the train.jsonl and validation.jsonl files</span>',
      '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_train</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
      '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_validation</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">CSVs_path</span><span class="p">):</span>  <span class="c1"># Get all files in the directory</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="n">file</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s2">&quot;.csv&quot;</span><span class="p">):</span>    <span class="c1"># Check if file is a csv</span>',
      '<span class="w">        </span><span class="n">csv</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">CSVs_path</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span> <span class="c1"># Get the path to the csv file</span>',
      '<span class="w">        </span><span class="n">number_of_lines</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="w">        </span><span class="n">csv_content</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">        </span><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="n">csv</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">):</span> <span class="c1"># Read all lines in the csv file</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;prompt&#39;</span><span class="p">):</span>   <span class="c1"># Skip the first line</span>',
      '<span class="w">                </span><span class="k">continue</span>',
      '<span class="w">            </span><span class="n">number_of_lines</span> <span class="o">+=</span> <span class="mi">1</span>    <span class="c1"># Count the number of lines</span>',
      '<span class="w">            </span><span class="n">csv_content</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>    <span class="c1"># Add the line to the csv_content list</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="n">number_of_train</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">number_of_lines</span> <span class="o">*</span> <span class="n">percetn_train</span><span class="p">)</span>  <span class="c1"># Calculate the number of lines for the train.jsonl file</span>',
      '<span class="w">        </span><span class="n">number_of_validation</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">number_of_lines</span> <span class="o">*</span> <span class="n">percetn_validation</span><span class="p">)</span>    <span class="c1"># Calculate the number of lines for the validation.sjonl file</span>',
      '<span class="w"> </span>',
      '<span class="w">        </span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">number_of_lines</span><span class="p">):</span>',
      '<span class="w">            </span><span class="n">prompt</span> <span class="o">=</span> <span class="n">csv_content</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>',
      '<span class="w">            </span><span class="n">response</span> <span class="o">=</span> <span class="s1">&#39;,&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">csv_content</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">:])</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;&quot;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">number_of_train</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># add line to train.jsonl</span>',
      '<span class="w">                </span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_train</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="s2">&quot;{&quot;</span><span class="si">}</span><span class="s1">&quot;messages&quot;: [</span><span class="si">{</span><span class="s2">&quot;{&quot;</span><span class="si">}</span><span class="s1">&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;Eres un amable asistente dispuesto a responder.&quot;</span><span class="si">{</span><span class="s2">&quot;}&quot;</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="s2">&quot;{&quot;</span><span class="si">}</span><span class="s1">&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;</span><span class="si">{</span><span class="n">prompt</span><span class="si">}</span><span class="s1">&quot;</span><span class="si">{</span><span class="s2">&quot;}&quot;</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="s2">&quot;{&quot;</span><span class="si">}</span><span class="s1">&quot;role&quot;: &quot;assistant&quot;, &quot;content&quot;: &quot;</span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="s1">&quot;</span><span class="si">{</span><span class="s2">&quot;}&quot;</span><span class="si">}</span><span class="s1">]</span><span class="si">{</span><span class="s2">&quot;}&quot;</span><span class="si">}</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="w">            </span><span class="k">elif</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">number_of_train</span> <span class="ow">and</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">number_of_train</span> <span class="o">+</span> <span class="n">number_of_validation</span><span class="p">:</span>',
      '<span class="w">                </span><span class="c1"># add line to validation.csv</span>',
      '<span class="w">                </span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_validation</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '<span class="w">                    </span><span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="s2">&quot;{&quot;</span><span class="si">}</span><span class="s1">&quot;messages&quot;: [</span><span class="si">{</span><span class="s2">&quot;{&quot;</span><span class="si">}</span><span class="s1">&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;Eres un amable asistente dispuesto a responder.&quot;</span><span class="si">{</span><span class="s2">&quot;}&quot;</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="s2">&quot;{&quot;</span><span class="si">}</span><span class="s1">&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;</span><span class="si">{</span><span class="n">prompt</span><span class="si">}</span><span class="s1">&quot;</span><span class="si">{</span><span class="s2">&quot;}&quot;</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="s2">&quot;{&quot;</span><span class="si">}</span><span class="s1">&quot;role&quot;: &quot;assistant&quot;, &quot;content&quot;: &quot;</span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="s1">&quot;</span><span class="si">{</span><span class="s2">&quot;}&quot;</span><span class="si">}</span><span class="s1">]</span><span class="si">{</span><span class="s2">&quot;}&quot;</span><span class="si">}</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Uma vez que tenho os dois <code>jsonl</code>, executo um <a href="https://cookbook.openai.com/examples/chat_finetuning_data_prep" target="_blank" rel="nofollow noreferrer">c√≥digo</a> que a OpenAI fornece para verificar os <code>jsonl</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro validamos os do treinamento</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">from</span><span class="w"> </span><span class="nn">collections</span><span class="w"> </span><span class="kn">import</span> <span class="n">defaultdict</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">json</span>',
      '<span class="w"> </span>',
      '<span class="c1"># Format error checks</span>',
      '<span class="n">format_errors</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_train</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">dataset</span> <span class="o">=</span> <span class="p">[</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">ex</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">ex</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>',
      '<span class="w">        </span><span class="n">format_errors</span><span class="p">[</span><span class="s2">&quot;data_type&quot;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span><span class="k">continue</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="n">messages</span> <span class="o">=</span> <span class="n">ex</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;messages&quot;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="n">messages</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">format_errors</span><span class="p">[</span><span class="s2">&quot;missing_messages_list&quot;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span><span class="k">continue</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="s2">&quot;role&quot;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">message</span> <span class="ow">or</span> <span class="s2">&quot;content&quot;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">message</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">format_errors</span><span class="p">[</span><span class="s2">&quot;message_missing_key&quot;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">if</span> <span class="nb">any</span><span class="p">(</span><span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">(</span><span class="s2">&quot;role&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;function_call&quot;</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">message</span><span class="p">):</span>',
      '<span class="w">            </span><span class="n">format_errors</span><span class="p">[</span><span class="s2">&quot;message_unrecognized_key&quot;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">message</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;role&quot;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">(</span><span class="s2">&quot;system&quot;</span><span class="p">,</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span> <span class="s2">&quot;function&quot;</span><span class="p">):</span>',
      '<span class="w">            </span><span class="n">format_errors</span><span class="p">[</span><span class="s2">&quot;unrecognized_role&quot;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="n">content</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;content&quot;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">function_call</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;function_call&quot;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">if</span> <span class="p">(</span><span class="ow">not</span> <span class="n">content</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">function_call</span><span class="p">)</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">            </span><span class="n">format_errors</span><span class="p">[</span><span class="s2">&quot;missing_content&quot;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;role&quot;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;assistant&quot;</span> <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">):</span>',
      '<span class="w">        </span><span class="n">format_errors</span><span class="p">[</span><span class="s2">&quot;example_missing_assistant_message&quot;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="n">format_errors</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Found errors:&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">format_errors</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">k</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">v</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="k">else</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No errors found&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'No errors found',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>E agora os de valida√ß√£o</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># Format error checks</span>',
      '<span class="n">format_errors</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_validation</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">dataset</span> <span class="o">=</span> <span class="p">[</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">ex</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">ex</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>',
      '<span class="w">        </span><span class="n">format_errors</span><span class="p">[</span><span class="s2">&quot;data_type&quot;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span><span class="k">continue</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="n">messages</span> <span class="o">=</span> <span class="n">ex</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;messages&quot;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="n">messages</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">format_errors</span><span class="p">[</span><span class="s2">&quot;missing_messages_list&quot;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span><span class="k">continue</span>',
      '<span class="w">        </span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="s2">&quot;role&quot;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">message</span> <span class="ow">or</span> <span class="s2">&quot;content&quot;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">message</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">format_errors</span><span class="p">[</span><span class="s2">&quot;message_missing_key&quot;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">if</span> <span class="nb">any</span><span class="p">(</span><span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">(</span><span class="s2">&quot;role&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;function_call&quot;</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">message</span><span class="p">):</span>',
      '<span class="w">            </span><span class="n">format_errors</span><span class="p">[</span><span class="s2">&quot;message_unrecognized_key&quot;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">message</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;role&quot;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">(</span><span class="s2">&quot;system&quot;</span><span class="p">,</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;assistant&quot;</span><span class="p">,</span> <span class="s2">&quot;function&quot;</span><span class="p">):</span>',
      '<span class="w">            </span><span class="n">format_errors</span><span class="p">[</span><span class="s2">&quot;unrecognized_role&quot;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">            </span>',
      '<span class="w">        </span><span class="n">content</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;content&quot;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>',
      '<span class="w">        </span><span class="n">function_call</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;function_call&quot;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>',
      '<span class="w">        </span>',
      '<span class="w">        </span><span class="k">if</span> <span class="p">(</span><span class="ow">not</span> <span class="n">content</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">function_call</span><span class="p">)</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>',
      '<span class="w">            </span><span class="n">format_errors</span><span class="p">[</span><span class="s2">&quot;missing_content&quot;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">    </span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;role&quot;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;assistant&quot;</span> <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">):</span>',
      '<span class="w">        </span><span class="n">format_errors</span><span class="p">[</span><span class="s2">&quot;example_missing_assistant_message&quot;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w"> </span>',
      '<span class="k">if</span> <span class="n">format_errors</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Found errors:&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">format_errors</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">k</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">v</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="k">else</span><span class="p">:</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No errors found&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'No errors found',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Calculo de tokens">C√°lculo de tokens<a class="anchor-link" href="#Calculo de tokens"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 85" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O n√∫mero m√°ximo de tokens de cada exemplo tem que ser 4096, portanto, se tivermos exemplos mais longos, apenas ser√£o utilizados os primeiros 4096 tokens. Portanto, vamos contar o n√∫mero de tokens que cada <code>jsonl</code> possui para saber quanto vai custar re-treinar o modelo.</p>
      <p>Mas primeiro √© preciso instalar a biblioteca <code>tiktoken</code>, que √© o tokenizador usado pela OpenAI e que nos ajudar√° a saber quantos tokens possui cada <code>CSV</code>, e consequentemente, quanto custar√° retreinar o modelo.</p>
      <p>Para instal√°-lo, executamos o seguinte comando</p>
      <div class='highlight'><pre><code class="language-bash">pip install tiktoken</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos algumas fun√ß√µes necess√°rias</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">tiktoken</span>',
      '<span class="kn">import</span><span class="w"> </span><span class="nn">numpy</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nn">np</span>',
      '<span class="w"> </span>',
      '<span class="n">encoding</span> <span class="o">=</span> <span class="n">tiktoken</span><span class="o">.</span><span class="n">get_encoding</span><span class="p">(</span><span class="s2">&quot;cl100k_base&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">num_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">,</span> <span class="n">tokens_per_message</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">tokens_per_name</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">num_tokens</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">num_tokens</span> <span class="o">+=</span> <span class="n">tokens_per_message</span>',
      '<span class="w">        </span><span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">message</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>',
      '<span class="w">            </span><span class="n">num_tokens</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">encoding</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>',
      '<span class="w">            </span><span class="k">if</span> <span class="n">key</span> <span class="o">==</span> <span class="s2">&quot;name&quot;</span><span class="p">:</span>',
      '<span class="w">                </span><span class="n">num_tokens</span> <span class="o">+=</span> <span class="n">tokens_per_name</span>',
      '<span class="w">    </span><span class="n">num_tokens</span> <span class="o">+=</span> <span class="mi">3</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">num_tokens</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">num_assistant_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">num_tokens</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>',
      '<span class="w">        </span><span class="k">if</span> <span class="n">message</span><span class="p">[</span><span class="s2">&quot;role&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;assistant&quot;</span><span class="p">:</span>',
      '<span class="w">            </span><span class="n">num_tokens</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">encoding</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">message</span><span class="p">[</span><span class="s2">&quot;content&quot;</span><span class="p">]))</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">num_tokens</span>',
      '<span class="w"> </span>',
      '<span class="k">def</span><span class="w"> </span><span class="nf">print_distribution</span><span class="p">(</span><span class="n">values</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">#### Distribution of </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">:&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;min:</span><span class="si">{</span><span class="nb">min</span><span class="p">(</span><span class="n">values</span><span class="p">)</span><span class="si">}</span><span class="s2">, max: </span><span class="si">{</span><span class="nb">max</span><span class="p">(</span><span class="n">values</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;mean: </span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">values</span><span class="p">)</span><span class="si">}</span><span class="s2">, median: </span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">median</span><span class="p">(</span><span class="n">values</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;p5: </span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">quantile</span><span class="p">(</span><span class="n">values</span><span class="p">,</span><span class="w"> </span><span class="mf">0.1</span><span class="p">)</span><span class="si">}</span><span class="s2">, p95: </span><span class="si">{</span><span class="n">np</span><span class="o">.</span><span class="n">quantile</span><span class="p">(</span><span class="n">values</span><span class="p">,</span><span class="w"> </span><span class="mf">0.9</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># Warnings and tokens counts</span>',
      '<span class="n">n_missing_system</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="n">n_missing_user</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="n">n_messages</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="n">convo_lens</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="n">assistant_message_lens</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w"> </span>',
      '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_train</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">dataset</span> <span class="o">=</span> <span class="p">[</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">ex</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">messages</span> <span class="o">=</span> <span class="n">ex</span><span class="p">[</span><span class="s2">&quot;messages&quot;</span><span class="p">]</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span><span class="n">message</span><span class="p">[</span><span class="s2">&quot;role&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;system&quot;</span> <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">):</span>',
      '<span class="w">        </span><span class="n">n_missing_system</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span><span class="n">message</span><span class="p">[</span><span class="s2">&quot;role&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;user&quot;</span> <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">):</span>',
      '<span class="w">        </span><span class="n">n_missing_user</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">    </span><span class="n">n_messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">messages</span><span class="p">))</span>',
      '<span class="w">    </span><span class="n">convo_lens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">))</span>',
      '<span class="w">    </span><span class="n">assistant_message_lens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num_assistant_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">))</span>',
      '<span class="w">    </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Num examples missing system message:&quot;</span><span class="p">,</span> <span class="n">n_missing_system</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Num examples missing user message:&quot;</span><span class="p">,</span> <span class="n">n_missing_user</span><span class="p">)</span>',
      '<span class="n">print_distribution</span><span class="p">(</span><span class="n">n_messages</span><span class="p">,</span> <span class="s2">&quot;num_messages_per_example&quot;</span><span class="p">)</span>',
      '<span class="n">print_distribution</span><span class="p">(</span><span class="n">convo_lens</span><span class="p">,</span> <span class="s2">&quot;num_total_tokens_per_example&quot;</span><span class="p">)</span>',
      '<span class="n">print_distribution</span><span class="p">(</span><span class="n">assistant_message_lens</span><span class="p">,</span> <span class="s2">&quot;num_assistant_tokens_per_example&quot;</span><span class="p">)</span>',
      '<span class="n">n_too_long</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">l</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">4096</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">convo_lens</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="si">{</span><span class="n">n_too_long</span><span class="si">}</span><span class="s2"> examples may be over the 4096 token limit, they will be truncated during fine-tuning&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Num examples missing system message: 0',
          'Num examples missing user message: 0',
          '#### Distribution of num_messages_per_example:',
          'min:3, max: 3',
          'mean: 3.0, median: 3.0',
          'p5: 3.0, p95: 3.0',
          '#### Distribution of num_total_tokens_per_example:',
          'min:67, max: 132',
          'mean: 90.13793103448276, median: 90.0',
          'p5: 81.5, p95: 99.5',
          '#### Distribution of num_assistant_tokens_per_example:',
          'min:33, max: 90',
          'mean: 48.66379310344828, median: 48.5',
          'p5: 41.0, p95: 55.5',
          '0 examples may be over the 4096 token limit, they will be truncated during fine-tuning',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos no o conjunto de treinamento nenhuma mensagem ultrapassa os 4096 tokens</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># Warnings and tokens counts</span>',
      '<span class="n">n_missing_system</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="n">n_missing_user</span> <span class="o">=</span> <span class="mi">0</span>',
      '<span class="n">n_messages</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="n">convo_lens</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="n">assistant_message_lens</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w"> </span>',
      '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_validation</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">dataset</span> <span class="o">=</span> <span class="p">[</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">ex</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">messages</span> <span class="o">=</span> <span class="n">ex</span><span class="p">[</span><span class="s2">&quot;messages&quot;</span><span class="p">]</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span><span class="n">message</span><span class="p">[</span><span class="s2">&quot;role&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;system&quot;</span> <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">):</span>',
      '<span class="w">        </span><span class="n">n_missing_system</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">    </span><span class="k">if</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span><span class="n">message</span><span class="p">[</span><span class="s2">&quot;role&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;user&quot;</span> <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">):</span>',
      '<span class="w">        </span><span class="n">n_missing_user</span> <span class="o">+=</span> <span class="mi">1</span>',
      '<span class="w">    </span><span class="n">n_messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">messages</span><span class="p">))</span>',
      '<span class="w">    </span><span class="n">convo_lens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">))</span>',
      '<span class="w">    </span><span class="n">assistant_message_lens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num_assistant_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">))</span>',
      '<span class="w">    </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Num examples missing system message:&quot;</span><span class="p">,</span> <span class="n">n_missing_system</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Num examples missing user message:&quot;</span><span class="p">,</span> <span class="n">n_missing_user</span><span class="p">)</span>',
      '<span class="n">print_distribution</span><span class="p">(</span><span class="n">n_messages</span><span class="p">,</span> <span class="s2">&quot;num_messages_per_example&quot;</span><span class="p">)</span>',
      '<span class="n">print_distribution</span><span class="p">(</span><span class="n">convo_lens</span><span class="p">,</span> <span class="s2">&quot;num_total_tokens_per_example&quot;</span><span class="p">)</span>',
      '<span class="n">print_distribution</span><span class="p">(</span><span class="n">assistant_message_lens</span><span class="p">,</span> <span class="s2">&quot;num_assistant_tokens_per_example&quot;</span><span class="p">)</span>',
      '<span class="n">n_too_long</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">l</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">4096</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">convo_lens</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="si">{</span><span class="n">n_too_long</span><span class="si">}</span><span class="s2"> examples may be over the 4096 token limit, they will be truncated during fine-tuning&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Num examples missing system message: 0',
          'Num examples missing user message: 0',
          '#### Distribution of num_messages_per_example:',
          'min:3, max: 3',
          'mean: 3.0, median: 3.0',
          'p5: 3.0, p95: 3.0',
          '#### Distribution of num_total_tokens_per_example:',
          'min:80, max: 102',
          'mean: 89.93333333333334, median: 91.0',
          'p5: 82.2, p95: 96.8',
          '#### Distribution of num_assistant_tokens_per_example:',
          'min:41, max: 57',
          'mean: 48.2, median: 49.0',
          'p5: 42.8, p95: 51.6',
          '0 examples may be over the 4096 token limit, they will be truncated during fine-tuning',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Nenhuma mensagem do conjunto de valida√ß√£o excede 4096 tokens.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Calculo do custo">C√°lculo do custo<a class="anchor-link" href="#Calculo do custo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 86" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Outra coisa muito importante √© saber quanto vai custar fazer esse fine-tuning.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># Pricing and default n_epochs estimate</span>',
      '<span class="n">MAX_TOKENS_PER_EXAMPLE</span> <span class="o">=</span> <span class="mi">4096</span>',
      '<span class="w"> </span>',
      '<span class="n">TARGET_EPOCHS</span> <span class="o">=</span> <span class="mi">3</span>',
      '<span class="n">MIN_TARGET_EXAMPLES</span> <span class="o">=</span> <span class="mi">100</span>',
      '<span class="n">MAX_TARGET_EXAMPLES</span> <span class="o">=</span> <span class="mi">25000</span>',
      '<span class="n">MIN_DEFAULT_EPOCHS</span> <span class="o">=</span> <span class="mi">1</span>',
      '<span class="n">MAX_DEFAULT_EPOCHS</span> <span class="o">=</span> <span class="mi">25</span>',
      '<span class="w"> </span>',
      '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_train</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">dataset</span> <span class="o">=</span> <span class="p">[</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="n">convo_lens</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="k">for</span> <span class="n">ex</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">messages</span> <span class="o">=</span> <span class="n">ex</span><span class="p">[</span><span class="s2">&quot;messages&quot;</span><span class="p">]</span>',
      '<span class="w">    </span><span class="n">convo_lens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">))</span>',
      '<span class="w"> </span>',
      '<span class="n">n_epochs</span> <span class="o">=</span> <span class="n">TARGET_EPOCHS</span>',
      '<span class="n">n_train_examples</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span>',
      '<span class="k">if</span> <span class="n">n_train_examples</span> <span class="o">*</span> <span class="n">TARGET_EPOCHS</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">MIN_TARGET_EXAMPLES</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">n_epochs</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">MAX_DEFAULT_EPOCHS</span><span class="p">,</span> <span class="n">MIN_TARGET_EXAMPLES</span> <span class="o">//</span> <span class="n">n_train_examples</span><span class="p">)</span>',
      '<span class="k">elif</span> <span class="n">n_train_examples</span> <span class="o">*</span> <span class="n">TARGET_EPOCHS</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">MAX_TARGET_EXAMPLES</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">n_epochs</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">MIN_DEFAULT_EPOCHS</span><span class="p">,</span> <span class="n">MAX_TARGET_EXAMPLES</span> <span class="o">//</span> <span class="n">n_train_examples</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">n_billing_tokens_in_dataset</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">MAX_TOKENS_PER_EXAMPLE</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span> <span class="k">for</span> <span class="n">length</span> <span class="ow">in</span> <span class="n">convo_lens</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Dataset has ~</span><span class="si">{</span><span class="n">n_billing_tokens_in_dataset</span><span class="si">}</span><span class="s2"> tokens that will be charged for during training&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;By default, you&#39;ll train for </span><span class="si">{</span><span class="n">n_epochs</span><span class="si">}</span><span class="s2"> epochs on this dataset&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;By default, you&#39;ll be charged for ~</span><span class="si">{</span><span class="n">n_epochs</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">n_billing_tokens_in_dataset</span><span class="si">}</span><span class="s2"> tokens&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">tokens_for_train</span> <span class="o">=</span> <span class="n">n_epochs</span> <span class="o">*</span> <span class="n">n_billing_tokens_in_dataset</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Dataset has ~10456 tokens that will be charged for during training',
          'By default, you&#x27;ll train for 3 epochs on this dataset',
          'By default, you&#x27;ll be charged for ~31368 tokens',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como na hora de escrever este post, o pre√ßo para treinar <code>gpt-3.5-turbo</code> √© de $0.0080 por cada 1000 tokens, podemos saber quanto nos custar√° o treinamento</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">pricing</span> <span class="o">=</span> <span class="mf">0.0080</span>',
      '<span class="n">num_tokens_pricing</span> <span class="o">=</span> <span class="mi">1000</span>',
      '<span class="w"> </span>',
      '<span class="n">training_price</span> <span class="o">=</span> <span class="n">pricing</span> <span class="o">*</span> <span class="p">(</span><span class="n">tokens_for_train</span> <span class="o">//</span> <span class="n">num_tokens_pricing</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Training price: $</span><span class="si">{</span><span class="n">training_price</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Training price: $0.248',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="c1"># Pricing and default n_epochs estimate</span>',
      '<span class="n">MAX_TOKENS_PER_EXAMPLE</span> <span class="o">=</span> <span class="mi">4096</span>',
      '<span class="w"> </span>',
      '<span class="n">TARGET_EPOCHS</span> <span class="o">=</span> <span class="mi">3</span>',
      '<span class="n">MIN_TARGET_EXAMPLES</span> <span class="o">=</span> <span class="mi">100</span>',
      '<span class="n">MAX_TARGET_EXAMPLES</span> <span class="o">=</span> <span class="mi">25000</span>',
      '<span class="n">MIN_DEFAULT_EPOCHS</span> <span class="o">=</span> <span class="mi">1</span>',
      '<span class="n">MAX_DEFAULT_EPOCHS</span> <span class="o">=</span> <span class="mi">25</span>',
      '<span class="w"> </span>',
      '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">jsonl_validation</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">dataset</span> <span class="o">=</span> <span class="p">[</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>',
      '<span class="w"> </span>',
      '<span class="n">convo_lens</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="k">for</span> <span class="n">ex</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">messages</span> <span class="o">=</span> <span class="n">ex</span><span class="p">[</span><span class="s2">&quot;messages&quot;</span><span class="p">]</span>',
      '<span class="w">    </span><span class="n">convo_lens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num_tokens_from_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">))</span>',
      '<span class="w"> </span>',
      '<span class="n">n_epochs</span> <span class="o">=</span> <span class="n">TARGET_EPOCHS</span>',
      '<span class="n">n_train_examples</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span>',
      '<span class="k">if</span> <span class="n">n_train_examples</span> <span class="o">*</span> <span class="n">TARGET_EPOCHS</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">MIN_TARGET_EXAMPLES</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">n_epochs</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">MAX_DEFAULT_EPOCHS</span><span class="p">,</span> <span class="n">MIN_TARGET_EXAMPLES</span> <span class="o">//</span> <span class="n">n_train_examples</span><span class="p">)</span>',
      '<span class="k">elif</span> <span class="n">n_train_examples</span> <span class="o">*</span> <span class="n">TARGET_EPOCHS</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">MAX_TARGET_EXAMPLES</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">n_epochs</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">MIN_DEFAULT_EPOCHS</span><span class="p">,</span> <span class="n">MAX_TARGET_EXAMPLES</span> <span class="o">//</span> <span class="n">n_train_examples</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">n_billing_tokens_in_dataset</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">MAX_TOKENS_PER_EXAMPLE</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span> <span class="k">for</span> <span class="n">length</span> <span class="ow">in</span> <span class="n">convo_lens</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Dataset has ~</span><span class="si">{</span><span class="n">n_billing_tokens_in_dataset</span><span class="si">}</span><span class="s2"> tokens that will be charged for during training&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;By default, you&#39;ll train for </span><span class="si">{</span><span class="n">n_epochs</span><span class="si">}</span><span class="s2"> epochs on this dataset&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;By default, you&#39;ll be charged for ~</span><span class="si">{</span><span class="n">n_epochs</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">n_billing_tokens_in_dataset</span><span class="si">}</span><span class="s2"> tokens&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">tokens_for_validation</span> <span class="o">=</span> <span class="n">n_epochs</span> <span class="o">*</span> <span class="n">n_billing_tokens_in_dataset</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Dataset has ~1349 tokens that will be charged for during training',
          'By default, you&#x27;ll train for 6 epochs on this dataset',
          'By default, you&#x27;ll be charged for ~8094 tokens',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">validation_price</span> <span class="o">=</span> <span class="n">pricing</span> <span class="o">*</span> <span class="p">(</span><span class="n">tokens_for_validation</span> <span class="o">//</span> <span class="n">num_tokens_pricing</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Validation price: $</span><span class="si">{</span><span class="n">validation_price</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Validation price: $0.064',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">total_price</span> <span class="o">=</span> <span class="n">training_price</span> <span class="o">+</span> <span class="n">validation_price</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Total price: $</span><span class="si">{</span><span class="n">total_price</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Total price: $0.312',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se nossos c√°lculos estiverem corretos, vemos que o retreinamento de <code>gpt-3.5-turbo</code> nos custar√° $0.312</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Treinamento">Treinamento<a class="anchor-link" href="#Treinamento"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 87" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Uma vez que tudo estiver pronto, precisamos enviar os arquivos <code>jsonl</code> para a API da OpenAI para que o modelo seja retreinado. Para isso, executamos o seguinte c√≥digo:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="nb">open</span><span class="p">(</span><span class="n">jsonl_train</span><span class="p">,</span> <span class="s2">&quot;rb&quot;</span><span class="p">),</span> <span class="n">purpose</span><span class="o">=</span><span class="s2">&quot;fine-tune&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">type</span><span class="p">(</span><span class="n">result</span><span class="p">),</span> <span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(openai.types.file_object.FileObject,',
          'FileObject(id=&#x27;file-LWztOVasq4E0U67wRe8ShjLZ&#x27;, bytes=47947, created_at=1701585709, filename=&#x27;train.jsonl&#x27;, object=&#x27;file&#x27;, purpose=&#x27;fine-tune&#x27;, status=&#x27;processed&#x27;, status_details=None))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.id = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.bytes = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">bytes</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.created_at = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">created_at</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.filename = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.object = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">object</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.purpose = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">purpose</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.status = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">status</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.status_details = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">status_details</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'result.id = file-LWztOVasq4E0U67wRe8ShjLZ',
          'result.bytes = 47947',
          'result.created_at = 1701585709',
          'result.filename = train.jsonl',
          'result.object = file',
          'result.purpose = fine-tune',
          'result.status = processed',
          'result.status_details = None',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">jsonl_train_id</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">id</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;jsonl_train_id = </span><span class="si">{</span><span class="n">jsonl_train_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'jsonl_train_id = file-LWztOVasq4E0U67wRe8ShjLZ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Fazemos o mesmo com o conjunto de valida√ß√£o.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="nb">open</span><span class="p">(</span><span class="n">jsonl_validation</span><span class="p">,</span> <span class="s2">&quot;rb&quot;</span><span class="p">),</span> <span class="n">purpose</span><span class="o">=</span><span class="s2">&quot;fine-tune&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.id = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.bytes = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">bytes</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.created_at = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">created_at</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.filename = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.object = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">object</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.purpose = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">purpose</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.status = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">status</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.status_details = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">status_details</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'result.id = file-E0YOgIIe9mwxmFcza5bFyVKW',
          'result.bytes = 6369',
          'result.created_at = 1701585730',
          'result.filename = validation.jsonl',
          'result.object = file',
          'result.purpose = fine-tune',
          'result.status = processed',
          'result.status_details = None',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">jsonl_validation_id</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">id</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;jsonl_train_id = </span><span class="si">{</span><span class="n">jsonl_validation_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'jsonl_train_id = file-E0YOgIIe9mwxmFcza5bFyVKW',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Uma vez que os temos carregados, passamos a treinar nosso pr√≥prio modelo da OpenAI, para isso usamos o seguinte c√≥digo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">fine_tuning</span><span class="o">.</span><span class="n">jobs</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">model</span> <span class="o">=</span> <span class="s2">&quot;gpt-3.5-turbo&quot;</span><span class="p">,</span> <span class="n">training_file</span> <span class="o">=</span> <span class="n">jsonl_train_id</span><span class="p">,</span> <span class="n">validation_file</span> <span class="o">=</span> <span class="n">jsonl_validation_id</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">type</span><span class="p">(</span><span class="n">result</span><span class="p">),</span> <span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(openai.types.fine_tuning.fine_tuning_job.FineTuningJob,',
          'FineTuningJob(id=&#x27;ftjob-aBndcorOfQLP0UijlY0R4pTB&#x27;, created_at=1701585758, error=None, fine_tuned_model=None, finished_at=None, hyperparameters=Hyperparameters(n_epochs=&#x27;auto&#x27;, batch_size=&#x27;auto&#x27;, learning_rate_multiplier=&#x27;auto&#x27;), model=&#x27;gpt-3.5-turbo-0613&#x27;, object=&#x27;fine_tuning.job&#x27;, organization_id=&#x27;org-qDHVqEZ9tqE2XuA0IgWi7Erg&#x27;, result_files=[], status=&#x27;validating_files&#x27;, trained_tokens=None, training_file=&#x27;file-LWztOVasq4E0U67wRe8ShjLZ&#x27;, validation_file=&#x27;file-E0YOgIIe9mwxmFcza5bFyVKW&#x27;))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.id = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.created_at = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">created_at</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.error = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">error</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.fine_tuned_model = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">fine_tuned_model</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.finished_at = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">finished_at</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.hyperparameters = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">n_epochs = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">n_epochs</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">batch_size = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">batch_size</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">learning_rate_multiplier = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">learning_rate_multiplier</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.model = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">model</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.object = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">object</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.organization_id = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">organization_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.result_files = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">result_files</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.status = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">status</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.trained_tokens = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">trained_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.training_file = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">training_file</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.validation_file = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">validation_file</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'result.id = ftjob-aBndcorOfQLP0UijlY0R4pTB',
          'result.created_at = 1701585758',
          'result.error = None',
          'result.fine_tuned_model = None',
          'result.finished_at = None',
          'result.hyperparameters = Hyperparameters(n_epochs=&#x27;auto&#x27;, batch_size=&#x27;auto&#x27;, learning_rate_multiplier=&#x27;auto&#x27;)',
          'n_epochs = auto',
          'batch_size = auto',
          'learning_rate_multiplier = auto',
          'result.model = gpt-3.5-turbo-0613',
          'result.object = fine_tuning.job',
          'result.organization_id = org-qDHVqEZ9tqE2XuA0IgWi7Erg',
          'result.result_files = []',
          'result.status = validating_files',
          'result.trained_tokens = None',
          'result.training_file = file-LWztOVasq4E0U67wRe8ShjLZ',
          'result.validation_file = file-E0YOgIIe9mwxmFcza5bFyVKW',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">fine_tune_id</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">id</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;fine_tune_id = </span><span class="si">{</span><span class="n">fine_tune_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'fine_tune_id = ftjob-aBndcorOfQLP0UijlY0R4pTB',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que em <code>status</code> sa√≠a <code>validating_files</code>. Como o fine tuning demora bastante, podemos ir perguntando pelo processo mediante o seguinte c√≥digo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">fine_tuning</span><span class="o">.</span><span class="n">jobs</span><span class="o">.</span><span class="n">retrieve</span><span class="p">(</span><span class="n">fine_tuning_job_id</span> <span class="o">=</span> <span class="n">fine_tune_id</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">type</span><span class="p">(</span><span class="n">result</span><span class="p">),</span> <span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(openai.types.fine_tuning.fine_tuning_job.FineTuningJob,',
          'FineTuningJob(id=&#x27;ftjob-aBndcorOfQLP0UijlY0R4pTB&#x27;, created_at=1701585758, error=None, fine_tuned_model=None, finished_at=None, hyperparameters=Hyperparameters(n_epochs=3, batch_size=1, learning_rate_multiplier=2), model=&#x27;gpt-3.5-turbo-0613&#x27;, object=&#x27;fine_tuning.job&#x27;, organization_id=&#x27;org-qDHVqEZ9tqE2XuA0IgWi7Erg&#x27;, result_files=[], status=&#x27;running&#x27;, trained_tokens=None, training_file=&#x27;file-LWztOVasq4E0U67wRe8ShjLZ&#x27;, validation_file=&#x27;file-E0YOgIIe9mwxmFcza5bFyVKW&#x27;))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.id = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.created_at = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">created_at</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.error = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">error</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.fine_tuned_model = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">fine_tuned_model</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.finished_at = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">finished_at</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.hyperparameters = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">n_epochs = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">n_epochs</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">batch_size = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">batch_size</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">learning_rate_multiplier = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">learning_rate_multiplier</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.model = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">model</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.object = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">object</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.organization_id = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">organization_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.result_files = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">result_files</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.status = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">status</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.trained_tokens = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">trained_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.training_file = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">training_file</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.validation_file = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">validation_file</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'result.id = ftjob-aBndcorOfQLP0UijlY0R4pTB',
          'result.created_at = 1701585758',
          'result.error = None',
          'result.fine_tuned_model = None',
          'result.finished_at = None',
          'result.hyperparameters = Hyperparameters(n_epochs=3, batch_size=1, learning_rate_multiplier=2)',
          'n_epochs = 3',
          'batch_size = 1',
          'learning_rate_multiplier = 2',
          'result.model = gpt-3.5-turbo-0613',
          'result.object = fine_tuning.job',
          'result.organization_id = org-qDHVqEZ9tqE2XuA0IgWi7Erg',
          'result.result_files = []',
          'result.status = running',
          'result.trained_tokens = None',
          'result.training_file = file-LWztOVasq4E0U67wRe8ShjLZ',
          'result.validation_file = file-E0YOgIIe9mwxmFcza5bFyVKW',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Criamos um loop que aguarde o t√©rmino do treinamento</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">time</span>',
      '<span class="w"> </span>',
      '<span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">fine_tuning</span><span class="o">.</span><span class="n">jobs</span><span class="o">.</span><span class="n">retrieve</span><span class="p">(</span><span class="n">fine_tuning_job_id</span> <span class="o">=</span> <span class="n">fine_tune_id</span><span class="p">)</span>',
      '<span class="n">status</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">status</span>',
      '<span class="w"> </span>',
      '<span class="k">while</span> <span class="n">status</span> <span class="o">!=</span> <span class="s2">&quot;succeeded&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">fine_tuning</span><span class="o">.</span><span class="n">jobs</span><span class="o">.</span><span class="n">retrieve</span><span class="p">(</span><span class="n">fine_tuning_job_id</span> <span class="o">=</span> <span class="n">fine_tune_id</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">status</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">status</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Job succeeded!&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Job succeeded',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como o treinamento foi conclu√≠do, voltamos a solicitar as informa√ß√µes sobre o processo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">fine_tuning</span><span class="o">.</span><span class="n">jobs</span><span class="o">.</span><span class="n">retrieve</span><span class="p">(</span><span class="n">fine_tuning_job_id</span> <span class="o">=</span> <span class="n">fine_tune_id</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.id = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.created_at = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">created_at</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.error = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">error</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.fine_tuned_model = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">fine_tuned_model</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.finished_at = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">finished_at</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.hyperparameters = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">n_epochs = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">n_epochs</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">batch_size = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">batch_size</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">learning_rate_multiplier = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">hyperparameters</span><span class="o">.</span><span class="n">learning_rate_multiplier</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.model = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">model</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.object = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">object</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.organization_id = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">organization_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.result_files = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">result_files</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.status = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">status</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.trained_tokens = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">trained_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.training_file = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">training_file</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result.validation_file = </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">validation_file</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'result.id = ftjob-aBndcorOfQLP0UijlY0R4pTB',
          'result.created_at = 1701585758',
          'result.error = None',
          'result.fine_tuned_model = ft:gpt-3.5-turbo-0613:personal::8RagA0RT',
          'result.finished_at = 1701586541',
          'result.hyperparameters = Hyperparameters(n_epochs=3, batch_size=1, learning_rate_multiplier=2)',
          'n_epochs = 3',
          'batch_size = 1',
          'learning_rate_multiplier = 2',
          'result.model = gpt-3.5-turbo-0613',
          'result.object = fine_tuning.job',
          'result.organization_id = org-qDHVqEZ9tqE2XuA0IgWi7Erg',
          'result.result_files = [&#x27;file-dNeo5ojOSuin7JIkNkQouHLB&#x27;]',
          'result.status = succeeded',
          'result.trained_tokens = 30672',
          'result.training_file = file-LWztOVasq4E0U67wRe8ShjLZ',
          'result.validation_file = file-E0YOgIIe9mwxmFcza5bFyVKW',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver alguns dados interessantes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">fine_tuned_model</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">fine_tuned_model</span>',
      '<span class="n">finished_at</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">finished_at</span>',
      '<span class="n">result_files</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">result_files</span>',
      '<span class="n">status</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">status</span>',
      '<span class="n">trained_tokens</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">trained_tokens</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;fine_tuned_model = </span><span class="si">{</span><span class="n">fine_tuned_model</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;finished_at = </span><span class="si">{</span><span class="n">finished_at</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;result_files = </span><span class="si">{</span><span class="n">result_files</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;status = </span><span class="si">{</span><span class="n">status</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;trained_tokens = </span><span class="si">{</span><span class="n">trained_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'fine_tuned_model = ft:gpt-3.5-turbo-0613:personal::8RagA0RT',
          'finished_at = 1701586541',
          'result_files = [&#x27;file-dNeo5ojOSuin7JIkNkQouHLB&#x27;]',
          'status = succeeded',
          'trained_tokens = 30672',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver que deu o nome <code>ft:gpt-3.5-turbo-0613:personal::8RagA0RT</code> ao nosso modelo, seu status agora √© <code>succeeded</code> e que usou 30672 tokens, enquanto n√≥s hav√≠amos previsto</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tokens_for_train</span><span class="p">,</span> <span class="n">tokens_for_validation</span><span class="p">,</span> <span class="n">tokens_for_train</span> <span class="o">+</span> <span class="n">tokens_for_validation</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(31368, 8094, 39462)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Isto √©, ele usou menos tokens, portanto o treinamento custou menos do que hav√≠amos previsto, especificamente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">real_training_price</span> <span class="o">=</span> <span class="n">pricing</span> <span class="o">*</span> <span class="p">(</span><span class="n">trained_tokens</span> <span class="o">//</span> <span class="n">num_tokens_pricing</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Real training price: $</span><span class="si">{</span><span class="n">real_training_price</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Real training price: $0.24',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Al√©m dessas informa√ß√µes, se formos √† p√°gina <a href="https://platform.openai.com/finetune" target="_blank" rel="nofollow noreferrer">finetune</a> da OpenAI, podemos ver que nosso modelo est√° l√°.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/openai_fine_tuning_process.webp" alt="open ai finetune">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Tamb√©m podemos ver quanto nos custou o treinamento</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/openai_fine_tuning_cost.webp" alt="open ai finetune cost">
      <p>Como podemos ver, foram apenas $0,25</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>E por √∫ltimo, vamos ver quanto tempo levou para fazer este treinamento. Podemos ver a que horas come√ßou.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/openai_fine_tuning_process_start_time.webp" alt="open ai finetune start">
      <p>E a que horas terminou</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/openai_fine_tuning_process_stop_time.webp" alt="open ai finetune end">
      <p>Portanto, levou mais ou menos uns 10 minutos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Teste do modelo">Teste do modelo<a class="anchor-link" href="#Teste do modelo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 88" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Dentro do <a href="https://platform.openai.com/playground?mode=chat" target="_blank" rel="nofollow noreferrer">playground</a> da OpenAI podemos provar nosso modelo, mas vamos fazer isso atrav√©s da API como aprendemos aqui</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">&quot;¬øC√≥mo se define una funci√≥n en Python?&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span> <span class="o">=</span> <span class="n">fine_tuned_model</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}],</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">type</span><span class="p">(</span><span class="n">response</span><span class="p">),</span> <span class="n">response</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(openai.types.chat.chat_completion.ChatCompletion,',
          'ChatCompletion(id=&#x27;chatcmpl-8RvkVG8a5xjI2UZdXgdOGGcoelefc&#x27;, choices=[Choice(finish_reason=&#x27;stop&#x27;, index=0, message=ChatCompletionMessage(content=&#x27;Una funci√≥n en Python se define utilizando la palabra clave `def`, seguida del nombre de la funci√≥n, par√©ntesis y dos puntos. El cuerpo de la funci√≥n se indenta debajo. [M√°s informaci√≥n](https://www.maximofn.com/python/)&#x27;, role=&#x27;assistant&#x27;, function_call=None, tool_calls=None))], created=1701667535, model=&#x27;ft:gpt-3.5-turbo-0613:personal::8RagA0RT&#x27;, object=&#x27;chat.completion&#x27;, system_fingerprint=None, usage=CompletionUsage(completion_tokens=54, prompt_tokens=16, total_tokens=70)))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.id = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.choices = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">)):</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">] = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].finish_reason = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">finish_reason</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].index = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">index</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n\t\t</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message.content = </span><span class="se">\n\t\t</span><span class="si">{</span><span class="n">content</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message.role = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">role</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message.function_call = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">function_call</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.choices[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].message.tool_calls = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">tool_calls</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.created = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">created</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.model = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">model</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.object = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">object</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.system_fingerprint = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">system_fingerprint</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.usage = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">usage</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.usage.completion_tokens = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">usage</span><span class="o">.</span><span class="n">completion_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.usage.prompt_tokens = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">usage</span><span class="o">.</span><span class="n">prompt_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.usage.total_tokens = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">usage</span><span class="o">.</span><span class="n">total_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'response.id = chatcmpl-8RvkVG8a5xjI2UZdXgdOGGcoelefc',
          'response.choices = [Choice(finish_reason=&#x27;stop&#x27;, index=0, message=ChatCompletionMessage(content=&#x27;Una funci√≥n en Python se define utilizando la palabra clave `def`, seguida del nombre de la funci√≥n, par√©ntesis y dos puntos. El cuerpo de la funci√≥n se indenta debajo. [M√°s informaci√≥n](https://www.maximofn.com/python/)&#x27;, role=&#x27;assistant&#x27;, function_call=None, tool_calls=None))]',
          'response.choices[0] = Choice(finish_reason=&#x27;stop&#x27;, index=0, message=ChatCompletionMessage(content=&#x27;Una funci√≥n en Python se define utilizando la palabra clave `def`, seguida del nombre de la funci√≥n, par√©ntesis y dos puntos. El cuerpo de la funci√≥n se indenta debajo. [M√°s informaci√≥n](https://www.maximofn.com/python/)&#x27;, role=&#x27;assistant&#x27;, function_call=None, tool_calls=None))',
          'response.choices[0].finish_reason = stop',
          'response.choices[0].index = 0',
          'response.choices[0].message = ChatCompletionMessage(content=&#x27;Una funci√≥n en Python se define utilizando la palabra clave `def`, seguida del nombre de la funci√≥n, par√©ntesis y dos puntos. El cuerpo de la funci√≥n se indenta debajo. [M√°s informaci√≥n](https://www.maximofn.com/python/)&#x27;, role=&#x27;assistant&#x27;, function_call=None, tool_calls=None)',
          'response.choices[0].message.content =',
          'Una funci√≥n en Python se define utilizando la palabra clave `def`, seguida del nombre de la funci√≥n, par√©ntesis y dos puntos. El cuerpo de la funci√≥n se indenta debajo. [M√°s informaci√≥n](https://www.maximofn.com/python/)',
          'response.choices[0].message.role = assistant',
          'response.choices[0].message.function_call = None',
          'response.choices[0].message.tool_calls = None',
          'response.created = 1701667535',
          'response.model = ft:gpt-3.5-turbo-0613:personal::8RagA0RT',
          'response.object = chat.completion',
          'response.system_fingerprint = None',
          'response.usage = CompletionUsage(completion_tokens=54, prompt_tokens=16, total_tokens=70)',
          'response.usage.completion_tokens = 54',
          'response.usage.prompt_tokens = 16',
          'response.usage.total_tokens = 70',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Una funci√≥n en Python se define utilizando la palabra clave `def`, seguida del nombre de la funci√≥n, par√©ntesis y dos puntos. El cuerpo de la funci√≥n se indenta debajo. [M√°s informaci√≥n](https://www.maximofn.com/python/)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Temos um modelo que n√£o apenas resolve a resposta, mas tamb√©m nos fornece um link para a documenta√ß√£o do nosso blog.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos ver como se comporta com um exemplo que claramente n√£o tem nada a ver com o blog</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">promtp</span> <span class="o">=</span> <span class="s2">&quot;¬øC√≥mo puedo cocinar pollo frito?&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span> <span class="o">=</span> <span class="n">fine_tuned_model</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">promtp</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}],</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">)):</span>',
      '<span class="w">    </span><span class="n">content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">content</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Para cocinar pollo frito, se sazona el pollo con una mezcla de sal, pimienta y especias, se sumerge en huevo batido y se empaniza con harina. Luego, se fr√≠e en aceite caliente hasta que est√© dorado y cocido por dentro. [M√°s informaci√≥n](https://maximofn.com/pollo-frito/)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se pode ver, ele nos fornece o link <code>https://maximofn.com/pollo-frito/</code>, que n√£o existe. Portanto, mesmo tendo reentrenado um modelo de chatGPT, √© preciso ter cuidado com as respostas e n√£o confiar 100% nelas.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Gerar imagens com DALL-E 3">Gerar imagens com DALL-E 3<a class="anchor-link" href="#Gerar imagens com DALL-E 3"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 89" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para gerar imagens com o DALL-E 3, temos que usar o seguinte c√≥digo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">images</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;dall-e-3&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">prompt</span><span class="o">=</span><span class="s2">&quot;a white siamese cat&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">size</span><span class="o">=</span><span class="s2">&quot;1024x1024&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">quality</span><span class="o">=</span><span class="s2">&quot;standard&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">n</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">type</span><span class="p">(</span><span class="n">response</span><span class="p">),</span> <span class="n">response</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(openai.types.images_response.ImagesResponse,',
          'ImagesResponse(created=1701823487, data=[Image(b64_json=None, revised_prompt=&quot;Create a detailed image of a Siamese cat with a white coat. The cat&#x27;s perceptive blue eyes should be prominent, along with its sleek, short fur and graceful feline features. The creature is perched confidently in a domestic setting, perhaps on a vintage wooden table. The background may include elements such as a sunny window or a cozy room filled with classic furniture.&quot;, url=&#x27;https://oaidalleapiprodscus.blob.core.windows.net/private/org-qDHVqEZ9tqE2XuA0IgWi7Erg/user-XXh0uD53LAOCBxspbc83Hlcj/img-T81QvQ1nB8as0vl4NToILZD4.png?st=2023-12-05T23%3A44%3A47Z&amp;amp;se=2023-12-06T01%3A44%3A47Z&amp;amp;sp=r&amp;amp;sv=2021-08-06&amp;amp;sr=b&amp;amp;rscd=inline&amp;amp;rsct=image/png&amp;amp;skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&amp;amp;sktid=a48cca56-e6da-484e-a814-9c849652bcb3&amp;amp;skt=2023-12-05T19%3A58%3A58Z&amp;amp;ske=2023-12-06T19%3A58%3A58Z&amp;amp;sks=b&amp;amp;skv=2021-08-06&amp;amp;sig=nzDujTj3Y3THuRrq2kOvASA5xP73Mm8HHlQuKKkLYu8%3D&#x27;)]))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.created = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">created</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">)):</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.data[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">] = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.data[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].b64_json = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">b64_json</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.data[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].revised_prompt = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">revised_prompt</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.data[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].url = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">url</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'response.created = 1701823487',
          'response.data[0] = Image(b64_json=None, revised_prompt=&quot;Create a detailed image of a Siamese cat with a white coat. The cat&#x27;s perceptive blue eyes should be prominent, along with its sleek, short fur and graceful feline features. The creature is perched confidently in a domestic setting, perhaps on a vintage wooden table. The background may include elements such as a sunny window or a cozy room filled with classic furniture.&quot;, url=&#x27;https://oaidalleapiprodscus.blob.core.windows.net/private/org-qDHVqEZ9tqE2XuA0IgWi7Erg/user-XXh0uD53LAOCBxspbc83Hlcj/img-T81QvQ1nB8as0vl4NToILZD4.png?st=2023-12-05T23%3A44%3A47Z&amp;amp;se=2023-12-06T01%3A44%3A47Z&amp;amp;sp=r&amp;amp;sv=2021-08-06&amp;amp;sr=b&amp;amp;rscd=inline&amp;amp;rsct=image/png&amp;amp;skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&amp;amp;sktid=a48cca56-e6da-484e-a814-9c849652bcb3&amp;amp;skt=2023-12-05T19%3A58%3A58Z&amp;amp;ske=2023-12-06T19%3A58%3A58Z&amp;amp;sks=b&amp;amp;skv=2021-08-06&amp;amp;sig=nzDujTj3Y3THuRrq2kOvASA5xP73Mm8HHlQuKKkLYu8%3D&#x27;)',
          'response.data[0].b64_json = None',
          'response.data[0].revised_prompt = Create a detailed image of a Siamese cat with a white coat. The cat&#x27;s perceptive blue eyes should be prominent, along with its sleek, short fur and graceful feline features. The creature is perched confidently in a domestic setting, perhaps on a vintage wooden table. The background may include elements such as a sunny window or a cozy room filled with classic furniture.',
          'response.data[0].url = https://oaidalleapiprodscus.blob.core.windows.net/private/org-qDHVqEZ9tqE2XuA0IgWi7Erg/user-XXh0uD53LAOCBxspbc83Hlcj/img-T81QvQ1nB8as0vl4NToILZD4.png?st=2023-12-05T23%3A44%3A47Z&amp;amp;se=2023-12-06T01%3A44%3A47Z&amp;amp;sp=r&amp;amp;sv=2021-08-06&amp;amp;sr=b&amp;amp;rscd=inline&amp;amp;rsct=image/png&amp;amp;skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&amp;amp;sktid=a48cca56-e6da-484e-a814-9c849652bcb3&amp;amp;skt=2023-12-05T19%3A58%3A58Z&amp;amp;ske=2023-12-06T19%3A58%3A58Z&amp;amp;sks=b&amp;amp;skv=2021-08-06&amp;amp;sig=nzDujTj3Y3THuRrq2kOvASA5xP73Mm8HHlQuKKkLYu8%3D',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver um dado muito interessante que n√£o conseguimos ver quando usamos o DALL-E 3 atrav√©s da interface da OpenAI, e √© o prompt que foi passado ao modelo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">revised_prompt</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&quot;Create a detailed image of a Siamese cat with a white coat. The cat&#x27;s perceptive blue eyes should be prominent, along with its sleek, short fur and graceful feline features. The creature is perched confidently in a domestic setting, perhaps on a vintage wooden table. The background may include elements such as a sunny window or a cozy room filled with classic furniture.&quot;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Com esse prompt, gerou-se a seguinte imagem</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">requests</span>',
      '<span class="w"> </span>',
      '<span class="n">url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">url</span>',
      '<span class="c1"># img_data = requests.get(url).content</span>',
      '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;openai/dall-e-3.png&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">handler</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">handler</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="openai/dall-e-3.png" alt="dall-e 3">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como temos o prompt que a OpenAI utilizou, na verdade vamos tentar us√°-lo para gerar um gato semelhante, mas com os olhos verdes.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">revised_prompt</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">revised_prompt</span>',
      '<span class="n">gree_eyes</span> <span class="o">=</span> <span class="n">revised_prompt</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&quot;blue&quot;</span><span class="p">,</span> <span class="s2">&quot;green&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">images</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;dall-e-3&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">prompt</span><span class="o">=</span><span class="n">gree_eyes</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">size</span><span class="o">=</span><span class="s2">&quot;1024x1024&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">quality</span><span class="o">=</span><span class="s2">&quot;standard&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">n</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">revised_prompt</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">image_url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">url</span>',
      '<span class="w"> </span>',
      '<span class="n">image_path</span> <span class="o">=</span> <span class="s1">&#39;openai/dall-e-3-green.png&#39;</span>',
      '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">image_path</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">handler</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">handler</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">image_url</span><span class="p">)</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'A well-defined image of a Siamese cat boasting a shiny white coat. Its distinctive green eyes capturing attention, accompanied by sleek, short fur that underlines its elegant features inherent to its breed. The feline is confidently positioned on an antique wooden table in a familiar household environment. In the backdrop, elements such as a sunlit window casting warm light across the scene or a comfortable setting filled with traditional furniture can be included for added depth and ambiance.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="openai/dall-e-3-green.png" alt="dall-e-3-green">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Embora a cor do gato tenha mudado e n√£o apenas dos olhos, a posi√ß√£o e o fundo s√£o muito semelhantes.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al√©m do prompt, as outras vari√°veis que podemos modificar s√£o</p>
      <ul>
        <li><code>model</code>: Permite escolher o modelo de gera√ß√£o de imagens, os poss√≠veis valores s√£o <code>dalle-2</code> e <code>dalle-3</code></li>
        <li><code>size</code>: Permite mudar o tamanho da imagem, os valores poss√≠veis s√£o <code>256x256</code>, <code>512x512</code>, <code>1024x1024</code>, <code>1792x1024</code>, <code>1024x1792</code> pixels</li>
        <li><code>quality</code>: Permite mudar a qualidade da imagem, os valores poss√≠veis s√£o <code>standard</code> ou <code>hd</code></li>
        <li><code>response_format</code>: Permite mudar o formato da resposta, os valores poss√≠veis s√£o <code>url</code> ou <code>b64_json</code>* <code>n</code>: Permite mudar o n√∫mero de imagens que queremos que nos retorne o modelo. Com DALL-E 3, s√≥ podemos pedir uma imagem.</li>
        <li><code>style</code>: Permite mudar o estilo da imagem, os poss√≠veis valores s√£o <code>vivid</code> ou <code>natural</code></li>
      </ul>
      <p>Ent√£o, vamos gerar uma imagem de alta qualidade</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">images</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;dall-e-3&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">prompt</span><span class="o">=</span><span class="n">gree_eyes</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">size</span><span class="o">=</span><span class="s2">&quot;1024x1792&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">quality</span><span class="o">=</span><span class="s2">&quot;hd&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">n</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">style</span><span class="o">=</span><span class="s2">&quot;natural&quot;</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">revised_prompt</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">image_url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">url</span>',
      '<span class="w"> </span>',
      '<span class="n">image_path</span> <span class="o">=</span> <span class="s1">&#39;openai/dall-e-3-hd.png&#39;</span>',
      '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">image_path</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">handler</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">handler</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">image_url</span><span class="p">)</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
      '<span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">image_path</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Render a portrait of a Siamese cat boasting a pristine white coat. This cat should have captivating green eyes that stand out. Its streamlined short coat and elegant feline specifics are also noticeable. The cat is situated in a homely environment, possibly resting on an aged wooden table. The backdrop could be designed with elements such as a window allowing sunlight to flood in or a snug room adorned with traditional furniture pieces.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="openai/dall-e-3-hd.png" alt="dall-e-3-hd">
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Visao">Vis√£o<a class="anchor-link" href="#Visao"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 90" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a usar o modelo de vis√£o com a seguinte imagem</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTU376h7oyFuEABd-By4gQhfjEBZsaSyKq539IqklI4MCEItVm_b7jtStTqBcP3qzaAVNI" alt="panda">
      <p>Que aqui em pequeno parece um panda, mas se a virmos de perto √© mais dif√≠cil ver o panda</p>
      <div style="text-align:center;">
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTU376h7oyFuEABd-By4gQhfjEBZsaSyKq539IqklI4MCEItVm_b7jtStTqBcP3qzaAVNI" alt="panda" style="width:637px;height:939px;">
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para usar o modelo de vis√£o, temos que utilizar o seguinte c√≥digo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">prompt</span> <span class="o">=</span> <span class="s2">&quot;¬øVes alg√∫n animal en esta imagen?&quot;</span>',
      '<span class="n">image_url</span> <span class="o">=</span> <span class="s2">&quot;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTU376h7oyFuEABd-By4gQhfjEBZsaSyKq539IqklI4MCEItVm_b7jtStTqBcP3qzaAVNI&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;gpt-4-vision-preview&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span><span class="o">=</span><span class="p">[</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">      </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">      </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[</span>',
      '<span class="w">        </span><span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;text&quot;</span><span class="p">,</span> <span class="s2">&quot;text&quot;</span><span class="p">:</span> <span class="n">prompt</span><span class="p">},</span>',
      '<span class="w">        </span><span class="p">{</span>',
      '<span class="w">          </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;image_url&quot;</span><span class="p">,</span>',
      '<span class="w">          </span><span class="s2">&quot;image_url&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">            </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">image_url</span><span class="p">,</span>',
      '<span class="w">          </span><span class="p">},</span>',
      '<span class="w">        </span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">],</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w">  </span><span class="p">],</span>',
      '<span class="w">  </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">300</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Lo siento, no puedo ayudar con la identificaci√≥n o comentarios sobre contenido oculto en im√°genes.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>N√£o consegue encontrar o panda, mas n√£o √© o objetivo deste post que ele veja o panda, apenas explicar como usar o modelo de vis√£o do GPT4, ent√£o n√£o vamos nos aprofundar mais neste assunto.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos passar v√°rias imagens de uma vez</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">image_url1</span> <span class="o">=</span> <span class="s2">&quot;https://i0.wp.com/www.aulapt.org/wp-content/uploads/2018/10/ilusiones-%C3%B3pticas.jpg?fit=649%2C363&amp;amp;ssl=1&quot;</span>',
      '<span class="n">image_url2</span> <span class="o">=</span> <span class="s2">&quot;https://i.pinimg.com/736x/69/ed/5a/69ed5ab09092880e38513a8870efee10.jpg&quot;</span>',
      '<span class="n">prompt</span> <span class="o">=</span> <span class="s2">&quot;¬øVes alg√∫n animal en estas im√°genes?&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">image_url1</span><span class="p">))</span>',
      '<span class="n">display</span><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">image_url2</span><span class="p">))</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">completions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;gpt-4-vision-preview&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">messages</span><span class="o">=</span><span class="p">[</span>',
      '<span class="w">    </span><span class="p">{</span>',
      '<span class="w">      </span><span class="s2">&quot;role&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">      </span><span class="s2">&quot;content&quot;</span><span class="p">:</span> <span class="p">[</span>',
      '<span class="w">        </span><span class="p">{</span>',
      '<span class="w">          </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;text&quot;</span><span class="p">,</span>',
      '<span class="w">          </span><span class="s2">&quot;text&quot;</span><span class="p">:</span> <span class="n">prompt</span><span class="p">,</span>',
      '<span class="w">        </span><span class="p">},</span>',
      '<span class="w">        </span><span class="p">{</span>',
      '<span class="w">          </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;image_url&quot;</span><span class="p">,</span>',
      '<span class="w">          </span><span class="s2">&quot;image_url&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">            </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">image_url1</span><span class="p">,</span>',
      '<span class="w">          </span><span class="p">},</span>',
      '<span class="w">        </span><span class="p">},</span>',
      '<span class="w">        </span><span class="p">{</span>',
      '<span class="w">          </span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;image_url&quot;</span><span class="p">,</span>',
      '<span class="w">          </span><span class="s2">&quot;image_url&quot;</span><span class="p">:</span> <span class="p">{</span>',
      '<span class="w">            </span><span class="s2">&quot;url&quot;</span><span class="p">:</span> <span class="n">image_url2</span><span class="p">,</span>',
      '<span class="w">          </span><span class="p">},</span>',
      '<span class="w">        </span><span class="p">},</span>',
      '<span class="w">      </span><span class="p">],</span>',
      '<span class="w">    </span><span class="p">}</span>',
      '<span class="w">  </span><span class="p">],</span>',
      '<span class="w">  </span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">300</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;IPython.core.display.Image object&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          '&amp;lt;IPython.core.display.Image object&amp;gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockOutputCell
        text={[
          'S√≠, en ambas im√°genes se ven figuras de animales. Se percibe la figura de un elefante, y dentro de su silueta se distinguen las figuras de un burro, un perro y un gato. Estas im√°genes emplean un estilo conocido como ilusi√≥n √≥ptica, en donde se crean m√∫ltiples im√°genes dentro de una m√°s grande, a menudo jugando con la percepci√≥n de la profundidad y los contornos.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Texto para fala">Texto para fala<a class="anchor-link" href="#Texto para fala"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 91" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos gerar √°udio a partir de texto com o seguinte c√≥digo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">speech_file_path</span> <span class="o">=</span> <span class="s2">&quot;openai/speech.mp3&quot;</span>',
      '<span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;Hola desde el blog de MaximoFN&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">audio</span><span class="o">.</span><span class="n">speech</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;tts-1&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">voice</span><span class="o">=</span><span class="s2">&quot;alloy&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="nb">input</span><span class="o">=</span><span class="n">text</span><span class="p">,</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span><span class="o">.</span><span class="n">stream_to_file</span><span class="p">(</span><span class="n">speech_file_path</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <audio controls>
      <source src="openai/speech.mp3" type="audio/mpeg">
      <p>O seu navegador n√£o suporta o elemento de √°udio.</p>
      </audio>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos escolher</p>
      <ul>
        <li>model: Permite escolher o modelo de gera√ß√£o de √°udio. Os poss√≠veis valores s√£o <code>tts-1</code> e <code>tts-1-hd</code>* voice: Permite escolher a voz que queremos que o modelo use, os poss√≠veis valores s√£o <code>alloy</code>, <code>echo</code>, <code>fable</code>, <code>onyx</code>, <code>nova</code> e <code>shimmer</code></li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Fala para texto (Whisper)">Fala para texto (Whisper)<a class="anchor-link" href="#Fala para texto (Whisper)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 92" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos transcrever √°udio com o Whisper utilizando o seguinte c√≥digo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">audio_file</span> <span class="o">=</span> <span class="s2">&quot;MicroMachines.mp3&quot;</span>',
      '<span class="n">audio_file</span><span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">audio_file</span><span class="p">,</span> <span class="s2">&quot;rb&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">transcript</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">audio</span><span class="o">.</span><span class="n">transcriptions</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;whisper-1&quot;</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">file</span><span class="o">=</span><span class="n">audio_file</span>',
      '<span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="nb">print</span><span class="p">(</span><span class="n">transcript</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'This is the Micromachine Man presenting the most midget miniature motorcade of micromachines. Each one has dramatic details, terrific trim, precision paint jobs, plus incredible micromachine pocket play sets. There&#x27;s a police station, fire station, restaurant, service station, and more. Perfect pocket portables to take anyplace. And there are many miniature play sets to play with, and each one comes with its own special edition micromachine vehicle and fun fantastic features that miraculously move. Raise the boat lift at the airport, marina, man the gun turret at the army base, clean your car at the car wash, raise the toll bridge. And these play sets fit together to form a micromachine world. Micromachine pocket play sets so tremendously tiny, so perfectly precise, so dazzlingly detailed, you&#x27;ll want to pocket them all. Micromachines and micromachine pocket play sets sold separately from Galoob. The smaller they are, the better they are.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <audio controls>
      <source src="MicroMachines.mp3" type="audio/mpeg">
      <p>Seu navegador n√£o suporta o elemento de √°udio.</p>
      </audio>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Moderacao de conteudo">Modera√ß√£o de conte√∫do<a class="anchor-link" href="#Moderacao de conteudo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 93" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos obter a categoria de um texto entre as classes <code>sexual</code>, <code>hate</code>, <code>harassment</code>, <code>self-harm</code>, <code>sexual/minors</code>, <code>hate/threatening</code>, <code>violence/graphic</code>, <code>self-harm/intent</code>, <code>self-harm/instructions</code>, <code>harassment/threatening</code> e <code>violence</code>, para isso usamos o seguinte c√≥digo com o texto transcrito anteriormente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">text</span> <span class="o">=</span> <span class="n">transcript</span><span class="o">.</span><span class="n">text</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">moderations</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">input</span><span class="o">=</span><span class="n">text</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">type</span><span class="p">(</span><span class="n">response</span><span class="p">),</span> <span class="n">response</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(openai.types.moderation_create_response.ModerationCreateResponse,',
          'ModerationCreateResponse(id=&#x27;modr-8RxMZItvmLblEl5QPgCv19Jl741SS&#x27;, model=&#x27;text-moderation-006&#x27;, results=[Moderation(categories=Categories(harassment=False, harassment_threatening=False, hate=False, hate_threatening=False, self_harm=False, self_harm_instructions=False, self_harm_intent=False, sexual=False, sexual_minors=False, violence=False, violence_graphic=False, self-harm=False, sexual/minors=False, hate/threatening=False, violence/graphic=False, self-harm/intent=False, self-harm/instructions=False, harassment/threatening=False), category_scores=CategoryScores(harassment=0.0003560568729881197, harassment_threatening=2.5426568299735663e-06, hate=1.966094168892596e-05, hate_threatening=6.384455986108151e-08, self_harm=7.903140613052528e-07, self_harm_instructions=6.443992219828942e-07, self_harm_intent=1.2202733046251524e-07, sexual=0.0003779272665269673, sexual_minors=1.8967952200910076e-05, violence=9.489082731306553e-05, violence_graphic=5.1929731853306293e-05, self-harm=7.903140613052528e-07, sexual/minors=1.8967952200910076e-05, hate/threatening=6.384455986108151e-08, violence/graphic=5.1929731853306293e-05, self-harm/intent=1.2202733046251524e-07, self-harm/instructions=6.443992219828942e-07, harassment/threatening=2.5426568299735663e-06), flagged=False)]))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.id = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.model = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">model</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">)):</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">] = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.harassment = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">harassment</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.harassment_threatening = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">harassment_threatening</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.hate = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">hate</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.hate_threatening = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">hate_threatening</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.self_harm = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">self_harm</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.self_harm_instructions = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">self_harm_instructions</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.self_harm_intent = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">self_harm_intent</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.sexual = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">sexual</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.sexual_minors = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">sexual_minors</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.violence = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">violence</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.violence_graphic = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">violence_graphic</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.harassment = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">harassment</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.harassment_threatening = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">harassment_threatening</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.hate = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">hate</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.hate_threatening = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">hate_threatening</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.self_harm = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">self_harm</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.self_harm_instructions = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">self_harm_instructions</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.self_harm_intent = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">self_harm_intent</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.sexual = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">sexual</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.sexual_minors = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">sexual_minors</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.violence = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">violence</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.violence_graphic = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">violence_graphic</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].flagged = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">flagged</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'response.id = modr-8RxMZItvmLblEl5QPgCv19Jl741SS',
          'response.model = text-moderation-006',
          'response.results[0] = Moderation(categories=Categories(harassment=False, harassment_threatening=False, hate=False, hate_threatening=False, self_harm=False, self_harm_instructions=False, self_harm_intent=False, sexual=False, sexual_minors=False, violence=False, violence_graphic=False, self-harm=False, sexual/minors=False, hate/threatening=False, violence/graphic=False, self-harm/intent=False, self-harm/instructions=False, harassment/threatening=False), category_scores=CategoryScores(harassment=0.0003560568729881197, harassment_threatening=2.5426568299735663e-06, hate=1.966094168892596e-05, hate_threatening=6.384455986108151e-08, self_harm=7.903140613052528e-07, self_harm_instructions=6.443992219828942e-07, self_harm_intent=1.2202733046251524e-07, sexual=0.0003779272665269673, sexual_minors=1.8967952200910076e-05, violence=9.489082731306553e-05, violence_graphic=5.1929731853306293e-05, self-harm=7.903140613052528e-07, sexual/minors=1.8967952200910076e-05, hate/threatening=6.384455986108151e-08, violence/graphic=5.1929731853306293e-05, self-harm/intent=1.2202733046251524e-07, self-harm/instructions=6.443992219828942e-07, harassment/threatening=2.5426568299735663e-06), flagged=False)',
          'response.results[0].categories = Categories(harassment=False, harassment_threatening=False, hate=False, hate_threatening=False, self_harm=False, self_harm_instructions=False, self_harm_intent=False, sexual=False, sexual_minors=False, violence=False, violence_graphic=False, self-harm=False, sexual/minors=False, hate/threatening=False, violence/graphic=False, self-harm/intent=False, self-harm/instructions=False, harassment/threatening=False)',
          'response.results[0].categories.harassment = False',
          'response.results[0].categories.harassment_threatening = False',
          'response.results[0].categories.hate = False',
          'response.results[0].categories.hate_threatening = False',
          'response.results[0].categories.self_harm = False',
          'response.results[0].categories.self_harm_instructions = False',
          'response.results[0].categories.self_harm_intent = False',
          'response.results[0].categories.sexual = False',
          'response.results[0].categories.sexual_minors = False',
          'response.results[0].categories.violence = False',
          'response.results[0].categories.violence_graphic = False',
          'response.results[0].category_scores = CategoryScores(harassment=0.0003560568729881197, harassment_threatening=2.5426568299735663e-06, hate=1.966094168892596e-05, hate_threatening=6.384455986108151e-08, self_harm=7.903140613052528e-07, self_harm_instructions=6.443992219828942e-07, self_harm_intent=1.2202733046251524e-07, sexual=0.0003779272665269673, sexual_minors=1.8967952200910076e-05, violence=9.489082731306553e-05, violence_graphic=5.1929731853306293e-05, self-harm=7.903140613052528e-07, sexual/minors=1.8967952200910076e-05, hate/threatening=6.384455986108151e-08, violence/graphic=5.1929731853306293e-05, self-harm/intent=1.2202733046251524e-07, self-harm/instructions=6.443992219828942e-07, harassment/threatening=2.5426568299735663e-06)',
          'response.results[0].category_scores.harassment = 0.0003560568729881197',
          'response.results[0].category_scores.harassment_threatening = 2.5426568299735663e-06',
          'response.results[0].category_scores.hate = 1.966094168892596e-05',
          'response.results[0].category_scores.hate_threatening = 6.384455986108151e-08',
          'response.results[0].category_scores.self_harm = 7.903140613052528e-07',
          'response.results[0].category_scores.self_harm_instructions = 6.443992219828942e-07',
          'response.results[0].category_scores.self_harm_intent = 1.2202733046251524e-07',
          'response.results[0].category_scores.sexual = 0.0003779272665269673',
          'response.results[0].category_scores.sexual_minors = 1.8967952200910076e-05',
          'response.results[0].category_scores.violence = 9.489082731306553e-05',
          'response.results[0].category_scores.violence_graphic = 5.1929731853306293e-05',
          'response.results[0].flagged = False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O √°udio transcritor n√£o est√° em nenhuma das categorias anteriores, vamos tentar com outro texto</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;I want to kill myself&quot;</span>',
      '<span class="w"> </span>',
      '<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">moderations</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">input</span><span class="o">=</span><span class="n">text</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">)):</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.harassment = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">harassment</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.harassment_threatening = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">harassment_threatening</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.hate = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">hate</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.hate_threatening = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">hate_threatening</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.self_harm = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">self_harm</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.self_harm_instructions = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">self_harm_instructions</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.self_harm_intent = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">self_harm_intent</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.sexual = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">sexual</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.sexual_minors = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">sexual_minors</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.violence = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">violence</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].categories.violence_graphic = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">violence_graphic</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.harassment = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">harassment</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.harassment_threatening = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">harassment_threatening</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.hate = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">hate</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.hate_threatening = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">hate_threatening</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.self_harm = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">self_harm</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.self_harm_instructions = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">self_harm_instructions</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.self_harm_intent = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">self_harm_intent</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.sexual = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">sexual</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.sexual_minors = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">sexual_minors</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.violence = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">violence</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].category_scores.violence_graphic = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">category_scores</span><span class="o">.</span><span class="n">violence_graphic</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">()</span>',
      '<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;response.results[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].flagged = </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">flagged</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'response.results[0].categories.harassment = False',
          'response.results[0].categories.harassment_threatening = False',
          'response.results[0].categories.hate = False',
          'response.results[0].categories.hate_threatening = False',
          'response.results[0].categories.self_harm = True',
          'response.results[0].categories.self_harm_instructions = False',
          'response.results[0].categories.self_harm_intent = True',
          'response.results[0].categories.sexual = False',
          'response.results[0].categories.sexual_minors = False',
          'response.results[0].categories.violence = True',
          'response.results[0].categories.violence_graphic = False',
          'response.results[0].category_scores.harassment = 0.004724912345409393',
          'response.results[0].category_scores.harassment_threatening = 0.00023778305330779403',
          'response.results[0].category_scores.hate = 1.1909247405128554e-05',
          'response.results[0].category_scores.hate_threatening = 1.826493189582834e-06',
          'response.results[0].category_scores.self_harm = 0.9998544454574585',
          'response.results[0].category_scores.self_harm_instructions = 3.5801923647937883e-09',
          'response.results[0].category_scores.self_harm_intent = 0.99969482421875',
          'response.results[0].category_scores.sexual = 2.141016238965676e-06',
          'response.results[0].category_scores.sexual_minors = 2.840671520232263e-08',
          'response.results[0].category_scores.violence = 0.8396497964859009',
          'response.results[0].category_scores.violence_graphic = 2.7347923605702817e-05',
          'response.results[0].flagged = True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora, se detectar que o texto √© <code>self_harm_intent</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Assistentes">Assistentes<a class="anchor-link" href="#Assistentes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 94" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A OpenAI nos d√° a possibilidade de criar assistentes, de maneira que os podemos criar com as caracter√≠sticas que n√≥s quisermos, por exemplo, um assistente especialista em Python, e poder us√°-lo como se fosse um modelo particular da OpenAI. Isso significa que podemos us√°-lo para uma consulta e ter uma conversa com ele, e depois de algum tempo, reutiliz√°-lo com uma nova consulta em uma nova conversa.</p>
      <p>Ao trabalhar com assistentes, teremos que cri√°-los, criar um fio, envi√°-los a mensagem, execut√°-los, esperar que respondam e ver a resposta.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://cdn.openai.com/API/docs/images/diagram-assistant.webp" alt="asistentes">
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Criar o assistente">Criar o assistente<a class="anchor-link" href="#Criar o assistente"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 95" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro criamos o assistente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">code_interpreter_assistant</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">assistants</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;Python expert&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;Eres un experto en Python. Analiza y ejecuta el c√≥digo para ayuda a los usuarios a resolver sus problemas.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">tools</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;code_interpreter&quot;</span><span class="p">}],</span>',
      '<span class="w">    </span><span class="n">model</span><span class="o">=</span><span class="s2">&quot;gpt-3.5-turbo-1106&quot;</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">type</span><span class="p">(</span><span class="n">code_interpreter_assistant</span><span class="p">),</span> <span class="n">code_interpreter_assistant</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(openai.types.beta.assistant.Assistant,',
          'Assistant(id=&#x27;asst_A2F9DPqDiZYFc5hOC6Rb2y0x&#x27;, created_at=1701822478, description=None, file_ids=[], instructions=&#x27;Eres un experto en Python. Analiza y ejecuta el c√≥digo para ayuda a los usuarios a resolver sus problemas.&#x27;, metadata=&#x7B;&#x7D;, model=&#x27;gpt-3.5-turbo-1106&#x27;, name=&#x27;Python expert&#x27;, object=&#x27;assistant&#x27;, tools=[ToolCodeInterpreter(type=&#x27;code_interpreter&#x27;)]))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">code_interpreter_assistant_id</span> <span class="o">=</span> <span class="n">code_interpreter_assistant</span><span class="o">.</span><span class="n">id</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;code_interpreter_assistant_id = </span><span class="si">{</span><span class="n">code_interpreter_assistant_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'code_interpreter_assistant_id = asst_A2F9DPqDiZYFc5hOC6Rb2y0x',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Na hora de criar o assistente, as vari√°veis que temos s√£o</p>
      <ul>
        <li><code>name</code>: nome do assistente</li>
        <li><code>instru√ß√µes</code>: Instru√ß√µes para o assistente. Aqui podemos explicar como o assistente deve se comportar.* <code>tools</code>: Ferramentas que o assistente pode usar. No momento, apenas est√£o dispon√≠veis <code>code_interpreter</code> e <code>retrieval</code></li>
        <li><code>model</code>: Modelo que o assistente vai usar</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Este assistente j√° foi criado e podemos us√°-lo todas as vezes que quisermos. Para isso, precisamos criar um novo fio, assim, se no futuro outra pessoa quiser us√°-lo porque for √∫til, ela poder√° faz√™-lo simplesmente criando um novo fio. Ela s√≥ precisaria do ID do assistente.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Fio ou thread">Fio ou thread<a class="anchor-link" href="#Fio ou thread"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 96" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Um fio representa uma nova conversa√ß√£o com o assistente, assim, mesmo que tenha passado algum tempo, enquanto tivermos o ID do fio, podemos continuar a conversa. Para criar um novo fio, temos que usar o seguinte c√≥digo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">thread</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">create</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">type</span><span class="p">(</span><span class="n">thread</span><span class="p">),</span> <span class="n">thread</span>',
      '<span class="n">thread_id</span> <span class="o">=</span> <span class="n">thread</span><span class="o">.</span><span class="n">id</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;thread_id = </span><span class="si">{</span><span class="n">thread_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'thread_id = thread_nfFT3rFjyPWHdxWvMk6jJ90H',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Enviamos um arquivo">Enviamos um arquivo<a class="anchor-link" href="#Enviamos um arquivo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 97" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a criar um arquivo .py que vamos pedir ao interpretador que nos explique</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">os</span>',
      '<span class="w"> </span>',
      '<span class="n">python_code</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;openai&quot;</span><span class="p">,</span> <span class="s2">&quot;python_code.py&quot;</span><span class="p">)</span>',
      '<span class="n">code</span> <span class="o">=</span> <span class="s2">&quot;print(&#39;Hello world!&#39;)&quot;</span>',
      '<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">python_code</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Subimos isso √† API da OpenAI usando a fun√ß√£o <code>client.files.create</code>, esta fun√ß√£o j√° usamos quando fizemos o <code>fine-tuning</code> de um modelo do chatGPT e envi√°vamos os <code>jsonl</code>s. Apenas que antes na vari√°vel <code>purpose</code> pass√°vamos <code>fine-tuning</code> pois os arquivos que envi√°vamos eram para <code>fine-tuning</code>, e agora passamos <code>assistants</code> j√° que os arquivos que vamos enviar s√£o para um assistente.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">file</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">file</span><span class="o">=</span><span class="nb">open</span><span class="p">(</span><span class="n">python_code</span><span class="p">,</span> <span class="s2">&quot;rb&quot;</span><span class="p">),</span>',
      '<span class="w">  </span><span class="n">purpose</span><span class="o">=</span><span class="s1">&#39;assistants&#39;</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">type</span><span class="p">(</span><span class="n">file</span><span class="p">),</span> <span class="n">file</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(openai.types.file_object.FileObject,',
          'FileObject(id=&#x27;file-HF8Llyzq9RiDfQIJ8zeGrru3&#x27;, bytes=21, created_at=1701822479, filename=&#x27;python_code.py&#x27;, object=&#x27;file&#x27;, purpose=&#x27;assistants&#x27;, status=&#x27;processed&#x27;, status_details=None))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Enviar uma mensagem ao assistente">Enviar uma mensagem ao assistente<a class="anchor-link" href="#Enviar uma mensagem ao assistente"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 98" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos a mensagem que vamos enviar ao assistente, al√©m de indicarmos o ID do arquivo sobre o qual queremos perguntar.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">message</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">    </span><span class="n">thread_id</span><span class="o">=</span><span class="n">thread_id</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">role</span><span class="o">=</span><span class="s2">&quot;user&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">content</span><span class="o">=</span><span class="s2">&quot;Ejecuta el script que te he pasado, expl√≠camelo y dime que da a la salida.&quot;</span><span class="p">,</span>',
      '<span class="w">    </span><span class="n">file_ids</span><span class="o">=</span><span class="p">[</span><span class="n">file</span><span class="o">.</span><span class="n">id</span><span class="p">]</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Executar o assistente">Executar o assistente<a class="anchor-link" href="#Executar o assistente"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 99" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Executamos o assistente indicando-lhe que resolva a d√∫vida do usu√°rio</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">run</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">runs</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">thread_id</span><span class="o">=</span><span class="n">thread_id</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">assistant_id</span><span class="o">=</span><span class="n">code_interpreter_assistant_id</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">instructions</span><span class="o">=</span><span class="s2">&quot;Resuleve el problema que te ha planteado el usuario.&quot;</span><span class="p">,</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">type</span><span class="p">(</span><span class="n">run</span><span class="p">),</span> <span class="n">run</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(openai.types.beta.threads.run.Run,',
          'Run(id=&#x27;run_WZxT1TUuHT5qB1ZgD34tgvPu&#x27;, assistant_id=&#x27;asst_A2F9DPqDiZYFc5hOC6Rb2y0x&#x27;, cancelled_at=None, completed_at=None, created_at=1701822481, expires_at=1701823081, failed_at=None, file_ids=[], instructions=&#x27;Resuleve el problema que te ha planteado el usuario.&#x27;, last_error=None, metadata=&#x7B;&#x7D;, model=&#x27;gpt-3.5-turbo-1106&#x27;, object=&#x27;thread.run&#x27;, required_action=None, started_at=None, status=&#x27;queued&#x27;, thread_id=&#x27;thread_nfFT3rFjyPWHdxWvMk6jJ90H&#x27;, tools=[ToolAssistantToolsCode(type=&#x27;code_interpreter&#x27;)]))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">run_id</span> <span class="o">=</span> <span class="n">run</span><span class="o">.</span><span class="n">id</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;run_id = </span><span class="si">{</span><span class="n">run_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'run_id = run_WZxT1TUuHT5qB1ZgD34tgvPu',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Aguardar ate que termine de processar">Aguardar at√© que termine de processar<a class="anchor-link" href="#Aguardar ate que termine de processar"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 100" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Enquanto o assistente est√° analisando, podemos verificar o estado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">run</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">runs</span><span class="o">.</span><span class="n">retrieve</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">thread_id</span><span class="o">=</span><span class="n">thread_id</span><span class="p">,</span>',
      '<span class="w">  </span><span class="n">run_id</span><span class="o">=</span><span class="n">run_id</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">type</span><span class="p">(</span><span class="n">run</span><span class="p">),</span> <span class="n">run</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(openai.types.beta.threads.run.Run,',
          'Run(id=&#x27;run_WZxT1TUuHT5qB1ZgD34tgvPu&#x27;, assistant_id=&#x27;asst_A2F9DPqDiZYFc5hOC6Rb2y0x&#x27;, cancelled_at=None, completed_at=None, created_at=1701822481, expires_at=1701823081, failed_at=None, file_ids=[], instructions=&#x27;Resuleve el problema que te ha planteado el usuario.&#x27;, last_error=None, metadata=&#x7B;&#x7D;, model=&#x27;gpt-3.5-turbo-1106&#x27;, object=&#x27;thread.run&#x27;, required_action=None, started_at=1701822481, status=&#x27;in_progress&#x27;, thread_id=&#x27;thread_nfFT3rFjyPWHdxWvMk6jJ90H&#x27;, tools=[ToolAssistantToolsCode(type=&#x27;code_interpreter&#x27;)]))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">run</span><span class="o">.</span><span class="n">status</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '&#x27;in_progress&#x27;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">while</span> <span class="n">run</span><span class="o">.</span><span class="n">status</span> <span class="o">!=</span> <span class="s2">&quot;completed&quot;</span><span class="p">:</span>',
      '<span class="w">    </span><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">run</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">runs</span><span class="o">.</span><span class="n">retrieve</span><span class="p">(</span>',
      '<span class="w">      </span><span class="n">thread_id</span><span class="o">=</span><span class="n">thread_id</span><span class="p">,</span>',
      '<span class="w">      </span><span class="n">run_id</span><span class="o">=</span><span class="n">run_id</span>',
      '<span class="w">    </span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Run completed!&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Run completed!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Processar a resposta">Processar a resposta<a class="anchor-link" href="#Processar a resposta"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 101" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Uma vez que o assistente terminou, podemos ver a resposta.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">messages</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">beta</span><span class="o">.</span><span class="n">threads</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">list</span><span class="p">(</span>',
      '<span class="w">  </span><span class="n">thread_id</span><span class="o">=</span><span class="n">thread_id</span>',
      '<span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="nb">type</span><span class="p">(</span><span class="n">messages</span><span class="p">),</span> <span class="n">messages</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(openai.pagination.SyncCursorPage[ThreadMessage],',
          'SyncCursorPage[ThreadMessage](data=[ThreadMessage(id=&#x27;msg_JjL0uCHCPiyYxnu1FqLyBgEX&#x27;, assistant_id=&#x27;asst_A2F9DPqDiZYFc5hOC6Rb2y0x&#x27;, content=[MessageContentText(text=Text(annotations=[], value=&#x27;La salida del script es simplemente &quot;Hello world!&quot;, ya que la √∫nica instrucci√≥n en el script es imprimir esa frase.\n\nSi necesitas alguna otra aclaraci√≥n o ayuda adicional, no dudes en preguntar.&#x27;), type=&#x27;text&#x27;)], created_at=1701822487, file_ids=[], metadata=&#x7B;&#x7D;, object=&#x27;thread.message&#x27;, role=&#x27;assistant&#x27;, run_id=&#x27;run_WZxT1TUuHT5qB1ZgD34tgvPu&#x27;, thread_id=&#x27;thread_nfFT3rFjyPWHdxWvMk6jJ90H&#x27;), ThreadMessage(id=&#x27;msg_nkFbq64DTaSqxIAQUGedYmaX&#x27;, assistant_id=&#x27;asst_A2F9DPqDiZYFc5hOC6Rb2y0x&#x27;, content=[MessageContentText(text=Text(annotations=[], value=&#x27;El script proporcionado contiene una sola l√≠nea que imprime &quot;Hello world!&quot;. Ahora proceder√© a ejecutar el script para obtener su salida.&#x27;), type=&#x27;text&#x27;)], created_at=1701822485, file_ids=[], metadata=&#x7B;&#x7D;, object=&#x27;thread.message&#x27;, role=&#x27;assistant&#x27;, run_id=&#x27;run_WZxT1TUuHT5qB1ZgD34tgvPu&#x27;, thread_id=&#x27;thread_nfFT3rFjyPWHdxWvMk6jJ90H&#x27;), ThreadMessage(id=&#x27;msg_bWT6H2f6lsSUTAAhGG0KXoh7&#x27;, assistant_id=&#x27;asst_A2F9DPqDiZYFc5hOC6Rb2y0x&#x27;, content=[MessageContentText(text=Text(annotations=[], value=&#x27;Voy a revisar el archivo que has subido y ejecutar el script proporcionado. Una vez que lo haya revisado, te proporcionar√© una explicaci√≥n detallada del script y su salida.&#x27;), type=&#x27;text&#x27;)], created_at=1701822482, file_ids=[], metadata=&#x7B;&#x7D;, object=&#x27;thread.message&#x27;, role=&#x27;assistant&#x27;, run_id=&#x27;run_WZxT1TUuHT5qB1ZgD34tgvPu&#x27;, thread_id=&#x27;thread_nfFT3rFjyPWHdxWvMk6jJ90H&#x27;), ThreadMessage(id=&#x27;msg_RjDygK7c8yCqYrjnUPfeZfUg&#x27;, assistant_id=None, content=[MessageContentText(text=Text(annotations=[], value=&#x27;Ejecuta el script que te he pasado, expl√≠camelo y dime que da a la salida.&#x27;), type=&#x27;text&#x27;)], created_at=1701822481, file_ids=[&#x27;file-HF8Llyzq9RiDfQIJ8zeGrru3&#x27;], metadata=&#x7B;&#x7D;, object=&#x27;thread.message&#x27;, role=&#x27;user&#x27;, run_id=None, thread_id=&#x27;thread_nfFT3rFjyPWHdxWvMk6jJ90H&#x27;)], object=&#x27;list&#x27;, first_id=&#x27;msg_JjL0uCHCPiyYxnu1FqLyBgEX&#x27;, last_id=&#x27;msg_RjDygK7c8yCqYrjnUPfeZfUg&#x27;, has_more=False))',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">messages</span><span class="o">.</span><span class="n">data</span><span class="p">)):</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">messages</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">content</span><span class="p">)):</span>',
      '<span class="w">        </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;messages.data[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">].content[</span><span class="si">{</span><span class="n">j</span><span class="si">}</span><span class="s2">].text.value = </span><span class="si">{</span><span class="n">messages</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">value</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w">    </span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'messages.data[0].content[0].text.value = La salida del script es simplemente &quot;Hello world!&quot;, ya que la √∫nica instrucci√≥n en el script es imprimir esa frase.',
          'Si necesitas alguna otra aclaraci√≥n o ayuda adicional, no dudes en preguntar.',
          'messages.data[1].content[0].text.value = El script proporcionado contiene una sola l√≠nea que imprime &quot;Hello world!&quot;. Ahora proceder√© a ejecutar el script para obtener su salida.',
          'messages.data[2].content[0].text.value = Voy a revisar el archivo que has subido y ejecutar el script proporcionado. Una vez que lo haya revisado, te proporcionar√© una explicaci√≥n detallada del script y su salida.',
          'messages.data[3].content[0].text.value = Ejecuta el script que te he pasado, expl√≠camelo y dime que da a la salida.',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>






















    </div>

  </section>

</PostLayout>
